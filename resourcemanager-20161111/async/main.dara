/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceManager';
  @version = '2016-11-11';
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'resourcemanager.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'resourcemanager.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'resourcemanager.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'resourcemanager.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'resourcemanager.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'resourcemanager.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'resourcemanager.cn-beijing.aliyuncs.com',
    cn-chengdu = 'resourcemanager.cn-chengdu.aliyuncs.com',
    cn-hangzhou-finance = 'resourcemanager.cn-hangzhou-finance.aliyuncs.com',
    cn-hongkong = 'resourcemanager.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'resourcemanager.cn-huhehaote.aliyuncs.com',
    cn-north-2-gov-1 = 'resourcemanager.cn-north-2-gov-1.aliyuncs.com',
    cn-qingdao = 'resourcemanager.cn-qingdao.aliyuncs.com',
    cn-shanghai-finance-1 = 'resourcemanager.cn-shanghai-finance-1.aliyuncs.com',
    cn-shenzhen = 'resourcemanager.cn-shenzhen.aliyuncs.com',
    cn-shenzhen-finance-1 = 'resourcemanager.cn-shenzhen-finance-1.aliyuncs.com',
    cn-wulanchabu = 'resourcemanager.cn-wulanchabu.aliyuncs.com',
    cn-zhangjiakou = 'resourcemanager.cn-zhangjiakou.aliyuncs.com',
    eu-central-1 = 'resourcemanager.eu-central-1.aliyuncs.com',
    eu-west-1 = 'resourcemanager.eu-west-1.aliyuncs.com',
    me-east-1 = 'resourcemanager.me-east-1.aliyuncs.com',
    us-east-1 = 'resourcemanager.us-east-1.aliyuncs.com',
    us-west-1 = 'resourcemanager.us-west-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachPolicyRequest {
  accountId?: string(name='AccountId', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  principalType?: string(name='PrincipalType', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model AttachPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPolicyResponseBody(name='body'),
}

async function attachPolicy(request: AttachPolicyRequest): AttachPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CancelCreateCloudAccountRequest {
  recordId: string(name='RecordId', position='Query'),
}

model CancelCreateCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCreateCloudAccountResponseBody(name='body'),
}

async function cancelCreateCloudAccount(request: CancelCreateCloudAccountRequest): CancelCreateCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCreateCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model CancelPromoteResourceAccountRequest {
  recordId: string(name='RecordId', position='Query'),
}

model CancelPromoteResourceAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPromoteResourceAccountResponseBody(name='body'),
}

async function cancelPromoteResourceAccount(request: CancelPromoteResourceAccountRequest): CancelPromoteResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPromoteResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudAccountRequest {
  displayName: string(name='DisplayName', position='Query'),
  email: string(name='Email', position='Query'),
  enableConsolidatedBilling?: boolean(name='EnableConsolidatedBilling', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  payerAccountId?: string(name='PayerAccountId', position='Query'),
}

model CreateCloudAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    recordId?: string(name='RecordId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model CreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCloudAccountResponseBody(name='body'),
}

async function createCloudAccount(request: CreateCloudAccountRequest): CreateCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateFolderRequest {
  name: string(name='Name', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
}

model CreateFolderResponseBody = {
  folder?: {
    createDate?: string(name='CreateDate'),
    folderId?: string(name='FolderId'),
    name?: string(name='Name'),
    parentFolderId?: string(name='ParentFolderId'),
  }(name='Folder'),
  requestId?: string(name='RequestId'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFolder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  description?: string(name='Description', position='Query'),
  policyDocument?: string(name='PolicyDocument', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
}

model CreatePolicyResponseBody = {
  policy?: {
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyResponseBody(name='body'),
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyVersionRequest {
  policyDocument?: string(name='PolicyDocument', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  setAsDefault?: boolean(name='SetAsDefault', position='Query'),
}

model CreatePolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    versionId?: string(name='VersionId'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyVersionResponseBody(name='body'),
}

async function createPolicyVersion(request: CreatePolicyVersionRequest): CreatePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceAccountRequest {
  displayName: string(name='DisplayName', position='Query'),
  enableConsolidatedBilling?: boolean(name='EnableConsolidatedBilling', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  payerAccountId?: string(name='PayerAccountId', position='Query'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model CreateResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceAccountResponseBody(name='body'),
}

async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  displayName: string(name='DisplayName', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status'),
  }(name='ResourceGroup'),
}

model CreateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceGroupResponseBody(name='body'),
}

async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateRoleRequest {
  assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', position='Query'),
  description?: string(name='Description', position='Query'),
  maxSessionDuration?: long(name='MaxSessionDuration', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model CreateRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
  }(name='Role'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  customSuffix?: string(name='CustomSuffix', position='Query'),
  description?: string(name='Description', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
  }(name='Role'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFolderRequest {
  folderId: string(name='FolderId', position='Query'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFolder', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInvalidCloudAccountRecordRequest {
  recordId: string(name='RecordId', position='Query'),
}

model DeleteInvalidCloudAccountRecordResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInvalidCloudAccountRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInvalidCloudAccountRecordResponseBody(name='body'),
}

async function deleteInvalidCloudAccountRecord(request: DeleteInvalidCloudAccountRecordRequest): DeleteInvalidCloudAccountRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInvalidCloudAccountRecord', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  policyName?: string(name='PolicyName', position='Query'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyResponseBody(name='body'),
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyVersionRequest {
  policyName?: string(name='PolicyName', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model DeletePolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyVersionResponseBody(name='body'),
}

async function deletePolicyVersion(request: DeletePolicyVersionRequest): DeletePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResourceGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status'),
  }(name='ResourceGroup'),
}

model DeleteResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceGroupResponseBody(name='body'),
}

async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoleRequest {
  roleName?: string(name='RoleName', position='Query'),
}

model DeleteRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoleResponseBody(name='body'),
}

async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceLinkedRoleRequest {
  roleName?: string(name='RoleName', position='Query'),
}

model DeleteServiceLinkedRoleResponseBody = {
  deletionTaskId?: string(name='DeletionTaskId'),
  requestId?: string(name='RequestId'),
}

model DeleteServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceLinkedRoleResponseBody(name='body'),
}

async function deleteServiceLinkedRole(request: DeleteServiceLinkedRoleRequest): DeleteServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DestoryResourceDirectoryRequest {
}

model DestoryResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DestoryResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DestoryResourceDirectoryResponseBody(name='body'),
}

async function destoryResourceDirectory(request: DestoryResourceDirectoryRequest): DestoryResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestoryResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DestroyResourceDirectoryRequest {
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DestroyResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyResourceDirectoryResponseBody(name='body'),
}

async function destroyResourceDirectory(request: DestroyResourceDirectoryRequest): DestroyResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DetachPolicyRequest {
  accountId?: string(name='AccountId', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  principalType?: string(name='PrincipalType', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DetachPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPolicyResponseBody(name='body'),
}

async function detachPolicy(request: DetachPolicyRequest): DetachPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountSummaryRequest {
  accountId?: string(name='AccountId', position='Query'),
}

model GetAccountSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  summaryMap?: {
    attachedPoliciesPerGroupQuota?: int32(name='AttachedPoliciesPerGroupQuota'),
    attachedPoliciesPerRoleQuota?: int32(name='AttachedPoliciesPerRoleQuota'),
    attachedPoliciesPerUserQuota?: int32(name='AttachedPoliciesPerUserQuota'),
    attachedSystemPoliciesPerGroupQuota?: int32(name='AttachedSystemPoliciesPerGroupQuota'),
    attachedSystemPoliciesPerRoleQuota?: int32(name='AttachedSystemPoliciesPerRoleQuota'),
    attachedSystemPoliciesPerUserQuota?: int32(name='AttachedSystemPoliciesPerUserQuota'),
    policies?: int32(name='Policies'),
    policiesQuota?: int32(name='PoliciesQuota'),
    policySizeQuota?: int32(name='PolicySizeQuota'),
    resourceGroups?: int32(name='ResourceGroups'),
    resourceGroupsQuota?: int32(name='ResourceGroupsQuota'),
    roles?: int32(name='Roles'),
    rolesQuota?: int32(name='RolesQuota'),
    versionsPerPolicyQuota?: int32(name='VersionsPerPolicyQuota'),
  }(name='SummaryMap'),
}

model GetAccountSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountSummaryResponseBody(name='body'),
}

async function getAccountSummary(request: GetAccountSummaryRequest): GetAccountSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetFolderRequest {
  folderId: string(name='FolderId', position='Query'),
}

model GetFolderResponseBody = {
  folder?: {
    createDate?: string(name='CreateDate'),
    folderId?: string(name='FolderId'),
    name?: string(name='Name'),
    parentFolderId?: string(name='ParentFolderId'),
  }(name='Folder'),
  requestId?: string(name='RequestId'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFolder', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyRequest {
  language?: string(name='Language', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model GetPolicyResponseBody = {
  policy?: {
    attachmentCount?: int32(name='AttachmentCount'),
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyDocument?: string(name='PolicyDocument'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model GetPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyResponseBody(name='body'),
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyVersionRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model GetPolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    policyDocument?: string(name='PolicyDocument'),
    versionId?: string(name='VersionId'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model GetPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyVersionResponseBody(name='body'),
}

async function getPolicyVersion(request: GetPolicyVersionRequest): GetPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceDirectoryRequest {
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    createDate?: string(name='CreateDate'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    rootFolderId?: string(name='RootFolderId'),
  }(name='ResourceDirectory'),
}

model GetResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceDirectoryResponseBody(name='body'),
}

async function getResourceDirectory(request: GetResourceDirectoryRequest): GetResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceDirectoryAccountRequest {
  accountId: string(name='AccountId', position='Query'),
}

model GetResourceDirectoryAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    identityInformation?: string(name='IdentityInformation'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model GetResourceDirectoryAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceDirectoryAccountResponseBody(name='body'),
}

async function getResourceDirectoryAccount(request: GetResourceDirectoryAccountRequest): GetResourceDirectoryAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceDirectoryAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status'),
  }(name='ResourceGroup'),
}

model GetResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceGroupResponseBody(name='body'),
}

async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetRoleRequest {
  language?: string(name='Language', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model GetRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
    latestDeletionTask?: {
      createDate?: string(name='CreateDate'),
      deletionTaskId?: string(name='DeletionTaskId'),
    }(name='LatestDeletionTask'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Role'),
}

model GetRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleResponseBody(name='body'),
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRole', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceLinkedRoleDeletionStatusRequest {
  deletionTaskId?: string(name='DeletionTaskId', position='Query'),
}

model GetServiceLinkedRoleDeletionStatusResponseBody = {
  reason?: {
    message?: string(name='Message'),
    roleUsages?: {
      roleUsage?: [ 
      {
        region?: string(name='Region'),
        resources?: {
          resource?: [ string ](name='Resource')
        }(name='Resources'),
      }
    ](name='RoleUsage')
    }(name='RoleUsages'),
  }(name='Reason'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetServiceLinkedRoleDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceLinkedRoleDeletionStatusResponseBody(name='body'),
}

async function getServiceLinkedRoleDeletionStatus(request: GetServiceLinkedRoleDeletionStatusRequest): GetServiceLinkedRoleDeletionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLinkedRoleDeletionStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceLinkedRoleTemplateRequest {
  serviceName?: string(name='ServiceName', position='Query'),
}

model GetServiceLinkedRoleTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  serviceLinkedRoleTemplate?: {
    multipleRolesAllowed?: boolean(name='MultipleRolesAllowed'),
    roleDescriptions?: {
      roleDescription?: [ 
      {
        description?: string(name='Description'),
        language?: string(name='Language'),
      }
    ](name='RoleDescription')
    }(name='RoleDescriptions'),
    roleNamePrefix?: string(name='RoleNamePrefix'),
    serviceName?: string(name='ServiceName'),
    systemPolicyName?: string(name='SystemPolicyName'),
  }(name='ServiceLinkedRoleTemplate'),
}

model GetServiceLinkedRoleTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceLinkedRoleTemplateResponseBody(name='body'),
}

async function getServiceLinkedRoleTemplate(request: GetServiceLinkedRoleTemplateRequest): GetServiceLinkedRoleTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLinkedRoleTemplate', 'POST', '/', 'json', false, 'json', request);
}

model InitResourceDirectoryRequest {
}

model InitResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    createDate?: string(name='CreateDate'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    rootFolderId?: string(name='RootFolderId'),
  }(name='ResourceDirectory'),
}

model InitResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: InitResourceDirectoryResponseBody(name='body'),
}

async function initResourceDirectory(request: InitResourceDirectoryRequest): InitResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountRecordsForParentRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
}

model ListAccountRecordsForParentResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  records?: {
    record?: [ 
    {
      accountId?: string(name='AccountId'),
      accountName?: string(name='AccountName'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      joinMethod?: string(name='JoinMethod'),
      joinTime?: string(name='JoinTime'),
      modifyTime?: string(name='ModifyTime'),
      recordId?: string(name='RecordId'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Record')
  }(name='Records'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAccountRecordsForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountRecordsForParentResponseBody(name='body'),
}

async function listAccountRecordsForParent(request: ListAccountRecordsForParentRequest): ListAccountRecordsForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountRecordsForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      joinMethod?: string(name='JoinMethod'),
      joinTime?: string(name='JoinTime'),
      modifyTime?: string(name='ModifyTime'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsForParentRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
}

model ListAccountsForParentResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      joinMethod?: string(name='JoinMethod'),
      joinTime?: string(name='JoinTime'),
      modifyTime?: string(name='ModifyTime'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAccountsForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsForParentResponseBody(name='body'),
}

async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountsForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListAncestorsRequest {
  childId: string(name='ChildId', position='Query'),
}

model ListAncestorsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createDate?: string(name='CreateDate'),
      folderId?: string(name='FolderId'),
      name?: string(name='Name'),
    }
  ](name='Folder')
  }(name='Folders'),
  requestId?: string(name='RequestId'),
}

model ListAncestorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAncestorsResponseBody(name='body'),
}

async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAncestors', 'POST', '/', 'json', false, 'json', request);
}

model ListFoldersForParentRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
}

model ListFoldersForParentResponseBody = {
  folders?: {
    folder?: [ 
    {
      createDate?: string(name='CreateDate'),
      folderId?: string(name='FolderId'),
      name?: string(name='Name'),
    }
  ](name='Folder')
  }(name='Folders'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListFoldersForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListFoldersForParentResponseBody(name='body'),
}

async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFoldersForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListParentsRequest {
  childId: string(name='ChildId', position='Query'),
}

model ListParentsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createDate?: string(name='CreateDate'),
      folderId?: string(name='FolderId'),
      name?: string(name='Name'),
    }
  ](name='Folder')
  }(name='Folders'),
  requestId?: string(name='RequestId'),
}

model ListParentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListParentsResponseBody(name='body'),
}

async function listParents(request: ListParentsRequest): ListParentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListParents', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesRequest {
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  policies?: {
    policy?: [ 
    {
      attachmentCount?: int32(name='AttachmentCount'),
      createDate?: string(name='CreateDate'),
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyAttachmentsRequest {
  accountId?: string(name='AccountId', position='Query'),
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  principalType?: string(name='PrincipalType', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ListPolicyAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  policyAttachments?: {
    policyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      principalName?: string(name='PrincipalName'),
      principalType?: string(name='PrincipalType'),
      resourceGroupId?: string(name='ResourceGroupId'),
    }
  ](name='PolicyAttachment')
  }(name='PolicyAttachments'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListPolicyAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyAttachmentsResponseBody(name='body'),
}

async function listPolicyAttachments(request: ListPolicyAttachmentsRequest): ListPolicyAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyVersionsRequest {
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListPolicyVersionsResponseBody = {
  policyVersions?: {
    policyVersion?: [ 
    {
      createDate?: string(name='CreateDate'),
      isDefaultVersion?: boolean(name='IsDefaultVersion'),
      versionId?: string(name='VersionId'),
    }
  ](name='PolicyVersion')
  }(name='PolicyVersions'),
  requestId?: string(name='RequestId'),
}

model ListPolicyVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyVersionsResponseBody(name='body'),
}

async function listPolicyVersions(request: ListPolicyVersionsRequest): ListPolicyVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceGroupsRequest {
  accountId?: string(name='AccountId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListResourceGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resourceGroups?: {
    resourceGroup?: [ 
    {
      accountId?: string(name='AccountId'),
      createDate?: string(name='CreateDate'),
      displayName?: string(name='DisplayName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      status?: string(name='Status'),
    }
  ](name='ResourceGroup')
  }(name='ResourceGroups'),
  totalCount?: int32(name='TotalCount'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesRequest {
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListRolesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn'),
      createDate?: string(name='CreateDate'),
      description?: string(name='Description'),
      isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
      latestDeletionTask?: {
        createDate?: string(name='CreateDate'),
        deletionTaskId?: string(name='DeletionTaskId'),
      }(name='LatestDeletionTask'),
      maxSessionDuration?: long(name='MaxSessionDuration'),
      roleId?: string(name='RoleId'),
      roleName?: string(name='RoleName'),
      rolePrincipalName?: string(name='RolePrincipalName'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Role')
  }(name='Roles'),
  totalCount?: int32(name='TotalCount'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesForServiceRequest {
  language?: string(name='Language', position='Query'),
  service?: string(name='Service', position='Query'),
}

model ListRolesForServiceResponseBody = {
  requestId?: string(name='RequestId'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn'),
      createDate?: string(name='CreateDate'),
      description?: string(name='Description'),
      isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
      latestDeletionTask?: {
        createDate?: string(name='CreateDate'),
        deletionTaskId?: string(name='DeletionTaskId'),
      }(name='LatestDeletionTask'),
      maxSessionDuration?: long(name='MaxSessionDuration'),
      roleId?: string(name='RoleId'),
      roleName?: string(name='RoleName'),
      rolePrincipalName?: string(name='RolePrincipalName'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Role')
  }(name='Roles'),
}

model ListRolesForServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesForServiceResponseBody(name='body'),
}

async function listRolesForService(request: ListRolesForServiceRequest): ListRolesForServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRolesForService', 'POST', '/', 'json', false, 'json', request);
}

model ListTrustedServiceStatusRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListTrustedServiceStatusResponseBody = {
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      enableTime?: string(name='EnableTime'),
      servicePrincipal?: string(name='ServicePrincipal'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListTrustedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrustedServiceStatusResponseBody(name='body'),
}

async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrustedServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model MoveAccountRequest {
  accountId: string(name='AccountId', position='Query'),
  destinationFolderId: string(name='DestinationFolderId', position='Query'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveAccountResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAccountResponseBody(name='body'),
}

async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveAccount', 'POST', '/', 'json', false, 'json', request);
}

model PromoteResourceAccountRequest {
  accountId: string(name='AccountId', position='Query'),
  email: string(name='Email', position='Query'),
}

model PromoteResourceAccountResponseBody = {
  recordId?: string(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model PromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: PromoteResourceAccountResponseBody(name='body'),
}

async function promoteResourceAccount(request: PromoteResourceAccountRequest): PromoteResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PromoteResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model QueryResourceRequest {
  accountId?: string(name='AccountId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  service?: string(name='Service', position='Query'),
}

model QueryResourceResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resources?: {
    resource?: [ 
    {
      createDate?: string(name='CreateDate'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      service?: string(name='Service'),
    }
  ](name='Resource')
  }(name='Resources'),
  totalCount?: int32(name='TotalCount'),
}

model QueryResourceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResourceResponseBody(name='body'),
}

async function queryResource(request: QueryResourceRequest): QueryResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryResource', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCloudAccountRequest {
  accountId: string(name='AccountId', position='Query'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveCloudAccountResponseBody(name='body'),
}

async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model ResendCreateCloudAccountEmailRequest {
  recordId: string(name='RecordId', position='Query'),
}

model ResendCreateCloudAccountEmailResponseBody = {
  recordId?: string(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model ResendCreateCloudAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ResendCreateCloudAccountEmailResponseBody(name='body'),
}

async function resendCreateCloudAccountEmail(request: ResendCreateCloudAccountEmailRequest): ResendCreateCloudAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendCreateCloudAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model ResendPromoteResourceAccountEmailRequest {
  recordId: string(name='RecordId', position='Query'),
}

model ResendPromoteResourceAccountEmailResponseBody = {
  recordId?: string(name='RecordId'),
  requestId?: string(name='RequestId'),
}

model ResendPromoteResourceAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ResendPromoteResourceAccountEmailResponseBody(name='body'),
}

async function resendPromoteResourceAccountEmail(request: ResendPromoteResourceAccountEmailRequest): ResendPromoteResourceAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendPromoteResourceAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultPolicyVersionRequest {
  policyName?: string(name='PolicyName', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model SetDefaultPolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultPolicyVersionResponseBody(name='body'),
}

async function setDefaultPolicyVersion(request: SetDefaultPolicyVersionRequest): SetDefaultPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFolderRequest {
  folderId: string(name='FolderId', position='Query'),
  name: string(name='Name', position='Query'),
}

model UpdateFolderResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFolder', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResourceGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  newDisplayName: string(name='NewDisplayName', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='ResourceGroup'),
}

model UpdateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceGroupResponseBody(name='body'),
}

async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRoleRequest {
  newAssumeRolePolicyDocument?: string(name='NewAssumeRolePolicyDocument', position='Query'),
  newDescription?: string(name='NewDescription', position='Query'),
  newMaxSessionDuration?: long(name='NewMaxSessionDuration', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model UpdateRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Role'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRole', 'POST', '/', 'json', false, 'json', request);
}

