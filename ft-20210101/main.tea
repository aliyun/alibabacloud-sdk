/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-wulanchabu = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ft', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DataRateLimitTestResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DataRateLimitTestResponse = {
  headers: map[string]string(name='headers'),
  body: DataRateLimitTestResponseBody(name='body'),
}

async function dataRateLimitTestWithOptions(runtime: Util.RuntimeOptions): DataRateLimitTestResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DataRateLimitTest', '2021-01-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function dataRateLimitTest(): DataRateLimitTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return dataRateLimitTestWithOptions(runtime);
}

model NormalRpcHsfApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model NormalRpcHsfApiResponse = {
  headers: map[string]string(name='headers'),
  body: NormalRpcHsfApiResponseBody(name='body'),
}

async function normalRpcHsfApiWithOptions(runtime: Util.RuntimeOptions): NormalRpcHsfApiResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('NormalRpcHsfApi', '2021-01-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function normalRpcHsfApi(): NormalRpcHsfApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return normalRpcHsfApiWithOptions(runtime);
}

model NormalRpcHttpApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model NormalRpcHttpApiResponse = {
  headers: map[string]string(name='headers'),
  body: NormalRpcHttpApiResponseBody(name='body'),
}

async function normalRpcHttpApiWithOptions(runtime: Util.RuntimeOptions): NormalRpcHttpApiResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('NormalRpcHttpApi', '2021-01-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function normalRpcHttpApi(): NormalRpcHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return normalRpcHttpApiWithOptions(runtime);
}

