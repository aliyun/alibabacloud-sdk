/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ft';
  @version = '2021-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-wulanchabu = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };
}
model CreateRPCPathTestRequest {
}

model CreateRPCPathTestResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateRPCPathTestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRPCPathTestResponseBody(name='body'),
}

async function createRPCPathTest(request: CreateRPCPathTestRequest): CreateRPCPathTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRPCPathTest', 'GET', '/', 'json', false, 'none', request);
}

model CreateRamTestRequest {
}

model CreateRamTestResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  traceId?: string(name='TraceId'),
}

model CreateRamTestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRamTestResponseBody(name='body'),
}

async function createRamTest(request: CreateRamTestRequest): CreateRamTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRamTest', 'GET', '/', 'json', false, 'none', request);
}

model DataRateLimitTestRequest {
}

model DataRateLimitTestResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DataRateLimitTestResponse = {
  headers: map[string]string(name='headers'),
  body: DataRateLimitTestResponseBody(name='body'),
}

async function dataRateLimitTest(request: DataRateLimitTestRequest): DataRateLimitTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DataRateLimitTest', 'GET', '/', 'json', false, 'none', request);
}

model NormalRpcHsfApiRequest {
}

model NormalRpcHsfApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model NormalRpcHsfApiResponse = {
  headers: map[string]string(name='headers'),
  body: NormalRpcHsfApiResponseBody(name='body'),
}

async function normalRpcHsfApi(request: NormalRpcHsfApiRequest): NormalRpcHsfApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NormalRpcHsfApi', 'GET', '/', 'json', false, 'none', request);
}

model NormalRpcHttpApiRequest {
}

model NormalRpcHttpApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model NormalRpcHttpApiResponse = {
  headers: map[string]string(name='headers'),
  body: NormalRpcHttpApiResponseBody(name='body'),
}

async function normalRpcHttpApi(request: NormalRpcHttpApiRequest): NormalRpcHttpApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NormalRpcHttpApi', 'GET', '/', 'json', false, 'none', request);
}

model RpcDataUploadRequest {
  regionId?: string(name='RegionId', position='Host'),
  largeParam?: string(name='largeParam', position='Body'),
  query1?: string(name='query1', position='Query'),
  query2?: long(name='query2', position='Query'),
}

model RpcDataUploadResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  headers?: map[string]any(name='headers'),
  params?: map[string]any(name='params'),
  speed?: string(name='speed'),
  totalBytes?: long(name='totalBytes'),
  totalTime?: long(name='totalTime'),
  url?: string(name='url'),
}

model RpcDataUploadResponse = {
  headers: map[string]string(name='headers'),
  body: RpcDataUploadResponseBody(name='body'),
}

async function rpcDataUpload(request: RpcDataUploadRequest): RpcDataUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RpcDataUpload', 'POST', '/', 'json', true, 'none', request);
}

model RpcDataUploadAndDownloadRequest {
  regionId?: string(name='RegionId', position='Host'),
  query1?: string(name='query1', position='Query'),
}

model RpcDataUploadAndDownloadResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RpcDataUploadAndDownloadResponse = {
  headers: map[string]string(name='headers'),
  body: RpcDataUploadAndDownloadResponseBody(name='body'),
}

async function rpcDataUploadAndDownload(request: RpcDataUploadAndDownloadRequest): RpcDataUploadAndDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RpcDataUploadAndDownload', 'POST', '/', 'json', false, 'none', request);
}

model RpcDataUploadTestRequest {
}

model RpcDataUploadTestResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RpcDataUploadTestResponse = {
  headers: map[string]string(name='headers'),
  body: RpcDataUploadTestResponseBody(name='body'),
}

async function rpcDataUploadTest(request: RpcDataUploadTestRequest): RpcDataUploadTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RpcDataUploadTest', 'GET', '/', 'json', false, 'none', request);
}

model RpcUploadDemoRequest {
  cardData?: {
    cardMediaIdParamMap?: map[string]string(name='cardMediaIdParamMap'),
    cardParamMap?: map[string]string(name='cardParamMap'),
  }(name='cardData', position='Body'),
  outTrackId?: string(name='outTrackId', position='Body'),
  privateData?: map[string]string(name='privateData', position='Body'),
}

model RpcUploadDemoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RpcUploadDemoResponse = {
  headers: map[string]string(name='headers'),
  body: RpcUploadDemoResponseBody(name='body'),
}

async function rpcUploadDemo(request: RpcUploadDemoRequest): RpcUploadDemoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RpcUploadDemo', 'POST', '/', 'json', false, 'object', request);
}

model ServiceRouteTestRequest {
}

model ServiceRouteTestResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ServiceRouteTestResponse = {
  headers: map[string]string(name='headers'),
  body: ServiceRouteTestResponseBody(name='body'),
}

async function serviceRouteTest(request: ServiceRouteTestRequest): ServiceRouteTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ServiceRouteTest', 'GET', '/', 'json', false, 'none', request);
}

model UserGcFetchRequest {
}

model UserGcFetchResponseBody = {
  body?: string(name='Body', description='Body'),
  requestId?: string(name='RequestId', description='RequestId'),
  requestURL?: string(name='RequestURL', description='RequestURL'),
}

model UserGcFetchResponse = {
  headers: map[string]string(name='headers'),
  body: UserGcFetchResponseBody(name='body'),
}

async function userGcFetch(request: UserGcFetchRequest): UserGcFetchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UserGcFetch', 'GET', '/', 'json', false, 'none', request);
}

model UserGcGrayRequest {
}

model UserGcGrayResponseBody = {
  body?: string(name='Body', description='Body'),
  requestId?: string(name='RequestId', description='Id of the request'),
  requestURL?: string(name='RequestURL', description='RequestURL'),
}

model UserGcGrayResponse = {
  headers: map[string]string(name='headers'),
  body: UserGcGrayResponseBody(name='body'),
}

async function userGcGray(request: UserGcGrayRequest): UserGcGrayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UserGcGray', 'POST', '/', 'json', false, 'none', request);
}

model UserGcSerivceGrayRequest {
}

model UserGcSerivceGrayResponseBody = {
  body?: string(name='Body'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UserGcSerivceGrayResponse = {
  headers: map[string]string(name='headers'),
  body: UserGcSerivceGrayResponseBody(name='body'),
}

async function userGcSerivceGray(request: UserGcSerivceGrayRequest): UserGcSerivceGrayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UserGcSerivceGray', 'GET', '/', 'json', false, 'none', request);
}

model VpcInstanceAccessTestYRequest {
}

model VpcInstanceAccessTestYResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model VpcInstanceAccessTestYResponse = {
  headers: map[string]string(name='headers'),
  body: VpcInstanceAccessTestYResponseBody(name='body'),
}

async function vpcInstanceAccessTestY(request: VpcInstanceAccessTestYRequest): VpcInstanceAccessTestYResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcInstanceAccessTestY', 'GET', '/', 'json', false, 'none', request);
}

