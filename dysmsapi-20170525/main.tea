/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    ap-southeast-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'dysmsapi-xman.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dysmsapi-proxy.cn-beijing.aliyuncs.com',
    cn-hongkong = 'dysmsapi-xman.cn-hongkong.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('dysmsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddShortUrlRequest {
  effectiveDays?: string(name='EffectiveDays'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortUrlName?: string(name='ShortUrlName'),
  sourceUrl?: string(name='SourceUrl'),
}

model AddShortUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    expireDate?: string(name='ExpireDate'),
    shortUrl?: string(name='ShortUrl'),
    sourceUrl?: string(name='SourceUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: AddShortUrlResponseBody(name='body'),
}

async function addShortUrlWithOptions(request: AddShortUrlRequest, runtime: Util.RuntimeOptions): AddShortUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddShortUrl', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addShortUrl(request: AddShortUrlRequest): AddShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addShortUrlWithOptions(request, runtime);
}

model AddSmsSignRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signFileList?: [ 
    {
      fileContents?: string(name='FileContents'),
      fileSuffix?: string(name='FileSuffix'),
    }
  ](name='SignFileList'),
  signName?: string(name='SignName'),
  signSource?: int32(name='SignSource'),
}

model AddSmsSignResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
}

model AddSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: AddSmsSignResponseBody(name='body'),
}

async function addSmsSignWithOptions(request: AddSmsSignRequest, runtime: Util.RuntimeOptions): AddSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddSmsSign', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addSmsSign(request: AddSmsSignRequest): AddSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSmsSignWithOptions(request, runtime);
}

model AddSmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateType?: int32(name='TemplateType'),
}

model AddSmsTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
}

model AddSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddSmsTemplateResponseBody(name='body'),
}

async function addSmsTemplateWithOptions(request: AddSmsTemplateRequest, runtime: Util.RuntimeOptions): AddSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddSmsTemplate', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addSmsTemplate(request: AddSmsTemplateRequest): AddSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSmsTemplateWithOptions(request, runtime);
}

model DeleteShortUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceUrl?: string(name='SourceUrl'),
}

model DeleteShortUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShortUrlResponseBody(name='body'),
}

async function deleteShortUrlWithOptions(request: DeleteShortUrlRequest, runtime: Util.RuntimeOptions): DeleteShortUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteShortUrl', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteShortUrl(request: DeleteShortUrlRequest): DeleteShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShortUrlWithOptions(request, runtime);
}

model DeleteSmsSignRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
}

model DeleteSmsSignResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
}

model DeleteSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsSignResponseBody(name='body'),
}

async function deleteSmsSignWithOptions(request: DeleteSmsSignRequest, runtime: Util.RuntimeOptions): DeleteSmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSmsSign', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSmsSign(request: DeleteSmsSignRequest): DeleteSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmsSignWithOptions(request, runtime);
}

model DeleteSmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
}

model DeleteSmsTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
}

model DeleteSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsTemplateResponseBody(name='body'),
}

async function deleteSmsTemplateWithOptions(request: DeleteSmsTemplateRequest, runtime: Util.RuntimeOptions): DeleteSmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSmsTemplate', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSmsTemplate(request: DeleteSmsTemplateRequest): DeleteSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmsTemplateWithOptions(request, runtime);
}

model ModifySmsSignRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signFileList?: [ 
    {
      fileContents?: string(name='FileContents'),
      fileSuffix?: string(name='FileSuffix'),
    }
  ](name='SignFileList'),
  signName?: string(name='SignName'),
  signSource?: int32(name='SignSource'),
}

model ModifySmsSignResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
}

model ModifySmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySmsSignResponseBody(name='body'),
}

async function modifySmsSignWithOptions(request: ModifySmsSignRequest, runtime: Util.RuntimeOptions): ModifySmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySmsSign', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySmsSign(request: ModifySmsSignRequest): ModifySmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmsSignWithOptions(request, runtime);
}

model ModifySmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateType?: int32(name='TemplateType'),
}

model ModifySmsTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
}

model ModifySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySmsTemplateResponseBody(name='body'),
}

async function modifySmsTemplateWithOptions(request: ModifySmsTemplateRequest, runtime: Util.RuntimeOptions): ModifySmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySmsTemplate', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySmsTemplate(request: ModifySmsTemplateRequest): ModifySmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmsTemplateWithOptions(request, runtime);
}

model QuerySendDetailsRequest {
  bizId?: string(name='BizId'),
  currentPage?: long(name='CurrentPage'),
  ownerId?: long(name='OwnerId'),
  pageSize?: long(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate'),
}

model QuerySendDetailsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  smsSendDetailDTOs?: {
    smsSendDetailDTO?: [ 
    {
      content?: string(name='Content'),
      errCode?: string(name='ErrCode'),
      outId?: string(name='OutId'),
      phoneNum?: string(name='PhoneNum'),
      receiveDate?: string(name='ReceiveDate'),
      sendDate?: string(name='SendDate'),
      sendStatus?: long(name='SendStatus'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsSendDetailDTO')
  }(name='SmsSendDetailDTOs'),
  totalCount?: string(name='TotalCount'),
}

model QuerySendDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySendDetailsResponseBody(name='body'),
}

async function querySendDetailsWithOptions(request: QuerySendDetailsRequest, runtime: Util.RuntimeOptions): QuerySendDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySendDetails', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySendDetails(request: QuerySendDetailsRequest): QuerySendDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySendDetailsWithOptions(request, runtime);
}

model QueryShortUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortUrl?: string(name='ShortUrl'),
}

model QueryShortUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    createDate?: string(name='CreateDate'),
    expireDate?: string(name='ExpireDate'),
    pageViewCount?: string(name='PageViewCount'),
    shortUrl?: string(name='ShortUrl'),
    shortUrlName?: string(name='ShortUrlName'),
    shortUrlStatus?: string(name='ShortUrlStatus'),
    sourceUrl?: string(name='SourceUrl'),
    uniqueVisitorCount?: string(name='UniqueVisitorCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryShortUrlResponseBody(name='body'),
}

async function queryShortUrlWithOptions(request: QueryShortUrlRequest, runtime: Util.RuntimeOptions): QueryShortUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryShortUrl', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryShortUrl(request: QueryShortUrlRequest): QueryShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryShortUrlWithOptions(request, runtime);
}

model QuerySmsSignRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
}

model QuerySmsSignResponseBody = {
  code?: string(name='Code'),
  createDate?: string(name='CreateDate'),
  message?: string(name='Message'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
  signStatus?: int32(name='SignStatus'),
}

model QuerySmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsSignResponseBody(name='body'),
}

async function querySmsSignWithOptions(request: QuerySmsSignRequest, runtime: Util.RuntimeOptions): QuerySmsSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySmsSign', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySmsSign(request: QuerySmsSignRequest): QuerySmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsSignWithOptions(request, runtime);
}

model QuerySmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
}

model QuerySmsTemplateResponseBody = {
  code?: string(name='Code'),
  createDate?: string(name='CreateDate'),
  message?: string(name='Message'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateStatus?: int32(name='TemplateStatus'),
  templateType?: int32(name='TemplateType'),
}

model QuerySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsTemplateResponseBody(name='body'),
}

async function querySmsTemplateWithOptions(request: QuerySmsTemplateRequest, runtime: Util.RuntimeOptions): QuerySmsTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySmsTemplate', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySmsTemplate(request: QuerySmsTemplateRequest): QuerySmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsTemplateWithOptions(request, runtime);
}

model SendBatchSmsRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumberJson?: string(name='PhoneNumberJson'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signNameJson?: string(name='SignNameJson'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson'),
  templateCode?: string(name='TemplateCode'),
  templateParamJson?: string(name='TemplateParamJson'),
}

model SendBatchSmsResponseBody = {
  bizId?: string(name='BizId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendBatchSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendBatchSmsResponseBody(name='body'),
}

async function sendBatchSmsWithOptions(request: SendBatchSmsRequest, runtime: Util.RuntimeOptions): SendBatchSmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendBatchSms', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendBatchSms(request: SendBatchSmsRequest): SendBatchSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendBatchSmsWithOptions(request, runtime);
}

model SendSmsRequest {
  outId?: string(name='OutId'),
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  smsUpExtendCode?: string(name='SmsUpExtendCode'),
  templateCode?: string(name='TemplateCode'),
  templateParam?: string(name='TemplateParam'),
}

model SendSmsResponseBody = {
  bizId?: string(name='BizId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSmsWithOptions(request: SendSmsRequest, runtime: Util.RuntimeOptions): SendSmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendSms', '2017-05-25', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendSmsWithOptions(request, runtime);
}

