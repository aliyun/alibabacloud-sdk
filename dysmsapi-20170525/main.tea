import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'dysmsapi-proxy.cn-beijing.aliyuncs.com',
    eu-central-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model QuerySmsTemplateRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  templateCode: string(name='TemplateCode', description='templateCode'),
}

model QuerySmsTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  templateStatus: integer(name='TemplateStatus', description='module.templateStatus'),
  reason: string(name='Reason', description='module.reason'),
  templateCode: string(name='TemplateCode', description='module.templateCode'),
  templateType: integer(name='TemplateType', description='module.templateType'),
  templateName: string(name='TemplateName', description='module.templateName'),
  templateContent: string(name='TemplateContent', description='module.templateContent'),
  createDate: string(name='CreateDate', description='module.createDate'),
}

async function querySmsTemplate(request: QuerySmsTemplateRequest, runtime: Util.RuntimeOptions): QuerySmsTemplateResponse {
  Util.validateModel(request);
  return doRequest('QuerySmsTemplate', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model QuerySmsSignRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  signName: string(name='SignName', description='signName'),
}

model QuerySmsSignResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  signStatus: integer(name='SignStatus', description='module.signStatus'),
  reason: string(name='Reason', description='module.reason'),
  signName: string(name='SignName', description='module.signName'),
  createDate: string(name='CreateDate', description='module.createDate'),
}

async function querySmsSign(request: QuerySmsSignRequest, runtime: Util.RuntimeOptions): QuerySmsSignResponse {
  Util.validateModel(request);
  return doRequest('QuerySmsSign', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model ModifySmsTemplateRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  templateType: integer(name='TemplateType', description='templateType'),
  templateName: string(name='TemplateName', description='templateName'),
  templateCode: string(name='TemplateCode', description='templateCode'),
  templateContent: string(name='TemplateContent', description='templateContent'),
  remark: string(name='Remark', description='remark'),
}

model ModifySmsTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  templateCode: string(name='TemplateCode', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function modifySmsTemplate(request: ModifySmsTemplateRequest, runtime: Util.RuntimeOptions): ModifySmsTemplateResponse {
  Util.validateModel(request);
  return doRequest('ModifySmsTemplate', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model ModifySmsSignRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  signName: string(name='SignName', description='signName'),
  signSource: integer(name='SignSource', description='signSource'),
  signFileList: [
    {
      fileSuffix: string(name='FileSuffix', description='fileSuffix'),
      fileContents: string(name='FileContents', description='fileContents'),
    }
  ](name='SignFileList', description='signFileList'),
  remark: string(name='Remark', description='remark'),
}

model ModifySmsSignResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signName: string(name='SignName', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function modifySmsSign(request: ModifySmsSignRequest, runtime: Util.RuntimeOptions): ModifySmsSignResponse {
  Util.validateModel(request);
  return doRequest('ModifySmsSign', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model DeleteSmsTemplateRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  templateCode: string(name='TemplateCode', description='templateCode'),
}

model DeleteSmsTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  templateCode: string(name='TemplateCode', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function deleteSmsTemplate(request: DeleteSmsTemplateRequest, runtime: Util.RuntimeOptions): DeleteSmsTemplateResponse {
  Util.validateModel(request);
  return doRequest('DeleteSmsTemplate', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model DeleteSmsSignRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  signName: string(name='SignName', description='signName'),
}

model DeleteSmsSignResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signName: string(name='SignName', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function deleteSmsSign(request: DeleteSmsSignRequest, runtime: Util.RuntimeOptions): DeleteSmsSignResponse {
  Util.validateModel(request);
  return doRequest('DeleteSmsSign', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model AddSmsTemplateRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  templateType: integer(name='TemplateType', description='templateType'),
  templateName: string(name='TemplateName', description='templateName'),
  templateContent: string(name='TemplateContent', description='templateContent'),
  remark: string(name='Remark', description='remark'),
}

model AddSmsTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  templateCode: string(name='TemplateCode', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function addSmsTemplate(request: AddSmsTemplateRequest, runtime: Util.RuntimeOptions): AddSmsTemplateResponse {
  Util.validateModel(request);
  return doRequest('AddSmsTemplate', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model AddSmsSignRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  signName: string(name='SignName', description='signName'),
  signSource: integer(name='SignSource', description='signSource'),
  signFileList: [
    {
      fileSuffix: string(name='FileSuffix', description='fileSuffix'),
      fileContents: string(name='FileContents', description='fileContents'),
    }
  ](name='SignFileList', description='signFileList'),
  remark: string(name='Remark', description='remark'),
}

model AddSmsSignResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signName: string(name='SignName', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function addSmsSign(request: AddSmsSignRequest, runtime: Util.RuntimeOptions): AddSmsSignResponse {
  Util.validateModel(request);
  return doRequest('AddSmsSign', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model SendBatchSmsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumberJson: string(name='PhoneNumberJson', description='phoneNumberJson'),
  signNameJson: string(name='SignNameJson', description='signNameJson'),
  templateCode: string(name='TemplateCode', description='templateCode'),
  templateParamJson?: string(name='TemplateParamJson', description='templateParamJsonNew'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson', description='smsUpExtendCodeJson'),
}

model SendBatchSmsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  bizId: string(name='BizId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function sendBatchSms(request: SendBatchSmsRequest, runtime: Util.RuntimeOptions): SendBatchSmsResponse {
  Util.validateModel(request);
  return doRequest('SendBatchSms', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model SendSmsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumbers: string(name='PhoneNumbers', description='phoneNumbers'),
  signName: string(name='SignName', description='signName'),
  templateCode: string(name='TemplateCode', description='templateCode'),
  templateParam?: string(name='TemplateParam', description='templateParam'),
  smsUpExtendCode?: string(name='SmsUpExtendCode', description='smsUpExtendCode'),
  outId?: string(name='OutId', description='outId'),
}

model SendSmsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  bizId: string(name='BizId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function sendSms(request: SendSmsRequest, runtime: Util.RuntimeOptions): SendSmsResponse {
  Util.validateModel(request);
  return doRequest('SendSms', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

model QuerySendDetailsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber: string(name='PhoneNumber', description='phoneNumber'),
  bizId?: string(name='BizId', description='bizId'),
  sendDate: string(name='SendDate', description='sendDate'),
  pageSize: long(name='PageSize', description='pageSize'),
  currentPage: long(name='CurrentPage', description='currentPage'),
}

model QuerySendDetailsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  totalCount: string(name='TotalCount', description='totalCount'),
  smsSendDetailDTOs: {
    smsSendDetailDTO: [
      {
        phoneNum: string(name='PhoneNum', description='phoneNum'),
        sendStatus: long(name='SendStatus', description='sendStatus'),
        errCode: string(name='ErrCode', description='errCode'),
        templateCode: string(name='TemplateCode', description='templateCode'),
        content: string(name='Content', description='content'),
        sendDate: string(name='SendDate', description='sendDate'),
        receiveDate: string(name='ReceiveDate', description='receiveDate'),
        outId: string(name='OutId', description='outId'),
      }
    ](name='SmsSendDetailDTO', description='SmsSendDetailDTO'),
  }(name='SmsSendDetailDTOs', description='module'),
}

async function querySendDetails(request: QuerySendDetailsRequest, runtime: Util.RuntimeOptions): QuerySendDetailsResponse {
  Util.validateModel(request);
  return doRequest('QuerySendDetails', 'HTTPS', 'GET', '2017-05-25', 'AK', request, null, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
