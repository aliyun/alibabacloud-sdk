/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-southeast-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'dysmsapi.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dysmsapi-proxy.cn-beijing.aliyuncs.com',
    cn-hongkong = 'dysmsapi-xman.cn-hongkong.aliyuncs.com',
    eu-central-1 = 'dysmsapi.eu-central-1.aliyuncs.com',
    us-east-1 = 'dysmsapi.us-east-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dysmsapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddShortUrlRequest {
  effectiveDays?: string(name='EffectiveDays', example='7'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortUrlName?: string(name='ShortUrlName'),
  sourceUrl?: string(name='SourceUrl', example='https://www.****.com/product/sms'),
}

model AddShortUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    expireDate?: string(name='ExpireDate', example='2021-09-19 00:00:00'),
    shortUrl?: string(name='ShortUrl', example='http://****.cn/6y8uy7'),
    sourceUrl?: string(name='SourceUrl', example='https://www.****.com/product/sms'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model AddShortUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddShortUrlResponseBody(name='body'),
}

async function addShortUrlWithOptions(request: AddShortUrlRequest, runtime: Util.RuntimeOptions): AddShortUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.effectiveDays)) {
    body['EffectiveDays'] = request.effectiveDays;
  }
  if (!Util.isUnset(request.shortUrlName)) {
    body['ShortUrlName'] = request.shortUrlName;
  }
  if (!Util.isUnset(request.sourceUrl)) {
    body['SourceUrl'] = request.sourceUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddShortUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addShortUrl(request: AddShortUrlRequest): AddShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addShortUrlWithOptions(request, runtime);
}

model AddSmsSignRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signFileList?: [ 
    {
      fileContents?: string(name='FileContents', example='R0lGODlhHAAmAKIHAKqqqsvLy0hISObm5vf394uL****'),
      fileSuffix?: string(name='FileSuffix', example='jpg'),
    }
  ](name='SignFileList'),
  signName?: string(name='SignName'),
  signSource?: int32(name='SignSource', example='1'),
  signType?: int32(name='SignType', example='1'),
}

model AddSmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  signName?: string(name='SignName'),
}

model AddSmsSignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSmsSignResponseBody(name='body'),
}

async function addSmsSignWithOptions(request: AddSmsSignRequest, runtime: Util.RuntimeOptions): AddSmsSignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.signSource)) {
    query['SignSource'] = request.signSource;
  }
  if (!Util.isUnset(request.signType)) {
    query['SignType'] = request.signType;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.signFileList)) {
    body['SignFileList'] = request.signFileList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddSmsSign',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSmsSign(request: AddSmsSignRequest): AddSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSmsSignWithOptions(request, runtime);
}

model AddSmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateType?: int32(name='TemplateType', example='1'),
}

model AddSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  templateCode?: string(name='TemplateCode', example='SMS_15255****'),
}

model AddSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSmsTemplateResponseBody(name='body'),
}

async function addSmsTemplateWithOptions(request: AddSmsTemplateRequest, runtime: Util.RuntimeOptions): AddSmsTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateContent)) {
    query['TemplateContent'] = request.templateContent;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSmsTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSmsTemplate(request: AddSmsTemplateRequest): AddSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSmsTemplateWithOptions(request, runtime);
}

model CheckMobilesCardSupportRequest {
  mobiles?: [  map[string]any ](name='Mobiles'),
  templateCode?: string(name='TemplateCode', example='CARD_SMS_****'),
}

model CheckMobilesCardSupportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    queryResult?: [ 
      {
        mobile?: string(name='mobile', example='1390000****'),
        support?: boolean(name='support', example='true'),
      }
    ](name='queryResult'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
  success?: boolean(name='Success', example='true'),
}

model CheckMobilesCardSupportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMobilesCardSupportResponseBody(name='body'),
}

async function checkMobilesCardSupportWithOptions(request: CheckMobilesCardSupportRequest, runtime: Util.RuntimeOptions): CheckMobilesCardSupportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mobiles)) {
    query['Mobiles'] = request.mobiles;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMobilesCardSupport',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMobilesCardSupport(request: CheckMobilesCardSupportRequest): CheckMobilesCardSupportResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMobilesCardSupportWithOptions(request, runtime);
}

model ConversionDataIntlRequest {
  conversionRate?: string(name='ConversionRate', example='0.53'),
  ownerId?: long(name='OwnerId'),
  reportTime?: long(name='ReportTime', example='1349055900000'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ConversionDataIntlResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D****'),
}

model ConversionDataIntlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConversionDataIntlResponseBody(name='body'),
}

async function conversionDataIntlWithOptions(request: ConversionDataIntlRequest, runtime: Util.RuntimeOptions): ConversionDataIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.conversionRate)) {
    query['ConversionRate'] = request.conversionRate;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.reportTime)) {
    query['ReportTime'] = request.reportTime;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConversionDataIntl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function conversionDataIntl(request: ConversionDataIntlRequest): ConversionDataIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return conversionDataIntlWithOptions(request, runtime);
}

model CreateCardSmsTemplateRequest {
  factorys?: string(name='Factorys', example='XiaoMi'),
  memo?: string(name='Memo'),
  template?: map[string]any(name='Template'),
  templateName?: string(name='TemplateName'),
}

model CreateCardSmsTemplateShrinkRequest {
  factorys?: string(name='Factorys', example='XiaoMi'),
  memo?: string(name='Memo'),
  templateShrink?: string(name='Template'),
  templateName?: string(name='TemplateName'),
}

model CreateCardSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', example='CARD_SMS_60000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  success?: boolean(name='Success', example='true'),
}

model CreateCardSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCardSmsTemplateResponseBody(name='body'),
}

async function createCardSmsTemplateWithOptions(tmpReq: CreateCardSmsTemplateRequest, runtime: Util.RuntimeOptions): CreateCardSmsTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCardSmsTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.template)) {
    request.templateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.template, 'Template', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.factorys)) {
    query['Factorys'] = request.factorys;
  }
  if (!Util.isUnset(request.memo)) {
    query['Memo'] = request.memo;
  }
  if (!Util.isUnset(request.templateShrink)) {
    query['Template'] = request.templateShrink;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCardSmsTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCardSmsTemplate(request: CreateCardSmsTemplateRequest): CreateCardSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCardSmsTemplateWithOptions(request, runtime);
}

model CreateSmartShortUrlRequest {
  expiration?: long(name='Expiration', example='46'),
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: string(name='PhoneNumbers', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceName?: string(name='SourceName', example='示例值示例值'),
  sourceUrl?: string(name='SourceUrl', example='示例值'),
}

model CreateSmartShortUrlResponseBody = {
  code?: string(name='Code', example='示例值示例值示例值'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: [ 
    {
      domain?: string(name='Domain', example='示例值'),
      expiration?: long(name='Expiration', example='11'),
      phoneNumber?: string(name='PhoneNumber', example='示例值'),
      shortName?: string(name='ShortName', example='示例值'),
      shortUrl?: string(name='ShortUrl', example='示例值示例值'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
}

model CreateSmartShortUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSmartShortUrlResponseBody(name='body'),
}

async function createSmartShortUrlWithOptions(request: CreateSmartShortUrlRequest, runtime: Util.RuntimeOptions): CreateSmartShortUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumbers)) {
    query['PhoneNumbers'] = request.phoneNumbers;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceName)) {
    query['SourceName'] = request.sourceName;
  }
  if (!Util.isUnset(request.sourceUrl)) {
    query['SourceUrl'] = request.sourceUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSmartShortUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSmartShortUrl(request: CreateSmartShortUrlRequest): CreateSmartShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmartShortUrlWithOptions(request, runtime);
}

model DeleteShortUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceUrl?: string(name='SourceUrl', example='https://www.****.com/product/sms'),
}

model DeleteShortUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model DeleteShortUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteShortUrlResponseBody(name='body'),
}

async function deleteShortUrlWithOptions(request: DeleteShortUrlRequest, runtime: Util.RuntimeOptions): DeleteShortUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.sourceUrl)) {
    body['SourceUrl'] = request.sourceUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteShortUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteShortUrl(request: DeleteShortUrlRequest): DeleteShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShortUrlWithOptions(request, runtime);
}

model DeleteSmsSignRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
}

model DeleteSmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D****'),
  signName?: string(name='SignName'),
}

model DeleteSmsSignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSmsSignResponseBody(name='body'),
}

async function deleteSmsSignWithOptions(request: DeleteSmsSignRequest, runtime: Util.RuntimeOptions): DeleteSmsSignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSmsSign',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSmsSign(request: DeleteSmsSignRequest): DeleteSmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmsSignWithOptions(request, runtime);
}

model DeleteSmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', example='SMS_152550****'),
}

model DeleteSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CCA2BCFF-2BA7-427C-90EE-AC6994748607'),
  templateCode?: string(name='TemplateCode', example='SMS_20375****'),
}

model DeleteSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSmsTemplateResponseBody(name='body'),
}

async function deleteSmsTemplateWithOptions(request: DeleteSmsTemplateRequest, runtime: Util.RuntimeOptions): DeleteSmsTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSmsTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSmsTemplate(request: DeleteSmsTemplateRequest): DeleteSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmsTemplateWithOptions(request, runtime);
}

model GetCardSmsLinkRequest {
  cardCodeType?: int32(name='CardCodeType', example='2'),
  cardLinkType?: int32(name='CardLinkType', example='1'),
  cardTemplateCode?: string(name='CardTemplateCode', example='CARD_SMS_****'),
  cardTemplateParamJson?: string(name='CardTemplateParamJson'),
  customShortCodeJson?: string(name='CustomShortCodeJson', example='abCde'),
  domain?: string(name='Domain'),
  outId?: string(name='OutId', example='BC20220608102511660860762****'),
  phoneNumberJson?: string(name='PhoneNumberJson', example='[\\"1390000****
\\",\\"1370000****
\\"]'),
  signNameJson?: string(name='SignNameJson'),
}

model GetCardSmsLinkResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    cardPhoneNumbers?: string(name='CardPhoneNumbers'),
    cardSignNames?: string(name='CardSignNames'),
    cardSmsLinks?: string(name='CardSmsLinks', example='[\\"mw2m.cn/LAaGGa\\",\\"mw2m.cn/LAAaes\\"]'),
    cardTmpState?: int32(name='CardTmpState', example='0'),
    notMediaMobiles?: string(name='NotMediaMobiles', example='1390000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CC89A90C-978F-46AC-B80D-54738371E7CA'),
  success?: boolean(name='Success', example='true'),
}

model GetCardSmsLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCardSmsLinkResponseBody(name='body'),
}

async function getCardSmsLinkWithOptions(request: GetCardSmsLinkRequest, runtime: Util.RuntimeOptions): GetCardSmsLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cardCodeType)) {
    query['CardCodeType'] = request.cardCodeType;
  }
  if (!Util.isUnset(request.cardLinkType)) {
    query['CardLinkType'] = request.cardLinkType;
  }
  if (!Util.isUnset(request.cardTemplateCode)) {
    query['CardTemplateCode'] = request.cardTemplateCode;
  }
  if (!Util.isUnset(request.cardTemplateParamJson)) {
    query['CardTemplateParamJson'] = request.cardTemplateParamJson;
  }
  if (!Util.isUnset(request.customShortCodeJson)) {
    query['CustomShortCodeJson'] = request.customShortCodeJson;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.phoneNumberJson)) {
    query['PhoneNumberJson'] = request.phoneNumberJson;
  }
  if (!Util.isUnset(request.signNameJson)) {
    query['SignNameJson'] = request.signNameJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCardSmsLink',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCardSmsLink(request: GetCardSmsLinkRequest): GetCardSmsLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCardSmsLinkWithOptions(request, runtime);
}

model GetMediaResourceIdRequest {
  extendInfo?: string(name='ExtendInfo', example='{\\"img_rate\\":\\"oneToOne\\"}'),
  fileSize?: long(name='FileSize', example='12'),
  memo?: string(name='Memo'),
  ossKey?: string(name='OssKey', example='oss://alicom-fc-media/1947741454322274/alicom-fc-media/pic/202205191526575398603697152.png'),
  resourceType?: int32(name='ResourceType', example='1'),
}

model GetMediaResourceIdResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    resUrlDownload?: string(name='ResUrlDownload', example='http://test-example.com/download.jpg'),
    resourceId?: long(name='ResourceId', example='SMS_14571****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F07CF237-F6E3-5F77-B91B-F9B7C5DE84AB'),
  success?: boolean(name='Success', example='true'),
}

model GetMediaResourceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMediaResourceIdResponseBody(name='body'),
}

async function getMediaResourceIdWithOptions(request: GetMediaResourceIdRequest, runtime: Util.RuntimeOptions): GetMediaResourceIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extendInfo)) {
    query['ExtendInfo'] = request.extendInfo;
  }
  if (!Util.isUnset(request.fileSize)) {
    query['FileSize'] = request.fileSize;
  }
  if (!Util.isUnset(request.memo)) {
    query['Memo'] = request.memo;
  }
  if (!Util.isUnset(request.ossKey)) {
    query['OssKey'] = request.ossKey;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMediaResourceId',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMediaResourceId(request: GetMediaResourceIdRequest): GetMediaResourceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaResourceIdWithOptions(request, runtime);
}

model GetOSSInfoForCardTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='LTAIxetqt1Dg****'),
    aliUid?: string(name='AliUid', example='599333677478****'),
    bucket?: string(name='Bucket', example='alicom-cardsms-resources'),
    expireTime?: string(name='ExpireTime', example='1634209418'),
    host?: string(name='Host', example='https://alicom-cardsms-resources.oss-cn-zhangjiakou.aliyuncs.com'),
    policy?: string(name='Policy', example='eyJxxx0='),
    signature?: string(name='Signature'),
    startPath?: string(name='StartPath', example='1631792777'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  success?: boolean(name='Success', example='true'),
}

model GetOSSInfoForCardTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOSSInfoForCardTemplateResponseBody(name='body'),
}

async function getOSSInfoForCardTemplateWithOptions(runtime: Util.RuntimeOptions): GetOSSInfoForCardTemplateResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetOSSInfoForCardTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOSSInfoForCardTemplate(): GetOSSInfoForCardTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOSSInfoForCardTemplateWithOptions(runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize', example='20'),
  prodCode?: string(name='ProdCode', example='dysms'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='SMS_23423423'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='TEMPLATE'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code', example='OK'),
  nextToken?: string(name='NextToken', example='"23432453245"'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='SMS_23423****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::DYSMS::TEMPLATE'),
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValue?: string(name='TagValue', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifySmsSignRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signFileList?: [ 
    {
      fileContents?: string(name='FileContents', example='R0lGODlhHAAmAKIHAKqqqsvLy0hISObm5vf394uLiwAA'),
      fileSuffix?: string(name='FileSuffix', example='jpg'),
    }
  ](name='SignFileList'),
  signName?: string(name='SignName'),
  signSource?: int32(name='SignSource', example='1'),
  signType?: int32(name='SignType', example='1'),
}

model ModifySmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  signName?: string(name='SignName'),
}

model ModifySmsSignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySmsSignResponseBody(name='body'),
}

async function modifySmsSignWithOptions(request: ModifySmsSignRequest, runtime: Util.RuntimeOptions): ModifySmsSignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.signSource)) {
    query['SignSource'] = request.signSource;
  }
  if (!Util.isUnset(request.signType)) {
    query['SignType'] = request.signType;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.signFileList)) {
    body['SignFileList'] = request.signFileList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifySmsSign',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySmsSign(request: ModifySmsSignRequest): ModifySmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmsSignWithOptions(request, runtime);
}

model ModifySmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', example='SMS_15255****'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateType?: int32(name='TemplateType', example='1'),
}

model ModifySmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  templateCode?: string(name='TemplateCode', example='SMS_15255****'),
}

model ModifySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySmsTemplateResponseBody(name='body'),
}

async function modifySmsTemplateWithOptions(request: ModifySmsTemplateRequest, runtime: Util.RuntimeOptions): ModifySmsTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateContent)) {
    query['TemplateContent'] = request.templateContent;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySmsTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySmsTemplate(request: ModifySmsTemplateRequest): ModifySmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmsTemplateWithOptions(request, runtime);
}

model QueryCardSmsTemplateRequest {
  templateCode?: string(name='TemplateCode', example='CARD_SMS_4139'),
}

model QueryCardSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    templates?: [  map[string]any ](name='Templates'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  success?: boolean(name='Success', example='true'),
}

model QueryCardSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCardSmsTemplateResponseBody(name='body'),
}

async function queryCardSmsTemplateWithOptions(request: QueryCardSmsTemplateRequest, runtime: Util.RuntimeOptions): QueryCardSmsTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCardSmsTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCardSmsTemplate(request: QueryCardSmsTemplateRequest): QueryCardSmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCardSmsTemplateWithOptions(request, runtime);
}

model QueryCardSmsTemplateReportRequest {
  endDate?: string(name='EndDate', example='2020-10-11 00:00:01'),
  startDate?: string(name='StartDate', example='2020-10-10 00:00:01'),
  templateCodes?: [ string ](name='TemplateCodes'),
}

model QueryCardSmsTemplateReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    model?: [  map[string]any ](name='model'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CC89A90C-978F-46AC-B80D-54738371E7CA'),
  success?: boolean(name='Success', example='true'),
}

model QueryCardSmsTemplateReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCardSmsTemplateReportResponseBody(name='body'),
}

async function queryCardSmsTemplateReportWithOptions(request: QueryCardSmsTemplateReportRequest, runtime: Util.RuntimeOptions): QueryCardSmsTemplateReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.templateCodes)) {
    query['TemplateCodes'] = request.templateCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCardSmsTemplateReport',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCardSmsTemplateReport(request: QueryCardSmsTemplateReportRequest): QueryCardSmsTemplateReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCardSmsTemplateReportWithOptions(request, runtime);
}

model QueryMobilesCardSupportRequest {
  mobiles?: [  map[string]any ](name='Mobiles'),
  templateCode?: string(name='TemplateCode'),
}

model QueryMobilesCardSupportShrinkRequest {
  mobilesShrink?: string(name='Mobiles'),
  templateCode?: string(name='TemplateCode'),
}

model QueryMobilesCardSupportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    queryResult?: [ 
      {
        mobile?: string(name='Mobile'),
        support?: boolean(name='Support'),
      }
    ](name='QueryResult'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='08C17DFE-2E10-54F4-BAFB-7180039CC217'),
  success?: boolean(name='Success'),
}

model QueryMobilesCardSupportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMobilesCardSupportResponseBody(name='body'),
}

async function queryMobilesCardSupportWithOptions(tmpReq: QueryMobilesCardSupportRequest, runtime: Util.RuntimeOptions): QueryMobilesCardSupportResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMobilesCardSupportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mobiles)) {
    request.mobilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mobiles, 'Mobiles', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.mobilesShrink)) {
    query['Mobiles'] = request.mobilesShrink;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMobilesCardSupport',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMobilesCardSupport(request: QueryMobilesCardSupportRequest): QueryMobilesCardSupportResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMobilesCardSupportWithOptions(request, runtime);
}

model QueryPageSmartShortUrlLogRequest {
  clickState?: long(name='ClickState', example='12'),
  createDateEnd?: long(name='CreateDateEnd', example='14'),
  createDateStart?: long(name='CreateDateStart', example='31'),
  endId?: long(name='EndId', example='46'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', example='99'),
  pageSize?: long(name='PageSize', example='84'),
  phoneNumber?: string(name='PhoneNumber', example='示例值示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortName?: string(name='ShortName', example='示例值示例值示例值'),
  shortUrl?: string(name='ShortUrl', example='示例值示例值示例值'),
  startId?: long(name='StartId', example='89'),
}

model QueryPageSmartShortUrlLogResponseBody = {
  code?: string(name='Code', example='示例值示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    list?: [ 
      {
        clickState?: long(name='ClickState', example='87'),
        clickTime?: long(name='ClickTime', example='51'),
        createTime?: long(name='CreateTime', example='64'),
        phoneNumber?: string(name='PhoneNumber', example='示例值示例值'),
        shortName?: string(name='ShortName', example='示例值示例值示例值'),
        shortUrl?: string(name='ShortUrl', example='示例值示例值示例值'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='74'),
    pageSize?: long(name='PageSize', example='15'),
    totalCount?: long(name='TotalCount', example='66'),
    totalPage?: long(name='TotalPage', example='86'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model QueryPageSmartShortUrlLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPageSmartShortUrlLogResponseBody(name='body'),
}

async function queryPageSmartShortUrlLogWithOptions(request: QueryPageSmartShortUrlLogRequest, runtime: Util.RuntimeOptions): QueryPageSmartShortUrlLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clickState)) {
    query['ClickState'] = request.clickState;
  }
  if (!Util.isUnset(request.createDateEnd)) {
    query['CreateDateEnd'] = request.createDateEnd;
  }
  if (!Util.isUnset(request.createDateStart)) {
    query['CreateDateStart'] = request.createDateStart;
  }
  if (!Util.isUnset(request.endId)) {
    query['EndId'] = request.endId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.shortName)) {
    query['ShortName'] = request.shortName;
  }
  if (!Util.isUnset(request.shortUrl)) {
    query['ShortUrl'] = request.shortUrl;
  }
  if (!Util.isUnset(request.startId)) {
    query['StartId'] = request.startId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPageSmartShortUrlLog',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPageSmartShortUrlLog(request: QueryPageSmartShortUrlLogRequest): QueryPageSmartShortUrlLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPageSmartShortUrlLogWithOptions(request, runtime);
}

model QuerySendDetailsRequest {
  bizId?: string(name='BizId', example='134523^435****'),
  currentPage?: long(name='CurrentPage', example='1'),
  ownerId?: long(name='OwnerId'),
  pageSize?: long(name='PageSize', example='10'),
  phoneNumber?: string(name='PhoneNumber', example='1390000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate', example='20181228'),
}

model QuerySendDetailsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
  smsSendDetailDTOs?: {
    smsSendDetailDTO?: [ 
    {
      content?: string(name='Content'),
      errCode?: string(name='ErrCode', example='DELIVERED'),
      outId?: string(name='OutId', example='123'),
      phoneNum?: string(name='PhoneNum', example='1390000****'),
      receiveDate?: string(name='ReceiveDate', example='2019-01-08 16:44:13'),
      sendDate?: string(name='SendDate', example='2019-01-08 16:44:10'),
      sendStatus?: long(name='SendStatus', example='3'),
      templateCode?: string(name='TemplateCode', example='SMS_12231****'),
    }
  ](name='SmsSendDetailDTO')
  }(name='SmsSendDetailDTOs'),
  totalCount?: string(name='TotalCount', example='1'),
}

model QuerySendDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySendDetailsResponseBody(name='body'),
}

async function querySendDetailsWithOptions(request: QuerySendDetailsRequest, runtime: Util.RuntimeOptions): QuerySendDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySendDetails',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySendDetails(request: QuerySendDetailsRequest): QuerySendDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySendDetailsWithOptions(request, runtime);
}

model QuerySendStatisticsRequest {
  endDate?: string(name='EndDate', example='20201003'),
  isGlobe?: int32(name='IsGlobe', example='1'),
  ownerId?: long(name='OwnerId'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  startDate?: string(name='StartDate', example='20201002'),
  templateType?: int32(name='TemplateType', example='0'),
}

model QuerySendStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    targetList?: [ 
      {
        noRespondedCount?: long(name='NoRespondedCount', example='1'),
        respondedFailCount?: long(name='RespondedFailCount', example='2'),
        respondedSuccessCount?: long(name='RespondedSuccessCount', example='17'),
        sendDate?: string(name='SendDate', example='20201010'),
        totalCount?: long(name='TotalCount', example='20'),
      }
    ](name='TargetList'),
    totalSize?: long(name='TotalSize', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E47708****'),
}

model QuerySendStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySendStatisticsResponseBody(name='body'),
}

async function querySendStatisticsWithOptions(request: QuerySendStatisticsRequest, runtime: Util.RuntimeOptions): QuerySendStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.isGlobe)) {
    query['IsGlobe'] = request.isGlobe;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySendStatistics',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySendStatistics(request: QuerySendStatisticsRequest): QuerySendStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySendStatisticsWithOptions(request, runtime);
}

model QueryShortUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortUrl?: string(name='ShortUrl', example='http://****.cn/6y8uy7'),
}

model QueryShortUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createDate?: string(name='CreateDate', example='2019-01-08 16:44:13'),
    expireDate?: string(name='ExpireDate', example='2019-01-22 11:21:11'),
    pageViewCount?: string(name='PageViewCount', example='300'),
    shortUrl?: string(name='ShortUrl', example='http://****.cn/6y8uy7'),
    shortUrlName?: string(name='ShortUrlName'),
    shortUrlStatus?: string(name='ShortUrlStatus', example='expired'),
    sourceUrl?: string(name='SourceUrl', example='https://www.****.com/product/sms'),
    uniqueVisitorCount?: string(name='UniqueVisitorCount', example='23'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model QueryShortUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryShortUrlResponseBody(name='body'),
}

async function queryShortUrlWithOptions(request: QueryShortUrlRequest, runtime: Util.RuntimeOptions): QueryShortUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shortUrl)) {
    body['ShortUrl'] = request.shortUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryShortUrl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryShortUrl(request: QueryShortUrlRequest): QueryShortUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryShortUrlWithOptions(request, runtime);
}

model QuerySmsSignRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
}

model QuerySmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  createDate?: string(name='CreateDate', example='2019-01-08 16:44:13'),
  message?: string(name='Message', example='OK'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId', example='CC89A90C-978F-46AC-B80D-54738371E7CA'),
  signName?: string(name='SignName'),
  signStatus?: int32(name='SignStatus', example='1'),
}

model QuerySmsSignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySmsSignResponseBody(name='body'),
}

async function querySmsSignWithOptions(request: QuerySmsSignRequest, runtime: Util.RuntimeOptions): QuerySmsSignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySmsSign',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySmsSign(request: QuerySmsSignRequest): QuerySmsSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsSignWithOptions(request, runtime);
}

model QuerySmsSignListRequest {
  ownerId?: long(name='OwnerId'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsSignListResponseBody = {
  code?: string(name='Code', example='OK'),
  currentPage?: int32(name='CurrentPage', example='1'),
  message?: string(name='Message', example='OK'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E47708****'),
  smsSignList?: [ 
    {
      auditStatus?: string(name='AuditStatus', example='AUDIT_STATE_NOT_PASS'),
      businessType?: string(name='BusinessType'),
      createDate?: string(name='CreateDate', example='2020-01-08 16:44:13'),
      orderId?: string(name='OrderId', example='236****5'),
      reason?: {
        rejectDate?: string(name='RejectDate', example='2020-01-08 19:02:13'),
        rejectInfo?: string(name='RejectInfo'),
        rejectSubInfo?: string(name='RejectSubInfo'),
      }(name='Reason'),
      signName?: string(name='SignName'),
    }
  ](name='SmsSignList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QuerySmsSignListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySmsSignListResponseBody(name='body'),
}

async function querySmsSignListWithOptions(request: QuerySmsSignListRequest, runtime: Util.RuntimeOptions): QuerySmsSignListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySmsSignList',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySmsSignList(request: QuerySmsSignListRequest): QuerySmsSignListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsSignListWithOptions(request, runtime);
}

model QuerySmsTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', example='SMS_1525***'),
}

model QuerySmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  createDate?: string(name='CreateDate', example='2019-06-04 11:42:17'),
  message?: string(name='Message', example='OK'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId', example='0A974B78-02BF-4C79-ADF3-90CFBA1B55B1'),
  templateCode?: string(name='TemplateCode', example='SMS_16703****'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateStatus?: int32(name='TemplateStatus', example='1'),
  templateType?: int32(name='TemplateType', example='1'),
}

model QuerySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySmsTemplateResponseBody(name='body'),
}

async function querySmsTemplateWithOptions(request: QuerySmsTemplateRequest, runtime: Util.RuntimeOptions): QuerySmsTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySmsTemplate',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySmsTemplate(request: QuerySmsTemplateRequest): QuerySmsTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsTemplateWithOptions(request, runtime);
}

model QuerySmsTemplateListRequest {
  ownerId?: long(name='OwnerId'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsTemplateListResponseBody = {
  code?: string(name='Code', example='OK'),
  currentPage?: int32(name='CurrentPage', example='1'),
  message?: string(name='Message', example='OK'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E47708****'),
  smsTemplateList?: [ 
    {
      auditStatus?: string(name='AuditStatus', example='AUDIT_STATE_PASS'),
      createDate?: string(name='CreateDate', example='2020-06-04 11:42:17'),
      orderId?: string(name='OrderId', example='2361****'),
      outerTemplateType?: int32(name='OuterTemplateType', example='0'),
      reason?: {
        rejectDate?: string(name='RejectDate', example='2020-06-04 16:01:17'),
        rejectInfo?: string(name='RejectInfo'),
        rejectSubInfo?: string(name='RejectSubInfo'),
      }(name='Reason'),
      templateCode?: string(name='TemplateCode', example='SMS_1525***'),
      templateContent?: string(name='TemplateContent', example='123456789'),
      templateName?: string(name='TemplateName'),
      templateType?: int32(name='TemplateType', example='7'),
    }
  ](name='SmsTemplateList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QuerySmsTemplateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySmsTemplateListResponseBody(name='body'),
}

async function querySmsTemplateListWithOptions(request: QuerySmsTemplateListRequest, runtime: Util.RuntimeOptions): QuerySmsTemplateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySmsTemplateList',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySmsTemplateList(request: QuerySmsTemplateListRequest): QuerySmsTemplateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsTemplateListWithOptions(request, runtime);
}

model SendBatchCardSmsRequest {
  cardTemplateCode?: string(name='CardTemplateCode', example='CARD_SMS_3245'),
  cardTemplateParamJson?: string(name='CardTemplateParamJson', example='[{\\"customurl\\":\\"http://www.alibaba.com\\",\\"dyncParams\\":\\"{\\\\\\"a\\\\\\":\\\\\\"hello\\\\\\",\\\\\\"b\\\\\\":\\\\\\"world\\\\\\"}\\"}]'),
  digitalTemplateCode?: string(name='DigitalTemplateCode', example='DIGITAL_SMS_234080176'),
  digitalTemplateParamJson?: string(name='DigitalTemplateParamJson', example='[{"a":1,"b":2},{"a":9,"b":8}]'),
  fallbackType?: string(name='FallbackType', example='SMS'),
  outId?: string(name='OutId', example='16545681783595370'),
  phoneNumberJson?: string(name='PhoneNumberJson', example='[\\"1390000****\\",\\"1370000****\\"]"'),
  signNameJson?: string(name='SignNameJson'),
  smsTemplateCode?: string(name='SmsTemplateCode', example='SMS_234251075'),
  smsTemplateParamJson?: string(name='SmsTemplateParamJson', example='[{"a":1,"b":2},{"a":9,"b":8}]'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson', example='[\\"6\\",\\"6\\"]'),
  templateCode?: string(name='TemplateCode', example='SMS_20375****'),
  templateParamJson?: string(name='TemplateParamJson', example='[{"name":"TemplateParamJson"},{"name":"TemplateParamJson"}]'),
}

model SendBatchCardSmsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizCardId?: string(name='BizCardId', example='123'),
    bizDigitalId?: string(name='BizDigitalId', example='3214'),
    bizSmsId?: string(name='BizSmsId', example='3256'),
    cardTmpState?: int32(name='CardTmpState', example='0'),
    mediaMobiles?: string(name='MediaMobiles', example='1390000****'),
    notMediaMobiles?: string(name='NotMediaMobiles', example='1390000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  success?: boolean(name='Success', example='true'),
}

model SendBatchCardSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendBatchCardSmsResponseBody(name='body'),
}

async function sendBatchCardSmsWithOptions(request: SendBatchCardSmsRequest, runtime: Util.RuntimeOptions): SendBatchCardSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cardTemplateCode)) {
    query['CardTemplateCode'] = request.cardTemplateCode;
  }
  if (!Util.isUnset(request.cardTemplateParamJson)) {
    query['CardTemplateParamJson'] = request.cardTemplateParamJson;
  }
  if (!Util.isUnset(request.digitalTemplateCode)) {
    query['DigitalTemplateCode'] = request.digitalTemplateCode;
  }
  if (!Util.isUnset(request.digitalTemplateParamJson)) {
    query['DigitalTemplateParamJson'] = request.digitalTemplateParamJson;
  }
  if (!Util.isUnset(request.fallbackType)) {
    query['FallbackType'] = request.fallbackType;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.phoneNumberJson)) {
    query['PhoneNumberJson'] = request.phoneNumberJson;
  }
  if (!Util.isUnset(request.signNameJson)) {
    query['SignNameJson'] = request.signNameJson;
  }
  if (!Util.isUnset(request.smsTemplateCode)) {
    query['SmsTemplateCode'] = request.smsTemplateCode;
  }
  if (!Util.isUnset(request.smsTemplateParamJson)) {
    query['SmsTemplateParamJson'] = request.smsTemplateParamJson;
  }
  if (!Util.isUnset(request.smsUpExtendCodeJson)) {
    query['SmsUpExtendCodeJson'] = request.smsUpExtendCodeJson;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParamJson)) {
    query['TemplateParamJson'] = request.templateParamJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendBatchCardSms',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendBatchCardSms(request: SendBatchCardSmsRequest): SendBatchCardSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendBatchCardSmsWithOptions(request, runtime);
}

model SendBatchSmsRequest {
  outId?: string(name='OutId', example='abcdefg'),
  ownerId?: long(name='OwnerId'),
  phoneNumberJson?: string(name='PhoneNumberJson', example='["1590000****","1350000****"]'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signNameJson?: string(name='SignNameJson'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson', example='["90999","90998"]'),
  templateCode?: string(name='TemplateCode', example='SMS_15255****'),
  templateParamJson?: string(name='TemplateParamJson', example='[{"name":"TemplateParamJson"},{"name":"TemplateParamJson"}]'),
}

model SendBatchSmsResponseBody = {
  bizId?: string(name='BizId', example='9006197469364984400'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D230E'),
}

model SendBatchSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendBatchSmsResponseBody(name='body'),
}

async function sendBatchSmsWithOptions(request: SendBatchSmsRequest, runtime: Util.RuntimeOptions): SendBatchSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.phoneNumberJson)) {
    body['PhoneNumberJson'] = request.phoneNumberJson;
  }
  if (!Util.isUnset(request.signNameJson)) {
    body['SignNameJson'] = request.signNameJson;
  }
  if (!Util.isUnset(request.smsUpExtendCodeJson)) {
    body['SmsUpExtendCodeJson'] = request.smsUpExtendCodeJson;
  }
  if (!Util.isUnset(request.templateParamJson)) {
    body['TemplateParamJson'] = request.templateParamJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendBatchSms',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendBatchSms(request: SendBatchSmsRequest): SendBatchSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendBatchSmsWithOptions(request, runtime);
}

model SendCardSmsRequest {
  cardObjects?: [ 
    {
      customUrl?: string(name='customUrl', example='https://alibaba.com'),
      dyncParams?: string(name='dyncParams'),
      mobile?: string(name='mobile', example='1390000****'),
    }
  ](name='CardObjects'),
  cardTemplateCode?: string(name='CardTemplateCode', example='CARD_SMS_70'),
  digitalTemplateCode?: string(name='DigitalTemplateCode', example='SMS_003'),
  digitalTemplateParam?: string(name='DigitalTemplateParam'),
  fallbackType?: string(name='FallbackType', example='SMS'),
  outId?: string(name='OutId', example='38d76c9b-4a9a-4c89-afae-61fd8e0e****'),
  signName?: string(name='SignName'),
  smsTemplateCode?: string(name='SmsTemplateCode', example='SIER_TEST_01'),
  smsTemplateParam?: string(name='SmsTemplateParam'),
  smsUpExtendCode?: string(name='SmsUpExtendCode', example='1'),
  templateCode?: string(name='TemplateCode', example='SMS_2322****'),
  templateParam?: string(name='TemplateParam'),
}

model SendCardSmsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizCardId?: string(name='BizCardId', example='123'),
    bizDigitalId?: string(name='BizDigitalId', example='232'),
    bizSmsId?: string(name='BizSmsId', example='524'),
    cardTmpState?: int32(name='CardTmpState', example='0'),
    mediaMobiles?: string(name='MediaMobiles', example='1390000****'),
    notMediaMobiles?: string(name='NotMediaMobiles', example='1390000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D28D0'),
  success?: boolean(name='Success', example='true'),
}

model SendCardSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendCardSmsResponseBody(name='body'),
}

async function sendCardSmsWithOptions(request: SendCardSmsRequest, runtime: Util.RuntimeOptions): SendCardSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cardObjects)) {
    query['CardObjects'] = request.cardObjects;
  }
  if (!Util.isUnset(request.cardTemplateCode)) {
    query['CardTemplateCode'] = request.cardTemplateCode;
  }
  if (!Util.isUnset(request.digitalTemplateCode)) {
    query['DigitalTemplateCode'] = request.digitalTemplateCode;
  }
  if (!Util.isUnset(request.digitalTemplateParam)) {
    query['DigitalTemplateParam'] = request.digitalTemplateParam;
  }
  if (!Util.isUnset(request.fallbackType)) {
    query['FallbackType'] = request.fallbackType;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.smsTemplateCode)) {
    query['SmsTemplateCode'] = request.smsTemplateCode;
  }
  if (!Util.isUnset(request.smsTemplateParam)) {
    query['SmsTemplateParam'] = request.smsTemplateParam;
  }
  if (!Util.isUnset(request.smsUpExtendCode)) {
    query['SmsUpExtendCode'] = request.smsUpExtendCode;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParam)) {
    query['TemplateParam'] = request.templateParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendCardSms',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendCardSms(request: SendCardSmsRequest): SendCardSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendCardSmsWithOptions(request, runtime);
}

model SendSmsRequest {
  outId?: string(name='OutId', example='abcdefgh'),
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: string(name='PhoneNumbers', example='1390000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  smsUpExtendCode?: string(name='SmsUpExtendCode', example='90999'),
  templateCode?: string(name='TemplateCode', example='SMS_15305****'),
  templateParam?: string(name='TemplateParam', example='{"code":"1111"}'),
}

model SendSmsResponseBody = {
  bizId?: string(name='BizId', example='9006197469364984****'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSmsWithOptions(request: SendSmsRequest, runtime: Util.RuntimeOptions): SendSmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumbers)) {
    query['PhoneNumbers'] = request.phoneNumbers;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.smsUpExtendCode)) {
    query['SmsUpExtendCode'] = request.smsUpExtendCode;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParam)) {
    query['TemplateParam'] = request.templateParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendSms',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendSmsWithOptions(request, runtime);
}

model SmsConversionIntlRequest {
  conversionTime?: long(name='ConversionTime', example='1349055900000'),
  delivered?: boolean(name='Delivered', example='true'),
  messageId?: string(name='MessageId', example='1008030300****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SmsConversionIntlResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D****'),
}

model SmsConversionIntlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SmsConversionIntlResponseBody(name='body'),
}

async function smsConversionIntlWithOptions(request: SmsConversionIntlRequest, runtime: Util.RuntimeOptions): SmsConversionIntlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.conversionTime)) {
    query['ConversionTime'] = request.conversionTime;
  }
  if (!Util.isUnset(request.delivered)) {
    query['Delivered'] = request.delivered;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SmsConversionIntl',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function smsConversionIntl(request: SmsConversionIntlRequest): SmsConversionIntlResponse {
  var runtime = new Util.RuntimeOptions{};
  return smsConversionIntlWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode', example='dysms'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='SMS_23423423'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='TEMPLATE'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode', example='dysms'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='SMS_23423423'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='TEMPLATE'),
  tagKey?: [ string ](name='TagKey', example='TestKey'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-05-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

