/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dysmsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
    ap-southeast-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'dysmsapi.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dysmsapi-proxy.cn-beijing.aliyuncs.com',
    cn-hongkong = 'dysmsapi-xman.cn-hongkong.aliyuncs.com',
    eu-central-1 = 'dysmsapi.eu-central-1.aliyuncs.com',
    us-east-1 = 'dysmsapi.us-east-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddShortUrlRequest {
  effectiveDays: string(name='EffectiveDays', example='7', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortUrlName: string(name='ShortUrlName', position='Body'),
  sourceUrl: string(name='SourceUrl', example='https://www.****.com/product/sms', position='Body'),
}

model AddShortUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    expireDate?: string(name='ExpireDate', example='2021-09-19 00:00:00'),
    shortUrl?: string(name='ShortUrl', example='http://****.cn/6y8uy7'),
    sourceUrl?: string(name='SourceUrl', example='https://www.****.com/product/sms'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model AddShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: AddShortUrlResponseBody(name='body'),
}

async function addShortUrl(request: AddShortUrlRequest): AddShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddShortUrl', 'POST', '/', 'json', true, 'form', request);
}

model AddSmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signFileList: [ 
    {
      fileContents: string(name='FileContents', example='R0lGODlhHAAmAKIHAKqqqsvLy0hISObm5vf394uL****'),
      fileSuffix: string(name='FileSuffix', example='jpg'),
    }
  ](name='SignFileList', position='Body'),
  signName: string(name='SignName', position='Query'),
  signSource: int32(name='SignSource', example='1', position='Query'),
  signType?: int32(name='SignType', example='1', position='Query'),
}

model AddSmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  signName?: string(name='SignName'),
}

model AddSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: AddSmsSignResponseBody(name='body'),
}

async function addSmsSign(request: AddSmsSignRequest): AddSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSmsSign', 'POST', '/', 'json', true, 'form', request);
}

model AddSmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateContent: string(name='TemplateContent', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
  templateType: int32(name='TemplateType', example='1', position='Query'),
}

model AddSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  templateCode?: string(name='TemplateCode', example='SMS_15255****'),
}

model AddSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddSmsTemplateResponseBody(name='body'),
}

async function addSmsTemplate(request: AddSmsTemplateRequest): AddSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CheckMobilesCardSupportRequest {
  mobiles: [  map[string]any ](name='Mobiles', position='Query'),
  templateCode: string(name='TemplateCode', example='CARD_SMS_****', position='Query'),
}

model CheckMobilesCardSupportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    queryResult?: [ 
      {
        mobile?: string(name='mobile', example='1390000****'),
        support?: boolean(name='support', example='true'),
      }
    ](name='queryResult'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
  success?: boolean(name='Success', example='true'),
}

model CheckMobilesCardSupportResponse = {
  headers: map[string]string(name='headers'),
  body: CheckMobilesCardSupportResponseBody(name='body'),
}

async function checkMobilesCardSupport(request: CheckMobilesCardSupportRequest): CheckMobilesCardSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMobilesCardSupport', 'POST', '/', 'json', false, 'json', request);
}

model ConversionDataIntlRequest {
  conversionRate: string(name='ConversionRate', example='0.53', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportTime?: long(name='ReportTime', example='1349055900000', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ConversionDataIntlResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D****'),
}

model ConversionDataIntlResponse = {
  headers: map[string]string(name='headers'),
  body: ConversionDataIntlResponseBody(name='body'),
}

async function conversionDataIntl(request: ConversionDataIntlRequest): ConversionDataIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConversionDataIntl', 'POST', '/', 'json', false, 'json', request);
}

model CreateCardSmsTemplateRequest {
  factorys?: string(name='Factorys', example='XiaoMi', position='Query'),
  memo?: string(name='Memo', position='Query'),
  template: map[string]any(name='Template', shrink='json', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
}

model CreateCardSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', example='CARD_SMS_60000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  success?: boolean(name='Success', example='true'),
}

model CreateCardSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCardSmsTemplateResponseBody(name='body'),
}

async function createCardSmsTemplate(request: CreateCardSmsTemplateRequest): CreateCardSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCardSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmartShortUrlRequest {
  expiration?: long(name='Expiration', example='46', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers?: string(name='PhoneNumbers', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceName?: string(name='SourceName', example='示例值示例值', position='Query'),
  sourceUrl?: string(name='SourceUrl', example='示例值', position='Query'),
}

model CreateSmartShortUrlResponseBody = {
  code?: string(name='Code', example='示例值示例值示例值'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: [ 
    {
      domain?: string(name='Domain', example='示例值'),
      expiration?: long(name='Expiration', example='11'),
      phoneNumber?: string(name='PhoneNumber', example='示例值'),
      shortName?: string(name='ShortName', example='示例值'),
      shortUrl?: string(name='ShortUrl', example='示例值示例值'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
}

model CreateSmartShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSmartShortUrlResponseBody(name='body'),
}

async function createSmartShortUrl(request: CreateSmartShortUrlRequest): CreateSmartShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmartShortUrl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteShortUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', example='https://www.****.com/product/sms', position='Body'),
}

model DeleteShortUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model DeleteShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShortUrlResponseBody(name='body'),
}

async function deleteShortUrl(request: DeleteShortUrlRequest): DeleteShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteShortUrl', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', position='Query'),
}

model DeleteSmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D****'),
  signName?: string(name='SignName'),
}

model DeleteSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsSignResponseBody(name='body'),
}

async function deleteSmsSign(request: DeleteSmsSignRequest): DeleteSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmsSign', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', example='SMS_152550****', position='Query'),
}

model DeleteSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='CCA2BCFF-2BA7-427C-90EE-AC6994748607'),
  templateCode?: string(name='TemplateCode', example='SMS_20375****'),
}

model DeleteSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsTemplateResponseBody(name='body'),
}

async function deleteSmsTemplate(request: DeleteSmsTemplateRequest): DeleteSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetCardSmsLinkRequest {
  cardCodeType?: int32(name='CardCodeType', example='2', position='Query'),
  cardLinkType?: int32(name='CardLinkType', example='1', position='Query'),
  cardTemplateCode: string(name='CardTemplateCode', example='CARD_SMS_****', position='Query'),
  cardTemplateParamJson?: string(name='CardTemplateParamJson', position='Query'),
  customShortCodeJson?: string(name='CustomShortCodeJson', example='abCde', position='Query'),
  domain?: string(name='Domain', position='Query'),
  outId?: string(name='OutId', example='BC20220608102511660860762****', position='Query'),
  phoneNumberJson?: string(name='PhoneNumberJson', example='[\\"1390000****
\\",\\"1370000****
\\"]', position='Query'),
  signNameJson: string(name='SignNameJson', position='Query'),
}

model GetCardSmsLinkResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    cardPhoneNumbers?: string(name='CardPhoneNumbers'),
    cardSignNames?: string(name='CardSignNames'),
    cardSmsLinks?: string(name='CardSmsLinks', example='[\\"mw2m.cn/LAaGGa\\",\\"mw2m.cn/LAAaes\\"]'),
    cardTmpState?: int32(name='CardTmpState', example='0'),
    notMediaMobiles?: string(name='NotMediaMobiles', example='1390000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CC89A90C-978F-46AC-B80D-54738371E7CA'),
  success?: boolean(name='Success', example='true'),
}

model GetCardSmsLinkResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardSmsLinkResponseBody(name='body'),
}

async function getCardSmsLink(request: GetCardSmsLinkRequest): GetCardSmsLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardSmsLink', 'POST', '/', 'json', false, 'json', request);
}

model GetMediaResourceIdRequest {
  extendInfo?: string(name='ExtendInfo', example='{\\"img_rate\\":\\"oneToOne\\"}', position='Query'),
  fileSize: long(name='FileSize', example='12', minimum=0, maximum=9223372036854775807, position='Query'),
  memo?: string(name='Memo', position='Query'),
  ossKey: string(name='OssKey', example='oss://alicom-fc-media/1947741454322274/alicom-fc-media/pic/202205191526575398603697152.png', position='Query'),
  resourceType: int32(name='ResourceType', example='1', minimum=0, maximum=10000, position='Query'),
}

model GetMediaResourceIdResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    resUrlDownload?: string(name='ResUrlDownload', example='http://test-example.com/download.jpg'),
    resourceId?: long(name='ResourceId', example='SMS_14571****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F07CF237-F6E3-5F77-B91B-F9B7C5DE84AB'),
  success?: boolean(name='Success', example='true'),
}

model GetMediaResourceIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaResourceIdResponseBody(name='body'),
}

async function getMediaResourceId(request: GetMediaResourceIdRequest): GetMediaResourceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMediaResourceId', 'POST', '/', 'json', false, 'json', request);
}

model GetOSSInfoForCardTemplateRequest {
}

model GetOSSInfoForCardTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='LTAIxetqt1Dg****'),
    aliUid?: string(name='AliUid', example='599333677478****'),
    bucket?: string(name='Bucket', example='alicom-cardsms-resources'),
    expireTime?: string(name='ExpireTime', example='1634209418'),
    host?: string(name='Host', example='https://alicom-cardsms-resources.oss-cn-zhangjiakou.aliyuncs.com'),
    policy?: string(name='Policy', example='eyJxxx0='),
    signature?: string(name='Signature'),
    startPath?: string(name='StartPath', example='1631792777'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  success?: boolean(name='Success', example='true'),
}

model GetOSSInfoForCardTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetOSSInfoForCardTemplateResponseBody(name='body'),
}

async function getOSSInfoForCardTemplate(request: GetOSSInfoForCardTemplateRequest): GetOSSInfoForCardTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOSSInfoForCardTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  prodCode?: string(name='ProdCode', example='dysms', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='SMS_23423423', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='TEMPLATE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code', example='OK'),
  nextToken?: string(name='NextToken', example='"23432453245"'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='SMS_23423****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::DYSMS::TEMPLATE'),
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValue?: string(name='TagValue', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifySmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signFileList: [ 
    {
      fileContents: string(name='FileContents', example='R0lGODlhHAAmAKIHAKqqqsvLy0hISObm5vf394uLiwAA'),
      fileSuffix: string(name='FileSuffix', example='jpg'),
    }
  ](name='SignFileList', position='Body'),
  signName: string(name='SignName', position='Query'),
  signSource: int32(name='SignSource', example='1', position='Query'),
  signType?: int32(name='SignType', example='1', position='Query'),
}

model ModifySmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  signName?: string(name='SignName'),
}

model ModifySmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySmsSignResponseBody(name='body'),
}

async function modifySmsSign(request: ModifySmsSignRequest): ModifySmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySmsSign', 'POST', '/', 'json', true, 'form', request);
}

model ModifySmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', example='SMS_15255****', position='Query'),
  templateContent: string(name='TemplateContent', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
  templateType: int32(name='TemplateType', example='1', position='Query'),
}

model ModifySmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  templateCode?: string(name='TemplateCode', example='SMS_15255****'),
}

model ModifySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySmsTemplateResponseBody(name='body'),
}

async function modifySmsTemplate(request: ModifySmsTemplateRequest): ModifySmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsTemplateRequest {
  templateCode: string(name='TemplateCode', example='CARD_SMS_4139', position='Query'),
}

model QueryCardSmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    templates?: [  map[string]any ](name='Templates'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
  success?: boolean(name='Success', example='true'),
}

model QueryCardSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCardSmsTemplateResponseBody(name='body'),
}

async function queryCardSmsTemplate(request: QueryCardSmsTemplateRequest): QueryCardSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsTemplateReportRequest {
  endDate?: string(name='EndDate', example='2020-10-11 00:00:01', position='Query'),
  startDate?: string(name='StartDate', example='2020-10-10 00:00:01', position='Query'),
  templateCodes: [ string ](name='TemplateCodes', position='Query'),
}

model QueryCardSmsTemplateReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    model?: [  map[string]any ](name='model'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CC89A90C-978F-46AC-B80D-54738371E7CA'),
  success?: boolean(name='Success', example='true'),
}

model QueryCardSmsTemplateReportResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCardSmsTemplateReportResponseBody(name='body'),
}

async function queryCardSmsTemplateReport(request: QueryCardSmsTemplateReportRequest): QueryCardSmsTemplateReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsTemplateReport', 'POST', '/', 'json', false, 'json', request);
}

model QueryMobilesCardSupportRequest {
  mobiles: [  map[string]any ](name='Mobiles', shrink='json', position='Query'),
  templateCode: string(name='TemplateCode', position='Query'),
}

model QueryMobilesCardSupportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    queryResult?: [ 
      {
        mobile?: string(name='Mobile'),
        support?: boolean(name='Support'),
      }
    ](name='QueryResult'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='08C17DFE-2E10-54F4-BAFB-7180039CC217'),
  success?: boolean(name='Success'),
}

model QueryMobilesCardSupportResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMobilesCardSupportResponseBody(name='body'),
}

async function queryMobilesCardSupport(request: QueryMobilesCardSupportRequest): QueryMobilesCardSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMobilesCardSupport', 'POST', '/', 'json', false, 'json', request);
}

model QueryPageSmartShortUrlLogRequest {
  clickState?: long(name='ClickState', example='12', position='Query'),
  createDateEnd?: long(name='CreateDateEnd', example='14', position='Query'),
  createDateStart?: long(name='CreateDateStart', example='31', position='Query'),
  endId?: long(name='EndId', example='46', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', example='99', position='Query'),
  pageSize?: long(name='PageSize', example='84', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='示例值示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortName?: string(name='ShortName', example='示例值示例值示例值', position='Query'),
  shortUrl?: string(name='ShortUrl', example='示例值示例值示例值', position='Query'),
  startId?: long(name='StartId', example='89', position='Query'),
}

model QueryPageSmartShortUrlLogResponseBody = {
  code?: string(name='Code', example='示例值示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    list?: [ 
      {
        clickState?: long(name='ClickState', example='87'),
        clickTime?: long(name='ClickTime', example='51'),
        createTime?: long(name='CreateTime', example='64'),
        phoneNumber?: string(name='PhoneNumber', example='示例值示例值'),
        shortName?: string(name='ShortName', example='示例值示例值示例值'),
        shortUrl?: string(name='ShortUrl', example='示例值示例值示例值'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='74'),
    pageSize?: long(name='PageSize', example='15'),
    totalCount?: long(name='TotalCount', example='66'),
    totalPage?: long(name='TotalPage', example='86'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model QueryPageSmartShortUrlLogResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPageSmartShortUrlLogResponseBody(name='body'),
}

async function queryPageSmartShortUrlLog(request: QueryPageSmartShortUrlLogRequest): QueryPageSmartShortUrlLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPageSmartShortUrlLog', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendDetailsRequest {
  bizId?: string(name='BizId', example='134523^435****', position='Query'),
  currentPage: long(name='CurrentPage', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize: long(name='PageSize', example='10', position='Query'),
  phoneNumber: string(name='PhoneNumber', example='1390000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate: string(name='SendDate', example='20181228', position='Query'),
}

model QuerySendDetailsResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
  smsSendDetailDTOs?: {
    smsSendDetailDTO?: [ 
    {
      content?: string(name='Content'),
      errCode?: string(name='ErrCode', example='DELIVERED'),
      outId?: string(name='OutId', example='123'),
      phoneNum?: string(name='PhoneNum', example='1390000****'),
      receiveDate?: string(name='ReceiveDate', example='2019-01-08 16:44:13'),
      sendDate?: string(name='SendDate', example='2019-01-08 16:44:10'),
      sendStatus?: long(name='SendStatus', example='3'),
      templateCode?: string(name='TemplateCode', example='SMS_12231****'),
    }
  ](name='SmsSendDetailDTO')
  }(name='SmsSendDetailDTOs'),
  totalCount?: string(name='TotalCount', example='1'),
}

model QuerySendDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySendDetailsResponseBody(name='body'),
}

async function querySendDetails(request: QuerySendDetailsRequest): QuerySendDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendDetails', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendStatisticsRequest {
  endDate: string(name='EndDate', example='20201003', position='Query'),
  isGlobe: int32(name='IsGlobe', example='1', minLength=1, maxLength=2, minimum=1, maximum=2, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex: int32(name='PageIndex', example='1', minLength=1, minimum=1, position='Query'),
  pageSize: int32(name='PageSize', example='10', minLength=1, maxLength=50, minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
  startDate: string(name='StartDate', example='20201002', position='Query'),
  templateType?: int32(name='TemplateType', example='0', position='Query'),
}

model QuerySendStatisticsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    targetList?: [ 
      {
        noRespondedCount?: long(name='NoRespondedCount', example='1'),
        respondedFailCount?: long(name='RespondedFailCount', example='2'),
        respondedSuccessCount?: long(name='RespondedSuccessCount', example='17'),
        sendDate?: string(name='SendDate', example='20201010'),
        totalCount?: long(name='TotalCount', example='20'),
      }
    ](name='TargetList'),
    totalSize?: long(name='TotalSize', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E47708****'),
}

model QuerySendStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySendStatisticsResponseBody(name='body'),
}

async function querySendStatistics(request: QuerySendStatisticsRequest): QuerySendStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryShortUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortUrl: string(name='ShortUrl', example='http://****.cn/6y8uy7', position='Body'),
}

model QueryShortUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createDate?: string(name='CreateDate', example='2019-01-08 16:44:13'),
    expireDate?: string(name='ExpireDate', example='2019-01-22 11:21:11'),
    pageViewCount?: string(name='PageViewCount', example='300'),
    shortUrl?: string(name='ShortUrl', example='http://****.cn/6y8uy7'),
    shortUrlName?: string(name='ShortUrlName'),
    shortUrlStatus?: string(name='ShortUrlStatus', example='expired'),
    sourceUrl?: string(name='SourceUrl', example='https://www.****.com/product/sms'),
    uniqueVisitorCount?: string(name='UniqueVisitorCount', example='23'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E477085AAF'),
}

model QueryShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryShortUrlResponseBody(name='body'),
}

async function queryShortUrl(request: QueryShortUrlRequest): QueryShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShortUrl', 'POST', '/', 'json', true, 'form', request);
}

model QuerySmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', position='Query'),
}

model QuerySmsSignResponseBody = {
  code?: string(name='Code', example='OK'),
  createDate?: string(name='CreateDate', example='2019-01-08 16:44:13'),
  message?: string(name='Message', example='OK'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId', example='CC89A90C-978F-46AC-B80D-54738371E7CA'),
  signName?: string(name='SignName'),
  signStatus?: int32(name='SignStatus', example='1'),
}

model QuerySmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsSignResponseBody(name='body'),
}

async function querySmsSign(request: QuerySmsSignRequest): QuerySmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSign', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', minLength=1, minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsSignListResponseBody = {
  code?: string(name='Code', example='OK'),
  currentPage?: int32(name='CurrentPage', example='1'),
  message?: string(name='Message', example='OK'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E47708****'),
  smsSignList?: [ 
    {
      auditStatus?: string(name='AuditStatus', example='AUDIT_STATE_NOT_PASS'),
      businessType?: string(name='BusinessType'),
      createDate?: string(name='CreateDate', example='2020-01-08 16:44:13'),
      orderId?: string(name='OrderId', example='236****5'),
      reason?: {
        rejectDate?: string(name='RejectDate', example='2020-01-08 19:02:13'),
        rejectInfo?: string(name='RejectInfo'),
        rejectSubInfo?: string(name='RejectSubInfo'),
      }(name='Reason'),
      signName?: string(name='SignName'),
    }
  ](name='SmsSignList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QuerySmsSignListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsSignListResponseBody(name='body'),
}

async function querySmsSignList(request: QuerySmsSignListRequest): QuerySmsSignListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', example='SMS_1525***', position='Query'),
}

model QuerySmsTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  createDate?: string(name='CreateDate', example='2019-06-04 11:42:17'),
  message?: string(name='Message', example='OK'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId', example='0A974B78-02BF-4C79-ADF3-90CFBA1B55B1'),
  templateCode?: string(name='TemplateCode', example='SMS_16703****'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateStatus?: int32(name='TemplateStatus', example='1'),
  templateType?: int32(name='TemplateType', example='1'),
}

model QuerySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsTemplateResponseBody(name='body'),
}

async function querySmsTemplate(request: QuerySmsTemplateRequest): QuerySmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsTemplateListResponseBody = {
  code?: string(name='Code', example='OK'),
  currentPage?: int32(name='CurrentPage', example='1'),
  message?: string(name='Message', example='OK'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='819BE656-D2E0-4858-8B21-B2E47708****'),
  smsTemplateList?: [ 
    {
      auditStatus?: string(name='AuditStatus', example='AUDIT_STATE_PASS'),
      createDate?: string(name='CreateDate', example='2020-06-04 11:42:17'),
      orderId?: string(name='OrderId', example='2361****'),
      outerTemplateType?: int32(name='OuterTemplateType', example='0'),
      reason?: {
        rejectDate?: string(name='RejectDate', example='2020-06-04 16:01:17'),
        rejectInfo?: string(name='RejectInfo'),
        rejectSubInfo?: string(name='RejectSubInfo'),
      }(name='Reason'),
      templateCode?: string(name='TemplateCode', example='SMS_1525***'),
      templateContent?: string(name='TemplateContent', example='123456789'),
      templateName?: string(name='TemplateName'),
      templateType?: int32(name='TemplateType', example='7'),
    }
  ](name='SmsTemplateList'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QuerySmsTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsTemplateListResponseBody(name='body'),
}

async function querySmsTemplateList(request: QuerySmsTemplateListRequest): QuerySmsTemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateList', 'POST', '/', 'json', false, 'json', request);
}

model SendBatchCardSmsRequest {
  cardTemplateCode: string(name='CardTemplateCode', example='CARD_SMS_3245', position='Query'),
  cardTemplateParamJson?: string(name='CardTemplateParamJson', example='[{\\"customurl\\":\\"http://www.alibaba.com\\",\\"dyncParams\\":\\"{\\\\\\"a\\\\\\":\\\\\\"hello\\\\\\",\\\\\\"b\\\\\\":\\\\\\"world\\\\\\"}\\"}]', position='Query'),
  digitalTemplateCode?: string(name='DigitalTemplateCode', example='DIGITAL_SMS_234080176', position='Query'),
  digitalTemplateParamJson?: string(name='DigitalTemplateParamJson', example='[{"a":1,"b":2},{"a":9,"b":8}]', position='Query'),
  fallbackType: string(name='FallbackType', example='SMS', position='Query'),
  outId?: string(name='OutId', example='16545681783595370', position='Query'),
  phoneNumberJson: string(name='PhoneNumberJson', example='[\\"1390000****\\",\\"1370000****\\"]"', position='Query'),
  signNameJson: string(name='SignNameJson', position='Query'),
  smsTemplateCode?: string(name='SmsTemplateCode', example='SMS_234251075', position='Query'),
  smsTemplateParamJson?: string(name='SmsTemplateParamJson', example='[{"a":1,"b":2},{"a":9,"b":8}]', position='Query'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson', example='[\\"6\\",\\"6\\"]', position='Query'),
  templateCode?: string(name='TemplateCode', example='SMS_20375****', position='Query'),
  templateParamJson?: string(name='TemplateParamJson', example='[{"name":"TemplateParamJson"},{"name":"TemplateParamJson"}]', position='Query'),
}

model SendBatchCardSmsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizCardId?: string(name='BizCardId', example='123'),
    bizDigitalId?: string(name='BizDigitalId', example='3214'),
    bizSmsId?: string(name='BizSmsId', example='3256'),
    cardTmpState?: int32(name='CardTmpState', example='0'),
    mediaMobiles?: string(name='MediaMobiles', example='1390000****'),
    notMediaMobiles?: string(name='NotMediaMobiles', example='1390000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
  success?: boolean(name='Success', example='true'),
}

model SendBatchCardSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendBatchCardSmsResponseBody(name='body'),
}

async function sendBatchCardSms(request: SendBatchCardSmsRequest): SendBatchCardSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendBatchCardSms', 'POST', '/', 'json', false, 'json', request);
}

model SendBatchSmsRequest {
  outId?: string(name='OutId', example='abcdefg', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumberJson: string(name='PhoneNumberJson', example='["1590000****","1350000****"]', position='Body'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signNameJson: string(name='SignNameJson', position='Body'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson', example='["90999","90998"]', position='Body'),
  templateCode: string(name='TemplateCode', example='SMS_15255****', position='Query'),
  templateParamJson?: string(name='TemplateParamJson', example='[{"name":"TemplateParamJson"},{"name":"TemplateParamJson"}]', position='Body'),
}

model SendBatchSmsResponseBody = {
  bizId?: string(name='BizId', example='9006197469364984400'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D230E'),
}

model SendBatchSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendBatchSmsResponseBody(name='body'),
}

async function sendBatchSms(request: SendBatchSmsRequest): SendBatchSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendBatchSms', 'POST', '/', 'json', true, 'form', request);
}

model SendCardSmsRequest {
  cardObjects: [ 
    {
      customUrl?: string(name='customUrl', example='https://alibaba.com'),
      dyncParams?: string(name='dyncParams'),
      mobile?: string(name='mobile', example='1390000****'),
    }
  ](name='CardObjects', position='Query'),
  cardTemplateCode: string(name='CardTemplateCode', example='CARD_SMS_70', position='Query'),
  digitalTemplateCode?: string(name='DigitalTemplateCode', example='SMS_003', position='Query'),
  digitalTemplateParam?: string(name='DigitalTemplateParam', position='Query'),
  fallbackType: string(name='FallbackType', example='SMS', position='Query'),
  outId?: string(name='OutId', example='38d76c9b-4a9a-4c89-afae-61fd8e0e****', position='Query'),
  signName: string(name='SignName', position='Query'),
  smsTemplateCode?: string(name='SmsTemplateCode', example='SIER_TEST_01', position='Query'),
  smsTemplateParam?: string(name='SmsTemplateParam', position='Query'),
  smsUpExtendCode?: string(name='SmsUpExtendCode', example='1', position='Query'),
  templateCode?: string(name='TemplateCode', example='SMS_2322****', position='Query'),
  templateParam?: string(name='TemplateParam', position='Query'),
}

model SendCardSmsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizCardId?: string(name='BizCardId', example='123'),
    bizDigitalId?: string(name='BizDigitalId', example='232'),
    bizSmsId?: string(name='BizSmsId', example='524'),
    cardTmpState?: int32(name='CardTmpState', example='0'),
    mediaMobiles?: string(name='MediaMobiles', example='1390000****'),
    notMediaMobiles?: string(name='NotMediaMobiles', example='1390000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D28D0'),
  success?: boolean(name='Success', example='true'),
}

model SendCardSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendCardSmsResponseBody(name='body'),
}

async function sendCardSms(request: SendCardSmsRequest): SendCardSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCardSms', 'POST', '/', 'json', false, 'json', request);
}

model SendSmsRequest {
  outId?: string(name='OutId', example='abcdefgh', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers: string(name='PhoneNumbers', example='1390000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', position='Query'),
  smsUpExtendCode?: string(name='SmsUpExtendCode', example='90999', position='Query'),
  templateCode: string(name='TemplateCode', example='SMS_15305****', position='Query'),
  templateParam?: string(name='TemplateParam', example='{"code":"1111"}', position='Query'),
}

model SendSmsResponseBody = {
  bizId?: string(name='BizId', example='9006197469364984****'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8DE990'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendSms', 'POST', '/', 'json', false, 'json', request);
}

model SmsConversionIntlRequest {
  conversionTime?: long(name='ConversionTime', example='1349055900000', position='Query'),
  delivered: boolean(name='Delivered', example='true', position='Query'),
  messageId: string(name='MessageId', example='1008030300****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SmsConversionIntlResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='F655A8D5-B967-440B-8683-DAD6FF8D****'),
}

model SmsConversionIntlResponse = {
  headers: map[string]string(name='headers'),
  body: SmsConversionIntlResponseBody(name='body'),
}

async function smsConversionIntl(request: SmsConversionIntlRequest): SmsConversionIntlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmsConversionIntl', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', example='dysms', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='SMS_23423423', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='TEMPLATE', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', example='dysms', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='SMS_23423423', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='TEMPLATE', position='Query'),
  tagKey?: [ string ](name='TagKey', example='TestKey', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

