/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dysmsapi';
  @version = '2017-05-25';
  @endpointRule = 'central';
  @endpointMap = {
    ap-southeast-1 = 'dysmsapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'dysmsapi-xman.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dysmsapi-proxy.cn-beijing.aliyuncs.com',
    cn-hongkong = 'dysmsapi-xman.cn-hongkong.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddShortUrlRequest {
  effectiveDays: string(name='EffectiveDays', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortUrlName: string(name='ShortUrlName', position='Body'),
  sourceUrl: string(name='SourceUrl', position='Body'),
}

model AddShortUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    expireDate?: string(name='ExpireDate'),
    shortUrl?: string(name='ShortUrl'),
    sourceUrl?: string(name='SourceUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: AddShortUrlResponseBody(name='body'),
}

async function addShortUrl(request: AddShortUrlRequest): AddShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddShortUrl', 'POST', '/', 'json', true, 'form', request);
}

model AddSmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signFileList: [ 
    {
      fileContents: string(name='FileContents'),
      fileSuffix: string(name='FileSuffix'),
    }
  ](name='SignFileList', position='Body'),
  signName: string(name='SignName', position='Query'),
  signSource: int32(name='SignSource', position='Query'),
}

model AddSmsSignResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
}

model AddSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: AddSmsSignResponseBody(name='body'),
}

async function addSmsSign(request: AddSmsSignRequest): AddSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSmsSign', 'POST', '/', 'json', true, 'form', request);
}

model AddSmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateContent: string(name='TemplateContent', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
  templateType: int32(name='TemplateType', position='Query'),
}

model AddSmsTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
}

model AddSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddSmsTemplateResponseBody(name='body'),
}

async function addSmsTemplate(request: AddSmsTemplateRequest): AddSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteShortUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceUrl: string(name='SourceUrl', position='Body'),
}

model DeleteShortUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShortUrlResponseBody(name='body'),
}

async function deleteShortUrl(request: DeleteShortUrlRequest): DeleteShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteShortUrl', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', position='Query'),
}

model DeleteSmsSignResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
}

model DeleteSmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsSignResponseBody(name='body'),
}

async function deleteSmsSign(request: DeleteSmsSignRequest): DeleteSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmsSign', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', position='Query'),
}

model DeleteSmsTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
}

model DeleteSmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSmsTemplateResponseBody(name='body'),
}

async function deleteSmsTemplate(request: DeleteSmsTemplateRequest): DeleteSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifySmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signFileList: [ 
    {
      fileContents: string(name='FileContents'),
      fileSuffix: string(name='FileSuffix'),
    }
  ](name='SignFileList', position='Body'),
  signName: string(name='SignName', position='Query'),
  signSource: int32(name='SignSource', position='Query'),
}

model ModifySmsSignResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
}

model ModifySmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySmsSignResponseBody(name='body'),
}

async function modifySmsSign(request: ModifySmsSignRequest): ModifySmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySmsSign', 'POST', '/', 'json', true, 'form', request);
}

model ModifySmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', position='Query'),
  templateContent: string(name='TemplateContent', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
  templateType: int32(name='TemplateType', position='Query'),
}

model ModifySmsTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
}

model ModifySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySmsTemplateResponseBody(name='body'),
}

async function modifySmsTemplate(request: ModifySmsTemplateRequest): ModifySmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendDetailsRequest {
  bizId?: string(name='BizId', position='Query'),
  currentPage: long(name='CurrentPage', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize: long(name='PageSize', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate: string(name='SendDate', position='Query'),
}

model QuerySendDetailsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  smsSendDetailDTOs?: {
    smsSendDetailDTO?: [ 
    {
      content?: string(name='Content'),
      errCode?: string(name='ErrCode'),
      outId?: string(name='OutId'),
      phoneNum?: string(name='PhoneNum'),
      receiveDate?: string(name='ReceiveDate'),
      sendDate?: string(name='SendDate'),
      sendStatus?: long(name='SendStatus'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsSendDetailDTO')
  }(name='SmsSendDetailDTOs'),
  totalCount?: string(name='TotalCount'),
}

model QuerySendDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySendDetailsResponseBody(name='body'),
}

async function querySendDetails(request: QuerySendDetailsRequest): QuerySendDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendDetails', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendStatisticsRequest {
  endDate: string(name='EndDate', position='Query'),
  isGlobe: int32(name='IsGlobe', minLength=1, maxLength=2, minimum=1, maximum=2, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex: int32(name='PageIndex', minLength=1, minimum=1, position='Query'),
  pageSize: int32(name='PageSize', minLength=1, maxLength=50, minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startDate: string(name='StartDate', position='Query'),
}

model QuerySendStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    targetList?: [ 
      {
        noRespondedCount?: long(name='NoRespondedCount'),
        respondedFailCount?: long(name='RespondedFailCount'),
        respondedSuccessCount?: long(name='RespondedSuccessCount'),
        sendDate?: string(name='SendDate'),
        totalCount?: long(name='TotalCount'),
      }
    ](name='TargetList'),
    totalSize?: long(name='TotalSize'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QuerySendStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySendStatisticsResponseBody(name='body'),
}

async function querySendStatistics(request: QuerySendStatisticsRequest): QuerySendStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryShortUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortUrl: string(name='ShortUrl', position='Body'),
}

model QueryShortUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    createDate?: string(name='CreateDate'),
    expireDate?: string(name='ExpireDate'),
    pageViewCount?: string(name='PageViewCount'),
    shortUrl?: string(name='ShortUrl'),
    shortUrlName?: string(name='ShortUrlName'),
    shortUrlStatus?: string(name='ShortUrlStatus'),
    sourceUrl?: string(name='SourceUrl'),
    uniqueVisitorCount?: string(name='UniqueVisitorCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryShortUrlResponse = {
  headers: map[string]string(name='headers'),
  body: QueryShortUrlResponseBody(name='body'),
}

async function queryShortUrl(request: QueryShortUrlRequest): QueryShortUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShortUrl', 'POST', '/', 'json', true, 'form', request);
}

model QuerySmsSignRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', position='Query'),
}

model QuerySmsSignResponseBody = {
  code?: string(name='Code'),
  createDate?: string(name='CreateDate'),
  message?: string(name='Message'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  signName?: string(name='SignName'),
  signStatus?: int32(name='SignStatus'),
}

model QuerySmsSignResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsSignResponseBody(name='body'),
}

async function querySmsSign(request: QuerySmsSignRequest): QuerySmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSign', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', minLength=1, minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsSignListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  smsSignList?: [ 
    {
      auditStatus?: string(name='AuditStatus'),
      businessType?: string(name='BusinessType'),
      createDate?: string(name='CreateDate'),
      orderId?: string(name='OrderId'),
      reason?: {
        rejectDate?: string(name='RejectDate'),
        rejectInfo?: string(name='RejectInfo'),
        rejectSubInfo?: string(name='RejectSubInfo'),
      }(name='Reason'),
      signName?: string(name='SignName'),
    }
  ](name='SmsSignList'),
}

model QuerySmsSignListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsSignListResponseBody(name='body'),
}

async function querySmsSignList(request: QuerySmsSignListRequest): QuerySmsSignListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', position='Query'),
}

model QuerySmsTemplateResponseBody = {
  code?: string(name='Code'),
  createDate?: string(name='CreateDate'),
  message?: string(name='Message'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateStatus?: int32(name='TemplateStatus'),
  templateType?: int32(name='TemplateType'),
}

model QuerySmsTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsTemplateResponseBody(name='body'),
}

async function querySmsTemplate(request: QuerySmsTemplateRequest): QuerySmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsTemplateListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  smsTemplateList?: [ 
    {
      auditStatus?: string(name='AuditStatus'),
      createDate?: string(name='CreateDate'),
      orderId?: string(name='OrderId'),
      reason?: {
        rejectDate?: string(name='RejectDate'),
        rejectInfo?: string(name='RejectInfo'),
        rejectSubInfo?: string(name='RejectSubInfo'),
      }(name='Reason'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateType?: int32(name='TemplateType'),
    }
  ](name='SmsTemplateList'),
}

model QuerySmsTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySmsTemplateListResponseBody(name='body'),
}

async function querySmsTemplateList(request: QuerySmsTemplateListRequest): QuerySmsTemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateList', 'POST', '/', 'json', false, 'json', request);
}

model SendBatchSmsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumberJson: string(name='PhoneNumberJson', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signNameJson: string(name='SignNameJson', position='Query'),
  smsUpExtendCodeJson?: string(name='SmsUpExtendCodeJson', position='Query'),
  templateCode: string(name='TemplateCode', position='Query'),
  templateParamJson?: string(name='TemplateParamJson', position='Query'),
}

model SendBatchSmsResponseBody = {
  bizId?: string(name='BizId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendBatchSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendBatchSmsResponseBody(name='body'),
}

async function sendBatchSms(request: SendBatchSmsRequest): SendBatchSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendBatchSms', 'POST', '/', 'json', false, 'json', request);
}

model SendSmsRequest {
  outId?: string(name='OutId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers: string(name='PhoneNumbers', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', position='Query'),
  smsUpExtendCode?: string(name='SmsUpExtendCode', position='Query'),
  templateCode: string(name='TemplateCode', position='Query'),
  templateParam?: string(name='TemplateParam', position='Query'),
}

model SendSmsResponseBody = {
  bizId?: string(name='BizId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendSmsResponse = {
  headers: map[string]string(name='headers'),
  body: SendSmsResponseBody(name='body'),
}

async function sendSms(request: SendSmsRequest): SendSmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendSms', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

