/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'cloudpush.aliyuncs.com',
    'ap-northeast-2-pop' = 'cloudpush.aliyuncs.com',
    'ap-south-1' = 'cloudpush.aliyuncs.com',
    'ap-southeast-1' = 'cloudpush.aliyuncs.com',
    'ap-southeast-2' = 'cloudpush.aliyuncs.com',
    'ap-southeast-3' = 'cloudpush.aliyuncs.com',
    'ap-southeast-5' = 'cloudpush.aliyuncs.com',
    'cn-beijing' = 'cloudpush.aliyuncs.com',
    'cn-beijing-finance-1' = 'cloudpush.aliyuncs.com',
    'cn-beijing-finance-pop' = 'cloudpush.aliyuncs.com',
    'cn-beijing-gov-1' = 'cloudpush.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'cloudpush.aliyuncs.com',
    'cn-chengdu' = 'cloudpush.aliyuncs.com',
    'cn-edge-1' = 'cloudpush.aliyuncs.com',
    'cn-fujian' = 'cloudpush.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-finance' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-test-306' = 'cloudpush.aliyuncs.com',
    'cn-hongkong' = 'cloudpush.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'cloudpush.aliyuncs.com',
    'cn-huhehaote' = 'cloudpush.aliyuncs.com',
    'cn-north-2-gov-1' = 'cloudpush.aliyuncs.com',
    'cn-qingdao' = 'cloudpush.aliyuncs.com',
    'cn-qingdao-nebula' = 'cloudpush.aliyuncs.com',
    'cn-shanghai' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-finance-1' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-inner' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-inner' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'cloudpush.aliyuncs.com',
    'cn-wuhan' = 'cloudpush.aliyuncs.com',
    'cn-yushanfang' = 'cloudpush.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'cloudpush.aliyuncs.com',
    'cn-zhangjiakou' = 'cloudpush.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'cloudpush.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'cloudpush.aliyuncs.com',
    'eu-central-1' = 'cloudpush.aliyuncs.com',
    'eu-west-1' = 'cloudpush.aliyuncs.com',
    'eu-west-1-oxs' = 'cloudpush.aliyuncs.com',
    'me-east-1' = 'cloudpush.aliyuncs.com',
    'rus-west-1-pop' = 'cloudpush.aliyuncs.com',
    'us-east-1' = 'cloudpush.aliyuncs.com',
    'us-west-1' = 'cloudpush.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('push', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model PushTask {
  action?: string(name='Action'),
  message?: {
    body?: string(name='Body'),
    title?: string(name='Title'),
  }(name='Message'),
  notification?: {
    android?: {
      badgeActivity?: string(name='BadgeActivity'),
      badgeAddNum?: int32(name='BadgeAddNum'),
      badgeSetNum?: int32(name='BadgeSetNum'),
      channelId?: string(name='ChannelId'),
      extParameters?: string(name='ExtParameters'),
      groupId?: string(name='GroupId'),
      imageUrl?: string(name='ImageUrl'),
      inboxContent?: [ string ](name='InboxContent'),
      music?: string(name='Music'),
      notifyId?: int32(name='NotifyId'),
      options?: {
        accs?: {
          customStyle?: int32(name='CustomStyle'),
          notifyType?: string(name='NotifyType'),
          openActivity?: string(name='OpenActivity'),
          openType?: string(name='OpenType'),
          openUrl?: string(name='OpenUrl'),
          priority?: int32(name='Priority'),
          threadId?: string(name='ThreadId'),
        }(name='Accs'),
        honor?: {
          importance?: int32(name='Importance'),
        }(name='Honor'),
        huawei?: {
          category?: string(name='Category'),
          importance?: int32(name='Importance'),
          receiptId?: string(name='ReceiptId'),
          urgency?: string(name='Urgency'),
        }(name='Huawei'),
        oppo?: {
          category?: string(name='Category'),
          notifyLevel?: long(name='NotifyLevel'),
        }(name='Oppo'),
        vivo?: {
          category?: string(name='Category'),
          importance?: int32(name='Importance'),
          receiptId?: string(name='ReceiptId'),
        }(name='Vivo'),
        xiaomi?: {
          channel?: string(name='Channel'),
        }(name='Xiaomi'),
      }(name='Options'),
      pictureUrl?: string(name='PictureUrl'),
      renderStyle?: string(name='RenderStyle'),
      testMessage?: boolean(name='TestMessage'),
      vendorChannelActivity?: string(name='VendorChannelActivity'),
    }(name='Android'),
    body?: string(name='Body'),
    hmos?: {
      action?: string(name='Action'),
      badgeAddNum?: int32(name='BadgeAddNum'),
      badgeSetNum?: int32(name='BadgeSetNum'),
      category?: string(name='Category'),
      extParameters?: string(name='ExtParameters'),
      extensionExtraData?: string(name='ExtensionExtraData'),
      extensionPush?: boolean(name='ExtensionPush'),
      imageUrl?: string(name='ImageUrl'),
      inboxContent?: [ string ](name='InboxContent'),
      notifyId?: int32(name='NotifyId'),
      receiptId?: string(name='ReceiptId'),
      renderStyle?: string(name='RenderStyle'),
      slotType?: string(name='SlotType'),
      testMessage?: boolean(name='TestMessage'),
      uri?: string(name='Uri'),
    }(name='Hmos'),
    ios?: {
      apnsEnv?: string(name='ApnsEnv'),
      badge?: int32(name='Badge'),
      badgeAutoIncrement?: boolean(name='BadgeAutoIncrement'),
      category?: string(name='Category'),
      collapseId?: string(name='CollapseId'),
      extParameters?: string(name='ExtParameters'),
      interruptionLevel?: string(name='InterruptionLevel'),
      liveActivity?: {
        attributes?: string(name='Attributes'),
        attributesType?: string(name='AttributesType'),
        contentState?: string(name='ContentState'),
        dismissalDate?: long(name='DismissalDate'),
        event?: string(name='Event'),
        id?: string(name='Id'),
        staleDate?: long(name='StaleDate'),
      }(name='LiveActivity'),
      music?: string(name='Music'),
      mutable?: boolean(name='Mutable'),
      relevanceScore?: double(name='RelevanceScore'),
      silent?: boolean(name='Silent'),
      subtitle?: string(name='Subtitle'),
      threadId?: string(name='ThreadId'),
    }(name='Ios'),
    title?: string(name='Title'),
  }(name='Notification'),
  options?: {
    expireTime?: string(name='ExpireTime'),
    jobKey?: string(name='JobKey'),
    messageId?: long(name='MessageId'),
    pushTime?: string(name='PushTime'),
    sms?: {
      delaySecs?: long(name='DelaySecs'),
      params?: string(name='Params'),
      sendPolicy?: string(name='SendPolicy'),
      signName?: string(name='SignName'),
      templateName?: string(name='TemplateName'),
    }(name='Sms'),
    trim?: boolean(name='Trim'),
    useChannels?: string(name='UseChannels'),
  }(name='Options'),
  target?: {
    platform?: string(name='Platform'),
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='Target'),
}

model BindAliasRequest {
  aliasName?: string(name='AliasName', description='This parameter is required.', example='test_alias'),
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='e2ba19de97604f55b16557673****'),
}

model BindAliasResponseBody = {
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model BindAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindAliasResponseBody(name='body'),
}

/**
 * @summary 绑定别名
 *
 * @param request BindAliasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BindAliasResponse
 */
@context("bindAliasWithContext")
async function bindAliasWithOptions(request: BindAliasRequest, runtime: $RuntimeOptions): BindAliasResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BindAlias',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 绑定别名
 *
 * @param request BindAliasRequest
 * @return BindAliasResponse
 */
async function bindAlias(request: BindAliasRequest): BindAliasResponse {
  var runtime = new $RuntimeOptions{};
  return bindAliasWithOptions(request, runtime);
}

model BindPhoneRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='27725900'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='eb5f741d83d04d34807d229999eefa52'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='1381111****'),
}

model BindPhoneResponseBody = {
  requestId?: string(name='RequestId', example='0D1126F0-F8FF-513D-BAFA-F140447BDED4'),
}

model BindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindPhoneResponseBody(name='body'),
}

/**
 * @summary 绑定手机号码
 *
 * @param request BindPhoneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BindPhoneResponse
 */
@context("bindPhoneWithContext")
async function bindPhoneWithOptions(request: BindPhoneRequest, runtime: $RuntimeOptions): BindPhoneResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BindPhone',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 绑定手机号码
 *
 * @param request BindPhoneRequest
 * @return BindPhoneResponse
 */
async function bindPhone(request: BindPhoneRequest): BindPhoneResponse {
  var runtime = new $RuntimeOptions{};
  return bindPhoneWithOptions(request, runtime);
}

model BindTagRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  clientKey?: string(name='ClientKey', description='This parameter is required.', example='e2ba19de97604f55b16557673****'),
  keyType?: string(name='KeyType', description='This parameter is required.', example='DEVICE'),
  tagName?: string(name='TagName', description='This parameter is required.', example='test_tag,test_tag2'),
}

model BindTagResponseBody = {
  requestId?: string(name='RequestId', example='82FD0A09-5BB8-40FB-8221-9A11FE92D620'),
}

model BindTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindTagResponseBody(name='body'),
}

/**
 * @summary 绑定标签
 *
 * @param request BindTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BindTagResponse
 */
@context("bindTagWithContext")
async function bindTagWithOptions(request: BindTagRequest, runtime: $RuntimeOptions): BindTagResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.clientKey)) {
    query['ClientKey'] = request.clientKey;
  }
  if (!$isNull(request.keyType)) {
    query['KeyType'] = request.keyType;
  }
  if (!$isNull(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BindTag',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 绑定标签
 *
 * @param request BindTagRequest
 * @return BindTagResponse
 */
async function bindTag(request: BindTagRequest): BindTagResponse {
  var runtime = new $RuntimeOptions{};
  return bindTagWithOptions(request, runtime);
}

model CancelPushRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  messageId?: long(name='MessageId', description='This parameter is required.', example='501029'),
}

model CancelPushResponseBody = {
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CancelPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelPushResponseBody(name='body'),
}

/**
 * @summary 取消定时推送任务
 *
 * @param request CancelPushRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelPushResponse
 */
@context("cancelPushWithContext")
async function cancelPushWithOptions(request: CancelPushRequest, runtime: $RuntimeOptions): CancelPushResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消定时推送任务
 *
 * @param request CancelPushRequest
 * @return CancelPushResponse
 */
async function cancelPush(request: CancelPushRequest): CancelPushResponse {
  var runtime = new $RuntimeOptions{};
  return cancelPushWithOptions(request, runtime);
}

model CheckCertificateRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
}

model CheckCertificateResponseBody = {
  android?: boolean(name='Android', example='false'),
  developmentCertInfo?: {
    exipreTime?: long(name='ExipreTime', example='1470024000000'),
    status?: string(name='Status', example='EXPIRED'),
  }(name='DevelopmentCertInfo'),
  IOS?: boolean(name='IOS', example='true'),
  productionCertInfo?: {
    exipreTime?: long(name='ExipreTime', example='1764561600000'),
    status?: string(name='Status', example='OK'),
  }(name='ProductionCertInfo'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CheckCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCertificateResponseBody(name='body'),
}

/**
 * @param request CheckCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckCertificateResponse
 */
@context("checkCertificateWithContext")
async function checkCertificateWithOptions(request: CheckCertificateRequest, runtime: $RuntimeOptions): CheckCertificateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckCertificate',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CheckCertificateRequest
 * @return CheckCertificateResponse
 */
async function checkCertificate(request: CheckCertificateRequest): CheckCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return checkCertificateWithOptions(request, runtime);
}

model CheckDeviceRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23419851'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='ae296f3b04a58a05b30c95f****'),
}

model CheckDeviceResponseBody = {
  available?: boolean(name='Available', example='ture'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CheckDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDeviceResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CheckDevice is deprecated, please use Push::2016-08-01::CheckDevices instead.
 *
 * @summary 【废弃】验证设备有效性
 *
 * @param request CheckDeviceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckDeviceResponse
 */
// Deprecated
@context("checkDeviceWithContext")
async function checkDeviceWithOptions(request: CheckDeviceRequest, runtime: $RuntimeOptions): CheckDeviceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckDevice',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @deprecated OpenAPI CheckDevice is deprecated, please use Push::2016-08-01::CheckDevices instead.
 *
 * @summary 【废弃】验证设备有效性
 *
 * @param request CheckDeviceRequest
 * @return CheckDeviceResponse
 */
// Deprecated
async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  var runtime = new $RuntimeOptions{};
  return checkDeviceWithOptions(request, runtime);
}

model CheckDevicesRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23419851'),
  deviceIds?: string(name='DeviceIds', description='This parameter is required.', example='ae296f3b04a58a05b30c95f****,ae296f3b04a58a05b30c95f****,ae296f3b04a58a05b30c95f****'),
}

model CheckDevicesResponseBody = {
  deviceCheckInfos?: {
    deviceCheckInfo?: [ 
    {
      available?: boolean(name='Available', example='true'),
      deviceId?: string(name='DeviceId', example='ae296f3b04a58a05b30c95f****'),
    }
  ](name='DeviceCheckInfo')
  }(name='DeviceCheckInfos'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CheckDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDevicesResponseBody(name='body'),
}

/**
 * @summary 批量检查设备有效性
 *
 * @param request CheckDevicesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckDevicesResponse
 */
@context("checkDevicesWithContext")
async function checkDevicesWithOptions(request: CheckDevicesRequest, runtime: $RuntimeOptions): CheckDevicesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceIds)) {
    query['DeviceIds'] = request.deviceIds;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckDevices',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量检查设备有效性
 *
 * @param request CheckDevicesRequest
 * @return CheckDevicesResponse
 */
async function checkDevices(request: CheckDevicesRequest): CheckDevicesResponse {
  var runtime = new $RuntimeOptions{};
  return checkDevicesWithOptions(request, runtime);
}

model CompleteContinuouslyPushRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  messageId?: string(name='MessageId', description='This parameter is required.', example='4010290149170430'),
}

model CompleteContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId', example='4010290149170430'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CompleteContinuouslyPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompleteContinuouslyPushResponseBody(name='body'),
}

/**
 * @summary 完成持续推送任务
 *
 * @param request CompleteContinuouslyPushRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CompleteContinuouslyPushResponse
 */
@context("completeContinuouslyPushWithContext")
async function completeContinuouslyPushWithOptions(request: CompleteContinuouslyPushRequest, runtime: $RuntimeOptions): CompleteContinuouslyPushResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CompleteContinuouslyPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 完成持续推送任务
 *
 * @param request CompleteContinuouslyPushRequest
 * @return CompleteContinuouslyPushResponse
 */
async function completeContinuouslyPush(request: CompleteContinuouslyPushRequest): CompleteContinuouslyPushResponse {
  var runtime = new $RuntimeOptions{};
  return completeContinuouslyPushWithOptions(request, runtime);
}

model ContinuouslyPushRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  messageId?: string(name='MessageId', description='This parameter is required.', example='500131'),
  target?: string(name='Target', description='This parameter is required.', example='DEVICE'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='a692961a92534047ad3625****'),
}

model ContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
  requestId?: string(name='RequestId', example='500131'),
}

model ContinuouslyPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinuouslyPushResponseBody(name='body'),
}

/**
 * @summary 持续推送
 *
 * @param request ContinuouslyPushRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ContinuouslyPushResponse
 */
@context("continuouslyPushWithContext")
async function continuouslyPushWithOptions(request: ContinuouslyPushRequest, runtime: $RuntimeOptions): ContinuouslyPushResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ContinuouslyPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 持续推送
 *
 * @param request ContinuouslyPushRequest
 * @return ContinuouslyPushResponse
 */
async function continuouslyPush(request: ContinuouslyPushRequest): ContinuouslyPushResponse {
  var runtime = new $RuntimeOptions{};
  return continuouslyPushWithOptions(request, runtime);
}

model ListSummaryAppsResponseBody = {
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
  summaryAppInfos?: {
    summaryAppInfo?: [ 
    {
      appKey?: long(name='AppKey', example='23****07'),
      appName?: string(name='AppName', example='abc'),
    }
  ](name='SummaryAppInfo')
  }(name='SummaryAppInfos'),
}

model ListSummaryAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSummaryAppsResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI ListSummaryApps is deprecated, please use Mhub::2017-08-25::ListApps instead.
 *
 * @summary 【废弃】查询用户已创建的app列表
 *
 * @param request ListSummaryAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSummaryAppsResponse
 */
// Deprecated
async function listSummaryAppsWithOptions(runtime: $RuntimeOptions): ListSummaryAppsResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListSummaryApps',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @deprecated OpenAPI ListSummaryApps is deprecated, please use Mhub::2017-08-25::ListApps instead.
 *
 * @summary 【废弃】查询用户已创建的app列表
 *
 * @return ListSummaryAppsResponse
 */
// Deprecated
async function listSummaryApps(): ListSummaryAppsResponse {
  var runtime = new $RuntimeOptions{};
  return listSummaryAppsWithOptions(runtime);
}

model ListTagsRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId', example='6EEF262B-EA7D-41DC-89B9-20F3D1E28194'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName', example='test_tag2'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model ListTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsResponseBody(name='body'),
}

/**
 * @summary 获取标签列表
 *
 * @param request ListTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagsResponse
 */
@context("listTagsWithContext")
async function listTagsWithOptions(request: ListTagsRequest, runtime: $RuntimeOptions): ListTagsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTags',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标签列表
 *
 * @param request ListTagsRequest
 * @return ListTagsResponse
 */
async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new $RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model MassPushRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  idempotentToken?: string(name='IdempotentToken'),
  pushTask?: [ 
    {
      androidActivity?: string(name='AndroidActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
      androidBadgeAddNum?: int32(name='AndroidBadgeAddNum', example='99'),
      androidBadgeClass?: string(name='AndroidBadgeClass'),
      androidBadgeSetNum?: int32(name='AndroidBadgeSetNum', example='99'),
      androidBigBody?: string(name='AndroidBigBody'),
      androidBigPictureUrl?: string(name='AndroidBigPictureUrl', example='https://imag.example.com/image.png'),
      androidBigTitle?: string(name='AndroidBigTitle'),
      androidExtParameters?: string(name='AndroidExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}'),
      androidHonorTargetUserType?: int32(name='AndroidHonorTargetUserType'),
      androidHuaweiReceiptId?: string(name='AndroidHuaweiReceiptId', example='RCP4C123456'),
      androidHuaweiTargetUserType?: int32(name='AndroidHuaweiTargetUserType', example='1'),
      androidImageUrl?: string(name='AndroidImageUrl', example='https://imag.example.com/image.png'),
      androidInboxBody?: string(name='AndroidInboxBody'),
      androidMeizuNoticeMsgType?: int32(name='AndroidMeizuNoticeMsgType', example='0', nullable=false),
      androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory', example='VOIP'),
      androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency', example='HIGH'),
      androidMessageOppoCategory?: string(name='AndroidMessageOppoCategory'),
      androidMessageOppoNotifyLevel?: int32(name='AndroidMessageOppoNotifyLevel'),
      androidMessageVivoCategory?: string(name='AndroidMessageVivoCategory', example='TODO'),
      androidMusic?: string(name='AndroidMusic'),
      androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority', example='0'),
      androidNotificationBarType?: int32(name='AndroidNotificationBarType', example='2'),
      androidNotificationChannel?: string(name='AndroidNotificationChannel', example='1'),
      androidNotificationGroup?: string(name='AndroidNotificationGroup', example='group-1'),
      androidNotificationHonorChannel?: string(name='AndroidNotificationHonorChannel', example='LOW'),
      androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel', example='LOW'),
      androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', example='100001'),
      androidNotificationThreadId?: string(name='AndroidNotificationThreadId'),
      androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel', example='0'),
      androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel', example='michannel'),
      androidNotifyType?: string(name='AndroidNotifyType', example='VIBRATE'),
      androidOpenType?: string(name='AndroidOpenType', example='APPLICATION'),
      androidOpenUrl?: string(name='AndroidOpenUrl', example='https://xxxx.xxx'),
      androidPopupActivity?: string(name='AndroidPopupActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
      androidPopupBody?: string(name='AndroidPopupBody', example='hello'),
      androidPopupTitle?: string(name='AndroidPopupTitle', example='hello'),
      androidRemind?: boolean(name='AndroidRemind', example='true'),
      androidRenderStyle?: string(name='AndroidRenderStyle', example='1'),
      androidTargetUserType?: int32(name='AndroidTargetUserType'),
      androidVivoPushMode?: int32(name='AndroidVivoPushMode', example='1'),
      androidVivoReceiptId?: string(name='AndroidVivoReceiptId'),
      androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity', deprecated=true),
      androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody', deprecated=true),
      androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle', deprecated=true),
      androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl', example='https://f6.market.xiaomi.com/download/MiPass/aaa/bbb.png', deprecated=true),
      androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl', example='https://imag.example.com/image.png', deprecated=true),
      body?: string(name='Body', example='hello'),
      deviceType?: string(name='DeviceType', description='This parameter is required.', example='ALL'),
      expireTime?: string(name='ExpireTime', example='2019-02-20T00:00:00Z'),
      harmonyAction?: string(name='HarmonyAction'),
      harmonyActionType?: string(name='HarmonyActionType'),
      harmonyBadgeAddNum?: int32(name='HarmonyBadgeAddNum'),
      harmonyBadgeSetNum?: int32(name='HarmonyBadgeSetNum'),
      harmonyCategory?: string(name='HarmonyCategory'),
      harmonyExtParameters?: string(name='HarmonyExtParameters'),
      harmonyExtensionExtraData?: string(name='HarmonyExtensionExtraData'),
      harmonyExtensionPush?: boolean(name='HarmonyExtensionPush'),
      harmonyImageUrl?: string(name='HarmonyImageUrl'),
      harmonyInboxContent?: string(name='HarmonyInboxContent'),
      harmonyNotificationSlotType?: string(name='HarmonyNotificationSlotType'),
      harmonyNotifyId?: int32(name='HarmonyNotifyId'),
      harmonyReceiptId?: string(name='HarmonyReceiptId'),
      harmonyRemind?: boolean(name='HarmonyRemind'),
      harmonyRemindBody?: string(name='HarmonyRemindBody'),
      harmonyRemindTitle?: string(name='HarmonyRemindTitle'),
      harmonyRenderStyle?: string(name='HarmonyRenderStyle'),
      harmonyTestMessage?: boolean(name='HarmonyTestMessage'),
      harmonyUri?: string(name='HarmonyUri'),
      jobKey?: string(name='JobKey', example='123'),
      pushTime?: string(name='PushTime', example='2019-02-20T00:00:00Z'),
      pushType?: string(name='PushType', description='This parameter is required.', example='MESSAGE'),
      sendChannels?: string(name='SendChannels', example='accs,huawei,xiaomi'),
      sendSpeed?: int32(name='SendSpeed', example='0', deprecated=true),
      storeOffline?: boolean(name='StoreOffline', example='true'),
      target?: string(name='Target', description='This parameter is required.', example='DEVICE'),
      targetValue?: string(name='TargetValue', description='This parameter is required.', example='deviceid1,deviceid2'),
      title?: string(name='Title', example='title'),
      trim?: boolean(name='Trim', example='false'),
      androidOppoPrivateContentParameters?: map[string]string(name='androidOppoPrivateContentParameters'),
      androidOppoPrivateMsgTemplateId?: string(name='androidOppoPrivateMsgTemplateId'),
      androidOppoPrivateTitleParameters?: map[string]string(name='androidOppoPrivateTitleParameters'),
      iOSApnsEnv?: string(name='iOSApnsEnv', example='DEV'),
      iOSBadge?: int32(name='iOSBadge', example='0'),
      iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement', example='true'),
      iOSExtParameters?: string(name='iOSExtParameters', example='{“attachment”: “https://xxxx.xxx/notification_pic.png"}'),
      iOSInterruptionLevel?: string(name='iOSInterruptionLevel', example='active'),
      iOSLiveActivityAttributes?: string(name='iOSLiveActivityAttributes'),
      iOSLiveActivityAttributesType?: string(name='iOSLiveActivityAttributesType'),
      iOSLiveActivityContentState?: string(name='iOSLiveActivityContentState'),
      iOSLiveActivityDismissalDate?: long(name='iOSLiveActivityDismissalDate'),
      iOSLiveActivityEvent?: string(name='iOSLiveActivityEvent'),
      iOSLiveActivityId?: string(name='iOSLiveActivityId'),
      iOSLiveActivityStaleDate?: long(name='iOSLiveActivityStaleDate'),
      iOSMusic?: string(name='iOSMusic', example='””'),
      iOSMutableContent?: boolean(name='iOSMutableContent', example='true'),
      iOSNotificationCategory?: string(name='iOSNotificationCategory', example='ios'),
      iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId', example='ZD2011'),
      iOSNotificationThreadId?: string(name='iOSNotificationThreadId', example='abc'),
      iOSRelevanceScore?: double(name='iOSRelevanceScore', example='0.01'),
      iOSRemind?: boolean(name='iOSRemind', example='true'),
      iOSRemindBody?: string(name='iOSRemindBody'),
      iOSSilentNotification?: boolean(name='iOSSilentNotification', example='true'),
      iOSSubtitle?: string(name='iOSSubtitle', example='subtitle'),
    }
  ](name='PushTask', description='This parameter is required.'),
}

model MassPushResponseBody = {
  messageIds?: {
    messageId?: [ string ](name='MessageId')
  }(name='MessageIds'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model MassPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MassPushResponseBody(name='body'),
}

/**
 * @summary 批量推送
 *
 * @param request MassPushRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MassPushResponse
 */
@context("massPushWithContext")
async function massPushWithOptions(request: MassPushRequest, runtime: $RuntimeOptions): MassPushResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.idempotentToken)) {
    query['IdempotentToken'] = request.idempotentToken;
  }
  var body : map[string]any = {};
  if (!$isNull(request.pushTask)) {
    body['PushTask'] = request.pushTask;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MassPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量推送
 *
 * @param request MassPushRequest
 * @return MassPushResponse
 */
async function massPush(request: MassPushRequest): MassPushResponse {
  var runtime = new $RuntimeOptions{};
  return massPushWithOptions(request, runtime);
}

model PushRequest {
  androidActivity?: string(name='AndroidActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
  androidBadgeAddNum?: int32(name='AndroidBadgeAddNum'),
  androidBadgeClass?: string(name='AndroidBadgeClass'),
  androidBadgeSetNum?: int32(name='AndroidBadgeSetNum'),
  androidBigBody?: string(name='AndroidBigBody'),
  androidBigPictureUrl?: string(name='AndroidBigPictureUrl', example='https://imag.example.com/image.png'),
  androidBigTitle?: string(name='AndroidBigTitle'),
  androidExtParameters?: string(name='AndroidExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}'),
  androidHonorTargetUserType?: int32(name='AndroidHonorTargetUserType'),
  androidHuaweiReceiptId?: string(name='AndroidHuaweiReceiptId', example='RCP4C123456'),
  androidHuaweiTargetUserType?: int32(name='AndroidHuaweiTargetUserType', example='0'),
  androidImageUrl?: string(name='AndroidImageUrl', example='https://imag.example.com/image.png'),
  androidInboxBody?: string(name='AndroidInboxBody'),
  androidMeizuNoticeMsgType?: int32(name='AndroidMeizuNoticeMsgType', example='0', nullable=true),
  androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory', example='VOIP'),
  androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency', example='HIGH'),
  androidMessageOppoCategory?: string(name='AndroidMessageOppoCategory'),
  androidMessageOppoNotifyLevel?: int32(name='AndroidMessageOppoNotifyLevel'),
  androidMessageVivoCategory?: string(name='AndroidMessageVivoCategory', example='TODO'),
  androidMusic?: string(name='AndroidMusic'),
  androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority', example='0'),
  androidNotificationBarType?: int32(name='AndroidNotificationBarType', example='2'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel', example='1'),
  androidNotificationGroup?: string(name='AndroidNotificationGroup', example='group-1'),
  androidNotificationHonorChannel?: string(name='AndroidNotificationHonorChannel', example='LOW'),
  androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel', example='LOW'),
  androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', example='100001'),
  androidNotificationThreadId?: string(name='AndroidNotificationThreadId'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel', example='classification'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel', example='michannel'),
  androidNotifyType?: string(name='AndroidNotifyType', example='BOTH'),
  androidOpenType?: string(name='AndroidOpenType', example='APPLICATION'),
  androidOpenUrl?: string(name='AndroidOpenUrl', example='https://xxxx.xxx'),
  androidPopupActivity?: string(name='AndroidPopupActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
  androidPopupBody?: string(name='AndroidPopupBody', example='hello'),
  androidPopupTitle?: string(name='AndroidPopupTitle', example='hello'),
  androidRemind?: boolean(name='AndroidRemind', example='true'),
  androidRenderStyle?: int32(name='AndroidRenderStyle', example='1'),
  androidTargetUserType?: int32(name='AndroidTargetUserType'),
  androidVivoPushMode?: int32(name='AndroidVivoPushMode', example='0'),
  androidVivoReceiptId?: string(name='AndroidVivoReceiptId'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity', deprecated=true),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody', deprecated=true),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle', deprecated=true),
  androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl', example='https://f6.market.xiaomi.com/download/MiPass/aaa/bbb.png', deprecated=true),
  androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl', example='https://imag.example.com/image.png', deprecated=true),
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  body?: string(name='Body', example='hello'),
  deviceType?: string(name='DeviceType', description='This parameter is required.', example='ALL'),
  expireTime?: string(name='ExpireTime', example='2019-02-20T00:00:00Z'),
  harmonyAction?: string(name='HarmonyAction'),
  harmonyActionType?: string(name='HarmonyActionType'),
  harmonyBadgeAddNum?: int32(name='HarmonyBadgeAddNum'),
  harmonyBadgeSetNum?: int32(name='HarmonyBadgeSetNum'),
  harmonyCategory?: string(name='HarmonyCategory'),
  harmonyExtParameters?: string(name='HarmonyExtParameters'),
  harmonyExtensionExtraData?: string(name='HarmonyExtensionExtraData'),
  harmonyExtensionPush?: boolean(name='HarmonyExtensionPush'),
  harmonyImageUrl?: string(name='HarmonyImageUrl'),
  harmonyInboxContent?: string(name='HarmonyInboxContent'),
  harmonyNotificationSlotType?: string(name='HarmonyNotificationSlotType'),
  harmonyNotifyId?: int32(name='HarmonyNotifyId'),
  harmonyReceiptId?: string(name='HarmonyReceiptId'),
  harmonyRemind?: boolean(name='HarmonyRemind'),
  harmonyRemindBody?: string(name='HarmonyRemindBody'),
  harmonyRemindTitle?: string(name='HarmonyRemindTitle'),
  harmonyRenderStyle?: string(name='HarmonyRenderStyle'),
  harmonyTestMessage?: boolean(name='HarmonyTestMessage'),
  harmonyUri?: string(name='HarmonyUri'),
  idempotentToken?: string(name='IdempotentToken'),
  jobKey?: string(name='JobKey', example='123'),
  pushTime?: string(name='PushTime', example='2019-02-20T00:00:00Z'),
  pushType?: string(name='PushType', description='This parameter is required.', example='MESSAGE'),
  sendChannels?: string(name='SendChannels', example='accs,huawei,xiaomi'),
  sendSpeed?: int32(name='SendSpeed', example='0', deprecated=true),
  smsDelaySecs?: int32(name='SmsDelaySecs', example='15'),
  smsParams?: string(name='SmsParams', example='key1=value1'),
  smsSendPolicy?: int32(name='SmsSendPolicy', example='0'),
  smsSignName?: string(name='SmsSignName'),
  smsTemplateName?: string(name='SmsTemplateName'),
  storeOffline?: boolean(name='StoreOffline', example='false'),
  target?: string(name='Target', description='This parameter is required.', example='ALL'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='ALL'),
  title?: string(name='Title', example='title'),
  trim?: boolean(name='Trim', example='false'),
  androidOppoPrivateContentParameters?: map[string]string(name='androidOppoPrivateContentParameters'),
  androidOppoPrivateMsgTemplateId?: string(name='androidOppoPrivateMsgTemplateId'),
  androidOppoPrivateTitleParameters?: map[string]string(name='androidOppoPrivateTitleParameters'),
  iOSApnsEnv?: string(name='iOSApnsEnv', example='DEV'),
  iOSBadge?: int32(name='iOSBadge', example='0'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement', example='true'),
  iOSExtParameters?: string(name='iOSExtParameters', example='{“attachment”: “https://xxxx.xxx/notification_pic.png"}'),
  iOSInterruptionLevel?: string(name='iOSInterruptionLevel', example='active'),
  iOSLiveActivityAttributes?: string(name='iOSLiveActivityAttributes'),
  iOSLiveActivityAttributesType?: string(name='iOSLiveActivityAttributesType'),
  iOSLiveActivityContentState?: string(name='iOSLiveActivityContentState'),
  iOSLiveActivityDismissalDate?: long(name='iOSLiveActivityDismissalDate'),
  iOSLiveActivityEvent?: string(name='iOSLiveActivityEvent'),
  iOSLiveActivityId?: string(name='iOSLiveActivityId'),
  iOSLiveActivityStaleDate?: long(name='iOSLiveActivityStaleDate'),
  iOSMusic?: string(name='iOSMusic', example='""'),
  iOSMutableContent?: boolean(name='iOSMutableContent', example='true'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory', example='ios'),
  iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId', example='ZD2011'),
  iOSNotificationThreadId?: string(name='iOSNotificationThreadId', example='abc'),
  iOSRelevanceScore?: double(name='iOSRelevanceScore', example='0.01'),
  iOSRemind?: boolean(name='iOSRemind', example='true'),
  iOSRemindBody?: string(name='iOSRemindBody'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification', example='true'),
  iOSSubtitle?: string(name='iOSSubtitle', example='su\\\\"b'),
}

model PushShrinkRequest {
  androidActivity?: string(name='AndroidActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
  androidBadgeAddNum?: int32(name='AndroidBadgeAddNum'),
  androidBadgeClass?: string(name='AndroidBadgeClass'),
  androidBadgeSetNum?: int32(name='AndroidBadgeSetNum'),
  androidBigBody?: string(name='AndroidBigBody'),
  androidBigPictureUrl?: string(name='AndroidBigPictureUrl', example='https://imag.example.com/image.png'),
  androidBigTitle?: string(name='AndroidBigTitle'),
  androidExtParameters?: string(name='AndroidExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}'),
  androidHonorTargetUserType?: int32(name='AndroidHonorTargetUserType'),
  androidHuaweiReceiptId?: string(name='AndroidHuaweiReceiptId', example='RCP4C123456'),
  androidHuaweiTargetUserType?: int32(name='AndroidHuaweiTargetUserType', example='0'),
  androidImageUrl?: string(name='AndroidImageUrl', example='https://imag.example.com/image.png'),
  androidInboxBody?: string(name='AndroidInboxBody'),
  androidMeizuNoticeMsgType?: int32(name='AndroidMeizuNoticeMsgType', example='0', nullable=true),
  androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory', example='VOIP'),
  androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency', example='HIGH'),
  androidMessageOppoCategory?: string(name='AndroidMessageOppoCategory'),
  androidMessageOppoNotifyLevel?: int32(name='AndroidMessageOppoNotifyLevel'),
  androidMessageVivoCategory?: string(name='AndroidMessageVivoCategory', example='TODO'),
  androidMusic?: string(name='AndroidMusic'),
  androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority', example='0'),
  androidNotificationBarType?: int32(name='AndroidNotificationBarType', example='2'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel', example='1'),
  androidNotificationGroup?: string(name='AndroidNotificationGroup', example='group-1'),
  androidNotificationHonorChannel?: string(name='AndroidNotificationHonorChannel', example='LOW'),
  androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel', example='LOW'),
  androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', example='100001'),
  androidNotificationThreadId?: string(name='AndroidNotificationThreadId'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel', example='classification'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel', example='michannel'),
  androidNotifyType?: string(name='AndroidNotifyType', example='BOTH'),
  androidOpenType?: string(name='AndroidOpenType', example='APPLICATION'),
  androidOpenUrl?: string(name='AndroidOpenUrl', example='https://xxxx.xxx'),
  androidPopupActivity?: string(name='AndroidPopupActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
  androidPopupBody?: string(name='AndroidPopupBody', example='hello'),
  androidPopupTitle?: string(name='AndroidPopupTitle', example='hello'),
  androidRemind?: boolean(name='AndroidRemind', example='true'),
  androidRenderStyle?: int32(name='AndroidRenderStyle', example='1'),
  androidTargetUserType?: int32(name='AndroidTargetUserType'),
  androidVivoPushMode?: int32(name='AndroidVivoPushMode', example='0'),
  androidVivoReceiptId?: string(name='AndroidVivoReceiptId'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity', deprecated=true),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody', deprecated=true),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle', deprecated=true),
  androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl', example='https://f6.market.xiaomi.com/download/MiPass/aaa/bbb.png', deprecated=true),
  androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl', example='https://imag.example.com/image.png', deprecated=true),
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  body?: string(name='Body', example='hello'),
  deviceType?: string(name='DeviceType', description='This parameter is required.', example='ALL'),
  expireTime?: string(name='ExpireTime', example='2019-02-20T00:00:00Z'),
  harmonyAction?: string(name='HarmonyAction'),
  harmonyActionType?: string(name='HarmonyActionType'),
  harmonyBadgeAddNum?: int32(name='HarmonyBadgeAddNum'),
  harmonyBadgeSetNum?: int32(name='HarmonyBadgeSetNum'),
  harmonyCategory?: string(name='HarmonyCategory'),
  harmonyExtParameters?: string(name='HarmonyExtParameters'),
  harmonyExtensionExtraData?: string(name='HarmonyExtensionExtraData'),
  harmonyExtensionPush?: boolean(name='HarmonyExtensionPush'),
  harmonyImageUrl?: string(name='HarmonyImageUrl'),
  harmonyInboxContent?: string(name='HarmonyInboxContent'),
  harmonyNotificationSlotType?: string(name='HarmonyNotificationSlotType'),
  harmonyNotifyId?: int32(name='HarmonyNotifyId'),
  harmonyReceiptId?: string(name='HarmonyReceiptId'),
  harmonyRemind?: boolean(name='HarmonyRemind'),
  harmonyRemindBody?: string(name='HarmonyRemindBody'),
  harmonyRemindTitle?: string(name='HarmonyRemindTitle'),
  harmonyRenderStyle?: string(name='HarmonyRenderStyle'),
  harmonyTestMessage?: boolean(name='HarmonyTestMessage'),
  harmonyUri?: string(name='HarmonyUri'),
  idempotentToken?: string(name='IdempotentToken'),
  jobKey?: string(name='JobKey', example='123'),
  pushTime?: string(name='PushTime', example='2019-02-20T00:00:00Z'),
  pushType?: string(name='PushType', description='This parameter is required.', example='MESSAGE'),
  sendChannels?: string(name='SendChannels', example='accs,huawei,xiaomi'),
  sendSpeed?: int32(name='SendSpeed', example='0', deprecated=true),
  smsDelaySecs?: int32(name='SmsDelaySecs', example='15'),
  smsParams?: string(name='SmsParams', example='key1=value1'),
  smsSendPolicy?: int32(name='SmsSendPolicy', example='0'),
  smsSignName?: string(name='SmsSignName'),
  smsTemplateName?: string(name='SmsTemplateName'),
  storeOffline?: boolean(name='StoreOffline', example='false'),
  target?: string(name='Target', description='This parameter is required.', example='ALL'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='ALL'),
  title?: string(name='Title', example='title'),
  trim?: boolean(name='Trim', example='false'),
  androidOppoPrivateContentParametersShrink?: string(name='androidOppoPrivateContentParameters'),
  androidOppoPrivateMsgTemplateId?: string(name='androidOppoPrivateMsgTemplateId'),
  androidOppoPrivateTitleParametersShrink?: string(name='androidOppoPrivateTitleParameters'),
  iOSApnsEnv?: string(name='iOSApnsEnv', example='DEV'),
  iOSBadge?: int32(name='iOSBadge', example='0'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement', example='true'),
  iOSExtParameters?: string(name='iOSExtParameters', example='{“attachment”: “https://xxxx.xxx/notification_pic.png"}'),
  iOSInterruptionLevel?: string(name='iOSInterruptionLevel', example='active'),
  iOSLiveActivityAttributes?: string(name='iOSLiveActivityAttributes'),
  iOSLiveActivityAttributesType?: string(name='iOSLiveActivityAttributesType'),
  iOSLiveActivityContentState?: string(name='iOSLiveActivityContentState'),
  iOSLiveActivityDismissalDate?: long(name='iOSLiveActivityDismissalDate'),
  iOSLiveActivityEvent?: string(name='iOSLiveActivityEvent'),
  iOSLiveActivityId?: string(name='iOSLiveActivityId'),
  iOSLiveActivityStaleDate?: long(name='iOSLiveActivityStaleDate'),
  iOSMusic?: string(name='iOSMusic', example='""'),
  iOSMutableContent?: boolean(name='iOSMutableContent', example='true'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory', example='ios'),
  iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId', example='ZD2011'),
  iOSNotificationThreadId?: string(name='iOSNotificationThreadId', example='abc'),
  iOSRelevanceScore?: double(name='iOSRelevanceScore', example='0.01'),
  iOSRemind?: boolean(name='iOSRemind', example='true'),
  iOSRemindBody?: string(name='iOSRemindBody'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification', example='true'),
  iOSSubtitle?: string(name='iOSSubtitle', example='su\\\\"b'),
}

model PushResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushResponseBody(name='body'),
}

/**
 * @summary 高级推送接口
 *
 * @param tmpReq PushRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushResponse
 */
@context("pushWithContext")
async function pushWithOptions(tmpReq: PushRequest, runtime: $RuntimeOptions): PushResponse {
  tmpReq.validate();
  var request = new PushShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.androidOppoPrivateContentParameters)) {
    request.androidOppoPrivateContentParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.androidOppoPrivateContentParameters, 'androidOppoPrivateContentParameters', 'json');
  }
  if (!$isNull(tmpReq.androidOppoPrivateTitleParameters)) {
    request.androidOppoPrivateTitleParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.androidOppoPrivateTitleParameters, 'androidOppoPrivateTitleParameters', 'json');
  }
  var query = {};
  if (!$isNull(request.androidActivity)) {
    query['AndroidActivity'] = request.androidActivity;
  }
  if (!$isNull(request.androidBadgeAddNum)) {
    query['AndroidBadgeAddNum'] = request.androidBadgeAddNum;
  }
  if (!$isNull(request.androidBadgeClass)) {
    query['AndroidBadgeClass'] = request.androidBadgeClass;
  }
  if (!$isNull(request.androidBadgeSetNum)) {
    query['AndroidBadgeSetNum'] = request.androidBadgeSetNum;
  }
  if (!$isNull(request.androidBigBody)) {
    query['AndroidBigBody'] = request.androidBigBody;
  }
  if (!$isNull(request.androidBigPictureUrl)) {
    query['AndroidBigPictureUrl'] = request.androidBigPictureUrl;
  }
  if (!$isNull(request.androidBigTitle)) {
    query['AndroidBigTitle'] = request.androidBigTitle;
  }
  if (!$isNull(request.androidExtParameters)) {
    query['AndroidExtParameters'] = request.androidExtParameters;
  }
  if (!$isNull(request.androidHonorTargetUserType)) {
    query['AndroidHonorTargetUserType'] = request.androidHonorTargetUserType;
  }
  if (!$isNull(request.androidHuaweiReceiptId)) {
    query['AndroidHuaweiReceiptId'] = request.androidHuaweiReceiptId;
  }
  if (!$isNull(request.androidHuaweiTargetUserType)) {
    query['AndroidHuaweiTargetUserType'] = request.androidHuaweiTargetUserType;
  }
  if (!$isNull(request.androidImageUrl)) {
    query['AndroidImageUrl'] = request.androidImageUrl;
  }
  if (!$isNull(request.androidInboxBody)) {
    query['AndroidInboxBody'] = request.androidInboxBody;
  }
  if (!$isNull(request.androidMeizuNoticeMsgType)) {
    query['AndroidMeizuNoticeMsgType'] = request.androidMeizuNoticeMsgType;
  }
  if (!$isNull(request.androidMessageHuaweiCategory)) {
    query['AndroidMessageHuaweiCategory'] = request.androidMessageHuaweiCategory;
  }
  if (!$isNull(request.androidMessageHuaweiUrgency)) {
    query['AndroidMessageHuaweiUrgency'] = request.androidMessageHuaweiUrgency;
  }
  if (!$isNull(request.androidMessageOppoCategory)) {
    query['AndroidMessageOppoCategory'] = request.androidMessageOppoCategory;
  }
  if (!$isNull(request.androidMessageOppoNotifyLevel)) {
    query['AndroidMessageOppoNotifyLevel'] = request.androidMessageOppoNotifyLevel;
  }
  if (!$isNull(request.androidMessageVivoCategory)) {
    query['AndroidMessageVivoCategory'] = request.androidMessageVivoCategory;
  }
  if (!$isNull(request.androidMusic)) {
    query['AndroidMusic'] = request.androidMusic;
  }
  if (!$isNull(request.androidNotificationBarPriority)) {
    query['AndroidNotificationBarPriority'] = request.androidNotificationBarPriority;
  }
  if (!$isNull(request.androidNotificationBarType)) {
    query['AndroidNotificationBarType'] = request.androidNotificationBarType;
  }
  if (!$isNull(request.androidNotificationChannel)) {
    query['AndroidNotificationChannel'] = request.androidNotificationChannel;
  }
  if (!$isNull(request.androidNotificationGroup)) {
    query['AndroidNotificationGroup'] = request.androidNotificationGroup;
  }
  if (!$isNull(request.androidNotificationHonorChannel)) {
    query['AndroidNotificationHonorChannel'] = request.androidNotificationHonorChannel;
  }
  if (!$isNull(request.androidNotificationHuaweiChannel)) {
    query['AndroidNotificationHuaweiChannel'] = request.androidNotificationHuaweiChannel;
  }
  if (!$isNull(request.androidNotificationNotifyId)) {
    query['AndroidNotificationNotifyId'] = request.androidNotificationNotifyId;
  }
  if (!$isNull(request.androidNotificationThreadId)) {
    query['AndroidNotificationThreadId'] = request.androidNotificationThreadId;
  }
  if (!$isNull(request.androidNotificationVivoChannel)) {
    query['AndroidNotificationVivoChannel'] = request.androidNotificationVivoChannel;
  }
  if (!$isNull(request.androidNotificationXiaomiChannel)) {
    query['AndroidNotificationXiaomiChannel'] = request.androidNotificationXiaomiChannel;
  }
  if (!$isNull(request.androidNotifyType)) {
    query['AndroidNotifyType'] = request.androidNotifyType;
  }
  if (!$isNull(request.androidOpenType)) {
    query['AndroidOpenType'] = request.androidOpenType;
  }
  if (!$isNull(request.androidOpenUrl)) {
    query['AndroidOpenUrl'] = request.androidOpenUrl;
  }
  if (!$isNull(request.androidPopupActivity)) {
    query['AndroidPopupActivity'] = request.androidPopupActivity;
  }
  if (!$isNull(request.androidPopupBody)) {
    query['AndroidPopupBody'] = request.androidPopupBody;
  }
  if (!$isNull(request.androidPopupTitle)) {
    query['AndroidPopupTitle'] = request.androidPopupTitle;
  }
  if (!$isNull(request.androidRemind)) {
    query['AndroidRemind'] = request.androidRemind;
  }
  if (!$isNull(request.androidRenderStyle)) {
    query['AndroidRenderStyle'] = request.androidRenderStyle;
  }
  if (!$isNull(request.androidTargetUserType)) {
    query['AndroidTargetUserType'] = request.androidTargetUserType;
  }
  if (!$isNull(request.androidVivoPushMode)) {
    query['AndroidVivoPushMode'] = request.androidVivoPushMode;
  }
  if (!$isNull(request.androidVivoReceiptId)) {
    query['AndroidVivoReceiptId'] = request.androidVivoReceiptId;
  }
  if (!$isNull(request.androidXiaoMiActivity)) {
    query['AndroidXiaoMiActivity'] = request.androidXiaoMiActivity;
  }
  if (!$isNull(request.androidXiaoMiNotifyBody)) {
    query['AndroidXiaoMiNotifyBody'] = request.androidXiaoMiNotifyBody;
  }
  if (!$isNull(request.androidXiaoMiNotifyTitle)) {
    query['AndroidXiaoMiNotifyTitle'] = request.androidXiaoMiNotifyTitle;
  }
  if (!$isNull(request.androidXiaomiBigPictureUrl)) {
    query['AndroidXiaomiBigPictureUrl'] = request.androidXiaomiBigPictureUrl;
  }
  if (!$isNull(request.androidXiaomiImageUrl)) {
    query['AndroidXiaomiImageUrl'] = request.androidXiaomiImageUrl;
  }
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.body)) {
    query['Body'] = request.body;
  }
  if (!$isNull(request.deviceType)) {
    query['DeviceType'] = request.deviceType;
  }
  if (!$isNull(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!$isNull(request.harmonyAction)) {
    query['HarmonyAction'] = request.harmonyAction;
  }
  if (!$isNull(request.harmonyActionType)) {
    query['HarmonyActionType'] = request.harmonyActionType;
  }
  if (!$isNull(request.harmonyBadgeAddNum)) {
    query['HarmonyBadgeAddNum'] = request.harmonyBadgeAddNum;
  }
  if (!$isNull(request.harmonyBadgeSetNum)) {
    query['HarmonyBadgeSetNum'] = request.harmonyBadgeSetNum;
  }
  if (!$isNull(request.harmonyCategory)) {
    query['HarmonyCategory'] = request.harmonyCategory;
  }
  if (!$isNull(request.harmonyExtParameters)) {
    query['HarmonyExtParameters'] = request.harmonyExtParameters;
  }
  if (!$isNull(request.harmonyExtensionExtraData)) {
    query['HarmonyExtensionExtraData'] = request.harmonyExtensionExtraData;
  }
  if (!$isNull(request.harmonyExtensionPush)) {
    query['HarmonyExtensionPush'] = request.harmonyExtensionPush;
  }
  if (!$isNull(request.harmonyImageUrl)) {
    query['HarmonyImageUrl'] = request.harmonyImageUrl;
  }
  if (!$isNull(request.harmonyInboxContent)) {
    query['HarmonyInboxContent'] = request.harmonyInboxContent;
  }
  if (!$isNull(request.harmonyNotificationSlotType)) {
    query['HarmonyNotificationSlotType'] = request.harmonyNotificationSlotType;
  }
  if (!$isNull(request.harmonyNotifyId)) {
    query['HarmonyNotifyId'] = request.harmonyNotifyId;
  }
  if (!$isNull(request.harmonyReceiptId)) {
    query['HarmonyReceiptId'] = request.harmonyReceiptId;
  }
  if (!$isNull(request.harmonyRemind)) {
    query['HarmonyRemind'] = request.harmonyRemind;
  }
  if (!$isNull(request.harmonyRemindBody)) {
    query['HarmonyRemindBody'] = request.harmonyRemindBody;
  }
  if (!$isNull(request.harmonyRemindTitle)) {
    query['HarmonyRemindTitle'] = request.harmonyRemindTitle;
  }
  if (!$isNull(request.harmonyRenderStyle)) {
    query['HarmonyRenderStyle'] = request.harmonyRenderStyle;
  }
  if (!$isNull(request.harmonyTestMessage)) {
    query['HarmonyTestMessage'] = request.harmonyTestMessage;
  }
  if (!$isNull(request.harmonyUri)) {
    query['HarmonyUri'] = request.harmonyUri;
  }
  if (!$isNull(request.idempotentToken)) {
    query['IdempotentToken'] = request.idempotentToken;
  }
  if (!$isNull(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!$isNull(request.pushTime)) {
    query['PushTime'] = request.pushTime;
  }
  if (!$isNull(request.pushType)) {
    query['PushType'] = request.pushType;
  }
  if (!$isNull(request.sendChannels)) {
    query['SendChannels'] = request.sendChannels;
  }
  if (!$isNull(request.sendSpeed)) {
    query['SendSpeed'] = request.sendSpeed;
  }
  if (!$isNull(request.smsDelaySecs)) {
    query['SmsDelaySecs'] = request.smsDelaySecs;
  }
  if (!$isNull(request.smsParams)) {
    query['SmsParams'] = request.smsParams;
  }
  if (!$isNull(request.smsSendPolicy)) {
    query['SmsSendPolicy'] = request.smsSendPolicy;
  }
  if (!$isNull(request.smsSignName)) {
    query['SmsSignName'] = request.smsSignName;
  }
  if (!$isNull(request.smsTemplateName)) {
    query['SmsTemplateName'] = request.smsTemplateName;
  }
  if (!$isNull(request.storeOffline)) {
    query['StoreOffline'] = request.storeOffline;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.trim)) {
    query['Trim'] = request.trim;
  }
  if (!$isNull(request.androidOppoPrivateContentParametersShrink)) {
    query['androidOppoPrivateContentParameters'] = request.androidOppoPrivateContentParametersShrink;
  }
  if (!$isNull(request.androidOppoPrivateMsgTemplateId)) {
    query['androidOppoPrivateMsgTemplateId'] = request.androidOppoPrivateMsgTemplateId;
  }
  if (!$isNull(request.androidOppoPrivateTitleParametersShrink)) {
    query['androidOppoPrivateTitleParameters'] = request.androidOppoPrivateTitleParametersShrink;
  }
  if (!$isNull(request.iOSApnsEnv)) {
    query['iOSApnsEnv'] = request.iOSApnsEnv;
  }
  if (!$isNull(request.iOSBadge)) {
    query['iOSBadge'] = request.iOSBadge;
  }
  if (!$isNull(request.iOSBadgeAutoIncrement)) {
    query['iOSBadgeAutoIncrement'] = request.iOSBadgeAutoIncrement;
  }
  if (!$isNull(request.iOSExtParameters)) {
    query['iOSExtParameters'] = request.iOSExtParameters;
  }
  if (!$isNull(request.iOSInterruptionLevel)) {
    query['iOSInterruptionLevel'] = request.iOSInterruptionLevel;
  }
  if (!$isNull(request.iOSLiveActivityAttributes)) {
    query['iOSLiveActivityAttributes'] = request.iOSLiveActivityAttributes;
  }
  if (!$isNull(request.iOSLiveActivityAttributesType)) {
    query['iOSLiveActivityAttributesType'] = request.iOSLiveActivityAttributesType;
  }
  if (!$isNull(request.iOSLiveActivityContentState)) {
    query['iOSLiveActivityContentState'] = request.iOSLiveActivityContentState;
  }
  if (!$isNull(request.iOSLiveActivityDismissalDate)) {
    query['iOSLiveActivityDismissalDate'] = request.iOSLiveActivityDismissalDate;
  }
  if (!$isNull(request.iOSLiveActivityEvent)) {
    query['iOSLiveActivityEvent'] = request.iOSLiveActivityEvent;
  }
  if (!$isNull(request.iOSLiveActivityId)) {
    query['iOSLiveActivityId'] = request.iOSLiveActivityId;
  }
  if (!$isNull(request.iOSLiveActivityStaleDate)) {
    query['iOSLiveActivityStaleDate'] = request.iOSLiveActivityStaleDate;
  }
  if (!$isNull(request.iOSMusic)) {
    query['iOSMusic'] = request.iOSMusic;
  }
  if (!$isNull(request.iOSMutableContent)) {
    query['iOSMutableContent'] = request.iOSMutableContent;
  }
  if (!$isNull(request.iOSNotificationCategory)) {
    query['iOSNotificationCategory'] = request.iOSNotificationCategory;
  }
  if (!$isNull(request.iOSNotificationCollapseId)) {
    query['iOSNotificationCollapseId'] = request.iOSNotificationCollapseId;
  }
  if (!$isNull(request.iOSNotificationThreadId)) {
    query['iOSNotificationThreadId'] = request.iOSNotificationThreadId;
  }
  if (!$isNull(request.iOSRelevanceScore)) {
    query['iOSRelevanceScore'] = request.iOSRelevanceScore;
  }
  if (!$isNull(request.iOSRemind)) {
    query['iOSRemind'] = request.iOSRemind;
  }
  if (!$isNull(request.iOSRemindBody)) {
    query['iOSRemindBody'] = request.iOSRemindBody;
  }
  if (!$isNull(request.iOSSilentNotification)) {
    query['iOSSilentNotification'] = request.iOSSilentNotification;
  }
  if (!$isNull(request.iOSSubtitle)) {
    query['iOSSubtitle'] = request.iOSSubtitle;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'Push',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 高级推送接口
 *
 * @param request PushRequest
 * @return PushResponse
 */
async function push(request: PushRequest): PushResponse {
  var runtime = new $RuntimeOptions{};
  return pushWithOptions(request, runtime);
}

model PushMessageToAndroidRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  body?: string(name='Body', description='This parameter is required.', example='my body'),
  jobKey?: string(name='JobKey', example='123'),
  storeOffline?: boolean(name='StoreOffline'),
  target?: string(name='Target', description='This parameter is required.', example='ALL'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='all'),
  title?: string(name='Title', description='This parameter is required.', example='my title'),
}

model PushMessageToAndroidResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushMessageToAndroidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMessageToAndroidResponseBody(name='body'),
}

/**
 * @summary 推送消息给Android设备
 *
 * @param request PushMessageToAndroidRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushMessageToAndroidResponse
 */
@context("pushMessageToAndroidWithContext")
async function pushMessageToAndroidWithOptions(request: PushMessageToAndroidRequest, runtime: $RuntimeOptions): PushMessageToAndroidResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.body)) {
    query['Body'] = request.body;
  }
  if (!$isNull(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!$isNull(request.storeOffline)) {
    query['StoreOffline'] = request.storeOffline;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushMessageToAndroid',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送消息给Android设备
 *
 * @param request PushMessageToAndroidRequest
 * @return PushMessageToAndroidResponse
 */
async function pushMessageToAndroid(request: PushMessageToAndroidRequest): PushMessageToAndroidResponse {
  var runtime = new $RuntimeOptions{};
  return pushMessageToAndroidWithOptions(request, runtime);
}

model PushMessageToiOSRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='24780725'),
  body?: string(name='Body', description='This parameter is required.', example='my body'),
  jobKey?: string(name='JobKey', example='123'),
  storeOffline?: boolean(name='StoreOffline'),
  target?: string(name='Target', description='This parameter is required.', example='ALL'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='all'),
  title?: string(name='Title', description='This parameter is required.', example='my title'),
}

model PushMessageToiOSResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushMessageToiOSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMessageToiOSResponseBody(name='body'),
}

/**
 * @summary 推送消息给iOS设备
 *
 * @param request PushMessageToiOSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushMessageToiOSResponse
 */
@context("pushMessageToiOSWithContext")
async function pushMessageToiOSWithOptions(request: PushMessageToiOSRequest, runtime: $RuntimeOptions): PushMessageToiOSResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.body)) {
    query['Body'] = request.body;
  }
  if (!$isNull(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!$isNull(request.storeOffline)) {
    query['StoreOffline'] = request.storeOffline;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushMessageToiOS',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送消息给iOS设备
 *
 * @param request PushMessageToiOSRequest
 * @return PushMessageToiOSResponse
 */
async function pushMessageToiOS(request: PushMessageToiOSRequest): PushMessageToiOSResponse {
  var runtime = new $RuntimeOptions{};
  return pushMessageToiOSWithOptions(request, runtime);
}

model PushNoticeToAndroidRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  body?: string(name='Body', description='This parameter is required.', example='body'),
  extParameters?: string(name='ExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}'),
  jobKey?: string(name='JobKey', example='123'),
  storeOffline?: boolean(name='StoreOffline'),
  target?: string(name='Target', description='This parameter is required.', example='ALL'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='ALL'),
  title?: string(name='Title', description='This parameter is required.', example='title'),
}

model PushNoticeToAndroidResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushNoticeToAndroidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushNoticeToAndroidResponseBody(name='body'),
}

/**
 * @summary 推送通知给Android设备
 *
 * @param request PushNoticeToAndroidRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushNoticeToAndroidResponse
 */
@context("pushNoticeToAndroidWithContext")
async function pushNoticeToAndroidWithOptions(request: PushNoticeToAndroidRequest, runtime: $RuntimeOptions): PushNoticeToAndroidResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.body)) {
    query['Body'] = request.body;
  }
  if (!$isNull(request.extParameters)) {
    query['ExtParameters'] = request.extParameters;
  }
  if (!$isNull(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!$isNull(request.storeOffline)) {
    query['StoreOffline'] = request.storeOffline;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushNoticeToAndroid',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送通知给Android设备
 *
 * @param request PushNoticeToAndroidRequest
 * @return PushNoticeToAndroidResponse
 */
async function pushNoticeToAndroid(request: PushNoticeToAndroidRequest): PushNoticeToAndroidResponse {
  var runtime = new $RuntimeOptions{};
  return pushNoticeToAndroidWithOptions(request, runtime);
}

model PushNoticeToiOSRequest {
  apnsEnv?: string(name='ApnsEnv', description='This parameter is required.', example='DEV'),
  appKey?: long(name='AppKey', description='This parameter is required.', example='24780725'),
  body?: string(name='Body', description='This parameter is required.', example='Hello World'),
  extParameters?: string(name='ExtParameters', example='{"k1":"ios","k2":"v2"}'),
  jobKey?: string(name='JobKey', example='123'),
  target?: string(name='Target', description='This parameter is required.', example='ALL'),
  targetValue?: string(name='TargetValue', description='This parameter is required.', example='ALL'),
  title?: string(name='Title', example='title'),
}

model PushNoticeToiOSResponseBody = {
  messageId?: string(name='MessageId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
  requestId?: string(name='RequestId', example='501029'),
}

model PushNoticeToiOSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushNoticeToiOSResponseBody(name='body'),
}

/**
 * @summary 推送通知给iOS设备
 *
 * @param request PushNoticeToiOSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushNoticeToiOSResponse
 */
@context("pushNoticeToiOSWithContext")
async function pushNoticeToiOSWithOptions(request: PushNoticeToiOSRequest, runtime: $RuntimeOptions): PushNoticeToiOSResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apnsEnv)) {
    query['ApnsEnv'] = request.apnsEnv;
  }
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.body)) {
    query['Body'] = request.body;
  }
  if (!$isNull(request.extParameters)) {
    query['ExtParameters'] = request.extParameters;
  }
  if (!$isNull(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushNoticeToiOS',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送通知给iOS设备
 *
 * @param request PushNoticeToiOSRequest
 * @return PushNoticeToiOSResponse
 */
async function pushNoticeToiOS(request: PushNoticeToiOSRequest): PushNoticeToiOSResponse {
  var runtime = new $RuntimeOptions{};
  return pushNoticeToiOSWithOptions(request, runtime);
}

model QueryAliasesRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='e2ba19de97604f55b165576****'),
}

model QueryAliasesResponseBody = {
  aliasInfos?: {
    aliasInfo?: [ 
    {
      aliasName?: string(name='AliasName', example='test_alias1'),
    }
  ](name='AliasInfo')
  }(name='AliasInfos'),
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model QueryAliasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAliasesResponseBody(name='body'),
}

/**
 * @summary 查询别名
 *
 * @param request QueryAliasesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAliasesResponse
 */
@context("queryAliasesWithContext")
async function queryAliasesWithOptions(request: QueryAliasesRequest, runtime: $RuntimeOptions): QueryAliasesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAliases',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询别名
 *
 * @param request QueryAliasesRequest
 * @return QueryAliasesResponse
 */
async function queryAliases(request: QueryAliasesRequest): QueryAliasesResponse {
  var runtime = new $RuntimeOptions{};
  return queryAliasesWithOptions(request, runtime);
}

model QueryDeviceInfoRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23419851'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='a64ae296f3b04a58a05b30c9****'),
}

model QueryDeviceInfoResponseBody = {
  deviceInfo?: {
    account?: string(name='Account', example='test@aliyun.com'),
    alias?: string(name='Alias', example='test_alias,test_alias2'),
    brand?: string(name='Brand'),
    deviceId?: string(name='DeviceId', example='a64ae296f3b04a58a05b30c95****'),
    deviceToken?: string(name='DeviceToken', example='5ecc7b4012aaa801b63******5543ccbda6b4930d09629e936e1ac4b762a7df'),
    deviceType?: string(name='DeviceType', example='iOS'),
    lastOnlineTime?: string(name='LastOnlineTime', example='2018-03-27T02:19:40Z'),
    model?: string(name='Model'),
    online?: boolean(name='Online', example='false'),
    phoneNumber?: string(name='PhoneNumber', example='133********'),
    pushEnabled?: boolean(name='PushEnabled', example='true'),
    tags?: string(name='Tags', example='test_tag,test_tag2'),
  }(name='DeviceInfo'),
  requestId?: string(name='RequestId', example='6EEF262B-EA7D-41DC-89B9-20F3D1E28194'),
}

model QueryDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceInfoResponseBody(name='body'),
}

/**
 * @summary 查询设备详情
 *
 * @param request QueryDeviceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDeviceInfoResponse
 */
@context("queryDeviceInfoWithContext")
async function queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: $RuntimeOptions): QueryDeviceInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDeviceInfo',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询设备详情
 *
 * @param request QueryDeviceInfoRequest
 * @return QueryDeviceInfoResponse
 */
async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  var runtime = new $RuntimeOptions{};
  return queryDeviceInfoWithOptions(request, runtime);
}

model QueryDeviceStatRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  deviceType?: string(name='DeviceType', example='iOS'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='2016-07-29T00:00:00Z'),
  queryType?: string(name='QueryType', description='This parameter is required.', example='TOTAL'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2016-07-28T00:00:00Z'),
}

model QueryDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count', example='100'),
      deviceType?: string(name='DeviceType', example='iOS'),
      time?: string(name='Time', example='2016-07-28T16:00:00Z'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model QueryDeviceStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceStatResponseBody(name='body'),
}

/**
 * @summary 设备新增与留存
 *
 * @param request QueryDeviceStatRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDeviceStatResponse
 */
@context("queryDeviceStatWithContext")
async function queryDeviceStatWithOptions(request: QueryDeviceStatRequest, runtime: $RuntimeOptions): QueryDeviceStatResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceType)) {
    query['DeviceType'] = request.deviceType;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDeviceStat',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设备新增与留存
 *
 * @param request QueryDeviceStatRequest
 * @return QueryDeviceStatResponse
 */
async function queryDeviceStat(request: QueryDeviceStatRequest): QueryDeviceStatResponse {
  var runtime = new $RuntimeOptions{};
  return queryDeviceStatWithOptions(request, runtime);
}

model QueryDevicesByAccountRequest {
  account?: string(name='Account', description='This parameter is required.', example='accountName'),
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
}

model QueryDevicesByAccountResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId', example='A8A24108-2AD0-4F6E-81C7-A8A24C2C2AD0'),
}

model QueryDevicesByAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDevicesByAccountResponseBody(name='body'),
}

/**
 * @summary 通过账户查询设备列表
 *
 * @param request QueryDevicesByAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDevicesByAccountResponse
 */
@context("queryDevicesByAccountWithContext")
async function queryDevicesByAccountWithOptions(request: QueryDevicesByAccountRequest, runtime: $RuntimeOptions): QueryDevicesByAccountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.account)) {
    query['Account'] = request.account;
  }
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDevicesByAccount',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过账户查询设备列表
 *
 * @param request QueryDevicesByAccountRequest
 * @return QueryDevicesByAccountResponse
 */
async function queryDevicesByAccount(request: QueryDevicesByAccountRequest): QueryDevicesByAccountResponse {
  var runtime = new $RuntimeOptions{};
  return queryDevicesByAccountWithOptions(request, runtime);
}

model QueryDevicesByAliasRequest {
  alias?: string(name='Alias', description='This parameter is required.', example='aliasName'),
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
}

model QueryDevicesByAliasResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId', example='6A9FD644-35A5-40E4-89B0-2021CAEDC1B4'),
}

model QueryDevicesByAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDevicesByAliasResponseBody(name='body'),
}

/**
 * @summary 通过别名查询设备列表
 *
 * @param request QueryDevicesByAliasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDevicesByAliasResponse
 */
@context("queryDevicesByAliasWithContext")
async function queryDevicesByAliasWithOptions(request: QueryDevicesByAliasRequest, runtime: $RuntimeOptions): QueryDevicesByAliasResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDevicesByAlias',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过别名查询设备列表
 *
 * @param request QueryDevicesByAliasRequest
 * @return QueryDevicesByAliasResponse
 */
async function queryDevicesByAlias(request: QueryDevicesByAliasRequest): QueryDevicesByAliasResponse {
  var runtime = new $RuntimeOptions{};
  return queryDevicesByAliasWithOptions(request, runtime);
}

model QueryPushRecordsRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='333526247'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='2021-09-29T06:24:58Z'),
  keyword?: string(name='Keyword'),
  nextToken?: string(name='NextToken', example='FFPpkmhCPm*****************xjk='),
  page?: int32(name='Page', example='8'),
  pageSize?: int32(name='PageSize', example='10'),
  pushType?: string(name='PushType', example='NOTICE'),
  source?: string(name='Source', example='API'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2021-09-15T02:05:24Z'),
  target?: string(name='Target', example='DEVICE'),
}

model QueryPushRecordsResponseBody = {
  nextToken?: string(name='NextToken', example='i91D***********kXIh/dVBEQ=='),
  page?: int32(name='Page', example='11'),
  pageSize?: int32(name='PageSize', example='20'),
  pushInfos?: {
    pushInfo?: [ 
    {
      appKey?: long(name='AppKey', example='333526247'),
      body?: string(name='Body', example='abcd'),
      deviceType?: string(name='DeviceType', example='ANDROID'),
      messageId?: string(name='MessageId', example='510431'),
      pushTime?: string(name='PushTime', example='2021-09-15T02:05:24Z'),
      pushType?: string(name='PushType', example='NOTICE'),
      source?: string(name='Source', example='DEVICE'),
      status?: string(name='Status', example='SENT'),
      target?: string(name='Target', example='DEVICE'),
      title?: string(name='Title', example='sssss'),
    }
  ](name='PushInfo')
  }(name='PushInfos'),
  requestId?: string(name='RequestId', example='9B24B396-249D-55E4-8CA1-66C9B50BB734'),
  total?: int32(name='Total', example='193'),
}

model QueryPushRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPushRecordsResponseBody(name='body'),
}

/**
 * @param request QueryPushRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPushRecordsResponse
 */
@context("queryPushRecordsWithContext")
async function queryPushRecordsWithOptions(request: QueryPushRecordsRequest, runtime: $RuntimeOptions): QueryPushRecordsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.page)) {
    query['Page'] = request.page;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.pushType)) {
    query['PushType'] = request.pushType;
  }
  if (!$isNull(request.source)) {
    query['Source'] = request.source;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPushRecords',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryPushRecordsRequest
 * @return QueryPushRecordsResponse
 */
async function queryPushRecords(request: QueryPushRecordsRequest): QueryPushRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return queryPushRecordsWithOptions(request, runtime);
}

model QueryPushStatByAppRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='2016-07-29T00:00:00Z'),
  granularity?: string(name='Granularity', description='This parameter is required.', example='DAY'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2016-07-25T00:00:00Z'),
}

model QueryPushStatByAppResponseBody = {
  appPushStats?: {
    appPushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount', example='120'),
      deletedCount?: long(name='DeletedCount', example='10'),
      openedCount?: long(name='OpenedCount', example='30'),
      receivedCount?: long(name='ReceivedCount', example='60'),
      sentCount?: long(name='SentCount', example='100'),
      smsFailedCount?: long(name='SmsFailedCount', example='0'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount', example='0'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount', example='0'),
      smsSentCount?: long(name='SmsSentCount', example='0'),
      smsSkipCount?: long(name='SmsSkipCount', example='0'),
      time?: string(name='Time', example='2016-07-25T00:00:00Z'),
    }
  ](name='AppPushStat')
  }(name='AppPushStats'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model QueryPushStatByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPushStatByAppResponseBody(name='body'),
}

/**
 * @summary App维度推送统计
 *
 * @param request QueryPushStatByAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPushStatByAppResponse
 */
@context("queryPushStatByAppWithContext")
async function queryPushStatByAppWithOptions(request: QueryPushStatByAppRequest, runtime: $RuntimeOptions): QueryPushStatByAppResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPushStatByApp',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary App维度推送统计
 *
 * @param request QueryPushStatByAppRequest
 * @return QueryPushStatByAppResponse
 */
async function queryPushStatByApp(request: QueryPushStatByAppRequest): QueryPushStatByAppResponse {
  var runtime = new $RuntimeOptions{};
  return queryPushStatByAppWithOptions(request, runtime);
}

model QueryPushStatByMsgRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  messageId?: long(name='MessageId', description='This parameter is required.', example='510427'),
}

model QueryPushStatByMsgResponseBody = {
  pushStats?: {
    pushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount', example='120'),
      deletedCount?: long(name='DeletedCount', example='10'),
      messageId?: string(name='MessageId', example='510427'),
      openedCount?: long(name='OpenedCount', example='30'),
      receivedCount?: long(name='ReceivedCount', example='60'),
      sentCount?: long(name='SentCount', example='100'),
      smsFailedCount?: long(name='SmsFailedCount', example='0'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount', example='0'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount', example='0'),
      smsSentCount?: long(name='SmsSentCount', example='0'),
      smsSkipCount?: long(name='SmsSkipCount', example='0'),
    }
  ](name='PushStat')
  }(name='PushStats'),
  requestId?: string(name='RequestId', example='CF195C34-98FB-491A-98D7-19CBC1FA880B'),
}

model QueryPushStatByMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPushStatByMsgResponseBody(name='body'),
}

/**
 * @summary 任务维度推送统计
 *
 * @param request QueryPushStatByMsgRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPushStatByMsgResponse
 */
@context("queryPushStatByMsgWithContext")
async function queryPushStatByMsgWithOptions(request: QueryPushStatByMsgRequest, runtime: $RuntimeOptions): QueryPushStatByMsgResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPushStatByMsg',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 任务维度推送统计
 *
 * @param request QueryPushStatByMsgRequest
 * @return QueryPushStatByMsgResponse
 */
async function queryPushStatByMsg(request: QueryPushStatByMsgRequest): QueryPushStatByMsgResponse {
  var runtime = new $RuntimeOptions{};
  return queryPushStatByMsgWithOptions(request, runtime);
}

model QueryTagsRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  clientKey?: string(name='ClientKey', description='This parameter is required.', example='e2ba19de97604f55b165576****'),
  keyType?: string(name='KeyType', description='This parameter is required.', example='DEVICE'),
}

model QueryTagsResponseBody = {
  requestId?: string(name='RequestId', example='D68AE5C6-8AAF-46C9-B627-3FDACD1A4168'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName', example='test_tag2'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model QueryTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagsResponseBody(name='body'),
}

/**
 * @summary 查询标签列表
 *
 * @param request QueryTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTagsResponse
 */
@context("queryTagsWithContext")
async function queryTagsWithOptions(request: QueryTagsRequest, runtime: $RuntimeOptions): QueryTagsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.clientKey)) {
    query['ClientKey'] = request.clientKey;
  }
  if (!$isNull(request.keyType)) {
    query['KeyType'] = request.keyType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTags',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询标签列表
 *
 * @param request QueryTagsRequest
 * @return QueryTagsResponse
 */
async function queryTags(request: QueryTagsRequest): QueryTagsResponse {
  var runtime = new $RuntimeOptions{};
  return queryTagsWithOptions(request, runtime);
}

model QueryUniqueDeviceStatRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='2016-07-26T00:00:00Z'),
  granularity?: string(name='Granularity', description='This parameter is required.', example='DAY'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2016-07-25T00:00:00Z'),
}

model QueryUniqueDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count', example='100'),
      time?: string(name='Time', example='2016-07-25T00:00:00Z'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model QueryUniqueDeviceStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUniqueDeviceStatResponseBody(name='body'),
}

/**
 * @summary 去重设备统计
 *
 * @param request QueryUniqueDeviceStatRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryUniqueDeviceStatResponse
 */
@context("queryUniqueDeviceStatWithContext")
async function queryUniqueDeviceStatWithOptions(request: QueryUniqueDeviceStatRequest, runtime: $RuntimeOptions): QueryUniqueDeviceStatResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryUniqueDeviceStat',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 去重设备统计
 *
 * @param request QueryUniqueDeviceStatRequest
 * @return QueryUniqueDeviceStatResponse
 */
async function queryUniqueDeviceStat(request: QueryUniqueDeviceStatRequest): QueryUniqueDeviceStatResponse {
  var runtime = new $RuntimeOptions{};
  return queryUniqueDeviceStatWithOptions(request, runtime);
}

model RemoveTagRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  tagName?: string(name='TagName', description='This parameter is required.', example='test_tag'),
}

model RemoveTagResponseBody = {
  requestId?: string(name='RequestId', example='23000F3C-0EFE-4C89-82EE-E04F42D37B3C'),
}

model RemoveTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTagResponseBody(name='body'),
}

/**
 * @summary 删除标签
 *
 * @param request RemoveTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveTagResponse
 */
@context("removeTagWithContext")
async function removeTagWithOptions(request: RemoveTagRequest, runtime: $RuntimeOptions): RemoveTagResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RemoveTag',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除标签
 *
 * @param request RemoveTagRequest
 * @return RemoveTagResponse
 */
async function removeTag(request: RemoveTagRequest): RemoveTagResponse {
  var runtime = new $RuntimeOptions{};
  return removeTagWithOptions(request, runtime);
}

model UnbindAliasRequest {
  aliasName?: string(name='AliasName', example='test_alias'),
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='e2ba19de97604f55b16557673****'),
  unbindAll?: boolean(name='UnbindAll', example='true'),
}

model UnbindAliasResponseBody = {
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model UnbindAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindAliasResponseBody(name='body'),
}

/**
 * @summary 解绑别名
 *
 * @param request UnbindAliasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnbindAliasResponse
 */
@context("unbindAliasWithContext")
async function unbindAliasWithOptions(request: UnbindAliasRequest, runtime: $RuntimeOptions): UnbindAliasResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.unbindAll)) {
    query['UnbindAll'] = request.unbindAll;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UnbindAlias',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 解绑别名
 *
 * @param request UnbindAliasRequest
 * @return UnbindAliasResponse
 */
async function unbindAlias(request: UnbindAliasRequest): UnbindAliasResponse {
  var runtime = new $RuntimeOptions{};
  return unbindAliasWithOptions(request, runtime);
}

model UnbindPhoneRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='eb5f741d83d04d34807d229999eefa52'),
}

model UnbindPhoneResponseBody = {
  requestId?: string(name='RequestId', example='0D1126F0-F8FF-513D-BAFA-F140447BDED4'),
}

model UnbindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindPhoneResponseBody(name='body'),
}

/**
 * @summary 解绑手机号码
 *
 * @param request UnbindPhoneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnbindPhoneResponse
 */
@context("unbindPhoneWithContext")
async function unbindPhoneWithOptions(request: UnbindPhoneRequest, runtime: $RuntimeOptions): UnbindPhoneResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UnbindPhone',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 解绑手机号码
 *
 * @param request UnbindPhoneRequest
 * @return UnbindPhoneResponse
 */
async function unbindPhone(request: UnbindPhoneRequest): UnbindPhoneResponse {
  var runtime = new $RuntimeOptions{};
  return unbindPhoneWithOptions(request, runtime);
}

model UnbindTagRequest {
  appKey?: long(name='AppKey', description='This parameter is required.', example='23267207'),
  clientKey?: string(name='ClientKey', description='This parameter is required.', example='e2ba19de97604f55b16557673****'),
  keyType?: string(name='KeyType', description='This parameter is required.', example='DEVICE'),
  tagName?: string(name='TagName', description='This parameter is required.', example='test_tag1,test_tag2'),
}

model UnbindTagResponseBody = {
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model UnbindTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindTagResponseBody(name='body'),
}

/**
 * @summary 绑定标签
 *
 * @param request UnbindTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnbindTagResponse
 */
@context("unbindTagWithContext")
async function unbindTagWithOptions(request: UnbindTagRequest, runtime: $RuntimeOptions): UnbindTagResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!$isNull(request.clientKey)) {
    query['ClientKey'] = request.clientKey;
  }
  if (!$isNull(request.keyType)) {
    query['KeyType'] = request.keyType;
  }
  if (!$isNull(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UnbindTag',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 绑定标签
 *
 * @param request UnbindTagRequest
 * @return UnbindTagResponse
 */
async function unbindTag(request: UnbindTagRequest): UnbindTagResponse {
  var runtime = new $RuntimeOptions{};
  return unbindTagWithOptions(request, runtime);
}

