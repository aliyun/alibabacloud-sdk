/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Push';
  @version = '2016-08-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'cloudpush.aliyuncs.com',
    'ap-northeast-2-pop' = 'cloudpush.aliyuncs.com',
    'ap-south-1' = 'cloudpush.aliyuncs.com',
    'ap-southeast-1' = 'cloudpush.aliyuncs.com',
    'ap-southeast-2' = 'cloudpush.aliyuncs.com',
    'ap-southeast-3' = 'cloudpush.aliyuncs.com',
    'ap-southeast-5' = 'cloudpush.aliyuncs.com',
    'cn-beijing' = 'cloudpush.aliyuncs.com',
    'cn-beijing-finance-1' = 'cloudpush.aliyuncs.com',
    'cn-beijing-finance-pop' = 'cloudpush.aliyuncs.com',
    'cn-beijing-gov-1' = 'cloudpush.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'cloudpush.aliyuncs.com',
    'cn-chengdu' = 'cloudpush.aliyuncs.com',
    'cn-edge-1' = 'cloudpush.aliyuncs.com',
    'cn-fujian' = 'cloudpush.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-finance' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'cloudpush.aliyuncs.com',
    'cn-hangzhou-test-306' = 'cloudpush.aliyuncs.com',
    'cn-hongkong' = 'cloudpush.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'cloudpush.aliyuncs.com',
    'cn-huhehaote' = 'cloudpush.aliyuncs.com',
    'cn-north-2-gov-1' = 'cloudpush.aliyuncs.com',
    'cn-qingdao' = 'cloudpush.aliyuncs.com',
    'cn-qingdao-nebula' = 'cloudpush.aliyuncs.com',
    'cn-shanghai' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-finance-1' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-inner' = 'cloudpush.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-inner' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'cloudpush.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'cloudpush.aliyuncs.com',
    'cn-wuhan' = 'cloudpush.aliyuncs.com',
    'cn-yushanfang' = 'cloudpush.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'cloudpush.aliyuncs.com',
    'cn-zhangjiakou' = 'cloudpush.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'cloudpush.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'cloudpush.aliyuncs.com',
    'eu-central-1' = 'cloudpush.aliyuncs.com',
    'eu-west-1' = 'cloudpush.aliyuncs.com',
    'eu-west-1-oxs' = 'cloudpush.aliyuncs.com',
    'me-east-1' = 'cloudpush.aliyuncs.com',
    'rus-west-1-pop' = 'cloudpush.aliyuncs.com',
    'us-east-1' = 'cloudpush.aliyuncs.com',
    'us-west-1' = 'cloudpush.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model PushTask {
  action?: string(name='Action'),
  message?: {
    body?: string(name='Body'),
    title?: string(name='Title'),
  }(name='Message'),
  notification?: {
    android?: {
      badgeActivity?: string(name='BadgeActivity'),
      badgeAddNum?: int32(name='BadgeAddNum'),
      badgeSetNum?: int32(name='BadgeSetNum'),
      channelId?: string(name='ChannelId'),
      extParameters?: string(name='ExtParameters'),
      groupId?: string(name='GroupId'),
      imageUrl?: string(name='ImageUrl'),
      inboxContent?: [ string ](name='InboxContent'),
      music?: string(name='Music'),
      notifyId?: int32(name='NotifyId'),
      options?: {
        accs?: {
          customStyle?: int32(name='CustomStyle'),
          notifyType?: string(name='NotifyType'),
          openActivity?: string(name='OpenActivity'),
          openType?: string(name='OpenType'),
          openUrl?: string(name='OpenUrl'),
          priority?: int32(name='Priority'),
          threadId?: string(name='ThreadId'),
        }(name='Accs'),
        honor?: {
          importance?: int32(name='Importance'),
        }(name='Honor'),
        huawei?: {
          category?: string(name='Category'),
          importance?: int32(name='Importance'),
          liveNotificationPayload?: string(name='LiveNotificationPayload'),
          receiptId?: string(name='ReceiptId'),
          urgency?: string(name='Urgency'),
        }(name='Huawei'),
        meizu?: {
          noticeMsgType?: int32(name='NoticeMsgType'),
        }(name='Meizu'),
        oppo?: {
          category?: string(name='Category'),
          notifyLevel?: long(name='NotifyLevel'),
          privateContentParameters?: string(name='PrivateContentParameters'),
          privateMsgTemplateId?: string(name='PrivateMsgTemplateId'),
          privateTitleParameters?: string(name='PrivateTitleParameters'),
        }(name='Oppo'),
        vivo?: {
          category?: string(name='Category'),
          importance?: int32(name='Importance'),
          receiptId?: string(name='ReceiptId'),
        }(name='Vivo'),
        xiaomi?: {
          channel?: string(name='Channel'),
        }(name='Xiaomi'),
      }(name='Options'),
      pictureUrl?: string(name='PictureUrl'),
      renderStyle?: string(name='RenderStyle'),
      testMessage?: boolean(name='TestMessage'),
      vendorChannelActivity?: string(name='VendorChannelActivity'),
    }(name='Android'),
    body?: string(name='Body'),
    hmos?: {
      action?: string(name='Action'),
      badgeAddNum?: int32(name='BadgeAddNum'),
      badgeSetNum?: int32(name='BadgeSetNum'),
      category?: string(name='Category'),
      extParameters?: string(name='ExtParameters'),
      extensionExtraData?: string(name='ExtensionExtraData'),
      extensionPush?: boolean(name='ExtensionPush'),
      imageUrl?: string(name='ImageUrl'),
      inboxContent?: [ string ](name='InboxContent'),
      liveViewPayload?: string(name='LiveViewPayload'),
      notifyId?: int32(name='NotifyId'),
      receiptId?: string(name='ReceiptId'),
      renderStyle?: string(name='RenderStyle'),
      slotType?: string(name='SlotType'),
      testMessage?: boolean(name='TestMessage'),
      uri?: string(name='Uri'),
    }(name='Hmos'),
    ios?: {
      apnsEnv?: string(name='ApnsEnv'),
      badge?: int32(name='Badge'),
      badgeAutoIncrement?: boolean(name='BadgeAutoIncrement'),
      category?: string(name='Category'),
      collapseId?: string(name='CollapseId'),
      extParameters?: string(name='ExtParameters'),
      interruptionLevel?: string(name='InterruptionLevel'),
      liveActivity?: {
        attributes?: string(name='Attributes'),
        attributesType?: string(name='AttributesType'),
        contentState?: string(name='ContentState'),
        dismissalDate?: long(name='DismissalDate'),
        event?: string(name='Event'),
        id?: string(name='Id'),
        staleDate?: long(name='StaleDate'),
      }(name='LiveActivity'),
      music?: string(name='Music'),
      mutable?: boolean(name='Mutable'),
      relevanceScore?: double(name='RelevanceScore'),
      silent?: boolean(name='Silent'),
      subtitle?: string(name='Subtitle'),
      threadId?: string(name='ThreadId'),
    }(name='Ios'),
    title?: string(name='Title'),
  }(name='Notification'),
  options?: {
    expireTime?: string(name='ExpireTime'),
    jobKey?: string(name='JobKey'),
    messageId?: long(name='MessageId'),
    pushTime?: string(name='PushTime'),
    sms?: {
      delaySecs?: long(name='DelaySecs'),
      params?: string(name='Params'),
      sendPolicy?: string(name='SendPolicy'),
      signName?: string(name='SignName'),
      templateName?: string(name='TemplateName'),
    }(name='Sms'),
    trim?: boolean(name='Trim'),
    useChannels?: string(name='UseChannels'),
  }(name='Options'),
  target?: {
    platform?: string(name='Platform'),
    type?: string(name='Type'),
    value?: string(name='Value'),
  }(name='Target'),
}

model BindAliasRequest {
  aliasName: string(name='AliasName', description='This parameter is required.', example='test_alias', position='Query'),
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='e2ba19de97604f55b16557673****', position='Query'),
}

model BindAliasResponseBody = {
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model BindAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindAlias  BindAliasRequest
  * @return BindAliasResponse
 */
async function bindAlias(request: BindAliasRequest): BindAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAlias', 'POST', '/', 'json', false, 'json', request);
}

model BindPhoneRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='27725900', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='eb5f741d83d04d34807d229999eefa52', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='1381111****', position='Query'),
}

model BindPhoneResponseBody = {
  requestId?: string(name='RequestId', example='0D1126F0-F8FF-513D-BAFA-F140447BDED4'),
}

model BindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindPhoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindPhone  BindPhoneRequest
  * @return BindPhoneResponse
 */
async function bindPhone(request: BindPhoneRequest): BindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPhone', 'POST', '/', 'json', false, 'json', request);
}

model BindTagRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  clientKey: string(name='ClientKey', description='This parameter is required.', example='e2ba19de97604f55b16557673****', position='Query'),
  keyType: string(name='KeyType', description='This parameter is required.', example='DEVICE', position='Query'),
  tagName: string(name='TagName', description='This parameter is required.', example='test_tag,test_tag2', position='Query'),
}

model BindTagResponseBody = {
  requestId?: string(name='RequestId', example='82FD0A09-5BB8-40FB-8221-9A11FE92D620'),
}

model BindTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindTag  BindTagRequest
  * @return BindTagResponse
 */
async function bindTag(request: BindTagRequest): BindTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindTag', 'POST', '/', 'json', false, 'json', request);
}

model CancelPushRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  messageId: long(name='MessageId', description='This parameter is required.', example='501029', position='Query'),
}

model CancelPushResponseBody = {
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CancelPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelPush  CancelPushRequest
  * @return CancelPushResponse
 */
async function cancelPush(request: CancelPushRequest): CancelPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPush', 'POST', '/', 'json', false, 'json', request);
}

model CheckCertificateRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', minimum=0, maximum=1000000000, position='Query'),
}

model CheckCertificateResponseBody = {
  android?: boolean(name='Android', example='false'),
  developmentCertInfo?: {
    exipreTime?: long(name='ExipreTime', example='1470024000000'),
    status?: string(name='Status', example='EXPIRED'),
  }(name='DevelopmentCertInfo'),
  IOS?: boolean(name='IOS', example='true'),
  productionCertInfo?: {
    exipreTime?: long(name='ExipreTime', example='1764561600000'),
    status?: string(name='Status', example='OK'),
  }(name='ProductionCertInfo'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CheckCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCertificateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckCertificate  CheckCertificateRequest
  * @return CheckCertificateResponse
 */
async function checkCertificate(request: CheckCertificateRequest): CheckCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CheckDeviceRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23419851', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='ae296f3b04a58a05b30c95f****', position='Query'),
}

model CheckDeviceResponseBody = {
  available?: boolean(name='Available', example='ture'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CheckDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDeviceResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CheckDevice is deprecated, please use Push::2016-08-01::CheckDevices instead.  * @param request  the request parameters of CheckDevice  CheckDeviceRequest
  * @return CheckDeviceResponse
 */
// Deprecated
async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDevice', 'POST', '/', 'json', false, 'json', request);
}

model CheckDevicesRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23419851', position='Query'),
  deviceIds: string(name='DeviceIds', description='This parameter is required.', example='ae296f3b04a58a05b30c95f****,ae296f3b04a58a05b30c95f****,ae296f3b04a58a05b30c95f****', position='Query'),
}

model CheckDevicesResponseBody = {
  deviceCheckInfos?: {
    deviceCheckInfo?: [ 
    {
      available?: boolean(name='Available', example='true'),
      deviceId?: string(name='DeviceId', example='ae296f3b04a58a05b30c95f****'),
    }
  ](name='DeviceCheckInfo')
  }(name='DeviceCheckInfos'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CheckDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDevices  CheckDevicesRequest
  * @return CheckDevicesResponse
 */
async function checkDevices(request: CheckDevicesRequest): CheckDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDevices', 'POST', '/', 'json', false, 'json', request);
}

model CompleteContinuouslyPushRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  messageId: string(name='MessageId', description='This parameter is required.', example='4010290149170430', position='Query'),
}

model CompleteContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId', example='4010290149170430'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model CompleteContinuouslyPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompleteContinuouslyPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompleteContinuouslyPush  CompleteContinuouslyPushRequest
  * @return CompleteContinuouslyPushResponse
 */
async function completeContinuouslyPush(request: CompleteContinuouslyPushRequest): CompleteContinuouslyPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompleteContinuouslyPush', 'POST', '/', 'json', false, 'json', request);
}

model ContinuouslyPushRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  messageId: string(name='MessageId', description='This parameter is required.', example='500131', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='DEVICE', position='Query'),
  targetValue: string(name='TargetValue', description='This parameter is required.', example='a692961a92534047ad3625****', position='Query'),
}

model ContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
  requestId?: string(name='RequestId', example='500131'),
}

model ContinuouslyPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinuouslyPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContinuouslyPush  ContinuouslyPushRequest
  * @return ContinuouslyPushResponse
 */
async function continuouslyPush(request: ContinuouslyPushRequest): ContinuouslyPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinuouslyPush', 'POST', '/', 'json', false, 'json', request);
}

model ListSummaryAppsRequest {
}

model ListSummaryAppsResponseBody = {
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
  summaryAppInfos?: {
    summaryAppInfo?: [ 
    {
      appKey?: long(name='AppKey', example='23****07'),
      appName?: string(name='AppName', example='abc'),
    }
  ](name='SummaryAppInfo')
  }(name='SummaryAppInfos'),
}

model ListSummaryAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSummaryAppsResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListSummaryApps is deprecated, please use Mhub::2017-08-25::ListApps instead.  * @param request  the request parameters of ListSummaryApps  ListSummaryAppsRequest
  * @return ListSummaryAppsResponse
 */
// Deprecated
async function listSummaryApps(request: ListSummaryAppsRequest): ListSummaryAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSummaryApps', 'POST', '/', 'json', false, 'json', request);
}

model ListTagsRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId', example='6EEF262B-EA7D-41DC-89B9-20F3D1E28194'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName', example='test_tag2'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model ListTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTags  ListTagsRequest
  * @return ListTagsResponse
 */
async function listTags(request: ListTagsRequest): ListTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTags', 'POST', '/', 'json', false, 'json', request);
}

model MassPushRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  idempotentToken?: string(name='IdempotentToken', minLength=36, maxLength=36, position='Query'),
  pushTask: [ 
    {
      androidActivity?: string(name='AndroidActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
      androidBadgeAddNum?: int32(name='AndroidBadgeAddNum', example='99'),
      androidBadgeClass?: string(name='AndroidBadgeClass'),
      androidBadgeSetNum?: int32(name='AndroidBadgeSetNum', example='99'),
      androidBigBody?: string(name='AndroidBigBody'),
      androidBigPictureUrl?: string(name='AndroidBigPictureUrl', example='https://imag.example.com/image.png'),
      androidBigTitle?: string(name='AndroidBigTitle'),
      androidExtParameters?: string(name='AndroidExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}'),
      androidHonorTargetUserType?: int32(name='AndroidHonorTargetUserType'),
      androidHuaweiLiveNotificationPayload?: string(name='AndroidHuaweiLiveNotificationPayload'),
      androidHuaweiReceiptId?: string(name='AndroidHuaweiReceiptId', example='RCP4C123456'),
      androidHuaweiTargetUserType?: int32(name='AndroidHuaweiTargetUserType', example='1'),
      androidImageUrl?: string(name='AndroidImageUrl', example='https://imag.example.com/image.png'),
      androidInboxBody?: string(name='AndroidInboxBody'),
      androidMeizuNoticeMsgType?: int32(name='AndroidMeizuNoticeMsgType', example='0'),
      androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory', example='VOIP'),
      androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency', example='HIGH'),
      androidMessageOppoCategory?: string(name='AndroidMessageOppoCategory'),
      androidMessageOppoNotifyLevel?: int32(name='AndroidMessageOppoNotifyLevel'),
      androidMessageVivoCategory?: string(name='AndroidMessageVivoCategory', example='TODO'),
      androidMusic?: string(name='AndroidMusic'),
      androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority', example='0'),
      androidNotificationBarType?: int32(name='AndroidNotificationBarType', example='2'),
      androidNotificationChannel?: string(name='AndroidNotificationChannel', example='1'),
      androidNotificationGroup?: string(name='AndroidNotificationGroup', example='group-1'),
      androidNotificationHonorChannel?: string(name='AndroidNotificationHonorChannel', example='LOW'),
      androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel', example='LOW'),
      androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', example='100001'),
      androidNotificationThreadId?: string(name='AndroidNotificationThreadId'),
      androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel', example='0'),
      androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel', example='michannel'),
      androidNotifyType?: string(name='AndroidNotifyType', example='VIBRATE'),
      androidOpenType?: string(name='AndroidOpenType', example='APPLICATION'),
      androidOpenUrl?: string(name='AndroidOpenUrl', example='https://xxxx.xxx'),
      androidOppoPrivateContentParameters?: map[string]string(name='AndroidOppoPrivateContentParameters'),
      androidOppoPrivateMsgTemplateId?: string(name='AndroidOppoPrivateMsgTemplateId'),
      androidOppoPrivateTitleParameters?: map[string]string(name='AndroidOppoPrivateTitleParameters'),
      androidPopupActivity?: string(name='AndroidPopupActivity', example='com.alibaba.cloudpushdemo.bizactivity'),
      androidPopupBody?: string(name='AndroidPopupBody', example='hello'),
      androidPopupTitle?: string(name='AndroidPopupTitle', example='hello'),
      androidRemind?: boolean(name='AndroidRemind', example='true'),
      androidRenderStyle?: string(name='AndroidRenderStyle', example='1'),
      androidTargetUserType?: int32(name='AndroidTargetUserType'),
      androidVivoPushMode?: int32(name='AndroidVivoPushMode', example='1'),
      androidVivoReceiptId?: string(name='AndroidVivoReceiptId'),
      androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity', deprecated='true'),
      androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody', deprecated='true'),
      androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle', deprecated='true'),
      androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl', example='https://f6.market.xiaomi.com/download/MiPass/aaa/bbb.png', deprecated='true'),
      androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl', example='https://imag.example.com/image.png', deprecated='true'),
      body?: string(name='Body', example='hello'),
      deviceType: string(name='DeviceType', description='This parameter is required.', example='ALL'),
      expireTime?: string(name='ExpireTime', example='2019-02-20T00:00:00Z'),
      harmonyAction?: string(name='HarmonyAction'),
      harmonyActionType?: string(name='HarmonyActionType'),
      harmonyBadgeAddNum?: int32(name='HarmonyBadgeAddNum'),
      harmonyBadgeSetNum?: int32(name='HarmonyBadgeSetNum'),
      harmonyCategory?: string(name='HarmonyCategory'),
      harmonyExtParameters?: string(name='HarmonyExtParameters'),
      harmonyExtensionExtraData?: string(name='HarmonyExtensionExtraData'),
      harmonyExtensionPush?: boolean(name='HarmonyExtensionPush'),
      harmonyImageUrl?: string(name='HarmonyImageUrl'),
      harmonyInboxContent?: string(name='HarmonyInboxContent'),
      harmonyLiveViewPayload?: string(name='HarmonyLiveViewPayload'),
      harmonyNotificationSlotType?: string(name='HarmonyNotificationSlotType'),
      harmonyNotifyId?: int32(name='HarmonyNotifyId'),
      harmonyReceiptId?: string(name='HarmonyReceiptId'),
      harmonyRemind?: boolean(name='HarmonyRemind'),
      harmonyRemindBody?: string(name='HarmonyRemindBody'),
      harmonyRemindTitle?: string(name='HarmonyRemindTitle'),
      harmonyRenderStyle?: string(name='HarmonyRenderStyle'),
      harmonyTestMessage?: boolean(name='HarmonyTestMessage'),
      harmonyUri?: string(name='HarmonyUri'),
      jobKey?: string(name='JobKey', example='123'),
      pushTime?: string(name='PushTime', example='2019-02-20T00:00:00Z'),
      pushType: string(name='PushType', description='This parameter is required.', example='MESSAGE'),
      sendChannels?: string(name='SendChannels', example='accs,huawei,xiaomi'),
      sendSpeed?: int32(name='SendSpeed', example='0', deprecated='true'),
      storeOffline?: boolean(name='StoreOffline', example='true'),
      target: string(name='Target', description='This parameter is required.', example='DEVICE'),
      targetValue: string(name='TargetValue', description='This parameter is required.', example='deviceid1,deviceid2'),
      title?: string(name='Title', example='title'),
      trim?: boolean(name='Trim', example='false'),
      iOSApnsEnv?: string(name='iOSApnsEnv', example='DEV'),
      iOSBadge?: int32(name='iOSBadge', example='0'),
      iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement', example='true'),
      iOSExtParameters?: string(name='iOSExtParameters', example='{“attachment”: “https://xxxx.xxx/notification_pic.png"}'),
      iOSInterruptionLevel?: string(name='iOSInterruptionLevel', example='active'),
      iOSLiveActivityAttributes?: string(name='iOSLiveActivityAttributes'),
      iOSLiveActivityAttributesType?: string(name='iOSLiveActivityAttributesType'),
      iOSLiveActivityContentState?: string(name='iOSLiveActivityContentState'),
      iOSLiveActivityDismissalDate?: long(name='iOSLiveActivityDismissalDate'),
      iOSLiveActivityEvent?: string(name='iOSLiveActivityEvent'),
      iOSLiveActivityId?: string(name='iOSLiveActivityId'),
      iOSLiveActivityStaleDate?: long(name='iOSLiveActivityStaleDate'),
      iOSMusic?: string(name='iOSMusic', example='””'),
      iOSMutableContent?: boolean(name='iOSMutableContent', example='true'),
      iOSNotificationCategory?: string(name='iOSNotificationCategory', example='ios'),
      iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId', example='ZD2011'),
      iOSNotificationThreadId?: string(name='iOSNotificationThreadId', example='abc'),
      iOSRelevanceScore?: double(name='iOSRelevanceScore', example='0.01'),
      iOSRemind?: boolean(name='iOSRemind', example='true'),
      iOSRemindBody?: string(name='iOSRemindBody'),
      iOSSilentNotification?: boolean(name='iOSSilentNotification', example='true'),
      iOSSubtitle?: string(name='iOSSubtitle', example='subtitle'),
    }
  ](name='PushTask', description='This parameter is required.', position='Body'),
}

model MassPushResponseBody = {
  messageIds?: {
    messageId?: [ string ](name='MessageId')
  }(name='MessageIds'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model MassPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MassPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MassPush  MassPushRequest
  * @return MassPushResponse
 */
async function massPush(request: MassPushRequest): MassPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MassPush', 'POST', '/', 'json', true, 'form', request);
}

model MassPushV2Request {
  appKey: long(name='AppKey', description='This parameter is required.', position='Query'),
  idempotentToken?: string(name='IdempotentToken', minLength=36, maxLength=36, position='Query'),
  pushTasks: [
    PushTask
  ](name='PushTasks', description='This parameter is required.', shrink='json', position='Query'),
}

model MassPushV2ResponseBody = {
  messageIds?: [ string ](name='MessageIds'),
  requestId?: string(name='RequestId'),
}

model MassPushV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MassPushV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MassPushV2  MassPushV2Request
  * @return MassPushV2Response
 */
async function massPushV2(request: MassPushV2Request): MassPushV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MassPushV2', 'POST', '/', 'json', false, 'json', request);
}

model PushRequest {
  androidActivity?: string(name='AndroidActivity', example='com.alibaba.cloudpushdemo.bizactivity', position='Query'),
  androidBadgeAddNum?: int32(name='AndroidBadgeAddNum', minimum=1, maximum=99, position='Query'),
  androidBadgeClass?: string(name='AndroidBadgeClass', position='Query'),
  androidBadgeSetNum?: int32(name='AndroidBadgeSetNum', minimum=1, maximum=99, position='Query'),
  androidBigBody?: string(name='AndroidBigBody', position='Query'),
  androidBigPictureUrl?: string(name='AndroidBigPictureUrl', example='https://imag.example.com/image.png', position='Query'),
  androidBigTitle?: string(name='AndroidBigTitle', position='Query'),
  androidExtParameters?: string(name='AndroidExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}', position='Query'),
  androidHonorTargetUserType?: int32(name='AndroidHonorTargetUserType', position='Query'),
  androidHuaweiLiveNotificationPayload?: string(name='AndroidHuaweiLiveNotificationPayload', position='Query'),
  androidHuaweiReceiptId?: string(name='AndroidHuaweiReceiptId', example='RCP4C123456', position='Query'),
  androidHuaweiTargetUserType?: int32(name='AndroidHuaweiTargetUserType', example='0', position='Query'),
  androidImageUrl?: string(name='AndroidImageUrl', example='https://imag.example.com/image.png', position='Query'),
  androidInboxBody?: string(name='AndroidInboxBody', position='Query'),
  androidMeizuNoticeMsgType?: int32(name='AndroidMeizuNoticeMsgType', example='0', position='Query'),
  androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory', example='VOIP', position='Query'),
  androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency', example='HIGH', position='Query'),
  androidMessageOppoCategory?: string(name='AndroidMessageOppoCategory', position='Query'),
  androidMessageOppoNotifyLevel?: int32(name='AndroidMessageOppoNotifyLevel', position='Query'),
  androidMessageVivoCategory?: string(name='AndroidMessageVivoCategory', example='TODO', position='Query'),
  androidMusic?: string(name='AndroidMusic', position='Query'),
  androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority', example='0', minimum=-2, maximum=2, position='Query'),
  androidNotificationBarType?: int32(name='AndroidNotificationBarType', example='2', minimum=0, maximum=100, position='Query'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel', example='1', position='Query'),
  androidNotificationGroup?: string(name='AndroidNotificationGroup', example='group-1', position='Query'),
  androidNotificationHonorChannel?: string(name='AndroidNotificationHonorChannel', example='LOW', position='Query'),
  androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel', example='LOW', position='Query'),
  androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', example='100001', position='Query'),
  androidNotificationThreadId?: string(name='AndroidNotificationThreadId', position='Query'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel', example='classification', position='Query'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel', example='michannel', position='Query'),
  androidNotifyType?: string(name='AndroidNotifyType', example='BOTH', position='Query'),
  androidOpenType?: string(name='AndroidOpenType', example='APPLICATION', position='Query'),
  androidOpenUrl?: string(name='AndroidOpenUrl', example='https://xxxx.xxx', position='Query'),
  androidOppoPrivateContentParameters?: map[string]string(name='AndroidOppoPrivateContentParameters', shrink='json', position='Query'),
  androidOppoPrivateMsgTemplateId?: string(name='AndroidOppoPrivateMsgTemplateId', position='Query'),
  androidOppoPrivateTitleParameters?: map[string]string(name='AndroidOppoPrivateTitleParameters', shrink='json', position='Query'),
  androidPopupActivity?: string(name='AndroidPopupActivity', example='com.alibaba.cloudpushdemo.bizactivity', position='Query'),
  androidPopupBody?: string(name='AndroidPopupBody', example='hello', position='Query'),
  androidPopupTitle?: string(name='AndroidPopupTitle', example='hello', position='Query'),
  androidRemind?: boolean(name='AndroidRemind', example='true', position='Query'),
  androidRenderStyle?: int32(name='AndroidRenderStyle', example='1', position='Query'),
  androidTargetUserType?: int32(name='AndroidTargetUserType', position='Query'),
  androidVivoPushMode?: int32(name='AndroidVivoPushMode', example='0', position='Query'),
  androidVivoReceiptId?: string(name='AndroidVivoReceiptId', position='Query'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity', deprecated='true', position='Query'),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody', deprecated='true', position='Query'),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle', deprecated='true', position='Query'),
  androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl', example='https://f6.market.xiaomi.com/download/MiPass/aaa/bbb.png', deprecated='true', position='Query'),
  androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl', example='https://imag.example.com/image.png', deprecated='true', position='Query'),
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  body?: string(name='Body', example='hello', position='Query'),
  deviceType: string(name='DeviceType', description='This parameter is required.', example='ALL', position='Query'),
  expireTime?: string(name='ExpireTime', example='2019-02-20T00:00:00Z', position='Query'),
  harmonyAction?: string(name='HarmonyAction', position='Query'),
  harmonyActionType?: string(name='HarmonyActionType', position='Query'),
  harmonyBadgeAddNum?: int32(name='HarmonyBadgeAddNum', position='Query'),
  harmonyBadgeSetNum?: int32(name='HarmonyBadgeSetNum', position='Query'),
  harmonyCategory?: string(name='HarmonyCategory', position='Query'),
  harmonyExtParameters?: string(name='HarmonyExtParameters', position='Query'),
  harmonyExtensionExtraData?: string(name='HarmonyExtensionExtraData', position='Query'),
  harmonyExtensionPush?: boolean(name='HarmonyExtensionPush', position='Query'),
  harmonyImageUrl?: string(name='HarmonyImageUrl', position='Query'),
  harmonyInboxContent?: string(name='HarmonyInboxContent', position='Query'),
  harmonyLiveViewPayload?: string(name='HarmonyLiveViewPayload', position='Query'),
  harmonyNotificationSlotType?: string(name='HarmonyNotificationSlotType', position='Query'),
  harmonyNotifyId?: int32(name='HarmonyNotifyId', position='Query'),
  harmonyReceiptId?: string(name='HarmonyReceiptId', position='Query'),
  harmonyRemind?: boolean(name='HarmonyRemind', position='Query'),
  harmonyRemindBody?: string(name='HarmonyRemindBody', position='Query'),
  harmonyRemindTitle?: string(name='HarmonyRemindTitle', position='Query'),
  harmonyRenderStyle?: string(name='HarmonyRenderStyle', position='Query'),
  harmonyTestMessage?: boolean(name='HarmonyTestMessage', position='Query'),
  harmonyUri?: string(name='HarmonyUri', position='Query'),
  idempotentToken?: string(name='IdempotentToken', minLength=36, maxLength=36, position='Query'),
  jobKey?: string(name='JobKey', example='123', position='Query'),
  pushTime?: string(name='PushTime', example='2019-02-20T00:00:00Z', position='Query'),
  pushType: string(name='PushType', description='This parameter is required.', example='MESSAGE', position='Query'),
  sendChannels?: string(name='SendChannels', example='accs,huawei,xiaomi', position='Query'),
  sendSpeed?: int32(name='SendSpeed', example='0', deprecated='true', minimum=10000, position='Query'),
  smsDelaySecs?: int32(name='SmsDelaySecs', example='15', minimum=1, position='Query'),
  smsParams?: string(name='SmsParams', example='key1=value1', position='Query'),
  smsSendPolicy?: int32(name='SmsSendPolicy', example='0', minimum=0, maximum=1, position='Query'),
  smsSignName?: string(name='SmsSignName', position='Query'),
  smsTemplateName?: string(name='SmsTemplateName', position='Query'),
  storeOffline?: boolean(name='StoreOffline', example='false', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='ALL', position='Query'),
  targetValue: string(name='TargetValue', description='This parameter is required.', example='ALL', position='Query'),
  title?: string(name='Title', example='title', position='Query'),
  trim?: boolean(name='Trim', example='false', position='Query'),
  iOSApnsEnv?: string(name='iOSApnsEnv', example='DEV', position='Query'),
  iOSBadge?: int32(name='iOSBadge', example='0', position='Query'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement', example='true', position='Query'),
  iOSExtParameters?: string(name='iOSExtParameters', example='{“attachment”: “https://xxxx.xxx/notification_pic.png"}', position='Query'),
  iOSInterruptionLevel?: string(name='iOSInterruptionLevel', example='active', position='Query'),
  iOSLiveActivityAttributes?: string(name='iOSLiveActivityAttributes', position='Query'),
  iOSLiveActivityAttributesType?: string(name='iOSLiveActivityAttributesType', position='Query'),
  iOSLiveActivityContentState?: string(name='iOSLiveActivityContentState', position='Query'),
  iOSLiveActivityDismissalDate?: long(name='iOSLiveActivityDismissalDate', position='Query'),
  iOSLiveActivityEvent?: string(name='iOSLiveActivityEvent', position='Query'),
  iOSLiveActivityId?: string(name='iOSLiveActivityId', position='Query'),
  iOSLiveActivityStaleDate?: long(name='iOSLiveActivityStaleDate', position='Query'),
  iOSMusic?: string(name='iOSMusic', example='""', position='Query'),
  iOSMutableContent?: boolean(name='iOSMutableContent', example='true', position='Query'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory', example='ios', position='Query'),
  iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId', example='ZD2011', position='Query'),
  iOSNotificationThreadId?: string(name='iOSNotificationThreadId', example='abc', position='Query'),
  iOSRelevanceScore?: double(name='iOSRelevanceScore', example='0.01', position='Query'),
  iOSRemind?: boolean(name='iOSRemind', example='true', position='Query'),
  iOSRemindBody?: string(name='iOSRemindBody', position='Query'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification', example='true', position='Query'),
  iOSSubtitle?: string(name='iOSSubtitle', example='su\\"b', position='Query'),
}

model PushResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Push  PushRequest
  * @return PushResponse
 */
async function push(request: PushRequest): PushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Push', 'POST', '/', 'json', false, 'json', request);
}

model PushMessageToAndroidRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  body: string(name='Body', description='This parameter is required.', example='my body', position='Query'),
  jobKey?: string(name='JobKey', example='123', position='Query'),
  storeOffline?: boolean(name='StoreOffline', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='ALL', position='Query'),
  targetValue: string(name='TargetValue', description='This parameter is required.', example='all', position='Query'),
  title: string(name='Title', description='This parameter is required.', example='my title', position='Query'),
}

model PushMessageToAndroidResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushMessageToAndroidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMessageToAndroidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushMessageToAndroid  PushMessageToAndroidRequest
  * @return PushMessageToAndroidResponse
 */
async function pushMessageToAndroid(request: PushMessageToAndroidRequest): PushMessageToAndroidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMessageToAndroid', 'POST', '/', 'json', false, 'json', request);
}

model PushMessageToiOSRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='24780725', position='Query'),
  body: string(name='Body', description='This parameter is required.', example='my body', position='Query'),
  jobKey?: string(name='JobKey', example='123', position='Query'),
  storeOffline?: boolean(name='StoreOffline', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='ALL', position='Query'),
  targetValue: string(name='TargetValue', description='This parameter is required.', example='all', position='Query'),
  title: string(name='Title', description='This parameter is required.', example='my title', position='Query'),
}

model PushMessageToiOSResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushMessageToiOSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMessageToiOSResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushMessageToiOS  PushMessageToiOSRequest
  * @return PushMessageToiOSResponse
 */
async function pushMessageToiOS(request: PushMessageToiOSRequest): PushMessageToiOSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMessageToiOS', 'POST', '/', 'json', false, 'json', request);
}

model PushNoticeToAndroidRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  body: string(name='Body', description='This parameter is required.', example='body', position='Query'),
  extParameters?: string(name='ExtParameters', example='{"key1":"value1","api_name":"PushNoticeToAndroidRequest"}', position='Query'),
  jobKey?: string(name='JobKey', example='123', position='Query'),
  storeOffline?: boolean(name='StoreOffline', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='ALL', position='Query'),
  targetValue: string(name='TargetValue', description='This parameter is required.', example='ALL', position='Query'),
  title: string(name='Title', description='This parameter is required.', example='title', position='Query'),
}

model PushNoticeToAndroidResponseBody = {
  messageId?: string(name='MessageId', example='501029'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model PushNoticeToAndroidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushNoticeToAndroidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushNoticeToAndroid  PushNoticeToAndroidRequest
  * @return PushNoticeToAndroidResponse
 */
async function pushNoticeToAndroid(request: PushNoticeToAndroidRequest): PushNoticeToAndroidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushNoticeToAndroid', 'POST', '/', 'json', false, 'json', request);
}

model PushNoticeToiOSRequest {
  apnsEnv: string(name='ApnsEnv', description='This parameter is required.', example='DEV', position='Query'),
  appKey: long(name='AppKey', description='This parameter is required.', example='24780725', position='Query'),
  body: string(name='Body', description='This parameter is required.', example='Hello World', position='Query'),
  extParameters?: string(name='ExtParameters', example='{"k1":"ios","k2":"v2"}', position='Query'),
  jobKey?: string(name='JobKey', example='123', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='ALL', position='Query'),
  targetValue: string(name='TargetValue', description='This parameter is required.', example='ALL', position='Query'),
  title?: string(name='Title', example='title', position='Query'),
}

model PushNoticeToiOSResponseBody = {
  messageId?: string(name='MessageId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
  requestId?: string(name='RequestId', example='501029'),
}

model PushNoticeToiOSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushNoticeToiOSResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushNoticeToiOS  PushNoticeToiOSRequest
  * @return PushNoticeToiOSResponse
 */
async function pushNoticeToiOS(request: PushNoticeToiOSRequest): PushNoticeToiOSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushNoticeToiOS', 'POST', '/', 'json', false, 'json', request);
}

model PushV2Request {
  appKey: long(name='AppKey', description='This parameter is required.', example='****530646', position='Query'),
  idempotentToken?: string(name='IdempotentToken', example='c8016d13-6e76-****-9bda-769383d11787', minLength=36, maxLength=36, position='Query'),
  pushTask: PushTask(name='PushTask', description='This parameter is required.', shrink='json', position='Query'),
}

model PushV2ResponseBody = {
  messageId?: string(name='MessageId', example='11747540****88320'),
  requestId?: string(name='RequestId', example='159E4422-6624-****-8943-DFD98D34858C'),
}

model PushV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushV2  PushV2Request
  * @return PushV2Response
 */
async function pushV2(request: PushV2Request): PushV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushV2', 'POST', '/', 'json', false, 'json', request);
}

model QueryAliasesRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='e2ba19de97604f55b165576****', position='Query'),
}

model QueryAliasesResponseBody = {
  aliasInfos?: {
    aliasInfo?: [ 
    {
      aliasName?: string(name='AliasName', example='test_alias1'),
    }
  ](name='AliasInfo')
  }(name='AliasInfos'),
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model QueryAliasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAliasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAliases  QueryAliasesRequest
  * @return QueryAliasesResponse
 */
async function queryAliases(request: QueryAliasesRequest): QueryAliasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAliases', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceInfoRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23419851', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='a64ae296f3b04a58a05b30c9****', position='Query'),
}

model QueryDeviceInfoResponseBody = {
  deviceInfo?: {
    account?: string(name='Account', example='test@aliyun.com'),
    alias?: string(name='Alias', example='test_alias,test_alias2'),
    brand?: string(name='Brand'),
    deviceId?: string(name='DeviceId', example='a64ae296f3b04a58a05b30c95****'),
    deviceToken?: string(name='DeviceToken', example='5ecc7b4012aaa801b63******5543ccbda6b4930d09629e936e1ac4b762a7df'),
    deviceType?: string(name='DeviceType', example='iOS'),
    lastOnlineTime?: string(name='LastOnlineTime', example='2018-03-27T02:19:40Z'),
    model?: string(name='Model'),
    online?: boolean(name='Online', example='false'),
    phoneNumber?: string(name='PhoneNumber', example='133********'),
    pushEnabled?: boolean(name='PushEnabled', example='true'),
    tags?: string(name='Tags', example='test_tag,test_tag2'),
  }(name='DeviceInfo'),
  requestId?: string(name='RequestId', example='6EEF262B-EA7D-41DC-89B9-20F3D1E28194'),
}

model QueryDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDeviceInfo  QueryDeviceInfoRequest
  * @return QueryDeviceInfoResponse
 */
async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceStatRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  deviceType?: string(name='DeviceType', example='iOS', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2016-07-29T00:00:00Z', position='Query'),
  queryType: string(name='QueryType', description='This parameter is required.', example='TOTAL', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2016-07-28T00:00:00Z', position='Query'),
}

model QueryDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count', example='100'),
      deviceType?: string(name='DeviceType', example='iOS'),
      time?: string(name='Time', example='2016-07-28T16:00:00Z'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model QueryDeviceStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDeviceStat  QueryDeviceStatRequest
  * @return QueryDeviceStatResponse
 */
async function queryDeviceStat(request: QueryDeviceStatRequest): QueryDeviceStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceStat', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesByAccountRequest {
  account: string(name='Account', description='This parameter is required.', example='accountName', position='Query'),
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
}

model QueryDevicesByAccountResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId', example='A8A24108-2AD0-4F6E-81C7-A8A24C2C2AD0'),
}

model QueryDevicesByAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDevicesByAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDevicesByAccount  QueryDevicesByAccountRequest
  * @return QueryDevicesByAccountResponse
 */
async function queryDevicesByAccount(request: QueryDevicesByAccountRequest): QueryDevicesByAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesByAccount', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesByAliasRequest {
  alias: string(name='Alias', description='This parameter is required.', example='aliasName', position='Query'),
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
}

model QueryDevicesByAliasResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId', example='6A9FD644-35A5-40E4-89B0-2021CAEDC1B4'),
}

model QueryDevicesByAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDevicesByAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDevicesByAlias  QueryDevicesByAliasRequest
  * @return QueryDevicesByAliasResponse
 */
async function queryDevicesByAlias(request: QueryDevicesByAliasRequest): QueryDevicesByAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesByAlias', 'POST', '/', 'json', false, 'json', request);
}

model QueryPushRecordsRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='333526247', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2021-09-29T06:24:58Z', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  nextToken?: string(name='NextToken', example='FFPpkmhCPm*****************xjk=', position='Query'),
  page?: int32(name='Page', example='8', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  pushType?: string(name='PushType', example='NOTICE', position='Query'),
  source?: string(name='Source', example='API', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2021-09-15T02:05:24Z', position='Query'),
  target?: string(name='Target', example='DEVICE', position='Query'),
}

model QueryPushRecordsResponseBody = {
  nextToken?: string(name='NextToken', example='i91D***********kXIh/dVBEQ=='),
  page?: int32(name='Page', example='11'),
  pageSize?: int32(name='PageSize', example='20'),
  pushInfos?: {
    pushInfo?: [ 
    {
      appKey?: long(name='AppKey', example='333526247'),
      body?: string(name='Body', example='abcd'),
      deviceType?: string(name='DeviceType', example='ANDROID'),
      messageId?: string(name='MessageId', example='510431'),
      pushTime?: string(name='PushTime', example='2021-09-15T02:05:24Z'),
      pushType?: string(name='PushType', example='NOTICE'),
      source?: string(name='Source', example='DEVICE'),
      status?: string(name='Status', example='SENT'),
      target?: string(name='Target', example='DEVICE'),
      title?: string(name='Title', example='sssss'),
    }
  ](name='PushInfo')
  }(name='PushInfos'),
  requestId?: string(name='RequestId', example='9B24B396-249D-55E4-8CA1-66C9B50BB734'),
  total?: int32(name='Total', example='193'),
}

model QueryPushRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPushRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPushRecords  QueryPushRecordsRequest
  * @return QueryPushRecordsResponse
 */
async function queryPushRecords(request: QueryPushRecordsRequest): QueryPushRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPushRecords', 'POST', '/', 'json', false, 'json', request);
}

model QueryPushStatByAppRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2016-07-29T00:00:00Z', position='Query'),
  granularity: string(name='Granularity', description='This parameter is required.', example='DAY', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2016-07-25T00:00:00Z', position='Query'),
}

model QueryPushStatByAppResponseBody = {
  appPushStats?: {
    appPushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount', example='120'),
      deletedCount?: long(name='DeletedCount', example='10'),
      openedCount?: long(name='OpenedCount', example='30'),
      receivedCount?: long(name='ReceivedCount', example='60'),
      sentCount?: long(name='SentCount', example='100'),
      smsFailedCount?: long(name='SmsFailedCount', example='0'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount', example='0'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount', example='0'),
      smsSentCount?: long(name='SmsSentCount', example='0'),
      smsSkipCount?: long(name='SmsSkipCount', example='0'),
      time?: string(name='Time', example='2016-07-25T00:00:00Z'),
    }
  ](name='AppPushStat')
  }(name='AppPushStats'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model QueryPushStatByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPushStatByAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPushStatByApp  QueryPushStatByAppRequest
  * @return QueryPushStatByAppResponse
 */
async function queryPushStatByApp(request: QueryPushStatByAppRequest): QueryPushStatByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPushStatByApp', 'POST', '/', 'json', false, 'json', request);
}

model QueryPushStatByMsgRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  messageId: long(name='MessageId', description='This parameter is required.', example='510427', position='Query'),
}

model QueryPushStatByMsgResponseBody = {
  pushStats?: {
    pushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount', example='120'),
      deletedCount?: long(name='DeletedCount', example='10'),
      messageId?: string(name='MessageId', example='510427'),
      openedCount?: long(name='OpenedCount', example='30'),
      receivedCount?: long(name='ReceivedCount', example='60'),
      sentCount?: long(name='SentCount', example='100'),
      smsFailedCount?: long(name='SmsFailedCount', example='0'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount', example='0'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount', example='0'),
      smsSentCount?: long(name='SmsSentCount', example='0'),
      smsSkipCount?: long(name='SmsSkipCount', example='0'),
    }
  ](name='PushStat')
  }(name='PushStats'),
  requestId?: string(name='RequestId', example='CF195C34-98FB-491A-98D7-19CBC1FA880B'),
}

model QueryPushStatByMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPushStatByMsgResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPushStatByMsg  QueryPushStatByMsgRequest
  * @return QueryPushStatByMsgResponse
 */
async function queryPushStatByMsg(request: QueryPushStatByMsgRequest): QueryPushStatByMsgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPushStatByMsg', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagsRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  clientKey: string(name='ClientKey', description='This parameter is required.', example='e2ba19de97604f55b165576****', position='Query'),
  keyType: string(name='KeyType', description='This parameter is required.', example='DEVICE', position='Query'),
}

model QueryTagsResponseBody = {
  requestId?: string(name='RequestId', example='D68AE5C6-8AAF-46C9-B627-3FDACD1A4168'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName', example='test_tag2'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model QueryTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTags  QueryTagsRequest
  * @return QueryTagsResponse
 */
async function queryTags(request: QueryTagsRequest): QueryTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTags', 'POST', '/', 'json', false, 'json', request);
}

model QueryUniqueDeviceStatRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2016-07-26T00:00:00Z', position='Query'),
  granularity: string(name='Granularity', description='This parameter is required.', example='DAY', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2016-07-25T00:00:00Z', position='Query'),
}

model QueryUniqueDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count', example='100'),
      time?: string(name='Time', example='2016-07-25T00:00:00Z'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId', example='9998B3CC-ED9E-4CB3-A8FB-DCC61296BFBC'),
}

model QueryUniqueDeviceStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUniqueDeviceStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUniqueDeviceStat  QueryUniqueDeviceStatRequest
  * @return QueryUniqueDeviceStatResponse
 */
async function queryUniqueDeviceStat(request: QueryUniqueDeviceStatRequest): QueryUniqueDeviceStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUniqueDeviceStat', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTagRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  tagName: string(name='TagName', description='This parameter is required.', example='test_tag', position='Query'),
}

model RemoveTagResponseBody = {
  requestId?: string(name='RequestId', example='23000F3C-0EFE-4C89-82EE-E04F42D37B3C'),
}

model RemoveTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveTag  RemoveTagRequest
  * @return RemoveTagResponse
 */
async function removeTag(request: RemoveTagRequest): RemoveTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTag', 'POST', '/', 'json', false, 'json', request);
}

model UnbindAliasRequest {
  aliasName?: string(name='AliasName', example='test_alias', position='Query'),
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='e2ba19de97604f55b16557673****', position='Query'),
  unbindAll?: boolean(name='UnbindAll', example='true', position='Query'),
}

model UnbindAliasResponseBody = {
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model UnbindAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindAlias  UnbindAliasRequest
  * @return UnbindAliasResponse
 */
async function unbindAlias(request: UnbindAliasRequest): UnbindAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAlias', 'POST', '/', 'json', false, 'json', request);
}

model UnbindPhoneRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='eb5f741d83d04d34807d229999eefa52', position='Query'),
}

model UnbindPhoneResponseBody = {
  requestId?: string(name='RequestId', example='0D1126F0-F8FF-513D-BAFA-F140447BDED4'),
}

model UnbindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindPhoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindPhone  UnbindPhoneRequest
  * @return UnbindPhoneResponse
 */
async function unbindPhone(request: UnbindPhoneRequest): UnbindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPhone', 'POST', '/', 'json', false, 'json', request);
}

model UnbindTagRequest {
  appKey: long(name='AppKey', description='This parameter is required.', example='23267207', position='Query'),
  clientKey: string(name='ClientKey', description='This parameter is required.', example='e2ba19de97604f55b16557673****', position='Query'),
  keyType: string(name='KeyType', description='This parameter is required.', example='DEVICE', position='Query'),
  tagName: string(name='TagName', description='This parameter is required.', example='test_tag1,test_tag2', position='Query'),
}

model UnbindTagResponseBody = {
  requestId?: string(name='RequestId', example='159E4422-6624-4750-8943-DFD98D34858C'),
}

model UnbindTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindTag  UnbindTagRequest
  * @return UnbindTagResponse
 */
async function unbindTag(request: UnbindTagRequest): UnbindTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindTag', 'POST', '/', 'json', false, 'json', request);
}

