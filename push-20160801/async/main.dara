/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Push';
  @version = '2016-08-01';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'cloudpush.aliyuncs.com',
    ap-northeast-2-pop = 'cloudpush.aliyuncs.com',
    ap-south-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-2 = 'cloudpush.aliyuncs.com',
    ap-southeast-3 = 'cloudpush.aliyuncs.com',
    ap-southeast-5 = 'cloudpush.aliyuncs.com',
    cn-beijing = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudpush.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudpush.aliyuncs.com',
    cn-chengdu = 'cloudpush.aliyuncs.com',
    cn-edge-1 = 'cloudpush.aliyuncs.com',
    cn-fujian = 'cloudpush.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou = 'cloudpush.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-finance = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudpush.aliyuncs.com',
    cn-hongkong = 'cloudpush.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudpush.aliyuncs.com',
    cn-huhehaote = 'cloudpush.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudpush.aliyuncs.com',
    cn-qingdao = 'cloudpush.aliyuncs.com',
    cn-qingdao-nebula = 'cloudpush.aliyuncs.com',
    cn-shanghai = 'cloudpush.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shanghai-inner = 'cloudpush.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen = 'cloudpush.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-inner = 'cloudpush.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudpush.aliyuncs.com',
    cn-wuhan = 'cloudpush.aliyuncs.com',
    cn-yushanfang = 'cloudpush.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudpush.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudpush.aliyuncs.com',
    eu-central-1 = 'cloudpush.aliyuncs.com',
    eu-west-1 = 'cloudpush.aliyuncs.com',
    eu-west-1-oxs = 'cloudpush.aliyuncs.com',
    me-east-1 = 'cloudpush.aliyuncs.com',
    rus-west-1-pop = 'cloudpush.aliyuncs.com',
    us-east-1 = 'cloudpush.aliyuncs.com',
    us-west-1 = 'cloudpush.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model BindAliasRequest {
  aliasName: string(name='AliasName', position='Query'),
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
}

model BindAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindAliasResponse = {
  headers: map[string]string(name='headers'),
  body: BindAliasResponseBody(name='body'),
}

async function bindAlias(request: BindAliasRequest): BindAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindAlias', 'POST', '/', 'json', false, 'json', request);
}

model BindPhoneRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
}

model BindPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: BindPhoneResponseBody(name='body'),
}

async function bindPhone(request: BindPhoneRequest): BindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPhone', 'POST', '/', 'json', false, 'json', request);
}

model BindTagRequest {
  appKey: long(name='AppKey', position='Query'),
  clientKey: string(name='ClientKey', position='Query'),
  keyType: string(name='KeyType', position='Query'),
  tagName: string(name='TagName', position='Query'),
}

model BindTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindTagResponse = {
  headers: map[string]string(name='headers'),
  body: BindTagResponseBody(name='body'),
}

async function bindTag(request: BindTagRequest): BindTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindTag', 'POST', '/', 'json', false, 'json', request);
}

model CancelPushRequest {
  appKey: long(name='AppKey', position='Query'),
  messageId: long(name='MessageId', position='Query'),
}

model CancelPushResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPushResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPushResponseBody(name='body'),
}

async function cancelPush(request: CancelPushRequest): CancelPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPush', 'POST', '/', 'json', false, 'json', request);
}

model CheckCertificateRequest {
  appKey: long(name='AppKey', minimum=0, maximum=1000000000, position='Query'),
}

model CheckCertificateResponseBody = {
  android?: boolean(name='Android'),
  developmentCertInfo?: {
    exipreTime?: long(name='ExipreTime'),
    status?: string(name='Status'),
  }(name='DevelopmentCertInfo'),
  IOS?: boolean(name='IOS'),
  productionCertInfo?: {
    exipreTime?: long(name='ExipreTime'),
    status?: string(name='Status'),
  }(name='ProductionCertInfo'),
  requestId?: string(name='RequestId'),
}

model CheckCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCertificateResponseBody(name='body'),
}

async function checkCertificate(request: CheckCertificateRequest): CheckCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CheckDeviceRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
}

model CheckDeviceResponseBody = {
  available?: boolean(name='Available'),
  requestId?: string(name='RequestId'),
}

model CheckDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDeviceResponseBody(name='body'),
}

async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDevice', 'POST', '/', 'json', false, 'json', request);
}

model CheckDevicesRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
}

model CheckDevicesResponseBody = {
  deviceCheckInfos?: {
    deviceCheckInfo?: [ 
    {
      available?: boolean(name='Available'),
      deviceId?: string(name='DeviceId'),
    }
  ](name='DeviceCheckInfo')
  }(name='DeviceCheckInfos'),
  requestId?: string(name='RequestId'),
}

model CheckDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDevicesResponseBody(name='body'),
}

async function checkDevices(request: CheckDevicesRequest): CheckDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDevices', 'POST', '/', 'json', false, 'json', request);
}

model CompleteContinuouslyPushRequest {
  appKey: long(name='AppKey', position='Query'),
  messageId: string(name='MessageId', position='Query'),
}

model CompleteContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model CompleteContinuouslyPushResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteContinuouslyPushResponseBody(name='body'),
}

async function completeContinuouslyPush(request: CompleteContinuouslyPushRequest): CompleteContinuouslyPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompleteContinuouslyPush', 'POST', '/', 'json', false, 'json', request);
}

model ContinuouslyPushRequest {
  appKey: long(name='AppKey', position='Query'),
  messageId: string(name='MessageId', position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
}

model ContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model ContinuouslyPushResponse = {
  headers: map[string]string(name='headers'),
  body: ContinuouslyPushResponseBody(name='body'),
}

async function continuouslyPush(request: ContinuouslyPushRequest): ContinuouslyPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinuouslyPush', 'POST', '/', 'json', false, 'json', request);
}

model ListSummaryAppsRequest {
}

model ListSummaryAppsResponseBody = {
  requestId?: string(name='RequestId'),
  summaryAppInfos?: {
    summaryAppInfo?: [ 
    {
      appKey?: long(name='AppKey'),
      appName?: string(name='AppName'),
    }
  ](name='SummaryAppInfo')
  }(name='SummaryAppInfos'),
}

model ListSummaryAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSummaryAppsResponseBody(name='body'),
}

async function listSummaryApps(request: ListSummaryAppsRequest): ListSummaryAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSummaryApps', 'POST', '/', 'json', false, 'json', request);
}

model ListTagsRequest {
  appKey: long(name='AppKey', position='Query'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagsResponseBody(name='body'),
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTags', 'POST', '/', 'json', false, 'json', request);
}

model MassPushRequest {
  appKey: long(name='AppKey', position='Query'),
  pushTask: [ 
    {
      androidActivity?: string(name='AndroidActivity'),
      androidBigBody?: string(name='AndroidBigBody'),
      androidBigPictureUrl?: string(name='AndroidBigPictureUrl'),
      androidBigTitle?: string(name='AndroidBigTitle'),
      androidExtParameters?: string(name='AndroidExtParameters'),
      androidImageUrl?: string(name='AndroidImageUrl'),
      androidInboxBody?: string(name='AndroidInboxBody'),
      androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory'),
      androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency'),
      androidMusic?: string(name='AndroidMusic'),
      androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority'),
      androidNotificationBarType?: int32(name='AndroidNotificationBarType'),
      androidNotificationChannel?: string(name='AndroidNotificationChannel'),
      androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel'),
      androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', minimum=0, maximum=999999999),
      androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
      androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
      androidNotifyType?: string(name='AndroidNotifyType'),
      androidOpenType?: string(name='AndroidOpenType'),
      androidOpenUrl?: string(name='AndroidOpenUrl'),
      androidPopupActivity?: string(name='AndroidPopupActivity'),
      androidPopupBody?: string(name='AndroidPopupBody'),
      androidPopupTitle?: string(name='AndroidPopupTitle'),
      androidRemind?: boolean(name='AndroidRemind'),
      androidRenderStyle?: string(name='AndroidRenderStyle'),
      androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
      androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
      androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
      androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl'),
      androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl'),
      body: string(name='Body'),
      deviceType: string(name='DeviceType'),
      expireTime?: string(name='ExpireTime'),
      jobKey?: string(name='JobKey'),
      pushTime?: string(name='PushTime'),
      pushType: string(name='PushType'),
      sendChannels?: string(name='SendChannels'),
      sendSpeed?: int32(name='SendSpeed'),
      storeOffline?: boolean(name='StoreOffline'),
      target: string(name='Target'),
      targetValue: string(name='TargetValue'),
      title?: string(name='Title'),
      iOSApnsEnv?: string(name='iOSApnsEnv'),
      iOSBadge?: int32(name='iOSBadge'),
      iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
      iOSExtParameters?: string(name='iOSExtParameters'),
      iOSMusic?: string(name='iOSMusic'),
      iOSMutableContent?: boolean(name='iOSMutableContent'),
      iOSNotificationCategory?: string(name='iOSNotificationCategory'),
      iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId'),
      iOSNotificationThreadId?: string(name='iOSNotificationThreadId'),
      iOSRemind?: boolean(name='iOSRemind'),
      iOSRemindBody?: string(name='iOSRemindBody'),
      iOSSilentNotification?: boolean(name='iOSSilentNotification'),
      iOSSubtitle?: string(name='iOSSubtitle'),
    }
  ](name='PushTask', position='Body'),
}

model MassPushResponseBody = {
  messageIds?: {
    messageId?: [ string ](name='MessageId')
  }(name='MessageIds'),
  requestId?: string(name='RequestId'),
}

model MassPushResponse = {
  headers: map[string]string(name='headers'),
  body: MassPushResponseBody(name='body'),
}

async function massPush(request: MassPushRequest): MassPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MassPush', 'POST', '/', 'json', true, 'form', request);
}

model PushRequest {
  androidActivity?: string(name='AndroidActivity', position='Query'),
  androidBigBody?: string(name='AndroidBigBody', position='Query'),
  androidBigPictureUrl?: string(name='AndroidBigPictureUrl', position='Query'),
  androidBigTitle?: string(name='AndroidBigTitle', position='Query'),
  androidExtParameters?: string(name='AndroidExtParameters', position='Query'),
  androidImageUrl?: string(name='AndroidImageUrl', position='Query'),
  androidInboxBody?: string(name='AndroidInboxBody', position='Query'),
  androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory', position='Query'),
  androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency', position='Query'),
  androidMusic?: string(name='AndroidMusic', position='Query'),
  androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority', minimum=-2, maximum=2, position='Query'),
  androidNotificationBarType?: int32(name='AndroidNotificationBarType', minimum=0, maximum=100, position='Query'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel', position='Query'),
  androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel', position='Query'),
  androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId', minimum=0, maximum=999999999, position='Query'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel', position='Query'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel', position='Query'),
  androidNotifyType?: string(name='AndroidNotifyType', position='Query'),
  androidOpenType?: string(name='AndroidOpenType', position='Query'),
  androidOpenUrl?: string(name='AndroidOpenUrl', position='Query'),
  androidPopupActivity?: string(name='AndroidPopupActivity', position='Query'),
  androidPopupBody?: string(name='AndroidPopupBody', position='Query'),
  androidPopupTitle?: string(name='AndroidPopupTitle', position='Query'),
  androidRemind?: boolean(name='AndroidRemind', position='Query'),
  androidRenderStyle?: int32(name='AndroidRenderStyle', position='Query'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity', position='Query'),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody', position='Query'),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle', position='Query'),
  androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl', position='Query'),
  androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl', position='Query'),
  appKey: long(name='AppKey', position='Query'),
  body: string(name='Body', position='Query'),
  deviceType: string(name='DeviceType', position='Query'),
  expireTime?: string(name='ExpireTime', position='Query'),
  jobKey?: string(name='JobKey', position='Query'),
  pushTime?: string(name='PushTime', position='Query'),
  pushType: string(name='PushType', position='Query'),
  sendChannels?: string(name='SendChannels', position='Query'),
  sendSpeed?: int32(name='SendSpeed', minimum=10000, position='Query'),
  smsDelaySecs?: int32(name='SmsDelaySecs', minimum=1, position='Query'),
  smsParams?: string(name='SmsParams', position='Query'),
  smsSendPolicy?: int32(name='SmsSendPolicy', minimum=0, maximum=1, position='Query'),
  smsSignName?: string(name='SmsSignName', position='Query'),
  smsTemplateName?: string(name='SmsTemplateName', position='Query'),
  storeOffline?: boolean(name='StoreOffline', position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
  title?: string(name='Title', position='Query'),
  iOSApnsEnv?: string(name='iOSApnsEnv', position='Query'),
  iOSBadge?: int32(name='iOSBadge', position='Query'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement', position='Query'),
  iOSExtParameters?: string(name='iOSExtParameters', position='Query'),
  iOSMusic?: string(name='iOSMusic', position='Query'),
  iOSMutableContent?: boolean(name='iOSMutableContent', position='Query'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory', position='Query'),
  iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId', position='Query'),
  iOSNotificationThreadId?: string(name='iOSNotificationThreadId', position='Query'),
  iOSRemind?: boolean(name='iOSRemind', position='Query'),
  iOSRemindBody?: string(name='iOSRemindBody', position='Query'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification', position='Query'),
  iOSSubtitle?: string(name='iOSSubtitle', position='Query'),
}

model PushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushResponse = {
  headers: map[string]string(name='headers'),
  body: PushResponseBody(name='body'),
}

async function push(request: PushRequest): PushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Push', 'POST', '/', 'json', false, 'json', request);
}

model PushMessageToAndroidRequest {
  appKey: long(name='AppKey', position='Query'),
  body: string(name='Body', position='Query'),
  jobKey?: string(name='JobKey', position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
  title: string(name='Title', position='Query'),
}

model PushMessageToAndroidResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushMessageToAndroidResponse = {
  headers: map[string]string(name='headers'),
  body: PushMessageToAndroidResponseBody(name='body'),
}

async function pushMessageToAndroid(request: PushMessageToAndroidRequest): PushMessageToAndroidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMessageToAndroid', 'POST', '/', 'json', false, 'json', request);
}

model PushMessageToiOSRequest {
  appKey: long(name='AppKey', position='Query'),
  body: string(name='Body', position='Query'),
  jobKey?: string(name='JobKey', position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
  title: string(name='Title', position='Query'),
}

model PushMessageToiOSResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushMessageToiOSResponse = {
  headers: map[string]string(name='headers'),
  body: PushMessageToiOSResponseBody(name='body'),
}

async function pushMessageToiOS(request: PushMessageToiOSRequest): PushMessageToiOSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMessageToiOS', 'POST', '/', 'json', false, 'json', request);
}

model PushNoticeToAndroidRequest {
  appKey: long(name='AppKey', position='Query'),
  body: string(name='Body', position='Query'),
  extParameters?: string(name='ExtParameters', position='Query'),
  jobKey?: string(name='JobKey', position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
  title: string(name='Title', position='Query'),
}

model PushNoticeToAndroidResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushNoticeToAndroidResponse = {
  headers: map[string]string(name='headers'),
  body: PushNoticeToAndroidResponseBody(name='body'),
}

async function pushNoticeToAndroid(request: PushNoticeToAndroidRequest): PushNoticeToAndroidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushNoticeToAndroid', 'POST', '/', 'json', false, 'json', request);
}

model PushNoticeToiOSRequest {
  apnsEnv: string(name='ApnsEnv', position='Query'),
  appKey: long(name='AppKey', position='Query'),
  body: string(name='Body', position='Query'),
  extParameters?: string(name='ExtParameters', position='Query'),
  jobKey?: string(name='JobKey', position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
  title?: string(name='Title', position='Query'),
}

model PushNoticeToiOSResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushNoticeToiOSResponse = {
  headers: map[string]string(name='headers'),
  body: PushNoticeToiOSResponseBody(name='body'),
}

async function pushNoticeToiOS(request: PushNoticeToiOSRequest): PushNoticeToiOSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushNoticeToiOS', 'POST', '/', 'json', false, 'json', request);
}

model QueryAliasesRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
}

model QueryAliasesResponseBody = {
  aliasInfos?: {
    aliasInfo?: [ 
    {
      aliasName?: string(name='AliasName'),
    }
  ](name='AliasInfo')
  }(name='AliasInfos'),
  requestId?: string(name='RequestId'),
}

model QueryAliasesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAliasesResponseBody(name='body'),
}

async function queryAliases(request: QueryAliasesRequest): QueryAliasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAliases', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceCountRequest {
  appKey: long(name='AppKey', minimum=0, maximum=999999999, position='Query'),
  target: string(name='Target', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
}

model QueryDeviceCountResponseBody = {
  deviceCount?: long(name='DeviceCount'),
  requestId?: string(name='RequestId'),
}

model QueryDeviceCountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceCountResponseBody(name='body'),
}

async function queryDeviceCount(request: QueryDeviceCountRequest): QueryDeviceCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceCount', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceInfoRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
}

model QueryDeviceInfoResponseBody = {
  deviceInfo?: {
    account?: string(name='Account'),
    alias?: string(name='Alias'),
    deviceId?: string(name='DeviceId'),
    deviceToken?: string(name='DeviceToken'),
    deviceType?: string(name='DeviceType'),
    lastOnlineTime?: string(name='LastOnlineTime'),
    online?: boolean(name='Online'),
    phoneNumber?: string(name='PhoneNumber'),
    pushEnabled?: boolean(name='PushEnabled'),
    tags?: string(name='Tags'),
  }(name='DeviceInfo'),
  requestId?: string(name='RequestId'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceStatRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceType: string(name='DeviceType', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  queryType: string(name='QueryType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model QueryDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count'),
      deviceType?: string(name='DeviceType'),
      time?: string(name='Time'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId'),
}

model QueryDeviceStatResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceStatResponseBody(name='body'),
}

async function queryDeviceStat(request: QueryDeviceStatRequest): QueryDeviceStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceStat', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesByAccountRequest {
  account: string(name='Account', position='Query'),
  appKey: long(name='AppKey', position='Query'),
}

model QueryDevicesByAccountResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId'),
}

model QueryDevicesByAccountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicesByAccountResponseBody(name='body'),
}

async function queryDevicesByAccount(request: QueryDevicesByAccountRequest): QueryDevicesByAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesByAccount', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesByAliasRequest {
  alias: string(name='Alias', position='Query'),
  appKey: long(name='AppKey', position='Query'),
}

model QueryDevicesByAliasResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId'),
}

model QueryDevicesByAliasResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicesByAliasResponseBody(name='body'),
}

async function queryDevicesByAlias(request: QueryDevicesByAliasRequest): QueryDevicesByAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesByAlias', 'POST', '/', 'json', false, 'json', request);
}

model QueryPushRecordsRequest {
  appKey: long(name='AppKey', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  page?: int32(name='Page', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  pushType?: string(name='PushType', position='Query'),
  source?: string(name='Source', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  target?: string(name='Target', position='Query'),
}

model QueryPushRecordsResponseBody = {
  nextToken?: string(name='NextToken'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pushInfos?: {
    pushInfo?: [ 
    {
      appKey?: long(name='AppKey'),
      body?: string(name='Body'),
      deviceType?: string(name='DeviceType'),
      messageId?: string(name='MessageId'),
      pushTime?: string(name='PushTime'),
      pushType?: string(name='PushType'),
      source?: string(name='Source'),
      status?: string(name='Status'),
      target?: string(name='Target'),
      title?: string(name='Title'),
    }
  ](name='PushInfo')
  }(name='PushInfos'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model QueryPushRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPushRecordsResponseBody(name='body'),
}

async function queryPushRecords(request: QueryPushRecordsRequest): QueryPushRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPushRecords', 'POST', '/', 'json', false, 'json', request);
}

model QueryPushStatByAppRequest {
  appKey: long(name='AppKey', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  granularity: string(name='Granularity', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model QueryPushStatByAppResponseBody = {
  appPushStats?: {
    appPushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount'),
      deletedCount?: long(name='DeletedCount'),
      openedCount?: long(name='OpenedCount'),
      receivedCount?: long(name='ReceivedCount'),
      sentCount?: long(name='SentCount'),
      smsFailedCount?: long(name='SmsFailedCount'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount'),
      smsSentCount?: long(name='SmsSentCount'),
      smsSkipCount?: long(name='SmsSkipCount'),
      time?: string(name='Time'),
    }
  ](name='AppPushStat')
  }(name='AppPushStats'),
  requestId?: string(name='RequestId'),
}

model QueryPushStatByAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPushStatByAppResponseBody(name='body'),
}

async function queryPushStatByApp(request: QueryPushStatByAppRequest): QueryPushStatByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPushStatByApp', 'POST', '/', 'json', false, 'json', request);
}

model QueryPushStatByMsgRequest {
  appKey: long(name='AppKey', position='Query'),
  messageId: long(name='MessageId', position='Query'),
}

model QueryPushStatByMsgResponseBody = {
  pushStats?: {
    pushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount'),
      deletedCount?: long(name='DeletedCount'),
      messageId?: string(name='MessageId'),
      openedCount?: long(name='OpenedCount'),
      receivedCount?: long(name='ReceivedCount'),
      sentCount?: long(name='SentCount'),
      smsFailedCount?: long(name='SmsFailedCount'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount'),
      smsSentCount?: long(name='SmsSentCount'),
      smsSkipCount?: long(name='SmsSkipCount'),
    }
  ](name='PushStat')
  }(name='PushStats'),
  requestId?: string(name='RequestId'),
}

model QueryPushStatByMsgResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPushStatByMsgResponseBody(name='body'),
}

async function queryPushStatByMsg(request: QueryPushStatByMsgRequest): QueryPushStatByMsgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPushStatByMsg', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagsRequest {
  appKey: long(name='AppKey', position='Query'),
  clientKey: string(name='ClientKey', position='Query'),
  keyType: string(name='KeyType', position='Query'),
}

model QueryTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model QueryTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTagsResponseBody(name='body'),
}

async function queryTags(request: QueryTagsRequest): QueryTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTags', 'POST', '/', 'json', false, 'json', request);
}

model QueryUniqueDeviceStatRequest {
  appKey: long(name='AppKey', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  granularity: string(name='Granularity', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model QueryUniqueDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count'),
      time?: string(name='Time'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId'),
}

model QueryUniqueDeviceStatResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUniqueDeviceStatResponseBody(name='body'),
}

async function queryUniqueDeviceStat(request: QueryUniqueDeviceStatRequest): QueryUniqueDeviceStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUniqueDeviceStat', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTagRequest {
  appKey: long(name='AppKey', position='Query'),
  tagName: string(name='TagName', position='Query'),
}

model RemoveTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagResponseBody(name='body'),
}

async function removeTag(request: RemoveTagRequest): RemoveTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTag', 'POST', '/', 'json', false, 'json', request);
}

model UnbindAliasRequest {
  aliasName?: string(name='AliasName', position='Query'),
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
  unbindAll?: boolean(name='UnbindAll', position='Query'),
}

model UnbindAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAliasResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindAliasResponseBody(name='body'),
}

async function unbindAlias(request: UnbindAliasRequest): UnbindAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindAlias', 'POST', '/', 'json', false, 'json', request);
}

model UnbindPhoneRequest {
  appKey: long(name='AppKey', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
}

model UnbindPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPhoneResponseBody(name='body'),
}

async function unbindPhone(request: UnbindPhoneRequest): UnbindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPhone', 'POST', '/', 'json', false, 'json', request);
}

model UnbindTagRequest {
  appKey: long(name='AppKey', position='Query'),
  clientKey: string(name='ClientKey', position='Query'),
  keyType: string(name='KeyType', position='Query'),
  tagName: string(name='TagName', position='Query'),
}

model UnbindTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindTagResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindTagResponseBody(name='body'),
}

async function unbindTag(request: UnbindTagRequest): UnbindTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindTag', 'POST', '/', 'json', false, 'json', request);
}

