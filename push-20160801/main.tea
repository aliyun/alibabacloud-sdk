/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'cloudpush.aliyuncs.com',
    ap-northeast-2-pop = 'cloudpush.aliyuncs.com',
    ap-south-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-2 = 'cloudpush.aliyuncs.com',
    ap-southeast-3 = 'cloudpush.aliyuncs.com',
    ap-southeast-5 = 'cloudpush.aliyuncs.com',
    cn-beijing = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudpush.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudpush.aliyuncs.com',
    cn-chengdu = 'cloudpush.aliyuncs.com',
    cn-edge-1 = 'cloudpush.aliyuncs.com',
    cn-fujian = 'cloudpush.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou = 'cloudpush.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-finance = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudpush.aliyuncs.com',
    cn-hongkong = 'cloudpush.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudpush.aliyuncs.com',
    cn-huhehaote = 'cloudpush.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudpush.aliyuncs.com',
    cn-qingdao = 'cloudpush.aliyuncs.com',
    cn-qingdao-nebula = 'cloudpush.aliyuncs.com',
    cn-shanghai = 'cloudpush.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shanghai-inner = 'cloudpush.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen = 'cloudpush.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-inner = 'cloudpush.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudpush.aliyuncs.com',
    cn-wuhan = 'cloudpush.aliyuncs.com',
    cn-yushanfang = 'cloudpush.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudpush.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudpush.aliyuncs.com',
    eu-central-1 = 'cloudpush.aliyuncs.com',
    eu-west-1 = 'cloudpush.aliyuncs.com',
    eu-west-1-oxs = 'cloudpush.aliyuncs.com',
    me-east-1 = 'cloudpush.aliyuncs.com',
    rus-west-1-pop = 'cloudpush.aliyuncs.com',
    us-east-1 = 'cloudpush.aliyuncs.com',
    us-west-1 = 'cloudpush.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('push', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model BindAliasRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
  aliasName?: string(name='AliasName'),
}

model BindAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindAliasResponse = {
  headers: map[string]string(name='headers'),
  body: BindAliasResponseBody(name='body'),
}

async function bindAliasWithOptions(request: BindAliasRequest, runtime: Util.RuntimeOptions): BindAliasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindAlias', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindAlias(request: BindAliasRequest): BindAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAliasWithOptions(request, runtime);
}

model BindPhoneRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
  phoneNumber?: string(name='PhoneNumber'),
}

model BindPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: BindPhoneResponseBody(name='body'),
}

async function bindPhoneWithOptions(request: BindPhoneRequest, runtime: Util.RuntimeOptions): BindPhoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindPhone', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindPhone(request: BindPhoneRequest): BindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPhoneWithOptions(request, runtime);
}

model BindTagRequest {
  appKey?: long(name='AppKey'),
  clientKey?: string(name='ClientKey'),
  keyType?: string(name='KeyType'),
  tagName?: string(name='TagName'),
}

model BindTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindTagResponse = {
  headers: map[string]string(name='headers'),
  body: BindTagResponseBody(name='body'),
}

async function bindTagWithOptions(request: BindTagRequest, runtime: Util.RuntimeOptions): BindTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindTag', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindTag(request: BindTagRequest): BindTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindTagWithOptions(request, runtime);
}

model CancelPushRequest {
  appKey?: long(name='AppKey'),
  messageId?: long(name='MessageId'),
}

model CancelPushResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPushResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPushResponseBody(name='body'),
}

async function cancelPushWithOptions(request: CancelPushRequest, runtime: Util.RuntimeOptions): CancelPushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelPush', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelPush(request: CancelPushRequest): CancelPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPushWithOptions(request, runtime);
}

model CheckCertificateRequest {
  appKey?: long(name='AppKey'),
}

model CheckCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  android?: boolean(name='Android'),
  IOS?: boolean(name='IOS'),
  productionCertInfo?: {
    status?: string(name='Status'),
    exipreTime?: long(name='ExipreTime'),
  }(name='ProductionCertInfo'),
  developmentCertInfo?: {
    status?: string(name='Status'),
    exipreTime?: long(name='ExipreTime'),
  }(name='DevelopmentCertInfo'),
}

model CheckCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCertificateResponseBody(name='body'),
}

async function checkCertificateWithOptions(request: CheckCertificateRequest, runtime: Util.RuntimeOptions): CheckCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckCertificate', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkCertificate(request: CheckCertificateRequest): CheckCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCertificateWithOptions(request, runtime);
}

model CheckDeviceRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model CheckDeviceResponseBody = {
  available?: boolean(name='Available'),
  requestId?: string(name='RequestId'),
}

model CheckDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDeviceResponseBody(name='body'),
}

async function checkDeviceWithOptions(request: CheckDeviceRequest, runtime: Util.RuntimeOptions): CheckDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDevice', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDeviceWithOptions(request, runtime);
}

model CheckDevicesRequest {
  appKey?: long(name='AppKey'),
  deviceIds?: string(name='DeviceIds'),
}

model CheckDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  deviceCheckInfos?: {
    deviceCheckInfo?: [ 
    {
      deviceId?: string(name='DeviceId'),
      available?: boolean(name='Available'),
    }
  ](name='DeviceCheckInfo')
  }(name='DeviceCheckInfos'),
}

model CheckDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDevicesResponseBody(name='body'),
}

async function checkDevicesWithOptions(request: CheckDevicesRequest, runtime: Util.RuntimeOptions): CheckDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDevices', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDevices(request: CheckDevicesRequest): CheckDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDevicesWithOptions(request, runtime);
}

model CompleteContinuouslyPushRequest {
  appKey?: long(name='AppKey'),
  messageId?: string(name='MessageId'),
}

model CompleteContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model CompleteContinuouslyPushResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteContinuouslyPushResponseBody(name='body'),
}

async function completeContinuouslyPushWithOptions(request: CompleteContinuouslyPushRequest, runtime: Util.RuntimeOptions): CompleteContinuouslyPushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteContinuouslyPush', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeContinuouslyPush(request: CompleteContinuouslyPushRequest): CompleteContinuouslyPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeContinuouslyPushWithOptions(request, runtime);
}

model ContinuouslyPushRequest {
  appKey?: long(name='AppKey'),
  messageId?: string(name='MessageId'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
}

model ContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model ContinuouslyPushResponse = {
  headers: map[string]string(name='headers'),
  body: ContinuouslyPushResponseBody(name='body'),
}

async function continuouslyPushWithOptions(request: ContinuouslyPushRequest, runtime: Util.RuntimeOptions): ContinuouslyPushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ContinuouslyPush', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function continuouslyPush(request: ContinuouslyPushRequest): ContinuouslyPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return continuouslyPushWithOptions(request, runtime);
}

model ListSummaryAppsResponseBody = {
  requestId?: string(name='RequestId'),
  summaryAppInfos?: {
    summaryAppInfo?: [ 
    {
      appName?: string(name='AppName'),
      appKey?: long(name='AppKey'),
    }
  ](name='SummaryAppInfo')
  }(name='SummaryAppInfos'),
}

model ListSummaryAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSummaryAppsResponseBody(name='body'),
}

async function listSummaryAppsWithOptions(runtime: Util.RuntimeOptions): ListSummaryAppsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListSummaryApps', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSummaryApps(): ListSummaryAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSummaryAppsWithOptions(runtime);
}

model ListTagsRequest {
  appKey?: long(name='AppKey'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagsResponseBody(name='body'),
}

async function listTagsWithOptions(request: ListTagsRequest, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTags', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model MassPushRequest {
  appKey?: long(name='AppKey'),
  pushTask?: [ 
    {
      jobKey?: string(name='JobKey'),
      iOSSilentNotification?: boolean(name='iOSSilentNotification'),
      iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId'),
      androidRenderStyle?: string(name='AndroidRenderStyle'),
      storeOffline?: boolean(name='StoreOffline'),
      iOSSubtitle?: string(name='iOSSubtitle'),
      iOSNotificationCategory?: string(name='iOSNotificationCategory'),
      androidNotificationChannel?: string(name='AndroidNotificationChannel'),
      androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel'),
      iOSApnsEnv?: string(name='iOSApnsEnv'),
      iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
      androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
      androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
      androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
      androidPopupTitle?: string(name='AndroidPopupTitle'),
      iOSRemindBody?: string(name='iOSRemindBody'),
      androidActivity?: string(name='AndroidActivity'),
      androidNotifyType?: string(name='AndroidNotifyType'),
      androidBigBody?: string(name='AndroidBigBody'),
      iOSMutableContent?: boolean(name='iOSMutableContent'),
      target?: string(name='Target'),
      androidOpenUrl?: string(name='AndroidOpenUrl'),
      androidBigTitle?: string(name='AndroidBigTitle'),
      androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId'),
      expireTime?: string(name='ExpireTime'),
      androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
      deviceType?: string(name='DeviceType'),
      androidOpenType?: string(name='AndroidOpenType'),
      androidPopupActivity?: string(name='AndroidPopupActivity'),
      androidRemind?: boolean(name='AndroidRemind'),
      androidPopupBody?: string(name='AndroidPopupBody'),
      androidExtParameters?: string(name='AndroidExtParameters'),
      iOSExtParameters?: string(name='iOSExtParameters'),
      androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
      body?: string(name='Body'),
      androidNotificationBarType?: int32(name='AndroidNotificationBarType'),
      androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority'),
      androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl'),
      targetValue?: string(name='TargetValue'),
      iOSMusic?: string(name='iOSMusic'),
      iOSRemind?: boolean(name='iOSRemind'),
      pushType?: string(name='PushType'),
      sendSpeed?: int32(name='SendSpeed'),
      iOSBadge?: int32(name='iOSBadge'),
      title?: string(name='Title'),
      pushTime?: string(name='PushTime'),
      androidMusic?: string(name='AndroidMusic'),
    }
  ](name='PushTask'),
}

model MassPushResponseBody = {
  requestId?: string(name='RequestId'),
  messageIds?: {
    messageId?: [ string ](name='MessageId')
  }(name='MessageIds'),
}

model MassPushResponse = {
  headers: map[string]string(name='headers'),
  body: MassPushResponseBody(name='body'),
}

async function massPushWithOptions(request: MassPushRequest, runtime: Util.RuntimeOptions): MassPushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MassPush', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function massPush(request: MassPushRequest): MassPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return massPushWithOptions(request, runtime);
}

model PushRequest {
  appKey?: long(name='AppKey'),
  pushType?: string(name='PushType'),
  deviceType?: string(name='DeviceType'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
  sendSpeed?: int32(name='SendSpeed'),
  storeOffline?: boolean(name='StoreOffline'),
  pushTime?: string(name='PushTime'),
  expireTime?: string(name='ExpireTime'),
  iOSApnsEnv?: string(name='iOSApnsEnv'),
  iOSRemind?: boolean(name='iOSRemind'),
  iOSRemindBody?: string(name='iOSRemindBody'),
  iOSBadge?: int32(name='iOSBadge'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification'),
  iOSMusic?: string(name='iOSMusic'),
  iOSSubtitle?: string(name='iOSSubtitle'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory'),
  iOSMutableContent?: boolean(name='iOSMutableContent'),
  iOSExtParameters?: string(name='iOSExtParameters'),
  androidNotifyType?: string(name='AndroidNotifyType'),
  androidOpenType?: string(name='AndroidOpenType'),
  androidActivity?: string(name='AndroidActivity'),
  androidMusic?: string(name='AndroidMusic'),
  androidOpenUrl?: string(name='AndroidOpenUrl'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
  androidPopupActivity?: string(name='AndroidPopupActivity'),
  androidPopupTitle?: string(name='AndroidPopupTitle'),
  androidPopupBody?: string(name='AndroidPopupBody'),
  androidNotificationBarType?: int32(name='AndroidNotificationBarType'),
  androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority'),
  androidExtParameters?: string(name='AndroidExtParameters'),
  androidRemind?: boolean(name='AndroidRemind'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
  smsTemplateName?: string(name='SmsTemplateName'),
  smsSignName?: string(name='SmsSignName'),
  smsParams?: string(name='SmsParams'),
  smsDelaySecs?: int32(name='SmsDelaySecs'),
  smsSendPolicy?: int32(name='SmsSendPolicy'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
  androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel'),
  androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId'),
  iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId'),
  androidRenderStyle?: int32(name='AndroidRenderStyle'),
  androidBigTitle?: string(name='AndroidBigTitle'),
  androidBigBody?: string(name='AndroidBigBody'),
  androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl'),
}

model PushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushResponse = {
  headers: map[string]string(name='headers'),
  body: PushResponseBody(name='body'),
}

async function pushWithOptions(request: PushRequest, runtime: Util.RuntimeOptions): PushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Push', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function push(request: PushRequest): PushResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushWithOptions(request, runtime);
}

model PushMessageToAndroidRequest {
  appKey?: long(name='AppKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
}

model PushMessageToAndroidResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushMessageToAndroidResponse = {
  headers: map[string]string(name='headers'),
  body: PushMessageToAndroidResponseBody(name='body'),
}

async function pushMessageToAndroidWithOptions(request: PushMessageToAndroidRequest, runtime: Util.RuntimeOptions): PushMessageToAndroidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushMessageToAndroid', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushMessageToAndroid(request: PushMessageToAndroidRequest): PushMessageToAndroidResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageToAndroidWithOptions(request, runtime);
}

model PushMessageToiOSRequest {
  appKey?: long(name='AppKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
}

model PushMessageToiOSResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushMessageToiOSResponse = {
  headers: map[string]string(name='headers'),
  body: PushMessageToiOSResponseBody(name='body'),
}

async function pushMessageToiOSWithOptions(request: PushMessageToiOSRequest, runtime: Util.RuntimeOptions): PushMessageToiOSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushMessageToiOS', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushMessageToiOS(request: PushMessageToiOSRequest): PushMessageToiOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageToiOSWithOptions(request, runtime);
}

model PushNoticeToAndroidRequest {
  appKey?: long(name='AppKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
  extParameters?: string(name='ExtParameters'),
}

model PushNoticeToAndroidResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushNoticeToAndroidResponse = {
  headers: map[string]string(name='headers'),
  body: PushNoticeToAndroidResponseBody(name='body'),
}

async function pushNoticeToAndroidWithOptions(request: PushNoticeToAndroidRequest, runtime: Util.RuntimeOptions): PushNoticeToAndroidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushNoticeToAndroid', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushNoticeToAndroid(request: PushNoticeToAndroidRequest): PushNoticeToAndroidResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushNoticeToAndroidWithOptions(request, runtime);
}

model PushNoticeToiOSRequest {
  appKey?: long(name='AppKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  apnsEnv?: string(name='ApnsEnv'),
  title?: string(name='Title'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
  extParameters?: string(name='ExtParameters'),
}

model PushNoticeToiOSResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushNoticeToiOSResponse = {
  headers: map[string]string(name='headers'),
  body: PushNoticeToiOSResponseBody(name='body'),
}

async function pushNoticeToiOSWithOptions(request: PushNoticeToiOSRequest, runtime: Util.RuntimeOptions): PushNoticeToiOSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushNoticeToiOS', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushNoticeToiOS(request: PushNoticeToiOSRequest): PushNoticeToiOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushNoticeToiOSWithOptions(request, runtime);
}

model QueryAliasesRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model QueryAliasesResponseBody = {
  requestId?: string(name='RequestId'),
  aliasInfos?: {
    aliasInfo?: [ 
    {
      aliasName?: string(name='AliasName'),
    }
  ](name='AliasInfo')
  }(name='AliasInfos'),
}

model QueryAliasesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAliasesResponseBody(name='body'),
}

async function queryAliasesWithOptions(request: QueryAliasesRequest, runtime: Util.RuntimeOptions): QueryAliasesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAliases', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAliases(request: QueryAliasesRequest): QueryAliasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAliasesWithOptions(request, runtime);
}

model QueryDeviceCountRequest {
  appKey?: long(name='AppKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
}

model QueryDeviceCountResponseBody = {
  deviceCount?: long(name='DeviceCount'),
  requestId?: string(name='RequestId'),
}

model QueryDeviceCountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceCountResponseBody(name='body'),
}

async function queryDeviceCountWithOptions(request: QueryDeviceCountRequest, runtime: Util.RuntimeOptions): QueryDeviceCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceCount', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceCount(request: QueryDeviceCountRequest): QueryDeviceCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceCountWithOptions(request, runtime);
}

model QueryDeviceInfoRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model QueryDeviceInfoResponseBody = {
  requestId?: string(name='RequestId'),
  deviceInfo?: {
    account?: string(name='Account'),
    lastOnlineTime?: string(name='LastOnlineTime'),
    phoneNumber?: string(name='PhoneNumber'),
    pushEnabled?: boolean(name='PushEnabled'),
    deviceType?: string(name='DeviceType'),
    deviceId?: string(name='DeviceId'),
    online?: boolean(name='Online'),
    tags?: string(name='Tags'),
    deviceToken?: string(name='DeviceToken'),
    alias?: string(name='Alias'),
  }(name='DeviceInfo'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

async function queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceInfo', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceInfoWithOptions(request, runtime);
}

model QueryDevicesByAccountRequest {
  appKey?: long(name='AppKey'),
  account?: string(name='Account'),
}

model QueryDevicesByAccountResponseBody = {
  requestId?: string(name='RequestId'),
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
}

model QueryDevicesByAccountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicesByAccountResponseBody(name='body'),
}

async function queryDevicesByAccountWithOptions(request: QueryDevicesByAccountRequest, runtime: Util.RuntimeOptions): QueryDevicesByAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDevicesByAccount', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDevicesByAccount(request: QueryDevicesByAccountRequest): QueryDevicesByAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesByAccountWithOptions(request, runtime);
}

model QueryDevicesByAliasRequest {
  appKey?: long(name='AppKey'),
  alias?: string(name='Alias'),
}

model QueryDevicesByAliasResponseBody = {
  requestId?: string(name='RequestId'),
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
}

model QueryDevicesByAliasResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicesByAliasResponseBody(name='body'),
}

async function queryDevicesByAliasWithOptions(request: QueryDevicesByAliasRequest, runtime: Util.RuntimeOptions): QueryDevicesByAliasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDevicesByAlias', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDevicesByAlias(request: QueryDevicesByAliasRequest): QueryDevicesByAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesByAliasWithOptions(request, runtime);
}

model QueryDeviceStatRequest {
  appKey?: long(name='AppKey'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  deviceType?: string(name='DeviceType'),
  queryType?: string(name='QueryType'),
}

model QueryDeviceStatResponseBody = {
  requestId?: string(name='RequestId'),
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      time?: string(name='Time'),
      deviceType?: string(name='DeviceType'),
      count?: long(name='Count'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
}

model QueryDeviceStatResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceStatResponseBody(name='body'),
}

async function queryDeviceStatWithOptions(request: QueryDeviceStatRequest, runtime: Util.RuntimeOptions): QueryDeviceStatResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceStat', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceStat(request: QueryDeviceStatRequest): QueryDeviceStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceStatWithOptions(request, runtime);
}

model QueryPushRecordsRequest {
  appKey?: long(name='AppKey'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pushType?: string(name='PushType'),
  target?: string(name='Target'),
  source?: string(name='Source'),
  keyword?: string(name='Keyword'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  page?: int32(name='Page'),
}

model QueryPushRecordsResponseBody = {
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  page?: int32(name='Page'),
  pushInfos?: {
    pushInfo?: [ 
    {
      status?: string(name='Status'),
      messageId?: string(name='MessageId'),
      appKey?: long(name='AppKey'),
      deviceType?: string(name='DeviceType'),
      pushType?: string(name='PushType'),
      body?: string(name='Body'),
      title?: string(name='Title'),
      source?: string(name='Source'),
      pushTime?: string(name='PushTime'),
      target?: string(name='Target'),
    }
  ](name='PushInfo')
  }(name='PushInfos'),
}

model QueryPushRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPushRecordsResponseBody(name='body'),
}

async function queryPushRecordsWithOptions(request: QueryPushRecordsRequest, runtime: Util.RuntimeOptions): QueryPushRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPushRecords', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPushRecords(request: QueryPushRecordsRequest): QueryPushRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushRecordsWithOptions(request, runtime);
}

model QueryPushStatByAppRequest {
  appKey?: long(name='AppKey'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  granularity?: string(name='Granularity'),
}

model QueryPushStatByAppResponseBody = {
  requestId?: string(name='RequestId'),
  appPushStats?: {
    appPushStat?: [ 
    {
      time?: string(name='Time'),
      deletedCount?: long(name='DeletedCount'),
      openedCount?: long(name='OpenedCount'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount'),
      smsSkipCount?: long(name='SmsSkipCount'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount'),
      smsFailedCount?: long(name='SmsFailedCount'),
      receivedCount?: long(name='ReceivedCount'),
      sentCount?: long(name='SentCount'),
      smsSentCount?: long(name='SmsSentCount'),
      acceptCount?: long(name='AcceptCount'),
    }
  ](name='AppPushStat')
  }(name='AppPushStats'),
}

model QueryPushStatByAppResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPushStatByAppResponseBody(name='body'),
}

async function queryPushStatByAppWithOptions(request: QueryPushStatByAppRequest, runtime: Util.RuntimeOptions): QueryPushStatByAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPushStatByApp', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPushStatByApp(request: QueryPushStatByAppRequest): QueryPushStatByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushStatByAppWithOptions(request, runtime);
}

model QueryPushStatByMsgRequest {
  appKey?: long(name='AppKey'),
  messageId?: long(name='MessageId'),
}

model QueryPushStatByMsgResponseBody = {
  requestId?: string(name='RequestId'),
  pushStats?: {
    pushStat?: [ 
    {
      messageId?: string(name='MessageId'),
      deletedCount?: long(name='DeletedCount'),
      openedCount?: long(name='OpenedCount'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount'),
      smsSkipCount?: long(name='SmsSkipCount'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount'),
      smsFailedCount?: long(name='SmsFailedCount'),
      receivedCount?: long(name='ReceivedCount'),
      sentCount?: long(name='SentCount'),
      smsSentCount?: long(name='SmsSentCount'),
      acceptCount?: long(name='AcceptCount'),
    }
  ](name='PushStat')
  }(name='PushStats'),
}

model QueryPushStatByMsgResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPushStatByMsgResponseBody(name='body'),
}

async function queryPushStatByMsgWithOptions(request: QueryPushStatByMsgRequest, runtime: Util.RuntimeOptions): QueryPushStatByMsgResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPushStatByMsg', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPushStatByMsg(request: QueryPushStatByMsgRequest): QueryPushStatByMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushStatByMsgWithOptions(request, runtime);
}

model QueryTagsRequest {
  appKey?: long(name='AppKey'),
  clientKey?: string(name='ClientKey'),
  keyType?: string(name='KeyType'),
}

model QueryTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model QueryTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTagsResponseBody(name='body'),
}

async function queryTagsWithOptions(request: QueryTagsRequest, runtime: Util.RuntimeOptions): QueryTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTags', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTags(request: QueryTagsRequest): QueryTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagsWithOptions(request, runtime);
}

model QueryUniqueDeviceStatRequest {
  appKey?: long(name='AppKey'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  granularity?: string(name='Granularity'),
}

model QueryUniqueDeviceStatResponseBody = {
  requestId?: string(name='RequestId'),
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      time?: string(name='Time'),
      count?: long(name='Count'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
}

model QueryUniqueDeviceStatResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUniqueDeviceStatResponseBody(name='body'),
}

async function queryUniqueDeviceStatWithOptions(request: QueryUniqueDeviceStatRequest, runtime: Util.RuntimeOptions): QueryUniqueDeviceStatResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUniqueDeviceStat', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUniqueDeviceStat(request: QueryUniqueDeviceStatRequest): QueryUniqueDeviceStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUniqueDeviceStatWithOptions(request, runtime);
}

model RemoveTagRequest {
  appKey?: long(name='AppKey'),
  tagName?: string(name='TagName'),
}

model RemoveTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagResponseBody(name='body'),
}

async function removeTagWithOptions(request: RemoveTagRequest, runtime: Util.RuntimeOptions): RemoveTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveTag', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeTag(request: RemoveTagRequest): RemoveTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagWithOptions(request, runtime);
}

model UnbindAliasRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
  aliasName?: string(name='AliasName'),
  unbindAll?: boolean(name='UnbindAll'),
}

model UnbindAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAliasResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindAliasResponseBody(name='body'),
}

async function unbindAliasWithOptions(request: UnbindAliasRequest, runtime: Util.RuntimeOptions): UnbindAliasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindAlias', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindAlias(request: UnbindAliasRequest): UnbindAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAliasWithOptions(request, runtime);
}

model UnbindPhoneRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model UnbindPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPhoneResponseBody(name='body'),
}

async function unbindPhoneWithOptions(request: UnbindPhoneRequest, runtime: Util.RuntimeOptions): UnbindPhoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindPhone', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindPhone(request: UnbindPhoneRequest): UnbindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPhoneWithOptions(request, runtime);
}

model UnbindTagRequest {
  appKey?: long(name='AppKey'),
  clientKey?: string(name='ClientKey'),
  keyType?: string(name='KeyType'),
  tagName?: string(name='TagName'),
}

model UnbindTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindTagResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindTagResponseBody(name='body'),
}

async function unbindTagWithOptions(request: UnbindTagRequest, runtime: Util.RuntimeOptions): UnbindTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindTag', '2016-08-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindTag(request: UnbindTagRequest): UnbindTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindTagWithOptions(request, runtime);
}

