/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'cloudpush.aliyuncs.com',
    ap-northeast-2-pop = 'cloudpush.aliyuncs.com',
    ap-south-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-2 = 'cloudpush.aliyuncs.com',
    ap-southeast-3 = 'cloudpush.aliyuncs.com',
    ap-southeast-5 = 'cloudpush.aliyuncs.com',
    cn-beijing = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudpush.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudpush.aliyuncs.com',
    cn-chengdu = 'cloudpush.aliyuncs.com',
    cn-edge-1 = 'cloudpush.aliyuncs.com',
    cn-fujian = 'cloudpush.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou = 'cloudpush.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-finance = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudpush.aliyuncs.com',
    cn-hongkong = 'cloudpush.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudpush.aliyuncs.com',
    cn-huhehaote = 'cloudpush.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudpush.aliyuncs.com',
    cn-qingdao = 'cloudpush.aliyuncs.com',
    cn-qingdao-nebula = 'cloudpush.aliyuncs.com',
    cn-shanghai = 'cloudpush.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shanghai-inner = 'cloudpush.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen = 'cloudpush.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-inner = 'cloudpush.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudpush.aliyuncs.com',
    cn-wuhan = 'cloudpush.aliyuncs.com',
    cn-yushanfang = 'cloudpush.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudpush.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudpush.aliyuncs.com',
    eu-central-1 = 'cloudpush.aliyuncs.com',
    eu-west-1 = 'cloudpush.aliyuncs.com',
    eu-west-1-oxs = 'cloudpush.aliyuncs.com',
    me-east-1 = 'cloudpush.aliyuncs.com',
    rus-west-1-pop = 'cloudpush.aliyuncs.com',
    us-east-1 = 'cloudpush.aliyuncs.com',
    us-west-1 = 'cloudpush.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('push', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BindAliasRequest {
  aliasName?: string(name='AliasName'),
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model BindAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAliasResponseBody(name='body'),
}

async function bindAliasWithOptions(request: BindAliasRequest, runtime: Util.RuntimeOptions): BindAliasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindAlias',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAlias(request: BindAliasRequest): BindAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAliasWithOptions(request, runtime);
}

model BindPhoneRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
  phoneNumber?: string(name='PhoneNumber'),
}

model BindPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindPhoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindPhoneResponseBody(name='body'),
}

async function bindPhoneWithOptions(request: BindPhoneRequest, runtime: Util.RuntimeOptions): BindPhoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindPhone',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindPhone(request: BindPhoneRequest): BindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPhoneWithOptions(request, runtime);
}

model BindTagRequest {
  appKey?: long(name='AppKey'),
  clientKey?: string(name='ClientKey'),
  keyType?: string(name='KeyType'),
  tagName?: string(name='TagName'),
}

model BindTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindTagResponseBody(name='body'),
}

async function bindTagWithOptions(request: BindTagRequest, runtime: Util.RuntimeOptions): BindTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.clientKey)) {
    query['ClientKey'] = request.clientKey;
  }
  if (!Util.isUnset(request.keyType)) {
    query['KeyType'] = request.keyType;
  }
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindTag',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindTag(request: BindTagRequest): BindTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindTagWithOptions(request, runtime);
}

model CancelPushRequest {
  appKey?: long(name='AppKey'),
  messageId?: long(name='MessageId'),
}

model CancelPushResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelPushResponseBody(name='body'),
}

async function cancelPushWithOptions(request: CancelPushRequest, runtime: Util.RuntimeOptions): CancelPushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelPush(request: CancelPushRequest): CancelPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPushWithOptions(request, runtime);
}

model CheckCertificateRequest {
  appKey?: long(name='AppKey'),
}

model CheckCertificateResponseBody = {
  android?: boolean(name='Android'),
  developmentCertInfo?: {
    exipreTime?: long(name='ExipreTime'),
    status?: string(name='Status'),
  }(name='DevelopmentCertInfo'),
  IOS?: boolean(name='IOS'),
  productionCertInfo?: {
    exipreTime?: long(name='ExipreTime'),
    status?: string(name='Status'),
  }(name='ProductionCertInfo'),
  requestId?: string(name='RequestId'),
}

model CheckCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckCertificateResponseBody(name='body'),
}

async function checkCertificateWithOptions(request: CheckCertificateRequest, runtime: Util.RuntimeOptions): CheckCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCertificate',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCertificate(request: CheckCertificateRequest): CheckCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCertificateWithOptions(request, runtime);
}

model CheckDeviceRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model CheckDeviceResponseBody = {
  available?: boolean(name='Available'),
  requestId?: string(name='RequestId'),
}

model CheckDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckDeviceResponseBody(name='body'),
}

async function checkDeviceWithOptions(request: CheckDeviceRequest, runtime: Util.RuntimeOptions): CheckDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckDevice',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDeviceWithOptions(request, runtime);
}

model CheckDevicesRequest {
  appKey?: long(name='AppKey'),
  deviceIds?: string(name='DeviceIds'),
}

model CheckDevicesResponseBody = {
  deviceCheckInfos?: {
    deviceCheckInfo?: [ 
    {
      available?: boolean(name='Available'),
      deviceId?: string(name='DeviceId'),
    }
  ](name='DeviceCheckInfo')
  }(name='DeviceCheckInfos'),
  requestId?: string(name='RequestId'),
}

model CheckDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckDevicesResponseBody(name='body'),
}

async function checkDevicesWithOptions(request: CheckDevicesRequest, runtime: Util.RuntimeOptions): CheckDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceIds)) {
    query['DeviceIds'] = request.deviceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckDevices',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkDevices(request: CheckDevicesRequest): CheckDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDevicesWithOptions(request, runtime);
}

model CompleteContinuouslyPushRequest {
  appKey?: long(name='AppKey'),
  messageId?: string(name='MessageId'),
}

model CompleteContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model CompleteContinuouslyPushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompleteContinuouslyPushResponseBody(name='body'),
}

async function completeContinuouslyPushWithOptions(request: CompleteContinuouslyPushRequest, runtime: Util.RuntimeOptions): CompleteContinuouslyPushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompleteContinuouslyPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function completeContinuouslyPush(request: CompleteContinuouslyPushRequest): CompleteContinuouslyPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeContinuouslyPushWithOptions(request, runtime);
}

model ContinuouslyPushRequest {
  appKey?: long(name='AppKey'),
  messageId?: string(name='MessageId'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
}

model ContinuouslyPushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model ContinuouslyPushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ContinuouslyPushResponseBody(name='body'),
}

async function continuouslyPushWithOptions(request: ContinuouslyPushRequest, runtime: Util.RuntimeOptions): ContinuouslyPushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ContinuouslyPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function continuouslyPush(request: ContinuouslyPushRequest): ContinuouslyPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return continuouslyPushWithOptions(request, runtime);
}

model ListSummaryAppsResponseBody = {
  requestId?: string(name='RequestId'),
  summaryAppInfos?: {
    summaryAppInfo?: [ 
    {
      appKey?: long(name='AppKey'),
      appName?: string(name='AppName'),
    }
  ](name='SummaryAppInfo')
  }(name='SummaryAppInfos'),
}

model ListSummaryAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSummaryAppsResponseBody(name='body'),
}

async function listSummaryAppsWithOptions(runtime: Util.RuntimeOptions): ListSummaryAppsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListSummaryApps',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSummaryApps(): ListSummaryAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSummaryAppsWithOptions(runtime);
}

model ListTagsRequest {
  appKey?: long(name='AppKey'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsResponseBody(name='body'),
}

async function listTagsWithOptions(request: ListTagsRequest, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTags',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model MassPushRequest {
  appKey?: long(name='AppKey'),
  pushTask?: [ 
    {
      androidActivity?: string(name='AndroidActivity'),
      androidBigBody?: string(name='AndroidBigBody'),
      androidBigPictureUrl?: string(name='AndroidBigPictureUrl'),
      androidBigTitle?: string(name='AndroidBigTitle'),
      androidExtParameters?: string(name='AndroidExtParameters'),
      androidImageUrl?: string(name='AndroidImageUrl'),
      androidInboxBody?: string(name='AndroidInboxBody'),
      androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory'),
      androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency'),
      androidMusic?: string(name='AndroidMusic'),
      androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority'),
      androidNotificationBarType?: int32(name='AndroidNotificationBarType'),
      androidNotificationChannel?: string(name='AndroidNotificationChannel'),
      androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel'),
      androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId'),
      androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
      androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
      androidNotifyType?: string(name='AndroidNotifyType'),
      androidOpenType?: string(name='AndroidOpenType'),
      androidOpenUrl?: string(name='AndroidOpenUrl'),
      androidPopupActivity?: string(name='AndroidPopupActivity'),
      androidPopupBody?: string(name='AndroidPopupBody'),
      androidPopupTitle?: string(name='AndroidPopupTitle'),
      androidRemind?: boolean(name='AndroidRemind'),
      androidRenderStyle?: string(name='AndroidRenderStyle'),
      androidVivoPushMode?: int32(name='AndroidVivoPushMode'),
      androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
      androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
      androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
      androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl'),
      androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl'),
      body?: string(name='Body'),
      deviceType?: string(name='DeviceType'),
      expireTime?: string(name='ExpireTime'),
      jobKey?: string(name='JobKey'),
      pushTime?: string(name='PushTime'),
      pushType?: string(name='PushType'),
      sendChannels?: string(name='SendChannels'),
      sendSpeed?: int32(name='SendSpeed'),
      storeOffline?: boolean(name='StoreOffline'),
      target?: string(name='Target'),
      targetValue?: string(name='TargetValue'),
      title?: string(name='Title'),
      trim?: boolean(name='Trim'),
      iOSApnsEnv?: string(name='iOSApnsEnv'),
      iOSBadge?: int32(name='iOSBadge'),
      iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
      iOSExtParameters?: string(name='iOSExtParameters'),
      iOSInterruptionLevel?: string(name='iOSInterruptionLevel'),
      iOSMusic?: string(name='iOSMusic'),
      iOSMutableContent?: boolean(name='iOSMutableContent'),
      iOSNotificationCategory?: string(name='iOSNotificationCategory'),
      iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId'),
      iOSNotificationThreadId?: string(name='iOSNotificationThreadId'),
      iOSRelevanceScore?: double(name='iOSRelevanceScore'),
      iOSRemind?: boolean(name='iOSRemind'),
      iOSRemindBody?: string(name='iOSRemindBody'),
      iOSSilentNotification?: boolean(name='iOSSilentNotification'),
      iOSSubtitle?: string(name='iOSSubtitle'),
    }
  ](name='PushTask'),
}

model MassPushResponseBody = {
  messageIds?: {
    messageId?: [ string ](name='MessageId')
  }(name='MessageIds'),
  requestId?: string(name='RequestId'),
}

model MassPushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MassPushResponseBody(name='body'),
}

async function massPushWithOptions(request: MassPushRequest, runtime: Util.RuntimeOptions): MassPushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pushTask)) {
    body['PushTask'] = request.pushTask;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MassPush',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function massPush(request: MassPushRequest): MassPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return massPushWithOptions(request, runtime);
}

model PushRequest {
  androidActivity?: string(name='AndroidActivity'),
  androidBigBody?: string(name='AndroidBigBody'),
  androidBigPictureUrl?: string(name='AndroidBigPictureUrl'),
  androidBigTitle?: string(name='AndroidBigTitle'),
  androidExtParameters?: string(name='AndroidExtParameters'),
  androidImageUrl?: string(name='AndroidImageUrl'),
  androidInboxBody?: string(name='AndroidInboxBody'),
  androidMessageHuaweiCategory?: string(name='AndroidMessageHuaweiCategory'),
  androidMessageHuaweiUrgency?: string(name='AndroidMessageHuaweiUrgency'),
  androidMusic?: string(name='AndroidMusic'),
  androidNotificationBarPriority?: int32(name='AndroidNotificationBarPriority'),
  androidNotificationBarType?: int32(name='AndroidNotificationBarType'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel'),
  androidNotificationHuaweiChannel?: string(name='AndroidNotificationHuaweiChannel'),
  androidNotificationNotifyId?: int32(name='AndroidNotificationNotifyId'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
  androidNotifyType?: string(name='AndroidNotifyType'),
  androidOpenType?: string(name='AndroidOpenType'),
  androidOpenUrl?: string(name='AndroidOpenUrl'),
  androidPopupActivity?: string(name='AndroidPopupActivity'),
  androidPopupBody?: string(name='AndroidPopupBody'),
  androidPopupTitle?: string(name='AndroidPopupTitle'),
  androidRemind?: boolean(name='AndroidRemind'),
  androidRenderStyle?: int32(name='AndroidRenderStyle'),
  androidVivoPushMode?: int32(name='AndroidVivoPushMode'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
  androidXiaomiBigPictureUrl?: string(name='AndroidXiaomiBigPictureUrl'),
  androidXiaomiImageUrl?: string(name='AndroidXiaomiImageUrl'),
  appKey?: long(name='AppKey'),
  body?: string(name='Body'),
  deviceType?: string(name='DeviceType'),
  expireTime?: string(name='ExpireTime'),
  jobKey?: string(name='JobKey'),
  pushTime?: string(name='PushTime'),
  pushType?: string(name='PushType'),
  sendChannels?: string(name='SendChannels'),
  sendSpeed?: int32(name='SendSpeed'),
  smsDelaySecs?: int32(name='SmsDelaySecs'),
  smsParams?: string(name='SmsParams'),
  smsSendPolicy?: int32(name='SmsSendPolicy'),
  smsSignName?: string(name='SmsSignName'),
  smsTemplateName?: string(name='SmsTemplateName'),
  storeOffline?: boolean(name='StoreOffline'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
  trim?: boolean(name='Trim'),
  iOSApnsEnv?: string(name='iOSApnsEnv'),
  iOSBadge?: int32(name='iOSBadge'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
  iOSExtParameters?: string(name='iOSExtParameters'),
  iOSInterruptionLevel?: string(name='iOSInterruptionLevel'),
  iOSMusic?: string(name='iOSMusic'),
  iOSMutableContent?: boolean(name='iOSMutableContent'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory'),
  iOSNotificationCollapseId?: string(name='iOSNotificationCollapseId'),
  iOSNotificationThreadId?: string(name='iOSNotificationThreadId'),
  iOSRelevanceScore?: double(name='iOSRelevanceScore'),
  iOSRemind?: boolean(name='iOSRemind'),
  iOSRemindBody?: string(name='iOSRemindBody'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification'),
  iOSSubtitle?: string(name='iOSSubtitle'),
}

model PushResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushResponseBody(name='body'),
}

async function pushWithOptions(request: PushRequest, runtime: Util.RuntimeOptions): PushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.androidActivity)) {
    query['AndroidActivity'] = request.androidActivity;
  }
  if (!Util.isUnset(request.androidBigBody)) {
    query['AndroidBigBody'] = request.androidBigBody;
  }
  if (!Util.isUnset(request.androidBigPictureUrl)) {
    query['AndroidBigPictureUrl'] = request.androidBigPictureUrl;
  }
  if (!Util.isUnset(request.androidBigTitle)) {
    query['AndroidBigTitle'] = request.androidBigTitle;
  }
  if (!Util.isUnset(request.androidExtParameters)) {
    query['AndroidExtParameters'] = request.androidExtParameters;
  }
  if (!Util.isUnset(request.androidImageUrl)) {
    query['AndroidImageUrl'] = request.androidImageUrl;
  }
  if (!Util.isUnset(request.androidInboxBody)) {
    query['AndroidInboxBody'] = request.androidInboxBody;
  }
  if (!Util.isUnset(request.androidMessageHuaweiCategory)) {
    query['AndroidMessageHuaweiCategory'] = request.androidMessageHuaweiCategory;
  }
  if (!Util.isUnset(request.androidMessageHuaweiUrgency)) {
    query['AndroidMessageHuaweiUrgency'] = request.androidMessageHuaweiUrgency;
  }
  if (!Util.isUnset(request.androidMusic)) {
    query['AndroidMusic'] = request.androidMusic;
  }
  if (!Util.isUnset(request.androidNotificationBarPriority)) {
    query['AndroidNotificationBarPriority'] = request.androidNotificationBarPriority;
  }
  if (!Util.isUnset(request.androidNotificationBarType)) {
    query['AndroidNotificationBarType'] = request.androidNotificationBarType;
  }
  if (!Util.isUnset(request.androidNotificationChannel)) {
    query['AndroidNotificationChannel'] = request.androidNotificationChannel;
  }
  if (!Util.isUnset(request.androidNotificationHuaweiChannel)) {
    query['AndroidNotificationHuaweiChannel'] = request.androidNotificationHuaweiChannel;
  }
  if (!Util.isUnset(request.androidNotificationNotifyId)) {
    query['AndroidNotificationNotifyId'] = request.androidNotificationNotifyId;
  }
  if (!Util.isUnset(request.androidNotificationVivoChannel)) {
    query['AndroidNotificationVivoChannel'] = request.androidNotificationVivoChannel;
  }
  if (!Util.isUnset(request.androidNotificationXiaomiChannel)) {
    query['AndroidNotificationXiaomiChannel'] = request.androidNotificationXiaomiChannel;
  }
  if (!Util.isUnset(request.androidNotifyType)) {
    query['AndroidNotifyType'] = request.androidNotifyType;
  }
  if (!Util.isUnset(request.androidOpenType)) {
    query['AndroidOpenType'] = request.androidOpenType;
  }
  if (!Util.isUnset(request.androidOpenUrl)) {
    query['AndroidOpenUrl'] = request.androidOpenUrl;
  }
  if (!Util.isUnset(request.androidPopupActivity)) {
    query['AndroidPopupActivity'] = request.androidPopupActivity;
  }
  if (!Util.isUnset(request.androidPopupBody)) {
    query['AndroidPopupBody'] = request.androidPopupBody;
  }
  if (!Util.isUnset(request.androidPopupTitle)) {
    query['AndroidPopupTitle'] = request.androidPopupTitle;
  }
  if (!Util.isUnset(request.androidRemind)) {
    query['AndroidRemind'] = request.androidRemind;
  }
  if (!Util.isUnset(request.androidRenderStyle)) {
    query['AndroidRenderStyle'] = request.androidRenderStyle;
  }
  if (!Util.isUnset(request.androidVivoPushMode)) {
    query['AndroidVivoPushMode'] = request.androidVivoPushMode;
  }
  if (!Util.isUnset(request.androidXiaoMiActivity)) {
    query['AndroidXiaoMiActivity'] = request.androidXiaoMiActivity;
  }
  if (!Util.isUnset(request.androidXiaoMiNotifyBody)) {
    query['AndroidXiaoMiNotifyBody'] = request.androidXiaoMiNotifyBody;
  }
  if (!Util.isUnset(request.androidXiaoMiNotifyTitle)) {
    query['AndroidXiaoMiNotifyTitle'] = request.androidXiaoMiNotifyTitle;
  }
  if (!Util.isUnset(request.androidXiaomiBigPictureUrl)) {
    query['AndroidXiaomiBigPictureUrl'] = request.androidXiaomiBigPictureUrl;
  }
  if (!Util.isUnset(request.androidXiaomiImageUrl)) {
    query['AndroidXiaomiImageUrl'] = request.androidXiaomiImageUrl;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.deviceType)) {
    query['DeviceType'] = request.deviceType;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!Util.isUnset(request.pushTime)) {
    query['PushTime'] = request.pushTime;
  }
  if (!Util.isUnset(request.pushType)) {
    query['PushType'] = request.pushType;
  }
  if (!Util.isUnset(request.sendChannels)) {
    query['SendChannels'] = request.sendChannels;
  }
  if (!Util.isUnset(request.sendSpeed)) {
    query['SendSpeed'] = request.sendSpeed;
  }
  if (!Util.isUnset(request.smsDelaySecs)) {
    query['SmsDelaySecs'] = request.smsDelaySecs;
  }
  if (!Util.isUnset(request.smsParams)) {
    query['SmsParams'] = request.smsParams;
  }
  if (!Util.isUnset(request.smsSendPolicy)) {
    query['SmsSendPolicy'] = request.smsSendPolicy;
  }
  if (!Util.isUnset(request.smsSignName)) {
    query['SmsSignName'] = request.smsSignName;
  }
  if (!Util.isUnset(request.smsTemplateName)) {
    query['SmsTemplateName'] = request.smsTemplateName;
  }
  if (!Util.isUnset(request.storeOffline)) {
    query['StoreOffline'] = request.storeOffline;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.trim)) {
    query['Trim'] = request.trim;
  }
  if (!Util.isUnset(request.iOSApnsEnv)) {
    query['iOSApnsEnv'] = request.iOSApnsEnv;
  }
  if (!Util.isUnset(request.iOSBadge)) {
    query['iOSBadge'] = request.iOSBadge;
  }
  if (!Util.isUnset(request.iOSBadgeAutoIncrement)) {
    query['iOSBadgeAutoIncrement'] = request.iOSBadgeAutoIncrement;
  }
  if (!Util.isUnset(request.iOSExtParameters)) {
    query['iOSExtParameters'] = request.iOSExtParameters;
  }
  if (!Util.isUnset(request.iOSInterruptionLevel)) {
    query['iOSInterruptionLevel'] = request.iOSInterruptionLevel;
  }
  if (!Util.isUnset(request.iOSMusic)) {
    query['iOSMusic'] = request.iOSMusic;
  }
  if (!Util.isUnset(request.iOSMutableContent)) {
    query['iOSMutableContent'] = request.iOSMutableContent;
  }
  if (!Util.isUnset(request.iOSNotificationCategory)) {
    query['iOSNotificationCategory'] = request.iOSNotificationCategory;
  }
  if (!Util.isUnset(request.iOSNotificationCollapseId)) {
    query['iOSNotificationCollapseId'] = request.iOSNotificationCollapseId;
  }
  if (!Util.isUnset(request.iOSNotificationThreadId)) {
    query['iOSNotificationThreadId'] = request.iOSNotificationThreadId;
  }
  if (!Util.isUnset(request.iOSRelevanceScore)) {
    query['iOSRelevanceScore'] = request.iOSRelevanceScore;
  }
  if (!Util.isUnset(request.iOSRemind)) {
    query['iOSRemind'] = request.iOSRemind;
  }
  if (!Util.isUnset(request.iOSRemindBody)) {
    query['iOSRemindBody'] = request.iOSRemindBody;
  }
  if (!Util.isUnset(request.iOSSilentNotification)) {
    query['iOSSilentNotification'] = request.iOSSilentNotification;
  }
  if (!Util.isUnset(request.iOSSubtitle)) {
    query['iOSSubtitle'] = request.iOSSubtitle;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Push',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function push(request: PushRequest): PushResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushWithOptions(request, runtime);
}

model PushMessageToAndroidRequest {
  appKey?: long(name='AppKey'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
}

model PushMessageToAndroidResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushMessageToAndroidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushMessageToAndroidResponseBody(name='body'),
}

async function pushMessageToAndroidWithOptions(request: PushMessageToAndroidRequest, runtime: Util.RuntimeOptions): PushMessageToAndroidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushMessageToAndroid',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushMessageToAndroid(request: PushMessageToAndroidRequest): PushMessageToAndroidResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageToAndroidWithOptions(request, runtime);
}

model PushMessageToiOSRequest {
  appKey?: long(name='AppKey'),
  body?: string(name='Body'),
  jobKey?: string(name='JobKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
}

model PushMessageToiOSResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushMessageToiOSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushMessageToiOSResponseBody(name='body'),
}

async function pushMessageToiOSWithOptions(request: PushMessageToiOSRequest, runtime: Util.RuntimeOptions): PushMessageToiOSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushMessageToiOS',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushMessageToiOS(request: PushMessageToiOSRequest): PushMessageToiOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageToiOSWithOptions(request, runtime);
}

model PushNoticeToAndroidRequest {
  appKey?: long(name='AppKey'),
  body?: string(name='Body'),
  extParameters?: string(name='ExtParameters'),
  jobKey?: string(name='JobKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
}

model PushNoticeToAndroidResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushNoticeToAndroidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushNoticeToAndroidResponseBody(name='body'),
}

async function pushNoticeToAndroidWithOptions(request: PushNoticeToAndroidRequest, runtime: Util.RuntimeOptions): PushNoticeToAndroidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.extParameters)) {
    query['ExtParameters'] = request.extParameters;
  }
  if (!Util.isUnset(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushNoticeToAndroid',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushNoticeToAndroid(request: PushNoticeToAndroidRequest): PushNoticeToAndroidResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushNoticeToAndroidWithOptions(request, runtime);
}

model PushNoticeToiOSRequest {
  apnsEnv?: string(name='ApnsEnv'),
  appKey?: long(name='AppKey'),
  body?: string(name='Body'),
  extParameters?: string(name='ExtParameters'),
  jobKey?: string(name='JobKey'),
  target?: string(name='Target'),
  targetValue?: string(name='TargetValue'),
  title?: string(name='Title'),
}

model PushNoticeToiOSResponseBody = {
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model PushNoticeToiOSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushNoticeToiOSResponseBody(name='body'),
}

async function pushNoticeToiOSWithOptions(request: PushNoticeToiOSRequest, runtime: Util.RuntimeOptions): PushNoticeToiOSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apnsEnv)) {
    query['ApnsEnv'] = request.apnsEnv;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.extParameters)) {
    query['ExtParameters'] = request.extParameters;
  }
  if (!Util.isUnset(request.jobKey)) {
    query['JobKey'] = request.jobKey;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetValue)) {
    query['TargetValue'] = request.targetValue;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushNoticeToiOS',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushNoticeToiOS(request: PushNoticeToiOSRequest): PushNoticeToiOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushNoticeToiOSWithOptions(request, runtime);
}

model QueryAliasesRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model QueryAliasesResponseBody = {
  aliasInfos?: {
    aliasInfo?: [ 
    {
      aliasName?: string(name='AliasName'),
    }
  ](name='AliasInfo')
  }(name='AliasInfos'),
  requestId?: string(name='RequestId'),
}

model QueryAliasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAliasesResponseBody(name='body'),
}

async function queryAliasesWithOptions(request: QueryAliasesRequest, runtime: Util.RuntimeOptions): QueryAliasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAliases',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAliases(request: QueryAliasesRequest): QueryAliasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAliasesWithOptions(request, runtime);
}

model QueryDeviceInfoRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model QueryDeviceInfoResponseBody = {
  deviceInfo?: {
    account?: string(name='Account'),
    alias?: string(name='Alias'),
    deviceId?: string(name='DeviceId'),
    deviceToken?: string(name='DeviceToken'),
    deviceType?: string(name='DeviceType'),
    lastOnlineTime?: string(name='LastOnlineTime'),
    online?: boolean(name='Online'),
    phoneNumber?: string(name='PhoneNumber'),
    pushEnabled?: boolean(name='PushEnabled'),
    tags?: string(name='Tags'),
  }(name='DeviceInfo'),
  requestId?: string(name='RequestId'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

async function queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceInfo',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceInfoWithOptions(request, runtime);
}

model QueryDeviceStatRequest {
  appKey?: long(name='AppKey'),
  deviceType?: string(name='DeviceType'),
  endTime?: string(name='EndTime'),
  queryType?: string(name='QueryType'),
  startTime?: string(name='StartTime'),
}

model QueryDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count'),
      deviceType?: string(name='DeviceType'),
      time?: string(name='Time'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId'),
}

model QueryDeviceStatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatResponseBody(name='body'),
}

async function queryDeviceStatWithOptions(request: QueryDeviceStatRequest, runtime: Util.RuntimeOptions): QueryDeviceStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceType)) {
    query['DeviceType'] = request.deviceType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStat',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceStat(request: QueryDeviceStatRequest): QueryDeviceStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceStatWithOptions(request, runtime);
}

model QueryDevicesByAccountRequest {
  account?: string(name='Account'),
  appKey?: long(name='AppKey'),
}

model QueryDevicesByAccountResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId'),
}

model QueryDevicesByAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesByAccountResponseBody(name='body'),
}

async function queryDevicesByAccountWithOptions(request: QueryDevicesByAccountRequest, runtime: Util.RuntimeOptions): QueryDevicesByAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicesByAccount',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicesByAccount(request: QueryDevicesByAccountRequest): QueryDevicesByAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesByAccountWithOptions(request, runtime);
}

model QueryDevicesByAliasRequest {
  alias?: string(name='Alias'),
  appKey?: long(name='AppKey'),
}

model QueryDevicesByAliasResponseBody = {
  deviceIds?: {
    deviceId?: [ string ](name='DeviceId')
  }(name='DeviceIds'),
  requestId?: string(name='RequestId'),
}

model QueryDevicesByAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesByAliasResponseBody(name='body'),
}

async function queryDevicesByAliasWithOptions(request: QueryDevicesByAliasRequest, runtime: Util.RuntimeOptions): QueryDevicesByAliasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicesByAlias',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicesByAlias(request: QueryDevicesByAliasRequest): QueryDevicesByAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesByAliasWithOptions(request, runtime);
}

model QueryPushRecordsRequest {
  appKey?: long(name='AppKey'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  nextToken?: string(name='NextToken'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pushType?: string(name='PushType'),
  source?: string(name='Source'),
  startTime?: string(name='StartTime'),
  target?: string(name='Target'),
}

model QueryPushRecordsResponseBody = {
  nextToken?: string(name='NextToken'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pushInfos?: {
    pushInfo?: [ 
    {
      appKey?: long(name='AppKey'),
      body?: string(name='Body'),
      deviceType?: string(name='DeviceType'),
      messageId?: string(name='MessageId'),
      pushTime?: string(name='PushTime'),
      pushType?: string(name='PushType'),
      source?: string(name='Source'),
      status?: string(name='Status'),
      target?: string(name='Target'),
      title?: string(name='Title'),
    }
  ](name='PushInfo')
  }(name='PushInfos'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model QueryPushRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPushRecordsResponseBody(name='body'),
}

async function queryPushRecordsWithOptions(request: QueryPushRecordsRequest, runtime: Util.RuntimeOptions): QueryPushRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pushType)) {
    query['PushType'] = request.pushType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPushRecords',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPushRecords(request: QueryPushRecordsRequest): QueryPushRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushRecordsWithOptions(request, runtime);
}

model QueryPushStatByAppRequest {
  appKey?: long(name='AppKey'),
  endTime?: string(name='EndTime'),
  granularity?: string(name='Granularity'),
  startTime?: string(name='StartTime'),
}

model QueryPushStatByAppResponseBody = {
  appPushStats?: {
    appPushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount'),
      deletedCount?: long(name='DeletedCount'),
      openedCount?: long(name='OpenedCount'),
      receivedCount?: long(name='ReceivedCount'),
      sentCount?: long(name='SentCount'),
      smsFailedCount?: long(name='SmsFailedCount'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount'),
      smsSentCount?: long(name='SmsSentCount'),
      smsSkipCount?: long(name='SmsSkipCount'),
      time?: string(name='Time'),
    }
  ](name='AppPushStat')
  }(name='AppPushStats'),
  requestId?: string(name='RequestId'),
}

model QueryPushStatByAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPushStatByAppResponseBody(name='body'),
}

async function queryPushStatByAppWithOptions(request: QueryPushStatByAppRequest, runtime: Util.RuntimeOptions): QueryPushStatByAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPushStatByApp',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPushStatByApp(request: QueryPushStatByAppRequest): QueryPushStatByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushStatByAppWithOptions(request, runtime);
}

model QueryPushStatByMsgRequest {
  appKey?: long(name='AppKey'),
  messageId?: long(name='MessageId'),
}

model QueryPushStatByMsgResponseBody = {
  pushStats?: {
    pushStat?: [ 
    {
      acceptCount?: long(name='AcceptCount'),
      deletedCount?: long(name='DeletedCount'),
      messageId?: string(name='MessageId'),
      openedCount?: long(name='OpenedCount'),
      receivedCount?: long(name='ReceivedCount'),
      sentCount?: long(name='SentCount'),
      smsFailedCount?: long(name='SmsFailedCount'),
      smsReceiveFailedCount?: long(name='SmsReceiveFailedCount'),
      smsReceiveSuccessCount?: long(name='SmsReceiveSuccessCount'),
      smsSentCount?: long(name='SmsSentCount'),
      smsSkipCount?: long(name='SmsSkipCount'),
    }
  ](name='PushStat')
  }(name='PushStats'),
  requestId?: string(name='RequestId'),
}

model QueryPushStatByMsgResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPushStatByMsgResponseBody(name='body'),
}

async function queryPushStatByMsgWithOptions(request: QueryPushStatByMsgRequest, runtime: Util.RuntimeOptions): QueryPushStatByMsgResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPushStatByMsg',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPushStatByMsg(request: QueryPushStatByMsgRequest): QueryPushStatByMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushStatByMsgWithOptions(request, runtime);
}

model QueryTagsRequest {
  appKey?: long(name='AppKey'),
  clientKey?: string(name='ClientKey'),
  keyType?: string(name='KeyType'),
}

model QueryTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagName?: string(name='TagName'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
}

model QueryTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTagsResponseBody(name='body'),
}

async function queryTagsWithOptions(request: QueryTagsRequest, runtime: Util.RuntimeOptions): QueryTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.clientKey)) {
    query['ClientKey'] = request.clientKey;
  }
  if (!Util.isUnset(request.keyType)) {
    query['KeyType'] = request.keyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTags',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTags(request: QueryTagsRequest): QueryTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagsWithOptions(request, runtime);
}

model QueryUniqueDeviceStatRequest {
  appKey?: long(name='AppKey'),
  endTime?: string(name='EndTime'),
  granularity?: string(name='Granularity'),
  startTime?: string(name='StartTime'),
}

model QueryUniqueDeviceStatResponseBody = {
  appDeviceStats?: {
    appDeviceStat?: [ 
    {
      count?: long(name='Count'),
      time?: string(name='Time'),
    }
  ](name='AppDeviceStat')
  }(name='AppDeviceStats'),
  requestId?: string(name='RequestId'),
}

model QueryUniqueDeviceStatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUniqueDeviceStatResponseBody(name='body'),
}

async function queryUniqueDeviceStatWithOptions(request: QueryUniqueDeviceStatRequest, runtime: Util.RuntimeOptions): QueryUniqueDeviceStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUniqueDeviceStat',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUniqueDeviceStat(request: QueryUniqueDeviceStatRequest): QueryUniqueDeviceStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUniqueDeviceStatWithOptions(request, runtime);
}

model RemoveTagRequest {
  appKey?: long(name='AppKey'),
  tagName?: string(name='TagName'),
}

model RemoveTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTagResponseBody(name='body'),
}

async function removeTagWithOptions(request: RemoveTagRequest, runtime: Util.RuntimeOptions): RemoveTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTag',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeTag(request: RemoveTagRequest): RemoveTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagWithOptions(request, runtime);
}

model UnbindAliasRequest {
  aliasName?: string(name='AliasName'),
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
  unbindAll?: boolean(name='UnbindAll'),
}

model UnbindAliasResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAliasResponseBody(name='body'),
}

async function unbindAliasWithOptions(request: UnbindAliasRequest, runtime: Util.RuntimeOptions): UnbindAliasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.unbindAll)) {
    query['UnbindAll'] = request.unbindAll;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindAlias',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindAlias(request: UnbindAliasRequest): UnbindAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAliasWithOptions(request, runtime);
}

model UnbindPhoneRequest {
  appKey?: long(name='AppKey'),
  deviceId?: string(name='DeviceId'),
}

model UnbindPhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindPhoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindPhoneResponseBody(name='body'),
}

async function unbindPhoneWithOptions(request: UnbindPhoneRequest, runtime: Util.RuntimeOptions): UnbindPhoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindPhone',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindPhone(request: UnbindPhoneRequest): UnbindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPhoneWithOptions(request, runtime);
}

model UnbindTagRequest {
  appKey?: long(name='AppKey'),
  clientKey?: string(name='ClientKey'),
  keyType?: string(name='KeyType'),
  tagName?: string(name='TagName'),
}

model UnbindTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindTagResponseBody(name='body'),
}

async function unbindTagWithOptions(request: UnbindTagRequest, runtime: Util.RuntimeOptions): UnbindTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.clientKey)) {
    query['ClientKey'] = request.clientKey;
  }
  if (!Util.isUnset(request.keyType)) {
    query['KeyType'] = request.keyType;
  }
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindTag',
    version = '2016-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindTag(request: UnbindTagRequest): UnbindTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindTagWithOptions(request, runtime);
}

