/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dts';
  @version = '2020-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'dts.aliyuncs.com',
    'cn-beijing' = 'dts.aliyuncs.com',
    'cn-zhangjiakou' = 'dts.aliyuncs.com',
    'cn-huhehaote' = 'dts.aliyuncs.com',
    'cn-hangzhou' = 'dts.aliyuncs.com',
    'cn-shanghai' = 'dts.aliyuncs.com',
    'cn-shenzhen' = 'dts.aliyuncs.com',
    'cn-hongkong' = 'dts.aliyuncs.com',
    'ap-southeast-1' = 'dts.aliyuncs.com',
    'ap-southeast-2' = 'dts.aliyuncs.com',
    'ap-southeast-3' = 'dts.aliyuncs.com',
    'ap-southeast-5' = 'dts.aliyuncs.com',
    'eu-west-1' = 'dts.aliyuncs.com',
    'us-west-1' = 'dts.aliyuncs.com',
    'us-east-1' = 'dts.aliyuncs.com',
    'eu-central-1' = 'dts.aliyuncs.com',
    'me-east-1' = 'dts.aliyuncs.com',
    'ap-south-1' = 'dts.aliyuncs.com',
    'cn-hangzhou-finance' = 'dts.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dts.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dts.aliyuncs.com',
    'cn-north-2-gov-1' = 'dts.aliyuncs.com',
    'ap-northeast-2-pop' = 'dts.aliyuncs.com',
    'cn-beijing-finance-1' = 'dts.aliyuncs.com',
    'cn-beijing-finance-pop' = 'dts.aliyuncs.com',
    'cn-beijing-gov-1' = 'dts.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'dts.aliyuncs.com',
    'cn-chengdu' = 'dts.aliyuncs.com',
    'cn-edge-1' = 'dts.aliyuncs.com',
    'cn-fujian' = 'dts.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'dts.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'dts.aliyuncs.com',
    'cn-hangzhou-test-306' = 'dts.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'dts.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'dts.aliyuncs.com',
    'cn-qingdao-nebula' = 'dts.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'dts.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'dts.aliyuncs.com',
    'cn-shanghai-inner' = 'dts.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'dts.aliyuncs.com',
    'cn-shenzhen-inner' = 'dts.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'dts.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'dts.aliyuncs.com',
    'cn-wuhan' = 'dts.aliyuncs.com',
    'cn-wulanchabu' = 'dts.aliyuncs.com',
    'cn-yushanfang' = 'dts.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'dts.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'dts.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'dts.aliyuncs.com',
    'eu-west-1-oxs' = 'dts.aliyuncs.com',
    'rus-west-1-pop' = 'dts.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ConfigureMigrationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName', description='The name of the destination database or the authentication database.

> 
*   You must specify the database name only if the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**.
*   If the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.', example='dtstestdatabase'),
    engineName?: string(name='EngineName', description='The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.

>  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the destination database.

>  You must specify the endpoint only if the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.', example='172.16.88.***'),
    instanceID?: string(name='InstanceID', description='The ID of the instance that hosts the destination database.

>  You must specify the instance ID only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **MongoDB**, **Redis**, **DRDS**, **PetaData**, **OceanBase**, **POLARDB**, **PolarDB_o**, **AnalyticDB**, or **Greenplum**. For example, if the DestinationEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.', example='rm-bp1r46452ai50****'),
    instanceType: string(name='InstanceType', description='The instance type of the destination database. Valid values:

*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **LocalInstance**: self-managed database with a public IP address
*   **RDS**: ApsaraDB RDS instance
*   **DRDS**: PolarDB-X instance
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **Redis**: ApsaraDB for Redis instance
*   **PetaData**: HybridDB for MySQL instance
*   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
*   **PolarDB_o**: PolarDB O Edition cluster
*   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
*   **Greenplum**: AnalyticDB for PostgreSQL instance', example='RDS'),
    oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

>  You must specify this parameter only if the **DestinationEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.', example='testsid'),
    password?: string(name='Password', description='The password of the destination database account.', example='Test123456'),
    port?: string(name='Port', description='The service port number of the destination database.

>  You must specify the service port number only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='3306'),
    region?: string(name='Region', description='The region ID of the destination database.

>  If the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou'),
    userName?: string(name='UserName', description='The database account of the destination database.

>  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](~~26618~~).', example='dtstestaccount'),
  }(name='DestinationEndpoint', position='Query'),
  migrationMode?: {
    dataIntialization: boolean(name='DataIntialization', description='Specifies whether to perform full data migration. Valid values:

*   **true**: yes
*   **false**: no

>  For more information about databases that support full data migration, see [Supported databases and migration types](~~26618~~).', example='true'),
    dataSynchronization: boolean(name='DataSynchronization', description='Specifies whether to perform incremental data migration. Valid values:

*   **true**: yes
*   **false**: no

>  For more information about databases that support incremental data migration, see [Supported databases and migration types](~~26618~~).', example='true'),
    structureIntialization: boolean(name='StructureIntialization', description='Specifies whether to perform schema migration. Valid values:

*   **true**: yes
*   **false**: no

>  For more information about databases that support schema migration, see [Supported databases and migration types](~~26618~~).', example='true'),
  }(name='MigrationMode', position='Query'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the source database or the authentication database.

> 
*   You must specify the database name only if the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL** or **MongoDB**.
*   If the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL**, specify the name of the source database. If the SourceEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.', example='dtstestdatabase'),
    engineName?: string(name='EngineName', description='The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.

>  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the source database.

>  You must specify the endpoint only if the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.', example='172.16.88.***'),
    instanceID?: string(name='InstanceID', description='The ID of the instance that hosts the source database.

> 
*   You must specify the instance ID only if the **SourceEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **Express**, **MongoDB**, **POLARDB**, or **PolarDB_o**. For example, if the SourceEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
*   If the **SourceEndpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the virtual private cloud (VPC).', example='rm-bp1i99e8l7913****'),
    instanceType: string(name='InstanceType', description='The instance type of the source database. Valid values:

*   **RDS**: ApsaraDB RDS instance
*   **ECS**: self-managed database that is hosted on ECS
*   **LocalInstance**: self-managed database with a public IP address
*   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
*   **dg**: self-managed database that is connected over Database Gateway
*   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
*   **PolarDB_o**: PolarDB O Edition cluster', example='RDS'),
    oracleSID?: string(name='OracleSID', description='The system ID (SID) of the Oracle database.

>  You must specify this parameter only if the **SourceEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.', example='testsid'),
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account to which the source instance belongs.

>  You must specify this parameter only when you configure data migration across different Alibaba Cloud accounts.', example='140692647406****'),
    password?: string(name='Password', description='The password of the source database account.', example='Test123456'),
    port?: string(name='Port', description='The service port number of the source database.

>  You must specify the service port number only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='3306'),
    region?: string(name='Region', description='The region ID of the source database.

>  If the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou'),
    role?: string(name='Role', description='The authorized RAM role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.

>  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).', example='ram-for-dts'),
    userName?: string(name='UserName', description='The database account of the source database.

>  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](~~26618~~).', example='dtstestaccount'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration. The value is a UNIX timestamp. Unit: seconds.', example='111', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.', example='dtsl3m1213ye7l****', position='Query'),
  migrationJobName: string(name='MigrationJobName', description='The name of the data migration task. The name can be up to 32 characters in length. We recommend that you specify an informative name to identify the task. You do not need to use a unique task name.', example='MySQL_TO_RDS', position='Query'),
  migrationObject: string(name='MigrationObject', description='The objects that you want to migrate. The value is a JSON string and can contain regular expressions.

For more information, see [MigrationObject](~~141227~~).', example='[{"DBName":"dtstestdata","TableIncludes":[{"TableName":"customer"}]}]', position='Body'),
  migrationReserved?: string(name='MigrationReserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).', example='{     "autoStartModulesAfterConfig": "none",     "targetTableMode": 2 }', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](~~141033~~).

>  The region ID of the data migration instance is the same as that of the destination database.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ConfigureMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40E35BD9-002E-4D63-9BE5-FBA48833****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureMigrationJobResponseBody(name='body'),
}

/**
  * After you call this operation to configure a data migration task, the task will be automatically started. You do not need to call the [StartMigrationJob](~~49429~~) operation to start the task.
  * A data migration task may fail to be started due to precheck failures. You can call the [DescribeMigrationJobStatus](~~49433~~) operation to query the error messages about precheck failures. Then, you can fix the issue based on the error messages. After you fix the issue, you must call the [StartMigrationJob](~~49429~~) operation to restart the data migration task.
  *
 */
async function configureMigrationJob(request: ConfigureMigrationJobRequest): ConfigureMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureMigrationJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureMigrationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Specifies whether to monitor task latency. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.', example='enable', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.', example='10', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Specifies whether to monitor task status. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
*   If the task that you monitor enters an abnormal state, an alert is triggered.', example='enable', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.', example='dtslb9113qq11n****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ConfigureMigrationJobAlertResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0a2a047516051973705541561d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureMigrationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureMigrationJobAlertResponseBody(name='body'),
}

async function configureMigrationJobAlert(request: ConfigureMigrationJobAlertRequest): ConfigureMigrationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureMigrationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSubscriptionRequest {
  checkpoint?: string(name='Checkpoint', description='The UNIX timestamp that represents the start time of change tracking. Unit: seconds.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1616902385', position='Query'),
  dbList: string(name='DbList', description='The objects for which you want to track data changes. The value must be a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).', example='{"dtstest":{"name":"dtstest","all":true}}', position='Query'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which the change tracking task is scheduled to run.', example='dtscluster_atyl3b5214uk***', position='Query'),
  delayNotice?: boolean(name='DelayNotice', description='Specifies whether to monitor the task latency. Valid values:

*   **true**: monitors the task latency.
*   **false**: does not monitor the task latency.', example='true', position='Query'),
  delayPhone?: string(name='DelayPhone', description='The mobile numbers to which latency-related alerts are sent. Separate multiple mobile numbers with commas (,).

> 
*   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
*   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  delayRuleTime?: long(name='DelayRuleTime', description='The threshold for triggering latency-related alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business needs. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayNotice** parameter is set to **true**, this parameter is required.', example='10', position='Query'),
  dtsBisLabel?: string(name='DtsBisLabel', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.', example='dtsy0zz3t13h7d****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='y0zz3t13h7d****', position='Query'),
  dtsJobName: string(name='DtsJobName', description='The name of the change tracking task.

>  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.', position='Query'),
  errorNotice?: boolean(name='ErrorNotice', description='Specifies whether to monitor the task status. Valid values:

*   **true**: monitors the task status.
*   **false**: does not monitor the task status.', example='true', position='Query'),
  errorPhone?: string(name='ErrorPhone', description='The mobile numbers to which status-related alerts are sent. Separate multiple mobile numbers with commas (,).

> 
*   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
*   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  maxDu?: double(name='MaxDu', position='Query'),
  minDu?: double(name='MinDu', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  reserve?: string(name='Reserve', description='The reserved parameter of DTS. The value must be a JSON string. You can specify this parameter to add more configurations of the source or destination database to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the ID of the CEN instance. For more information, see [MigrationReserved](~~176470~~).', example='{      "srcInstanceId": "cen-9kqshqum*******"  }', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', description='The name of the source database.', example='dtstestdata', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', description='The engine of the source database. Valid values: **MySQL**, **PostgreSQL**, and **Oracle**.

>  If the source database is a self-managed database, you must specify this parameter.', example='PostgreSQL', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', description='The endpoint of the source database.

>  This parameter is required only when the source database is a self-managed database.', example='172.16.8*.***', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', description='The ID of the source database.

>  This parameter is required only when the source database is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.', example='rm-bp1zc3iyqe3qw****', position='Query'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType', description='The type of the source database. Valid values:

*   **RDS**: ApsaraDB RDS for MySQL instance
*   **PolarDB**: PolarDB for MySQL cluster
*   **DRDS**: PolarDB-X 1.0 instance
*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
*   **Express**: self-managed database connected over Express Connect
*   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
*   **dg**: self-managed database connected over Database Gateway', example='RDS', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', description='The system ID (SID) of the Oracle database.

>  This parameter is required only when the source database is a self-managed Oracle database and is not deployed in the Real Application Clusters (RAC) architecture.', example='testsid', position='Query'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID', description='The ID of the Alibaba Cloud account to which the source database belongs.

>  This parameter is required only when you track data changes across different Alibaba Cloud accounts.', example='140692647406****', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', description='The password of the account that is used to connect to the source database.', example='Test123456', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', description='The service port number of the source database.

>  This parameter is required only when the source database is a self-managed database.', example='3306', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', description='The ID of the region in which the source database resides. For more information, see [List of supported regions](~~141033~~).

>  If the source database is a self-managed database with a public IP address, you can set the value of this parameter to **cn-hangzhou** or the ID of the region that is closest to the region in which the self-managed database resides.', example='cn-hangzhou', position='Query'),
  sourceEndpointRole?: string(name='SourceEndpointRole', description='The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking task. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.

>  For more information about the permissions that are required for the RAM role and how to grant the permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).', example='ram-for-dts', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', description='The username of the account that is used to connect to the source database.

>  The permissions that are required for the database account vary with the change tracking scenario. For more information, see [Prepare the source database account for change tracking](~~212653~~).', example='dtstest', position='Query'),
  srcCaCertificateOssUrl?: string(name='SrcCaCertificateOssUrl', position='Query'),
  srcCaCertificatePassword?: string(name='SrcCaCertificatePassword', position='Query'),
  srcClientCertOssUrl?: string(name='SrcClientCertOssUrl', position='Query'),
  srcClientKeyOssUrl?: string(name='SrcClientKeyOssUrl', position='Query'),
  srcClientPassword?: string(name='SrcClientPassword', position='Query'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL', description='Specifies whether to track DDL statements. Default value: true. Valid values:

*   **true**: tracks DDL statements.
*   **false**: does not track DDL statements.', example='true', position='Query'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML', description='Specifies whether to track DML statements. Default value: true. Valid values:

*   **true**: tracks DML statements.
*   **false**: does not track DML statements.', example='true', position='Query'),
  subscriptionInstanceNetworkType: string(name='SubscriptionInstanceNetworkType', description='The network type of the change tracking task. Set the value to **vpc**. A value of vpc indicates the Virtual Private Cloud (VPC) network type.

> 
*   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstanceVPCId** and **SubscriptionInstanceVSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
*   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.', example='vpc', position='Query'),
  subscriptionInstanceVPCId?: string(name='SubscriptionInstanceVPCId', description='The ID of the VPC in which the change tracking instance is deployed.

>  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vpc-bp1vwnn14rqpyiczj****', position='Query'),
  subscriptionInstanceVSwitchId?: string(name='SubscriptionInstanceVSwitchId', description='The ID of the vSwitch in the specified VPC.

>  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vsw-bp10df3mxae6lpmku****', position='Query'),
}

model ConfigureSubscriptionResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance.', example='dtsy0zz3t13h7d****'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task.', example='y0zz3t13h7d****'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D6ECADF-C5E9-4C96-8811-77602B31****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ConfigureSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSubscriptionResponseBody(name='body'),
}

async function configureSubscription(request: ConfigureSubscriptionRequest): ConfigureSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscription', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSubscriptionInstanceRequest {
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the source database.', example='dtstestdata'),
    ip?: string(name='IP', description='The IP address of the source database.

>  This parameter is required only when the source database is a self-managed database.', example='172.16.88.***'),
    instanceID?: string(name='InstanceID', description='The ID of the source database.

>  This parameter is required only when the source database is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.', example='rm-bp1zc3iyqe3qw****'),
    instanceType?: string(name='InstanceType', description='The type of the source database. Valid values:

*   **RDS**: ApsaraDB RDS for MySQL instance
*   **PolarDB**: PolarDB for MySQL cluster
*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
*   **Express**: self-managed database connected over Express Connect
*   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
*   **dg**: self-managed database connected over Database Gateway

>  The engine of a self-managed database can be MySQL or Oracle. You must specify the engine type when you call the [CreateSubscriptionInstance](~~49436~~) operation.', example='RDS'),
    oracleSID?: string(name='OracleSID', description='The system ID (SID) of the Oracle database.

>  This parameter is required only when the source database is a self-managed Oracle database and is not deployed in the Real Application Clusters (RAC) architecture.', example='testsid'),
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account to which the source database belongs.

>  This parameter is required only when you track data changes across different Alibaba Cloud accounts.', example='140692647406****'),
    password?: string(name='Password', description='The password of the account that is used to connect to the source database.', example='Test123456'),
    port?: string(name='Port', description='The service port number of the source database.

>  This parameter is required only when the source database is a self-managed database.', example='3306'),
    role?: string(name='Role', description='The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking instance. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.

>  For more information about the permissions that are required for the RAM role and how to grant permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).', example='ram-for-dts'),
    userName?: string(name='UserName', description='The username of the account that is used to connect to the source database.

>  The permissions that are required for the database account vary with the change tracking scenario. For more information, see [Overview of change tracking scenarios](~~145715~~).', example='dtstestaccount'),
  }(name='SourceEndpoint', position='Query'),
  subscriptionDataType?: {
    DDL: boolean(name='DDL', description='Specifies whether to track DDL statements. Default value: true. Valid values:

*   **true**: tracks DDL statements.
*   **false**: does not track DDL statements.', example='true'),
    DML: boolean(name='DML', description='Specifies whether to track DML statements. Default value: true. Valid values:

*   **true**: tracks DML statements.
*   **false**: does not tack DML statements.', example='true'),
  }(name='SubscriptionDataType', position='Query'),
  subscriptionInstance?: {
    VPCId?: string(name='VPCId', description='The ID of the VPC in which the change tracking instance is deployed.

>  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vpc-bp1vwnn14rqpyiczj****'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the specified VPC.

>  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vsw-bp10df3mxae6lpmku****'),
  }(name='SubscriptionInstance', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is discontinued.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the region in which the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='dtshp8n2ze4r5x****', position='Query'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](~~49442~~) operation to query the instance ID.', example='The name of the change tracking instance.

>  We recommend that you specify an informative name for easy identification. You do not need to use a unique name.', position='Query'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType', description='The network type of the change tracking instance. Set the value to **vpc**. A value of vpc indicates the Virtual Private Cloud (VPC) network type.

> 
*   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstance.VPCId** and **SubscriptionInstance.VSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
*   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.', example='vpc', position='Query'),
  subscriptionObject: string(name='SubscriptionObject', description='The objects for which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](~~141902~~).', example='[{     "DBName": "dtstestdata" }]', position='Body'),
}

model ConfigureSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0CC15092-8957-4532-B559-B4FB80AC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ConfigureSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSubscriptionInstanceResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **ConfigureSubscriptionInstance**.
  *
 */
async function configureSubscriptionInstance(request: ConfigureSubscriptionInstanceRequest): ConfigureSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscriptionInstance', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Specifies whether to monitor task latency. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.', example='enable', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.', example='10', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Specifies whether to monitor task status. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
*   If the task that you monitor enters an abnormal state, an alert is triggered.', example='enable', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtsl8zl9ek6292****', position='Query'),
}

model ConfigureSubscriptionInstanceAlertResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='InternalError  The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0a2a047516051973705541561d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSubscriptionInstanceAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSubscriptionInstanceAlertResponseBody(name='body'),
}

async function configureSubscriptionInstanceAlert(request: ConfigureSubscriptionInstanceAlertRequest): ConfigureSubscriptionInstanceAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscriptionInstanceAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSynchronizationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName', description='The name of the database to which the synchronization object in the destination instance belongs.', example='dtstestdata'),
    ip?: string(name='IP', description='The IP address of the destination database.

>  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **Express**, **dg**, or **cen**.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the destination instance.

>  If the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute** or **DataHub**, you must specify the name of the MaxCompute project or the DataHub project.

If the destination instance is an AnalyticDB for MySQL cluster, specify the ID of the AnalyticDB for MySQL cluster.', example='rm-bp1r46452ai50****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance. Valid values:

*   **Redis**: ApsaraDB for Redis instance
*   **RDS**: ApsaraDB RDS instance
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **ECS**: self-managed database that is hosted on ECS
*   **Express**: self-managed database that is connected over Express Connect
*   **DataHub**: DataHub project
*   **MaxCompute**: MaxCompute project
*   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
*   **Greenplum**: AnalyticDB for PostgreSQL instance

>  The default value is **RDS**.', example='RDS'),
    password?: string(name='Password', description='The password of the destination database account.

> 
*   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.Password parameter.', example='Test654321'),
    port?: string(name='Port', description='The service port number of the destination database.

>  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='3306'),
    userName?: string(name='UserName', description='The database account of the destination database.

> 
*   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](~~140954~~).
*   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.UserName parameter.
*   If the **DestinationEndpoint.InstanceType** parameter is set to RDS and the database version is MySQL 5.5 or MySQL 5.6, you do not need to specify the DestinationEndpoint.UserName and **DestinationEndpoint.Password** parameters.
*   If the **DestinationEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the DestinationEndpoint.UserName parameter.', example='dtstestaccount'),
  }(name='DestinationEndpoint', position='Query'),
  partitionKey?: {
    modifyTimeDay?: boolean(name='ModifyTime_Day', description='Specifies whether the incremental data table contains partitions defined by the modifytime_day field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeHour?: boolean(name='ModifyTime_Hour', description='Specifies whether the incremental data table contains partitions defined by the modifytime_hour field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeMinute?: boolean(name='ModifyTime_Minute', description='Specifies whether the incremental data table contains partitions defined by the modifytime_minute field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeMonth?: boolean(name='ModifyTime_Month', description='Specifies whether the incremental data table contains partitions defined by the modifytime_month field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeYear?: boolean(name='ModifyTime_Year', description='Specifies whether the incremental data table contains partitions defined by the modifytime_year field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
  }(name='PartitionKey', position='Query'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the database to which the synchronization object in the source instance belongs.', example='dtstestdata'),
    ip?: string(name='IP', description='The IP address of the source database.

>  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance. Valid values:

*   **RDS**: ApsaraDB RDS instance
*   **Redis**: ApsaraDB for Redis instance
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **Express**: self-managed database that is connected over Express Connect
*   **dg**: self-managed database that is connected over Database Gateway
*   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)

>  The default value is **RDS**.', example='RDS'),
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account that owns the source RDS instance.

>  You can specify this parameter to synchronize data across different Alibaba Cloud accounts. In this case, you also need to specify the **SourceEndpoint.Role** parameter.', example='140692647406****'),
    password?: string(name='Password', description='The password of the source database account.

>  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='Test123456'),
    port?: string(name='Port', description='The service port number of the source database.

>  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='3306'),
    role?: string(name='Role', description='The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.

>  You must specify this parameter when you synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).', example='ram-for-dts'),
    userName?: string(name='UserName', description='The database account of the source database.

> 
*   You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
*   If the **SourceEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the database account.
*   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](~~140954~~).', example='dtstestaccount'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  checkpoint?: string(name='Checkpoint', description='The synchronization checkpoint.', example='1610540493', position='Query'),
  dataInitialization: boolean(name='DataInitialization', description='Specifies whether to perform initial full data synchronization. Valid values:

*   **true**: yes
*   **false**: no

>  Default value: **true**.', example='true', position='Query'),
  migrationReserved?: string(name='MigrationReserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).

>  This parameter can be used for data synchronization between ApsaraDB for Redis Enterprise Edition instances. For more information, see [Use OpenAPI Explorer to configure one-way or two-way data synchronization between ApsaraDB for Redis Enterprise Edition instances](~~155967~~).', example='{     "autoStartModulesAfterConfig": "none",     "targetTableMode": 2 }', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  structureInitialization: boolean(name='StructureInitialization', description='Specifies whether to perform initial schema synchronization. Valid values:

*   **true**: yes
*   **false**: no

>  Default value: **true**.', example='true', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.', example='dtsz4ao1dor13d****', position='Query'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.

>  We recommend that you specify an informative name for easy identification. You do not need to use a unique task name.', position='Query'),
  synchronizationObjects: string(name='SynchronizationObjects', description='The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see [SynchronizationObjects](~~141901~~).', example='[{"DBName":"dtstestdata","TableIncludes":[{"TableName":"customer"}]}]', position='Body'),
}

model ConfigureSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2690E467-7773-43BC-A009-370EE2E7****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSynchronizationJobResponseBody(name='body'),
}

/**
  * Before you call this operation, you must call the [CreateSynchronizationJob](~~49446~~) operation to create a data synchronization instance.
  * > 
  * *   After you call this operation to configure a data synchronization task, the task will be automatically started and prechecked. You do not need to call the [StartSynchronizationJob](~~49448~~) operation to start the task.
  * *   A data synchronization task may fail to be started due to precheck failures. You can call the [DescribeSynchronizationJobStatus](~~49453~~) operation to query the status of the task. Then, you can change parameter settings based on the error messages about the precheck failures. After you fix the issue, you must call the [StartSynchronizationJob](~~49448~~) operation to restart the data synchronization task.
  *
 */
async function configureSynchronizationJob(request: ConfigureSynchronizationJobRequest): ConfigureSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Specifies whether to monitor task latency. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.', example='enable', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.', example='10', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Specifies whether to monitor task status. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
*   If the task that you monitor enters an abnormal state, an alert is triggered.', example='enable', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.', example='dtskxz1170c10p****', position='Query'),
}

model ConfigureSynchronizationJobAlertResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EEE7858-7D41-4EDF-9435-AEED2A34****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSynchronizationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSynchronizationJobAlertResponseBody(name='body'),
}

async function configureSynchronizationJobAlert(request: ConfigureSynchronizationJobAlertRequest): ConfigureSynchronizationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.', example='dtsexjk1alb116****', position='Query'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable', description='Specifies whether to enable image matching. Valid values:

*   **true**: enables image matching
*   **false**: disables image matching', example='true', position='Query'),
}

model ConfigureSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='86A8FF0F-FA92-449D-B559-05CFF9F9****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSynchronizationJobReplicatorCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

/**
  * When you use Data Transmission Service (DTS) to synchronize data, other data sources may write data to the destination instance. In this case, data may become inconsistent between the source and destination instances. To ensure data consistency, you can enable image matching.
  * After you call this operation, you can call the [DescribeSynchronizationJobReplicatorCompare](~~199183~~) operation to verify whether image matching is enabled for the data synchronization instance.
  *
 */
async function configureSynchronizationJobReplicatorCompare(request: ConfigureSynchronizationJobReplicatorCompareRequest): ConfigureSynchronizationJobReplicatorCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJobReplicatorCompare', 'POST', '/', 'json', false, 'json', request);
}

model CountJobByConditionRequest {
  destDbType?: string(name='DestDbType', description='The type of the destination database.', example='MongoDB', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the DTS task.', example='pk13r731m****', position='Query'),
  jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **MIGRATION**: data migration task
*   **SYNC**: data synchronization task
*   **SUBSCRIBE**: change tracking task', example='SYNC', position='Query'),
  params?: string(name='Params', description='The content of the query condition, which corresponds to the value of the JobType parameter.', example='dtspk3f13r731m****', position='Query'),
  region: string(name='Region', description='One of the query conditions. The ID of the region. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  srcDbType?: string(name='SrcDbType', description='The type of the source database.', example='MongoDB', position='Query'),
  status?: string(name='Status', description='The status of the DTS task.

Valid values for a data migration task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed to migrate data.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a data synchronization task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is in progress.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a change tracking task:

*   **NotConfigured**: The task is not configured.
*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Retrying**: The task is being retried.
*   **Abnormal**: The task is not running as expected.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.', example='Finished', position='Query'),
  type?: string(name='Type', description='The content of the query condition. Valid values:

*   **name**: the name of the task
*   **rds**: the ID of the destination instance
*   **instance**: the ID of the Data Transmission Service (DTS) instance
*   **srcRds**: the ID of the source instance

> The value of this parameter corresponds to the value of the **JobType** parameter.', example='name/instance', position='Query'),
}

model CountJobByConditionResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The internal error code. This parameter will be removed soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the  **%s** variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC3BAAF2-74E3-4471-8EB5-96202D6A****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data synchronization instances that meet the requirements and belong to your Alibaba Cloud account.', example='100'),
}

model CountJobByConditionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CountJobByConditionResponseBody(name='body'),
}

async function countJobByCondition(request: CountJobByConditionRequest): CountJobByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountJobByCondition', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerChannelRequest {
  consumerGroupName: string(name='ConsumerGroupName', description='The name of the consumer group. The name can be up to 128 characters in length. We recommend that you use an informative name for easy identification.', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', description='The password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.', example='Test123456', position='Query'),
  consumerGroupUserName: string(name='ConsumerGroupUserName', description='The username of the consumer group.

*   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (\\_).
*   A username cannot exceed 16 characters in length.', example='dtstest', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.', example='dtsboss6pn1w******', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.', example='boss6pn1w******', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model CreateConsumerChannelResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID', description='The ID of the consumer group. You can specify this parameter on a downstream client when you consume tracked data.', example='dtsor2y66j4219****'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5F566C5B-E5B0-4020-A531-FC6F5005****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerChannelResponseBody(name='body'),
}

async function createConsumerChannel(request: CreateConsumerChannelRequest): CreateConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumerGroupName: string(name='ConsumerGroupName', description='The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', description='The password that corresponds to the username of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.', example='Test123456', position='Query'),
  consumerGroupUserName: string(name='ConsumerGroupUserName', description='The username of the consumer group.

*   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (\\_).
*   A username cannot exceed 16 characters in length.', example='dtstest', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtsg2m10r1x15a****', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID', description='The ID of the consumer group.', example='dtswc411cg617p****'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6063641E-BAD1-4BA7-B70B-26FFFD18****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedClusterMonitorRuleRequest {
  cpuAlarmThreshold?: long(name='CpuAlarmThreshold', description='The alert threshold for CPU utilization. Unit: percentage.', example='30', position='Query'),
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dts-dasd22******', position='Query'),
  diskAlarmThreshold?: long(name='DiskAlarmThreshold', description='The alert threshold for disk usage. Unit: percentage.', example='100', position='Query'),
  duAlarmThreshold?: long(name='DuAlarmThreshold', description='The alert threshold for DTS Unit (DU) usage. Unit: percentage.', example='20', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='rm-bp1162kryivb8****', position='Query'),
  memAlarmThreshold?: long(name='MemAlarmThreshold', description='The alert threshold for memory usage. Unit: percentage.', example='40', position='Query'),
  noticeSwitch?: long(name='NoticeSwitch', description='Specifies whether to enable the alert feature. Valid values:

*   **1**: enables the alert feature.
*   **0**: disables the alert feature.', example='1', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  phones: string(name='Phones', description='The mobile phone number to which alerts are sent. Separate multiple mobile phone numbers with commas (,).', example='186****7654', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model CreateDedicatedClusterMonitorRuleResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDedicatedClusterMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDedicatedClusterMonitorRuleResponseBody(name='body'),
}

async function createDedicatedClusterMonitorRule(request: CreateDedicatedClusterMonitorRuleRequest): CreateDedicatedClusterMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedClusterMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateDtsInstanceRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically renew the DTS instance when it expires. Valid values:

*   **false**: does not automatically renew the DTS instance when it expires. This is the default value.
*   **true**: automatically renews the DTS instance when it expires.', example='false', position='Query'),
  autoStart?: boolean(name='AutoStart', description='Specifies whether to automatically start the task after the DTS instance is purchased. Valid values:

*   **false**: does not automatically start the task after the DTS instance is purchased. This is the default value.
*   **true**: automatically starts the task after the DTS instance is purchased.', example='false', position='Query'),
  computeUnit?: int32(name='ComputeUnit', description='The specifications of the extract, transform, and load (ETL) instance. The unit is compute unit (CU). One CU is equal to 1 vCPU and 4 GB of memory. The value of this parameter must be an integer greater than or equal to 2.', example='5', minimum=1, maximum=999999, position='Query'),
  databaseCount?: int32(name='DatabaseCount', description='The number of private custom ApsaraDB RDS instances in a PolarDB-X instance. Default value: **1**.

>  You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **drds**.', example='3', minimum=1, maximum=10000, position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', description='The database engine of the destination instance.

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster
*   **polardb_o**: PolarDB for Oracle cluster
*   **polardb_pg**: PolarDB for PostgreSQL cluster
*   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
*   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
*   **PostgreSQL**: self-managed PostgreSQL database
*   **odps**: MaxCompute project
*   **oracle**: self-managed Oracle database
*   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
*   **tidb**: TiDB database
*   **ADS**: AnalyticDB for MySQL V2.0 cluster
*   **ADB30**: AnalyticDB for MySQL V3.0 cluster
*   **Greenplum**: AnalyticDB for PostgreSQL instance
*   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
*   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
*   **DataHub**: DataHub project
*   **DB2**: self-managed Db2 for LUW database
*   **as400**: AS/400
*   **Tablestore**: Tablestore instance

> 
*   The default value is **MySQL**.
*   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](~~130744~~) and [Overview of data migration scenarios](~~26618~~).
*   You must specify one of this parameter and the **JobId** parameter.', example='MySQL', position='Query'),
  destinationRegion?: string(name='DestinationRegion', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).

>  You must specify one of this parameter and the **JobId** parameter.', example='cn-hangzhou', position='Query'),
  du?: int32(name='Du', description='The number of DTS units (DUs) that are assigned to a DTS task that is run on a DTS dedicated cluster. Valid values: **1** to **100**.

> 
*   The value of this parameter must be within the range of the number of DUs available for the DTS dedicated cluster.', example='30', position='Query'),
  feeType?: string(name='FeeType', description='The billing type for a change tracking instance. Valid values: ONLY_CONFIGURATION_FEE and CONFIGURATION_FEE_AND_DATA_FEE. ONLY_CONFIGURATION_FEE: charges only configuration fees. CONFIGURATION_FEE_AND_DATA_FEE: charges configuration fees and data traffic fees.', example='ONLY_CONFIGURATION_FEE', position='Query'),
  instanceClass?: string(name='InstanceClass', description='The instance class.

*   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
*   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.

>  For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).', example='xxlarge', position='Query'),
  jobId?: string(name='JobId', description='The ID of the task. You can call the **ConfigureDtsJob** operation to obtain the task ID from the **DtsJobId** parameter.

>  If this parameter is specified, you do not need to specify the **SourceRegion**, **DestinationRegion**, **Type**, **SourceEndpointEngineName**, or **DestinationEndpointEngineName** parameter. Even if these parameters are specified, the value of the **JobId** parameter takes precedence.', example='bi6e22ay243****', position='Query'),
  maxDu?: double(name='MaxDu', position='Query'),
  minDu?: double(name='MinDu', position='Query'),
  payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go

>  This parameter must be specified.', example='PrePaid', position='Query'),
  period?: string(name='Period', description='The unit of the subscription duration. Valid values: **Year** and **Month**.

>  You must specify this parameter only if the **PayType** parameter is set to **PrePaid**.', example='Month', position='Query'),
  quantity?: int32(name='Quantity', description='The number of DTS instances that you want to purchase.

>  Only a single instance can be purchased each time.', example='1', minimum=1, maximum=9999999, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzawhxxc****', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', description='The database engine of the source instance.

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster
*   **polardb_o**: PolarDB for Oracle cluster
*   **polardb_pg**: PolarDB for PostgreSQL cluster
*   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
*   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
*   **PostgreSQL**: self-managed PostgreSQL database
*   **odps**: MaxCompute project
*   **oracle**: self-managed Oracle database
*   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
*   **tidb**: TiDB database
*   **ADS**: AnalyticDB for MySQL V2.0 cluster
*   **ADB30**: AnalyticDB for MySQL V3.0 cluster
*   **Greenplum**: AnalyticDB for PostgreSQL instance
*   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
*   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
*   **DataHub**: DataHub project
*   **DB2**: self-managed Db2 for LUW database
*   **as400**: AS/400
*   **Tablestore**: Tablestore instance

> 
*   The default value is **MySQL**.
*   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](~~130744~~) and [Overview of data migration scenarios](~~26618~~).
*   You must specify one of this parameter and the **JobId** parameter.', example='MYSQL', position='Query'),
  sourceRegion?: string(name='SourceRegion', description='The ID of the region in which the source instance resides. For more information, see [List of supported regions](~~141033~~).

>  You must specify one of this parameter and the **JobId** parameter.', example='cn-hangzhou', position='Query'),
  syncArchitecture?: string(name='SyncArchitecture', description='The synchronization topology. Valid values:

*   **oneway**: one-way synchronization. This is the default value.
*   **bidirectional**: two-way synchronization.', example='oneway', position='Query'),
  type?: string(name='Type', description='The type of the DTS instance. Valid values:

*   **MIGRATION**: data migration instance

*   **SYNC**: data synchronization instance

*   **SUBSCRIBE**: change tracking instance

> You must specify one of this parameter and the **JobId** parameter.', example='SYNC', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription duration.

*   Valid values if the **Period** parameter is set to **Month**: 1, 2, 3, 4, 5, 6, 7, 8, and 9.

*   Valid values if the **Period** parameter is set to **Year**: 1, 2, 3, and 5.

> *   You must specify this parameter only if the **PayType** parameter is set to **PrePaid**.
   *   You can set the **Period** parameter to specify the unit of the subscription duration.', example='5', minimum=1, maximum=10000, position='Query'),
}

model CreateDtsInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  instanceId?: string(name='InstanceId', description='The ID of the DTS instance.', example='dtsbi6e22ay243****'),
  jobId?: string(name='JobId', description='The ID of the task.', example='bi6e22ay243****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C166D79D-436B-45F0-B5A5-25E1****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDtsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDtsInstanceResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/apsaradb-for-mongodb/pricing) of DTS.
  * *   If you want to run a DTS task on a DTS dedicated cluster, you must configure the task before you purchase a DTS instance. You can call the [ConfigureDtsJob](~~208399~~) operation to configure a DTS task.
  *
 */
async function createDtsInstance(request: CreateDtsInstanceRequest): CreateDtsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDtsInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateJobMonitorRuleRequest {
  delayRuleTime?: long(name='DelayRuleTime', description='The threshold for triggering latency alerts.

*   If the **Type** parameter is set to **delay**, the threshold must be an integer. You can set the threshold based on your requirements. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds. Unit: seconds.
*   If the **Type** parameter is set to **full_timeout**, the threshold must be an integer. Unit: hours.

>  This parameter is required if the **Type** parameter is set to **delay** or **full_timeout** and the **State** parameter is set to **Y**.', example='11', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='i03e3zty16i****', position='Query'),
  noticeValue?: int32(name='NoticeValue', description='The alert threshold.', example='2', position='Query'),
  period?: int32(name='Period', description='The statistical period of the incremental data verification task. Unit: minutes.

>  Valid values: 1, 3, 5, and 30.', example='5', position='Query'),
  phone?: string(name='Phone', description='The mobile numbers that receive alert notifications. Separate multiple mobile numbers with commas (,).

> 
*   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
*   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](~~175876~~).', example='1361234****,1371234****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  state?: string(name='State', description='Specifies whether to enable the alert rule. Valid values:

*   **Y**: enables the alert rule.
*   **N**: disables the alert rule.

Default value: **Y**.', example='Y', position='Query'),
  times?: int32(name='Times', description='The number of statistical periods of the incremental data verification task.', example='2', position='Query'),
  type?: string(name='Type', description='The metric that is used to monitor the task. Valid values:

*   **delay**: the **Latency** metric.
*   **error**: the **Status** metric.
*   **full_timeout**: the **Full Timeout** metric.

Default value: **error**. You must manually set this value.', example='delay', position='Query'),
}

model CreateJobMonitorRuleResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.

>  For example, if the specified **DtsJobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='403'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8C498360-7892-433C-847A-BA71A850****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateJobMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobMonitorRuleResponseBody(name='body'),
}

/**
  * DTS provides the following metrics for DTS tasks:************
  * *   **Latency**: DTS monitors the latency of a DTS task. If the latency of the task exceeds the specified threshold, an alert is triggered. Unit: seconds.
  * *   **Status**: DTS monitors the status of a DTS task. If the state of the task changes to **Error** or **Restore**, an alert is triggered.
  * *   **Full Timeout**: DTS monitors the duration of a DTS task. If the duration of the task exceeds the specified threshold, an alert is triggered. Unit: hours.
  *
 */
async function createJobMonitorRule(request: CreateJobMonitorRuleRequest): CreateJobMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJobMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobClass: string(name='MigrationJobClass', description='The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**.

> 
*   For more information about the test performance of each specification, see [Specifications of data migration instances](~~26606~~).
*   For more information about the pricing of data migration instances, see [Pricing](~~117780~~).', example='2xlarge', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  region: string(name='Region', description='The ID of the region where the data migration instance resides. The region ID of the data migration instance is the same as that of the destination database. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. You do not need to specify this parameter because this parameter will be removed in the future.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model CreateMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  migrationJobId?: string(name='MigrationJobId', description='The ID of the data migration instance.', example='dtsi8911td9233****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C166D79D-436B-45F0-B5A5-25E1959F****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMigrationJobResponseBody(name='body'),
}

/**
  * >  This API operation is outdated. We recommend that you use the new version. For more information, see [CreateDtsInstance](~~208270~~).
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
  * After you purchase a data migration instance, you must call the [ConfigureMigrationJob](~~324260~~) operation to configure a data migration task.
  *
 */
async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateReverseDtsJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  dtsJobId: string(name='DtsJobId', example='n99m9jx822k****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  shardPassword?: string(name='ShardPassword', position='Query'),
  shardUsername?: string(name='ShardUsername', position='Query'),
}

model CreateReverseDtsJobResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId', example='dtsor1f9kr822l****'),
  dtsJobId?: string(name='DtsJobId', example='n99m9jx822k****'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', example='true'),
}

model CreateReverseDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReverseDtsJobResponseBody(name='body'),
}

async function createReverseDtsJob(request: CreateReverseDtsJobRequest): CreateReverseDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReverseDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubscriptionInstanceRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType', description='The type of the source instance. Valid values: **MySQL**, **PolarDB**, **DRDS**, and **Oracle**.

>  Default value: **MySQL**.', example='MySQL'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The billing method of the change tracking instance.

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The billing cycle of the subscription instance. Valid values:

*   **Year**
*   **Month**

>  You must specify this parameter only if you set the PayType parameter to **Prepaid**.', example='Month', position='Query'),
  region: string(name='Region', description='The region ID of the change tracking instance. The region ID is the same as that of the source instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription length.

*   If the billing cycle is **Year**, the value range is **1 to 5**.
*   If the billing cycle is **Month**, the value range is **1 to 60**.

>  You must specify this parameter only if you set the PayType parameter to **Prepaid**.', example='12', position='Query'),
}

model CreateSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9564C5-F99D-4176-A6BA-2D7F2DC8****'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance.', example='dtsfen11q2g23x****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubscriptionInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
  *
 */
async function createSubscriptionInstance(request: CreateSubscriptionInstanceRequest): CreateSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSynchronizationJobRequest {
  destinationEndpoint?: {
    instanceType?: string(name='InstanceType', description='The instance type of the destination database. Valid values:

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **Redis**: Redis database
*   **MaxCompute**: MaxCompute project

> 
*   Default value: **MySQL**.
*   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](~~130744~~).', example='MySQL'),
  }(name='DestinationEndpoint', position='Query'),
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType', description='The instance type of the source database. Valid values:

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **Redis**: Redis database
*   **DRDS**: PolarDB-X instance V1.0

> 
*   Default value: **MySQL**.
*   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](~~130744~~).', example='MySQL'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  DBInstanceCount?: int32(name='DBInstanceCount', description='If you set the **SourceEndpoint.InstanceType** parameter to **DRDS**, you must specify the DBInstanceCount parameter. This parameter specifies the number of private RDS instances attached to the source PolarDB-X instance. Default value: **1**.', example='3', minimum=0, maximum=10000, position='Query'),
  destRegion: string(name='DestRegion', description='The ID of the region where the destination database resides. For more information, see [List of supported regions](~~141033~~).

>  If the **SourceRegion** parameter is set to the China (Hong Kong) region or a region outside the Chinese mainland, you must set the DestRegion parameter to the same region ID.', example='cn-hangzhou', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the data synchronization instance.

*   **PrePaid**: subscription
*   **PostPaid** (default value): pay-as-you-go', example='PostPaid', position='Query'),
  period?: string(name='Period', description='The billing cycle of the subscription instance. Valid values:

*   **Year**
*   **Month**

>  You must specify this parameter only if you set the PayType parameter to **PrePaid**.', example='Year', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceRegion: string(name='SourceRegion', description='The ID of the region where the source database resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  synchronizationJobClass: string(name='SynchronizationJobClass', description='The specification of the data synchronization instance. Valid values: **micro**, **small**, **medium**, and **large**.

>  For more information about the test performance of each specification, see [Specifications of data synchronization instances](~~26605~~).', example='small', position='Query'),
  topology?: string(name='Topology', description='The synchronization topology. Valid values:

*   **oneway**: one-way synchronization
*   **bidirectional**: two-way synchronization

> 
*   The default value is **oneway**.
*   This parameter can be set to **bidirectional** only when the **SourceEndpoint.InstanceType** and **DestinationEndpoint.InstanceType** parameters are set to **MySQL**, **PolarDB**, or **Redis**.', example='oneway', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription length.

*   If the billing cycle is **Year**, the value range is **1 to 5**.
*   If the billing cycle is **Month**, the value range is **1 to 60**.

>  You must specify this parameter only if you set the PayType parameter to **PrePaid**.', example='1', position='Query'),
  networkType?: string(name='networkType', description='The network type. Valid value: **Intranet**, which indicates virtual private cloud (VPC).', example='Intranet', position='Query'),
}

model CreateSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9056C8B0-5799-493A-9655-70F607B8****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtshvj11k25255****'),
}

model CreateSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSynchronizationJobResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
  * After you purchase a data synchronization instance, you must call the [ConfigureSynchronizationJob](~~49447~~) operation to configure a data synchronization task. Then, the task is automatically started.
  *
 */
async function createSynchronizationJob(request: CreateSynchronizationJobRequest): CreateSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerChannelRequest {
  consumerGroupId: string(name='ConsumerGroupId', description='The ID of the consumer group. You can call the [DescribeConsumerChannel](~~264169~~) operation to query the consumer group ID.', example='dtsktbb6jdn2******', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='dtsboss6pn1w73****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='boss6pn1w73****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DeleteConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9E00ABE-2AD9-40A9-8C3C-D817E648****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerChannelResponseBody(name='body'),
}

async function deleteConsumerChannel(request: DeleteConsumerChannelRequest): DeleteConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumerGroupID: string(name='ConsumerGroupID', description='The ID of the consumer group. You can call the [DescribeConsumerGroup](~~122886~~) operation to query the consumer group ID.', example='dtssb911ydd192****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.', example='dtsg2m10r1x15a****', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D0ADAD5-DD97-41B6-B78F-D1961AB1****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  jobType?: string(name='JobType', position='Query'),
  regionId?: string(name='RegionId', description='The error code returned if the call failed.', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The dynamic error code. This parameter will be removed in the future.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model DeleteDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The operation that you want to perform. Set the value to **DeleteDtsJob**.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The operation that you want to perform. Set the value to **DeleteDtsJob**.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error message returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The ID of the request.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the data migration, data synchronization, or change tracking instance.', example='200'),
  requestId?: string(name='RequestId', description='The synchronization direction. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

> 

*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='The ID of the region in which the data migration or synchronization task resides. For more information, see [List of supported regions](~~141033~~).', example='true'),
}

model DeleteDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDtsJobResponseBody(name='body'),
}

async function deleteDtsJob(request: DeleteDtsJobRequest): DeleteDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration, data synchronization, or change tracking task.

> *   Separate multiple task IDs with commas (,).
> *   You can call the [DescribeDtsJobs](~~209702~~) operation to query task IDs.', example='l5o11f9029c****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model DeleteDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDtsJobsResponseBody(name='body'),
}

async function deleteDtsJobs(request: DeleteDtsJobsRequest): DeleteDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.', example='dtsyiwe9b0gp2p****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DeleteMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F28A96B1-F897-4246-833B-310A3345****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMigrationJobResponseBody(name='body'),
}

/**
  * >  After a data migration instance is released, it cannot be recovered.
  *
 */
async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSubscriptionInstanceRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtsmxg11pfp231****', position='Query'),
}

model DeleteSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubscriptionInstanceResponseBody(name='body'),
}

/**
  * >  After a change tracking instance is released, it cannot be recovered.
  *
 */
async function deleteSubscriptionInstance(request: DeleteSubscriptionInstanceRequest): DeleteSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.', example='dtshn6107ve264****', position='Query'),
}

model DeleteSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSynchronizationJobResponseBody(name='body'),
}

/**
  * >  After a data synchronization instance is released, it cannot be recovered.
  *
 */
async function deleteSynchronizationJob(request: DeleteSynchronizationJobRequest): DeleteSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelAccountRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tags?: string(name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeChannelAccountResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  password?: string(name='Password'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  username?: string(name='Username'),
}

model DescribeChannelAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelAccountResponseBody(name='body'),
}

async function describeChannelAccount(request: DescribeChannelAccountRequest): DescribeChannelAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelAccount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkJobId?: string(name='CheckJobId', position='Query'),
  checkType?: int32(name='CheckType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  jobName?: string(name='JobName', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeCheckJobsResponseBody = {
  checkJobs?: [ 
    {
      chargeType?: string(name='ChargeType'),
      checkPoint?: long(name='CheckPoint'),
      checkType?: int32(name='CheckType'),
      diffCount?: long(name='DiffCount'),
      diffSum?: long(name='DiffSum'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobId?: string(name='DtsJobId'),
      finishCount?: long(name='FinishCount'),
      groupId?: string(name='GroupId'),
      instanceClass?: string(name='InstanceClass'),
      jobName?: string(name='JobName'),
      jobStepId?: string(name='JobStepId'),
      parentJobType?: string(name='ParentJobType'),
      regionId?: string(name='RegionId'),
      status?: int32(name='Status'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='CheckJobs'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: long(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeCheckJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCheckJobsResponseBody(name='body'),
}

async function describeCheckJobs(request: DescribeCheckJobsRequest): DescribeCheckJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterOperateLogsRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='12323344****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Body'),
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which a DTS task runs.', example='dtsxxxxx', position='Body'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='k2gm967v16f****', position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds.', example='1650866995000', position='Body'),
  ownerID?: string(name='OwnerID', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds. If you do not specify this parameter, the data within the last seven days is returned by default.', example='1650866955000', position='Body'),
}

model DescribeClusterOperateLogsResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='500'),
  dataPoints?: [ 
    {
      content?: string(name='Content', description='Other description of the operation.', example='null'),
      id?: string(name='Id', description='The primary key of the log table.', example='237827'),
      logDatetime?: long(name='LogDatetime', description='The time when the operation is recorded. The value is in the UNIX timestamp format. Unit: milliseconds.', example='1642077211574'),
      newValue?: string(name='NewValue', description='The value of the parameter after the operation if the operation is an UPDATE operation.', example='105'),
      oldValue?: string(name='OldValue', description='The value of the parameter before the operation if the operation is an UPDATE operation.', example='100'),
      operationName?: string(name='OperationName', description='The type of the operation.', example='modify-oversold-ratio'),
      operationUser?: string(name='OperationUser', description='The user who performed the operation.', example='null'),
      success?: int32(name='Success', description='Indicates whether the request was successful. A value of **1** indicates that the request was successful.', example='1'),
    }
  ](name='DataPoints', description='The information about the operation logs.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned for an exception.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of records.', example='100'),
}

model DescribeClusterOperateLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterOperateLogsResponseBody(name='body'),
}

async function describeClusterOperateLogs(request: DescribeClusterOperateLogsRequest): DescribeClusterOperateLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterOperateLogs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeClusterUsedUtilizationRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is discontinued.', example='12323344****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Body'),
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the cluster. If the **MetricType** parameter is set to **CLUSTER**, enter the ID of the exclusive cluster. Otherwise, set this parameter to a node ID.', example='nodeid', position='Body'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='k2gm967v16f****', position='Body'),
  env?: string(name='Env', description='The cluster environment. Default value: **ALIYUN**.', example='ALIYUN', position='Body'),
  metricType?: string(name='MetricType', description='Specifies whether to query the metrics of the cluster or a node. Default value: CLUSTER. Valid values:

*   **CLUSTER**: query the metrics of the cluster.
*   **NODE**: query the metrics of a node.', example='NODE', position='Body'),
  ownerID?: string(name='OwnerID', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Body'),
}

model DescribeClusterUsedUtilizationResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='200'),
  cpuTotal?: float(name='CpuTotal', description='The CPU utilization of the cluster. Unit: percentage.', example='50'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtscluster_h3fl1cs217sx952'),
  diskTotal?: float(name='DiskTotal', description='The total disk size of the cluster. Unit: GB.', example='1024'),
  diskUsed?: float(name='DiskUsed', description='The disk usage of the cluster. Unit: GB.', example='96'),
  duTotal?: int32(name='DuTotal', description='The total number of DTS units (DUs).', example='30'),
  duUsed?: int32(name='DuUsed', description='The usage of DUs.', example='2'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  memoryTotal?: float(name='MemoryTotal', description='The total amount of memory. A value of 0 is temporarily returned.', example='0'),
  memoryUsed?: float(name='MemoryUsed', description='The memory usage. A value of 0 is temporarily returned.', example='0'),
  memoryUsedPercentage?: float(name='MemoryUsedPercentage', description='The memory usage.', example='1.0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  taskRunning?: int32(name='TaskRunning', description='The number of tasks that are in progress.', example='3'),
}

model DescribeClusterUsedUtilizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterUsedUtilizationResponseBody(name='body'),
}

async function describeClusterUsedUtilization(request: DescribeClusterUsedUtilizationRequest): DescribeClusterUsedUtilizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterUsedUtilization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConnectionStatusRequest {
  destinationEndpointArchitecture?: string(name='DestinationEndpointArchitecture', description='You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:

*   **SID**: non-RAC architecture
*   **RAC**: Real Application Cluster (RAC) architecture

>  This parameter is optional. The data type of this parameter is String.', example='SID', position='Query'),
  destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName', description='The name of the destination database or the authentication database.

> 
*   You must specify this parameter if the **DestinationEndpointEngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**. You must also specify this parameter if the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**.
*   If the **DestinationEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
*   If the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the destination database.', example='dtstestdata', position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', description='The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, and **Redis**.

>  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **RDS**, **DRDS**, **ECS**, **LocalInstance**, or **Express**.', example='MySQL', position='Query'),
  destinationEndpointIP?: string(name='DestinationEndpointIP', description='The endpoint of the destination database.

>  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.', example='172.16.88.***', position='Query'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID', description='The ID of the destination instance.', example='testsid', position='Query'),
  destinationEndpointInstanceType: string(name='DestinationEndpointInstanceType', description='The instance type of the destination database. Valid values:

> 
*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **LocalInstance**: self-managed database with a public IP address
*   **RDS**: ApsaraDB RDS instance
*   **DRDS**: PolarDB-X instance
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **Redis**: ApsaraDB for Redis instance
*   **PetaData**: HybridDB for MySQL instance
*   **POLARDB**: PolarDB for MySQL cluster
*   **PolarDB_o**: PolarDB for Oracle cluster
*   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
*   **Greenplum**: AnalyticDB for PostgreSQL instance', example='PolarDB_o', position='Query'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID', description='You must specify this parameter only if the **DestinationEndpointEngineName** parameter is set to **Oracle**. Valid values:

*   **SID**: non-RAC architecture
*   **RAC**: RAC architecture

>  This parameter is optional. The data type of this parameter is String.', example='SID', position='Query'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword', description='The password of the destination database account.', example='Test123456', position='Query'),
  destinationEndpointPort?: string(name='DestinationEndpointPort', description='The service port number of the source database.

>  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='3306', position='Query'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', description='The ID of the region where the destination instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName', description='The database account of the destination database.

>  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](~~26618~~) and [Overview of data synchronization scenarios](~~130744~~).', example='dtstest', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceEndpointArchitecture?: string(name='SourceEndpointArchitecture', description='You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:

*   **SID**: non-RAC architecture
*   **RAC**: RAC architecture

>  This parameter is optional.', example='SID', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', description='The name of the source database or the authentication database.

> 
*   You must specify this parameter if the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **MongoDB**. You must also specify this parameter if the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**.
*   If the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the source database. If the SourceEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
*   If the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the source database.', example='dtstestdata', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', description='The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, and **Redis**.

>  Default value: **MySQL**.', example='MySQL', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', description='The endpoint of the source database.

>  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.', example='172.16.88.***', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', description='The ID of the source instance.', example='rm-bp1imrtn6fq7h****', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', description='The type of the source instance. Valid values:

*   **RDS**: ApsaraDB RDS instance
*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database that is hosted on ECS
*   **Express**: self-managed database that is connected over Express Connect
*   **dg**: self-managed database that is connected over Database Gateway
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **POLARDB**: PolarDB for MySQL cluster
*   **PolarDB_o**: PolarDB for Oracle cluster', example='RDS', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', description='The SID of the Oracle database.

>  You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', description='The password of the source database account.', example='Test123456', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', description='The service port number of the source database.

>  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='3306', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', description='The ID of the region where the source instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', description='The database account of the source database.

>  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](~~26618~~) and [Overview of data synchronization scenarios](~~130744~~).', example='dtstest', position='Query'),
}

model DescribeConnectionStatusResponseBody = {
  destinationConnectionStatus?: map[string]any(name='DestinationConnectionStatus', description='The connectivity of DTS servers to the destination database.', example='{     "connectDetail": [       {         "testName": "PolarDB_o JDBC Connect",         "testSuccess": true       },       {         "testName": "Ping ",         "testSuccess": true       },       {         "testName": "Telnet ",         "testSuccess": true       }     ],     "connectRes": true,     "connectAdvice": ""   }'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0A47C784-70EF-4111-8677-369CAA00****'),
  sourceConnectionStatus?: map[string]any(name='SourceConnectionStatus', description='The connectivity of DTS servers to the source database.', example='{     "connectDetail": [       {         "testName": "Oracle JDBC Connect",         "testSuccess": true       },       {         "testName": "Ping ",         "testSuccess": false       },       {         "testName": "Telnet ",         "testSuccess": true       }     ],     "connectRes": true,     "connectAdvice": ""   }'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeConnectionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConnectionStatusResponseBody(name='body'),
}

async function describeConnectionStatus(request: DescribeConnectionStatusRequest): DescribeConnectionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConnectionStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsumerChannelRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='dtsboss6pn1w******', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='boss6pn1w******', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  parentChannelId?: string(name='ParentChannelId', description='The parent task ID of the distributed task.', example='dtsan5114c52******', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeConsumerChannelResponseBody = {
  consumerChannels?: [ 
    {
      consumerGroupId?: string(name='ConsumerGroupId', description='The ID of the consumer group.', example='dtsor2y66j4219****'),
      consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group.'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The username of the consumer group.', example='dtstest'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.', example='2021-06-20T12:00:00Z'),
      messageDelay?: long(name='MessageDelay', description='The message latency, which is the timestamp of the latest data consumed by the downstream client minus the timestamp of the latest data tracked by the change tracking task. The value is a UNIX timestamp. Unit: seconds.

For example, the latest data in the source database is generated at 10:00. The change tracking task reads the data generated at 09:55, and the downstream client consumes the data generated at 09:30. In this case, the message latency is the UNIX timestamp difference between 09:55 and 09:30.

>  If the return value of this parameter is **-1**, no client is connected to the consumer group.', example='1500'),
      unconsumedData?: long(name='UnconsumedData', description='The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.

>  If the return value of this parameter is -1, no client is connected to the consumer group.', example='186600'),
    }
  ](name='ConsumerChannels', description='The details of the consumer groups.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of consumer groups that can be displayed on one page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D66140B3-C747-42B6-8315-BAF6490E****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of consumer groups.', example='1'),
}

model DescribeConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsumerChannelResponseBody(name='body'),
}

async function describeConsumerChannel(request: DescribeConsumerChannelRequest): DescribeConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsumerGroupRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtso5xx5t9u19e****', position='Query'),
}

model DescribeConsumerGroupResponseBody = {
  consumerChannels?: {
    describeConsumerChannel?: [ 
    {
      consumerGroupID?: string(name='ConsumerGroupID', description='The ID of the consumer group.', example='dtspis1110z232****'),
      consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group.', example='consumergrouptest'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The username of the consumer group.', example='test'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.', example='2019-10-02T12:00:00Z'),
      messageDelay?: long(name='MessageDelay', description='The message delay, which is the current time minus the timestamp of the earliest unconsumed message in the change tracking instance. Unit: seconds.

>  If the return value of this parameter is **-1**, no client is connected to the consumer group.', example='172714'),
      unconsumedData?: long(name='UnconsumedData', description='The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.

>  If the return value of this parameter is **-1**, no client is connected to the consumer group.', example='186600'),
    }
  ](name='DescribeConsumerChannel')
  }(name='ConsumerChannels', description='The list of consumer groups.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of consumer groups that can be displayed on one page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4204E899-8193-4D7D-A4FB-3A7F9063****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of consumer groups.', example='1'),
}

model DescribeConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsumerGroupResponseBody(name='body'),
}

async function describeConsumerGroup(request: DescribeConsumerGroupRequest): DescribeConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDTSIPRequest {
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', description='The ID of the region where the destination instance resides. For more information, see [List of supported regions](~~141033~~).

>  If the destination instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceEndpointRegion: string(name='SourceEndpointRegion', description='The ID of the region where the source instance resides. For more information, see [List of supported regions](~~141033~~).

>  If the source instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.', example='cn-hangzhou', position='Query'),
}

model DescribeDTSIPResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The internal error code. This parameter will be removed in the future.', example='500'),
  dynamicMessage?: string(name='DynamicMessage', description='The CIDR blocks of DTS servers.', example='10.151.12.0/24,47.102.181.0/24,47.101.109.0/24,120.55.129.0/24,11.115.103.0/24,47.102.234.0/24'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C99C0BE-F312-40FA-ADFA-4DC1166B****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeDTSIPResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDTSIPResponseBody(name='body'),
}

/**
  * If the **source or destination instance** is an **on-premises database**, you need to call this operation to query the CIDR blocks of DTS servers. Then, you need to add the CIDR blocks of DTS servers to the security settings of the source or destination instance, for example, the firewall of your database. For more information, see [Add the CIDR blocks of DTS servers to the security settings of on-premises databases](~~176627~~).
  * >  If the **source or destination database** is an **ApsaraDB database instance** (such as RDS instance and ApsaraDB for MongoDB instance) or a **self-managed database hosted on ECS**, you do not need to add the CIDR blocks. When you click **Set Whitelist and Next** in the DTS console, DTS automatically add the CIDR blocks of DTS servers to the security settings of the source or destination instance.
  *
 */
async function describeDTSIP(request: DescribeDTSIPRequest): DescribeDTSIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDTSIP', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCheckReportUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkType: int32(name='CheckType', description='The data verification method. Valid values:

*   **1**: full data verification.
*   **2**: incremental data verification.', example='1', position='Query'),
  dbName: string(name='DbName', description='The name of the verified source database.', example='dtsdb', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the Data Transmission Service (DTS) task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='f4612nr2182****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tbName: string(name='TbName', description='The name of the table verified in the source database.', example='student', position='Query'),
}

model DescribeDataCheckReportUrlResponseBody = {
  dynamicMessage?: string(name='DynamicMessage', description='The URL for downloading the verification report.', example='https://check-result-file-sh.oss-cn-shanghai.aliyuncs.com/dw612cru18e****/dtsdb/diff/student.diff.zip?Expires=****'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='AF2DE23-B692-5B85-90B7-44B6F4D8****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeDataCheckReportUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataCheckReportUrlResponseBody(name='body'),
}

async function describeDataCheckReportUrl(request: DescribeDataCheckReportUrlRequest): DescribeDataCheckReportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCheckReportUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCheckTableDetailsRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkType: int32(name='CheckType', description='The data verification method. Valid values:

*   **1**: full data verification.
*   **2**: incremental data verification.', example='1', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='xd4e4xb419q****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', minimum=1, maximum=1000, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  schemaName?: string(name='SchemaName', description='The name of the schema whose data is verified in the source database.', example='dtstest', position='Query'),
  status?: string(name='Status', description='The status of the data verification result. Valid values:

*   **-1** (default): All status.
*   **6**: Inconsistent data detected in the table.', example='-1', position='Query'),
  tableName?: string(name='TableName', description='The name of the table whose data is verified in the source database.', example='student', position='Query'),
}

model DescribeDataCheckTableDetailsResponseBody = {
  diffTableCount?: long(name='DiffTableCount', description='The number of tables that contain inconsistent data.', example='1'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be discontinued in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  finishedCount?: long(name='FinishedCount', description='The total number of data rows that were verified.', example='7'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  tableDetails?: [ 
    {
      bootTime?: string(name='BootTime', description='The time when data verification was performed.', example='2023-01-18 11:26:59'),
      diffCount?: long(name='DiffCount', description='The number of data rows that contain inconsistent data.', example='1'),
      errorCode?: int32(name='ErrorCode', description='任务运行出错时，返回报错信息的错误编码。

- **1**：无主键表数量超过限制。
- **2**：差异数据超过300行。
- **3**：待查询的表不存在。
- **4**：查询数据的SQL语法错误。', example='1'),
      finishCount?: long(name='FinishCount', description='The number of data rows that were verified.', example='7'),
      id?: long(name='Id', description='The auto-increment primary key that is used to identify a data record in a verification result.', example='167401241974****'),
      sourceDbName?: string(name='SourceDbName', description='The name of the source database.', example='testdb'),
      sourceTbName?: string(name='SourceTbName', description='The name of the source table.', example='student'),
      status?: string(name='Status', description='The status of the data verification result. Valid values:

*   **0**: The data verification task was complete.
*   **2**: The data verification task was initialized.
*   **3**: The data verification task was running.
*   **5**: The data verification task failed.', example='0'),
      targetDbName?: string(name='TargetDbName', description='The name of the destination database.', example='testdb'),
      targetTbName?: string(name='TargetTbName', description='The name of the destination table.', example='person'),
      totalCount?: long(name='TotalCount', description='The total number of data rows.', example='8'),
    }
  ](name='TableDetails', description='The details of the data verification result.'),
  totalCount?: long(name='TotalCount', description='The total number of tables on which data verification was performed.', example='1'),
}

model DescribeDataCheckTableDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataCheckTableDetailsResponseBody(name='body'),
}

async function describeDataCheckTableDetails(request: DescribeDataCheckTableDetailsRequest): DescribeDataCheckTableDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCheckTableDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCheckTableDiffDetailsRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkType: int32(name='CheckType', example='2', position='Query'),
  dbName: string(name='DbName', example='db_dtstest', position='Query'),
  dtsJobId: string(name='DtsJobId', example='xd4e4xb419q****', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tbName: string(name='TbName', example='test_person', position='Query'),
}

model DescribeDataCheckTableDiffDetailsResponseBody = {
  dbName?: string(name='DbName', example='db_dtstest'),
  diffCount?: long(name='DiffCount', example='1'),
  diffDetails?: [ 
    {
      diff?: string(name='Diff', example='[     {         "column": "id",         "source": "9511",         "dest": "9511",         "isPrimary": true     },     {         "column": "state",         "source": "3",         "dest": "2",         "isPrimary": false     },     {         "column": "create_time",         "source": "2023-04-11 14:07:17.0",         "dest": "NULL",         "isPrimary": false     },     {         "column": "update_time",         "source": "2023-04-11 06:07:17.0",         "dest": "2023-04-11 06:02:29.0",         "isPrimary": false     } ]'),
      gmtCreated?: string(name='GmtCreated', example='2023-04-23T10:36:05.000+00:00'),
      id?: long(name='Id', example='13058****'),
    }
  ](name='DiffDetails'),
  dynamicMessage?: string(name='DynamicMessage', example='Type'),
  errCode?: string(name='ErrCode', example='InvalidParameter'),
  errMessage?: string(name='ErrMessage', example='The value of the parameter tbName is invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  instanceId?: string(name='InstanceId', example='dtsog8q1z3tc9t****"'),
  requestId?: string(name='RequestId', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', example='true'),
  tbName?: string(name='TbName', example='test_person'),
}

model DescribeDataCheckTableDiffDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataCheckTableDiffDetailsResponseBody(name='body'),
}

async function describeDataCheckTableDiffDetails(request: DescribeDataCheckTableDiffDetailsRequest): DescribeDataCheckTableDiffDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCheckTableDiffDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedClusterRequest {
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtsCluster****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDedicatedClusterResponseBody = {
  cpuUtilization?: long(name='CpuUtilization', description='The CPU utilization. Unit: percentage.', example='30'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtsCluster****'),
  dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='daily_test'),
  diskUtilization?: long(name='DiskUtilization', description='The disk usage.', example='50'),
  dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the instance.', example='dtsb8r****'),
  du?: long(name='Du', description='The number of DTS units (DUs).', example='30'),
  duUtilization?: long(name='DuUtilization', description='The DU usage. Unit: percentage.', example='16'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  gmtCreated?: long(name='GmtCreated', description='The time when the cluster was created.', example='1642476144000'),
  gmtFinished?: long(name='GmtFinished', description='The time when the cluster stopped.', example='1645200000000'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  memUtilization?: long(name='MemUtilization', description='The memory usage.', example='20'),
  nodeCount?: long(name='NodeCount', description='The number of nodes in the cluster.', example='5'),
  oversoldDu?: long(name='OversoldDu', description='The number of DUs that exceeds the upper limit.', example='60'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  state?: string(name='State', description='The status of the cluster. Valid values:

*   **init**: The cluster is being initialized.
*   **schedule**: The cluster is pending scheduling.
*   **running**: The cluster is running.
*   **upgrade**: The cluster is being upgraded.
*   **downgrade**: The cluster is being downgraded.
*   **locked**: The cluster is locked.
*   **releasing**: The cluster is being released.
*   **released**: The cluster is released.', example='inti'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalCpuCore?: long(name='TotalCpuCore', description='The total number of CPU cores.', example='100'),
  totalDiskGBSize?: long(name='TotalDiskGBSize', description='The total disk size. Unit: GB.', example='2048'),
  totalMemGBSize?: long(name='TotalMemGBSize', description='The total amount of memory. Unit: GB.', example='256'),
  usedCpuCore?: long(name='UsedCpuCore', description='The number of used CPU cores.', example='30'),
  usedDiskGBSize?: long(name='UsedDiskGBSize', description='The used disk size. Unit: GB.', example='1024'),
  usedDu?: long(name='UsedDu', description='The number of used DUs.', example='5'),
  usedMemGBSize?: long(name='UsedMemGBSize', description='The amount of used memory. Unit: GB.', example='128'),
}

model DescribeDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDedicatedClusterResponseBody(name='body'),
}

async function describeDedicatedCluster(request: DescribeDedicatedClusterRequest): DescribeDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedClusterMonitorRuleRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', example='dtsClustervcwn1oeyu5fx4yf', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDedicatedClusterMonitorRuleResponseBody = {
  cpuAlarmThreshold?: string(name='CpuAlarmThreshold', example='80'),
  dedicatedClusterId?: string(name='DedicatedClusterId', example='dtsClustervcwn1oeyu5fx4yf'),
  diskAlarmThreshold?: string(name='DiskAlarmThreshold', example='80'),
  duAlarmThreshold?: string(name='DuAlarmThreshold', example='46'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  memAlarmThreshold?: string(name='MemAlarmThreshold', example='80'),
  noticeSwitch?: string(name='NoticeSwitch', example='1'),
  phones?: string(name='Phones', example='186****7653'),
  requestId?: string(name='RequestId', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', example='true'),
}

model DescribeDedicatedClusterMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDedicatedClusterMonitorRuleResponseBody(name='body'),
}

async function describeDedicatedClusterMonitorRule(request: DescribeDedicatedClusterMonitorRuleRequest): DescribeDedicatedClusterMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedClusterMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsEtlJobVersionInfoRequest {
  dtsInstanceId: string(name='DtsInstanceId', description='The ID of the Data Transmission Service (DTS) instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.', example='dtsggk12iwya1a****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the ETL task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='l5512es7w15****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. You can call the [DescribeRegions](~~25609~~) operation to query the available Alibaba Cloud regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDtsEtlJobVersionInfoResponseBody = {
  dtsEtlJobVersionInfos?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the ETL task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1637229315000'),
      creator?: string(name='Creator', description='The ID of the creator.', example='10000000'),
      creatorName?: string(name='CreatorName', description='The username of the creator.', example='***@****.com'),
      dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the DTS instance.', example='dtsg******gd'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the ETL task.', example='l5512es7w15****'),
      dtsJobName?: string(name='DtsJobName', description='The name of the ETL task.', example='test_sql'),
      modifyTime?: string(name='ModifyTime', description='The time when the ETL task was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1637230117000'),
      safeCheckpoint?: string(name='SafeCheckpoint', description='The safe checkpoint of the ETL task.', example='1637230117000'),
      status?: string(name='Status', description='The log level. Valid values: ERROR, WARN, INFO, and DEBUG.', example='INFO'),
      version?: int32(name='Version', description='The version number of the ETL task.', example='9'),
    }
  ](name='DtsEtlJobVersionInfos', description='The details of ETL tasks.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='present environment is not support,so skip'),
  errCode?: string(name='ErrCode', description='The error code. This example indicates that the specified ETL task ID is invalid.', example='InvalidJobId'),
  errMessage?: string(name='ErrMessage', description='The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may have been deleted.', example='The specified dts job id %s is not exists.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Default value: 1.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of records returned on the current page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. If the call failed, false is returned.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of records.', example='200'),
}

model DescribeDtsEtlJobVersionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsEtlJobVersionInfoResponseBody(name='body'),
}

async function describeDtsEtlJobVersionInfo(request: DescribeDtsEtlJobVersionInfoRequest): DescribeDtsEtlJobVersionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsEtlJobVersionInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobConfigRequest {
  dtsJobId?: string(name='DtsJobId', position='Query'),
  forAcceleration?: string(name='ForAcceleration', position='Query'),
  module?: string(name='Module', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDtsJobConfigResponseBody = {
  parameters?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      defaultValue?: string(name='DefaultValue'),
      description?: string(name='Description'),
      forceRestart?: string(name='ForceRestart'),
      modifiable?: string(name='Modifiable'),
      module?: string(name='Module'),
      name?: string(name='Name'),
      recommendValue?: string(name='RecommendValue'),
      runningValue?: string(name='RunningValue'),
      valueType?: int32(name='ValueType'),
    }
  ](name='Parameters'),
  requestId?: string(name='RequestId'),
}

model DescribeDtsJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsJobConfigResponseBody(name='body'),
}

async function describeDtsJobConfig(request: DescribeDtsJobConfigRequest): DescribeDtsJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobDetailRequest {
  dtsInstanceID?: string(name='DtsInstanceID', description='DescribeDtsJobDetail', example='dtsta7w132u12h****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The state of the data migration or data synchronization task.

Valid values for a data migration task:

*   **NotStarted**: The migration is not started.
*   **Migrating**: The migration is in progress.
*   **Failed**: The migration failed.
*   **Finished**: The migration is complete.

Valid values for a data synchronization task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is in progress.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is complete.', example='ta7w132u12h****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the data migration, data synchronization, or change tracking task.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  syncSubJobHistory?: boolean(name='SyncSubJobHistory', example='默认为false，返回最近的一个同步子任务', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='Queries the details of a data migration, data synchronization, or change tracking task.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model DescribeDtsJobDetailResponseBody = {
  appName?: string(name='AppName', description='The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.', example='new'),
  beginTimestamp?: string(name='BeginTimestamp', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-15T08:25:34Z'),
  binlog?: string(name='Binlog'),
  binlogSite?: string(name='BinlogSite'),
  binlogTime?: string(name='BinlogTime'),
  bootTime?: string(name='BootTime'),
  checkpoint?: long(name='Checkpoint', description='The ID of the data migration, data synchronization, or change tracking instance.', example='1616405159'),
  code?: int32(name='Code', description='The topic of the change tracking instance.

>  This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](~~122863~~) operation to create a consumer group.', example='200'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='2021-03-23T07:30:31Z'),
  consumptionClient?: string(name='ConsumptionClient', description='The error code returned if the request failed.', example='114.***.***.**:dts********'),
  createTime?: string(name='CreateTime', description='The end time of the task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
  dataDeliveryChannelInfo?: {
    partitionNum?: int32(name='PartitionNum'),
    publicDproxyUrl?: string(name='PublicDproxyUrl'),
    region?: string(name='Region'),
    topic?: string(name='Topic'),
    vpcDproxyUrl?: string(name='VpcDproxyUrl'),
  }(name='DataDeliveryChannelInfo'),
  dataSynchronizationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    needUpgrade?: boolean(name='NeedUpgrade'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  databaseCount?: int32(name='DatabaseCount', description='The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2'),
  dbObject?: string(name='DbObject', description='Indicates whether the request was successful.', example='{\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}'),
  dedicatedClusterId?: string(name='DedicatedClusterId'),
  delay?: long(name='Delay', description='The ID of the request.', example='0'),
  demoJob?: boolean(name='DemoJob'),
  destNetType?: string(name='DestNetType', description='The instance class.

>  For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).', example='CLASSIC'),
  destinationEndpoint?: {
    canModifyPassword?: boolean(name='CanModifyPassword'),
    databaseName?: string(name='DatabaseName', description='The connection settings of the destination instance.', example='dtstestdata'),
    engineName?: string(name='EngineName', description='The database service port of the destination instance.', example='MySQL'),
    instanceID?: string(name='InstanceID', description='The name of the database that contains the migrated objects in the destination instance.', example='rm-bp1imrtn6fq7h****'),
    instanceType?: string(name='InstanceType', description='The IP address of the destination instance.', example='RDS'),
    ip?: string(name='Ip', description='The SID of the Oracle database.

>  This parameter is returned only if the **EngineName** parameter of the destination instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='172.16.88.***'),
    oracleSID?: string(name='OracleSID', description='The username of the account that is used to connect to the source database.', example='testsid'),
    port?: string(name='Port', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).', example='3306'),
    region?: string(name='Region', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
*   **ENABLE_ONLY\\_4\\_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY\\_4\\_KAFKA_SCRAM_SHA\\_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='cn-hangzhou'),
    sslSolutionEnum?: string(name='SslSolutionEnum', description='The ID of the Alibaba Cloud account to which the source ApsaraDB RDS instance belongs.', example='DISABLE'),
    userName?: string(name='UserName', description='The ID of the destination instance.', example='dtstest'),
  }(name='DestinationEndpoint', description='The name of the database that contains the objects to be migrated from the source instance.'),
  dtsBisLabel?: string(name='DtsBisLabel'),
  dtsInstanceID?: string(name='DtsInstanceID', description='Indicates whether the new change tracking feature is used.

>  This parameter is returned only for change tracking instances of the new version.', example='dtsi03e3zty16i****'),
  dtsJobClass?: string(name='DtsJobClass', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='xlarge'),
  dtsJobDirection?: string(name='DtsJobDirection', description='The beginning of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='Forward'),
  dtsJobId?: string(name='DtsJobId', description='API test', example='i03e3zty16i****'),
  dtsJobName?: string(name='DtsJobName', description='The synchronization direction. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

> 
*   Default value: **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [List of supported regions](~~141033~~).'),
  dynamicMessage?: string(name='DynamicMessage', description='The error message returned if the request failed.', example='DtsJobId'),
  endTimestamp?: string(name='EndTimestamp', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).', example='2021-03-26T14:03:21Z'),
  errCode?: string(name='ErrCode', description='The start offset of incremental data migration or synchronization. The value is a UNIX timestamp. Unit: seconds.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

>  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.', example='The Value of Input Parameter %s is not valid.'),
  errorMessage?: string(name='ErrorMessage', description='The name of the data migration, data synchronization, or change tracking task.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
  etlCalculator?: string(name='EtlCalculator', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](~~209545~~).', example='{ 	"cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f44299e1\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e0a99\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e9242987\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 	}] }'),
  expireTime?: string(name='ExpireTime', description='The error code. This parameter will be removed in the future.', example='2021-06-16T08:01:19Z'),
  finishTime?: string(name='FinishTime', description='The state of the data migration or data synchronization task.

Valid values for a data migration task:

*   **NotStarted**: The migration is not started.
*   **Migrating**: The migration is in progress.
*   **Failed**: The migration failed.
*   **Finished**: The migration is complete.

Valid values for a data synchronization task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is in progress.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is complete.', example='2021-03-16T10:34:17Z'),
  groupId?: string(name='GroupId', description='The operator information of the extract, transform, and load (ETL) task.

>  This parameter is returned only if you query the details of an ETL task.', example='i03e3zty16i****'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='200'),
  jobType?: string(name='JobType'),
  lastUpdateTime?: string(name='LastUpdateTime'),
  maxDu?: double(name='MaxDu'),
  migrationMode?: {
    dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad', description='The database account of the destination instance.', example='false'),
    dataInitialization?: boolean(name='DataInitialization', description='The database engine of the destination instance.', example='true'),
    dataSynchronization?: boolean(name='DataSynchronization', description='The migration types or synchronization types.', example='true'),
    structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether data transformation is performed. Valid values:

*   **true**: Data transformation is performed.
*   **false**: Data transformation is not performed.', example='true'),
  }(name='MigrationMode', description='The type of the destination instance.'),
  minDu?: double(name='MinDu'),
  payType?: string(name='PayType', description='The error message returned if the task failed.', example='PrePaid'),
  requestId?: string(name='RequestId', description='The network type of the consumer client. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: Virtual Private Cloud (VPC)', example='29207299-7C41-493A-BA4F-2FAC5DE4****'),
  reserved?: string(name='Reserved', description='The ID of the data migration, data synchronization, or change tracking task.', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
  resourceGroupDisplayName?: string(name='ResourceGroupDisplayName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  retryState?: {
    errMessage?: string(name='ErrMessage'),
    jobId?: string(name='JobId'),
    maxRetryTime?: int32(name='MaxRetryTime'),
    module?: string(name='Module'),
    retryCount?: int32(name='RetryCount'),
    retryTarget?: string(name='RetryTarget'),
    retryTime?: int32(name='RetryTime'),
    retrying?: boolean(name='Retrying'),
  }(name='RetryState'),
  sourceEndpoint?: {
    aliyunUid?: string(name='AliyunUid', description='The database engine of the source instance.', example='140692647406****'),
    canModifyPassword?: boolean(name='CanModifyPassword'),
    databaseName?: string(name='DatabaseName', description='The database service port of the source instance.', example='dtstestdata'),
    engineName?: string(name='EngineName', description='The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.', example='MySQL'),
    instanceID?: string(name='InstanceID', description='The system ID (SID) of the Oracle database.

>  This parameter is returned only if the **EngineName** parameter of the source instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='rm-bp1162kryivb8****'),
    instanceType?: string(name='InstanceType', description='The IP address of the source instance.', example='RDS'),
    ip?: string(name='Ip', description='The connection settings of the source instance.', example='172.16.88.***'),
    oracleSID?: string(name='OracleSID', description='The synchronization direction. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.', example='testsid'),
    port?: string(name='Port', description='The ID of the source instance.', example='3306'),
    region?: string(name='Region', description='The type of the source instance.', example='cn-hangzhou'),
    roleName?: string(name='RoleName', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
*   **ENABLE_ONLY\\_4\\_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY\\_4\\_KAFKA_SCRAM_SHA\\_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='ram-for-dts'),
    sslSolutionEnum?: string(name='SslSolutionEnum', description='The synchronization direction. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

>  This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='DISABLE'),
    userName?: string(name='UserName', description='The ID of the region in which the source instance resides. For more information, see [List of supported regions](~~141033~~).', example='dtstest'),
  }(name='SourceEndpoint', description='The ID of the DTS task.'),
  status?: string(name='Status', description='The ID of the data migration, data synchronization, or change tracking instance.', example='Migrating'),
  subDistributedJob?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      databaseCount?: int32(name='DatabaseCount'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destNetType?: string(name='DestNetType'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      etlCalculator?: string(name='EtlCalculator'),
      expireTime?: string(name='ExpireTime'),
      finishTime?: string(name='FinishTime'),
      groupId?: string(name='GroupId'),
      isDemoJob?: boolean(name='IsDemoJob'),
      jobType?: string(name='JobType'),
      maxDu?: double(name='MaxDu'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      minDu?: double(name='MinDu'),
      originType?: string(name='OriginType'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow'),
        rps?: string(name='Rps'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkResult?: string(name='CheckResult'),
            failedReason?: string(name='FailedReason'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMsg?: string(name='ErrMsg'),
        jobId?: string(name='JobId'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        module?: string(name='Module'),
        retryCount?: int32(name='RetryCount'),
        retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
        retryTime?: int32(name='RetryTime'),
        retrying?: boolean(name='Retrying'),
      }(name='RetryState'),
      reverseJob?: {
        appName?: string(name='AppName'),
        beginTimestamp?: string(name='BeginTimestamp'),
        checkpoint?: string(name='Checkpoint'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
        consumptionClient?: string(name='ConsumptionClient'),
        createTime?: string(name='CreateTime'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataEtlStatus'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataSynchronizationStatus'),
        databaseCount?: int32(name='DatabaseCount'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destNetType?: string(name='DestNetType'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        endTimestamp?: string(name='EndTimestamp'),
        errorMessage?: string(name='ErrorMessage'),
        etlCalculator?: string(name='EtlCalculator'),
        expireTime?: string(name='ExpireTime'),
        finishTime?: string(name='FinishTime'),
        groupId?: string(name='GroupId'),
        isDemoJob?: boolean(name='IsDemoJob'),
        jobType?: string(name='JobType'),
        maxDu?: double(name='MaxDu'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        minDu?: double(name='MinDu'),
        originType?: string(name='OriginType'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow'),
          rps?: string(name='Rps'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkResult?: string(name='CheckResult'),
              failedReason?: string(name='FailedReason'),
              repairMethod?: string(name='RepairMethod'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        retryState?: {
          errMsg?: string(name='ErrMsg'),
          jobId?: string(name='JobId'),
          maxRetryTime?: int32(name='MaxRetryTime'),
          module?: string(name='Module'),
          retryCount?: int32(name='RetryCount'),
          retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
          retryTime?: int32(name='RetryTime'),
          retrying?: boolean(name='Retrying'),
        }(name='RetryState'),
        reverseJob?: any(name='ReverseJob'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='StructureInitializationStatus'),
        subscribeTopic?: string(name='SubscribeTopic'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl'),
          dml?: boolean(name='Dml'),
        }(name='SubscriptionDataType'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost'),
          publicHost?: string(name='PublicHost'),
          vpcHost?: string(name='VpcHost'),
        }(name='SubscriptionHost'),
        synchronizationDirection?: string(name='SynchronizationDirection'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid'),
            creator?: long(name='Creator'),
            gmtCreate?: string(name='GmtCreate'),
            gmtModified?: string(name='GmtModified'),
            id?: long(name='Id'),
            regionId?: string(name='RegionId', description='region_id'),
            resourceId?: string(name='ResourceId', description='dts instance id'),
            resourceType?: string(name='ResourceType'),
            scope?: string(name='Scope'),
            srcRegion?: string(name='SrcRegion'),
            tagCategory?: string(name='TagCategory'),
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='TagList'),
        taskType?: string(name='TaskType'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      subSyncJob?: [ any ](name='SubSyncJob'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl'),
        dml?: boolean(name='Dml'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        vpcHost?: string(name='VpcHost'),
      }(name='SubscriptionHost'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid'),
          creator?: long(name='Creator'),
          gmtCreate?: string(name='GmtCreate'),
          gmtModified?: string(name='GmtModified'),
          id?: long(name='Id'),
          regionId?: string(name='RegionId', description='region_id'),
          resourceId?: string(name='ResourceId', description='dts instance id'),
          resourceType?: string(name='ResourceType'),
          scope?: string(name='Scope'),
          srcRegion?: string(name='SrcRegion'),
          tagCategory?: string(name='TagCategory'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
      taskType?: string(name='TaskType'),
    }
  ](name='SubDistributedJob'),
  subSyncJob?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      databaseCount?: int32(name='DatabaseCount'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destNetType?: string(name='DestNetType'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      etlCalculator?: string(name='EtlCalculator'),
      expireTime?: string(name='ExpireTime'),
      finishTime?: string(name='FinishTime'),
      groupId?: string(name='GroupId'),
      isDemoJob?: boolean(name='IsDemoJob'),
      jobType?: string(name='JobType'),
      maxDu?: double(name='MaxDu'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      minDu?: double(name='MinDu'),
      originType?: string(name='OriginType'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow'),
        rps?: string(name='Rps'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkResult?: string(name='CheckResult'),
            failedReason?: string(name='FailedReason'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMsg?: string(name='ErrMsg'),
        jobId?: string(name='JobId'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        module?: string(name='Module'),
        retryCount?: int32(name='RetryCount'),
        retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
        retryTime?: int32(name='RetryTime'),
        retrying?: boolean(name='Retrying'),
      }(name='RetryState'),
      reverseJob?: {
        appName?: string(name='AppName'),
        beginTimestamp?: string(name='BeginTimestamp'),
        checkpoint?: string(name='Checkpoint'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
        consumptionClient?: string(name='ConsumptionClient'),
        createTime?: string(name='CreateTime'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataEtlStatus'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataSynchronizationStatus'),
        databaseCount?: int32(name='DatabaseCount'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destNetType?: string(name='DestNetType'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        endTimestamp?: string(name='EndTimestamp'),
        errorMessage?: string(name='ErrorMessage'),
        etlCalculator?: string(name='EtlCalculator'),
        expireTime?: string(name='ExpireTime'),
        finishTime?: string(name='FinishTime'),
        groupId?: string(name='GroupId'),
        isDemoJob?: boolean(name='IsDemoJob'),
        jobType?: string(name='JobType'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        originType?: string(name='OriginType'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow'),
          rps?: string(name='Rps'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkResult?: string(name='CheckResult'),
              failedReason?: string(name='FailedReason'),
              repairMethod?: string(name='RepairMethod'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        retryState?: {
          errMsg?: string(name='ErrMsg'),
          jobId?: string(name='JobId'),
          maxRetryTime?: int32(name='MaxRetryTime'),
          module?: string(name='Module'),
          retryCount?: int32(name='RetryCount'),
          retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
          retryTime?: int32(name='RetryTime'),
          retrying?: boolean(name='Retrying'),
        }(name='RetryState'),
        reverseJob?: any(name='ReverseJob'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='StructureInitializationStatus'),
        subscribeTopic?: string(name='SubscribeTopic'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl'),
          dml?: boolean(name='Dml'),
        }(name='SubscriptionDataType'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost'),
          publicHost?: string(name='PublicHost'),
          vpcHost?: string(name='VpcHost'),
        }(name='SubscriptionHost'),
        synchronizationDirection?: string(name='SynchronizationDirection'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid'),
            creator?: long(name='Creator'),
            gmtCreate?: string(name='GmtCreate'),
            gmtModified?: string(name='GmtModified'),
            id?: long(name='Id'),
            regionId?: string(name='RegionId', description='region_id'),
            resourceId?: string(name='ResourceId', description='dts instance id'),
            resourceType?: string(name='ResourceType'),
            scope?: string(name='Scope'),
            srcRegion?: string(name='SrcRegion'),
            tagCategory?: string(name='TagCategory'),
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='TagList'),
        taskType?: string(name='TaskType'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      subSyncJob?: [ any ](name='SubSyncJob'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl'),
        dml?: boolean(name='Dml'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        vpcHost?: string(name='VpcHost'),
      }(name='SubscriptionHost'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid'),
          creator?: long(name='Creator'),
          gmtCreate?: string(name='GmtCreate'),
          gmtModified?: string(name='GmtModified'),
          id?: long(name='Id'),
          regionId?: string(name='RegionId', description='region_id'),
          resourceId?: string(name='ResourceId', description='dts instance id'),
          resourceType?: string(name='ResourceType'),
          scope?: string(name='Scope'),
          srcRegion?: string(name='SrcRegion'),
          tagCategory?: string(name='TagCategory'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
      taskType?: string(name='TaskType'),
    }
  ](name='SubSyncJob'),
  subscribeTopic?: string(name='SubscribeTopic', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
  subscriptionDataType?: {
    ddl?: boolean(name='Ddl', description='The private endpoint of the change tracking instance in the `<Address>:<Port number>` format.', example='true'),
    dml?: boolean(name='Dml', description='The public endpoint of the change tracking instance in the `<Address>:<Port number>` format.', example='true'),
  }(name='SubscriptionDataType', description='The VPC endpoint of the change tracking instance in the `<Address>:<Port number>` format.'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost', description='The endpoint of the change tracking instance.', example='dts-cn-****-internal.aliyuncs.com:18002'),
    publicHost?: string(name='PublicHost', description='Indicates whether schema migration or schema synchronization is performed. Valid values:

*   **true**: Schema migration or schema synchronization is performed.
*   **false**: Schema migration or schema synchronization is not performed.', example='dts-cn-****.aliyuncs.com:18001'),
    vpcHost?: string(name='VpcHost', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**: Incremental data migration or synchronization is performed.
*   **false**: Incremental data migration or synchronization is not performed.', example='dts-cn-****-vpc.aliyuncs.com:18003'),
  }(name='SubscriptionHost', description='Indicates whether full data migration or synchronization is performed. Valid values:

*   **true**: Full data migration or synchronization is performed.
*   **false**: Full data migration or synchronization is not performed.'),
  success?: boolean(name='Success', description='The latency of incremental data migration or synchronization.

>  If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.', example='true'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The status code returned.', example='Forward'),
  taskType?: string(name='TaskType'),
}

model DescribeDtsJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsJobDetailResponseBody(name='body'),
}

async function describeDtsJobDetail(request: DescribeDtsJobDetailRequest): DescribeDtsJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobsRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which the task runs.', example='dtscluster_atyl3b5214uk***', position='Query'),
  destProductType?: string(name='DestProductType', position='Query'),
  dtsBisLabel?: string(name='DtsBisLabel', description='The environment tag of the DTS instance. Valid values:

- **normal**
- **online**', example='normal', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsi03e3zty16i****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='qa110wq5r93hb49', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the parent task.

>  In most cases, you do not need to specify this parameter.', example='pk13r731m****', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **MIGRATION**: data migration. This is the default value.
*   **SYNC**: data synchronization.
*   **SUBSCRIBE**: change tracking.', example='MIGRATION', position='Query'),
  orderColumn?: string(name='OrderColumn', description='The basis on which the returned DTS tasks are sorted. Valid values:

*   **CreateTime**: sorts the DTS tasks based on the points in time when the DTS tasks are created.
*   **FinishTime**: sorts the DTS tasks based on the points in time when the DTS tasks are complete.
*   **duLimit** sorts the DTS tasks based on the upper limits on DTS Units (DUs) that the DTS tasks can use. This option applies only to the DTS tasks that are run on a DTS dedicated cluster.

>  You can also set the **OrderDirection** parameter to specify whether to sort the DTS tasks in ascending or descending order.', example='CreateTime', position='Query'),
  orderDirection?: string(name='OrderDirection', description='The order in which the returned DTS tasks are sorted. Valid values:

*   **ASC**: sorts the DTS tasks in ascending order. This is the default value.
*   **DESC**: sorts the DTS tasks in descending order.', example='ASC', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=1000, position='Query'),
  params?: string(name='Params', description='The content of the query condition.

>  You must set the **Type** parameter to specify the type of the query condition.', example='dtspk3f13r731m****', position='Query'),
  region?: string(name='Region', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='This parameter is discontinued.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  srcProductType?: string(name='SrcProductType', position='Query'),
  status?: string(name='Status', description='The state of the DTS task.

Valid values for a data migration task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a data synchronization task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Initializing**: The task is being initialized.
*   **InitializeFailed**: Initialization failed.
*   **Synchronizing**: The task is in progress.
*   **Failed**: The task failed.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a change tracking task:

*   **NotConfigured**: The task is not configured.
*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Retrying**: The task is being retried.
*   **Abnormal**: The task is not running as expected.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.', example='Migrating', position='Query'),
  tags?: string(name='Tags', description='The tags of the DTS task to be queried. Specify tags in the JSON format.

>  You can call the **ListTagResources** operation to query the tag key and tag value.', example='[     {         \\"key\\": \\"testK\\",         \\"value\\": \\"testV\\"     }  ]', position='Query'),
  type?: string(name='Type', description='The type of the query condition. Valid values:

*   **instance**: queries DTS tasks based on the ID of a DTS instance.
*   **name**: queries DTS tasks based on the name of a DTS instance. Fuzzy match is supported.
*   **srcRds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the source instance of a DTS task.
*   **rds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the destination instance of a DTS task.

>  You must set the **Params** parameter to specify the content of the query condition.', example='instance', position='Query'),
  withoutDbList?: boolean(name='WithoutDbList', description='Specifies whether to skip the **DbObject** parameter in the response. The DbObject parameter specifies the objects of the data migration, data synchronization, or change tracking task. Valid values:

- **true**: does not return **DbObject**.
- **false**: returns **DbObject**. If you set this parameter to false, the response time is shortened.', example='true', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model DescribeDtsJobsResponseBody = {
  dtsJobList?: [ 
    {
      appName?: string(name='AppName', description='Indicates whether the **new** change tracking feature is used.

>  This parameter is returned only for change tracking instances of the new version.', example='new'),
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-15T08:25:34Z'),
      checkpoint?: string(name='Checkpoint', description='The start offset of incremental data synchronization. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1616899019'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-23T07:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114...:dts******'),
      cpuUsage?: string(name='CpuUsage', description='The CPU utilization of the instance. Unit: percentage.', example='1'),
      createTime?: string(name='CreateTime', description='The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
      dataCloudStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='framework: DTS-31009: In process of processing data ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true** 
- **false**', example='false'),
        percent?: string(name='Percent', description='The progress of the task. Unit: percentage.', example='85'),
        progress?: string(name='Progress', description='The number of tables that have been migrated.', example='1'),
        status?: string(name='Status', description='The state of the task. For more information about the valid values, see the description of the request parameter **Status**.', example='Migrating'),
      }(name='DataCloudStatus', description='The state of the physical gateway-based migration task.'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='The task has failed for a long time and cannot be recovered.'),
        percent?: string(name='Percent', description='The progress of the ETL task.', example='95'),
        progress?: string(name='Progress', description='The number of records that have been processed by the ETL task.', example='0/0'),
        status?: string(name='Status', description='The state of the ETL task. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task is not delayed.', example='Finished'),
      }(name='DataEtlStatus', description='The state of the extract, transform, and load (ETL) task. Valid values:

>  This parameter collection is returned only if an ETL task is configured.'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of full data synchronization. This is expressed as a percentage.', example='100'),
        progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='44755'),
        status?: string(name='Status', description='The state of full data synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
      }(name='DataInitializationStatus', description='The state of full data synchronization.'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration or synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

*   **true**: yes
*   **false**: no

>  To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.', example='true'),
        percent?: string(name='Percent', description='The progress of incremental data migration or synchronization.', example='95'),
        progress?: string(name='Progress', description='The number of records that have been migrated or synchronized during incremental data migration or synchronization.', example='0/0'),
        status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task is not delayed.', example='Catched'),
      }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
      dbObject?: string(name='DbObject', description='The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see "Objects of DTS tasks".', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
      dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which a DTS task runs.', example='dtscluster_ft7y3**********'),
      delay?: long(name='Delay', description='The latency of incremental data synchronization. Unit: seconds.', example='0'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1imrtn6fq7h****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

>  This parameter is returned only if the **EngineName** parameter of the destination instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
*   **ENABLE_ONLY\\_4\\_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY\\_4\\_KAFKA_SCRAM_SHA\\_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      dtsBisLabel?: string(name='DtsBisLabel', description='The environment tag of the DTS instance. Valid values:

- **normal**
- **online**', example='normal'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data synchronization instance.', example='dtsi03e3zty16i****'),
      dtsJobClass?: string(name='DtsJobClass', description='The instance class.

>  For more information about the test performance of each instance class, see [Specifications of data synchronization instances](~~26605~~).', example='large'),
      dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. The value is **Reverse**.', example='Forward'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the data synchronization task.', example='i03e3zty16i****'),
      dtsJobName?: string(name='DtsJobName', description='The name of the data synchronization task.', example='RDS_TO_RDS_MIGRATION'),
      duRealUsage?: string(name='DuRealUsage'),
      duUsage?: long(name='DuUsage', description='The number of DUs that have been used.', example='15'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-26T14:03:21Z'),
      errorDetails?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code returned.', example='DTS-31009'),
          helpUrl?: string(name='HelpUrl', description='The URL of the documentation.', example='https://**.ali**.com/**'),
        }
      ](name='ErrorDetails', description='The error message returned.'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
      etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
      expireTime?: string(name='ExpireTime', description='The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

>  This parameter is returned only if the value of the **PayType** parameter is **PrePaid**.', example='2022-03-16T08:01:19Z'),
      fullDataCheckStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of the full data verification task. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The progress of the full data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
        status?: string(name='Status', description='The state of the full data verification task. Valid values:

- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed. 
- **Finished**: The verification is complete.', example='Checking'),
      }(name='FullDataCheckStatus', description='The state information about the full data verification task.'),
      incDataCheckStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of the incremental data verification task. Unit: percentage.', example='95'),
        progress?: string(name='Progress', description='The progress of the incremental data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
        status?: string(name='Status', description='The state of the incremental data verification task. Valid values:

- **Catched**: The verification is delayed. 
- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed.', example='Checking'),
      }(name='IncDataCheckStatus', description='The state information about the incremental data verification task.'),
      jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

- **MIGRATION**: data migration task 
- **SYNC**: data synchronization task 
- **SUBSCRIBE**: change tracking task', example='MIGRATION'),
      maxDu?: double(name='MaxDu'),
      memUsage?: string(name='MemUsage', description='The memory that has been used. Unit: MB.', example='500'),
      migrationErrCode?: string(name='MigrationErrCode', description='The error code.', example='dts.retry.err.0046'),
      migrationErrHelpDocId?: string(name='MigrationErrHelpDocId', description='The ID of the error code-related documentation.', example='462133'),
      migrationErrHelpDocKey?: string(name='MigrationErrHelpDocKey', description='The key of the error code-related documentation.', example='DTS-RETRY-ERR-0046'),
      migrationErrMsg?: string(name='MigrationErrMsg', description='The error message.', example='dts.retry.err.0046.msg'),
      migrationErrType?: string(name='MigrationErrType', description='The type of the error code.', example='ForeignKey'),
      migrationErrWorkaround?: string(name='MigrationErrWorkaround', description='The solution to the error.', example='dts.retry.err.0046.workaround'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        fullDataCheck?: boolean(name='FullDataCheck', description='Indicates whether full data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
        incDataCheck?: boolean(name='IncDataCheck', description='Indicates whether incremental data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or schema synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      }(name='MigrationMode', description='The migration or synchronization modes.'),
      minDu?: double(name='MinDu'),
      originType?: string(name='OriginType', description='The source of the task. Valid values:

*   **PTS**
*   **DMS**
*   **DTS**', example='DTS'),
      payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
      performance?: {
        flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: MB/s.', example='1'),
        rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data migration or synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
            checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

*   **Success**
*   **Failed**', example='Success'),
            failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        errorMessage?: string(name='ErrorMessage', description='The cause of the precheck failure.', example='CHECK__ERROR_SAME_OBJ.'),
        percent?: string(name='Percent', description='The precheck progress. This is expressed as a percentage.', example='100'),
        status?: string(name='Status', description='The precheck status. Valid values:

*   **NotStarted**
*   **Suspending**:
*   **Checking**
*   **Failed**
*   **Finished**', example='Finished'),
      }(name='PrecheckStatus', description='The precheck state.'),
      reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
      resourceGroupDisplayName?: string(name='ResourceGroupDisplayName', description='The name of the resource group.', example='default resource group'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
      retryState?: {
        errMessage?: string(name='ErrMessage', description='The error message returned if these retries failed.', example='Unexpected error'),
        jobId?: string(name='JobId', description='The task ID.', example='bi6e22ay243****'),
        maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
        migrationErrCode?: string(name='MigrationErrCode', description='The error code.', example='dts.retry.err.0046'),
        migrationErrHelpDocId?: string(name='MigrationErrHelpDocId', description='The ID of the error code-related documentation.', example='462133'),
        migrationErrHelpDocKey?: string(name='MigrationErrHelpDocKey', description='The key of the error code-related documentation.', example='DTS-RETRY-ERR-0046'),
        migrationErrMsg?: string(name='MigrationErrMsg', description='The error message.', example='dts.retry.err.0046.msg'),
        migrationErrType?: string(name='MigrationErrType', description='The type of the error code.', example='ForeignKey'),
        migrationErrWorkaround?: string(name='MigrationErrWorkaround', description='The solution to the error.', example='dts.retry.err.0046.workaround'),
        module?: string(name='Module', description='The progress of the instance when DTS retries.', example='03'),
        retryCount?: int32(name='RetryCount', description='The number of retries that have been performed.', example='5'),
        retryTarget?: string(name='RetryTarget', description='The object on which these retries are performed. Valid values:

- **srcDB**: the source database 
- **destDB**: the destination database 
- **inner_module**: an internal module of DTS', example='srcDB'),
        retryTime?: int32(name='RetryTime', description='The time that has elapsed from the time when the first retry starts. Unit: seconds.', example='3600'),
        retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

- **true**
- **false**', example='false'),
      }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint', description='The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1616980369'),
        cpuUsage?: string(name='CpuUsage', description='The CPU utilization of the instance. Unit: percentage.', example='90'),
        createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-16T08:01:19Z'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been synchronized during initial full data synchronization.', example='43071'),
          status?: string(name='Status', description='The state of initial full data synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='DataInitializationStatus', description='The state of initial full data synchronization.'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true**
- **false**

> To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.', example='true'),
          percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during incremental data migration or synchronization.', example='20001'),
          status?: string(name='Status', description='The state of incremental data synchronization.', example='Migrating'),
        }(name='DataSynchronizationStatus', description='The state of incremental data synchronization.'),
        dbObject?: string(name='DbObject', description='The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
        dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which a DTS task runs.', example='dtscluster_dpwl3**********'),
        delay?: long(name='Delay', description='The latency of incremental data synchronization. Unit: seconds.', example='0'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the synchronized objects in the destination instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1162kryivb8****'),
          instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the destination instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
        }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
        dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data synchronization instance.', example='dtsi03e3zty16i****'),
        dtsJobClass?: string(name='DtsJobClass', description='The instance class. 

> For more information about the test performance of each instance class, see [Specifications of data synchronization instances](~~26605~~).', example='large'),
        dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. **Reverse** is returned.', example='Reverse'),
        dtsJobId?: string(name='DtsJobId', description='The ID of the synchronization task.', example='i03e3zty16i****'),
        dtsJobName?: string(name='DtsJobName', description='The name of the data synchronization task.', example='RDS_TO_RDS_MIGRATION'),
        duUsage?: long(name='DuUsage', description='The number of DUs that have been used.', example='15'),
        errorDetails?: [ 
          {
            errorCode?: string(name='ErrorCode', description='The error code returned.', example='DTS-31009'),
            helpUrl?: string(name='HelpUrl', description='The URL of the documentation.', example='https://**.ali**.com/**'),
          }
        ](name='ErrorDetails', description='The error message returned.'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
        etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
        expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC. 

> This parameter is returned only if the returned value of **PayType** is **PrePaid**.', example='2023-03-16T08:01:19Z'),
        fullDataCheckStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of the full data verification task. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The progress of the full data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
          status?: string(name='Status', description='The state of the full data verification task. Valid values:

- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed. 
- **Finished**: The verification is complete.', example='Checking'),
        }(name='FullDataCheckStatus', description='The state information about the full data verification task.'),
        incDataCheckStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of the incremental data verification task. Unit: percentage.', example='95'),
          progress?: string(name='Progress', description='The progress of the incremental data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
          status?: string(name='Status', description='The state of the incremental data verification task. Valid values:

- **Catched**: The verification is delayed. 
- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed.', example='Checking'),
        }(name='IncDataCheckStatus', description='The state information about the incremental data verification task.'),
        maxDu?: double(name='MaxDu'),
        memUsage?: string(name='MemUsage', description='The memory that has been used. Unit: MB.', example='500'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization', description='Indicates whether initial full data synchronization is performed. Valid values:

-  **true**
-  **false**', example='true'),
          dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data synchronization is performed. Valid values:
-  **true**
-  **false**', example='true'),
          fullDataCheck?: boolean(name='FullDataCheck', description='Indicates whether full data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
          incDataCheck?: boolean(name='IncDataCheck', description='Indicates whether incremental data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
          structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether initial schema synchronization is performed. Valid values:
-  **true**
-  **false**', example='true'),
        }(name='MigrationMode', description='The initial synchronization types.'),
        minDu?: double(name='MinDu'),
        payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

- **PrePaid**: subscription
- **PostPaid**: pay-as-you-go', example='PostPaid'),
        performance?: {
          flow?: string(name='Flow', description='The size of data that is synchronized per second. Unit: MB/s.', example='1'),
          rps?: string(name='Rps', description='The number of times that SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
        }(name='Performance', description='The performance of the data synchronization instance.'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
              checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
              checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

- **Success**
- **Failed**', example='Success'),
              failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
              repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
            }
          ](name='Detail', description='The result of each precheck item.'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the precheck failed.', example='CHECK__ERROR_SAME_OBJ.'),
          percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
          status?: string(name='Status', description='The precheck state. Valid values:

- **NotStarted**: The precheck is not started. 
- **Suspending**: The precheck is paused. 
- **Checking**: The precheck is in progress. 
- **Failed**: The precheck failed. 
- **Finished**: The precheck is complete.', example='Finished'),
        }(name='PrecheckStatus', description='The precheck state.'),
        reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1imrtn6fq7h****'),
          instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the source instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
        }(name='SourceEndpoint', description='The connection settings of the source instance.'),
        status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Synchronizing'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
          percent?: string(name='Percent', description='The progress of initial schema synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of tables that have been synchronized during initial schema synchronization.', example='1'),
          status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='StructureInitializationStatus', description='The state of initial schema synchronization.'),
      }(name='ReverseJob', description='The details of the data synchronization task in the reverse direction. 

> This parameter is returned only for two-way data synchronization tasks.'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1162kryivb8****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The port number of the source instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICAT**E: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Migrating'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration or initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema migration or initial schema synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.', example='1'),
        status?: string(name='Status', description='The state of schema migration or initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
      }(name='StructureInitializationStatus', description='The state of schema migration or initial schema synchronization.'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='testkey'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='testvalue'),
        }
      ](name='TagList', description='The tags of the task.'),
    }
  ](name='DtsJobList', description='The list of DTS tasks and the details of each task.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.

>  For example, if the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  etlDemoList?: [ 
    {
      appName?: string(name='AppName', description='Indicates whether the **new** change tracking feature is used. 

> This parameter is returned only for change tracking instances of the new version.', example='new'),
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-15T08:25:34Z'),
      checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1616899019'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-23T07:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: <IP address of the downstream client>:<Random ID generated by DTS>.', example='114...:dts******'),
      createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:s*sZ format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the ETL task failed.', example='The task has failed for a long time and cannot be recovered.'),
        percent?: string(name='Percent', description='The progress of the ETL task. Unit: percentage.', example='95'),
        progress?: string(name='Progress', description='The number of entries that have been processed by the ETL task.', example='0/0'),
        status?: string(name='Status', description='The state of the ETL task. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete. 
- **Catched**: The task is not delayed.', example='Finished'),
      }(name='DataEtlStatus', description='The state of the ETL task. 

> This parameter collection is returned only if an ETL task is configured.'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration or initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during full data migration or initial full data synchronization.', example='44755'),
        status?: string(name='Status', description='The state of full data migration or initial full data synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
      }(name='DataInitializationStatus', description='The state of full data migration or initial full data synchronization.'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration or synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true**
- **false**

> To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.', example='true'),
        percent?: string(name='Percent', description='The progress of incremental data migration or synchronization. Unit: percentage.', example='95'),
        progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during incremental data migration or synchronization.', example='0/0'),
        status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete. 
- **Catched**: The task is not delayed.', example='Catched'),
      }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
      dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](~~209545~~).', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
      delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. 

> If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.', example='0'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database that contains the migrated objects in the destination instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1imrtn6fq7h****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The port number of the destination instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsi03e3zty16i****'),
      dtsJobClass?: string(name='DtsJobClass', description='The instance class. 

> For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).', example='large'),
      dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

- **Forward**
- **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****'),
      dtsJobName?: string(name='DtsJobName', description='The name of the data migration, data synchronization, or change tracking task.', example='RDS_TO_RDS_MIGRATION'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-26T14:03:21Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
      etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
      expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the returned value of **PayType** is **PrePaid**.', example='2022-03-16T08:01:19Z'),
      jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

- **MIGRATION**: data migration task 
- **SYNC**: data synchronization task 
- **SUBSCRIBE**: change tracking task', example='MIGRATION'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
      }(name='MigrationMode', description='The migration types or initial synchronization types.'),
      originType?: string(name='OriginType', description='The source of the task.
- **PTS**
- **DMS**
- **DTS**', example='DTS'),
      payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

- **PrePaid**: subscription 
- **PostPaid**: pay-as-you-go', example='PrePaid'),
      performance?: {
        flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: MB/s.', example='1'),
        rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data migration or synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
            checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

- **Success**
- **Failed**', example='Success'),
            failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the precheck failed.', example='CHECK__ERROR_SAME_OBJ.'),
        percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
        status?: string(name='Status', description='The precheck state. Valid values:

- **NotStarted**: The precheck is not started. 
- **Suspending**: The precheck is paused. 
- **Checking**: The precheck is in progress. 
- **Failed**: The precheck failed. 
- **Finished**: The precheck is complete.', example='Finished'),
      }(name='PrecheckStatus', description='The precheck state.'),
      reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
      resourceGroupDisplayName?: string(name='ResourceGroupDisplayName', description='The name of the resource group.', example='default resource group'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
      retryState?: {
        errMessage?: string(name='ErrMessage', description='The error message returned if these retries failed.', example='Unexpected error'),
        jobId?: string(name='JobId', description='The task ID.', example='bi6e22ay243****'),
        maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
        module?: string(name='Module', description='The progress of the instance when DTS retries.', example='03'),
        retryCount?: int32(name='RetryCount', description='The number of retries that have been performed.', example='5'),
        retryTarget?: string(name='RetryTarget', description='The object on which these retries are performed. Valid values:

- **srcDB**: the source database 
- **destDB**: the destination database 
- **inner_module**: an internal module of DTS', example='srcDB'),
        retryTime?: int32(name='RetryTime', description='The time that has elapsed from the time when the first retry starts. Unit: seconds.', example='3600'),
        retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

- **true**
- **false**', example='false'),
      }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint', description='The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1616980369'),
        createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been synchronized during initial full data synchronization.', example='43071'),
          status?: string(name='Status', description='The state of initial full data synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='DataInitializationStatus', description='The state of initial full data synchronization.'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true**
- **false**

> To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.', example='true'),
          percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during incremental data migration or synchronization.', example='20001'),
          status?: string(name='Status', description='The state of incremental data synchronization.', example='Migrating'),
        }(name='DataSynchronizationStatus', description='The state of incremental data synchronization.'),
        dbObject?: string(name='DbObject', description='The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
        delay?: long(name='Delay', description='The latency of incremental data synchronization. Unit: seconds.', example='0'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the synchronized objects in the destination instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1162kryivb8****'),
          instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the destination instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
        }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
        dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data synchronization instance.', example='dtsi03e3zty16i****'),
        dtsJobClass?: string(name='DtsJobClass', description='The instance class. 

> For more information about the test performance of each instance class, see [Specifications of data synchronization instances](~~26605~~).', example='large'),
        dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. **Reverse** is returned.', example='Reverse'),
        dtsJobId?: string(name='DtsJobId', description='The ID of the synchronization task.', example='i03e3zty16i****'),
        dtsJobName?: string(name='DtsJobName', description='The name of the data synchronization task.', example='RDS_TO_RDS_MIGRATION'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
        etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
        expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the* yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC. 

> This parameter is returned only if the returned value of **PayType** is **PrePaid**.', example='2022-03-16T08:01:19Z'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
          dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
          structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
        }(name='MigrationMode', description='The migration types or initial synchronization types.'),
        payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

- **PrePaid**: subscription
- **PostPaid**: pay-as-you-go', example='PostPaid'),
        performance?: {
          flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: MB/s.', example='1'),
          rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
        }(name='Performance', description='The performance of the data migration or synchronization instance.'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
              checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
              checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

- **Success**
- **Failed**', example='Success'),
              failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
              repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
            }
          ](name='Detail', description='The result of each precheck item.'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the precheck failed.', example='CHECK__ERROR_SAME_OBJ'),
          percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
          status?: string(name='Status', description='The precheck state. Valid values:

- **NotStarted**: The precheck is not started. 
- **Suspending**: The precheck is paused. 
- **Checking**: The precheck is in progress. 
- **Failed**: The precheck failed. 
- **Finished**: The precheck is complete.', example='Finished'),
        }(name='PrecheckStatus', description='The precheck state.'),
        reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1imrtn6fq7h****'),
          instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the source instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
        }(name='SourceEndpoint', description='The connection settings of the source instance.'),
        status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Synchronizing'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
          percent?: string(name='Percent', description='The progress of initial schema synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of tables that have been synchronized during initial schema synchronization.', example='1'),
          status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='StructureInitializationStatus', description='The state of initial schema synchronization.'),
      }(name='ReverseJob', description='The details of the data synchronization task in the reverse direction. 

> This parameter is returned only for two-way data synchronization tasks.'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1162kryivb8****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The port number of the source instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Migrating'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration or initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema migration or initial schema synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.', example='1'),
        status?: string(name='Status', description='The state of schema migration or initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
      }(name='StructureInitializationStatus', description='The state of schema migration or initial schema synchronization.'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='testkey'),
          tagValue?: string(name='TagValue', description='The tag value.', example='testvalue'),
        }
      ](name='TagList', description='The tags of the task.'),
    }
  ](name='EtlDemoList', description='The DTS tasks and the details of each task.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='2'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of DTS tasks that meet the query condition.', example='15'),
}

model DescribeDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsJobsResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Dts\\&api=DescribeDtsJobs\\&type=RPC\\&version=2020-01-01)
  *
 */
async function describeDtsJobs(request: DescribeDtsJobsRequest): DescribeDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsServiceLogRequest {
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='c1yr56py103****', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. You can call the [DescribePreCheckStatus](~~209718~~) operation to query the execution time of the subtasks.

> *   To obtain the logs that are generated for DTS subtasks within a specific period of time, you can call the [DescribePreCheckStatus](~~209718~~) operation to query the execution time of the subtasks.
>*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.', example='1620897227000', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that is passed to specify the query content.

>  Fuzzy match is used and the keyword is case-sensitive.', example='state = IDLE', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0 and less than or equal to the maximum value supported by the integer data type. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of log entries to return on each page. Valid values: **20**, **50**, **100**, **500**, and **1000**. Default value: **20**.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

> *   To obtain the logs that are generated for Data Transmission Service (DTS) subtasks within a specific period of time, you can call the [DescribePreCheckStatus](~~209718~~) operation to query the execution time of the subtasks.
>*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.', example='1620896327000', position='Query'),
  status?: string(name='Status', description='The log level. Separate multiple log levels with commas (,). Valid values:

*   **NORMAL**: displays the logs that are generated when the DTS task runs as expected.
*   **WARN**: displays the logs about severe issues that stop the DTS task from running.
*   **ERROR**: displays the logs about unexpected issues that stop specific processes form running.', example='NORMAL,WARN,ERROR', position='Query'),
  subJobType?: string(name='SubJobType', description='The type of a DTS subtask. Valid values:

*   **DATA_LOAD**: full migration or full synchronization
*   **ONLINE_WRITER**: incremental migration
*   **SYNC_WRITER**: incremental synchronization', example='SYNC_WRITER', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model DescribeDtsServiceLogResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of log entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F87DF250-952C-47FE-8A02-69414FAA****'),
  serviceLogContexts?: [ 
    {
      context?: string(name='Context', description='The log content.', example='Statistics: generator = 369173; collector = 470109; replicator = 2470; ping = 2/2/2; execute = 29/29/29; rt = 29/29/29; state = IDLE; queries = -1; exceptions = {connects = 0, replicates = 0}; infos = {}'),
      state?: string(name='State', description='The log level.', example='NORMAL'),
      time?: string(name='Time', description='The time when the logs were collected. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2021-05-13T09:13:39.443+00:00'),
    }
  ](name='ServiceLogContexts', description='The details of the logs.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of logs that meet the query conditions.', example='35'),
}

model DescribeDtsServiceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsServiceLogResponseBody(name='body'),
}

async function describeDtsServiceLog(request: DescribeDtsServiceLogRequest): DescribeDtsServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsServiceLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndpointSwitchStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  taskId: string(name='TaskId', description='The task ID, which is returned after you call the [SwitchSynchronizationEndpoint](~~201858~~) operation.', example='11****', position='Query'),
}

model DescribeEndpointSwitchStatusResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='This parameter is no longer available.', example='400'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0DD6B201-604B-4CAB-B6A8-4B2953B5****'),
  status?: string(name='Status', description='The status of the task. Valid values:

*   **NotStarted**: The task is not started.
*   **Initializing**: The task is being initialized.
*   **Switching**: The task is running.
*   **Failed**: The task failed.
*   **Finished**: The task is completed.', example='Finished'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeEndpointSwitchStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndpointSwitchStatusResponseBody(name='body'),
}

/**
  * Before you call this operation, you must call the [SwitchSynchronizationEndpoint](~~201858~~) operation to change the database connection settings.
  *
 */
async function describeEndpointSwitchStatus(request: DescribeEndpointSwitchStatusRequest): DescribeEndpointSwitchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndpointSwitchStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEtlJobLogsRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the ETL task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='l5512es7w15****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides. You can call the [DescribeRegions](~~25609~~) operation to query the available Alibaba Cloud regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeEtlJobLogsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', description='The error code. This example indicates that the specified ETL task ID is invalid.', example='InvalidJobId'),
  errMessage?: string(name='ErrMessage', description='The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may be deleted.', example='The specified dts job id %s is not exists.'),
  etlRunningLogs?: [ 
    {
      content?: string(name='Content', description='The state of the ETL task.', example='Starting DTS-ETL...'),
      contentKey?: string(name='ContentKey', description='The module for which the logs are generated, such as the conversion module of ETL tasks.', example='DTS-ETL'),
      etlId?: string(name='EtlId', description='The ID of the ETL task.', example='u**********5'),
      logDatetime?: string(name='LogDatetime', description='The time when the log was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1637306503000'),
      status?: string(name='Status', description='The log level. Valid values: ERROR, WARN, INFO, and DEBUG.', example='INFO'),
      userId?: string(name='UserId', description='The ID of the user.', example='121323*******454512'),
    }
  ](name='EtlRunningLogs', description='The logs of ETL tasks.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. If the call failed, false is returned.', example='true'),
}

model DescribeEtlJobLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEtlJobLogsResponseBody(name='body'),
}

async function describeEtlJobLogs(request: DescribeEtlJobLogsRequest): DescribeEtlJobLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEtlJobLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInitializationStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **30**.', example='30', minimum=1, maximum=300, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.', example='dtsi76118o3w92****', position='Query'),
}

model DescribeInitializationStatusResponseBody = {
  dataInitializationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
      finishRowNum?: string(name='FinishRowNum', description='The total number of rows that are actually synchronized.

>  This parameter indicates the total number of actually synchronized rows. In contrast, the value of the **TotalRowNum** parameter is calculated based on the system tables in the source database. The values of the two parameters may be different due to time difference.', example='9993'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of initial full data synchronization. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Finished'),
      tableName?: string(name='TableName', description='The table name.', example='customer'),
      totalRowNum?: string(name='TotalRowNum', description='The total number of rows that are supposed to be synchronized.

>  The value of this parameter is calculated based on the system tables in the source database. In contrast, the **FinishRowNum** parameter indicates the total number of actually synchronized rows. The values of the two parameters may be different due to time difference.', example='9981'),
      usedTime?: string(name='UsedTime', description='The time spent on full data synchronization.', example='0.0'),
    }
  ](name='DataInitializationDetails', description='The details of initial full data synchronization.'),
  dataSynchronizationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of incremental data synchronization. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Migrating'),
      tableName?: string(name='TableName', description='The table name.', example='customer'),
    }
  ](name='DataSynchronizationDetails', description='The details of incremental data synchronization.

>  This parameter and the parameters it contains will be removed in the future.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='150DECD9-13FF-4929-A5DE-855BE9CC****'),
  structureInitializationDetails?: [ 
    {
      constraints?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if constraints failed to be created.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist'),
          objectDefinition?: string(name='ObjectDefinition', description='The syntax to create constraints.', example='CREATE SEQUENCE "public"."collections_id_seq"   MINVALUE 1   MAXVALUE 9223372036854775807   START 249   INCREMENT BY 1 ;'),
          objectName?: string(name='ObjectName', description='The name of the object.', example='customer'),
          objectType?: string(name='ObjectType', description='The type of the object. Valid value: **Table**.', example='Table'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
          status?: string(name='Status', description='The status of constraint creation. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Finished'),
        }
      ](name='Constraints', description='The constraints of the synchronization object, such as indexes and foreign keys.

>  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the synchronization object has constraints.'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
      objectDefinition?: string(name='ObjectDefinition', description='The schema of the object.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`customer_id`  int(10) unsigned   auto_increment  COMMENT \\"\\"   NOT NULL   , \\n`customer_title`  varchar(100)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`customer_company1216`  varchar(40)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`submission_date1216`  date     COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`customer_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
      objectName?: string(name='ObjectName', description='The name of the object.', example='customer'),
      objectType?: string(name='ObjectType', description='The type of the object. Valid values:

**Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.', example='Table'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of initial schema synchronization. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Finished'),
    }
  ](name='StructureInitializationDetails', description='The details of initial schema synchronization.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeInitializationStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInitializationStatusResponseBody(name='body'),
}

async function describeInitializationStatus(request: DescribeInitializationStatusRequest): DescribeInitializationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInitializationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobMonitorRuleRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='ta7w132u12h****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeJobMonitorRuleResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='ta7w132u12h****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the specified **DtsJobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='403'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  monitorRules?: [ 
    {
      delayRuleTime?: long(name='DelayRuleTime', description='The threshold that triggers the alert.

*   If the request parameter **Type** of the [CreateJobMonitorRule](~~212332~~) operation is set to **delay**, the unit of DelayRuleTime is seconds.
*   If the request parameter **Type** of the [CreateJobMonitorRule](~~212332~~) operation is set to **full_timeout**, the unit of DelayRuleTime is hours.', example='11'),
      jobId?: string(name='JobId'),
      jobType?: string(name='JobType'),
      noticeValue?: int32(name='NoticeValue'),
      period?: int32(name='Period'),
      phone?: string(name='Phone', description='The mobile phone numbers that receive alert notifications. Multiple mobile numbers are separated by commas (,).', example='1361234****,1371234****'),
      state?: string(name='State', description='Indicates whether the monitoring rule is enabled. Valid values:

*   **Y**: The monitoring rule is enabled.
*   **N**: The monitoring rule is disabled.', example='Y'),
      times?: int32(name='Times'),
      type?: string(name='Type', description='The type of the monitoring rule. Valid values:

*   **delay**: If the task latency reaches the threshold, an alert is triggered.
*   **error**: If an exception occurs, an alert is triggered.', example='delay'),
    }
  ](name='MonitorRules', description='The monitoring rules of the DTS task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0CA14388-DD89-4A7B-8CDD-884A10CE****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**:The call failed.', example='true'),
  topics?: [ string ](name='Topics', description='The topics of all subtasks in the distributed change tracking task.'),
}

model DescribeJobMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeJobMonitorRuleResponseBody(name='body'),
}

async function describeJobMonitorRule(request: DescribeJobMonitorRuleRequest): DescribeJobMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricListRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='12323344****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Body'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='k2gm967v16f****', position='Body'),
  endTime?: long(name='EndTime', description='The timestamp that indicates the end of the time range to query. Unit: milliseconds.', example='1642476194000', position='Body'),
  env?: string(name='Env', description='Default value: **ALIYUN**.', example='ALIYUN', position='Body'),
  metricName: string(name='MetricName', description='*   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
*   **diskusage_utilization**: the disk usage.
*   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
*   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
*   **cpu_total**: the CPU utilization.
*   **memory_usedutilization**: the memory usage.
*   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.', example='cpu_total', position='Body'),
  metricType?: string(name='MetricType', description='Specifies whether to query the metrics of the cluster or a node. Valid values:

*   **CLUSTER**: query the metrics of the cluster.
*   **NODE**: query the metrics of a node.', example='NODE', position='Body'),
  ownerID?: string(name='OwnerID', position='Body'),
  param: string(name='Param', description='The monitored object. If the **MetricType** parameter is set to **NODE**, set this parameter to the ID of the node that is monitored.', example='nodeid', position='Body'),
  period?: long(name='Period', description='The monitoring interval. Unit: seconds. Minimum value: 15.', example='15', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp that indicates the beginning of the time range to query. Unit: milliseconds.', example='1642476144000', position='Body'),
}

model DescribeMetricListResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='403'),
  dataPoints?: [ 
    {
      statistics?: float(name='Statistics', description='The statistical value.', example='15.25'),
      timestamp?: long(name='Timestamp', description='The timestamp of the record. Unit: milliseconds.', example='1650872310000'),
    }
  ](name='DataPoints', description='The monitoring statistics.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned for an exception.', example='403'),
  metricName?: string(name='MetricName', description='*   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
*   **diskusage_utilization**: the disk usage.
*   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
*   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
*   **cpu_total**: the CPU utilization.
*   **memory_usedutilization**: the memory usage.
*   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.', example='cpu_total'),
  metricType?: string(name='MetricType', description='Indicates whether the metrics of the cluster or a node are queried. Valid values:

*   **CLUSTER**: The metrics of the cluster are queried.
*   **NODE**: The metrics of a node are queried.', example='CLUSTER'),
  param?: string(name='Param', description='The monitored object.

*   If the **MetricType** parameter is set to **NODE**, the value of this parameter is the ID of the node that is monitored.****
*   If the **MetricType** parameter is set to **CLUSTER**, the value of this parameter is the ID of the dedicated cluster. You can obtain the ID by calling the ListDedicatedCluster operation.', example='ecs-jhjnjjn'),
  period?: long(name='Period', description='The monitoring interval. Unit: seconds. Minimum value: 15.', example='15'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeMetricListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMetricListResponseBody(name='body'),
}

async function describeMetricList(request: DescribeMetricListRequest): DescribeMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMigrationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.', example='dtslb9113qq11n****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeMigrationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts.', example='1361234****,1371234****'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Indicates whether task latency is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. Unit: seconds.', example='10'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts.', example='1361234****,1371234****'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Indicates whether task status is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  migrationJobId?: string(name='MigrationJobId', description='The ID of the data migration instance.', example='lb9113qq11n****'),
  migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.', example='PolarDB MySQL_to_RDS MySQL'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210ec21916055187057342533d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeMigrationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobAlertResponseBody(name='body'),
}

async function describeMigrationJobAlert(request: DescribeMigrationJobAlertRequest): DescribeMigrationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobDetailRequest {
  migrationMode?: {
    dataInitialization?: boolean(name='DataInitialization', description='Specifies whether to query the details of full data migration. Valid values:

*   **true**: yes

*   **false**: no

> Default value: **false**', example='true'),
    dataSynchronization?: boolean(name='DataSynchronization', description='Specifies whether to query the details of incremental data migration. Valid values:

*   **true**: yes

*   **false**: no

> Default value: **false**', example='true'),
    structureInitialization?: boolean(name='StructureInitialization', description='Specifies whether to query the details of schema migration. Valid values:

*   **true**: yes

*   **false**: no

> Default value: **false**', example='true'),
  }(name='MigrationMode', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.', example='dtsta7w132u12h****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeMigrationJobDetailResponseBody = {
  dataInitializationDetailList?: {
    dataInitializationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration failed.', example='java.lang.NumberFormatException: For input string: ""'),
      finishRowNum?: string(name='FinishRowNum', description='The number of records that have been migrated.', example='200001'),
      migrationTime?: string(name='MigrationTime', description='The time taken by full data migration.', example='0.0'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of full data migration. Valid values:

- **NotStarted**: Full data migration is not started.
- **Migrating**: Full data migration is in progress.
- **Failed**: Full data migration failed.
- **Finished**: Full data migration is completed.', example='Finished'),
      tableName?: string(name='TableName', description='The table name.', example='customer'),
      totalRowNum?: string(name='TotalRowNum', description='The total number of records that are supposed to be migrated by the task.', example='201477'),
    }
  ](name='DataInitializationDetail')
  }(name='DataInitializationDetailList', description='The details of full data migration.'),
  dataSynchronizationDetailList?: {
    dataSynchronizationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration failed.'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of incremental data migration. Valid values:

*   **NotStarted**: Incremental data migration is not started.
*   **Migrating**: Incremental data migration is in progress.
*   **Failed**: Incremental data migration failed.
*   **Finished**: Incremental data migration is completed.', example='Migrating'),
      tableName?: string(name='TableName', description='The table name.', example='customer'),
    }
  ](name='DataSynchronizationDetail')
  }(name='DataSynchronizationDetailList', description='The details of incremental data migration.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of data migration instances that can be displayed on one page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AE3CD0B-4148-426F-A90E-952467CC****'),
  structureInitializationDetailList?: {
    structureInitializationDetail?: [ 
    {
      constraintList?: {
        structureInitializationDetail?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if constraints failed to be created.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist；'),
          objectDefinition?: string(name='ObjectDefinition', description='The syntax to create constraints.', example='CREATE SEQUENCE "public"."collections_id_seq"   MINVALUE 1   MAXVALUE 9223372036854775807   START 249   INCREMENT BY 1 ;'),
          objectName?: string(name='ObjectName', description='The name of migration object.', example='customer'),
          objectType?: string(name='ObjectType', description='The type of the migration object. The value is **Table**.', example='Table'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
          status?: string(name='Status', description='The status of constraint creation. Valid values:

- **NotStarted**
- **Migrating**
- **Failed**
- **Finished**', example='Finished'),
        }
      ](name='StructureInitializationDetail')
      }(name='ConstraintList', description='The constraints of the migration object, such as indexes and foreign keys. 

>  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the migration object has constraints.'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration failed.', example='DTS-1020042 Execute sql error sql: DTS-1020042 Execute sql error sql: ERROR: column \\"id\\" named in key does not exist'),
      objectDefinition?: string(name='ObjectDefinition', description='The schema of the migration object.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`runoob_id`  int(10) unsigned   auto_increment  COMMENT \\"\\"   NOT NULL   , \\n`runoob_title`  varchar(100)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`runoob_author1216`  varchar(40)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`submission_date1216`  date     COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`runoob_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
      objectName?: string(name='ObjectName', description='The name of migration object.', example='customer'),
      objectType?: string(name='ObjectType', description='The type of the migration object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.', example='Table'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of schema migration. Valid values:

- **NotStarted**: Schema migration is not started.
- **Migrating**: Schema migration is in progress.
- **Failed**: Schema migration failed.
- **Finished**: Schema migration is completed.', example='Finished'),
    }
  ](name='StructureInitializationDetail')
  }(name='StructureInitializationDetailList', description='The details of schema migration.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of entries that are returned.', example='1'),
}

model DescribeMigrationJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobDetailResponseBody(name='body'),
}

/**
  * When you call this operation, the data migration task must be in the Migrating, Failed, Paused, or Finished state.
  *
 */
async function describeMigrationJobDetail(request: DescribeMigrationJobDetailRequest): DescribeMigrationJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.', example='dtsz2v12jfo309****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeMigrationJobStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration failed.', example='java.lang.NumberFormatException: For input string: ""'),
    percent?: string(name='Percent', description='The migration progress. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of records that have been migrated during full data migration.', example='200001'),
    status?: string(name='Status', description='The status of full data migration. Valid values:

*   **NotStarted**: Full data migration is not started.
*   **Migrating**: Full data migration is in progress.
*   **Failed**: Full data migration failed.
*   **Finished**: Full data migration is completed.', example='Finished'),
  }(name='DataInitializationStatus', description='The status of full data migration.'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest incremental data is migrated. Unit: seconds.', example='1612507847'),
    delay?: string(name='Delay', description='The latency of incremental data migration. Unit: seconds.', example='0'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration failed.'),
    percent?: string(name='Percent', description='The progress of incremental data migration. Unit: %.', example='95'),
    status?: string(name='Status', description='The status of incremental data migration. Valid values:

*   **NotStarted**: Incremental data migration is not started.
*   **Migrating**: Incremental data migration is in progress.
*   **Failed**: Incremental data migration failed.
*   **Finished**: Incremental data migration is completed.
*   **Catched**: Incremental data migration is not delayed.', example='Catched'),
  }(name='DataSynchronizationStatus', description='The status of incremental data migration.'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
    engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the destination instance.', example='rm-bp1zc3iyqe3qw****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
    port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
    oracleSID?: string(name='oracleSID', description='The system ID (SID) of the Oracle database.

>  This parameter is returned only if the database type of the destination instance is **Oracle**.', example='testsid'),
  }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  migrationJobClass?: string(name='MigrationJobClass', description='The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](~~26606~~).', example='2xlarge'),
  migrationJobId?: string(name='MigrationJobId', description='The ID of the data migration instance.', example='dtsz2v12jfo309****'),
  migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.'),
  migrationJobStatus?: string(name='MigrationJobStatus', description='The status of the data migration task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Migrating**: The task is migrating data.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed to migrate data.
*   **Finished**: The task is completed.', example='Migrating'),
  migrationMode?: {
    dataInitialization?: boolean(name='dataInitialization', description='Indicates whether full data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    dataSynchronization?: boolean(name='dataSynchronization', description='Indicates whether incremental data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    structureInitialization?: boolean(name='structureInitialization', description='Indicates whether schema migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='MigrationMode', description='The migration types.'),
  migrationObject?: string(name='MigrationObject', description='The objects that are migrated by the task.', example='[{\\"DBName\\":\\"dtstestdata\\",\\"TableIncludes\\":[{\\"TableName\\":\\"customer\\"}]}]'),
  payType?: string(name='PayType', description='The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).', example='PostPaid'),
  precheckStatus?: {
    detail?: {
      checkItem?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
        itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
        repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
      }
    ](name='CheckItem')
    }(name='Detail', description='The result of each precheck item.'),
    percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
    status?: string(name='Status', description='The precheck status. Valid values:

*   **NotStarted**
*   **Suspending**:
*   **Checking**
*   **Failed**
*   **Finished**', example='Success'),
  }(name='PrecheckStatus', description='The precheck details.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A032E3B4-929B-48E9-97B9-37587CBF****'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdatabase'),
    engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance.

*   **RDS**: ApsaraDB RDS instance
*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **LocalInstance**: self-managed database with a public IP address
*   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **POLARDB**: PolarDB for MySQL cluster (available only for the China site)', example='RDS'),
    port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
    oracleSID?: string(name='oracleSID', description='The SID of the Oracle database.

>  This parameter is returned only if the database type of the source instance is **Oracle**.', example='dtstestdatabase'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
    percent?: string(name='Percent', description='The progress of schema migration. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of tables whose schemas have been migrated.', example='1'),
    status?: string(name='Status', description='The status of schema migration. Valid values:

*   **NotStarted**: Schema migration is not started.
*   **Migrating**: Schema migration is in progress.
*   **Failed**: Schema migration failed.
*   **Finished**: Schema migration is completed.', example='Finished'),
  }(name='StructureInitializationStatus', description='The status of schema migration.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', example='z2v12jfo309****'),
}

model DescribeMigrationJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobStatusResponseBody(name='body'),
}

async function describeMigrationJobStatus(request: DescribeMigrationJobStatusRequest): DescribeMigrationJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobsRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.

>  Fuzzy match is supported.', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instances reside. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key. You can call the [ListTagResources](~~191187~~) operation to query the tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.', example='testkey1'),
      value?: string(name='Value', description='The tag value. You can call the [ListTagResources](~~191187~~) operation to query the tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model DescribeMigrationJobsResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  migrationJobs?: {
    migrationJob?: [ 
    {
      dataInitialization?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The migration progress. Unit: %.', example='100'),
        progress?: string(name='Progress', description='The number of records that have been migrated during full data migration.', example='200001'),
        status?: string(name='status', description='The status of full data migration. Valid values:

*   **NotStarted**: Full data migration is not started.
*   **Migrating**: Full data migration is in progress.
*   **Failed**: Full data migration failed.
*   **Finished**: Full data migration is completed.', example='Finished'),
      }(name='DataInitialization', description='The details of full data migration.'),
      dataSynchronization?: {
        delay?: string(name='Delay', description='The latency of incremental data migration. Unit: seconds.', example='0'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration failed.'),
        percent?: string(name='Percent', description='The progress of incremental data migration. Unit: %.', example='95'),
        status?: string(name='status', description='The status of incremental data migration. Valid values:

*   **NotStarted**: Incremental data migration is not started.
*   **Migrating**: Incremental data migration is in progress.
*   **Failed**: Incremental data migration failed.
*   **Finished**: Incremental data migration is completed.
*   **Catched**: Incremental data migration is not delayed.', example='Catched'),
      }(name='DataSynchronization', description='The details of incremental data migration.'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
        ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
        instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1zc3iyqe3qw****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        oracleSID?: string(name='OracleSID', description='This parameter is returned only if the database type of the destination instance is **Oracle**.', example='testsid'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      instanceCreateTime?: string(name='InstanceCreateTime', description='The time when the data migration instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-22T09:02:13Z'),
      jobCreateTime?: string(name='JobCreateTime', description='The time when the data migration task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-22T08:53:55Z'),
      migrationJobClass?: string(name='MigrationJobClass', description='The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](~~26606~~).', example='2xlarge'),
      migrationJobID?: string(name='MigrationJobID', description='The ID of the data migration instance.', example='dtson2z28evm33****'),
      migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.'),
      migrationJobStatus?: string(name='MigrationJobStatus', description='The status of the data migration task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Migrating**: The task is migrating data.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed to migrate data.
*   **Finished**: The task is completed.', example='Migrating'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      }(name='MigrationMode', description='The migration types.'),
      migrationObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList', description='The names of the migrated tables.'),
          wholeDatabase?: string(name='WholeDatabase', description='Indicates whether an entire database is migrated. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        }
      ](name='SynchronousObject')
      }(name='MigrationObject', description='The objects that are migrated by the task.'),
      payType?: string(name='PayType', description='The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).', example='PostPaid'),
      precheck?: {
        percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
        status?: string(name='Status', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
      }(name='Precheck', description='The precheck details.'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
        ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        oracleSID?: string(name='OracleSID', description='This parameter is returned only if the database type of the source instance is **Oracle**.', example='testsid'),
        port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      structureInitialization?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema migration. Unit: %.', example='100'),
        progress?: string(name='Progress', description='The number of tables whose schemas have been migrated.', example='1'),
        status?: string(name='status', description='The status of schema migration. Valid values:

*   **NotStarted**: Schema migration is not started.
*   **Migrating**: Schema migration is in progress.
*   **Failed**: Schema migration failed.
*   **Finished**: Schema migration is completed.', example='Finished'),
      }(name='StructureInitialization', description='The details of schema migration.'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='testkey1'),
          value?: string(name='Value', description='The tag value that corresponds to the tag key.', example='testvalue1'),
        }
      ](name='Tag')
      }(name='Tags', description='The collection of tags.'),
    }
  ](name='MigrationJob')
  }(name='MigrationJobs', description='The list of data migration instances and the details of each instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of entries that can be displayed on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED4846D-ED60-435D-88C0-7EC0CE4D****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data migration instances that belong to your Alibaba Cloud account.', example='300'),
}

model DescribeMigrationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobsResponseBody(name='body'),
}

async function describeMigrationJobs(request: DescribeMigrationJobsRequest): DescribeMigrationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribePreCheckStatusRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****', position='Query'),
  jobCode: string(name='JobCode', description='The task code that specifies the type of the DTS subtask. Valid values:

*   **01**: precheck
*   **02**: schema migration or initial schema synchronization
*   **03**: full data migration or initial full data synchronization
*   **04**: incremental data migration or synchronization', example='01', position='Query'),
  name?: string(name='Name', description='The filter item used to filter tables in fuzzy match.', example='dewuprop', position='Query'),
  pageNo?: string(name='PageNo', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='30', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  structPhase?: string(name='StructPhase', description='The filter item used to filter tables, views, and functions during schema migration.', example='View', position='Query'),
  structType?: string(name='StructType', description='The type of schema definition. Valid values:

*   **before**: schema migration or initial schema synchronization
*   **after**: DDL operations performed during incremental data migration or synchronization', example='before', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model DescribePreCheckStatusResponseBody = {
  analysisJobProgress?: [ 
    {
      bootTime?: string(name='BootTime'),
      canSkip?: boolean(name='CanSkip'),
      current?: string(name='Current'),
      ddlSql?: string(name='DdlSql'),
      delaySeconds?: int32(name='DelaySeconds'),
      destSchema?: string(name='DestSchema'),
      diffRow?: long(name='DiffRow'),
      errDetail?: string(name='ErrDetail'),
      errMsg?: string(name='ErrMsg'),
      finishTime?: string(name='FinishTime'),
      id?: string(name='Id'),
      ignoreFlag?: string(name='IgnoreFlag'),
      item?: string(name='Item'),
      jobId?: string(name='JobId'),
      logs?: [ 
        {
          errData?: string(name='ErrData'),
          errMsg?: string(name='ErrMsg'),
          errType?: string(name='ErrType'),
          logLevel?: string(name='LogLevel'),
        }
      ](name='Logs'),
      names?: string(name='Names'),
      orderNum?: int32(name='OrderNum'),
      parentObj?: string(name='ParentObj'),
      repairMethod?: string(name='RepairMethod'),
      skip?: boolean(name='Skip'),
      sourceSchema?: string(name='SourceSchema'),
      state?: string(name='State'),
      sub?: string(name='Sub'),
      targetNames?: string(name='TargetNames'),
      total?: int32(name='Total'),
    }
  ](name='AnalysisJobProgress'),
  code?: string(name='Code', description='The task code that indicates the subtask type. Valid values:

*   **01**: precheck
*   **02**: schema migration or initial schema synchronization
*   **03**: full data migration or initial full data synchronization
*   **04**: incremental data migration or synchronization', example='01'),
  errorAnalysisItem?: int32(name='ErrorAnalysisItem'),
  errorItem?: int32(name='ErrorItem', description='The total number of subtask failures.', example='0'),
  fullNetCheckJobStatus?: [ 
    {
      code?: string(name='Code'),
      destRegion?: string(name='DestRegion'),
      destRegionCidr?: string(name='DestRegionCidr'),
      destinationEndpointType?: string(name='DestinationEndpointType'),
      errorItem?: int32(name='ErrorItem'),
      hostRegion?: string(name='HostRegion'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      jobProgress?: [ 
        {
          bootTime?: string(name='BootTime'),
          canSkip?: boolean(name='CanSkip'),
          current?: string(name='Current'),
          ddlSql?: string(name='DdlSql'),
          delaySeconds?: int32(name='DelaySeconds'),
          destSchema?: string(name='DestSchema'),
          diffRow?: long(name='DiffRow'),
          errDetail?: string(name='ErrDetail'),
          errMsg?: string(name='ErrMsg'),
          finishTime?: string(name='FinishTime'),
          id?: string(name='Id'),
          ignoreFlag?: string(name='IgnoreFlag'),
          item?: string(name='Item'),
          jobId?: string(name='JobId'),
          logs?: [ 
            {
              errData?: string(name='ErrData'),
              errMsg?: string(name='ErrMsg'),
              errType?: string(name='ErrType'),
              logLevel?: string(name='LogLevel'),
            }
          ](name='Logs'),
          names?: string(name='Names'),
          orderNum?: int32(name='OrderNum'),
          parentObj?: string(name='ParentObj'),
          repairMethod?: string(name='RepairMethod'),
          skip?: boolean(name='Skip'),
          sourceSchema?: string(name='SourceSchema'),
          state?: string(name='State'),
          sub?: string(name='Sub'),
          targetNames?: string(name='TargetNames'),
          total?: int32(name='Total'),
        }
      ](name='JobProgress'),
      sourceEndpointType?: string(name='SourceEndpointType'),
      srcRegion?: string(name='SrcRegion'),
      srcRegionCidr?: string(name='SrcRegionCidr'),
      state?: string(name='State'),
      total?: int32(name='Total'),
    }
  ](name='FullNetCheckJobStatus'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  jobId?: string(name='JobId', description='The ID of the data migration or synchronization task.', example='b4my3zg929a****'),
  jobName?: string(name='JobName', description='The name of the subtask.'),
  jobProgress?: [ 
    {
      bootTime?: string(name='BootTime', description='The time when the subtask was started. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.', example='2021-03-16T08:01:31.000+00:00'),
      canSkip?: boolean(name='CanSkip', description='Indicates whether the subtask can be ignored if it fails.', example='true'),
      current?: string(name='Current', description='The number of the subtasks that are running.', example='0'),
      ddlSql?: string(name='DdlSql', description='The DDL statements.', example='CREATE TABLE `dtstestdata`.`order` (\\n`orderid`  int(11)     COMMENT \\"\\"   NOT NULL   , \\n`username`  char(32)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NULL   , \\n`ordertime`  datetime     COMMENT \\"\\"   NULL   , \\n`commodity`  varchar(32)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NULL   , \\n`phonenumber`  int(11)     COMMENT \\"\\"   NULL   , \\n`address`  text  CHARSET `utf8mb4` COLLATE `utf8mb4_general_ci`    COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`orderid`)) engine=InnoDB DEFAULT CHARSET=`gbk` DEFAULT COLLATE `gbk_chinese_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
      delaySeconds?: int32(name='DelaySeconds', description='The latency of incremental data migration or synchronization.

>  For data migration tasks, the unit of this parameter is milliseconds. For data synchronization tasks, the unit of this parameter is seconds.', example='0'),
      destSchema?: string(name='DestSchema', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata_new'),
      diffRow?: long(name='DiffRow', description='This parameter will be removed in the future.', example='1'),
      errDetail?: string(name='ErrDetail', description='The error details of the subtask failure.', example='CHECK__ERROR_SAME_OBJ_DETAIL'),
      errMsg?: string(name='ErrMsg', description='The error message of the subtask failure.', example='CHECK__ERROR_SAME_OBJ'),
      finishTime?: string(name='FinishTime', description='The time when the subtask was complete. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.', example='2021-03-16T08:01:34.000+00:00'),
      id?: string(name='Id', description='The ID recorded in the metadatabase.', example='5632'),
      ignoreFlag?: string(name='IgnoreFlag', description='Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:

*   **N**: no
*   **Y**: yes', example='N'),
      item?: string(name='Item', description='The shortened name of the subtask.', example='CHECK_CONN_DEST'),
      jobId?: string(name='JobId', description='The ID of the subtask.', example='fj1c33ro168****'),
      logs?: [ 
        {
          errData?: string(name='ErrData', description='The error message.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`runoob_id`  int(10) unsigned   auto_increment  COMMENT \\"\\"   NOT NULL   , \\n`runoob_title`  varchar(100)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`runoob_author1216`  varchar(40)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`submission_date1216`  date     COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`runoob_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
          errMsg?: string(name='ErrMsg', description='The error message returned when an error occurs on the subtask.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
          errType?: string(name='ErrType', description='The error type.', example='ForeignKey'),
          logLevel?: string(name='LogLevel', description='The level of logs.', example='ERROR'),
        }
      ](name='Logs', description='The logs of subtask failures.'),
      names?: string(name='Names', description='The name of the subtask.', example='CHECK_CONN_DEST_DETAIL'),
      orderNum?: int32(name='OrderNum', description='The serial number of the subtask.', example='10'),
      parentObj?: string(name='ParentObj', description='This parameter will be removed in the future.', example='demo'),
      repairMethod?: string(name='RepairMethod', description='The method to fix the subtask failure.', example='CHECK__ERROR_SAME_OBJ_REPAIR'),
      skip?: boolean(name='Skip', description='Indicates whether the subtask is ignored if it fails. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      sourceSchema?: string(name='SourceSchema', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Warning**: The subtask encounters an exception.
*   **Success**: The subtask is complete.', example='Success'),
      sub?: string(name='Sub', description='The sub-item progress of the subtask.

>  If **\\[]** is returned, the subtask has no sub-items.', example='[]'),
      targetNames?: string(name='TargetNames', description='The names of the objects that are migrated or synchronized.', example='order'),
      total?: int32(name='Total', description='The total number of subtasks.', example='1'),
    }
  ](name='JobProgress', description='The list of subtasks and the progress of each subtask.'),
  networkDiagnosisResult?: {
    diagnosis?: [ 
      {
        cnDocUrl?: string(name='CnDocUrl'),
        code?: string(name='Code'),
        endpointType?: string(name='EndpointType'),
        internationalDocUrl?: string(name='InternationalDocUrl'),
        result?: string(name='Result'),
      }
    ](name='Diagnosis'),
    modelVersion?: string(name='ModelVersion'),
  }(name='NetworkDiagnosisResult'),
  pageNumber?: long(name='PageNumber', description='The number of the page returned. The value is an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1'),
  pageRecordCount?: long(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C096FA97-B6BA-4575-899D-61E12B59****'),
  state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Suspending**: The subtask is paused.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
*   **Finished**: The subtask is complete.', example='Finished'),
  subDistributedJobStatus?: [ 
    {
      code?: string(name='Code', description='The task code that indicates the subtask type. Valid values:

*   **01**: precheck
*   **02**: schema migration or initial schema synchronization
*   **03**: full data migration or initial full data synchronization
*   **04**: incremental data migration or synchronization', example='02'),
      errorItem?: int32(name='ErrorItem', description='The number of subtasks that failed.', example='0'),
      jobId?: string(name='JobId', description='The ID of the subtask.', example='n0gm1682j6563np'),
      jobName?: string(name='JobName', description='The name of distributed subtasks associated with the subtask.', example='dts.step.struct.load'),
      jobProgress?: [ 
        {
          bootTime?: string(name='BootTime', description='The time when the subtask was started. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2022-03-30T03:36:11.000+00:00'),
          canSkip?: boolean(name='CanSkip', description='Indicates whether the subtask can be ignored if it fails. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
          current?: string(name='Current', description='The number of the subtasks that are running.', example='0'),
          ddlSql?: string(name='DdlSql', description='The DDL statements.', example='None'),
          delaySeconds?: int32(name='DelaySeconds', description='The latency of incremental data migration or synchronization.', example='0'),
          destSchema?: string(name='DestSchema', description='The name of the database to which the object in the destination instance belongs.', example='databasetest'),
          diffRow?: long(name='DiffRow', description='This parameter will be removed in the future.', example='None'),
          errDetail?: string(name='ErrDetail', description='The error details of the subtask failure.', example='CHECK__ERROR_SAME_OBJ_DETAIL'),
          errMsg?: string(name='ErrMsg', description='The error message of the subtask failure.', example='ODPS project does not exist odps.`huijin'),
          finishTime?: string(name='FinishTime', description='The time when the instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2022-03-31T03:36:11.000+00:00'),
          id?: string(name='Id', description='The ID of the entry in the metadatabase.', example='3890'),
          ignoreFlag?: string(name='IgnoreFlag', description='Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:

*   **N**: no
*   **Y**: yes', example='N'),
          item?: string(name='Item', description='The name of the subtask.', example='login_common_time'),
          jobId?: string(name='JobId', description='The ID of the subtask.', example='l3m1213ye7l****'),
          logs?: [ 
            {
              errData?: string(name='ErrData', description='The record of errors.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`runoob_id` int(10) unsigned auto_increment COMMENT \\"\\" NOT NULL , \\n`runoob_title` varchar(100) CHARSET `utf8` COLLATE `utf8_general_ci` COMMENT \\"\\" NOT NULL , \\n`runoob_author1216` varchar(40) CHARSET `utf8` COLLATE `utf8_general_ci` COMMENT \\"\\" NOT NULL , \\n`submission_date1216` date COMMENT \\"\\" NULL \\n, PRIMARY KEY (`runoob_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
              errMsg?: string(name='ErrMsg', description='The error message.', example='get metric list fail'),
              errType?: string(name='ErrType', description='The error type.', example='ForeignKey'),
              logLevel?: string(name='LogLevel', description='The level of logs.', example='INFO'),
            }
          ](name='Logs', description='The operations logs of errors.'),
          names?: string(name='Names', description='The name of the subtask.', example='metricRuleTargets-20180308houe'),
          orderNum?: int32(name='OrderNum', description='The serial number of the subtask.', example='1'),
          parentObj?: string(name='ParentObj', description='This parameter will be removed in the future.', example='None'),
          repairMethod?: string(name='RepairMethod', description='The method used to fix a precheck failure.', example='CHECK__ERROR_SAME_OBJ_REPAIR'),
          skip?: boolean(name='Skip', description='Indicates whether the subtask was skipped. Valid values:

*   **true**: yes
*   **false**: no', example='True'),
          sourceSchema?: string(name='SourceSchema', description='The name of the database to which the object in the source instance belongs.', example='databasetest'),
          state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Suspending**: The subtask is paused.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
*   **Finished**: The subtask is complete.', example='Finished'),
          sub?: string(name='Sub', description='The sub-item progress of the subtask.

>  If **\\[]** is returned, the subtask has no sub-items.', example='[]'),
          targetNames?: string(name='TargetNames', description='The names of the objects that are migrated or synchronized.', example='order'),
          total?: int32(name='Total', description='The total number of subtasks.', example='11'),
        }
      ](name='JobProgress', description='The list of subtasks and the progress of each subtask.'),
      state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Suspending**: The subtask is paused.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
*   **Finished**: The subtask is complete.', example='Finished'),
      total?: int32(name='Total', description='The total number of returned entries.', example='11'),
    }
  ](name='SubDistributedJobStatus', description='The state of the distributed subtask.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  total?: int32(name='Total', description='The total number of subtasks.', example='0'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of returned records.', example='100'),
}

model DescribePreCheckStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreCheckStatusResponseBody(name='body'),
}

async function describePreCheckStatus(request: DescribePreCheckStatusRequest): DescribePreCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtsl8zl9ek6292****', position='Query'),
}

model DescribeSubscriptionInstanceAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts.', example='1361234****,1371234****'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Indicates whether task latency is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value is an integer. The recommended value is 10 seconds.', example='10'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts.', example='1361234****,1371234****'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Indicates whether task status is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210ec2e116055198849072222d****'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID', description='The ID of the change tracking instance.', example='dtsl8zl9ek6292****'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.', example='test'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeSubscriptionInstanceAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionInstanceAlertResponseBody(name='body'),
}

async function describeSubscriptionInstanceAlert(request: DescribeSubscriptionInstanceAlertRequest): DescribeSubscriptionInstanceAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstanceAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstanceStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](~~49442~~) operation to query the instance ID.', example='dtsy0zz3t13h7d****', position='Query'),
}

model DescribeSubscriptionInstanceStatusResponseBody = {
  beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-03-15T08:25:34Z'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-03-23T07:30:31Z'),
  consumptionClient?: string(name='ConsumptionClient', description='The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-03-26T14:03:21Z'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if change tracking failed.', example='******'),
  payType?: string(name='PayType', description='The billing method of the change tracking instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0845D0A-6D36-4EEB-BE26-CF191E1A****'),
  sourceEndpoint?: {
    instanceID?: string(name='InstanceID', description='The ID of the instance that hosts the source database.', example='rm-bp1162kryivb8****'),
    instanceType?: string(name='InstanceType', description='The instance type of the source database.

>  This parameter is returned only for change tracking instances of the new version.', example='RDS'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  status?: string(name='Status', description='The status of the change tracking task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Abnormal**: The task is not running as expected.', example='Normal'),
  subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

>  This parameter is returned only if your change tracking instance is of the new version and you have called the [CreateConsumerGroup](~~122863~~) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
  subscriptionDataType?: {
    DDL?: boolean(name='DDL', description='Indicates whether data definition language (DDL) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    DML?: boolean(name='DML', description='Indicates whether data manipulation language (DML) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='SubscriptionDataType', description='The types of operations that are tracked by the task.'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
    publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
    VPCHost?: string(name='VPCHost', description='The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-vpc.aliyuncs.com:18003'),
  }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID', description='The ID of the change tracking instance.', example='rm-bp1162kryivb8****'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.'),
  subscriptionObject?: {
    synchronousObject?: [ 
    {
      databaseName?: string(name='DatabaseName', description='The name of the database to which the object belongs.', example='dtstestdata'),
      tableList?: {
        table?: [ string ](name='Table')
      }(name='TableList', description='The table name.'),
      wholeDatabase?: string(name='WholeDatabase', description='Indicates whether the data of an entire database is tracked. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    }
  ](name='SynchronousObject')
  }(name='SubscriptionObject', description='The objects for change tracking.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The ID of the change tracking task.', example='y0zz3t13h7d****'),
}

model DescribeSubscriptionInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionInstanceStatusResponseBody(name='body'),
}

async function describeSubscriptionInstanceStatus(request: DescribeSubscriptionInstanceStatusRequest): DescribeSubscriptionInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstancesRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~49442~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.

>  If you specify this parameter, DTS returns all the change tracking instances that match the specified name.', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.', example='testkey1'),
      value?: string(name='Value', description='The tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model DescribeSubscriptionInstancesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of entries that can be displayed on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC3BAAF2-74E3-4471-8EB5-96202D6A****'),
  subscriptionInstances?: {
    subscriptionInstance?: [ 
    {
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T08:25:43Z'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T09:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T10:17:21Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if change tracking failed.', example='xxxxxxxx'),
      instanceCreateTime?: string(name='InstanceCreateTime', description='The time when the change tracking instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2021-06-21T02:48:20Z'),
      jobCreateTime?: string(name='JobCreateTime', description='The time when the change tracking task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T02:48:20Z'),
      payType?: string(name='PayType', description='The billing method of the change tracking instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
      sourceEndpoint?: {
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1162kryivb8****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.

>  This parameter is returned only for change tracking instances of the new version.', example='RDS'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The status of the change tracking task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Abnormal**: The task is not running as expected.', example='Normal'),
      subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

>  This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](~~122863~~) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
      subscriptionDataType?: {
        DDL?: boolean(name='DDL', description='Indicates whether data definition language (DDL) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        DML?: boolean(name='DML', description='Indicates whether data manipulation language (DML) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      }(name='SubscriptionDataType', description='The types of operations that are tracked by the task.'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
        publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
        VPCHost?: string(name='VPCHost', description='The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-vpc.aliyuncs.com:18003'),
      }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
      subscriptionInstanceID?: string(name='SubscriptionInstanceID', description='The ID of the change tracking instance.', example='rm-bp1162kryivb8****'),
      subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.'),
      subscriptionObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName', description='The name of the database to which the object belongs.', example='dtstestdata'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList', description='The table name.'),
          wholeDatabase?: string(name='WholeDatabase', description='Indicates whether the data of an entire database is tracked. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        }
      ](name='SynchronousObject')
      }(name='SubscriptionObject', description='The objects for change tracking.'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='testkey1'),
          value?: string(name='Value', description='The tag value that corresponds to the tag key.', example='testvalue1'),
        }
      ](name='Tag')
      }(name='Tags', description='The collection of tags.'),
    }
  ](name='SubscriptionInstance')
  }(name='SubscriptionInstances', description='The list of change tracking instances and the details of each instance.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of change tracking instances that belong to your Alibaba Cloud account.', example='1'),
}

model DescribeSubscriptionInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionInstancesResponseBody(name='body'),
}

async function describeSubscriptionInstances(request: DescribeSubscriptionInstancesRequest): DescribeSubscriptionInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionMetaRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the distributed change tracking instance.', example='dtsbr4m9luv2******', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the change tracking instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sid: string(name='Sid', description='The ID of the consumer group.', example='z38m91gg2******', position='Query'),
  subMigrationJobIds?: map[string]any(name='SubMigrationJobIds', description='The IDs of all subtasks in the distributed change tracking task. Separate multiple subtask IDs with commas (,).

>  You must specify at least one of the SubMigrationJobIds and **Topics** parameters. We recommend that you specify the SubMigrationJobIds parameter.', example='z38m91gg2******', shrink='json', position='Query'),
  topics?: map[string]any(name='Topics', description='The topics of all subtasks in the distributed change tracking task. Separate multiple topics with commas (,).

>  You must specify at least one of the **SubMigrationJobIds** and Topics parameters. We recommend that you specify the **SubMigrationJobIds** parameter.', example='cn_hangzhou_rm_bp1n0x0x5tz******_dtstestdata_version2', shrink='json', position='Query'),
}

model DescribeSubscriptionMetaResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C12E7A51-09A4-5796-94BE-08B6DA******'),
  subscriptionMetaList?: [ 
    {
      checkpoint?: long(name='Checkpoint', description='The consumer offset of the subtask. It is a UNIX timestamp that is generated when the client consumes the first data record. Unit: seconds.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1610524452'),
      DBList?: string(name='DBList', description='The objects of the subtask. For more information, see [Objects of DTS tasks](~~209545~~).', example='{\\"dtstestdata\\":{\\"name\\":\\"dtstestdata\\",\\"all\\":false,\\"Table\\":{\\"order\\":{\\"name\\":\\"order\\",\\"all\\":true}}}}'),
      dProxyUrl?: string(name='DProxyUrl', description='The endpoint and port number of the change tracking instance.', example='dts-cn-hangzhou.aliyuncs.com:18001'),
      sid?: string(name='Sid', description='The consumer group ID of the subtask.', example='z38m91gg2******'),
      topic?: string(name='Topic', description='The topic of the subtask.', example='cn_hangzhou_rm_bp1n0x0x5tz******_dtstestdata_version2'),
    }
  ](name='SubscriptionMetaList', description='The details of the subtasks.'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeSubscriptionMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionMetaResponseBody(name='body'),
}

/**
  * *   When Data Transmission Service (DTS) tracks data changes from a PolarDB-X 1.0 instance, data is distributed across the attached ApsaraDB RDS for MySQL instances. DTS runs a subtask for each ApsaraDB RDS for MySQL instance. You can call this operation to query the details of the subtasks in a distributed change tracking task.
  * *   You can call the [DescribeDtsJobs](~~209702~~) operation to query the ID of the change tracking instance and the ID of the consumer group.
  *
 */
async function describeSubscriptionMeta(request: DescribeSubscriptionMetaRequest): DescribeSubscriptionMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionMeta', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSyncStatusRequest {
  direction?: string(name='Direction', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeSyncStatusResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  syncStatusList?: [ 
    {
      checkpoint?: long(name='Checkpoint'),
      code?: string(name='Code'),
      delay?: long(name='Delay'),
      jobId?: string(name='JobId'),
      rate?: string(name='Rate'),
      status?: string(name='Status'),
    }
  ](name='SyncStatusList'),
}

model DescribeSyncStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSyncStatusResponseBody(name='body'),
}

async function describeSyncStatus(request: DescribeSyncStatusRequest): DescribeSyncStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSyncStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.', example='dtskxz1170c10p****', position='Query'),
}

model DescribeSynchronizationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts.', example='1361234****,1371234****'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Indicates whether task latency is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. Unit: seconds.', example='10'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts.', example='1361234****,1371234****'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Indicates whether task status is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210ec20e16055205968635339d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**

*   **Reverse**

> This parameter is returned only when the topology of data synchronization is two-way synchronization.', example='Forward'),
  synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='kxz1170c10p****'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.', example='Polar MySQL_TO_RDS MySQL'),
}

model DescribeSynchronizationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobAlertResponseBody(name='body'),
}

async function describeSynchronizationJobAlert(request: DescribeSynchronizationJobAlertRequest): DescribeSynchronizationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.', example='dtsexjk1alb116****', position='Query'),
}

model DescribeSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E6EB407F-C59F-4682-A682-A00FA6A2****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable', description='Indicates whether image matching is enabled. Valid values:

*   **true**: Image matching is enabled.
*   **false**: Image matching is disabled.', example='true'),
}

model DescribeSynchronizationJobReplicatorCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function describeSynchronizationJobReplicatorCompare(request: DescribeSynchronizationJobReplicatorCompareRequest): DescribeSynchronizationJobReplicatorCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobReplicatorCompare', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.

The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.', example='dtsexjk1alb116****', position='Query'),
}

model DescribeSynchronizationJobStatusResponseBody = {
  checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest data record was synchronized.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1610616144'),
  dataInitialization?: string(name='DataInitialization', description='Indicates whether full data synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
    percent?: string(name='Percent', description='The progress of full data synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='200001'),
    status?: string(name='Status', description='The status of full data synchronization. Valid values:

*   **NotStarted**: Full data synchronization is not started.
*   **Migrating**: Full data synchronization is in progress.
*   **Failed**: Full data synchronization failed.
*   **Finished**: Full data synchronization is completed.', example='Finished'),
  }(name='DataInitializationStatus', description='The status of full data synchronization.'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest data record was synchronized.', example='1610709865'),
    delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
    delayMillis?: long(name='DelayMillis', description='The synchronization latency, in milliseconds.', example='856'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.'),
    percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: %.', example='100'),
    status?: string(name='Status', description='The status of incremental data synchronization. Valid values:

*   **NotStarted**: Incremental data synchronization is not started.
*   **Migrating**: Incremental data synchronization is in progress.
*   **Failed**: Incremental data synchronization failed.
*   **Finished**: Incremental data synchronization is completed.', example='Finished'),
  }(name='DataSynchronizationStatus', description='The status of incremental data synchronization.'),
  delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
  delayMillis?: long(name='DelayMillis', description='The synchronization delay, in milliseconds.', example='506'),
  destinationEndpoint?: {
    engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the destination instance.', example='rm-bp162d4tp0500****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
    port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
  }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
  expireTime?: string(name='ExpireTime', description='The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.

>  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.', example='2021-03-07T16:00:00Z'),
  payType?: string(name='PayType', description='The billing method of the data synchronization instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
  performance?: {
    FLOW?: string(name='FLOW', description='The data traffic that is synchronized per second. Unit: MB/s.', example='1'),
    RPS?: string(name='RPS', description='The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
  }(name='Performance', description='The performance of the data synchronization instance.'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
        itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
        repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
      }
    ](name='Detail', description='The result of each precheck item.'),
    percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
    status?: string(name='Status', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
  }(name='PrecheckStatus', description='The precheck status.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DACDF659-AFC6-4DC8-ADB8-4569419A4****'),
  sourceEndpoint?: {
    engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
    port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  status?: string(name='Status', description='The status of the data synchronization task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is synchronizing data.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is completed.', example='synchronizing'),
  structureInitialization?: string(name='StructureInitialization', description='Indicates whether schema synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
    percent?: string(name='Percent', description='The progress of schema synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of tables whose schemas have been synchronized.', example='1'),
    status?: string(name='Status', description='The status of schema synchronization. Valid values:

*   **NotStarted**: Schema synchronization is not started.
*   **Migrating**: Schema synchronization is in progress.
*   **Failed**: Schema synchronization failed.
*   **Finished**: Schema synchronization is completed.', example='Finished'),
  }(name='StructureInitializationStatus', description='The status of schema synchronization.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**', example='Forward'),
  synchronizationJobClass?: string(name='SynchronizationJobClass', description='The specification of the data synchronization instance.', example='large'),
  synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtsexjk1alb116****'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.'),
  synchronizationObjects?: [ 
    {
      newSchemaName?: string(name='NewSchemaName', description='The database name that is used in the destination instance.', example='newdtstestdatabase'),
      schemaName?: string(name='SchemaName', description='The name of the synchronized database.', example='dtstestdatabase'),
      tableExcludes?: [ 
        {
          tableName?: string(name='TableName', description='The name of the excluded table.', example='order'),
        }
      ](name='TableExcludes', description='The source tables that are excluded from the data synchronization task.'),
      tableIncludes?: [ 
        {
          tableName?: string(name='TableName', description='The name of the synchronized table.', example='customer'),
        }
      ](name='TableIncludes', description='The tables that are synchronized by the task.'),
    }
  ](name='SynchronizationObjects', description='The objects that are synchronized by the task.'),
  taskId?: string(name='TaskId', example='exjk1alb116****'),
}

model DescribeSynchronizationJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobStatusResponseBody(name='body'),
}

async function describeSynchronizationJobStatus(request: DescribeSynchronizationJobStatusRequest): DescribeSynchronizationJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobStatusListRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationJobIdListJsonStr: string(name='SynchronizationJobIdListJsonStr', description='The IDs of the data synchronization instances. The value is a JSON array. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance IDs.', example='["dtsexjk1alb116****","dtskfq1149w254****"]', position='Query'),
}

model DescribeSynchronizationJobStatusListResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of data synchronization instances displayed on one page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1413460B-138A-48D1-836C-B24EDDC1****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationJobListStatusList?: [ 
    {
      synchronizationDirectionInfoList?: [ 
        {
          checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest data record was synchronized.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1610524452'),
          status?: string(name='Status', description='The status of the data synchronization task in this direction. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is synchronizing data.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is completed.', example='InitializeFailed'),
          synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**', example='Forward'),
        }
      ](name='SynchronizationDirectionInfoList', description='The details of data synchronization tasks in each direction.'),
      synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtsexjk1alb116****'),
    }
  ](name='SynchronizationJobListStatusList', description='The status of the data synchronization tasks.'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data synchronization instances.', example='2'),
}

model DescribeSynchronizationJobStatusListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobStatusListResponseBody(name='body'),
}

async function describeSynchronizationJobStatusList(request: DescribeSynchronizationJobStatusListRequest): DescribeSynchronizationJobStatusListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobStatusList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobsRequest {
  accountId?: string(name='AccountId', description='The page number of the returned page.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The tag value. You can call the [ListTagResources](~~191187~~) operation to query the tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The name of the data synchronization task.

>  Fuzzy matching is supported.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The tag key. You can call the [ListTagResources](~~191187~~) operation to query the tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The ID of the request.', example='testkey1'),
      value?: string(name='Value', description='The maximum number of entries that can be displayed on the current page.', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model DescribeSynchronizationJobsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The total number of data synchronization instances that belong to your Alibaba Cloud account.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='Indicates whether full data synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='30'),
  requestId?: string(name='RequestId', description='The list of data synchronization instances and the details of each instance.', example='92E1E99D-5224-4AD3-8C94-23A3516B****'),
  synchronizationInstances?: [ 
    {
      createTime?: string(name='CreateTime', description='The specification of the data synchronization instance.', example='2021-06-28 17:34:53.0'),
      dataInitialization?: string(name='DataInitialization', description='The synchronization latency, in seconds.', example='true'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The status of incremental data synchronization.

>  This parameter is no longer available.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The status of incremental data synchronization.

>  This parameter and its sub-parameters are no longer available.', example='100'),
        progress?: string(name='Progress', description='The synchronization latency.

>  This parameter is no longer available.', example='200001'),
        status?: string(name='Status', description='The number of records that have been synchronized during full data synchronization.', example='Finished'),
      }(name='DataInitializationStatus', description='The error message returned if full data synchronization failed.'),
      dataSynchronizationStatus?: {
        delay?: string(name='Delay', description='The connection settings of the destination instance.', example='0'),
        errorMessage?: string(name='ErrorMessage', description='The endpoint of the destination instance.'),
        percent?: string(name='Percent', description='The ID of the destination instance.', example='100'),
        status?: string(name='Status', description='The error message returned if incremental data synchronization failed.

>  This parameter is no longer available.', example='Finished'),
      }(name='DataSynchronizationStatus', description='The progress of incremental data synchronization. Unit: %.

>  This parameter is no longer available.'),
      delay?: string(name='Delay', description='The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd* *HH:mm:ss*.0 format (UTC+8).', example='0'),
      destinationEndpoint?: {
        engineName?: string(name='EngineName', description='The data traffic that is synchronized per second. Unit: MB/s.', example='MySQL'),
        ip?: string(name='IP', description='The database account of the destination instance.', example='172.16.88.***'),
        instanceId?: string(name='InstanceId', description='The database service port of the destination instance.', example='rm-bp162d4tp0500****'),
        instanceType?: string(name='InstanceType', description='The database type of the destination instance.', example='RDS'),
        port?: string(name='Port', description='The performance of the data synchronization instance.', example='3306'),
        userName?: string(name='UserName', description='The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='dtstest'),
      }(name='DestinationEndpoint', description='The type of the destination instance.'),
      errorMessage?: string(name='ErrorMessage', description='The billing method of the data synchronization instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
      expireTime?: string(name='ExpireTime', description='Indicates whether schema synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='2021-07-07T16:00:00Z'),
      instanceCreateTime?: string(name='InstanceCreateTime', description='The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-28T09:36:32Z'),
      jobCreateTime?: string(name='JobCreateTime', description='The tag value that corresponds to the tag key.', example='2021-06-28T09:34:53Z'),
      payType?: string(name='PayType', description='The time when the instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='PrePaid'),
      performance?: {
        FLOW?: string(name='FLOW', description='The precheck progress. Unit: %.', example='1'),
        RPS?: string(name='RPS', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='100'),
      }(name='Performance', description='The precheck status.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkStatus?: string(name='CheckStatus', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Success'),
            errorMessage?: string(name='ErrorMessage', description='The connection settings of the source instance.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            itemName?: string(name='ItemName', description='The ID of the source instance.', example='CHECK_CONN_SRC'),
            repairMethod?: string(name='RepairMethod', description='The endpoint of the source instance.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The name of the precheck item.'),
        percent?: string(name='Percent', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='100'),
        status?: string(name='Status', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
      }(name='PrecheckStatus', description='The result of each precheck item.'),
      sourceEndpoint?: {
        engineName?: string(name='EngineName', description='The progress of schema synchronization. Unit: %.', example='MySQL'),
        ip?: string(name='IP', description='The database account of the source instance.', example='172.16.88.***'),
        instanceId?: string(name='InstanceId', description='The database service port of the source instance.', example='rm-bp1i99e8l7913****'),
        instanceType?: string(name='InstanceType', description='The database type of the source instance.', example='RDS'),
        port?: string(name='Port', description='The status of schema synchronization.', example='3306'),
        userName?: string(name='UserName', description='The status of schema synchronization. Valid values:

*   **NotStarted**: Schema synchronization is not started.
*   **Migrating**: Schema synchronization is in progress.
*   **Failed**: Schema synchronization failed.
*   **Finished**: Schema synchronization is completed.', example='dtstest'),
      }(name='SourceEndpoint', description='The type of the source instance.'),
      status?: string(name='Status', description='The error message returned if data synchronization failed.', example='synchronizing'),
      structureInitialization?: string(name='StructureInitialization', description='The ID of the data synchronization instance.', example='true'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', example='100'),
        progress?: string(name='Progress', example='1'),
        status?: string(name='Status', description='The number of tables whose schemas have been synchronized.', example='Finished'),
      }(name='StructureInitializationStatus', description='The error message returned if schema synchronization failed.'),
      synchronizationDirection?: string(name='SynchronizationDirection', description='The tag key.', example='Forward'),
      synchronizationJobClass?: string(name='SynchronizationJobClass', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**', example='large'),
      synchronizationJobId?: string(name='SynchronizationJobId', description='The collection of tags.', example='dtsexjk1alb116****'),
      synchronizationJobName?: string(name='SynchronizationJobName', description='The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.

>  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.'),
      synchronizationObjects?: [ 
        {
          newSchemaName?: string(name='NewSchemaName', description='The name of the excluded table.', example='newdtstestdatabase'),
          schemaName?: string(name='SchemaName', description='The tables that are synchronized by the task.', example='dtstestdatabase'),
          tableExcludes?: [ 
            {
              tableName?: string(name='TableName', description='The status of full data synchronization.', example='order'),
            }
          ](name='TableExcludes', description='The name of the synchronized table.'),
          tableIncludes?: [ 
            {
              tableName?: string(name='TableName', description='The progress of full data synchronization. Unit: %.', example='customer'),
            }
          ](name='TableIncludes', description='The status of full data synchronization. Valid values:

*   **NotStarted**: Full data synchronization is not started.
*   **Migrating**: Full data synchronization is in progress.
*   **Failed**: Full data synchronization failed.
*   **Finished**: Full data synchronization is completed.'),
        }
      ](name='SynchronizationObjects', description='The source tables that are excluded from the data synchronization task.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The database name that is used in the destination instance.', example='testkey1'),
          value?: string(name='Value', description='The name of the synchronized database.', example='testvalue1'),
        }
      ](name='Tags', description='The objects that are synchronized by the task.'),
    }
  ](name='SynchronizationInstances', description='The name of the data synchronization task.'),
  totalRecordCount?: long(name='TotalRecordCount', description='The status of the data synchronization task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is synchronizing data.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is completed.', example='100'),
}

model DescribeSynchronizationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobsResponseBody(name='body'),
}

async function describeSynchronizationJobs(request: DescribeSynchronizationJobsRequest): DescribeSynchronizationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationObjectModifyStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  taskId: string(name='TaskId', description='The task ID, which is returned after you call the [ModifySynchronizationObject](~~49451~~) operation to modify the objects to be synchronized.', example='k71r16fj13g****', position='Query'),
}

model DescribeSynchronizationObjectModifyStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
    percent?: string(name='Percent', description='The progress of full data synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='39754'),
    status?: string(name='Status', description='The status of full data synchronization. Valid values:

*   **NotStarted**: Full data synchronization is not started.
*   **Migrating**: Full data synchronization is in progress.
*   **Failed**: Full data synchronization failed.
*   **Finished**: Full data synchronization is completed.', example='Finished'),
  }(name='DataInitializationStatus', description='The status of full data synchronization.'),
  dataSynchronizationStatus?: {
    delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.'),
    percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: %.', example='100'),
    status?: string(name='Status', description='The status of incremental data synchronization. Valid values:

*   **NotStarted**: Incremental data synchronization is not started.
*   **Migrating**: Incremental data synchronization is in progress.
*   **Failed**: Incremental data synchronization failed.
*   **Finished**: Incremental data synchronization is completed.', example='Migrating'),
  }(name='DataSynchronizationStatus', description='The status of incremental data synchronization.

>  This parameter and its sub-parameters will be removed in the future.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to modify the objects to be synchronized.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   Success: The task passed the precheck.
*   Failed: The task failed to pass the precheck.', example='Success'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.xxx.xx\\" (using password: YES)'),
        itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
        repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is Failed.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
      }
    ](name='Detail', description='The result of each precheck item.'),
    percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
    status?: string(name='Status', description='The precheck status.', example='Finished'),
  }(name='PrecheckStatus', description='The precheck status.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B38C644B-4395-4F6F-86E3-592F26BE****'),
  status?: string(name='Status', description='The status of the task that changes the objects to be synchronized. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Migrating**: The task is running.
*   **Failed**: The task failed.
*   **Finished**: The task is completed.', example='Finished'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if schema synchronization failed.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
    percent?: string(name='Percent', description='The progress of schema synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of tables whose schemas have been synchronized.', example='1'),
    status?: string(name='Status', description='The status of schema synchronization. Valid values:

*   **NotStarted**: Schema synchronization is not started.
*   **Migrating**: Schema synchronization is in progress.
*   **Failed**: Schema synchronization failed.
*   **Finished**: Schema synchronization is completed.', example='Finished'),
  }(name='StructureInitializationStatus', description='The status of schema synchronization.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeSynchronizationObjectModifyStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationObjectModifyStatusResponseBody(name='body'),
}

/**
  * Before you call this operation, you must call the [ModifySynchronizationObject](~~49451~~) operation to obtain the task ID.
  *
 */
async function describeSynchronizationObjectModifyStatus(request: DescribeSynchronizationObjectModifyStatusRequest): DescribeSynchronizationObjectModifyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationObjectModifyStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysRequest {
  category?: string(name='Category', description='The type of the tag. Valid values:

*   **Custom**: The tag is added by a user.
*   **System**: The tag is added by the system.

>  By default, if the parameter is left empty, custom tags and system tags are returned.', example='Custom', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1. This parameter is used together with PageSize.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of tags to return on each page if the DTS instance has multiple tags. Default value: 20.', example='20', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.', example='dtsl5o11f9029c****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
}

model DescribeTagKeysResponseBody = {
  category?: string(name='Category', description='The type of the tag.', example='Custom'),
  pageNumber?: int32(name='PageNumber', description='The start page of the returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of tags returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD110813-9AD6-5F07-BFC8-4C841309****'),
  tagKeys?: [ string ](name='TagKeys', description='The key of the tag.'),
  totalCount?: int32(name='TotalCount', description='The total number of returned tag keys.', example='10'),
}

model DescribeTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagValuesRequest {
  category?: string(name='Category', description='The type of the tag key. Valid values:

*   **Custom**: The tag key is created by users.
*   **System**: The tag key is created by the system.

>  By default, if the parameter is left empty, both custom tag keys and system tag keys are returned.', example='Custom', position='Query'),
  key?: string(name='Key', description='The tag key.

>  This parameter is required.', example='owner', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the start page to return for a tag key that has multiple values. The valid value ranges from 1 to the maximum value of the INTEGER data type. This parameter is often used with the PageSize parameter. Default value: 1.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of tag values to return each time for a tag key that has multiple values. Default value: 20.', example='20', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.

>  If this parameter is left empty, the values of all tag keys of the current user are returned.', example='dtsl5o11f9029c****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
}

model DescribeTagValuesResponseBody = {
  category?: string(name='Category', description='The type of the tag key.', example='Custom'),
  pageNumber?: int32(name='PageNumber', description='The start page of the returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of tag values returned on each page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD110813-9AD6-5F07-BFC8-4C841309****'),
  tagValues?: [ string ](name='TagValues', description='The tag values that are associated with the tag key.'),
  totalCount?: int32(name='TotalCount', description='The total number of tag values that are associated with the tag key.', example='13'),
}

model DescribeTagValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagValuesResponseBody(name='body'),
}

async function describeTagValues(request: DescribeTagValuesRequest): DescribeTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagValues', 'POST', '/', 'json', false, 'json', request);
}

model InitDtsRdsInstanceRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data synchronization task.', example='dtszvxa4qmot6p****', position='Query'),
  endpointCenId?: string(name='EndpointCenId', description='If the node is a self-managed MySQL database that is connected over CEN, you must specify the ID of the CEN instance.

> You must specify the **EndpointRegion** and **EndpointInstanceId** parameters or the EndpointCenId parameter based on the type of the node.', example='cen-9kqshqum*******', position='Query'),
  endpointInstanceId?: string(name='EndpointInstanceId', description='If the node is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.

> *   You must also specify the **EndpointRegion** parameter.
>*   You must specify the EndpointInstanceId parameter or the **EndpointCenId** parameter based on the type of the node.', example='rm-bp1162kryivb8****', position='Query'),
  endpointInstanceType?: string(name='EndpointInstanceType', description='The type of the node. Valid values:

*   **RDS**: an ApsaraDB RDS for MySQL instance
*   **CEN**: a self-managed MySQL database that is connected over CEN', example='RDS', position='Query'),
  endpointRegion?: string(name='EndpointRegion', description='If the node is an ApsaraDB RDS for MySQL instance, you must specify the region in which the ApsaraDB RDS for MySQL instance resides.

> *   You must also specify the **EndpointInstanceId** parameter.
>*   You must specify the EndpointRegion parameter or the **EndpointCenId** parameter based on the type of the node.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the active geo-redundancy database cluster resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model InitDtsRdsInstanceResponseBody = {
  adminAccount?: string(name='AdminAccount', description='The built-in account that is used by DTS to connect to the node.', example='rdsdt_dtsacct'),
  adminPassword?: string(name='AdminPassword', description='The password of the built-in account.', example='1jecpqrtc****'),
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7796ECE0-9C17-5E4D-9CE6-B7EC825A****'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model InitDtsRdsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitDtsRdsInstanceResponseBody(name='body'),
}

/**
  * *   The node must be an ApsaraDB RDS for MySQL instance or a self-managed MySQL database that is connected over Cloud Enterprise Network (CEN).
  * *   This operation is used to initialize the built-in account named rdsdt_dtsacct on a node of an active geo-redundancy database cluster. DTS uses this account to connect to the node and perform data synchronization tasks.
  *
 */
async function initDtsRdsInstance(request: InitDtsRdsInstanceRequest): InitDtsRdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitDtsRdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListDedicatedClusterRequest {
  orderColumn?: string(name='OrderColumn', description='The basis on which the retrieved entries are sorted if multiple DTS dedicated clusters are returned. Valid values:

*   **gmtCreated**: the time when a cluster was created.
*   **orderCount**: the number of nodes in a cluster.', example='gmtCreated', position='Query'),
  orderDirection?: string(name='OrderDirection', description='The order in which you want to sort the retrieved entries. Valid values:

*   asc: sorts the retrieved entries in ascending order. This is the default value.
*   desc: sorts the retrieved entries in descending order.', example='asc', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value of this parameter must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of clusters to return on each page.', example='10', position='Query'),
  params?: string(name='Params', description='The content of the query condition.

>  You must set the **Type parameter** to specify the type of the query condition.', example='dtspk3f13r731m****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  state?: string(name='State', description='The status of the cluster. Valid values:

*   **init**: The cluster is being initialized.
*   **schedule**: The cluster is pending scheduling.
*   **running**: The cluster is running.
*   **upgrade**: The cluster is being upgraded.
*   **downgrade**: The cluster is being downgraded.
*   **locked**: The cluster is locked.
*   **releasing**: The cluster is being released.
*   **released**: The cluster is released.', example='init', position='Query'),
  type?: string(name='Type', description='The type of the query condition. Valid values:

*   **NAME**: the name of the cluster.
*   **INSTANCE**: the ID of a cluster instance.
*   **DEDICAETEDCLUSTERID**: the ID of a dedicated cluster.

>  You must specify the query condition by using the **Params** parameter.', example='NAME', position='Query'),
}

model ListDedicatedClusterResponseBody = {
  dedicatedClusterStatusList?: {
    dedicatedClusterStatus?: [ 
    {
      cpuUtilization?: long(name='CpuUtilization', description='The CPU utilization, in percentage.', example='30'),
      dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtscluster*******'),
      dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='daily_test'),
      diskUtilization?: long(name='DiskUtilization', description='The disk usage.', example='50'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the DTS instance.', example='dtsi03e3zty16i****'),
      du?: long(name='Du', description='The number of DTS units (DUs).', example='30'),
      duUtilization?: long(name='DuUtilization', description='The DU usage, in percentage.', example='16.6667'),
      gmtCreated?: long(name='GmtCreated', description='The time when the cluster was created.', example='1647424384606'),
      memUtilization?: long(name='MemUtilization', description='The memory usage.', example='20'),
      nodeCount?: long(name='NodeCount', description='The number of nodes in the cluster.', example='5'),
      oversoldDu?: long(name='OversoldDu', description='The number of over-provisioned DUs.', example='60'),
      regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides.', example='cn-hangzhou'),
      state?: string(name='State', description='The status of the cluster. Valid values:

*   **init**: The cluster is being initialized.
*   **schedule**: The cluster is pending scheduling.
*   **running**: The cluster is running.
*   **upgrade**: The cluster is being upgraded.
*   **downgrade**: The cluster is being downgraded.
*   **locked**: The cluster is locked.
*   **releasing**: The cluster is being released.
*   **released**: The cluster is released.', example='init'),
      totalCpuCore?: long(name='TotalCpuCore', description='The total number of CPU cores.', example='100'),
      totalDiskGBSize?: long(name='TotalDiskGBSize', description='The total disk capacity. Unit: GB.', example='2048'),
      totalMemGBSize?: long(name='TotalMemGBSize', description='The total memory capacity. Unit: GB.', example='256'),
      usedCpuCore?: long(name='UsedCpuCore', description='The number of used CPU cores.', example='30'),
      usedDiskGBSize?: long(name='UsedDiskGBSize', description='The used disk capacity. Unit: GB.', example='1024'),
      usedDu?: long(name='UsedDu', description='The number of used DUs.', example='5'),
      usedMemGBSize?: long(name='UsedMemGBSize', description='The used memory capacity. Unit: GB.', example='128'),
    }
  ](name='DedicatedClusterStatus')
  }(name='DedicatedClusterStatusList', description='The statuses of all clusters.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of clusters that meet the query condition.', example='15'),
}

model ListDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDedicatedClusterResponseBody(name='body'),
}

async function listDedicatedCluster(request: ListDedicatedClusterRequest): ListDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The query token.

>  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.', example='212db86sca4384811e0b5e8707ec2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='dtsntk10k6r12v****', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   You must specify at least one of the **ResourceId.N** and Tag.N.Key parameters. The parameters cannot be empty strings.', example='testkey1'),
      value?: string(name='Value', description='The tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  nextToken?: string(name='NextToken', description='The query token.

>  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.', example='212db86sca4384811e0b5e8707ec2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='609AD332-F2B1-48B7-BF43-41FEE641****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the DTS instance.', example='dtsntk10k6r12v****'),
      resourceType?: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE'),
      tagKey?: string(name='TagKey', description='The tag key.', example='testkey1'),
      tagValue?: string(name='TagValue', description='The tag value that corresponds to the tag key.', example='testvalue1'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The collection of tags.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumerChannelRequest {
  consumerGroupId: string(name='ConsumerGroupId', description='The ID of the consumer group. You can call the [DescribeConsumerChannel](~~264169~~) operation to query the consumer group ID.', example='dtsor2y66j4219****', position='Query'),
  consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.', position='Query'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword', description='The new password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.', example='Test123456', position='Query'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The new username of the consumer group.

*   A username can contain one or more of the following character types: uppercase letters, lowercase letters, digits, and underscores (\\_).
*   A username cannot exceed 16 characters in length.', example='dtstest', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='dtsboss6pn1w73****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='boss6pn1w73****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='055CAF9B-C15D-4799-BB9E-E62D417****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConsumerChannelResponseBody(name='body'),
}

async function modifyConsumerChannel(request: ModifyConsumerChannelRequest): ModifyConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumerGroupPasswordRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumerGroupID: string(name='ConsumerGroupID', description='The ID of the consumer group.

You can call the [DescribeConsumerGroup](~~122886~~) operation to query the consumer group ID.', example='dtswc411cg617p****', position='Query'),
  consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group. You can call the [DescribeConsumerGroup](~~122886~~) operation to query the consumer group name.', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', description='The current password of the consumer group.', example='Test123456', position='Query'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The username of the consumer group. You can call the [DescribeConsumerGroup](~~122886~~) operation to query the username.', example='dtstest', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtsg2m10r1x15a****', position='Query'),
  consumerGroupNewPassword: string(name='consumerGroupNewPassword', description='The new password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.', example='Test654321', position='Query'),
}

model ModifyConsumerGroupPasswordResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A06B5CFF-9576-4BC1-BE62-A3D43E1F****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyConsumerGroupPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConsumerGroupPasswordResponseBody(name='body'),
}

/**
  * > 
  * *   This operation is applicable to only the new version of the change tracking feature. To use the new version, you must specify the SubscriptionInstanceNetworkType parameter when you call the ConfigureSubscriptionInstance operation. If you use the previous version, you do not need to specify the **SubscriptionInstanceNetworkType** parameter.
  * *   When you call this operation, the change tracking task must be in the NotStarted, Failed, Normal, or Abnormal state.
  *
 */
async function modifyConsumerGroupPassword(request: ModifyConsumerGroupPasswordRequest): ModifyConsumerGroupPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumerGroupPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumptionTimestampRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumptionTimestamp: string(name='ConsumptionTimestamp', description='The consumption checkpoint. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.', example='2019-10-15T17:20:03Z', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.', example='dtsg2m10r1x15a****', position='Query'),
}

model ModifyConsumptionTimestampResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABBACEFC-CBA9-4F80-A337-42F202F5****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyConsumptionTimestampResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConsumptionTimestampResponseBody(name='body'),
}

/**
  * > 
  * *   This operation is applicable to only the previous version of the change tracking feature. To use the new version, you must specify the SubscriptionInstanceNetworkType parameter when you call the [ConfigureSubscriptionInstance](~~49437~~) operation. If you use the previous version, you do not need to specify the **SubscriptionInstanceNetworkType** parameter.
  * *   If you use the new version, you need to set the consumption checkpoint on the change tracking client.
  * *   When you call this operation, you must stop the change tracking client, and the change tracking task must be in the Normal state.
  *
 */
async function modifyConsumptionTimestamp(request: ModifyConsumptionTimestampRequest): ModifyConsumptionTimestampResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumptionTimestamp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedClusterRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='dtscluster_h3fl1cs217sx952', position='Query'),
  dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='dtscluster_test_001', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='rm-bp1162kryivb8****', position='Query'),
  oversoldRatio?: int32(name='OversoldRatio', description='The overcommit ratio. Unit: %.', example='150', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyDedicatedClusterResponseBody = {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtscluster_h3fl1cs217sx952'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDedicatedClusterResponseBody(name='body'),
}

/**
  * You can modify only the overcommit ratio.
  *
 */
async function modifyDedicatedCluster(request: ModifyDedicatedClusterRequest): ModifyDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobConfigRequest {
  dtsJobId?: string(name='DtsJobId', example='lxsn87r328d****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  parameters?: string(name='Parameters', example='[{\\"module\\":\\"07\\",\\"name\\":\\"sink.connection.idle.second\\",\\"value\\":60},{\\"module\\":\\"07\\",\\"name\\":\\"sink.batch.size.maximum\\",\\"value\\":64}]', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyDtsJobConfigResponseBody = {
  requestId?: string(name='RequestId', example='068FA72F-4800-4A54-90BB-94806068****'),
}

model ModifyDtsJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobConfigResponseBody(name='body'),
}

async function modifyDtsJobConfig(request: ModifyDtsJobConfigRequest): ModifyDtsJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobDedicatedClusterRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', example='dtsxxxx', position='Query'),
  dtsJobIds?: string(name='DtsJobIds', example='["dtsxxxx01", "dtsxxx02"]', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyDtsJobDedicatedClusterResponseBody = {
  code?: string(name='Code', example='500'),
  dynamicMessage?: string(name='DynamicMessage', example='Type'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDtsJobDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobDedicatedClusterResponseBody(name='body'),
}

async function modifyDtsJobDedicatedCluster(request: ModifyDtsJobDedicatedClusterRequest): ModifyDtsJobDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobDuLimitRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='dtsxxx', position='Query'),
  duLimit: long(name='DuLimit', description='The upper limit of DUs for the DTS task.

>  Minimum value: **1**.', example='1', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyDtsJobDuLimitResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='500'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: long(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDtsJobDuLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobDuLimitResponseBody(name='body'),
}

/**
  * *   DTS allows you to upgrade or downgrade the configurations of DTS instances in a dedicated cluster. You can adjust the resources that are occupied for task execution to dynamically adjust the number of tasks that can be scheduled in the cluster. This way, you can reduce the total number of DUs required for the cluster or release DUs.
  * *   Before you modify the upper limit of DUs for a DTS task, make sure that sufficient DUs are available.
  *
 */
async function modifyDtsJobDuLimit(request: ModifyDtsJobDuLimitRequest): ModifyDtsJobDuLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobDuLimit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobEndpointRequest {
  aliyunUid?: string(name='AliyunUid', example='150780020300****', position='Query'),
  database?: string(name='Database', example='admin', position='Query'),
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', example='dtsaw012y2g15q****', position='Query'),
  dtsJobId?: string(name='DtsJobId', example='m4312mab158****', position='Query'),
  endpoint: string(name='Endpoint', example='src', position='Query'),
  endpointInstanceId?: string(name='EndpointInstanceId', example='rm-bp10k50h8374w****', position='Query'),
  endpointInstanceType: string(name='EndpointInstanceType', example='rds', position='Query'),
  endpointIp?: string(name='EndpointIp', example='172.168.XX.XXX', position='Query'),
  endpointPort?: string(name='EndpointPort', example='3306', position='Query'),
  endpointRegionId?: string(name='EndpointRegionId', position='Query'),
  modifyAccount?: boolean(name='ModifyAccount', position='Query'),
  password?: string(name='Password', example='DTStest****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  roleName?: string(name='RoleName', example='ram-for-dts', position='Query'),
  shardPassword?: string(name='ShardPassword', example='DTStest****', position='Query'),
  shardUsername?: string(name='ShardUsername', example='shard', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', example='Forward', position='Query'),
  username?: string(name='Username', example='dtstest', position='Query'),
}

model ModifyDtsJobEndpointResponseBody = {
  errCode?: string(name='ErrCode', example='DTS.Msg.InvalidEndpoint'),
  errMessage?: string(name='ErrMessage', example='The endpoint is invalid.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='3FA98DF2-2F81-51FF-8A38-AA5112DD****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDtsJobEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobEndpointResponseBody(name='body'),
}

async function modifyDtsJobEndpoint(request: ModifyDtsJobEndpointRequest): ModifyDtsJobEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobNameRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  dtsJobName: string(name='DtsJobName', description='The new name of the DTS task.

>  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model ModifyDtsJobNameResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.

>  For example, if the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8C498360-7892-433C-847A-BA71A850****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDtsJobNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobNameResponseBody(name='body'),
}

async function modifyDtsJobName(request: ModifyDtsJobNameRequest): ModifyDtsJobNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobPasswordRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  endpoint?: string(name='Endpoint', description='Specifies the database to which the password belongs. Valid values:

*   **src**: source database
*   **dest**: destination database

>  This parameter must be specified.', example='src', position='Query'),
  password?: string(name='Password', description='The new password of the account.

>  This parameter must be specified and cannot be the same as the current password.', example='Test123456', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  userName?: string(name='UserName', description='The account of the source or destination database.

>  This parameter must be specified.', example='dtstest', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model ModifyDtsJobPasswordResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8C498360-7892-433C-847A-BA71A850****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyDtsJobPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobPasswordResponseBody(name='body'),
}

async function modifyDtsJobPassword(request: ModifyDtsJobPasswordRequest): ModifyDtsJobPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDynamicConfigRequest {
  configList?: string(name='ConfigList', example='{\\"dts.datamove.source.rps.max\\":5000,\\"dts.datamove.source.bps.max\\":10485760}', position='Query'),
  dtsJobId: string(name='DtsJobId', example='ta7w132u12h****', position='Query'),
  enableLimit?: boolean(name='EnableLimit', example='true', position='Query'),
  jobCode: string(name='JobCode', example='07', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyDynamicConfigResponseBody = {
  code?: string(name='Code', example='200'),
  dynamicMessage?: string(name='DynamicMessage', example='DtsJobId'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='8D81829D-1BBD-5CE8-BE75-1CAD5750****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDynamicConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDynamicConfigResponseBody(name='body'),
}

async function modifyDynamicConfig(request: ModifyDynamicConfigRequest): ModifyDynamicConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDynamicConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubscriptionRequest {
  dbList: string(name='DbList', description='The objects of the change tracking task. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).

>  You can call the [DescribeDtsJobDetail](~~208925~~) operation to query the original objects of the task.', example='{"dtstest":{"name":"dtstest","all":true}}', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.', example='dtsboss6pn1w******', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='boss6pn1w******', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionDataTypeDDL: boolean(name='SubscriptionDataTypeDDL', description='Specifies whether to retrieve data definition language (DDL) statements. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  subscriptionDataTypeDML: boolean(name='SubscriptionDataTypeDML', description='Specifies whether to retrieve data manipulation language (DML) statements. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
}

model ModifySubscriptionResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='068FA72F-4800-4A54-90BB-94806068****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifySubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySubscriptionResponseBody(name='body'),
}

async function modifySubscription(request: ModifySubscriptionRequest): ModifySubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubscription', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubscriptionObjectRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](~~49442~~) operation to query the instance ID.', example='dtsl8zl9ek6292****', position='Query'),
  subscriptionObject: string(name='SubscriptionObject', description='The objects from which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](~~141902~~).', example='[{"DBName":"dtstestdata"}]', position='Query'),
}

model ModifySubscriptionObjectResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABBACEFC-CBA9-4F80-A337-42F202F5****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifySubscriptionObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySubscriptionObjectResponseBody(name='body'),
}

/**
  * When you call this operation, the change tracking task must be in the Normal, NotStarted, or Failed state.
  * > 
  * *   If you call this operation to modify the objects of a change tracking task that is in the Normal state, DTS automatically calls the [StartSubscriptionInstance](~~49438~~) to restart the task.
  * *   If you call this operation to modify the objects of a change tracking task that is in the NotStarted or Failed state, DTS does not automatically start the task. You must call the [StartSubscriptionInstance](~~49438~~) to restart the task.
  *
 */
async function modifySubscriptionObject(request: ModifySubscriptionObjectRequest): ModifySubscriptionObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubscriptionObject', 'POST', '/', 'json', false, 'json', request);
}

model ModifySynchronizationObjectRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.', example='dtskfq1149w254****', position='Query'),
  synchronizationObjects: string(name='SynchronizationObjects', position='Body'),
}

model ModifySynchronizationObjectResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='902DDCDE-C755-4458-85DA-DF9A323C****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The ID of the task that changes the objects. You must specify the task ID when you call the DescribeSynchronizationObjectModifyStatus operation to query the status and progress of the task.', example='tl911uvi25z****'),
}

model ModifySynchronizationObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySynchronizationObjectResponseBody(name='body'),
}

/**
  * >  When you call this operation, the data synchronization task must be in the Not Started or Synchronizing state.
  *
 */
async function modifySynchronizationObject(request: ModifySynchronizationObjectRequest): ModifySynchronizationObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySynchronizationObject', 'POST', '/', 'json', true, 'form', request);
}

model RenewInstanceRequest {
  buyCount?: string(name='BuyCount', description='The subscription duration of the DTS instance after renewal. Default value: 1.

*   If the **Period** parameter is set to **Year**, the valid values are **1 to 5**.
*   If the **Period** parameter is set to **Month**, the valid values are **1 to 60**.', example='1', position='Query'),
  chargeType: string(name='ChargeType', description='The billing method of the DTS instance. Set the value to **PREPAY**, which indicates the subscription billing method.', example='PREPAY', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='qi0r643lc31****', position='Query'),
  period?: string(name='Period', description='The billing cycle of the DTS instance after renewal. Valid values:

*   **Year**: annual subscription.
*   **Month**: monthly subscription. This is the default value.', example='Month', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model RenewInstanceResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method of the DTS instance. **PREPAY** is returned, which indicates the subscription billing method.', example='PREPAY'),
  code?: string(name='Code', description='The error code.

>  This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task.', example='qi0r643lc31****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  endTime?: string(name='EndTime', description='The time when the DTS instance expires after renewal. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ssZZZ* format. The time is displayed in UTC.

>  **ZZZ** indicates the offset of the time zone, which is displayed in the format of a plus sign (+) or a minus sign (-) followed by hours and minutes, such as **+00:00**.', example='2021-08-04T16:00:00.000+00:00'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceId?: string(name='InstanceId', description='The ID of the DTS instance.', example='dtsqi0r643lc31****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1112E255-0C38-4970-8159-1D54AD92****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data synchronization or change tracking instance.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to reset the reverse synchronization task only when the topology is two-way synchronization.', example='Forward', position='Query'),
}

model ResetDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ResetDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDtsJobResponseBody(name='body'),
}

/**
  * >  If you clear the configurations of a data synchronization or change tracking task, DTS deletes the task. Then, DTS creates another task. The task is in the Not Configured state. You must call the [ConfigureDtsJob](~~208399~~) operation reconfigure the task.
  *
 */
async function resetDtsJob(request: ResetDtsJobRequest): ResetDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model ResetSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to stop reverse synchronization only when the topology is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.', example='dtsm761239l27m****', position='Query'),
}

model ResetSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDC111B1-ACBF-457D-9656-247FDEE9****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ResetSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetSynchronizationJobResponseBody(name='body'),
}

/**
  * >  If you clear the configurations of a data synchronization task, the task will be released. To start the task again, you must call the **ConfigureSynchronizationJob** operation to reconfigure the task.
  *
 */
async function resetSynchronizationJob(request: ResetSynchronizationJobRequest): ResetSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model ReverseTwoWayDirectionRequest {
  dtsInstanceId?: string(name='DtsInstanceId', example='dtsldy114cy24f****', position='Query'),
  ignoreErrorSubJob?: boolean(name='IgnoreErrorSubJob', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ReverseTwoWayDirectionResponseBody = {
  code?: string(name='Code', example='200'),
  dynamicMessage?: string(name='DynamicMessage', example='DtsInstanceId'),
  errCode?: string(name='ErrCode', example='403'),
  errMessage?: string(name='ErrMessage', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', example='true'),
}

model ReverseTwoWayDirectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReverseTwoWayDirectionResponseBody(name='body'),
}

async function reverseTwoWayDirection(request: ReverseTwoWayDirectionRequest): ReverseTwoWayDirectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReverseTwoWayDirection', 'POST', '/', 'json', false, 'json', request);
}

model ShieldPrecheckRequest {
  dtsInstanceId: string(name='DtsInstanceId', description='The ID of the data migration or data synchronization instance. You can call the **DescribeMigrationJobs** or DescribeSynchronizationJobs operation to query the instance ID.', example='dtsi76118o3w92****', position='Query'),
  precheckItems: string(name='PrecheckItems', description='The precheck items that you want to ignore. Separate multiple items with commas (,). Valid values:

*   **CHECK_SAME_OBJ**: schema name conflict

*   **CHECK_SAME_USER**: multiple usernames for one instance

*   **CHECK_SRC**: source database version

*   **CHECK_TOPOLOGY**: topology

> For more information about the topologies supported by DTS, see [Synchronization topologies](~~124115~~).

*   **CHECK_SERVER_ID**: value of server_id in the source database', example='CHECK_SAME_OBJ', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ShieldPrecheckResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F4B5BC4-34B1-49C9-9C8F-C8F16AC4****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ShieldPrecheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ShieldPrecheckResponseBody(name='body'),
}

/**
  * If you call this operation to ignore all precheck items, you must call the [StartMigrationJob](https://www.alibabacloud.com/help/zh/doc-detail/49429.htm) or [StartSynchronizationJob](https://www.alibabacloud.com/help/zh/doc-detail/49448.htm) operation. DTS performs a precheck again. After the data migration or synchronization task passes the precheck, the task will be automatically started.
  *
 */
async function shieldPrecheck(request: ShieldPrecheckRequest): ShieldPrecheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShieldPrecheck', 'POST', '/', 'json', false, 'json', request);
}

model SkipPreCheckRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='c7412z57g8k****', position='Query'),
  jobId?: string(name='JobId', description='The ID of the precheck task. You can call the **DescribePreCheckStatus** operation to query the task ID.', example='b4my3zg929a****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  skip: boolean(name='Skip', description='Specifies whether to skip the precheck item. Valid values:

*   **true**: skips the precheck item.
*   **false**: does not skip the precheck item.

>  This parameter is required.', example='true', position='Query'),
  skipPreCheckItems?: string(name='SkipPreCheckItems', description='The shortened name of the precheck item. Valid values:

*   **CHECK_SAME_OBJ**: object name conflict

*   **CHECK_SAME_USER**: multiple usernames for one instance

*   **CHECK_SRC**: source database version

*   **CHECK_TOPOLOGY**: topology type

> For more information about the topologies supported by DTS, see [Synchronization topologies](~~124115~~).

*   **CHECK_SERVER_ID**: the server ID of the source database

>  Separate multiple shortened names with commas (,).', example='CHECK_SAME_OBJ', position='Query'),
  skipPreCheckNames?: string(name='SkipPreCheckNames', description='The name of the precheck item. This parameter corresponds to the **SkipPreCheckItems** parameter. Valid values:

*   **CHECK_SAME_OBJ_DETAIL**: object name conflict

*   **CHECK_SAME_USER_DETAIL**: multiple usernames for one instance

*   **CHECK_SRC_DETAIL**: source database version

*   **CHECK_TOPOLOGY_DETAIL**: topology type

> For more information about the topologies supported by DTS, see [Synchronization topologies](~~124115~~).

*   **CHECK_SERVER_ID_DETAIL**: the server ID of the source database

>  Separate multiple item names with commas (,).', example='CHECK_SAME_OBJ_DETAIL', position='Query'),
}

model SkipPreCheckResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the specified **JobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **JobId** is returned for **DynamicMessage**.', example='JobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  migrationJobId?: string(name='MigrationJobId', description='The ID of the DTS task on which the precheck is performed.', example='kyri3z9w29a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8C498360-7892-433C-847A-BA71A850****'),
  scheduleJobId?: string(name='ScheduleJobId', description='The ID of the precheck task.', example='b4my3zg929a****'),
  skipItems?: string(name='SkipItems', description='The shortened name of the precheck item.', example='CHECK_SAME_OBJ'),
  skipNames?: string(name='SkipNames', description='The name of the precheck item.', example='CHECK_SAME_OBJ_DETAIL'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model SkipPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SkipPreCheckResponseBody(name='body'),
}

async function skipPreCheck(request: SkipPreCheckRequest): SkipPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SkipPreCheck', 'POST', '/', 'json', false, 'json', request);
}

model StartDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.

>  You can call the [DescribeMigrationJobs](~~208139~~), [DescribeSubscriptionInstances](~~49442~~), or [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Data Transmission Service (DTS) instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Default value: Forward. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.

*   **Reverse**: Data is synchronized from the destination database to the source database.

>You can set this parameter to **Reverse** to start the reverse synchronization task only if the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model StartDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='601B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StartDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDtsJobResponseBody(name='body'),
}

async function startDtsJob(request: StartDtsJobRequest): StartDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model StartDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration or data synchronization task.

> 
*   For multiple tasks, separate them with commas (**,**).
*   You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='l5o11f9029c****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model StartDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StartDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDtsJobsResponseBody(name='body'),
}

async function startDtsJobs(request: StartDtsJobsRequest): StartDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model StartMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.', example='dtss0611o8vv90****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model StartMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDC111B1-ACBF-457D-9656-247FDEE9****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StartMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartMigrationJobResponseBody(name='body'),
}

/**
  * >  When you call this operation, the data migration task must be in the Not Started, Paused, or Migration Failed state.
  *
 */
async function startMigrationJob(request: StartMigrationJobRequest): StartMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model StartReverseWriterRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkPoint?: string(name='CheckPoint', description='The offset of the Incremental Write module. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. 

> The default value is the offset that is automatically saved by DTS when the task is paused.', example='1695613785', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the reverse task that was created by calling the CreateReverseDtsJob operation.', example='n99m9jx822k****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model StartReverseWriterResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291BA4F1-2035-3FAA-6D5A-5D2015CC****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StartReverseWriterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartReverseWriterResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that your instance is not released and is paused. You can check the status of the instance in the Data Transmission Service (DTS) console or by calling the [DescribeDtsJobDetail](~~208925~~) operation.
  *
 */
async function startReverseWriter(request: StartReverseWriterRequest): StartReverseWriterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartReverseWriter', 'POST', '/', 'json', false, 'json', request);
}

model StartSubscriptionInstanceRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.', example='dtso6m11cxt26q****', position='Query'),
}

model StartSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B083F9AB-BE9B-4716-8AD3-CFA04391****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The task ID. This parameter will be removed in the future.', example='11****'),
}

model StartSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSubscriptionInstanceResponseBody(name='body'),
}

/**
  * When you call this operation, the change tracking task must be in the NotStarted or Failed state.
  *
 */
async function startSubscriptionInstance(request: StartSubscriptionInstanceRequest): StartSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to start the reverse synchronization task only when the topology is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.', example='dtsf19100l2186****', position='Query'),
}

model StartSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDC111B1-ACBF-457D-9656-247FDEE9****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StartSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSynchronizationJobResponseBody(name='body'),
}

async function startSynchronizationJob(request: StartSynchronizationJobRequest): StartSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model StopDedicatedClusterRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='dtscluster_h3fl1cs217sx952', position='Query'),
  dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='dtscluster_test_001', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='rm-bp1162kryivb8****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model StopDedicatedClusterResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.q'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StopDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDedicatedClusterResponseBody(name='body'),
}

async function stopDedicatedCluster(request: StopDedicatedClusterRequest): StopDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model StopDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to stop the reverse synchronization task only when the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model StopDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message, which is used to replace **%s** in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StopDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDtsJobResponseBody(name='body'),
}

async function stopDtsJob(request: StopDtsJobRequest): StopDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model StopDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration or data synchronization task.

> 
*   Separate multiple task IDs by **,** (commas).
*   You can call the [DescribeDtsJobs](~~209702~~) operation to query task IDs.', example='l5o11f9029c****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model StopDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StopDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDtsJobsResponseBody(name='body'),
}

async function stopDtsJobs(request: StopDtsJobsRequest): StopDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model StopMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.', example='dtsb2c11sxpi3j****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model StopMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StopMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMigrationJobResponseBody(name='body'),
}

/**
  * >  After you call this operation to stop a data migration task, the status of the task changes to Finished and you cannot restart the task by calling the [StartMigrationJob](~~49429~~) operation.
  *
 */
async function stopMigrationJob(request: StopMigrationJobRequest): StopMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model SummaryJobDetailRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration or data synchronization instance.

>  You must specify at least one of the DtsJobId and DtsInstanceId parameters.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task.

>  You must specify at least one of the DtsJobId and DtsInstanceId parameters.', example='l3m1213ye7l****', position='Query'),
  jobCode: string(name='JobCode', description='The phase of the data migration task. Valid values:

*   **02**: The task is in the schema migration phase.
*   **03**: The task is in the incremental migration phase.', example='02', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  structType?: string(name='StructType', description='The type of schema definition. Valid values:

*   **before**: schema migration or initial schema synchronization
*   **after**: DDL operations performed during incremental data migration or synchronization', example='before', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction of the data synchronization task. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model SummaryJobDetailResponseBody = {
  code?: string(name='Code', description='The error code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  jobId?: string(name='JobId', description='The ID of the data migration or data synchronization task.', example='l3m1213ye7l****'),
  progressSummaryDetails?: [ 
    {
      key?: string(name='Key', description='The type of migrated or synchronized object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.', example='Table'),
      state?: int32(name='State', description='The state of the data migration or data synchronization task. Valid values:

*   **0**: The task was complete.
*   **1**: The task was waiting to start.
*   **2**: The task was being initialized.
*   **3**: The task was in progress.
*   **4**: An error occurred.
*   **5**: The task failed.', example='0'),
      totalCount?: long(name='TotalCount', description='The total number of migrated or synchronized objects.', example='100'),
    }
  ](name='ProgressSummaryDetails', description='The returned information about the migrated or synchronized objects in arrays.

>  The arrays are in the following format: \\[{"key":"Function","state":5,"totalCount":22},{"key":"Procedure","state":5,"totalCount":26},{"key":"Table","state":0,"totalCount":68},{"key":"View","state":5,"totalCount":100}].'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9033138C-5AB3-5EB7-BA78-43131F19297C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model SummaryJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SummaryJobDetailResponseBody(name='body'),
}

async function summaryJobDetail(request: SummaryJobDetailRequest): SummaryJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SummaryJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.

>  You can call the [DescribeDtsJobs](~~209702~~) operation to obtain the task ID.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to pause the reverse synchronization task only if the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model SuspendDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model SuspendDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendDtsJobResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function suspendDtsJob(request: SuspendDtsJobRequest): SuspendDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration or data synchronization task.

> 
*   For multiple tasks, separate them with commas (,).
*   You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='hfi12iv4z7e****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model SuspendDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SuspendDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendDtsJobsResponseBody(name='body'),
}

async function suspendDtsJobs(request: SuspendDtsJobsRequest): SuspendDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model SuspendMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.', example='dtsj1x11y51g3b****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model SuspendMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model SuspendMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendMigrationJobResponseBody(name='body'),
}

/**
  * > 
  * *   If a data migration task is performing incremental data migration, we recommend that you do not pause the task for more than 6 hours. Otherwise, you will not be able to call the [StartMigrationJob](~~49429~~) operation to restart the task.
  * *   If you select incremental data migration as the migration type for a pay-as-you-go instance, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, incremental data migration consumes resources such as the bandwidth of the source database.
  *
 */
async function suspendMigrationJob(request: SuspendMigrationJobRequest): SuspendMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to pause reverse synchronization only when the topology is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.', example='dtsmr1q4mc2152****', position='Query'),
}

model SuspendSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model SuspendSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendSynchronizationJobResponseBody(name='body'),
}

/**
  * > 
  * *   When you call this operation, the data synchronization task must be in the Synchronizing state.
  * *   We recommend that you do not pause a data synchronization task for more than 6 hours. Otherwise, the task cannot be started again.
  * *   If the billing method is pay-as-you-go, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, data synchronization consumes resources such as the bandwidth of the source database.
  *
 */
async function suspendSynchronizationJob(request: SuspendSynchronizationJobRequest): SuspendSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model SwitchPhysicalDtsJobToCloudRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model SwitchPhysicalDtsJobToCloudResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SwitchPhysicalDtsJobToCloudResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchPhysicalDtsJobToCloudResponseBody(name='body'),
}

async function switchPhysicalDtsJobToCloud(request: SwitchPhysicalDtsJobToCloudRequest): SwitchPhysicalDtsJobToCloudResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchPhysicalDtsJobToCloud', 'POST', '/', 'json', false, 'json', request);
}

model SwitchSynchronizationEndpointRequest {
  endpoint?: {
    ip?: string(name='IP', description='The IP address of the database.

>  You must specify the IP address only if the **Endpoint.InstanceType** parameter is set to **Express**.', example='172.15.185.***'),
    instanceId: string(name='InstanceId', description='The ID of the ECS instance or the virtual private cloud (VPC).

> 
*   If the **Endpoint.InstanceType** parameter is set to **ECS**, you must specify the ID of the ECS instance.
*   If the **Endpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the VPC.', example='i-bp11haem1kpkhoup****'),
    instanceType: string(name='InstanceType', description='The instance type of the database. Valid values:

*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database that is hosted on ECS
*   **Express**: self-managed database that is connected over Express Connect', example='ECS'),
    port: string(name='Port', description='The service port number of the database.', example='3306'),
    type: string(name='Type', description='Specifies whether to update the connection settings of the source instance or the destination instance. Valid values:

*   **Source**
*   **Destination**', example='Destination'),
  }(name='Endpoint', position='Query'),
  sourceEndpoint?: {
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account to which the source instance belongs. You must specify this parameter only if the source instance and the destination instance belong to different Alibaba Cloud accounts.', example='14069264****'),
    role?: string(name='Role', description='The authorized Resource Access Management (RAM) role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.

>  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).', example='ram-for-dts'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.

The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.', example='dtsexjk1alb116****', position='Query'),
}

model SwitchSynchronizationEndpointResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3232F84C-C961-4811-B014-4EA7A27C****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The task ID. You must specify the task ID when you call the [DescribeEndpointSwitchStatus](~~135598~~) operation to query the execution status of the task.', example='11****'),
}

model SwitchSynchronizationEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchSynchronizationEndpointResponseBody(name='body'),
}

/**
  * *   If the source or destination database is a self-managed MySQL database connected over the Internet, Elastic Compute Service (ECS) or Express Connect, you must call this operation to update the connection settings.
  * *   If the source or destination database is hosted on an ApsaraDB instance (such as ApsaraDB RDS instance and ApsaraDB for MongoDB instance), DTS automatically updates the connection settings. You do not need to call this operation.
  * > *   For two-way synchronization tasks, if you perform a primary/secondary switchover on the source or destination database, you must call this operation twice to update the connection settings.
  *         For example, if you perform a primary/secondary switchover on the destination database of the forward direction, you must call this operation twice. In the first call, set the **SynchronizationDirection** parameter to **Forward**, set the **Endpoint.Type **parameter to **Destination**, and configure the connection settings. In the second call, set the **SynchronizationDirection** parameter to **Reverse**, set the **Endpoint.Type **parameter to **Source**, and configure the connection settings.
  *
 */
async function switchSynchronizationEndpoint(request: SwitchSynchronizationEndpointRequest): SwitchSynchronizationEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchSynchronizationEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId: [ string ](name='ResourceId', example='dtsntk10k6r12v****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag.
*   This parameter cannot be an empty string.', example='testkey1'),
      value: string(name='Value', description='The tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='755D7B84-6813-42B0-BC9D-2699CFEA****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * If you have a large number of instances, you can create multiple tags and bind these tags to the instances. Then, you can filter the instances by tag.
  * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
  * *   If the tag that you specify does not exist, this tag is automatically created and bound to the specified instance.
  * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
  * *   You can bind up to 20 tags to each instance.
  * *   You can bind tags to up to 50 instances in each call.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TransferInstanceClassRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='r4yr723m199****', position='Query'),
  instanceClass: string(name='InstanceClass', description='The new instance class of the DTS instance. You can call the [DescribeDtsJobDetail](~~208925~~) operation to query the original instance class of the DTS instance.

*   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
*   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.

>  For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).', example='large', position='Query'),
  orderType: string(name='OrderType', description='Specifies whether to upgrade or downgrade the DTS instance. Valid values:

*   **UPGRADE**
*   **DOWNGRADE**', example='UPGRADE', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model TransferInstanceClassResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method of the DTS instance. Valid values:

*   **POSTPAY**: pay-as-you-go
*   **PREPAY**: subscription', example='POSTPAY'),
  code?: string(name='Code', description='The error code.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or data synchronization task.', example='r4yr723m199****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  endTime?: string(name='EndTime', description='The expiration time of the DTS instance.

>  This parameter is returned only if the ChargeType parameter is set to **PREPAY**.', example='2021-08-04T16:00:00.000+00:00'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceId?: string(name='InstanceId', description='The ID of DTS instance.', example='dtsr4yr723m199****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='716DB03E-2D0B-4DC3-BC4C-F7A9EE21****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**:The call failed.', example='true'),
}

model TransferInstanceClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferInstanceClassResponseBody(name='body'),
}

async function transferInstanceClass(request: TransferInstanceClassRequest): TransferInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInstanceClass', 'POST', '/', 'json', false, 'json', request);
}

model TransferPayTypeRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  buyCount?: string(name='BuyCount', description='The subscription length.

*   If the **Period** parameter is set to **Year**, the value range is **1** to **5**.
*   If the **Period** parameter is set to **Month**, the value range is **1** to **60**.

>  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.', example='5', position='Query'),
  chargeType: string(name='ChargeType', description='The billing method that you want to use. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go

> 
*   The billing method of subscription instances cannot be changed to pay-as-you-go. To prevent resource waste, determine whether you need to change the billing method of your resources.
*   If you do not need to change the billing method, specify the current billing method.', example='PostPaid', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.', example='o4nh3g7jg56****', position='Query'),
  maxDu?: int32(name='MaxDu', position='Query'),
  minDu?: int32(name='MinDu', position='Query'),
  period?: string(name='Period', description='The billing cycle of the subscription instance. Valid values:

*   **Year**
*   **Month** (default value)

>  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.', example='Year', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model TransferPayTypeResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method of the DTS instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the DTS task.', example='o4nh3g7jg56****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  endTime?: string(name='EndTime', description='The expiration time of the subscription instance. The value is a UNIX timestamp.

> 
*   If the DTS instance is a pay-as-you-go instance, the value of this parameter is empty.
*   You can use a search engine to obtain a UNIX timestamp converter.', example='1614916318'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceId?: string(name='InstanceId', description='The ID of the DTS instance.', example='dtso4nh3g7jg56****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='601B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model TransferPayTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferPayTypeResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of DTS.
  * *   The billing method of subscription instances cannot be changed to pay-as-you-go. To prevent resource waste, determine whether you need to change the billing method of your resources.
  * *   Data migration instances are all pay-as-you-go instances. You do not need to change the billing method of data migration instances.
  * *   After you change the billing method from pay-as-you-go to subscription, the DTS instance is not affected.
  *
 */
async function transferPayType(request: TransferPayTypeRequest): TransferPayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferPayType', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to unbind all tags from the specified instances. Valid values:

*   **true**: unbinds all tags from the specified instances.
*   **false**: To unbind only specific tags, you must specify the **TagKey.N** parameter.

> 
*   You must specify at least one of the All and **TagKey.N** parameters.
*   If you specify both the All parameter and the **TagKey.N** parameter, the All parameter does not take effect.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId: [ string ](name='ResourceId', example='dtsntk10k6r12v****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', example='testkey1', position='Query'),
}

model UntagResourcesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED3A8FE0-EEFA-4416-BC42-34D61A52****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * >  If a tag is unbound from an instance and is not bound to other instances, the tag is deleted.
  *
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeTwoWayRequest {
  instanceClass: string(name='InstanceClass', description='The instance class of the two-way synchronization task. Valid values: **large**, **medium**, **micro**, and **small**.

>  For more information, see [Specifications of data synchronization instances](~~26605~~).', example='large', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the data synchronization instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.', example='dtsh77p49x4k28****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model UpgradeTwoWayResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and that of the **DynamicMessage** parameter is **InstanceId**, the specified **InstanceId** parameter is invalid.', example='InstanceId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D3B4615-923F-49AA-AF21-6D8E3967****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpgradeTwoWayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeTwoWayResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS)
  * When you call this operation, take note of the following information:
  * *   The source and destination databases of the data synchronization task are both **MySQL** databases.
  * *   The synchronization topology of the data synchronization task is **one-way synchronization**.
  * *   The data synchronization task is in the **Synchronizing** state.
  * *   The upgrade operation causes data synchronization latency of about 5 seconds. We recommend that you perform this operation during off-peak hours.
  *
 */
async function upgradeTwoWay(request: UpgradeTwoWayRequest): UpgradeTwoWayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeTwoWay', 'POST', '/', 'json', false, 'json', request);
}

model WhiteIpListRequest {
  destinationRegion?: string(name='DestinationRegion', description='The HTTP status code.', example='cn-hangzhou', position='Query'),
  region: string(name='Region', description='The ID of the region where the destination instance resides. For more information, see [List of supported regions](~~141033~~).

> 
*   If the destination instance is a self-managed database with a public IP address or a third-party cloud database, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
*   If the DTS task is a data migration or data synchronization task, you must specify this parameter.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  type: string(name='Type', description='The ID of the region where the source instance resides. For more information, see [List of supported regions](~~141033~~).

>  If the source instance is a self-managed database with a public IP address or a third-party cloud database, you can set the parameter to **cn-hangzhou** or the ID of the closest region.', example='vpc', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', position='Query'),
}

model WhiteIpListResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error code. This parameter will be removed in the future.', example='Type'),
  errCode?: string(name='ErrCode', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The CIDR blocks of DTS servers. Multiple CIDR blocks are separated by commas (,).', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  ipList?: string(name='IpList', description='The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.', example='10.151.12.0/24,47.102.181.0/24,47.101.109.0/24,120.55.129.0/24,11.115.103.0/24,47.102.234.0/24'),
  requestId?: string(name='RequestId', description='The error code returned if the call failed.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='The error message returned if the call failed.', example='true'),
}

model WhiteIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WhiteIpListResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **WhiteIpList**.
  *
 */
async function whiteIpList(request: WhiteIpListRequest): WhiteIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WhiteIpList', 'POST', '/', 'json', false, 'json', request);
}

