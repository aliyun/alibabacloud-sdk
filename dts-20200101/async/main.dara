/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dts';
  @version = '2020-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'dts.aliyuncs.com',
    'cn-beijing' = 'dts.aliyuncs.com',
    'cn-zhangjiakou' = 'dts.aliyuncs.com',
    'cn-huhehaote' = 'dts.aliyuncs.com',
    'cn-hangzhou' = 'dts.aliyuncs.com',
    'cn-shanghai' = 'dts.aliyuncs.com',
    'cn-shenzhen' = 'dts.aliyuncs.com',
    'cn-hongkong' = 'dts.aliyuncs.com',
    'ap-southeast-1' = 'dts.aliyuncs.com',
    'ap-southeast-2' = 'dts.aliyuncs.com',
    'ap-southeast-3' = 'dts.aliyuncs.com',
    'ap-southeast-5' = 'dts.aliyuncs.com',
    'eu-west-1' = 'dts.aliyuncs.com',
    'us-west-1' = 'dts.aliyuncs.com',
    'us-east-1' = 'dts.aliyuncs.com',
    'eu-central-1' = 'dts.aliyuncs.com',
    'me-east-1' = 'dts.aliyuncs.com',
    'ap-south-1' = 'dts.aliyuncs.com',
    'cn-hangzhou-finance' = 'dts.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dts.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dts.aliyuncs.com',
    'cn-north-2-gov-1' = 'dts.aliyuncs.com',
    'ap-northeast-2-pop' = 'dts.aliyuncs.com',
    'cn-beijing-finance-1' = 'dts.aliyuncs.com',
    'cn-beijing-finance-pop' = 'dts.aliyuncs.com',
    'cn-beijing-gov-1' = 'dts.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'dts.aliyuncs.com',
    'cn-chengdu' = 'dts.aliyuncs.com',
    'cn-edge-1' = 'dts.aliyuncs.com',
    'cn-fujian' = 'dts.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'dts.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'dts.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'dts.aliyuncs.com',
    'cn-hangzhou-test-306' = 'dts.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'dts.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'dts.aliyuncs.com',
    'cn-qingdao-nebula' = 'dts.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'dts.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'dts.aliyuncs.com',
    'cn-shanghai-inner' = 'dts.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'dts.aliyuncs.com',
    'cn-shenzhen-inner' = 'dts.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'dts.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'dts.aliyuncs.com',
    'cn-wuhan' = 'dts.aliyuncs.com',
    'cn-wulanchabu' = 'dts.aliyuncs.com',
    'cn-yushanfang' = 'dts.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'dts.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'dts.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'dts.aliyuncs.com',
    'eu-west-1-oxs' = 'dts.aliyuncs.com',
    'rus-west-1-pop' = 'dts.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ConfigureMigrationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName', description='The region ID of the destination database.

>  If the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='dtstestdatabase'),
    engineName?: string(name='EngineName', description='The authorized RAM role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.

>  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).', example='MySQL'),
    ip?: string(name='IP', description='The ID of the instance that hosts the destination database.

>  You must specify the instance ID only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **MongoDB**, **Redis**, **DRDS**, **PetaData**, **OceanBase**, **POLARDB**, **PolarDB_o**, **AnalyticDB**, or **Greenplum**. For example, if the DestinationEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.', example='172.16.88.***'),
    instanceID?: string(name='InstanceID', description='The ID of the Alibaba Cloud account to which the source instance belongs.

>  You must specify this parameter only when you configure data migration across different Alibaba Cloud accounts.', example='rm-bp1r46452ai50****'),
    instanceType: string(name='InstanceType', description='The password of the source database account.

This parameter is required.', example='RDS'),
    oracleSID?: string(name='OracleSID', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='testsid'),
    password?: string(name='Password', description='The service port number of the destination database.

>  You must specify the service port number only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='Test123456'),
    port?: string(name='Port', description='The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.

>  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.', example='3306'),
    region?: string(name='Region', description='The instance type of the destination database. Valid values:

*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **LocalInstance**: self-managed database with a public IP address
*   **RDS**: ApsaraDB RDS instance
*   **DRDS**: PolarDB-X instance
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **Redis**: ApsaraDB for Redis instance
*   **PetaData**: HybridDB for MySQL instance
*   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
*   **PolarDB_o**: PolarDB O Edition cluster
*   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
*   **Greenplum**: AnalyticDB for PostgreSQL instance', example='cn-hangzhou'),
    userName?: string(name='UserName', description='The endpoint of the destination database.

>  You must specify the endpoint only if the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.', example='dtstestaccount'),
  }(name='DestinationEndpoint', position='Query'),
  migrationMode?: {
    dataIntialization: boolean(name='DataIntialization', description='The database account of the destination database.

>  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).

This parameter is required.', example='true'),
    dataSynchronization: boolean(name='DataSynchronization', description='The password of the destination database account.

This parameter is required.', example='true'),
    structureIntialization: boolean(name='StructureIntialization', description='The name of the destination database or the authentication database.

> 
*   You must specify the database name only if the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**.
*   If the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.

This parameter is required.', example='true'),
  }(name='MigrationMode', position='Query'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The endpoint of the source database.

>  You must specify the endpoint only if the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.', example='dtstestdatabase'),
    engineName?: string(name='EngineName', description='The instance type of the source database. Valid values:

*   **RDS**: ApsaraDB RDS instance
*   **ECS**: self-managed database that is hosted on ECS
*   **LocalInstance**: self-managed database with a public IP address
*   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
*   **dg**: self-managed database that is connected over Database Gateway
*   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
*   **PolarDB_o**: PolarDB O Edition cluster', example='MySQL'),
    ip?: string(name='IP', description='rm-bp1i99e8l7913****', example='172.16.88.***'),
    instanceID?: string(name='InstanceID', description='dtsl3m1213ye7l****', example='The name of the data migration task. The name can be up to 32 characters in length. We recommend that you specify an informative name to identify the task. You do not need to use a unique task name.'),
    instanceType: string(name='InstanceType', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.

This parameter is required.', example='RDS'),
    oracleSID?: string(name='OracleSID', description='The region ID of the source database.

>  If the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='testsid'),
    ownerID?: string(name='OwnerID', description='The name of the source database or the authentication database.

> 
*   You must specify the database name only if the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL** or **MongoDB**.
*   If the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL**, specify the name of the source database. If the SourceEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.', example='140692647406****'),
    password?: string(name='Password', description='The system ID (SID) of the Oracle database.

>  You must specify this parameter only if the **SourceEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.', example='Test123456'),
    port?: string(name='Port', description='The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.

>  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.', example='3306'),
    region?: string(name='Region', description='The ID of the instance that hosts the source database.

> 
*   You must specify the instance ID only if the **SourceEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **Express**, **MongoDB**, **POLARDB**, or **PolarDB_o**. For example, if the SourceEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
*   If the **SourceEndpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the virtual private cloud (VPC).', example='cn-hangzhou'),
    role?: string(name='Role', description='The database account of the source database.

>  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).', example='ram-for-dts'),
    userName?: string(name='UserName', description='The service port number of the source database.

>  You must specify the service port number only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='dtstestaccount'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The objects that you want to migrate. The value is a JSON string and can contain regular expressions.

For more information, see [MigrationObject](https://help.aliyun.com/document_detail/141227.html).', example='12323344****', position='Query'),
  checkpoint?: string(name='Checkpoint', description='Specifies whether to perform incremental data migration. Valid values:

*   **true**: yes
*   **false**: no

>  For more information about databases that support incremental data migration, see [Supported databases and migration types](https://help.aliyun.com/document_detail/26618.html).', example='111', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='system

This parameter is required.', example='The operation that you want to perform. Set the value to **ConfigureMigrationJob**.', position='Query'),
  migrationJobName: string(name='MigrationJobName', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  The region ID of the data migration instance is the same as that of the destination database.

This parameter is required.', example='MySQL_TO_RDS', position='Query'),
  migrationObject: string(name='MigrationObject', description='Specifies whether to perform schema migration. Valid values:

*   **true**: yes
*   **false**: no

>  For more information about databases that support schema migration, see [Supported databases and migration types](https://help.aliyun.com/document_detail/26618.html).

This parameter is required.', example='[{"DBName":"dtstestdata","TableIncludes":[{"TableName":"customer"}]}]', position='Body'),
  migrationReserved?: string(name='MigrationReserved', description='Specifies whether to perform full data migration. Valid values:

*   **true**: yes
*   **false**: no

>  For more information about databases that support full data migration, see [Supported databases and migration types](https://help.aliyun.com/document_detail/26618.html).', example='{     "autoStartModulesAfterConfig": "none",     "targetTableMode": 2 }', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
}

model ConfigureMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The ID of the request.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The start offset of incremental data migration. The value is a UNIX timestamp. Unit: seconds.', example='40E35BD9-002E-4D63-9BE5-FBA48833****'),
  success?: string(name='Success', description='The SID of the Oracle database.

>  You must specify this parameter only if the **DestinationEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.', example='true'),
}

model ConfigureMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigureMigrationJob  ConfigureMigrationJobRequest
  * @return ConfigureMigrationJobResponse
 */
async function configureMigrationJob(request: ConfigureMigrationJobRequest): ConfigureMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureMigrationJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureMigrationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).

> 

*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Specifies whether to monitor task latency. Valid values:

*   **enable**: yes
*   **disable**: no

> 

*   The default value is **enable**.
*   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.', example='enable', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.', example='10', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).

> 

*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Specifies whether to monitor task status. Valid values:

*   **enable**: yes
*   **disable**: no

> 

*   The default value is **enable**.
*   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
*   If the task that you monitor enters an abnormal state, an alert is triggered.', example='enable', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.

This parameter is required.', example='dtslb9113qq11n****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ConfigureMigrationJobAlertResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0a2a047516051973705541561d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureMigrationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureMigrationJobAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigureMigrationJobAlert  ConfigureMigrationJobAlertRequest
  * @return ConfigureMigrationJobAlertResponse
 */
async function configureMigrationJobAlert(request: ConfigureMigrationJobAlertRequest): ConfigureMigrationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureMigrationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSubscriptionRequest {
  checkpoint?: string(name='Checkpoint', description='The UNIX timestamp that represents the start time of change tracking. Unit: seconds.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1616902385', position='Query'),
  dbList: string(name='DbList', description='The objects for which you want to track data changes. The value must be a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).

This parameter is required.', example='{"dtstest":{"name":"dtstest","all":true}}', position='Query'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which the change tracking task is scheduled to run.', example='dtscluster_atyl3b5214uk***', position='Query'),
  delayNotice?: boolean(name='DelayNotice', description='Specifies whether to monitor the task latency. Valid values:

*   **true**: monitors the task latency.
*   **false**: does not monitor the task latency.', example='true', position='Query'),
  delayPhone?: string(name='DelayPhone', description='The mobile numbers to which latency-related alerts are sent. Separate multiple mobile numbers with commas (,).

> 
*   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
*   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  delayRuleTime?: long(name='DelayRuleTime', description='The threshold for triggering latency-related alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business needs. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayNotice** parameter is set to **true**, this parameter is required.', example='10', position='Query'),
  dtsBisLabel?: string(name='DtsBisLabel', description='Environment label of the DTS instance, with values:
- **normal**: **general** - **online**: **production**', example='normal', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.', example='dtsy0zz3t13h7d****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.', example='y0zz3t13h7d****', position='Query'),
  dtsJobName: string(name='DtsJobName', description='The name of the change tracking task.

>  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.

This parameter is required.', example='for_test', position='Query'),
  errorNotice?: boolean(name='ErrorNotice', description='Specifies whether to monitor the task status. Valid values:

*   **true**: monitors the task status.
*   **false**: does not monitor the task status.', example='true', position='Query'),
  errorPhone?: string(name='ErrorPhone', description='The mobile numbers to which status-related alerts are sent. Separate multiple mobile numbers with commas (,).

> 
*   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
*   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  maxDu?: double(name='MaxDu', description='The DU upper limit of the Serverless instance, with values being: 2, 4, 8, 16. 
Currently, this feature is not supported, please do not pass in parameters.', example='16', position='Query'),
  minDu?: double(name='MinDu', description='The lower limit of DU for Serverless instances, with values being: 1, 2, 4, 8, 16. 
This feature is currently not supported, please do not pass in parameters.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  reserve?: string(name='Reserve', description='The reserved parameter of DTS. The value must be a JSON string. You can specify this parameter to add more configurations of the source or destination database to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the ID of the CEN instance. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{      "srcInstanceId": "cen-9kqshqum*******"  }', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', description='Name of the database to be subscribed.', example='dtstestdata', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', description='The engine of the source database. Valid values: **MySQL**, **PostgreSQL**, and **Oracle**.

>  If the source database is a self-managed database, you must specify this parameter.', example='PostgreSQL', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', description='The endpoint of the source database.

>  This parameter is required only when the source database is a self-managed database.', example='172.16.8*.***', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', description='The ID of the source database.

>  This parameter is required only when the source database is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.', example='rm-bp1zc3iyqe3qw****', position='Query'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType', description='The type of the source database. Valid values:

*   **RDS**: ApsaraDB RDS for MySQL instance
*   **PolarDB**: PolarDB for MySQL cluster
*   **DRDS**: PolarDB-X 1.0 instance
*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
*   **Express**: self-managed database connected over Express Connect
*   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
*   **dg**: self-managed database connected over Database Gateway', example='RDS', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', description='The system ID (SID) of the Oracle database.

>  This parameter is required only when the source database is a self-managed Oracle database and is not deployed in the Real Application Clusters (RAC) architecture.', example='testsid', position='Query'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID', description='The ID of the Alibaba Cloud account to which the source database belongs.

>  This parameter is required only when you track data changes across different Alibaba Cloud accounts.', example='140692647406****', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', description='The password of the account that is used to connect to the source database.', example='Test123456', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', description='The service port number of the source database.

>  This parameter is required only when the source database is a self-managed database.', example='3306', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', description='The ID of the region in which the source database resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  If the source database is a self-managed database with a public IP address, you can set the value of this parameter to **cn-hangzhou** or the ID of the region that is closest to the region in which the self-managed database resides.', example='cn-hangzhou', position='Query'),
  sourceEndpointRole?: string(name='SourceEndpointRole', description='The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking task. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.

>  For more information about the permissions that are required for the RAM role and how to grant the permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).', example='ram-for-dts', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', description='The username of the account that is used to connect to the source database.

>  The permissions that are required for the database account vary with the change tracking scenario. For more information, see [Prepare the source database account for change tracking](https://help.aliyun.com/document_detail/212653.html).', example='dtstest', position='Query'),
  srcCaCertificateOssUrl?: string(name='SrcCaCertificateOssUrl', description='The path of the certificate authority (CA) certificate that is used if the connection to the source database is encrypted by using the SSL protocol.

>  This feature is not supported. Do not specify this parameter.', example='****', position='Query'),
  srcCaCertificatePassword?: string(name='SrcCaCertificatePassword', description='The key of the CA certificate that is used if the connection to the source database is encrypted by using the SSL protocol.

>  This feature is not supported. Do not specify this parameter.', example='****', position='Query'),
  srcClientCertOssUrl?: string(name='SrcClientCertOssUrl', description='The path to the client certificate that is used if the connection to the source database is encrypted by using the SSL protocol.

>  This feature is not supported. Do not specify this parameter.', example='****', position='Query'),
  srcClientKeyOssUrl?: string(name='SrcClientKeyOssUrl', description='The path to the private key of the client certificate that is used if the connection to the source database is encrypted by using the SSL protocol.

>  This feature is not supported. Do not specify this parameter.', example='****', position='Query'),
  srcClientPassword?: string(name='SrcClientPassword', description='The password of the private key of the client certificate that is used if the connection to the source database is encrypted by using the SSL protocol.

>  This feature is not supported. Do not specify this parameter.', example='****', position='Query'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL', description='Specifies whether to track DDL statements. Default value: true. Valid values:

*   **true**: tracks DDL statements.
*   **false**: does not track DDL statements.', example='true', position='Query'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML', description='Specifies whether to track DML statements. Default value: true. Valid values:

*   **true**: tracks DML statements.
*   **false**: does not track DML statements.', example='true', position='Query'),
  subscriptionInstanceNetworkType: string(name='SubscriptionInstanceNetworkType', description='The network type of the change tracking task. Set the value to **vpc**. A value of vpc indicates the Virtual Private Cloud (VPC) network type.

> 
*   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstanceVPCId** and **SubscriptionInstanceVSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
*   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.

This parameter is required.', example='vpc', position='Query'),
  subscriptionInstanceVPCId?: string(name='SubscriptionInstanceVPCId', description='The ID of the VPC in which the change tracking instance is deployed.

>  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vpc-bp1vwnn14rqpyiczj****', position='Query'),
  subscriptionInstanceVSwitchId?: string(name='SubscriptionInstanceVSwitchId', description='The ID of the vSwitch in the specified VPC.

>  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vsw-bp10df3mxae6lpmku****', position='Query'),
}

model ConfigureSubscriptionResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance.', example='dtsy0zz3t13h7d****'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task.', example='y0zz3t13h7d****'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D6ECADF-C5E9-4C96-8811-77602B31****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ConfigureSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSubscriptionResponseBody(name='body'),
}

/**
  * @description >  You can preview related API operation parameters when you configure a change tracking task in the Data Transmission Service (DTS) console. This helps you configure the request parameters of this API operation. For more information, see [Preview the request parameters of API operations](https://help.aliyun.com/document_detail/2851612.html).
  * @param request  the request parameters of ConfigureSubscription  ConfigureSubscriptionRequest
  * @return ConfigureSubscriptionResponse
 */
async function configureSubscription(request: ConfigureSubscriptionRequest): ConfigureSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscription', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSubscriptionInstanceRequest {
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the source database.', example='dtstestdata'),
    ip?: string(name='IP', description='The endpoint of the source database.

> This parameter is available and required only if the source database is a self-managed database.', example='172.16.88.***'),
    instanceID?: string(name='InstanceID', description='The ID of the source instance.

> This parameter is available and required only if the source instance is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.', example='rm-bp1zc3iyqe3qw****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance. Valid values:

*   **RDS**: ApsaraDB RDS for MySQL instance
*   **PolarDB**: PolarDB for MySQL cluster.
*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
*   **Express**: self-managed database connected over Express Connect
*   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
*   **dg**: self-managed database connected over Database Gateway

> The engine of a self-managed database can be MySQL or Oracle. You must specify the engine type when you call the [CreateSubscriptionInstance](https://help.aliyun.com/document_detail/49436.html) operation.', example='RDS'),
    oracleSID?: string(name='OracleSID', description='The system ID (SID) of the Oracle database.

> This parameter is available and required only if the source database is a self-managed Oracle database and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account to which the source database belongs.

> This parameter is available and required only if you track data changes across different Alibaba Cloud accounts.', example='140692647406****'),
    password?: string(name='Password', description='The password of the account that is used to connect to the source database.', example='Test123456'),
    port?: string(name='Port', description='The service port number of the source database.

> This parameter is available and required only if the source database is a self-managed database.', example='3306'),
    role?: string(name='Role', description='The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking task. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.

> For more information about the permissions that are required for the RAM role and how to grant permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).', example='ram-for-dts'),
    userName?: string(name='UserName', description='The username of the account that is used to connect to the source database.

> The permissions that are required for the database account vary based on change tracking scenarios. For more information, see [Overview of change tracking scenarios](https://help.aliyun.com/document_detail/145715.html).', example='dtstestaccount'),
  }(name='SourceEndpoint', position='Query'),
  subscriptionDataType?: {
    DDL: boolean(name='DDL', description='Specifies whether to track DDL statements. Default value: true. Valid values:

*   **true**: tracks DDL statements.
*   **false**: does not track DDL statements.

This parameter is required.', example='true'),
    DML: boolean(name='DML', description='Specifies whether to track DML statements. Default value: true. Valid values:

*   **true**: tracks DML statements.
*   **false**: does not track DML statements.

This parameter is required.', example='true'),
  }(name='SubscriptionDataType', position='Query'),
  subscriptionInstance?: {
    VPCId?: string(name='VPCId', description='The ID of the VPC in which the change tracking instance is deployed.

> This parameter is available and required only if the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vpc-bp1vwnn14rqpyiczj****'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in the specified VPC.

> This parameter is available and required only if the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.', example='vsw-bp10df3mxae6lpmku****'),
  }(name='SubscriptionInstance', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is about to be discontinued.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html) operation to query the instance ID.

This parameter is required.', example='dtshp8n2ze4r5x****', position='Query'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.

> We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.', example='MySQL Subscription', position='Query'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType', description='The network type of the change tracking instance. Set the value to **vpc**, which specifies the Virtual Private Cloud (VPC) network type.

> 

*   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstance.VPCId** and **SubscriptionInstance.VSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.

*   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.', example='vpc', position='Query'),
  subscriptionObject: string(name='SubscriptionObject', description='The objects for which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](https://help.aliyun.com/document_detail/141902.html).

This parameter is required.', example='[{     "DBName": "dtstestdata" }]', position='Body'),
}

model ConfigureSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0CC15092-8957-4532-B559-B4FB80AC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ConfigureSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSubscriptionInstanceResponseBody(name='body'),
}

/**
  * @description Before you call this operation, you must call the [CreateSubscriptionInstance](https://help.aliyun.com/document_detail/49436.html) operation to create a change tracking instance.
  * @param request  the request parameters of ConfigureSubscriptionInstance  ConfigureSubscriptionInstanceRequest
  * @return ConfigureSubscriptionInstanceResponse
 */
async function configureSubscriptionInstance(request: ConfigureSubscriptionInstanceRequest): ConfigureSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscriptionInstance', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Specifies whether to monitor task latency. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.', example='enable', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.', example='10', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).

> 
*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Specifies whether to monitor task status. Valid values:

*   **enable**: yes
*   **disable**: no

> 
*   The default value is **enable**.
*   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
*   If the task that you monitor enters an abnormal state, an alert is triggered.', example='enable', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtsl8zl9ek6292****', position='Query'),
}

model ConfigureSubscriptionInstanceAlertResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='InternalError  The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0a2a047516051973705541561d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSubscriptionInstanceAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSubscriptionInstanceAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigureSubscriptionInstanceAlert  ConfigureSubscriptionInstanceAlertRequest
  * @return ConfigureSubscriptionInstanceAlertResponse
 */
async function configureSubscriptionInstanceAlert(request: ConfigureSubscriptionInstanceAlertRequest): ConfigureSubscriptionInstanceAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscriptionInstanceAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSynchronizationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName', description='The name of the database to which the synchronization object in the destination instance belongs.', example='dtstestdata'),
    ip?: string(name='IP', description='The IP address of the destination database.

>  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **Express**, **dg**, or **cen**.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the destination instance.

>  If the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute** or **DataHub**, you must specify the name of the MaxCompute project or the DataHub project.

If the destination instance is an AnalyticDB for MySQL cluster, specify the ID of the AnalyticDB for MySQL cluster.', example='rm-bp1r46452ai50****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance. Valid values:

*   **Redis**: ApsaraDB for Redis instance
*   **RDS**: ApsaraDB RDS instance
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **ECS**: self-managed database that is hosted on ECS
*   **Express**: self-managed database that is connected over Express Connect
*   **DataHub**: DataHub project
*   **MaxCompute**: MaxCompute project
*   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
*   **Greenplum**: AnalyticDB for PostgreSQL instance

>  The default value is **RDS**.', example='RDS'),
    password?: string(name='Password', description='The password of the destination database account.

> 
*   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.Password parameter.', example='Test654321'),
    port?: string(name='Port', description='The service port number of the destination database.

>  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='3306'),
    userName?: string(name='UserName', description='The database account of the destination database.

> 
*   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/140954.html).
*   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.UserName parameter.
*   If the **DestinationEndpoint.InstanceType** parameter is set to RDS and the database version is MySQL 5.5 or MySQL 5.6, you do not need to specify the DestinationEndpoint.UserName and **DestinationEndpoint.Password** parameters.
*   If the **DestinationEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the DestinationEndpoint.UserName parameter.', example='dtstestaccount'),
  }(name='DestinationEndpoint', position='Query'),
  partitionKey?: {
    modifyTimeDay?: boolean(name='ModifyTime_Day', description='Specifies whether the incremental data table contains partitions defined by the modifytime_day field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeHour?: boolean(name='ModifyTime_Hour', description='Specifies whether the incremental data table contains partitions defined by the modifytime_hour field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeMinute?: boolean(name='ModifyTime_Minute', description='Specifies whether the incremental data table contains partitions defined by the modifytime_minute field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeMonth?: boolean(name='ModifyTime_Month', description='Specifies whether the incremental data table contains partitions defined by the modifytime_month field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
    modifyTimeYear?: boolean(name='ModifyTime_Year', description='Specifies whether the incremental data table contains partitions defined by the modifytime_year field. Valid values: **true** and **false**.

>  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.', example='true'),
  }(name='PartitionKey', position='Query'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the database to which the synchronization object in the source instance belongs.', example='dtstestdata'),
    ip?: string(name='IP', description='The IP address of the source database.

>  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance. Valid values:

*   **RDS**: ApsaraDB RDS instance
*   **Redis**: ApsaraDB for Redis instance
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **Express**: self-managed database that is connected over Express Connect
*   **dg**: self-managed database that is connected over Database Gateway
*   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)

>  The default value is **RDS**.', example='RDS'),
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account that owns the source RDS instance.

>  You can specify this parameter to synchronize data across different Alibaba Cloud accounts. In this case, you also need to specify the **SourceEndpoint.Role** parameter.', example='140692647406****'),
    password?: string(name='Password', description='The password of the source database account.

>  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='Test123456'),
    port?: string(name='Port', description='The service port number of the source database.

>  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.', example='3306'),
    role?: string(name='Role', description='The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.

>  You must specify this parameter when you synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).', example='ram-for-dts'),
    userName?: string(name='UserName', description='The database account of the source database.

> 
*   You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
*   If the **SourceEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the database account.
*   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/140954.html).', example='dtstestaccount'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  checkpoint?: string(name='Checkpoint', description='The synchronization checkpoint.', example='1610540493', position='Query'),
  dataInitialization: boolean(name='DataInitialization', description='Specifies whether to perform initial full data synchronization. Valid values:

*   **true**: yes
*   **false**: no

>  Default value: **true**.

This parameter is required.', example='true', position='Query'),
  migrationReserved?: string(name='MigrationReserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).

>  This parameter can be used for data synchronization between ApsaraDB for Redis Enterprise Edition instances. For more information, see [Use OpenAPI Explorer to configure one-way or two-way data synchronization between ApsaraDB for Redis Enterprise Edition instances](https://help.aliyun.com/document_detail/155967.html).', example='{     "autoStartModulesAfterConfig": "none",     "targetTableMode": 2 }', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzawhxxc****', position='Query'),
  structureInitialization: boolean(name='StructureInitialization', description='Specifies whether to perform initial schema synchronization. Valid values:

*   **true**: yes
*   **false**: no

>  Default value: **true**.

This parameter is required.', example='true', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.

This parameter is required.', example='dtsz4ao1dor13d****', position='Query'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.

>  We recommend that you specify an informative name for easy identification. You do not need to use a unique task name.', example='MySQL同步', position='Query'),
  synchronizationObjects: string(name='SynchronizationObjects', description='The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see [SynchronizationObjects](https://help.aliyun.com/document_detail/141901.html).

This parameter is required.', example='[{"DBName":"dtstestdata","TableIncludes":[{"TableName":"customer"}]}]', position='Body'),
}

model ConfigureSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2690E467-7773-43BC-A009-370EE2E7****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSynchronizationJobResponseBody(name='body'),
}

/**
  * @description Before you call this operation, you must call the [CreateSynchronizationJob](https://help.aliyun.com/document_detail/49446.html) operation to create a data synchronization instance.
  * > 
  * *   After you call this operation to configure a data synchronization task, the task will be automatically started and prechecked. You do not need to call the [StartSynchronizationJob](https://help.aliyun.com/document_detail/49448.html) operation to start the task.
  * *   A data synchronization task may fail to be started due to precheck failures. You can call the [DescribeSynchronizationJobStatus](https://help.aliyun.com/document_detail/49453.html) operation to query the status of the task. Then, you can change parameter settings based on the error messages about the precheck failures. After you fix the issue, you must call the [StartSynchronizationJob](https://help.aliyun.com/document_detail/49448.html) operation to restart the data synchronization task.
  * @param request  the request parameters of ConfigureSynchronizationJob  ConfigureSynchronizationJobRequest
  * @return ConfigureSynchronizationJobResponse
 */
async function configureSynchronizationJob(request: ConfigureSynchronizationJobRequest): ConfigureSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).

> 

*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Specifies whether to monitor task latency. Valid values:

*   **enable**: yes
*   **disable**: no

> 

*   The default value is **enable**.
*   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.', example='enable', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.

>  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.', example='10', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).

> 

*   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
*   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Specifies whether to monitor task status. Valid values:

*   **enable**: yes
*   **disable**: no

> 

*   The default value is **enable**.
*   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
*   If the task that you monitor enters an abnormal state, an alert is triggered.', example='enable', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.

This parameter is required.', example='dtskxz1170c10p****', position='Query'),
}

model ConfigureSynchronizationJobAlertResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EEE7858-7D41-4EDF-9435-AEED2A34****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSynchronizationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSynchronizationJobAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigureSynchronizationJobAlert  ConfigureSynchronizationJobAlertRequest
  * @return ConfigureSynchronizationJobAlertResponse
 */
async function configureSynchronizationJobAlert(request: ConfigureSynchronizationJobAlertRequest): ConfigureSynchronizationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.

This parameter is required.', example='dtsexjk1alb116****', position='Query'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable', description='Specifies whether to enable image matching. Valid values:

*   **true**: enables image matching
*   **false**: disables image matching', example='true', position='Query'),
}

model ConfigureSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='86A8FF0F-FA92-449D-B559-05CFF9F9****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ConfigureSynchronizationJobReplicatorCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigureSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigureSynchronizationJobReplicatorCompare  ConfigureSynchronizationJobReplicatorCompareRequest
  * @return ConfigureSynchronizationJobReplicatorCompareResponse
 */
async function configureSynchronizationJobReplicatorCompare(request: ConfigureSynchronizationJobReplicatorCompareRequest): ConfigureSynchronizationJobReplicatorCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJobReplicatorCompare', 'POST', '/', 'json', false, 'json', request);
}

model ConvertInstanceResourceGroupRequest {
  dtsJobId?: string(name='DtsJobId', description='This historical parameter does not take effect and is not required.', example='m4312mab158****', position='Query'),
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of new resource group. You can obtain the ID on the Resource Group page in the Resource Management console. For more information, see [View basic information about a resource group](https://help.aliyun.com/document_detail/151181.html).', example='rg-aek2r4fkrqw****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is only for special services and not required.', example='rg-3m1213ye7l****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the DTS instance. You can view the ID in the **ID/Name** column on the task page in the console.

>  This parameter is required.', example='dtszhc12zp727o****', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='This parameter is only for special services and not required.', example='true', position='Query'),
}

model ConvertInstanceResourceGroupResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='500'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If **The Value of Input Parameter %s is not valid** is returned and DtsJobId is returned for DynamicMessage, it indicates that the request parameter DtsJobId is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned when the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned when the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of a request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ConvertInstanceResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertInstanceResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConvertInstanceResourceGroup  ConvertInstanceResourceGroupRequest
  * @return ConvertInstanceResourceGroupResponse
 */
async function convertInstanceResourceGroup(request: ConvertInstanceResourceGroupRequest): ConvertInstanceResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertInstanceResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CountJobByConditionRequest {
  destDbType?: string(name='DestDbType', description='The type of the destination database.', example='MongoDB', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the DTS task.', example='pk13r731m****', position='Query'),
  jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **MIGRATION**: data migration task
*   **SYNC**: data synchronization task
*   **SUBSCRIBE**: change tracking task', example='SYNC', position='Query'),
  params?: string(name='Params', description='The content of the query condition, which corresponds to the value of the JobType parameter.', example='dtspk3f13r731m****', position='Query'),
  region: string(name='Region', description='One of the query conditions. The ID of the region. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID, global parameter that does not need to be passed in by the current API.', example='Resource group ID, global parameter that does not need to be passed in by the current API.', position='Query'),
  srcDbType?: string(name='SrcDbType', description='The type of the source database.', example='MongoDB', position='Query'),
  status?: string(name='Status', description='The status of the DTS task.

Valid values for a data migration task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed to migrate data.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a data synchronization task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is in progress.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a change tracking task:

*   **NotConfigured**: The task is not configured.
*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Retrying**: The task is being retried.
*   **Abnormal**: The task is not running as expected.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.', example='Finished', position='Query'),
  type?: string(name='Type', description='The content of the query condition. Valid values:

*   **name**: the name of the task
*   **rds**: the ID of the destination instance
*   **instance**: the ID of the Data Transmission Service (DTS) instance
*   **srcRds**: the ID of the source instance

> The value of this parameter corresponds to the value of the **JobType** parameter.', example='name/instance', position='Query'),
}

model CountJobByConditionResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The internal error code. This parameter will be removed soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the  **%s** variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC3BAAF2-74E3-4471-8EB5-96202D6A****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data synchronization instances that meet the requirements and belong to your Alibaba Cloud account.', example='100'),
}

model CountJobByConditionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CountJobByConditionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CountJobByCondition  CountJobByConditionRequest
  * @return CountJobByConditionResponse
 */
async function countJobByCondition(request: CountJobByConditionRequest): CountJobByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountJobByCondition', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerChannelRequest {
  consumerGroupName: string(name='ConsumerGroupName', description='The name of the consumer group. The name can be up to 128 characters in length. We recommend that you use an informative name for easy identification.

This parameter is required.', example='订阅组A', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', description='The password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.

This parameter is required.', example='Test123456', position='Query'),
  consumerGroupUserName: string(name='ConsumerGroupUserName', description='The username of the consumer group.

*   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
*   A username cannot exceed 16 characters in length.

This parameter is required.', example='dtstest', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.', example='dtsboss6pn1w******', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.', example='boss6pn1w******', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aek2zx4uizich7y', position='Query'),
}

model CreateConsumerChannelResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID', description='The ID of the consumer group. You can specify this parameter on a downstream client when you consume tracked data.', example='dtsor2y66j4219****'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5F566C5B-E5B0-4020-A531-FC6F5005****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConsumerChannel  CreateConsumerChannelRequest
  * @return CreateConsumerChannelResponse
 */
async function createConsumerChannel(request: CreateConsumerChannelRequest): CreateConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumerGroupName: string(name='ConsumerGroupName', description='The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.

This parameter is required.', example='测试订阅组', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', description='The password that corresponds to the username of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.

This parameter is required.', example='Test123456', position='Query'),
  consumerGroupUserName: string(name='ConsumerGroupUserName', description='The username of the consumer group.

*   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
*   A username cannot exceed 16 characters in length.

This parameter is required.', example='dtstest', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtsg2m10r1x15a****', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID', description='The ID of the consumer group.', example='dtswc411cg617p****'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6063641E-BAD1-4BA7-B70B-26FFFD18****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConsumerGroup  CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedClusterMonitorRuleRequest {
  cpuAlarmThreshold?: long(name='CpuAlarmThreshold', description='The alert threshold for CPU utilization. Unit: percentage.', example='30', position='Query'),
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the cluster.

This parameter is required.', example='dts-dasd22******', position='Query'),
  diskAlarmThreshold?: long(name='DiskAlarmThreshold', description='The alert threshold for disk usage. Unit: percentage.', example='100', position='Query'),
  duAlarmThreshold?: long(name='DuAlarmThreshold', description='The alert threshold for DTS Unit (DU) usage. Unit: percentage.', example='20', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='rm-bp1162kryivb8****', position='Query'),
  memAlarmThreshold?: long(name='MemAlarmThreshold', description='The alert threshold for memory usage. Unit: percentage.', example='40', position='Query'),
  noticeSwitch?: long(name='NoticeSwitch', description='Specifies whether to enable the alert feature. Valid values:

*   **1**: enables the alert feature.
*   **0**: disables the alert feature.', example='1', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  phones: string(name='Phones', description='The mobile phone number to which alerts are sent. Separate multiple mobile phone numbers with commas (,).

This parameter is required.', example='186****7654', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID. This parameter is a global parameter and not required.', example='The resource group ID. This parameter is a global parameter and not required.', position='Query'),
}

model CreateDedicatedClusterMonitorRuleResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDedicatedClusterMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDedicatedClusterMonitorRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDedicatedClusterMonitorRule  CreateDedicatedClusterMonitorRuleRequest
  * @return CreateDedicatedClusterMonitorRuleResponse
 */
async function createDedicatedClusterMonitorRule(request: CreateDedicatedClusterMonitorRuleRequest): CreateDedicatedClusterMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedClusterMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateDtsInstanceRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically renew the DTS instance when it expires. Valid values:

*   **false**: does not automatically renew the DTS instance when it expires. This is the default value.
*   **true**: automatically renews the DTS instance when it expires.', example='false', position='Query'),
  autoStart?: boolean(name='AutoStart', description='Specifies whether to automatically start the task after the DTS instance is purchased. Valid values:

*   **false** (default)
*   **true**

>  This parameter can be set to **true** and take effect only if you specify a valid value for **JobId**.', example='false', position='Query'),
  computeUnit?: int32(name='ComputeUnit', description='The specification of the extract, transform, and load (ETL) instance. The unit is compute unit (CU). One CU is equal to 1 vCPU and 4 GB of memory. The value of this parameter must be an integer greater than or equal to 2.', example='5', minimum=1, maximum=999999, position='Query'),
  databaseCount?: int32(name='DatabaseCount', description='The number of custom ApsaraDB RDS instances in the PolarDB-X instance. Default value: **1**.

>  This parameter is required only if **SourceEndpointEngineName** is set to **drds**.', example='3', minimum=1, maximum=10000, position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', description='The database engine of the destination instance.

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster
*   **polardb_o**: PolarDB for Oracle cluster
*   **polardb_pg**: PolarDB for PostgreSQL cluster
*   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
*   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
*   **PostgreSQL**: self-managed PostgreSQL database
*   **odps**: MaxCompute project
*   **oracle**: self-managed Oracle database
*   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
*   **tidb**: TiDB database
*   **ADS**: AnalyticDB for MySQL V2.0 cluster
*   **ADB30**: AnalyticDB for MySQL V3.0 cluster
*   **Greenplum**: AnalyticDB for PostgreSQL instance
*   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
*   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
*   **DataHub**: DataHub project
*   **DB2**: self-managed Db2 for LUW database
*   **as400**: AS/400
*   **Tablestore**: Tablestore instance

> 
*   The default value is **MySQL**.
*   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html) and [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).
*   You must specify one of this parameter and the **JobId** parameter.', example='MySQL', position='Query'),
  destinationRegion?: string(name='DestinationRegion', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  You must specify one of this parameter and the **JobId** parameter.', example='cn-hangzhou', position='Query'),
  dtsRegion?: string(name='DtsRegion', description='The region ID of the DTS instance. Set this parameter to the value of **RegionId**.', example='cn-hangzhou', position='Query'),
  du?: int32(name='Du', description='The number of DTS units (DUs) that are assigned to a DTS task that is run on a DTS dedicated cluster. Valid values: **1** to **100**.

> 
*   The value of this parameter must be within the range of the number of DUs available for the DTS dedicated cluster.', example='30', position='Query'),
  feeType?: string(name='FeeType', description='The billing type for a change tracking instance. Valid values: ONLY_CONFIGURATION_FEE and CONFIGURATION_FEE_AND_DATA_FEE. ONLY_CONFIGURATION_FEE: charges only configuration fees. CONFIGURATION_FEE_AND_DATA_FEE: charges configuration fees and data traffic fees.', example='ONLY_CONFIGURATION_FEE', position='Query'),
  instanceClass?: string(name='InstanceClass', description='The instance class.

*   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
*   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.

>  For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).', example='xxlarge', position='Query'),
  jobId?: string(name='JobId', description='The ID of the task. You can call the **ConfigureDtsJob** operation to obtain the task ID from the **DtsJobId** parameter.

>  If this parameter is specified, you do not need to specify the **SourceRegion**, **DestinationRegion**, **Type**, **SourceEndpointEngineName**, or **DestinationEndpointEngineName** parameter. Even if these parameters are specified, the value of the **JobId** parameter takes precedence.', example='bi6e22ay243****', position='Query'),
  maxDu?: double(name='MaxDu', description='Upper limit of DU.

> Only supported by Serverless instances.', example='16', position='Query'),
  minDu?: double(name='MinDu', description='Lower limit of DU.

> Only supported by Serverless instances.', example='1', position='Query'),
  payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go

>  This parameter must be specified.', example='PrePaid', position='Query'),
  period?: string(name='Period', description='The unit of the subscription duration. Valid values: **Year** and **Month**.

>  You must specify this parameter only if the **PayType** parameter is set to **PrePaid**.', example='Month', position='Query'),
  quantity?: int32(name='Quantity', description='The number of DTS instances that you want to purchase.

>  You can purchase only one DTS instance each time you call this operation.', example='1', minimum=1, maximum=9999999, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzawhxxc****', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', description='The database engine of the source instance.

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster
*   **polardb_o**: PolarDB for Oracle cluster
*   **polardb_pg**: PolarDB for PostgreSQL cluster
*   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
*   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
*   **PostgreSQL**: self-managed PostgreSQL database
*   **odps**: MaxCompute project
*   **oracle**: self-managed Oracle database
*   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
*   **tidb**: TiDB database
*   **ADS**: AnalyticDB for MySQL V2.0 cluster
*   **ADB30**: AnalyticDB for MySQL V3.0 cluster
*   **Greenplum**: AnalyticDB for PostgreSQL instance
*   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
*   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
*   **DataHub**: DataHub project
*   **DB2**: self-managed Db2 for LUW database
*   **as400**: AS/400
*   **Tablestore**: Tablestore instance

> 
*   The default value is **MySQL**.
*   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html) and [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).
*   You must specify one of this parameter and the **JobId** parameter.', example='MYSQL', position='Query'),
  sourceRegion?: string(name='SourceRegion', description='The ID of the region in which the source instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  You must specify one of this parameter and the **JobId** parameter.', example='cn-hangzhou', position='Query'),
  syncArchitecture?: string(name='SyncArchitecture', description='The synchronization topology. Valid values:

*   **oneway**: one-way synchronization. This is the default value.
*   **bidirectional**: two-way synchronization.', example='oneway', position='Query'),
  type?: string(name='Type', description='The type of the DTS instance. Valid values:

*   **MIGRATION**: data migration instance

*   **SYNC**: data synchronization instance

*   **SUBSCRIBE**: change tracking instance

> You must specify one of this parameter and the **JobId** parameter.', example='SYNC', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription duration.

*   Valid values if **Period** is set to **Month**: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   Valid values if **Period** is set to **Year**: 1, 2, 3, and 5.

> 

*   This parameter is valid and required only if **PayType** is set to **PrePaid**.

*   You can configure **Period** to specify the unit of the subscription duration.', example='5', minimum=1, maximum=10000, position='Query'),
}

model CreateDtsInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  instanceId?: string(name='InstanceId', description='The ID of the DTS instance.', example='dtsbi6e22ay243****'),
  jobId?: string(name='JobId', description='The ID of the task.', example='bi6e22ay243****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C166D79D-436B-45F0-B5A5-25E1****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDtsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDtsInstanceResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/apsaradb-for-mongodb/pricing) of DTS.
  * *   If you want to run a DTS task on a DTS dedicated cluster, you must configure the task before you purchase a DTS instance. You can call the [ConfigureDtsJob](https://help.aliyun.com/document_detail/208399.html) operation to configure a DTS task.
  * @param request  the request parameters of CreateDtsInstance  CreateDtsInstanceRequest
  * @return CreateDtsInstanceResponse
 */
async function createDtsInstance(request: CreateDtsInstanceRequest): CreateDtsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDtsInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateJobMonitorRuleRequest {
  delayRuleTime?: long(name='DelayRuleTime', description='The threshold for triggering an alert.

*   If **Type** is set to **delay**, the threshold must be an integer in units of seconds. You can specify the threshold based on your business requirements. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
*   If **Type** is set to **full_timeout**, the threshold must be an integer in units of hours.

> This parameter is required if **Type** is set to **delay** or **full_timeout** and **State** is set to **Y**.', example='11', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='i03e3zty16i****', position='Query'),
  noticeValue?: int32(name='NoticeValue', description='The alert threshold.', example='2', position='Query'),
  period?: int32(name='Period', description='The statistical period of the incremental data verification task. Unit: minutes.

> Valid values: 1, 3, 5, and 30.', example='5', position='Query'),
  phone?: string(name='Phone', description='The mobile numbers that receive alert notifications. Separate multiple mobile numbers with commas (,).

> 

*   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.

*   Users of the international site (alibabacloud.com) cannot receive notifications on alerts by using mobile numbers, but can configure alert rules for DTS tasks in the CloudMonitor console. For more information, see [Configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).', example='1361234****,1371234****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  state?: string(name='State', description='Specifies whether to enable the alert rule. Valid values:

*   **Y**: enables the alert rule.
*   **N**: disables the alert rule.

Default value: **Y**.', example='Y', position='Query'),
  times?: int32(name='Times', description='The number of statistical periods of the incremental data verification task.', example='2', position='Query'),
  type?: string(name='Type', description='The metric that is used to monitor the task. Valid values:

*   **delay**: the **Latency** metric.
*   **error**: the **Status** metric.
*   **full_timeout**: the **Full Timeout** metric.

Default value: **error**. You must manually set this value.', example='delay', position='Query'),
}

model CreateJobMonitorRuleResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. The value of this parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.

> If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='403'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C498360-7892-433C-847A-BA71A850****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model CreateJobMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobMonitorRuleResponseBody(name='body'),
}

/**
  * @description DTS provides the following metrics for DTS tasks:************
  * *   **Latency**: DTS monitors the latency of a DTS task. If the latency of the task exceeds the specified threshold, an alert is triggered. The threshold is specified in units of seconds.
  * *   **Status**: DTS monitors the status of a DTS task. If the state of the task changes to **Error** or **Restore**, an alert is triggered.
  * *   **Full Timeout**: DTS monitors the duration of a DTS task. If the duration of the task exceeds the specified threshold, an alert is triggered. The threshold is specified in units of hours.
  * @param request  the request parameters of CreateJobMonitorRule  CreateJobMonitorRuleRequest
  * @return CreateJobMonitorRuleResponse
 */
async function createJobMonitorRule(request: CreateJobMonitorRuleRequest): CreateJobMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJobMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobClass: string(name='MigrationJobClass', description='The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**.

> 
*   For more information about the test performance of each specification, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).
*   For more information about the pricing of data migration instances, see [Pricing](https://help.aliyun.com/document_detail/117780.html).

This parameter is required.', example='2xlarge', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  region: string(name='Region', description='The ID of the region where the data migration instance resides. The region ID of the data migration instance is the same as that of the destination database. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. You do not need to specify this parameter because this parameter will be removed in the future.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model CreateMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  migrationJobId?: string(name='MigrationJobId', description='The ID of the data migration instance.', example='dtsi8911td9233****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C166D79D-436B-45F0-B5A5-25E1959F****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMigrationJob  CreateMigrationJobRequest
  * @return CreateMigrationJobResponse
 */
async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateReverseDtsJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  dtsJobId: string(name='DtsJobId', description='The ID of the synchronization or migration task, which can be queried by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).

This parameter is required.', example='n99m9jx822k****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  shardPassword?: string(name='ShardPassword', description='Shard Password', example='DTStest****', position='Query'),
  shardUsername?: string(name='ShardUsername', description='Shard User name', example='dtstest', position='Query'),
}

model CreateReverseDtsJobResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the instance corresponding to the generated reverse task.', example='dtsor1f9kr822l****'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the generated reverse synchronization task.', example='n99m9jx822k****'),
  errCode?: string(name='ErrCode', description='Error code returned when the call fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='Error message returned when the call fails.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='Status code.', example='200'),
  requestId?: string(name='RequestId', description='Request ID.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Whether the request was successful.', example='true'),
}

model CreateReverseDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReverseDtsJobResponseBody(name='body'),
}

/**
  * @description 调用接口创建的反向任务会立即进行预检查，预检查通过后会进行增量数据采集，增量数据写入模块不会运行（需要调用**StartReverseWriter**接口运行）。
  * > 创建的反向任务固定为同步任务，且只有增量写入模块。
  * @param request  the request parameters of CreateReverseDtsJob  CreateReverseDtsJobRequest
  * @return CreateReverseDtsJobResponse
 */
async function createReverseDtsJob(request: CreateReverseDtsJobRequest): CreateReverseDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReverseDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubscriptionInstanceRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType', description='The type of the source instance. Valid values: **MySQL**, **PolarDB**, **DRDS**, and **Oracle**.

>  Default value: **MySQL**.', example='MySQL'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The billing method of the change tracking instance.

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The billing cycle of the subscription instance. Valid values:

*   **Year**
*   **Month**

>  You must specify this parameter only if you set the PayType parameter to **Prepaid**.', example='Month', position='Query'),
  region: string(name='Region', description='The region ID of the change tracking instance. The region ID is the same as that of the source instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the change tracking instance. You do not need to specify this parameter because this parameter will be removed in the future.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription length.

*   If the billing cycle is **Year**, the value range is **1 to 5**.
*   If the billing cycle is **Month**, the value range is **1 to 60**.

>  You must specify this parameter only if you set the PayType parameter to **Prepaid**.', example='12', position='Query'),
}

model CreateSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9564C5-F99D-4176-A6BA-2D7F2DC8****'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance.', example='dtsfen11q2g23x****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubscriptionInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSubscriptionInstance  CreateSubscriptionInstanceRequest
  * @return CreateSubscriptionInstanceResponse
 */
async function createSubscriptionInstance(request: CreateSubscriptionInstanceRequest): CreateSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSynchronizationJobRequest {
  destinationEndpoint?: {
    instanceType?: string(name='InstanceType', description='The instance type of the destination database. Valid values:

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **Redis**: Redis database
*   **MaxCompute**: MaxCompute project

> 
*   Default value: **MySQL**.
*   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](https://help.aliyun.com/document_detail/130744.html).', example='MySQL'),
  }(name='DestinationEndpoint', position='Query'),
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType', description='The instance type of the source database. Valid values:

*   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
*   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
*   **Redis**: Redis database
*   **DRDS**: PolarDB-X instance V1.0

> 
*   Default value: **MySQL**.
*   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](https://help.aliyun.com/document_detail/130744.html).', example='MySQL'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  DBInstanceCount?: int32(name='DBInstanceCount', description='If you set the **SourceEndpoint.InstanceType** parameter to **DRDS**, you must specify the DBInstanceCount parameter. This parameter specifies the number of private RDS instances attached to the source PolarDB-X instance. Default value: **1**.', example='3', minimum=0, maximum=10000, position='Query'),
  destRegion: string(name='DestRegion', description='The ID of the region where the destination database resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  If the **SourceRegion** parameter is set to the China (Hong Kong) region or a region outside the Chinese mainland, you must set the DestRegion parameter to the same region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the data synchronization instance.

*   **PrePaid**: subscription
*   **PostPaid** (default value): pay-as-you-go

This parameter is required.', example='PostPaid', position='Query'),
  period?: string(name='Period', description='The billing cycle of the subscription instance. Valid values:

*   **Year**
*   **Month**

>  You must specify this parameter only if you set the PayType parameter to **PrePaid**.', example='Year', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  sourceRegion: string(name='SourceRegion', description='The ID of the region where the source database resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  synchronizationJobClass: string(name='SynchronizationJobClass', description='The specification of the data synchronization instance. Valid values: **micro**, **small**, **medium**, and **large**.

>  For more information about the test performance of each specification, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).

This parameter is required.', example='small', position='Query'),
  topology?: string(name='Topology', description='The synchronization topology. Valid values:

*   **oneway**: one-way synchronization
*   **bidirectional**: two-way synchronization

> 
*   The default value is **oneway**.
*   This parameter can be set to **bidirectional** only when the **SourceEndpoint.InstanceType** and **DestinationEndpoint.InstanceType** parameters are set to **MySQL**, **PolarDB**, or **Redis**.', example='oneway', position='Query'),
  usedTime?: int32(name='UsedTime', description='The subscription length.

*   If the billing cycle is **Year**, the value range is **1 to 5**.
*   If the billing cycle is **Month**, the value range is **1 to 60**.

>  You must specify this parameter only if you set the PayType parameter to **PrePaid**.', example='1', position='Query'),
  networkType?: string(name='networkType', description='The network type. Valid value: **Intranet**, which indicates virtual private cloud (VPC).', example='Intranet', position='Query'),
}

model CreateSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9056C8B0-5799-493A-9655-70F607B8****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtshvj11k25255****'),
}

model CreateSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSynchronizationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSynchronizationJob  CreateSynchronizationJobRequest
  * @return CreateSynchronizationJobResponse
 */
async function createSynchronizationJob(request: CreateSynchronizationJobRequest): CreateSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerChannelRequest {
  consumerGroupId: string(name='ConsumerGroupId', description='The ID of the consumer group. You can call the [DescribeConsumerChannel](https://help.aliyun.com/document_detail/264169.html) operation to query the consumer group ID.

This parameter is required.', example='dtsktbb6jdn2******', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='dtsboss6pn1w73****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='boss6pn1w73****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzawhxxc****', position='Query'),
}

model DeleteConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9E00ABE-2AD9-40A9-8C3C-D817E648****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConsumerChannel  DeleteConsumerChannelRequest
  * @return DeleteConsumerChannelResponse
 */
async function deleteConsumerChannel(request: DeleteConsumerChannelRequest): DeleteConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumerGroupID: string(name='ConsumerGroupID', description='The ID of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the consumer group ID.

This parameter is required.', example='dtssb911ydd192****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.

This parameter is required.', example='dtsg2m10r1x15a****', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D0ADAD5-DD97-41B6-B78F-D1961AB1****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConsumerGroup  DeleteConsumerGroupRequest
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  jobType?: string(name='JobType', description='The type of the Data Transmission Service (DTS) task. Valid values:

*   **MIGRATION**: data migration task
*   **SYNC**: data synchronization task
*   **SUBSCRIBE**: change tracking task', example='MIGRATION', position='Query'),
  regionId?: string(name='RegionId', description='The error code returned if the call failed.', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aek26lwshijfk3q', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The dynamic error code. This parameter will be removed in the future.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model DeleteDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The operation that you want to perform. Set the value to **DeleteDtsJob**.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The operation that you want to perform. Set the value to **DeleteDtsJob**.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error message returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The ID of the request.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the data migration, data synchronization, or change tracking instance.', example='200'),
  requestId?: string(name='RequestId', description='The synchronization direction. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

> 

*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='The ID of the region in which the data migration or synchronization task resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='true'),
}

model DeleteDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDtsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDtsJob  DeleteDtsJobRequest
  * @return DeleteDtsJobResponse
 */
async function deleteDtsJob(request: DeleteDtsJobRequest): DeleteDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration, data synchronization, or change tracking task.

> *   Separate multiple task IDs with commas (,).
> *   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query task IDs.

This parameter is required.', example='l5o11f9029c****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Is it ZeroETL task', example='true', position='Query'),
}

model DeleteDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDtsJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDtsJobs  DeleteDtsJobsRequest
  * @return DeleteDtsJobsResponse
 */
async function deleteDtsJobs(request: DeleteDtsJobsRequest): DeleteDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.

This parameter is required.', example='dtsyiwe9b0gp2p****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DeleteMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F28A96B1-F897-4246-833B-310A3345****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMigrationJob  DeleteMigrationJobRequest
  * @return DeleteMigrationJobResponse
 */
async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSubscriptionInstanceRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtsmxg11pfp231****', position='Query'),
}

model DeleteSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubscriptionInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSubscriptionInstance  DeleteSubscriptionInstanceRequest
  * @return DeleteSubscriptionInstanceResponse
 */
async function deleteSubscriptionInstance(request: DeleteSubscriptionInstanceRequest): DeleteSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID。', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.

This parameter is required.', example='dtshn6107ve264****', position='Query'),
}

model DeleteSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSynchronizationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSynchronizationJob  DeleteSynchronizationJobRequest
  * @return DeleteSynchronizationJobResponse
 */
async function deleteSynchronizationJob(request: DeleteSynchronizationJobRequest): DeleteSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelAccountRequest {
  dtsJobId: string(name='DtsJobId', description='This parameter is required.', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tags?: string(name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeChannelAccountResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  password?: string(name='Password'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  username?: string(name='Username'),
}

model DescribeChannelAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeChannelAccount  DescribeChannelAccountRequest
  * @return DescribeChannelAccountResponse
 */
async function describeChannelAccount(request: DescribeChannelAccountRequest): DescribeChannelAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelAccount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCheckJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkJobId?: string(name='CheckJobId', description='Check the task job ID.', example='z9p104ib23***', position='Query'),
  checkType?: int32(name='CheckType', description='The type of the check
>>1 full quantity, 2 incremental, 3 all', example='1', position='Query'),
  instanceId?: string(name='InstanceId', description='Data migration instance ID, which can be queried by calling the **describemigrationjobs** API.', example='dtsz9p104ib23e972e', position='Query'),
  jobName?: string(name='JobName', description='The name of the data migration or synchronization job.', example='zwy_test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='30', minimum=1, maximum=1000, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeCheckJobsResponseBody = {
  checkJobs?: [ 
    {
      chargeType?: string(name='ChargeType', description='Billing type, return values: - **POSTPAY**: Pay-as-you-go (postpaid). - **PREPAY**: Subscription (prepaid).', example='POSTPAY'),
      checkPoint?: long(name='CheckPoint', description='checkpoint', example='1111****'),
      checkType?: int32(name='CheckType', description='Data validation method, with values:
- **1**: Full validation. - **2**: Incremental validation.', example='1'),
      diffCount?: long(name='DiffCount', description='Number of rows with data inconsistency', example='0'),
      diffSum?: long(name='DiffSum', description='Synchronization initialization progress, in percentage.', example='1'),
      dtsInstanceID?: string(name='DtsInstanceID', description='Migration, synchronization, or subscription instance ID.', example='dtsz8tc99sy2158b36'),
      dtsJobId?: string(name='DtsJobId', description='Migration, synchronization, or subscription task ID.', example='n08o6si4q338b1x'),
      finishCount?: long(name='FinishCount', description='The number of data rows in the table that have completed validation.', example='15094'),
      groupId?: string(name='GroupId', description='DTS task ID. In most cases, there is no need to set this parameter.', example='c3d12dii27t632g'),
      instanceClass?: string(name='InstanceClass', description='Instance specification.', example='SMALL'),
      jobName?: string(name='JobName', description='Check the name of the task.', example='dtstest'),
      jobStepId?: string(name='JobStepId', description='Task ID.', example='as0e1ks426bq3z0'),
      parentJobType?: string(name='ParentJobType', description='This parameter will be deprecated.', example='****'),
      regionId?: string(name='RegionId', description='Region ID to which it belongs.', example='cn-hangzhou'),
      status?: int32(name='Status', description='Check result, return values: -**0**: Check passed -**1**: Check failed', example='0'),
      totalCount?: long(name='TotalCount', description='Verify the total number of rows in the data.', example='159'),
    }
  ](name='CheckJobs', description='Item information check.'),
  dynamicCode?: string(name='DynamicCode', description='Dynamic error code, this parameter will be deprecated soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='Dynamic error message, used to replace the **%s** in the **errmessage** return parameter. If **errmessage** returns **thevalueofinputparameter%sisnotvalid**, and **dynamicmessage** returns *[1,2,3]*, it indicates that the request parameter **dtsjobid** is invalid.', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', description='Error code returned when the call fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='Error message returned when the call fails.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageRecordCount?: long(name='PageRecordCount', description='The maximum number of records that can be displayed on the current page.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='FC1D920B-AB89-52A9-AA5F-AA724C4205E8'),
  success?: boolean(name='Success', description='Whether the request was successful.', example='True'),
  totalRecordCount?: long(name='TotalRecordCount', description='Total number of records.', example='100'),
}

model DescribeCheckJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCheckJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCheckJobs  DescribeCheckJobsRequest
  * @return DescribeCheckJobsResponse
 */
async function describeCheckJobs(request: DescribeCheckJobsRequest): DescribeCheckJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCheckJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterOperateLogsRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='12323344****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Body'),
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which a DTS task runs.

This parameter is required.', example='dtsxxxxx', position='Body'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='k2gm967v16f****', position='Body'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds.', example='1650866995000', position='Body'),
  ownerID?: string(name='OwnerID', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Specify the parameter to a positive integer that does not exceed the maximum value of the INTEGER data type. Default value: **1**.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds. If you do not specify this parameter, the data within the last seven days is returned by default.', example='1650866955000', position='Body'),
}

model DescribeClusterOperateLogsResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='500'),
  dataPoints?: [ 
    {
      content?: string(name='Content', description='Other description of the operation.', example='null'),
      id?: string(name='Id', description='The primary key of the log table.', example='237827'),
      logDatetime?: long(name='LogDatetime', description='The time when the operation is recorded. The value is in the UNIX timestamp format. Unit: milliseconds.', example='1642077211574'),
      newValue?: string(name='NewValue', description='The value of the parameter after the operation if the operation is an UPDATE operation.', example='105'),
      oldValue?: string(name='OldValue', description='The value of the parameter before the operation if the operation is an UPDATE operation.', example='100'),
      operationName?: string(name='OperationName', description='The type of the operation.', example='modify-oversold-ratio'),
      operationUser?: string(name='OperationUser', description='The user who performed the operation.', example='null'),
      success?: int32(name='Success', description='Indicates whether the request was successful. A value of **1** indicates that the request was successful.', example='1'),
    }
  ](name='DataPoints', description='The information about the operation logs.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned for an exception.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of records.', example='100'),
}

model DescribeClusterOperateLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterOperateLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeClusterOperateLogs  DescribeClusterOperateLogsRequest
  * @return DescribeClusterOperateLogsResponse
 */
async function describeClusterOperateLogs(request: DescribeClusterOperateLogsRequest): DescribeClusterOperateLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterOperateLogs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeClusterUsedUtilizationRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is discontinued.', example='12323344****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Body'),
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the cluster. If the **MetricType** parameter is set to **CLUSTER**, enter the ID of the exclusive cluster. Otherwise, set this parameter to a node ID.

This parameter is required.', example='nodeid', position='Body'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='k2gm967v16f****', position='Body'),
  env?: string(name='Env', description='The cluster environment. Default value: **ALIYUN**.', example='ALIYUN', position='Body'),
  metricType?: string(name='MetricType', description='Specifies whether to query the metrics of the cluster or a node. Default value: CLUSTER. Valid values:

*   **CLUSTER**: query the metrics of the cluster.
*   **NODE**: query the metrics of a node.', example='NODE', position='Body'),
  ownerID?: string(name='OwnerID', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  securityToken?: string(name='SecurityToken', position='Body'),
}

model DescribeClusterUsedUtilizationResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='200'),
  cpuTotal?: float(name='CpuTotal', description='The CPU utilization of the cluster. Unit: percentage.', example='50'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtscluster_h3fl1cs217sx952'),
  diskTotal?: float(name='DiskTotal', description='The total disk size of the cluster. Unit: GB.', example='1024'),
  diskUsed?: float(name='DiskUsed', description='The disk usage of the cluster. Unit: GB.', example='96'),
  duTotal?: int32(name='DuTotal', description='The total number of DTS units (DUs).', example='30'),
  duUsed?: int32(name='DuUsed', description='The usage of DUs.', example='2'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  memoryTotal?: float(name='MemoryTotal', description='The total amount of memory. A value of 0 is temporarily returned.', example='0'),
  memoryUsed?: float(name='MemoryUsed', description='The memory usage. A value of 0 is temporarily returned.', example='0'),
  memoryUsedPercentage?: float(name='MemoryUsedPercentage', description='The memory usage.', example='1.0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  taskRunning?: int32(name='TaskRunning', description='The number of tasks that are in progress.', example='3'),
}

model DescribeClusterUsedUtilizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterUsedUtilizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeClusterUsedUtilization  DescribeClusterUsedUtilizationRequest
  * @return DescribeClusterUsedUtilizationResponse
 */
async function describeClusterUsedUtilization(request: DescribeClusterUsedUtilizationRequest): DescribeClusterUsedUtilizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterUsedUtilization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConnectionStatusRequest {
  destinationEndpointArchitecture?: string(name='DestinationEndpointArchitecture', description='You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:

*   **SID**: non-RAC architecture
*   **RAC**: Real Application Cluster (RAC) architecture

>  This parameter is optional. The data type of this parameter is String.', example='SID', position='Query'),
  destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName', description='The name of the destination database or the authentication database.

> 
*   You must specify this parameter if the **DestinationEndpointEngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**. You must also specify this parameter if the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**.
*   If the **DestinationEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
*   If the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the destination database.', example='dtstestdata', position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', description='The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, and **Redis**.

>  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **RDS**, **DRDS**, **ECS**, **LocalInstance**, or **Express**.', example='MySQL', position='Query'),
  destinationEndpointIP?: string(name='DestinationEndpointIP', description='The endpoint of the destination database.

>  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.', example='172.16.88.***', position='Query'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID', description='The ID of the destination instance.', example='testsid', position='Query'),
  destinationEndpointInstanceType: string(name='DestinationEndpointInstanceType', description='The instance type of the destination database. Valid values:

> 
*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **LocalInstance**: self-managed database with a public IP address
*   **RDS**: ApsaraDB RDS instance
*   **DRDS**: PolarDB-X instance
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **Redis**: ApsaraDB for Redis instance
*   **PetaData**: HybridDB for MySQL instance
*   **POLARDB**: PolarDB for MySQL cluster
*   **PolarDB_o**: PolarDB for Oracle cluster
*   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
*   **Greenplum**: AnalyticDB for PostgreSQL instance

This parameter is required.', example='PolarDB_o', position='Query'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID', description='You must specify this parameter only if the **DestinationEndpointEngineName** parameter is set to **Oracle**. Valid values:

*   **SID**: non-RAC architecture
*   **RAC**: RAC architecture

>  This parameter is optional. The data type of this parameter is String.', example='SID', position='Query'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword', description='The password of the destination database account.', example='Test123456', position='Query'),
  destinationEndpointPort?: string(name='DestinationEndpointPort', description='The service port number of the source database.

>  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='3306', position='Query'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', description='The ID of the region where the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName', description='The database account of the destination database.

>  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html) and [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html).', example='dtstest', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  sourceEndpointArchitecture?: string(name='SourceEndpointArchitecture', description='You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:

*   **SID**: non-RAC architecture
*   **RAC**: RAC architecture

>  This parameter is optional.', example='SID', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', description='The name of the source database or the authentication database.

> 
*   You must specify this parameter if the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **MongoDB**. You must also specify this parameter if the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**.
*   If the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the source database. If the SourceEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
*   If the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the source database.', example='dtstestdata', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', description='The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, and **Redis**.

>  Default value: **MySQL**.', example='MySQL', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', description='The endpoint of the source database.

>  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.', example='172.16.88.***', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', description='The ID of the source instance.', example='rm-bp1imrtn6fq7h****', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', description='The type of the source instance. Valid values:

*   **RDS**: ApsaraDB RDS instance
*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database that is hosted on ECS
*   **Express**: self-managed database that is connected over Express Connect
*   **dg**: self-managed database that is connected over Database Gateway
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **POLARDB**: PolarDB for MySQL cluster
*   **PolarDB_o**: PolarDB for Oracle cluster

This parameter is required.', example='RDS', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', description='The SID of the Oracle database.

>  You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', description='The password of the source database account.', example='Test123456', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', description='The service port number of the source database.

>  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.', example='3306', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', description='The ID of the region where the source instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', description='The database account of the source database.

>  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html) and [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html).', example='dtstest', position='Query'),
}

model DescribeConnectionStatusResponseBody = {
  destinationConnectionStatus?: map[string]any(name='DestinationConnectionStatus', description='The connectivity of DTS servers to the destination database.', example='{     "connectDetail": [       {         "testName": "PolarDB_o JDBC Connect",         "testSuccess": true       },       {         "testName": "Ping ",         "testSuccess": true       },       {         "testName": "Telnet ",         "testSuccess": true       }     ],     "connectRes": true,     "connectAdvice": ""   }'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0A47C784-70EF-4111-8677-369CAA00****'),
  sourceConnectionStatus?: map[string]any(name='SourceConnectionStatus', description='The connectivity of DTS servers to the source database.', example='{     "connectDetail": [       {         "testName": "Oracle JDBC Connect",         "testSuccess": true       },       {         "testName": "Ping ",         "testSuccess": false       },       {         "testName": "Telnet ",         "testSuccess": true       }     ],     "connectRes": true,     "connectAdvice": ""   }'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeConnectionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConnectionStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeConnectionStatus  DescribeConnectionStatusRequest
  * @return DescribeConnectionStatusResponse
 */
async function describeConnectionStatus(request: DescribeConnectionStatusRequest): DescribeConnectionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConnectionStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsumerChannelRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='dtsboss6pn1w******', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='boss6pn1w******', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  parentChannelId?: string(name='ParentChannelId', description='The parent task ID of the distributed task.', example='dtsan5114c52******', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeConsumerChannelResponseBody = {
  consumerChannels?: [ 
    {
      consumerGroupId?: string(name='ConsumerGroupId', description='The ID of the consumer group.', example='dtsor2y66j4219****'),
      consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group.', example='consumergrouptest'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The username of the consumer group.', example='dtstest'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.', example='2021-06-20T12:00:00Z'),
      messageDelay?: long(name='MessageDelay', description='The message latency, which is the timestamp of the latest data consumed by the downstream client minus the timestamp of the latest data tracked by the change tracking task. The value is a UNIX timestamp. Unit: seconds.

For example, the latest data in the source database is generated at 10:00. The change tracking task reads the data generated at 09:55, and the downstream client consumes the data generated at 09:30. In this case, the message latency is the UNIX timestamp difference between 09:55 and 09:30.

>  If the return value of this parameter is **-1**, no client is connected to the consumer group.', example='1500'),
      unconsumedData?: long(name='UnconsumedData', description='The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.

>  If the return value of this parameter is -1, no client is connected to the consumer group.', example='186600'),
    }
  ](name='ConsumerChannels', description='The details of the consumer groups.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of consumer groups that can be displayed on one page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D66140B3-C747-42B6-8315-BAF6490E****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of consumer groups.', example='1'),
}

model DescribeConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsumerChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeConsumerChannel  DescribeConsumerChannelRequest
  * @return DescribeConsumerChannelResponse
 */
async function describeConsumerChannel(request: DescribeConsumerChannelRequest): DescribeConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsumerGroupRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtso5xx5t9u19e****', position='Query'),
}

model DescribeConsumerGroupResponseBody = {
  consumerChannels?: {
    describeConsumerChannel?: [ 
    {
      consumerGroupID?: string(name='ConsumerGroupID', description='The ID of the consumer group.', example='dtspis1110z232****'),
      consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group.', example='consumergrouptest'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The username of the consumer group.', example='test'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.', example='2019-10-02T12:00:00Z'),
      messageDelay?: long(name='MessageDelay', description='The message delay, which is the current time minus the timestamp of the earliest unconsumed message in the change tracking instance. Unit: seconds.

>  If the return value of this parameter is **-1**, no client is connected to the consumer group.', example='172714'),
      unconsumedData?: long(name='UnconsumedData', description='The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.

>  If the return value of this parameter is **-1**, no client is connected to the consumer group.', example='186600'),
    }
  ](name='DescribeConsumerChannel')
  }(name='ConsumerChannels', description='The list of consumer groups.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of consumer groups that can be displayed on one page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4204E899-8193-4D7D-A4FB-3A7F9063****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of consumer groups.', example='1'),
}

model DescribeConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeConsumerGroup  DescribeConsumerGroupRequest
  * @return DescribeConsumerGroupResponse
 */
async function describeConsumerGroup(request: DescribeConsumerGroupRequest): DescribeConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDTSIPRequest {
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', description='The ID of the region where the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  If the destination instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  sourceEndpointRegion: string(name='SourceEndpointRegion', description='The ID of the region where the source instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

>  If the source instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeDTSIPResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The internal error code. This parameter will be removed in the future.', example='500'),
  dynamicMessage?: string(name='DynamicMessage', description='The CIDR blocks of DTS servers.', example='10.151.12.0/24,47.102.181.0/24,47.101.109.0/24,120.55.129.0/24,11.115.103.0/24,47.102.234.0/24'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C99C0BE-F312-40FA-ADFA-4DC1166B****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeDTSIPResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDTSIPResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDTSIP  DescribeDTSIPRequest
  * @return DescribeDTSIPResponse
 */
async function describeDTSIP(request: DescribeDTSIPRequest): DescribeDTSIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDTSIP', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCheckReportUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkType: int32(name='CheckType', description='The data verification method. Valid values:

*   **1**: full data verification.
*   **2**: incremental data verification.

This parameter is required.', example='1', position='Query'),
  dbName: string(name='DbName', description='The name of the verified source database.

This parameter is required.', example='dtsdb', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the Data Transmission Service (DTS) task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='f4612nr2182****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  tbName: string(name='TbName', description='The name of the table verified in the source database.

This parameter is required.', example='student', position='Query'),
}

model DescribeDataCheckReportUrlResponseBody = {
  dynamicMessage?: string(name='DynamicMessage', description='The URL for downloading the verification report.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='AF2DE23-B692-5B85-90B7-44B6F4D8****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeDataCheckReportUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataCheckReportUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataCheckReportUrl  DescribeDataCheckReportUrlRequest
  * @return DescribeDataCheckReportUrlResponse
 */
async function describeDataCheckReportUrl(request: DescribeDataCheckReportUrlRequest): DescribeDataCheckReportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCheckReportUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCheckTableDetailsRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkType: int32(name='CheckType', description='The data verification method. Valid values:

*   **1**: full data verification.
*   **2**: incremental data verification.

This parameter is required.', example='1', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='xd4e4xb419q****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value:**1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', minimum=1, maximum=1000, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  schemaName?: string(name='SchemaName', description='The name of the schema whose data is verified in the source database.', example='dtstest', position='Query'),
  status?: string(name='Status', description='The status of the data verification result. Valid values:

*   **-1** (default): All status.
*   **6**: Inconsistent data detected in the table.', example='-1', position='Query'),
  tableName?: string(name='TableName', description='The name of the table whose data is verified in the source database.', example='student', position='Query'),
}

model DescribeDataCheckTableDetailsResponseBody = {
  diffTableCount?: long(name='DiffTableCount', description='The number of tables that contain inconsistent data.', example='1'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be discontinued in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  failedTableCount?: long(name='FailedTableCount', description='The total number of data rows that were failed.', example='1'),
  finishedCount?: long(name='FinishedCount', description='The total number of data rows that were verified.', example='7'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  tableDetails?: [ 
    {
      bootTime?: string(name='BootTime', description='The time when data verification was performed.', example='2023-01-18 11:26:59'),
      diffCount?: long(name='DiffCount', description='The number of data rows that contain inconsistent data.', example='1'),
      errorCode?: int32(name='ErrorCode', description='The error code returned if the data verification task failed. Valid values:

*   **1**: The number of tables that do not contain primary keys exceeds the limit.
*   **2**: The number of data rows that contain inconsistent data exceeds 300.
*   **3**: One or more tables to be verified do not exist.
*   **4**: The SQL statements used for verifying data contain a syntax error.', example='1'),
      finishCount?: long(name='FinishCount', description='The number of data rows that were verified.', example='7'),
      id?: long(name='Id', description='The auto-increment primary key that is used to identify the data in a verification result.', example='167401241974****'),
      sourceDbName?: string(name='SourceDbName', description='The name of the source database.', example='testdb'),
      sourceTbName?: string(name='SourceTbName', description='The name of the source table.', example='student'),
      status?: string(name='Status', description='The status of data verification results. Valid values:

*   **0**: The data verification task was complete.
*   **2**: The data verification task was being initialized.
*   **3**: The data verification task was in progress.
*   **5**: The data verification task failed.', example='0'),
      targetDbName?: string(name='TargetDbName', description='The name of the destination database.', example='testdb'),
      targetTbName?: string(name='TargetTbName', description='The name of the destination table.', example='person'),
      totalCount?: long(name='TotalCount', description='The total number of data rows.', example='8'),
    }
  ](name='TableDetails', description='The details of data verification results.'),
  totalCount?: long(name='TotalCount', description='The total number of tables on which data verification was performed.', example='1'),
}

model DescribeDataCheckTableDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataCheckTableDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataCheckTableDetails  DescribeDataCheckTableDetailsRequest
  * @return DescribeDataCheckTableDetailsResponse
 */
async function describeDataCheckTableDetails(request: DescribeDataCheckTableDetailsRequest): DescribeDataCheckTableDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCheckTableDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCheckTableDiffDetailsRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkType: int32(name='CheckType', description='The data verification method. Valid values:

*   **1**: full data verification.
*   **2**: incremental data verification.

This parameter is required.', example='2', position='Query'),
  dbName: string(name='DbName', description='The name of the database to which the table that contains inconsistent data belongs.

This parameter is required.', example='db_dtstest', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the ID of the task.

This parameter is required.', example='xd4e4xb419q****', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number of the page to return. The value must be an integer greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  tbName: string(name='TbName', description='The name of the table that contains inconsistent data exists.

This parameter is required.', example='test_person', position='Query'),
}

model DescribeDataCheckTableDiffDetailsResponseBody = {
  dbName?: string(name='DbName', description='The name of the source database to which the table that contains inconsistent data belongs.', example='db_dtstest'),
  diffCount?: long(name='DiffCount', description='The number of data rows that contain inconsistent data.', example='1'),
  diffDetails?: [ 
    {
      diff?: string(name='Diff', description='The details of the inconsistent data, whose value is a JSON string. The JSON string contains the following parameters:

*   column: the name of the field.
*   source: the value of the field in the source database.
*   dest: the value of the field in the destination database.
*   isPrimary: indicates whether the field is a primary key.', example='[     {         "column": "id",         "source": "9511",         "dest": "9511",         "isPrimary": true     },     {         "column": "state",         "source": "3",         "dest": "2",         "isPrimary": false     },     {         "column": "create_time",         "source": "2023-04-11 14:07:17.0",         "dest": "NULL",         "isPrimary": false     },     {         "column": "update_time",         "source": "2023-04-11 06:07:17.0",         "dest": "2023-04-11 06:02:29.0",         "isPrimary": false     } ]'),
      gmtCreated?: string(name='GmtCreated', description='The time when the data verification was performed.', example='2023-04-23T10:36:05.000+00:00'),
      id?: long(name='Id', description='The auto-increment primary key that is used to identify the data in a verification result.', example='13058****'),
    }
  ](name='DiffDetails', description='The information about the inconsistent data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> For example, if the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InvalidParameter'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The value of the parameter tbName is invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='dtsog8q1z3tc9t****"'),
  requestId?: string(name='RequestId', description='The request ID.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  tbName?: string(name='TbName', description='The name of the table that contains inconsistent data in the source database.', example='test_person'),
}

model DescribeDataCheckTableDiffDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataCheckTableDiffDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDataCheckTableDiffDetails  DescribeDataCheckTableDiffDetailsRequest
  * @return DescribeDataCheckTableDiffDetailsResponse
 */
async function describeDataCheckTableDiffDetails(request: DescribeDataCheckTableDiffDetailsRequest): DescribeDataCheckTableDiffDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCheckTableDiffDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedClusterRequest {
  dedicatedClusterId: string(name='DedicatedClusterId', description='The ID of the cluster.

This parameter is required.', example='dtsCluster****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeDedicatedClusterResponseBody = {
  cpuUtilization?: long(name='CpuUtilization', description='The CPU utilization. Unit: percentage.', example='30'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtsCluster****'),
  dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='daily_test'),
  diskUtilization?: long(name='DiskUtilization', description='The disk usage.', example='50'),
  dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the instance.', example='dtsb8r****'),
  du?: long(name='Du', description='The number of DTS units (DUs).', example='30'),
  duUtilization?: long(name='DuUtilization', description='The DU usage. Unit: percentage.', example='16'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  gmtCreated?: long(name='GmtCreated', description='The time when the cluster was created.', example='1642476144000'),
  gmtFinished?: long(name='GmtFinished', description='The time when the cluster stopped.', example='1645200000000'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  memUtilization?: long(name='MemUtilization', description='The memory usage.', example='20'),
  nodeCount?: long(name='NodeCount', description='The number of nodes in the cluster.', example='5'),
  oversoldDu?: long(name='OversoldDu', description='The number of DUs that exceeds the upper limit.', example='60'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  state?: string(name='State', description='The status of the cluster. Valid values:

*   **init**: The cluster is being initialized.
*   **schedule**: The cluster is pending scheduling.
*   **running**: The cluster is running.
*   **upgrade**: The cluster is being upgraded.
*   **downgrade**: The cluster is being downgraded.
*   **locked**: The cluster is locked.
*   **releasing**: The cluster is being released.
*   **released**: The cluster is released.', example='inti'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalCpuCore?: long(name='TotalCpuCore', description='The total number of CPU cores.', example='100'),
  totalDiskGBSize?: long(name='TotalDiskGBSize', description='The total disk size. Unit: GB.', example='2048'),
  totalMemGBSize?: long(name='TotalMemGBSize', description='The total amount of memory. Unit: GB.', example='256'),
  usedCpuCore?: long(name='UsedCpuCore', description='The number of used CPU cores.', example='30'),
  usedDiskGBSize?: long(name='UsedDiskGBSize', description='The used disk size. Unit: GB.', example='1024'),
  usedDu?: long(name='UsedDu', description='The number of used DUs.', example='5'),
  usedMemGBSize?: long(name='UsedMemGBSize', description='The amount of used memory. Unit: GB.', example='128'),
}

model DescribeDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDedicatedClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDedicatedCluster  DescribeDedicatedClusterRequest
  * @return DescribeDedicatedClusterResponse
 */
async function describeDedicatedCluster(request: DescribeDedicatedClusterRequest): DescribeDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedClusterMonitorRuleRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtsClustervcwn1oeyu5fx4yf', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeDedicatedClusterMonitorRuleResponseBody = {
  cpuAlarmThreshold?: string(name='CpuAlarmThreshold', description='The alert threshold for CPU utilization. Unit: percentage.', example='80'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtsClustervcwn1oeyu5fx4yf'),
  diskAlarmThreshold?: string(name='DiskAlarmThreshold', description='The alert threshold for disk usage. Unit: percentage.', example='80'),
  duAlarmThreshold?: string(name='DuAlarmThreshold', description='The alert threshold for DTS Unit (DU) usage. Unit: percentage.', example='46'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  memAlarmThreshold?: string(name='MemAlarmThreshold', description='The alert threshold for memory usage. Unit: percentage.', example='80'),
  noticeSwitch?: string(name='NoticeSwitch', description='Indicates whether the alert feature is enabled. Valid values:

*   **1**: The alert feature is enabled.
*   **0**: The alert feature is disabled.', example='1'),
  phones?: string(name='Phones', description='The mobile phone number to which alerts are sent. Separate multiple mobile phone numbers with commas (,).', example='186****7653'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeDedicatedClusterMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDedicatedClusterMonitorRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDedicatedClusterMonitorRule  DescribeDedicatedClusterMonitorRuleRequest
  * @return DescribeDedicatedClusterMonitorRuleResponse
 */
async function describeDedicatedClusterMonitorRule(request: DescribeDedicatedClusterMonitorRuleRequest): DescribeDedicatedClusterMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedClusterMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsEtlJobVersionInfoRequest {
  dtsInstanceId: string(name='DtsInstanceId', description='The ID of the Data Transmission Service (DTS) instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

This parameter is required.', example='dtsggk12iwya1a****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the ETL task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.', example='l5512es7w15****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the available Alibaba Cloud regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeDtsEtlJobVersionInfoResponseBody = {
  dtsEtlJobVersionInfos?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the ETL task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1637229315000'),
      creator?: string(name='Creator', description='The ID of the creator.', example='10000000'),
      creatorName?: string(name='CreatorName', description='The username of the creator.', example='***@****.com'),
      dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the DTS instance.', example='dtsg******gd'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the ETL task.', example='l5512es7w15****'),
      dtsJobName?: string(name='DtsJobName', description='The name of the ETL task.', example='test_sql'),
      modifyTime?: string(name='ModifyTime', description='The time when the ETL task was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1637230117000'),
      safeCheckpoint?: string(name='SafeCheckpoint', description='The safe checkpoint of the ETL task.', example='1637230117000'),
      status?: string(name='Status', description='The log level. Valid values: ERROR, WARN, INFO, and DEBUG.', example='INFO'),
      version?: int32(name='Version', description='The version number of the ETL task.', example='9'),
    }
  ](name='DtsEtlJobVersionInfos', description='The details of ETL tasks.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='present environment is not support,so skip'),
  errCode?: string(name='ErrCode', description='The error code. This example indicates that the specified ETL task ID is invalid.', example='InvalidJobId'),
  errMessage?: string(name='ErrMessage', description='The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may have been deleted.', example='The specified dts job id %s is not exists.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Default value: 1.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of records returned on the current page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. If the call failed, false is returned.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of records.', example='200'),
}

model DescribeDtsEtlJobVersionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsEtlJobVersionInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDtsEtlJobVersionInfo  DescribeDtsEtlJobVersionInfoRequest
  * @return DescribeDtsEtlJobVersionInfoResponse
 */
async function describeDtsEtlJobVersionInfo(request: DescribeDtsEtlJobVersionInfoRequest): DescribeDtsEtlJobVersionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsEtlJobVersionInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobConfigRequest {
  dtsJobId?: string(name='DtsJobId', position='Query'),
  forAcceleration?: string(name='ForAcceleration', position='Query'),
  module?: string(name='Module', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDtsJobConfigResponseBody = {
  parameters?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      defaultValue?: string(name='DefaultValue'),
      description?: string(name='Description'),
      forceRestart?: string(name='ForceRestart'),
      modifiable?: string(name='Modifiable'),
      module?: string(name='Module'),
      name?: string(name='Name'),
      recommendValue?: string(name='RecommendValue'),
      runningValue?: string(name='RunningValue'),
      valueType?: int32(name='ValueType'),
    }
  ](name='Parameters'),
  requestId?: string(name='RequestId'),
}

model DescribeDtsJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDtsJobConfig  DescribeDtsJobConfigRequest
  * @return DescribeDtsJobConfigResponse
 */
async function describeDtsJobConfig(request: DescribeDtsJobConfigRequest): DescribeDtsJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobDetailRequest {
  dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsta7w132u12h****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='ta7w132u12h****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  syncSubJobHistory?: boolean(name='SyncSubJobHistory', description='Specifies whether to return the information about all data synchronization subtasks. Default value: **false**. A value of false indicates that the system returns only the information about a data synchronization subtask that is running or was most recently run.', example='false', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Specifies whether to query only zero-extract, transform, load (ETL) integration tasks. Valid values:

*   **true**
*   **false**', example='false', position='Query'),
}

model DescribeDtsJobDetailResponseBody = {
  appName?: string(name='AppName', description='Indicates whether the new change tracking feature is used.

> This parameter is returned only for change tracking instances of the new version.', example='new'),
  beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-15T08:25:34Z'),
  binlog?: string(name='Binlog', description='The binary logs.', example='****'),
  binlogSite?: string(name='BinlogSite', description='The current offset.', example='156629109****'),
  binlogTime?: string(name='BinlogTime', description='The offset range.', example='****'),
  bootTime?: string(name='BootTime', description='The time when the task was started. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-30T03:36:11.000'),
  checkpoint?: long(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.', example='1616405159'),
  code?: int32(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-23T07:30:31Z'),
  consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
  createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-16T08:01:19Z'),
  dataDeliveryChannelInfo?: {
    partitionNum?: int32(name='PartitionNum', description='The number of partitions of the destination topic.', example='3'),
    publicDproxyUrl?: string(name='PublicDproxyUrl', description='The public endpoint of the data shipping channel.', example='dts-****.aliyuncs.com:18***'),
    region?: string(name='Region', description='The region in which the data shipping channel resides.', example='cn-hangzhou'),
    topic?: string(name='Topic', description='The destination topic of the data shipping instance.', example='cn_hangzhou_******_data_delivery_version2'),
    vpcDproxyUrl?: string(name='VpcDproxyUrl', description='The VPC endpoint of the data shipping channel.', example='dts-****.aliyuncs.com:18***'),
  }(name='DataDeliveryChannelInfo', description='The information about the data shipping channel.'),
  dataSynchronizationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration or synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
    needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
    percent?: string(name='Percent', description='The progress of incremental data migration or synchronization. Unit: percentage.', example='95'),
    progress?: string(name='Progress', description='The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.', example='0.00RPS/(0.000MB/s)'),
    status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **Checking**: The task is in precheck.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Catched'),
  }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
  databaseCount?: int32(name='DatabaseCount', description='The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.', example='2'),
  dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}'),
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The dedicated cluster ID.', example='dtsxxxxx'),
  delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. Unit: milliseconds.', example='0'),
  demoJob?: boolean(name='DemoJob', description='Indicates whether the task is a subtask. Valid values:

*   **true**
*   **false**', example='false'),
  destNetType?: string(name='DestNetType', description='The network type of the consumer client. Valid values:

*   **CLASSIC**: classic network.
*   **VPC**: virtual private cloud (VPC).', example='VPC'),
  destinationEndpoint?: {
    canModifyPassword?: boolean(name='CanModifyPassword', description='Indicates whether the password can be modified. Valid values:

*   **true**
*   **false**', example='false'),
    databaseName?: string(name='DatabaseName', description='The name of the database to which the objects are migrated in the destination instance.', example='dtstestdata'),
    engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
    instanceID?: string(name='InstanceID', description='The destination instance ID.', example='rm-bp1imrtn6fq7h****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
    ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.XX.XX'),
    oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
    port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
    region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
    sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
    userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
  }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
  dtsBisLabel?: string(name='DtsBisLabel', description='The environment tag of the DTS instance. Valid values:

*   **normal******
*   **online******', example='normal'),
  dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsi03e3zty16i****'),
  dtsJobClass?: string(name='DtsJobClass', description='The instance class.

> For more information about the description and test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).', example='xlarge'),
  dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****'),
  dtsJobName?: string(name='DtsJobName', description='The name of the data migration, data synchronization, or change tracking task.', example='api_test'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. The value of this parameter is used to replace **%s** in the value of **ErrMessage**.

> For example, if the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.', example='DtsJobId'),
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-26T14:03:21Z'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
  etlCalculator?: string(name='EtlCalculator', description='The operator information of the ETL task.

> This parameter is returned only if you query the details of an ETL task.', example='{ 	"cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 	}] }'),
  expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the return value of **PayType** is **PrePaid**.', example='2023-06-16T08:01:19Z'),
  finishTime?: string(name='FinishTime', description='The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-06-16T10:34:17Z'),
  groupId?: string(name='GroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The returned HTTP status code.', example='200'),
  jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **sync**: a data synchronization task.
*   **subSync**: a subtask generated when the objects to be synchronized are modified.

> In most cases, this parameter is returned together with **TaskType**.', example='sync'),
  lastUpdateTime?: string(name='LastUpdateTime', description='The timestamp when the task was last updated.', example='156629109****'),
  maxDu?: double(name='MaxDu', description='The maximum number of DUs.

> This parameter is supported only for serverless instances.', example='16'),
  migrationMode?: {
    dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad', description='Indicates whether data transformation is performed. Valid values:

*   **true**
*   **false**', example='false'),
    dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
    dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
    structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
  }(name='MigrationMode', description='The migration types or initial synchronization types.'),
  minDu?: double(name='MinDu', description='The minimum number of DUs.

> This parameter is supported only for serverless instances.', example='1'),
  payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.', example='PrePaid'),
  requestId?: string(name='RequestId', description='The request ID.', example='29207299-7C41-493A-BA4F-2FAC5DE4****'),
  reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
  resourceGroupDisplayName?: string(name='ResourceGroupDisplayName', description='The resource group name.', example='default resource group'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
  retryState?: {
    errMessage?: string(name='ErrMessage', description='The error message returned if these retries failed.', example='Unexpected error'),
    jobId?: string(name='JobId', description='The task ID.', example='bi6e22ay243****'),
    maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
    module?: string(name='Module', description='The progress of the instance when DTS performs retries.', example='03'),
    retryCount?: int32(name='RetryCount', description='The number of retries.', example='5'),
    retryTarget?: string(name='RetryTarget', description='The object on which the retries are performed. Valid values:

*   **srcDB**: the source database.
*   **destDB**: the destination database.
*   **inner_module**: an internal module of DTS.', example='srcDB'),
    retryTime?: int32(name='RetryTime', description='The time that has elapsed from the point in time when the first retry starts. Unit: seconds.', example='3600'),
    retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

*   **true**
*   **false**', example='false'),
  }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
  sourceEndpoint?: {
    aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the source instance belongs.', example='140692647406****'),
    canModifyPassword?: boolean(name='CanModifyPassword', description='Indicates whether the password can be modified. Valid values:

*   **true**
*   **false**', example='false'),
    databaseName?: string(name='DatabaseName', description='The name of the database from which the objects are migrated in the source instance.', example='dtstestdata'),
    engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
    instanceID?: string(name='InstanceID', description='The source instance ID.', example='rm-bp1162kryivb8****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
    ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
    oracleSID?: string(name='OracleSID', description='The system ID (SID) of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-Real Application Cluster (RAC) architecture.', example='testsid'),
    port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
    region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
    roleName?: string(name='RoleName', description='The name of the Resource Access Management (RAM) role configured for the Alibaba Cloud account to which the source instance belongs.', example='ram-for-dts'),
    sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
    userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  status?: string(name='Status', description='The state of the data migration or synchronization task. Valid values:

*   **NotStarted**: The task is not started.
*   **NotConfigured**: The task is not configured.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **Initializing**: Initial data synchronization is in progress.
*   **InitializeFailed**: Initial data synchronization failed.
*   **synchronizing**: Data synchronization is in progress.
*   **Migrating**: Data migration is in progress.
*   **Failed**: Data synchronization failed.
*   **MigrationFailed**: Data migration failed.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects of the task are being modified.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Downgrade**: The task is being downgraded.
*   **Locked**: The task is locked.
*   **Finished**: The task is complete.', example='Migrating'),
  subDistributedJob?: [ 
    {
      appName?: string(name='AppName', description='Indicates whether the new change tracking feature is used.

> This parameter is returned only for change tracking instances of the new version.', example='new'),
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-15T08:25:34Z'),
      checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.', example='1616405159'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-23T07:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
      createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-01-12T08:34:11Z'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
        percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
        status?: string(name='Status', description='The state of the ETL task. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Finished'),
      }(name='DataEtlStatus', description='The state of the ETL task.

> This parameter collection is returned only if an ETL task is configured.'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration or initial full data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
        percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
        status?: string(name='Status', description='The state of full data migration or initial full data synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
      }(name='DataInitializationStatus', description='The state of full data migration or initial full data synchronization.'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
        percent?: string(name='Percent', description='The progress of incremental data migration or synchronization.', example='95'),
        progress?: string(name='Progress', description='The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.', example='0.00RPS/(0.000MB/s)'),
        status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **Checking**: The task is in precheck.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Catched'),
      }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
      databaseCount?: int32(name='DatabaseCount', description='The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.', example='2'),
      dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}'),
      delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. Unit: milliseconds.', example='0'),
      destNetType?: string(name='DestNetType', description='The network type of the consumer client. Valid values:

*   **CLASSIC**: classic network.
*   **VPC**: VPC.', example='VPC'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the destination instance belongs.', example='140692647406****'),
        databaseName?: string(name='DatabaseName', description='The name of the database to which the objects are migrated in the destination instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The destination instance ID.', example='rm-bp1f9guj5rhzq****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the destination instance.', example='192.168.XX.XX'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testid'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.', example='ram-for-dts'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The DTS instance ID.', example='dtsnjuc14kp12u****'),
      dtsJobClass?: string(name='DtsJobClass', description='The instance class.', example='xlarge'),
      dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
      dtsJobId?: string(name='DtsJobId', description='The DTS task ID.', example='m06j1g92124****'),
      dtsJobName?: string(name='DtsJobName', description='The DTS instance name.', example='dtstest****'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-26T14:03:21Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
      etlCalculator?: string(name='EtlCalculator', description='The operator information of the ETL task.

> This parameter is returned only if you query the details of an ETL task.', example='{ "cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 }] }'),
      expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the return value of **PayType** is **PrePaid**.', example='2023-06-16T08:01:19Z'),
      finishTime?: string(name='FinishTime', description='The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-06-16T10:34:17Z'),
      groupId?: string(name='GroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
      isDemoJob?: boolean(name='IsDemoJob', description='Indicates whether the task is a subtask. Valid values:

*   **true**
*   **false**', example='false'),
      jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **online**: data migration task.
*   **SYNC**: data synchronization task.
*   **SUBSCRIBE**: change tracking task.', example='SYNC'),
      maxDu?: double(name='MaxDu', description='The maximum number of DUs.

> This parameter is supported only for serverless instances.', example='16'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad', description='Indicates whether data transformation is performed. Valid values:

*   **true**
*   **false**', example='false'),
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
      }(name='MigrationMode', description='The migration types or initial synchronization types.'),
      minDu?: double(name='MinDu', description='The minimum number of DUs.

> This parameter is supported only for serverless instances.', example='1'),
      originType?: string(name='OriginType', description='The source of the task. Valid values:

*   **PTS**
*   **DMS**
*   **DTS**', example='DTS'),
      payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.', example='PrePaid'),
      performance?: {
        flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: Mbit/s.', example='1'),
        rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data migration or synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
            checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

*   **Success**
*   **Failed**', example='Success'),
            failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            repairMethod?: string(name='RepairMethod', description='The method used to fix the precheck failure.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
        status?: string(name='Status', description='The precheck state. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Finished**: The task is complete.', example='Finished'),
      }(name='PrecheckStatus', description='The precheck state.'),
      reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
      retryState?: {
        errMsg?: string(name='ErrMsg', description='The error message returned.', example='CHECK__ERROR_SAME_OBJ'),
        jobId?: string(name='JobId', description='The task ID.', example='ta7w132u12h****'),
        maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
        module?: string(name='Module', description='The progress of the instance when DTS performs retries.', example='03'),
        retryCount?: int32(name='RetryCount', description='The number of retries.', example='5'),
        retryTarget?: string(name='RetryTarget', description='The object on which the retries are performed. Valid values:

*   **srcDB**: the source database.
*   **destDB**: the destination database.
*   **inner_module**: an internal module of DTS.', example='srcDB'),
        retryTime?: int32(name='RetryTime', description='The time that has elapsed from the point in time when the first retry starts. Unit: seconds.', example='3600'),
        retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

*   **true**
*   **false**', example='true'),
      }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
      reverseJob?: {
        appName?: string(name='AppName', description='Indicates whether the new change tracking feature is used.

> This parameter is returned only for change tracking instances of the new version.', example='new'),
        beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-15T08:25:34Z'),
        checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.', example='1616405159'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-23T07:30:31Z'),
        consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
        createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-01-12T08:34:11Z'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
          percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
          status?: string(name='Status', description='The state of the ETL task. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Finished'),
        }(name='DataEtlStatus', description='The state of the ETL task.

> This parameter collection is returned only if an ETL task is configured.'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration or initial full data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
          percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
          status?: string(name='Status', description='The state of full data migration or initial full data synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
        }(name='DataInitializationStatus', description='The state of full data migration or initial full data synchronization.'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
          percent?: string(name='Percent', description='The progress of incremental data migration or synchronization.', example='95'),
          progress?: string(name='Progress', description='The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.', example='0.00RPS/(0.000MB/s)'),
          status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **Checking**: The task is in precheck.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Catched'),
        }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
        databaseCount?: int32(name='DatabaseCount', description='The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.', example='2'),
        dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}'),
        delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. Unit: milliseconds.', example='0'),
        destNetType?: string(name='DestNetType', description='The network type of the consumer client. Valid values:

*   **CLASSIC**: classic network.
*   **VPC**: VPC.', example='VPC'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the destination instance belongs.', example='140692647406****'),
          databaseName?: string(name='DatabaseName', description='The name of the database to which the objects are migrated in the destination instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The destination instance ID.', example='rm-bp1f9guj5rhzq****'),
          instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the destination instance.', example='192.168.XX.XX'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.', example='ram-for-dts'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
        }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
        dtsInstanceID?: string(name='DtsInstanceID', description='The DTS instance ID.', example='dtsnjuc14kp12u****'),
        dtsJobClass?: string(name='DtsJobClass', description='The instance class.', example='xlarge'),
        dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
        dtsJobId?: string(name='DtsJobId', description='The DTS task ID.', example='m06j1g92124****'),
        dtsJobName?: string(name='DtsJobName', description='The DTS instance name.', example='dtstest****'),
        endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-26T14:03:21Z'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        etlCalculator?: string(name='EtlCalculator', description='The operator information of the ETL task.

> This parameter is returned only if you query the details of an ETL task.', example='{ "cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 }] }'),
        expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the return value of **PayType** is **PrePaid**.', example='2023-06-16T08:01:19Z'),
        finishTime?: string(name='FinishTime', description='The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-06-16T10:34:17Z'),
        groupId?: string(name='GroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
        isDemoJob?: boolean(name='IsDemoJob', description='Indicates whether the task is a subtask. Valid values:

*   **true**
*   **false**', example='false'),
        jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **online**: data migration task.
*   **SYNC**: data synchronization task.
*   **SUBSCRIBE**: change tracking task.', example='SYNC'),
        maxDu?: double(name='MaxDu', description='The maximum number of DUs.

> This parameter is supported only for serverless instances.', example='16'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad', description='Indicates whether data transformation is performed. Valid values:

*   **true**
*   **false**', example='false'),
          dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
          dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
          structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
        }(name='MigrationMode', description='The migration types or initial synchronization types.'),
        minDu?: double(name='MinDu', description='The minimum number of DTS Units (DUs).

> This parameter is supported only for serverless instances.', example='1'),
        originType?: string(name='OriginType', description='The source of the task. Valid values:

*   **PTS**
*   **DMS**
*   **DTS**', example='DTS'),
        payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.', example='PrePaid'),
        performance?: {
          flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: Mbit/s.', example='1'),
          rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
        }(name='Performance', description='The performance of the data migration or synchronization instance.'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
              checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
              checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

*   **Success**
*   **Failed**', example='Success'),
              failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
              repairMethod?: string(name='RepairMethod', description='The method used to fix the precheck failure.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
            }
          ](name='Detail', description='The result of each precheck item.'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
          status?: string(name='Status', description='The precheck state. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Finished**: The task is complete.', example='Finished'),
        }(name='PrecheckStatus', description='The precheck state.'),
        reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
        retryState?: {
          errMsg?: string(name='ErrMsg', description='The error message returned.', example='CHECK__ERROR_SAME_OBJ'),
          jobId?: string(name='JobId', description='The task ID.', example='ta7w132u12h****'),
          maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
          module?: string(name='Module', description='The progress of the instance when DTS performs retries.', example='03'),
          retryCount?: int32(name='RetryCount', description='The number of retries.', example='5'),
          retryTarget?: string(name='RetryTarget', description='The object on which the retries are performed. Valid values:

*   **srcDB**: the source database.
*   **destDB**: the destination database.
*   **inner_module**: an internal module of DTS.', example='srcDB'),
          retryTime?: int32(name='RetryTime', description='The time that has elapsed from the point in time when the first retry starts. Unit: seconds.', example='3600'),
          retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

*   **true**
*   **false**', example='true'),
        }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
        reverseJob?: any(name='ReverseJob', description='The details of the data synchronization task in the reverse direction.

> This parameter is returned only for two-way data synchronization tasks.', example='****'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the source instance belongs.', example='140692647406****'),
          databaseName?: string(name='DatabaseName', description='The name of the database from which the objects are migrated in the source instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The source instance ID.', example='rm-bp2f3huj5rhzq****'),
          instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the source instance.', example='192.168.XX.XX'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.', example='ram-for-dts'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
        }(name='SourceEndpoint', description='The connection settings of the source instance.'),
        status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='Error message indicating task failure.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Whether to display upgrade specifications, return value:
- True: Yes.
- False: No.', example='true'),
          percent?: string(name='Percent', description='Initialization progress of library table structure, measured in percentage.', example='100'),
          progress?: string(name='Progress', description='The number of tables that have completed library table structure initialization.', example='1'),
          status?: string(name='Status', description='The initialization status of the library table structure includes:
- NotStarted: Not started.
- Migration: In the process of initialization.
- Failed: Initialization failed.
- Finished: Initialization completed.', example='Finished'),
        }(name='StructureInitializationStatus', description='Initialization status of library table structure.'),
        subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

> This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl', description='Indicates whether DDL statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
          dml?: boolean(name='Dml', description='Indicates whether DML statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
        }(name='SubscriptionDataType', description='The type of data for change tracking.'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
          publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
          vpcHost?: string(name='VpcHost', description='The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
        }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
        synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid', description='The Alibaba Cloud account ID.', example='191448876515****'),
            creator?: long(name='Creator', description='The operator of the tag.', example='191448876515****'),
            gmtCreate?: string(name='GmtCreate', description='The time when the task was created.', example='2022-03-16T08:01:19Z'),
            gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='2022-03-16T08:01:19Z'),
            id?: long(name='Id', description='The primary key of the table.', example='2'),
            regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
            resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsnjuc14kp12u****'),
            resourceType?: string(name='ResourceType', description='The resource type.', example='ALIYUN::DTS::INSTANCE'),
            scope?: string(name='Scope', description='Indicates whether the tag is visible. Valid values:

*   **0**: The tag is public.
*   **1**: The tag is private.', example='0'),
            srcRegion?: string(name='SrcRegion', description='The ID of the region in which the DTS task resides.

> In most cases, the ID of the region in which the destination instance resides is returned.', example='cn-hangzhou'),
            tagCategory?: string(name='TagCategory', description='The type of the tag. Valid values:

*   **System**: The tag was created by the system.
*   **Custom**: The tag was created by a user.

> By default, if the parameter is left empty, custom tags and system tags are returned.', example='System'),
            tagKey?: string(name='TagKey', description='The tag key.', example='key1'),
            tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
          }
        ](name='TagList', description='The tags of the task.'),
        taskType?: string(name='TaskType', description='The task type.', example='rds'),
      }(name='ReverseJob', description='The details of the data synchronization task in the reverse direction.

> This parameter is returned only for two-way data synchronization tasks.'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the source instance belongs.', example='140692647406****'),
        databaseName?: string(name='DatabaseName', description='The name of the database from which the objects are migrated in the source instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The source instance ID.', example='dtsnjuc14kp12u****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the source instance.', example='192.168.XX.XX'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.', example='ram-for-dts'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='Error message.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Whether to display upgrade specifications, return value:
- True: Yes.
- False: No.', example='true'),
        percent?: string(name='Percent', description='Initialization progress of library table structure, measured in percentage.', example='100'),
        progress?: string(name='Progress', description='The number of tables that have completed library table structure initialization.', example='1'),
        status?: string(name='Status', description='The initialization status of the library table structure includes:
- NotStarted: Not started.
- Migration: In the process of initialization.
- Failed: Initialization failed.
- Finished: Initialization completed.', example='Finished'),
      }(name='StructureInitializationStatus', description='Initialization status of library table structure.'),
      subSyncJob?: [ any ](name='SubSyncJob', description='The information about the subtasks in the current data synchronization task.'),
      subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

> This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl', description='Indicates whether DDL statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
        dml?: boolean(name='Dml', description='Indicates whether DML statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
      }(name='SubscriptionDataType', description='The type of data for change tracking.'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
        publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
        vpcHost?: string(name='VpcHost', description='The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
      }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
      synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid', description='The Alibaba Cloud account ID.', example='191448876515****'),
          creator?: long(name='Creator', description='The operator of the tag.', example='191448876515****'),
          gmtCreate?: string(name='GmtCreate', description='The time when the task was created.', example='2022-03-16T08:01:19Z'),
          gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='2022-03-16T08:01:19Z'),
          id?: long(name='Id', description='The primary key of the table.', example='2'),
          regionId?: string(name='RegionId', description='The ID of the region in which the DTS task resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsnjuc14kp12u****'),
          resourceType?: string(name='ResourceType', description='The resource type.', example='ALIYUN::DTS::INSTANCE'),
          scope?: string(name='Scope', description='Indicates whether the tag is visible. Valid values:

*   **0**: The tag is public.
*   **1**: The tag is private.', example='0'),
          srcRegion?: string(name='SrcRegion', description='The ID of the region in which the DTS task resides.

> In most cases, the ID of the region in which the destination instance resides is returned.', example='cn-hangzhou'),
          tagCategory?: string(name='TagCategory', description='The type of the tag. Valid values:

*   **System**: The tag was created by the system.
*   **Custom**: The tag was created by a user.

> By default, if the parameter is left empty, custom tags and system tags are returned.', example='System'),
          tagKey?: string(name='TagKey', description='The tag key.', example='key1'),
          tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
        }
      ](name='TagList', description='The tags of the task.'),
      taskType?: string(name='TaskType', description='The task type.', example='rds'),
    }
  ](name='SubDistributedJob', description='The information about the subtasks in the current distributed task. If the DTS task is not a distributed task, the value of this parameter is null.

> This parameter is available only if the DTS task is a data synchronization task.'),
  subSyncJob?: [ 
    {
      appName?: string(name='AppName', description='Indicates whether the new change tracking feature is used.

> This parameter is returned only for change tracking instances of the new version.', example='new'),
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-15T08:25:34Z'),
      checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.', example='1616405159'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-23T07:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
      createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-01-12T08:34:11Z'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
        percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
        status?: string(name='Status', description='The state of the ETL task. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Finished'),
      }(name='DataEtlStatus', description='The state of the ETL task.

> This parameter collection is returned only if an ETL task is configured.'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration or initial full data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
        percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
        status?: string(name='Status', description='The state of full data migration or initial full data synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
      }(name='DataInitializationStatus', description='The state of full data migration or initial full data synchronization.'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
        percent?: string(name='Percent', description='The progress of incremental data migration or synchronization.', example='95'),
        progress?: string(name='Progress', description='The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.', example='0.00RPS/(0.000MB/s)'),
        status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **Checking**: The task is in precheck.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Catched'),
      }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
      databaseCount?: int32(name='DatabaseCount', description='The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.', example='2'),
      dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}'),
      delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. Unit: milliseconds.', example='0'),
      destNetType?: string(name='DestNetType', description='The network type of the consumer client. Valid values:

*   **CLASSIC**: classic network.
*   **VPC**: VPC.', example='VPC'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the destination instance belongs.', example='140692647406****'),
        databaseName?: string(name='DatabaseName', description='The name of the database to which the objects are migrated in the destination instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The destination instance ID.', example='rm-bp1f9guj5rhzq****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the destination instance.', example='192.168.XX.XX'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.', example='ram-for-dts'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The DTS instance ID.', example='dtsnjuc14kp12u****'),
      dtsJobClass?: string(name='DtsJobClass', description='The instance class.', example='xlarge'),
      dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
      dtsJobId?: string(name='DtsJobId', description='The DTS task ID.', example='m06j1g92124****'),
      dtsJobName?: string(name='DtsJobName', description='The DTS instance name.', example='dtstest****'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-26T14:03:21Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
      etlCalculator?: string(name='EtlCalculator', description='The operator information of the ETL task.

> This parameter is returned only if you query the details of an ETL task.', example='{ "cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 }] }'),
      expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the return value of **PayType** is **PrePaid**.', example='2023-06-16T08:01:19Z'),
      finishTime?: string(name='FinishTime', description='The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-06-16T10:34:17Z'),
      groupId?: string(name='GroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
      isDemoJob?: boolean(name='IsDemoJob', description='Indicates whether the task is a subtask. Valid values:

*   **true**
*   **false**', example='false'),
      jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **online**: data migration task.
*   **SYNC**: data synchronization task.
*   **SUBSCRIBE**: change tracking task.', example='SYNC'),
      maxDu?: double(name='MaxDu', description='The maximum number of DUs.

> This parameter is supported only for serverless instances.', example='16'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad', description='Indicates whether data transformation is performed. Valid values:

*   **true**
*   **false**', example='false'),
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
      }(name='MigrationMode', description='The migration types or initial synchronization types.'),
      minDu?: double(name='MinDu', description='The minimum number of DUs.

> This parameter is supported only for serverless instances.', example='1'),
      originType?: string(name='OriginType', description='The source of the task. Valid values:

*   **PTS**
*   **DMS**
*   **DTS**', example='PTS'),
      payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.', example='PrePaid'),
      performance?: {
        flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: Mbit/s.', example='1'),
        rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data migration or synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
            checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

*   **Success**
*   **Failed**', example='Success'),
            failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            repairMethod?: string(name='RepairMethod', description='The method used to fix the precheck failure.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
        status?: string(name='Status', description='The precheck state. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Finished**: The task is complete.', example='Finished'),
      }(name='PrecheckStatus', description='The precheck state.'),
      reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
      retryState?: {
        errMsg?: string(name='ErrMsg', description='The error message returned.', example='CHECK__ERROR_SAME_OBJ'),
        jobId?: string(name='JobId', description='The task ID.', example='ta7w132u12h****'),
        maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
        module?: string(name='Module', description='The progress of the instance when DTS performs retries.', example='03'),
        retryCount?: int32(name='RetryCount', description='The number of retries.', example='5'),
        retryTarget?: string(name='RetryTarget', description='The object on which the retries are performed. Valid values:

*   **srcDB**: the source database.
*   **destDB**: the destination database.
*   **inner_module**: an internal module of DTS.', example='srcDB'),
        retryTime?: int32(name='RetryTime', description='The time that has elapsed from the point in time when the first retry starts. Unit: seconds.', example='3600'),
        retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

*   **true**
*   **false**', example='true'),
      }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
      reverseJob?: {
        appName?: string(name='AppName', description='Indicates whether the new change tracking feature is used.

> This parameter is returned only for change tracking instances of the new version.', example='new'),
        beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-15T08:25:34Z'),
        checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.', example='1616405159'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-23T07:30:31Z'),
        consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
        createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-01-12T08:34:11Z'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
          percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
          status?: string(name='Status', description='The state of the ETL task. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Finished'),
        }(name='DataEtlStatus', description='The state of the ETL task.

> This parameter collection is returned only if an ETL task is configured.'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration or initial full data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
          percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.', example='16'),
          status?: string(name='Status', description='The state of full data migration or initial full data synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
        }(name='DataInitializationStatus', description='The state of full data migration or initial full data synchronization.'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance class needs to be upgraded. Valid values:

*   **true**
*   **false**', example='true'),
          percent?: string(name='Percent', description='The progress of incremental data migration or synchronization.', example='95'),
          progress?: string(name='Progress', description='The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.', example='0.00RPS/(0.000MB/s)'),
          status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **Checking**: The task is in precheck.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task has no latency.', example='Finished'),
        }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
        databaseCount?: int32(name='DatabaseCount', description='The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.', example='2'),
        dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}'),
        delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. Unit: milliseconds.', example='0'),
        destNetType?: string(name='DestNetType', description='The network type of the consumer client. Valid values:

*   **CLASSIC**: classic network.
*   **VPC**: VPC.', example='VPC'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the destination instance belongs.', example='140692647406****'),
          databaseName?: string(name='DatabaseName', description='The name of the database to which the objects are migrated in the destination instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The destination instance ID.', example='rm-bp1f9guj5rhzq****'),
          instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the destination instance.', example='192.168.XX,XX'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.', example='ram-for-dts'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
        }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
        dtsInstanceID?: string(name='DtsInstanceID', description='The DTS instance ID.', example='dtsnjuc14kp12u****'),
        dtsJobClass?: string(name='DtsJobClass', description='The instance class.', example='xlarge'),
        dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
        dtsJobId?: string(name='DtsJobId', description='The DTS task ID.', example='m06j1g92124****'),
        dtsJobName?: string(name='DtsJobName', description='The DTS instance name.', example='dtstest****'),
        endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-26T14:03:21Z'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        etlCalculator?: string(name='EtlCalculator', description='The operator information of the ETL task.

> This parameter is returned only if you query the details of an ETL task.', example='{ "cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 }] }'),
        expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the return value of **PayType** is **PrePaid**.', example='2023-06-16T08:01:19Z'),
        finishTime?: string(name='FinishTime', description='The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2023-06-16T10:34:17Z'),
        groupId?: string(name='GroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
        isDemoJob?: boolean(name='IsDemoJob', description='Indicates whether the task is a subtask. Valid values:

*   **true**
*   **false**', example='false'),
        jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **online**: data migration task.
*   **SYNC**: data synchronization task.
*   **SUBSCRIBE**: change tracking task.', example='SYNC'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad', description='Indicates whether data transformation is performed. Valid values:

*   **true**
*   **false**', example='false'),
          dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
          dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
          structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

*   **true**
*   **false**', example='true'),
        }(name='MigrationMode', description='The migration types or initial synchronization types.'),
        originType?: string(name='OriginType', description='The source of the task. Valid values:

*   **PTS**
*   **DMS**
*   **DTS**', example='DTS'),
        payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.', example='PrePaid'),
        performance?: {
          flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: Mbit/s.', example='1'),
          rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
        }(name='Performance', description='The performance of the data migration or synchronization instance.'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
              checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
              checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

*   **Success**
*   **Failed**', example='Success'),
              failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
              repairMethod?: string(name='RepairMethod', description='The method used to fix the precheck failure.

> This parameter is returned only if the return value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
            }
          ](name='Detail', description='The result of each precheck item.'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
          status?: string(name='Status', description='The precheck state. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is in precheck.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Finished**: The task is complete.', example='Finished'),
        }(name='PrecheckStatus', description='The precheck state.'),
        reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
        retryState?: {
          errMsg?: string(name='ErrMsg', description='The error message returned.', example='CHECK__ERROR_SAME_OBJ'),
          jobId?: string(name='JobId', description='The task ID.', example='ta7w132u12h****'),
          maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
          module?: string(name='Module', description='The progress of the instance when DTS performs retries.', example='03'),
          retryCount?: int32(name='RetryCount', description='The number of retries.', example='5'),
          retryTarget?: string(name='RetryTarget', description='The object on which the retries are performed. Valid values:

*   **srcDB**: the source database.
*   **destDB**: the destination database.
*   **inner_module**: an internal module of DTS.', example='srcDB'),
          retryTime?: int32(name='RetryTime', description='The time that has elapsed from the point in time when the first retry starts. Unit: seconds.', example='3600'),
          retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

*   **true**
*   **false**', example='true'),
        }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
        reverseJob?: any(name='ReverseJob', description='The details of the data synchronization task in the reverse direction.

> This parameter is returned only for two-way data synchronization tasks.', example='****'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the source instance belongs.', example='140692647406****'),
          databaseName?: string(name='DatabaseName', description='The name of the database from which the objects are migrated in the source instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The DTS instance ID.', example='rm-bp2f3huj5rhzq****'),
          instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the source instance.', example='192.168.XX.XX'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.', example='ram-for-dts'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
        }(name='SourceEndpoint', description='The connection settings of the source instance.'),
        status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='Error message indicating task failure.', example='DTS-070211: Connect Source DB failed. cause by ****'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Whether to display upgrade specifications, return value:

- True: Yes.
- False: No.', example='true'),
          percent?: string(name='Percent', description='Initialization progress of library table structure, measured in percentage.', example='100'),
          progress?: string(name='Progress', description='The number of tables that have completed library table structure initialization.', example='1'),
          status?: string(name='Status', description='The initialization status of the library table structure includes:

- NotStarted: Not started.
- Migration: In the process of initialization.
- Failed: Initialization failed.
- Finished: Initialization completed.', example='Finished'),
        }(name='StructureInitializationStatus', description='Initialization status of library table structure.'),
        subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

> This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl', description='Indicates whether DDL statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
          dml?: boolean(name='Dml', description='Indicates whether DML statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
        }(name='SubscriptionDataType', description='The type of data for change tracking.'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
          publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
          vpcHost?: string(name='VpcHost', description='The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
        }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
        synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid', description='The Alibaba Cloud account ID.', example='191448876515****'),
            creator?: long(name='Creator', description='The operator of the tag.', example='191448876515****'),
            gmtCreate?: string(name='GmtCreate', description='The time when the task was created.', example='2022-03-16T08:01:19Z'),
            gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='2022-03-16T08:01:19Z'),
            id?: long(name='Id', description='The primary key of the table.', example='2'),
            regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
            resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsnjuc14kp12u****'),
            resourceType?: string(name='ResourceType', description='The resource type.', example='ALIYUN::DTS::INSTANCE'),
            scope?: string(name='Scope', description='Indicates whether the tag is visible. Valid values:

*   **0**: The tag is public.
*   **1**: The tag is private.', example='0'),
            srcRegion?: string(name='SrcRegion', description='The ID of the region in which the DTS task resides.

> In most cases, the ID of the region in which the destination instance resides is returned.', example='cn-hangzhou'),
            tagCategory?: string(name='TagCategory', description='The type of the tag. Valid values:

*   **System**: The tag was created by the system.
*   **Custom**: The tag was created by a user.

> By default, if the parameter is left empty, custom tags and system tags are returned.', example='System'),
            tagKey?: string(name='TagKey', description='The tag key.', example='key1'),
            tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
          }
        ](name='TagList', description='The tags of the task.'),
        taskType?: string(name='TaskType', description='The task type.', example='rds'),
      }(name='ReverseJob', description='The details of the data synchronization task in the reverse direction.

> This parameter is returned only for two-way data synchronization tasks.'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account to which the source instance belongs.', example='140692647406****'),
        databaseName?: string(name='DatabaseName', description='The name of the database from which the objects are migrated in the source instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The source instance ID.', example='rm-bp2f3huj5rhzq****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the source instance.', example='192.168.XX.XX'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

> This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        roleName?: string(name='RoleName', description='The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.', example='ram-for-dts'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='Error message indicating task failure.', example='DTS-070211: Connect Source DB failed. cause by ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Whether to display upgrade specifications, return value:
- True: Yes.
- False: No.', example='true'),
        percent?: string(name='Percent', description='Initialization progress of library table structure, measured in percentage.', example='100'),
        progress?: string(name='Progress', description='The number of tables that have completed library table structure initialization.', example='1'),
        status?: string(name='Status', description='The initialization status of the library table structure includes:
- NotStarted: Not started.
- Migration: In the process of initialization.
- Failed: Initialization failed.
- Finished: Initialization completed.', example='Finished'),
      }(name='StructureInitializationStatus', description='Initialization status of library table structure.'),
      subSyncJob?: [ any ](name='SubSyncJob', description='The information about the subtasks in the current data synchronization task.'),
      subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

> This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl', description='Indicates whether DDL statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
        dml?: boolean(name='Dml', description='Indicates whether DML statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
      }(name='SubscriptionDataType', description='The type of data for change tracking.'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
        publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
        vpcHost?: string(name='VpcHost', description='The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
      }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
      synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid', description='The Alibaba Cloud account ID.', example='191448876515****'),
          creator?: long(name='Creator', description='The operator of the tag.', example='191448876515****'),
          gmtCreate?: string(name='GmtCreate', description='The time when the task was created.', example='2022-03-16T08:01:19Z'),
          gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='2022-03-16T08:01:19Z'),
          id?: long(name='Id', description='The primary key of the table.', example='2'),
          regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsnjuc14kp12u****'),
          resourceType?: string(name='ResourceType', description='The resource type.', example='ALIYUN::DTS::INSTANCE'),
          scope?: string(name='Scope', description='Indicates whether the tag is visible. Valid values:

*   **0**: The tag is public.
*   **1**: The tag is private.', example='0'),
          srcRegion?: string(name='SrcRegion', description='The ID of the region in which the DTS task resides.

> In most cases, the ID of the region in which the destination instance resides is returned.', example='cn-hangzhou'),
          tagCategory?: string(name='TagCategory', description='The type of the tag. Valid values:

*   **System**: The tag was created by the system.
*   **Custom**: The tag was created by a user.

> By default, if the parameter is left empty, custom tags and system tags are returned.', example='System'),
          tagKey?: string(name='TagKey', description='The tag key.', example='key1'),
          tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
        }
      ](name='TagList', description='The tags of the task.'),
      taskType?: string(name='TaskType', description='The task type.', example='rds'),
    }
  ](name='SubSyncJob', description='The information about the subtasks in the current data synchronization task.'),
  subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

> This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
  subscriptionDataType?: {
    ddl?: boolean(name='Ddl', description='Indicates whether DDL statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
    dml?: boolean(name='Dml', description='Indicates whether DML statements are tracked. Valid values:

*   **true**
*   **false**', example='true'),
  }(name='SubscriptionDataType', description='The type of data for change tracking.'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
    publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
    vpcHost?: string(name='VpcHost', description='The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-vpc.aliyuncs.com:18003'),
  }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.
*   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
  taskType?: string(name='TaskType', description='The type of the task.

> In most cases, this parameter is returned together with **JobType**.', example='Distributed_xxx'),
}

model DescribeDtsJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsJobDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDtsJobDetail  DescribeDtsJobDetailRequest
  * @return DescribeDtsJobDetailResponse
 */
async function describeDtsJobDetail(request: DescribeDtsJobDetailRequest): DescribeDtsJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobsRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which the task runs.', example='dtscluster_atyl3b5214uk***', position='Query'),
  destProductType?: string(name='DestProductType', description='The type of the source database instance.', example='RDS', position='Query'),
  dtsBisLabel?: string(name='DtsBisLabel', description='The environment tag of the DTS instance. Valid values:

- **normal**
- **online**', example='normal', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsi03e3zty16i****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='qa110wq5r93hb49', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the parent task.

>  In most cases, you do not need to specify this parameter.', example='pk13r731m****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the source or target database instance corresponding to the request parameter **InstanceType**.', example='rm-bp1966yuut4w3****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the source or target database instance.', example='RDS', position='Query'),
  jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

*   **MIGRATION**: data migration. This is the default value.
*   **SYNC**: data synchronization.
*   **SUBSCRIBE**: change tracking.', example='MIGRATION', position='Query'),
  orderColumn?: string(name='OrderColumn', description='The basis on which the returned DTS tasks are sorted. Valid values:

*   **CreateTime**: sorts the DTS tasks based on the points in time when the DTS tasks are created.
*   **FinishTime**: sorts the DTS tasks based on the points in time when the DTS tasks are complete.
*   **duLimit** sorts the DTS tasks based on the upper limits on DTS Units (DUs) that the DTS tasks can use. This option applies only to the DTS tasks that are run on a DTS dedicated cluster.

>  You can also set the **OrderDirection** parameter to specify whether to sort the DTS tasks in ascending or descending order.', example='CreateTime', position='Query'),
  orderDirection?: string(name='OrderDirection', description='The order in which the returned DTS tasks are sorted. Valid values:

*   **ASC**: sorts the DTS tasks in ascending order. This is the default value.
*   **DESC**: sorts the DTS tasks in descending order.', example='ASC', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **20**, **30**, **50**, and **100**. Default value: **20**.', example='30', minimum=1, maximum=1000, position='Query'),
  params?: string(name='Params', description='The content of the query condition.

>  You must set the **Type** parameter to specify the type of the query condition.', example='dtspk3f13r731m****', position='Query'),
  region?: string(name='Region', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='This parameter is deprecated.

Valid values:

*   cn-hangzhou
*   cn-shanghai
*   cn-beijing
*   cn-guangzhou
*   cn-shenzhen
*   cn-chengdu
*   cn-heyuan
*   cn-hongkong
*   cn-qingdao
*   cn-zhangbei
*   cn-zhangjiakou
*   us-east-1
*   us-west-1
*   cn-hangzhou-finance
*   cn-shanghai-finance
*   cn-shanghai-finance-1
*   cn-shenzhen-finance
*   cn-shenzhen-finance-1
*   cn-beijing-finance-1
*   cn-huhehaote
*   cn-north-2-gov-1
*   eu-central-1
*   eu-west-1
*   me-central-1
*   me-east-1
*   ap-northeast-1
*   ap-northeast-2
*   ap-southeast-1
*   ap-southeast-2
*   ap-southeast-3
*   ap-southeast-5
*   ap-southeast-6
*   ap-southeast-7
*   cn-wulanchabu
*   cn-zhengzhou-jva
*   cn-wuhan-lr', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  srcProductType?: string(name='SrcProductType', description='The type of the destination database instance.', example='RDS', position='Query'),
  status?: string(name='Status', description='The state of the DTS task.

Valid values for a data migration task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Migrating**: The task is in progress.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a data synchronization task:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **NotConfigured**: The task is not configured.
*   **Initializing**: The task is being initialized.
*   **InitializeFailed**: Initialization failed.
*   **Synchronizing**: The task is in progress.
*   **Failed**: The task failed.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is complete.
*   **Retrying**: The task is being retried.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.

Valid values for a change tracking task:

*   **NotConfigured**: The task is not configured.
*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **PreCheckPass**: The task passed the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Retrying**: The task is being retried.
*   **Abnormal**: The task is not running as expected.
*   **Upgrade**: The task is being upgraded.
*   **Locked**: The task is locked.
*   **Downgrade**: The task is being downgraded.', example='Migrating', position='Query'),
  tags?: string(name='Tags', description='The tags of the DTS task to be queried. Specify tags in the JSON format.

>  You can call the **ListTagResources** operation to query the tag key and tag value.', example='[     {         \\"key\\": \\"testK\\",         \\"value\\": \\"testV\\"     }  ]', position='Query'),
  type?: string(name='Type', description='The type of the query condition. Valid values:

*   **instance**: queries DTS tasks based on the ID of a DTS instance.
*   **name**: queries DTS tasks based on the name of a DTS instance. Fuzzy match is supported.
*   **srcRds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the source instance of a DTS task.
*   **rds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the destination instance of a DTS task.

>  You must set the **Params** parameter to specify the content of the query condition.', example='instance', position='Query'),
  withoutDbList?: boolean(name='WithoutDbList', description='Specifies whether to skip the **DbObject** parameter in the response. The DbObject parameter specifies the objects of the data migration, data synchronization, or change tracking task. Valid values:

- **true**: does not return **DbObject**.
- **false**: returns **DbObject**. If you set this parameter to false, the response time is shortened.', example='true', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='false', position='Query'),
}

model DescribeDtsJobsResponseBody = {
  dtsJobList?: [ 
    {
      appName?: string(name='AppName', description='Indicates whether the **new** change tracking feature is used.

>  This parameter is returned only for change tracking instances of the new version.', example='new'),
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-15T08:25:34Z'),
      checkpoint?: string(name='Checkpoint', description='The start offset of incremental data synchronization. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1616899019'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-23T07:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114...:dts******'),
      cpuUsage?: string(name='CpuUsage', description='The CPU utilization of the instance. Unit: percentage.', example='1'),
      createTime?: string(name='CreateTime', description='The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
      dataCloudStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='framework: DTS-31009: In process of processing data ****'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true** 
- **false**', example='false'),
        percent?: string(name='Percent', description='The progress of the task. Unit: percentage.', example='85'),
        progress?: string(name='Progress', description='The number of tables that have been migrated.', example='1'),
        status?: string(name='Status', description='The state of the task. For more information about the valid values, see the description of the request parameter **Status**.', example='Migrating'),
      }(name='DataCloudStatus', description='The state of the physical gateway-based migration task.'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='The task has failed for a long time and cannot be recovered.'),
        percent?: string(name='Percent', description='The progress of the ETL task.', example='95'),
        progress?: string(name='Progress', description='The number of records that have been processed by the ETL task.', example='0/0'),
        status?: string(name='Status', description='The state of the ETL task. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task is not delayed.', example='Finished'),
      }(name='DataEtlStatus', description='The state of the extract, transform, and load (ETL) task. Valid values:

>  This parameter collection is returned only if an ETL task is configured.'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of full data synchronization. This is expressed as a percentage.', example='100'),
        progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='44755'),
        status?: string(name='Status', description='The state of full data synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.', example='Finished'),
      }(name='DataInitializationStatus', description='The state of full data synchronization.'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration or synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

*   **true**: yes
*   **false**: no

>  To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.', example='true'),
        percent?: string(name='Percent', description='The progress of incremental data migration or synchronization.', example='95'),
        progress?: string(name='Progress', description='The number of records that have been migrated or synchronized during incremental data migration or synchronization.', example='0/0'),
        status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

*   **NotStarted**: The task is not started.
*   **Migrating**: The task is in progress.
*   **Failed**: The task failed.
*   **Finished**: The task is complete.
*   **Catched**: The task is not delayed.', example='Catched'),
      }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
      dbObject?: string(name='DbObject', description='The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see "Objects of DTS tasks".', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
      dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which a DTS task runs.', example='dtscluster_ft7y3**********'),
      delay?: long(name='Delay', description='The latency of incremental data synchronization. Unit: seconds.', example='0'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1imrtn6fq7h****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database.

>  This parameter is returned only if the **EngineName** parameter of the destination instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

*   **DISABLE**: SSL encryption is disabled.
*   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
*   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
*   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      dtsBisLabel?: string(name='DtsBisLabel', description='The environment tag of the DTS instance. Valid values:

- **normal**
- **online**', example='normal'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data synchronization instance.', example='dtsi03e3zty16i****'),
      dtsJobClass?: string(name='DtsJobClass', description='The instance class.

>  For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).', example='large'),
      dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. The value is **Reverse**.', example='Forward'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the data synchronization task.', example='i03e3zty16i****'),
      dtsJobName?: string(name='DtsJobName', description='The name of the data synchronization task.', example='RDS_TO_RDS_MIGRATION'),
      duRealUsage?: string(name='DuRealUsage', description='The DTS Units (DUs) usage of a task in a DTS dedicated cluster.', example='12.0%'),
      duUsage?: long(name='DuUsage', description='The number of DUs that have been used.', example='15'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-26T14:03:21Z'),
      errorDetails?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code returned.', example='DTS-31009'),
          helpUrl?: string(name='HelpUrl', description='The URL of the documentation.', example='https://**.ali**.com/**'),
        }
      ](name='ErrorDetails', description='The error message returned.'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
      etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
      expireTime?: string(name='ExpireTime', description='The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

>  This parameter is returned only if the value of the **PayType** parameter is **PrePaid**.', example='2022-03-16T08:01:19Z'),
      fullDataCheckStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of the full data verification task. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The progress of the full data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
        status?: string(name='Status', description='The state of the full data verification task. Valid values:

- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed. 
- **Finished**: The verification is complete.', example='Checking'),
      }(name='FullDataCheckStatus', description='The state information about the full data verification task.'),
      incDataCheckStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of the incremental data verification task. Unit: percentage.', example='95'),
        progress?: string(name='Progress', description='The progress of the incremental data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
        status?: string(name='Status', description='The state of the incremental data verification task. Valid values:

- **Catched**: The verification is delayed. 
- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed.', example='Checking'),
      }(name='IncDataCheckStatus', description='The state information about the incremental data verification task.'),
      jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

- **MIGRATION**: data migration task 
- **SYNC**: data synchronization task 
- **SUBSCRIBE**: change tracking task', example='MIGRATION'),
      maxDu?: double(name='MaxDu', description='Upper limit of DU.

> Only supported by Serverless instances.', example='16'),
      memUsage?: string(name='MemUsage', description='The memory that has been used. Unit: MB.', example='500'),
      migrationErrCode?: string(name='MigrationErrCode', description='The error code.', example='dts.retry.err.0046'),
      migrationErrHelpDocId?: string(name='MigrationErrHelpDocId', description='The ID of the error code-related documentation.', example='462133'),
      migrationErrHelpDocKey?: string(name='MigrationErrHelpDocKey', description='The key of the error code-related documentation.', example='DTS-RETRY-ERR-0046'),
      migrationErrMsg?: string(name='MigrationErrMsg', description='The error message.', example='dts.retry.err.0046.msg'),
      migrationErrType?: string(name='MigrationErrType', description='The type of the error code.', example='ForeignKey'),
      migrationErrWorkaround?: string(name='MigrationErrWorkaround', description='The solution to the error.', example='dts.retry.err.0046.workaround'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        fullDataCheck?: boolean(name='FullDataCheck', description='Indicates whether full data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
        incDataCheck?: boolean(name='IncDataCheck', description='Indicates whether incremental data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or schema synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      }(name='MigrationMode', description='The migration or synchronization modes.'),
      minDu?: double(name='MinDu', description='Lower limit of DU.

> Only supported by Serverless instances.', example='1'),
      originType?: string(name='OriginType', description='The source of the task. Valid values:

*   **PTS**
*   **DMS**
*   **DTS**', example='DTS'),
      payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
      performance?: {
        flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: MB/s.', example='1'),
        rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data migration or synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
            checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

*   **Success**
*   **Failed**', example='Success'),
            failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        errorMessage?: string(name='ErrorMessage', description='The cause of the precheck failure.', example='CHECK__ERROR_SAME_OBJ.'),
        percent?: string(name='Percent', description='The precheck progress. This is expressed as a percentage.', example='100'),
        status?: string(name='Status', description='The precheck status. Valid values:

*   **NotStarted**
*   **Suspending**:
*   **Checking**
*   **Failed**
*   **Finished**', example='Finished'),
      }(name='PrecheckStatus', description='The precheck state.'),
      reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
      resourceGroupDisplayName?: string(name='ResourceGroupDisplayName', description='The name of the resource group.', example='default resource group'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
      retryState?: {
        errMessage?: string(name='ErrMessage', description='The error message returned if these retries failed.', example='Unexpected error'),
        jobId?: string(name='JobId', description='The task ID.', example='bi6e22ay243****'),
        maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
        migrationErrCode?: string(name='MigrationErrCode', description='The error code.', example='dts.retry.err.0046'),
        migrationErrHelpDocId?: string(name='MigrationErrHelpDocId', description='The ID of the error code-related documentation.', example='462133'),
        migrationErrHelpDocKey?: string(name='MigrationErrHelpDocKey', description='The key of the error code-related documentation.', example='DTS-RETRY-ERR-0046'),
        migrationErrMsg?: string(name='MigrationErrMsg', description='The error message.', example='dts.retry.err.0046.msg'),
        migrationErrType?: string(name='MigrationErrType', description='The type of the error code.', example='ForeignKey'),
        migrationErrWorkaround?: string(name='MigrationErrWorkaround', description='The solution to the error.', example='dts.retry.err.0046.workaround'),
        module?: string(name='Module', description='The progress of the instance when DTS retries.', example='03'),
        retryCount?: int32(name='RetryCount', description='The number of retries that have been performed.', example='5'),
        retryTarget?: string(name='RetryTarget', description='The object on which these retries are performed. Valid values:

- **srcDB**: the source database 
- **destDB**: the destination database 
- **inner_module**: an internal module of DTS', example='srcDB'),
        retryTime?: int32(name='RetryTime', description='The time that has elapsed from the time when the first retry starts. Unit: seconds.', example='3600'),
        retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

- **true**
- **false**', example='false'),
      }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint', description='The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1616980369'),
        cpuUsage?: string(name='CpuUsage', description='The CPU utilization of the instance. Unit: percentage.', example='90'),
        createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2022-03-16T08:01:19Z'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been synchronized during initial full data synchronization.', example='43071'),
          status?: string(name='Status', description='The state of initial full data synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='DataInitializationStatus', description='The state of initial full data synchronization.'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true**
- **false**

> To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.', example='true'),
          percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during incremental data migration or synchronization.', example='20001'),
          status?: string(name='Status', description='The state of incremental data synchronization.', example='Migrating'),
        }(name='DataSynchronizationStatus', description='The state of incremental data synchronization.'),
        dbObject?: string(name='DbObject', description='The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
        dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the DTS dedicated cluster on which a DTS task runs.', example='dtscluster_dpwl3**********'),
        delay?: long(name='Delay', description='The latency of incremental data synchronization. Unit: seconds.', example='0'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the synchronized objects in the destination instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1162kryivb8****'),
          instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the destination instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
        }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
        dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data synchronization instance.', example='dtsi03e3zty16i****'),
        dtsJobClass?: string(name='DtsJobClass', description='The instance class. 

> For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).', example='large'),
        dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. **Reverse** is returned.', example='Reverse'),
        dtsJobId?: string(name='DtsJobId', description='The ID of the synchronization task.', example='i03e3zty16i****'),
        dtsJobName?: string(name='DtsJobName', description='The name of the data synchronization task.', example='RDS_TO_RDS_MIGRATION'),
        duUsage?: long(name='DuUsage', description='The number of DUs that have been used.', example='15'),
        errorDetails?: [ 
          {
            errorCode?: string(name='ErrorCode', description='The error code returned.', example='DTS-31009'),
            helpUrl?: string(name='HelpUrl', description='The URL of the documentation.', example='https://**.ali**.com/**'),
          }
        ](name='ErrorDetails', description='The error message returned.'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
        etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
        expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC. 

> This parameter is returned only if the returned value of **PayType** is **PrePaid**.', example='2023-03-16T08:01:19Z'),
        fullDataCheckStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of the full data verification task. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The progress of the full data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
          status?: string(name='Status', description='The state of the full data verification task. Valid values:

- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed. 
- **Finished**: The verification is complete.', example='Checking'),
        }(name='FullDataCheckStatus', description='The state information about the full data verification task.'),
        incDataCheckStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of the incremental data verification task. Unit: percentage.', example='95'),
          progress?: string(name='Progress', description='The progress of the incremental data verification task.', example='1 rows/s (row: 5/5, table: 1/1)'),
          status?: string(name='Status', description='The state of the incremental data verification task. Valid values:

- **Catched**: The verification is delayed. 
- **NotStarted**: The verification is not started. 
- **Checking**: The verification is in progress. 
- **Failed**: The verification failed.', example='Checking'),
        }(name='IncDataCheckStatus', description='The state information about the incremental data verification task.'),
        maxDu?: double(name='MaxDu', description='Upper limit of DU.

> Only supported by Serverless instances.', example='16'),
        memUsage?: string(name='MemUsage', description='The memory that has been used. Unit: MB.', example='500'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization', description='Indicates whether initial full data synchronization is performed. Valid values:

-  **true**
-  **false**', example='true'),
          dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data synchronization is performed. Valid values:
-  **true**
-  **false**', example='true'),
          fullDataCheck?: boolean(name='FullDataCheck', description='Indicates whether full data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
          incDataCheck?: boolean(name='IncDataCheck', description='Indicates whether incremental data verification is performed. Valid values:
-  **true**: yes
-  **false**: no', example='true'),
          structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether initial schema synchronization is performed. Valid values:
-  **true**
-  **false**', example='true'),
        }(name='MigrationMode', description='The initial synchronization types.'),
        minDu?: double(name='MinDu', description='Lower limit of DU.

> Only supported by Serverless instances.', example='1'),
        payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

- **PrePaid**: subscription
- **PostPaid**: pay-as-you-go', example='PostPaid'),
        performance?: {
          flow?: string(name='Flow', description='The size of data that is synchronized per second. Unit: MB/s.', example='1'),
          rps?: string(name='Rps', description='The number of times that SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
        }(name='Performance', description='The performance of the data synchronization instance.'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
              checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
              checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

- **Success**
- **Failed**', example='Success'),
              failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
              repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
            }
          ](name='Detail', description='The result of each precheck item.'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the precheck failed.', example='CHECK__ERROR_SAME_OBJ.'),
          percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
          status?: string(name='Status', description='The precheck state. Valid values:

- **NotStarted**: The precheck is not started. 
- **Suspending**: The precheck is paused. 
- **Checking**: The precheck is in progress. 
- **Failed**: The precheck failed. 
- **Finished**: The precheck is complete.', example='Finished'),
        }(name='PrecheckStatus', description='The precheck state.'),
        reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1imrtn6fq7h****'),
          instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the source instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
        }(name='SourceEndpoint', description='The connection settings of the source instance.'),
        status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Synchronizing'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
          percent?: string(name='Percent', description='The progress of initial schema synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of tables that have been synchronized during initial schema synchronization.', example='1'),
          status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='StructureInitializationStatus', description='The state of initial schema synchronization.'),
      }(name='ReverseJob', description='The details of the data synchronization task in the reverse direction. 

> This parameter is returned only for two-way data synchronization tasks.'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1162kryivb8****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The port number of the source instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICAT**E: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Migrating'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration or initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema migration or initial schema synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.', example='1'),
        status?: string(name='Status', description='The state of schema migration or initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
      }(name='StructureInitializationStatus', description='The state of schema migration or initial schema synchronization.'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='testkey'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='testvalue'),
        }
      ](name='TagList', description='The tags of the task.'),
    }
  ](name='DtsJobList', description='The Data Transmission Service (DTS) tasks and the details of each task.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.

>  For example, if the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  etlDemoList?: [ 
    {
      appName?: string(name='AppName', description='Indicates whether the **new** change tracking feature is used. 

> This parameter is returned only for change tracking instances of the new version.', example='new'),
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-15T08:25:34Z'),
      checkpoint?: string(name='Checkpoint', description='The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1616899019'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-23T07:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information in the following format: <IP address of the downstream client>:<Random ID generated by DTS>.', example='114...:dts******'),
      createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:s*sZ format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the ETL task failed.', example='The task has failed for a long time and cannot be recovered.'),
        percent?: string(name='Percent', description='The progress of the ETL task. Unit: percentage.', example='95'),
        progress?: string(name='Progress', description='The number of entries that have been processed by the ETL task.', example='0/0'),
        status?: string(name='Status', description='The state of the ETL task. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete. 
- **Catched**: The task is not delayed.', example='Finished'),
      }(name='DataEtlStatus', description='The state of the ETL task. 

> This parameter collection is returned only if an ETL task is configured.'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration or initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of full data migration or initial full data synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during full data migration or initial full data synchronization.', example='44755'),
        status?: string(name='Status', description='The state of full data migration or initial full data synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
      }(name='DataInitializationStatus', description='The state of full data migration or initial full data synchronization.'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration or synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
        needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true**
- **false**

> To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.', example='true'),
        percent?: string(name='Percent', description='The progress of incremental data migration or synchronization. Unit: percentage.', example='95'),
        progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during incremental data migration or synchronization.', example='0/0'),
        status?: string(name='Status', description='The state of incremental data migration or synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete. 
- **Catched**: The task is not delayed.', example='Catched'),
      }(name='DataSynchronizationStatus', description='The state of incremental data migration or synchronization.'),
      dbObject?: string(name='DbObject', description='The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
      delay?: long(name='Delay', description='The latency of incremental data migration or synchronization. 

> If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.', example='0'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database that contains the migrated objects in the destination instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1imrtn6fq7h****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The port number of the destination instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsi03e3zty16i****'),
      dtsJobClass?: string(name='DtsJobClass', description='The instance class. 

> For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).', example='large'),
      dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. Valid values:

- **Forward**
- **Reverse**

> This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.', example='Forward'),
      dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****'),
      dtsJobName?: string(name='DtsJobName', description='The name of the data migration, data synchronization, or change tracking task.', example='RDS_TO_RDS_MIGRATION'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-26T14:03:21Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
      etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
      expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> This parameter is returned only if the returned value of **PayType** is **PrePaid**.', example='2022-03-16T08:01:19Z'),
      jobType?: string(name='JobType', description='The type of the DTS task. Valid values:

- **MIGRATION**: data migration task 
- **SYNC**: data synchronization task 
- **SUBSCRIBE**: change tracking task', example='MIGRATION'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
      }(name='MigrationMode', description='The migration types or initial synchronization types.'),
      originType?: string(name='OriginType', description='The source of the task.
- **PTS**
- **DMS**
- **DTS**', example='DTS'),
      payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

- **PrePaid**: subscription 
- **PostPaid**: pay-as-you-go', example='PrePaid'),
      performance?: {
        flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: MB/s.', example='1'),
        rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data migration or synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
            checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

- **Success**
- **Failed**', example='Success'),
            failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the precheck failed.', example='CHECK__ERROR_SAME_OBJ.'),
        percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
        status?: string(name='Status', description='The precheck state. Valid values:

- **NotStarted**: The precheck is not started. 
- **Suspending**: The precheck is paused. 
- **Checking**: The precheck is in progress. 
- **Failed**: The precheck failed. 
- **Finished**: The precheck is complete.', example='Finished'),
      }(name='PrecheckStatus', description='The precheck state.'),
      reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
      resourceGroupDisplayName?: string(name='ResourceGroupDisplayName', description='The name of the resource group.', example='default resource group'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****'),
      retryState?: {
        errMessage?: string(name='ErrMessage', description='The error message returned if these retries failed.', example='Unexpected error'),
        jobId?: string(name='JobId', description='The task ID.', example='bi6e22ay243****'),
        maxRetryTime?: int32(name='MaxRetryTime', description='The maximum duration of a retry. Unit: seconds.', example='7200'),
        module?: string(name='Module', description='The progress of the instance when DTS retries.', example='03'),
        retryCount?: int32(name='RetryCount', description='The number of retries that have been performed.', example='5'),
        retryTarget?: string(name='RetryTarget', description='The object on which these retries are performed. Valid values:

- **srcDB**: the source database 
- **destDB**: the destination database 
- **inner_module**: an internal module of DTS', example='srcDB'),
        retryTime?: int32(name='RetryTime', description='The time that has elapsed from the time when the first retry starts. Unit: seconds.', example='3600'),
        retrying?: boolean(name='Retrying', description='Indicates whether the task is being retried. Valid values:

- **true**
- **false**', example='false'),
      }(name='RetryState', description='The information about the retries performed by DTS due to an exception.'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint', description='The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1616980369'),
        createTime?: string(name='CreateTime', description='The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-03-16T08:01:19Z'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
          percent?: string(name='Percent', description='The progress of initial full data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been synchronized during initial full data synchronization.', example='43071'),
          status?: string(name='Status', description='The state of initial full data synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='DataInitializationStatus', description='The state of initial full data synchronization.'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='The task has failed for a long time and cannot be recovered.'),
          needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether the instance needs to be upgraded. Valid values:

- **true**
- **false**

> To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.', example='true'),
          percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of entries that have been migrated or synchronized during incremental data migration or synchronization.', example='20001'),
          status?: string(name='Status', description='The state of incremental data synchronization.', example='Migrating'),
        }(name='DataSynchronizationStatus', description='The state of incremental data synchronization.'),
        dbObject?: string(name='DbObject', description='The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.', example='{"dtstestdata": { "name": "dtstestdata", "all": true }}'),
        delay?: long(name='Delay', description='The latency of incremental data synchronization. Unit: seconds.', example='0'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the synchronized objects in the destination instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the destination instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1162kryivb8****'),
          instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the destination instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the destination instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
        }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
        dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the data synchronization instance.', example='dtsi03e3zty16i****'),
        dtsJobClass?: string(name='DtsJobClass', description='The instance class. 

> For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).', example='large'),
        dtsJobDirection?: string(name='DtsJobDirection', description='The synchronization direction. **Reverse** is returned.', example='Reverse'),
        dtsJobId?: string(name='DtsJobId', description='The ID of the synchronization task.', example='i03e3zty16i****'),
        dtsJobName?: string(name='DtsJobName', description='The name of the data synchronization task.', example='RDS_TO_RDS_MIGRATION'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
        etlSafeCheckpoint?: string(name='EtlSafeCheckpoint', description='The checkpoint of the ETL task.', example='1610540493'),
        expireTime?: string(name='ExpireTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the* yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC. 

> This parameter is returned only if the returned value of **PayType** is **PrePaid**.', example='2022-03-16T08:01:19Z'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration or initial full data synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
          dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration or synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
          structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration or initial schema synchronization is performed. Valid values:

- **true**
- **false**', example='true'),
        }(name='MigrationMode', description='The migration types or initial synchronization types.'),
        payType?: string(name='PayType', description='The billing method of the DTS instance. Valid values:

- **PrePaid**: subscription
- **PostPaid**: pay-as-you-go', example='PostPaid'),
        performance?: {
          flow?: string(name='Flow', description='The size of data that is migrated or synchronized per second. Unit: MB/s.', example='1'),
          rps?: string(name='Rps', description='The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
        }(name='Performance', description='The performance of the data migration or synchronization instance.'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
              checkItemDescription?: string(name='CheckItemDescription', description='The description of the precheck item.', example='CHECK_CONN_SRC_DETAIL'),
              checkResult?: string(name='CheckResult', description='The precheck result. Valid values:

- **Success**
- **Failed**', example='Success'),
              failedReason?: string(name='FailedReason', description='The error message returned if the task failed to pass the precheck. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
              repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure. 

> This parameter is returned only if the returned value of **CheckResult** is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
            }
          ](name='Detail', description='The result of each precheck item.'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if the precheck failed.', example='CHECK__ERROR_SAME_OBJ'),
          percent?: string(name='Percent', description='The precheck progress. Unit: percentage.', example='100'),
          status?: string(name='Status', description='The precheck state. Valid values:

- **NotStarted**: The precheck is not started. 
- **Suspending**: The precheck is paused. 
- **Checking**: The precheck is in progress. 
- **Failed**: The precheck failed. 
- **Finished**: The precheck is complete.', example='Finished'),
        }(name='PrecheckStatus', description='The precheck state.'),
        reserved?: string(name='Reserved', description='The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).', example='{\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
          engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
          instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1imrtn6fq7h****'),
          instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
          ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
          oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
          port?: string(name='Port', description='The port number of the source instance.', example='3306'),
          region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
          userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
        }(name='SourceEndpoint', description='The connection settings of the source instance.'),
        status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Synchronizing'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage', description='The error message returned if initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
          percent?: string(name='Percent', description='The progress of initial schema synchronization. Unit: percentage.', example='100'),
          progress?: string(name='Progress', description='The number of tables that have been synchronized during initial schema synchronization.', example='1'),
          status?: string(name='Status', description='The state of initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
        }(name='StructureInitializationStatus', description='The state of initial schema synchronization.'),
      }(name='ReverseJob', description='The details of the data synchronization task in the reverse direction. 

> This parameter is returned only for two-way data synchronization tasks.'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database that contains the objects to be migrated from the source instance.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database engine of the source instance.', example='MySQL'),
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1162kryivb8****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        ip?: string(name='Ip', description='The endpoint of the source instance.', example='172.16.88.***'),
        oracleSID?: string(name='OracleSID', description='The SID of the Oracle database. 

> This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.', example='testsid'),
        port?: string(name='Port', description='The port number of the source instance.', example='3306'),
        region?: string(name='Region', description='The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='Indicates whether SSL encryption is enabled. Valid values:

- **DISABLE**: SSL encryption is disabled. 
- **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
- **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
- **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.', example='DISABLE'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.', example='Migrating'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration or initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema migration or initial schema synchronization. Unit: percentage.', example='100'),
        progress?: string(name='Progress', description='The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.', example='1'),
        status?: string(name='Status', description='The state of schema migration or initial schema synchronization. Valid values:

- **NotStarted**: The task is not started. 
- **Migrating**: The task is in progress. 
- **Failed**: The task failed. 
- **Finished**: The task is complete.', example='Finished'),
      }(name='StructureInitializationStatus', description='The state of schema migration or initial schema synchronization.'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='testkey'),
          tagValue?: string(name='TagValue', description='The tag value.', example='testvalue'),
        }
      ](name='TagList', description='The tags of the task.'),
    }
  ](name='EtlDemoList', description='The DTS tasks and the details of each task.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='2'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of DTS tasks that meet the query condition.', example='15'),
}

model DescribeDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsJobsResponseBody(name='body'),
}

/**
  * @description ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Dts\\&api=DescribeDtsJobs\\&type=RPC\\&version=2020-01-01)
  * @param request  the request parameters of DescribeDtsJobs  DescribeDtsJobsRequest
  * @return DescribeDtsJobsResponse
 */
async function describeDtsJobs(request: DescribeDtsJobsRequest): DescribeDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsServiceLogRequest {
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='c1yr56py103****', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. You can call the [DescribePreCheckStatus](https://help.aliyun.com/document_detail/209718.html) operation to query the execution time of the subtasks.

> *   To obtain the logs that are generated for DTS subtasks within a specific period of time, you can call the [DescribePreCheckStatus](https://help.aliyun.com/document_detail/209718.html) operation to query the execution time of the subtasks.
>*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.', example='1620897227000', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that is passed to specify the query content.

>  Fuzzy match is used and the keyword is case-sensitive.', example='state = IDLE', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0 and less than or equal to the maximum value supported by the integer data type. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of log entries to return on each page. Valid values: **20**, **50**, **100**, **500**, and **1000**. Default value: **20**.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

> *   To obtain the logs that are generated for Data Transmission Service (DTS) subtasks within a specific period of time, you can call the [DescribePreCheckStatus](https://help.aliyun.com/document_detail/209718.html) operation to query the execution time of the subtasks.
>*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.', example='1620896327000', position='Query'),
  status?: string(name='Status', description='The log level. Separate multiple log levels with commas (,). Valid values:

*   **NORMAL**: displays the logs that are generated when the DTS task runs as expected.
*   **WARN**: displays the logs about severe issues that stop the DTS task from running.
*   **ERROR**: displays the logs about unexpected issues that stop specific processes form running.', example='NORMAL,WARN,ERROR', position='Query'),
  subJobType?: string(name='SubJobType', description='The type of a DTS subtask. Valid values:

*   **DATA_LOAD**: full migration or full synchronization
*   **ONLINE_WRITER**: incremental migration
*   **SYNC_WRITER**: incremental synchronization', example='SYNC_WRITER', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be: - **true**: Yes. - **false**: No.', example='true', position='Query'),
}

model DescribeDtsServiceLogResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed soon.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code that is returned.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of log entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F87DF250-952C-47FE-8A02-69414FAA****'),
  serviceLogContexts?: [ 
    {
      context?: string(name='Context', description='The log content.', example='Statistics: generator = 369173; collector = 470109; replicator = 2470; ping = 2/2/2; execute = 29/29/29; rt = 29/29/29; state = IDLE; queries = -1; exceptions = {connects = 0, replicates = 0}; infos = {}'),
      state?: string(name='State', description='The log level.', example='NORMAL'),
      time?: string(name='Time', description='The time when the logs were collected. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2021-05-13T09:13:39.443+00:00'),
    }
  ](name='ServiceLogContexts', description='The details of the logs.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of logs that meet the query conditions.', example='35'),
}

model DescribeDtsServiceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDtsServiceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDtsServiceLog  DescribeDtsServiceLogRequest
  * @return DescribeDtsServiceLogResponse
 */
async function describeDtsServiceLog(request: DescribeDtsServiceLogRequest): DescribeDtsServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsServiceLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndpointSwitchStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  taskId: string(name='TaskId', description='The task ID, which is returned after you call the [SwitchSynchronizationEndpoint](https://help.aliyun.com/document_detail/201858.html) operation.

This parameter is required.', example='11****', position='Query'),
}

model DescribeEndpointSwitchStatusResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='This parameter is no longer available.', example='400'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0DD6B201-604B-4CAB-B6A8-4B2953B5****'),
  status?: string(name='Status', description='The status of the task. Valid values:

*   **NotStarted**: The task is not started.
*   **Initializing**: The task is being initialized.
*   **Switching**: The task is running.
*   **Failed**: The task failed.
*   **Finished**: The task is completed.', example='Finished'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeEndpointSwitchStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndpointSwitchStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEndpointSwitchStatus  DescribeEndpointSwitchStatusRequest
  * @return DescribeEndpointSwitchStatusResponse
 */
async function describeEndpointSwitchStatus(request: DescribeEndpointSwitchStatusRequest): DescribeEndpointSwitchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndpointSwitchStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEtlJobLogsRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the ETL task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='l5512es7w15****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the available Alibaba Cloud regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeEtlJobLogsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', description='The error code. This example indicates that the specified ETL task ID is invalid.', example='InvalidJobId'),
  errMessage?: string(name='ErrMessage', description='The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may be deleted.', example='The specified dts job id %s is not exists.'),
  etlRunningLogs?: [ 
    {
      content?: string(name='Content', description='The state of the ETL task.', example='Starting DTS-ETL...'),
      contentKey?: string(name='ContentKey', description='The module for which the logs are generated, such as the conversion module of ETL tasks.', example='DTS-ETL'),
      etlId?: string(name='EtlId', description='The ID of the ETL task.', example='u**********5'),
      logDatetime?: string(name='LogDatetime', description='The time when the log was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1637306503000'),
      status?: string(name='Status', description='The log level. Valid values: ERROR, WARN, INFO, and DEBUG.', example='INFO'),
      userId?: string(name='UserId', description='The ID of the user.', example='121323*******454512'),
    }
  ](name='EtlRunningLogs', description='The logs of ETL tasks.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='224DB9F7-3100-4899-AB9C-C938BCCB43E7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. If the call failed, false is returned.', example='true'),
}

model DescribeEtlJobLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEtlJobLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEtlJobLogs  DescribeEtlJobLogsRequest
  * @return DescribeEtlJobLogsResponse
 */
async function describeEtlJobLogs(request: DescribeEtlJobLogsRequest): DescribeEtlJobLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEtlJobLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFullProcessListRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.

This parameter is required.', example='i03e3zty16i****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Specifies whether to query only zero-extract, transform, load (ETL) integration tasks. Valid values:

*   **true**: yes.
*   **false**: no.', example='true', position='Query'),
}

model DescribeFullProcessListResponseBody = {
  code?: string(name='Code', description='The error code.', example='200'),
  configList?: map[string]any(name='ConfigList', description='The throttling configuration. Valid values:

*   **dts.datamove.blaster.qps.max**: The rate at which queries are made to the source database per second.
*   **dts.datamove.source.rps.max**: the number of rows that are fully synchronized or migrated per second.
*   **dts.datamove.source.bps.max**: the amount of data processed per second for full synchronization or migration. Unit: Byte/s.

> 

*   When you set the **JobCode** parameter to **03**, you need to specify the **EnableLimit** parameter as **true**. Otherwise, the configuration cannot take effect.

*   When you set the **JobCode** parameter to **04** or **07**, you only need to specify the **dts.datamove.source.rps.max** and **dts.datamove.source.bps.max** parameters.
*   A value of \\*\\*-1\\*\\* indicates no rate limit.', example='{
      "dts.datamove.source.rps.max": 5000,
      "dts.datamove.source.bps.max": 10485760
}'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='i03e3zty16i****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  The request parameter **DtsJobId** is invalid if **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned when the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned when the request failed.', example='The request processing has failed due to some unknown error.'),
  fullProcessList?: [ 
    {
      detail?: string(name='Detail', description='Details', example='{}'),
      exception?: string(name='Exception', description='The abnormal status of the task. Valid values:**notstarted**. -**checking**. -**failed**. -**finished**.', example='notstarted'),
      processName?: string(name='ProcessName', description='The name of the process.', example='universer'),
      processType?: string(name='ProcessType', description='The type of the process. Valid values:

*   **1**: trusted
*   **2**: suspicious
*   **3**: malicious', example='1'),
      runningSQL?: string(name='RunningSQL', description='SQL that is running', example='test'),
      state?: string(name='State', description='The log status.', example='running'),
      taskID?: string(name='TaskID', description='The ID of the task.', example='TaskD4E5F6'),
      time?: long(name='Time', description='The time when the logs were collected. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='1729650129452'),
    }
  ](name='FullProcessList', description='The details of the GA instances.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='C166D79D-436B-45F0-B5A5-25E1959F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DescribeFullProcessListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFullProcessListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFullProcessList  DescribeFullProcessListRequest
  * @return DescribeFullProcessListResponse
 */
async function describeFullProcessList(request: DescribeFullProcessListRequest): DescribeFullProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFullProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGadInstancesRequest {
  instanceName?: string(name='InstanceName', example='test', position='Query'),
  masterDbInstanceId?: string(name='MasterDbInstanceId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****', position='Query'),
  slaveDbInstanceId?: string(name='SlaveDbInstanceId', position='Query'),
}

model DescribeGadInstancesResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='403'),
  dynamicMessage?: string(name='DynamicMessage', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instances?: {
    instances?: [ 
    {
      createTime?: long(name='CreateTime', example='2024-05-29 23:55:58'),
      dbEngineType?: string(name='DbEngineType', example='MySQL'),
      dbInstanceCount?: int32(name='DbInstanceCount', example='2'),
      instanceId?: string(name='InstanceId', example='rg-a76s8afa****'),
      instanceName?: string(name='InstanceName', example='test'),
      instanceRegion?: string(name='InstanceRegion', example='cn-hangzhou'),
      instanceType?: string(name='InstanceType', example='DR'),
      masterDbInstanceId?: string(name='MasterDbInstanceId', example='rm-sadfasfa****'),
      masterDbInstanceName?: string(name='MasterDbInstanceName', example='test'),
      masterDbInstanceRegion?: string(name='MasterDbInstanceRegion', example='cn-hangzhou'),
      masterDbInstanceZoneId?: string(name='MasterDbInstanceZoneId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzq276dmnaxqa'),
      status?: string(name='Status', example='running'),
    }
  ](name='Instances')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='30'),
  requestId?: string(name='RequestId', example='C166D79D-436B-45F0-B5A5-25E1959F****'),
  success?: string(name='Success', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', example='22'),
}

model DescribeGadInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGadInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGadInstances  DescribeGadInstancesRequest
  * @return DescribeGadInstancesResponse
 */
async function describeGadInstances(request: DescribeGadInstancesRequest): DescribeGadInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGadInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInitializationStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **30**.', example='30', minimum=1, maximum=300, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.

This parameter is required.', example='dtsi76118o3w92****', position='Query'),
}

model DescribeInitializationStatusResponseBody = {
  dataInitializationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if initial full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
      finishRowNum?: string(name='FinishRowNum', description='The total number of rows that are actually synchronized.

>  This parameter indicates the total number of actually synchronized rows. In contrast, the value of the **TotalRowNum** parameter is calculated based on the system tables in the source database. The values of the two parameters may be different due to time difference.', example='9993'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of initial full data synchronization. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Finished'),
      tableName?: string(name='TableName', description='The table name.', example='customer'),
      totalRowNum?: string(name='TotalRowNum', description='The total number of rows that are supposed to be synchronized.

>  The value of this parameter is calculated based on the system tables in the source database. In contrast, the **FinishRowNum** parameter indicates the total number of actually synchronized rows. The values of the two parameters may be different due to time difference.', example='9981'),
      usedTime?: string(name='UsedTime', description='The time spent on full data synchronization.', example='0.0'),
    }
  ](name='DataInitializationDetails', description='The details of initial full data synchronization.'),
  dataSynchronizationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='The task has failed for too long and cannot be repaired'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of incremental data synchronization. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Migrating'),
      tableName?: string(name='TableName', description='The table name.', example='customer'),
    }
  ](name='DataSynchronizationDetails', description='The details of incremental data synchronization.

>  This parameter and the parameters it contains will be removed in the future.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='150DECD9-13FF-4929-A5DE-855BE9CC****'),
  structureInitializationDetails?: [ 
    {
      constraints?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned if constraints failed to be created.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist'),
          objectDefinition?: string(name='ObjectDefinition', description='The syntax to create constraints.', example='CREATE SEQUENCE "public"."collections_id_seq"   MINVALUE 1   MAXVALUE 9223372036854775807   START 249   INCREMENT BY 1 ;'),
          objectName?: string(name='ObjectName', description='The name of the object.', example='customer'),
          objectType?: string(name='ObjectType', description='The type of the object. Valid value: **Table**.', example='Table'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
          status?: string(name='Status', description='The status of constraint creation. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Finished'),
        }
      ](name='Constraints', description='The constraints of the synchronization object, such as indexes and foreign keys.

>  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the synchronization object has constraints.'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if initial schema synchronization failed.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
      objectDefinition?: string(name='ObjectDefinition', description='The schema of the object.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`customer_id`  int(10) unsigned   auto_increment  COMMENT \\"\\"   NOT NULL   , \\n`customer_title`  varchar(100)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`customer_company1216`  varchar(40)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`submission_date1216`  date     COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`customer_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
      objectName?: string(name='ObjectName', description='The name of the object.', example='customer'),
      objectType?: string(name='ObjectType', description='The type of the object. Valid values:

**Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.', example='Table'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      status?: string(name='Status', description='The status of initial schema synchronization. Valid values:

*   **NotStarted**
*   **Migrating**
*   **Failed**
*   **Finished**', example='Finished'),
    }
  ](name='StructureInitializationDetails', description='The details of initial schema synchronization.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeInitializationStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInitializationStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInitializationStatus  DescribeInitializationStatusRequest
  * @return DescribeInitializationStatusResponse
 */
async function describeInitializationStatus(request: DescribeInitializationStatusRequest): DescribeInitializationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInitializationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobMonitorRuleRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='ta7w132u12h****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzydi675xfea', position='Query'),
}

model DescribeJobMonitorRuleResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='ta7w132u12h****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the specified **DtsJobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='403'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  monitorRules?: [ 
    {
      delayRuleTime?: long(name='DelayRuleTime', description='The threshold that triggers the alert.

*   If the request parameter **Type** of the [CreateJobMonitorRule](https://help.aliyun.com/document_detail/212332.html) operation is set to **delay**, the unit of DelayRuleTime is seconds.
*   If the request parameter **Type** of the [CreateJobMonitorRule](https://help.aliyun.com/document_detail/212332.html) operation is set to **full_timeout**, the unit of DelayRuleTime is hours.', example='11'),
      jobId?: string(name='JobId', description='Task ID.', example='bi6e22ay243****'),
      jobType?: string(name='JobType', description='The task type of the DTS instance, with values: - **normal**: Migration or synchronization task. - **full_check**: Associated full check task. - **etl_check**: Associated incremental check task.', example='normal'),
      noticeValue?: int32(name='NoticeValue', description='Alarm threshold.', example='2'),
      period?: int32(name='Period', description='The statistical period for incremental validation tasks, in minutes.
> Currently supported values are 1 minute, 5 minutes, 10 minutes, and 30 minutes.', example='5'),
      phone?: string(name='Phone', description='The mobile phone numbers that receive alert notifications. Multiple mobile numbers are separated by commas (,).', example='1361234****,1371234****'),
      state?: string(name='State', description='Indicates whether the monitoring rule is enabled. Valid values:

*   **Y**: The monitoring rule is enabled.
*   **N**: The monitoring rule is disabled.', example='Y'),
      times?: int32(name='Times', description='The number of cycles for the incremental validation task.', example='2'),
      type?: string(name='Type', description='The type of the monitoring rule. Valid values:

*   **delay**: If the task latency reaches the threshold, an alert is triggered.
*   **error**: If an exception occurs, an alert is triggered.', example='delay'),
    }
  ](name='MonitorRules', description='The monitoring rules of the DTS task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0CA14388-DD89-4A7B-8CDD-884A10CE****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**:The call failed.', example='true'),
  topics?: [ string ](name='Topics', description='The topics of all subtasks in the distributed change tracking task.'),
}

model DescribeJobMonitorRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeJobMonitorRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeJobMonitorRule  DescribeJobMonitorRuleRequest
  * @return DescribeJobMonitorRuleResponse
 */
async function describeJobMonitorRule(request: DescribeJobMonitorRuleRequest): DescribeJobMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricListRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='12323344****', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Body'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or synchronization task.', example='k2gm967v16f****', position='Body'),
  endTime?: long(name='EndTime', description='The timestamp that indicates the end of the time range to query. Unit: milliseconds.', example='1642476194000', position='Body'),
  env?: string(name='Env', description='Default value: **ALIYUN**.', example='ALIYUN', position='Body'),
  metricName: string(name='MetricName', description='*   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
*   **diskusage_utilization**: the disk usage.
*   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
*   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
*   **cpu_total**: the CPU utilization.
*   **memory_usedutilization**: the memory usage.
*   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.

This parameter is required.', example='cpu_total', position='Body'),
  metricType?: string(name='MetricType', description='Indicates whether the metrics of the cluster or a node are queried. Valid values:

*   **CLUSTER**: The metrics of the cluster are queried.
*   **NODE**: The metrics of a node are queried.', example='NODE', position='Body'),
  ownerID?: string(name='OwnerID', position='Body'),
  param: string(name='Param', description='The monitored object. If the **MetricType** parameter is set to **NODE**, set this parameter to the ID of the node that is monitored.

This parameter is required.', example='nodeid', position='Body'),
  period?: long(name='Period', description='The monitoring interval. Unit: seconds. The minimum value is 15.', example='15', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp that indicates the beginning of the time range to query. Unit: milliseconds.', example='1642476144000', position='Body'),
}

model DescribeMetricListResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='403'),
  dataPoints?: [ 
    {
      statistics?: float(name='Statistics', description='The statistical value.', example='15.25'),
      timestamp?: long(name='Timestamp', description='The timestamp of the record. Unit: milliseconds.', example='1650872310000'),
    }
  ](name='DataPoints', description='The monitoring statistics.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned for an exception.', example='403'),
  metricName?: string(name='MetricName', description='*   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
*   **diskusage_utilization**: the disk usage.
*   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
*   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
*   **cpu_total**: the CPU utilization.
*   **memory_usedutilization**: the memory usage.
*   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.', example='cpu_total'),
  metricType?: string(name='MetricType', description='Indicates whether the metrics of the cluster or a node are queried. Valid values:

*   **CLUSTER**: The metrics of the cluster are queried.
*   **NODE**: The metrics of a node are queried.', example='CLUSTER'),
  param?: string(name='Param', description='The monitored object.

*   If the **MetricType** parameter is set to **NODE**, the value of this parameter is the ID of the node that is monitored.****
*   If the **MetricType** parameter is set to **CLUSTER**, the value of this parameter is the ID of the dedicated cluster. You can obtain the ID by calling the ListDedicatedCluster operation.', example='ecs-jhjnjjn'),
  period?: long(name='Period', description='The monitoring interval. Unit: seconds. Minimum value: 15.', example='15'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeMetricListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMetricListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMetricList  DescribeMetricListRequest
  * @return DescribeMetricListResponse
 */
async function describeMetricList(request: DescribeMetricListRequest): DescribeMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMigrationJobAlertRequest {
  accountId?: string(name='AccountId', description='ID of the Alibaba Cloud primary account. No need to set this parameter as it will be deprecated soon.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='Used to ensure the idempotence of requests. This parameter value should be generated by the client, ensuring uniqueness across different requests. The maximum length is 64 ASCII characters, and the value must not contain non-ASCII characters.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='Data migration instance ID, which can be queried by calling the DescribeMigrationJobs interface.

This parameter is required.', example='dtslb9113qq11n****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance is located. For more details, please refer to the [list of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeMigrationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone', description='Phone number of the contact for delay alarm.', example='1361234****,1371234****'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Whether to monitor the delay status, return values:
- **enable**: Yes. - **disable**: No.', example='enable'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering a delayed alarm, in seconds.', example='0'),
  errCode?: string(name='ErrCode', description='Error code returned when the call fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='Indicates whether the call was successful.', example='The request processing has failed due to some unknown error.'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='Phone number of the contact for abnormal alarm notifications', example='1361234****,1371234****'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Whether to monitor for abnormal status, return values:
- **enable**: Yes. - **disable**: No.', example='enable'),
  migrationJobId?: string(name='MigrationJobId', description='Data migration instance ID.', example='dtslb9113qq11n****'),
  migrationJobName?: string(name='MigrationJobName', description='Name of the data migration task.', example='zwy-test5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CFB89C51-6F03-519C-A921-AAE28D50AEFB'),
  success?: string(name='Success', description='Whether the request was successful.', example='true'),
}

model DescribeMigrationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMigrationJobAlert  DescribeMigrationJobAlertRequest
  * @return DescribeMigrationJobAlertResponse
 */
async function describeMigrationJobAlert(request: DescribeMigrationJobAlertRequest): DescribeMigrationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobDetailRequest {
  migrationMode?: {
    dataInitialization?: boolean(name='DataInitialization', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='true'),
    dataSynchronization?: boolean(name='DataSynchronization', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='true'),
    structureInitialization?: boolean(name='StructureInitialization', description='When you call this operation, the data migration task must be in the Migrating, Failed, Paused, or Finished state.', example='true'),
  }(name='MigrationMode', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.

This parameter is required.', example='dtsta7w132u12h****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 30, 50, and 100. Default value: 30.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see List of supported regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Specifies whether to query the details of schema migration. Valid values:

*   **true**: yes

*   **false**: no

> Default value: **false**', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeMigrationJobDetailResponseBody = {
  dataInitializationDetailList?: {
    dataInitializationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The status of full data migration. Valid values:

- **NotStarted**: Full data migration is not started.
- **Migrating**: Full data migration is in progress.
- **Failed**: Full data migration failed.
- **Finished**: Full data migration is completed.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The page number of the returned page.', example='java.lang.NumberFormatException: For input string: ""'),
      finishRowNum?: string(name='FinishRowNum', description='The details of full data migration.', example='200001'),
      migrationTime?: string(name='MigrationTime', description='The name of the database to which the migration object in the source instance belongs.', example='0.0'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='Indicates whether the call was successful.', example='dtstestdata'),
      status?: string(name='Status', description='The total number of entries that are returned.', example='Finished'),
      tableName?: string(name='TableName', description='The error message returned if the call failed.', example='customer'),
      totalRowNum?: string(name='TotalRowNum', description='The table name.', example='201477'),
    }
  ](name='DataInitializationDetail')
  }(name='DataInitializationDetailList', description='The maximum number of data migration instances that can be displayed on one page.'),
  dataSynchronizationDetailList?: {
    dataSynchronizationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The status of incremental data migration. Valid values:

*   **NotStarted**: Incremental data migration is not started.
*   **Migrating**: Incremental data migration is in progress.
*   **Failed**: Incremental data migration failed.
*   **Finished**: Incremental data migration is completed.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The total number of records that are supposed to be migrated by the task.', example='The details of incremental data migration.'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The time taken by full data migration.', example='dtstestdata'),
      status?: string(name='Status', description='The number of records that have been migrated.', example='Migrating'),
      tableName?: string(name='TableName', description='The name of the database to which the migration object in the destination instance belongs.', example='customer'),
    }
  ](name='DataSynchronizationDetail')
  }(name='DataSynchronizationDetailList', description='The error message returned if full data migration failed.'),
  errCode?: string(name='ErrCode', description='Specifies whether to query the details of incremental data migration. Valid values:

*   **true**: yes

*   **false**: no

> Default value: **false**', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The ID of the request.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The error code returned if the call failed.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='30'),
  requestId?: string(name='RequestId', description='Specifies whether to query the details of full data migration. Valid values:

*   **true**: yes

*   **false**: no

> Default value: **false**', example='0AE3CD0B-4148-426F-A90E-952467CC****'),
  structureInitializationDetailList?: {
    structureInitializationDetail?: [ 
    {
      constraintList?: {
        structureInitializationDetail?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The status of constraint creation. Valid values:

- **NotStarted**
- **Migrating**
- **Failed**
- **Finished**', example='dtstestdata'),
          errorMessage?: string(name='ErrorMessage', description='The constraints of the migration object, such as indexes and foreign keys. 

>  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the migration object has constraints.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist；'),
          objectDefinition?: string(name='ObjectDefinition', description='The name of the database to which the migration object in the destination instance belongs.', example='CREATE SEQUENCE "public"."collections_id_seq"   MINVALUE 1   MAXVALUE 9223372036854775807   START 249   INCREMENT BY 1 ;'),
          objectName?: string(name='ObjectName', description='The name of the database to which the migration object in the source instance belongs.', example='customer'),
          objectType?: string(name='ObjectType', description='The name of migration object.', example='Table'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The error message returned if schema migration failed.', example='dtstestdata'),
          status?: string(name='Status', description='The type of the migration object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.', example='Finished'),
        }
      ](name='StructureInitializationDetail')
      }(name='ConstraintList', description='The schema of the migration object.'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName', description='The status of schema migration. Valid values:

- **NotStarted**: Schema migration is not started.
- **Migrating**: Schema migration is in progress.
- **Failed**: Schema migration failed.
- **Finished**: Schema migration is completed.', example='dtstestdata'),
      errorMessage?: string(name='ErrorMessage', description='The details of schema migration.', example='DTS-1020042 Execute sql error sql: DTS-1020042 Execute sql error sql: ERROR: column \\"id\\" named in key does not exist'),
      objectDefinition?: string(name='ObjectDefinition', description='The task has failed for too long and cannot be restored', example='CREATE TABLE `dtstestdata`.`customer` (\\n`runoob_id`  int(10) unsigned   auto_increment  COMMENT \\"\\"   NOT NULL   , \\n`runoob_title`  varchar(100)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`runoob_author1216`  varchar(40)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`submission_date1216`  date     COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`runoob_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
      objectName?: string(name='ObjectName', description='The name of the database to which the migration object in the source instance belongs.', example='customer'),
      objectType?: string(name='ObjectType', description='The name of the database to which the migration object in the destination instance belongs.', example='Table'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName', description='The error message returned if incremental data migration failed.', example='dtstestdata'),
      status?: string(name='Status', description='The table name.', example='Finished'),
    }
  ](name='StructureInitializationDetail')
  }(name='StructureInitializationDetailList', description='The name of the database to which the migration object in the source instance belongs.'),
  success?: string(name='Success', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='Resource group ID.', example='1'),
}

model DescribeMigrationJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMigrationJobDetail  DescribeMigrationJobDetailRequest
  * @return DescribeMigrationJobDetailResponse
 */
async function describeMigrationJobDetail(request: DescribeMigrationJobDetailRequest): DescribeMigrationJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.

This parameter is required.', example='dtsz2v12jfo309****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model DescribeMigrationJobStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration failed.', example='java.lang.NumberFormatException: For input string: ""'),
    percent?: string(name='Percent', description='The migration progress. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of records that have been migrated during full data migration.', example='200001'),
    status?: string(name='Status', description='The status of full data migration. Valid values:

*   **NotStarted**: Full data migration is not started.
*   **Migrating**: Full data migration is in progress.
*   **Failed**: Full data migration failed.
*   **Finished**: Full data migration is completed.', example='Finished'),
  }(name='DataInitializationStatus', description='The status of full data migration.'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest incremental data is migrated. Unit: seconds.', example='1612507847'),
    delay?: string(name='Delay', description='The latency of incremental data migration. Unit: seconds.', example='0'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration failed.', example='The task has failed for too long and cannot be restored'),
    percent?: string(name='Percent', description='The progress of incremental data migration. Unit: %.', example='95'),
    status?: string(name='Status', description='The status of incremental data migration. Valid values:

*   **NotStarted**: Incremental data migration is not started.
*   **Migrating**: Incremental data migration is in progress.
*   **Failed**: Incremental data migration failed.
*   **Finished**: Incremental data migration is completed.
*   **Catched**: Incremental data migration is not delayed.', example='Catched'),
  }(name='DataSynchronizationStatus', description='The status of incremental data migration.'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
    engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the destination instance.', example='rm-bp1zc3iyqe3qw****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
    port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
    oracleSID?: string(name='oracleSID', description='The system ID (SID) of the Oracle database.

>  This parameter is returned only if the database type of the destination instance is **Oracle**.', example='testsid'),
  }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  migrationJobClass?: string(name='MigrationJobClass', description='The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).', example='2xlarge'),
  migrationJobId?: string(name='MigrationJobId', description='The ID of the data migration instance.', example='dtsz2v12jfo309****'),
  migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.', example='MySQL migration'),
  migrationJobStatus?: string(name='MigrationJobStatus', description='The status of the data migration task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Migrating**: The task is migrating data.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed to migrate data.
*   **Finished**: The task is completed.', example='Migrating'),
  migrationMode?: {
    dataInitialization?: boolean(name='dataInitialization', description='Indicates whether full data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    dataSynchronization?: boolean(name='dataSynchronization', description='Indicates whether incremental data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    structureInitialization?: boolean(name='structureInitialization', description='Indicates whether schema migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='MigrationMode', description='The migration types.'),
  migrationObject?: string(name='MigrationObject', description='The objects that are migrated by the task.', example='[{\\"DBName\\":\\"dtstestdata\\",\\"TableIncludes\\":[{\\"TableName\\":\\"customer\\"}]}]'),
  payType?: string(name='PayType', description='The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).', example='PostPaid'),
  precheckStatus?: {
    detail?: {
      checkItem?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
        itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
        repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
      }
    ](name='CheckItem')
    }(name='Detail', description='The result of each precheck item.'),
    percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
    status?: string(name='Status', description='The precheck status. Valid values:

*   **NotStarted**
*   **Suspending**:
*   **Checking**
*   **Failed**
*   **Finished**', example='Success'),
  }(name='PrecheckStatus', description='The precheck details.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A032E3B4-929B-48E9-97B9-37587CBF****'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdatabase'),
    engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance.

*   **RDS**: ApsaraDB RDS instance
*   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
*   **LocalInstance**: self-managed database with a public IP address
*   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
*   **MongoDB**: ApsaraDB for MongoDB instance
*   **POLARDB**: PolarDB for MySQL cluster (available only for the China site)', example='RDS'),
    port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
    oracleSID?: string(name='oracleSID', description='The SID of the Oracle database.

>  This parameter is returned only if the database type of the source instance is **Oracle**.', example='dtstestdatabase'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
    percent?: string(name='Percent', description='The progress of schema migration. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of tables whose schemas have been migrated.', example='1'),
    status?: string(name='Status', description='The status of schema migration. Valid values:

*   **NotStarted**: Schema migration is not started.
*   **Migrating**: Schema migration is in progress.
*   **Failed**: Schema migration failed.
*   **Finished**: Schema migration is completed.', example='Finished'),
  }(name='StructureInitializationStatus', description='The status of schema migration.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', example='z2v12jfo309****'),
}

model DescribeMigrationJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMigrationJobStatus  DescribeMigrationJobStatusRequest
  * @return DescribeMigrationJobStatusResponse
 */
async function describeMigrationJobStatus(request: DescribeMigrationJobStatusRequest): DescribeMigrationJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobsRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.

>  Fuzzy match is supported.', example='MySQL迁移', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instances reside. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.

This parameter is required.', example='testkey1'),
      value?: string(name='Value', description='The tag value. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='The tag of the data migration instance, used as a filter. When this is not empty, only the instance tasks with this tag will be returned.', position='Query'),
}

model DescribeMigrationJobsResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  migrationJobs?: {
    migrationJob?: [ 
    {
      dataInitialization?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data migration failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The migration progress. Unit: %.', example='100'),
        progress?: string(name='Progress', description='The number of records that have been migrated during full data migration.', example='200001'),
        status?: string(name='status', description='The status of full data migration. Valid values:

*   **NotStarted**: Full data migration is not started.
*   **Migrating**: Full data migration is in progress.
*   **Failed**: Full data migration failed.
*   **Finished**: Full data migration is completed.', example='Finished'),
      }(name='DataInitialization', description='The details of full data migration.'),
      dataSynchronization?: {
        delay?: string(name='Delay', description='The latency of incremental data migration. Unit: seconds.', example='0'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data migration failed.', example='Open: open \\\\\\\\?\\\\F:\\\\KINGDEE BACK\\\\AIS20221025151008_Data.mdf: The process cannot access the file because it is being used by another process.'),
        percent?: string(name='Percent', description='The progress of incremental data migration. Unit: %.', example='95'),
        status?: string(name='status', description='The status of incremental data migration. Valid values:

*   **NotStarted**: Incremental data migration is not started.
*   **Migrating**: Incremental data migration is in progress.
*   **Failed**: Incremental data migration failed.
*   **Finished**: Incremental data migration is completed.
*   **Catched**: Incremental data migration is not delayed.', example='Catched'),
      }(name='DataSynchronization', description='The details of incremental data migration.'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the destination instance belongs.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
        ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
        instanceID?: string(name='InstanceID', description='The ID of the destination instance.', example='rm-bp1zc3iyqe3qw****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        oracleSID?: string(name='OracleSID', description='This parameter is returned only if the database type of the destination instance is **Oracle**.', example='testsid'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      instanceCreateTime?: string(name='InstanceCreateTime', description='The time when the data migration instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-22T09:02:13Z'),
      jobCreateTime?: string(name='JobCreateTime', description='The time when the data migration task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-22T08:53:55Z'),
      migrationJobClass?: string(name='MigrationJobClass', description='The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).', example='2xlarge'),
      migrationJobID?: string(name='MigrationJobID', description='The ID of the data migration instance.', example='dtson2z28evm33****'),
      migrationJobName?: string(name='MigrationJobName', description='The name of the data migration task.', example='dtstest'),
      migrationJobStatus?: string(name='MigrationJobStatus', description='The status of the data migration task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Migrating**: The task is migrating data.
*   **Suspending**: The task is paused.
*   **MigrationFailed**: The task failed to migrate data.
*   **Finished**: The task is completed.', example='Migrating'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization', description='Indicates whether full data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        dataSynchronization?: boolean(name='DataSynchronization', description='Indicates whether incremental data migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        structureInitialization?: boolean(name='StructureInitialization', description='Indicates whether schema migration is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      }(name='MigrationMode', description='The migration types.'),
      migrationObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList', description='The names of the migrated tables.'),
          wholeDatabase?: string(name='WholeDatabase', description='Indicates whether an entire database is migrated. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        }
      ](name='SynchronousObject')
      }(name='MigrationObject', description='The objects that are migrated by the task.'),
      payType?: string(name='PayType', description='The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).', example='PostPaid'),
      precheck?: {
        percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
        status?: string(name='Status', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
      }(name='Precheck', description='The precheck details.'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName', description='The name of the database to which the migration object in the source instance belongs.', example='dtstestdata'),
        engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
        ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        oracleSID?: string(name='OracleSID', description='This parameter is returned only if the database type of the source instance is **Oracle**.', example='testsid'),
        port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      structureInitialization?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema migration failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema migration. Unit: %.', example='100'),
        progress?: string(name='Progress', description='The number of tables whose schemas have been migrated.', example='1'),
        status?: string(name='status', description='The status of schema migration. Valid values:

*   **NotStarted**: Schema migration is not started.
*   **Migrating**: Schema migration is in progress.
*   **Failed**: Schema migration failed.
*   **Finished**: Schema migration is completed.', example='Finished'),
      }(name='StructureInitialization', description='The details of schema migration.'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='testkey1'),
          value?: string(name='Value', description='The tag value that corresponds to the tag key.', example='testvalue1'),
        }
      ](name='Tag')
      }(name='Tags', description='The collection of tags.'),
    }
  ](name='MigrationJob')
  }(name='MigrationJobs', description='The list of data migration instances and the details of each instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of entries that can be displayed on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED4846D-ED60-435D-88C0-7EC0CE4D****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data migration instances that belong to your Alibaba Cloud account.', example='300'),
}

model DescribeMigrationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMigrationJobs  DescribeMigrationJobsRequest
  * @return DescribeMigrationJobsResponse
 */
async function describeMigrationJobs(request: DescribeMigrationJobsRequest): DescribeMigrationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribePreCheckCreateGadOrderResultRequest {
  instanceId?: string(name='InstanceId', example='gad-bp162d4tp0500****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****', position='Query'),
  taskId?: string(name='TaskId', example='k71r16fj13g****', position='Query'),
}

model DescribePreCheckCreateGadOrderResultResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='403'),
  dynamicMessage?: string(name='DynamicMessage', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instanceId?: string(name='InstanceId', example='gad-bp1i99e8l7913****'),
  preCheckItems?: {
    preCheckItems?: [ 
    {
      code?: string(name='Code', example='CHECK_MASTER_DB_STATUS'),
      message?: string(name='Message', example='test'),
      status?: string(name='Status', example='Running'),
    }
  ](name='PreCheckItems')
  }(name='PreCheckItems'),
  preCheckResult?: boolean(name='PreCheckResult', example='True'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='92E1E99D-5224-4AD3-8C94-23A3516B****'),
  success?: string(name='Success', example='true'),
  taskId?: string(name='TaskId', example='11****'),
}

model DescribePreCheckCreateGadOrderResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreCheckCreateGadOrderResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePreCheckCreateGadOrderResult  DescribePreCheckCreateGadOrderResultRequest
  * @return DescribePreCheckCreateGadOrderResultResponse
 */
async function describePreCheckCreateGadOrderResult(request: DescribePreCheckCreateGadOrderResultRequest): DescribePreCheckCreateGadOrderResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreCheckCreateGadOrderResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribePreCheckStatusRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.

This parameter is required.', example='i03e3zty16i****', position='Query'),
  jobCode: string(name='JobCode', description='The task code that specifies the type of the DTS subtask. Valid values:

*   **01**: precheck.
*   **02**: schema migration or initial schema synchronization.
*   **03**: full data migration or initial full data synchronization.
*   **04**: incremental data migration or synchronization.

This parameter is required.', example='01', position='Query'),
  name?: string(name='Name', description='The filter item used to filter tables in fuzzy match.', example='dewuprop', position='Query'),
  pageNo?: string(name='PageNo', description='The page number. Pages start from page 1. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: **20**.', example='30', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  structPhase?: string(name='StructPhase', description='The filter item used to filter tables, views, and functions during schema migration.', example='View', position='Query'),
  structType?: string(name='StructType', description='The type of schema definition. Valid values:

*   **before**: schema migration or initial schema synchronization.
*   **after**: DDL operations performed during incremental data migration or synchronization.', example='before', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='false', position='Query'),
}

model DescribePreCheckStatusResponseBody = {
  analysisJobProgress?: [ 
    {
      bootTime?: string(name='BootTime', description='The specific project start time, formatted as <i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z (UTC time).', example='2022-03-16T08:01:31.000+00:00'),
      canSkip?: boolean(name='CanSkip', description='Whether to support skipping this sub-item.', example='true'),
      current?: string(name='Current', description='The number of currently running subtasks.', example='0'),
      ddlSql?: string(name='DdlSql', description='The DDL operation to be executed.', example='CREATE TABLE ****'),
      delaySeconds?: int32(name='DelaySeconds', description='Task delay time', example='0'),
      destSchema?: string(name='DestSchema', description='Name of the database to which the migration objects in the target instance belong.', example='dest'),
      diffRow?: long(name='DiffRow', description='This parameter will be deprecated.', example='1'),
      errDetail?: string(name='ErrDetail', description='Error details when the project encounters an error.', example='ANALYSIS_MYSQL'),
      errMsg?: string(name='ErrMsg', description='Specific error message.', example='ANALYSIS_'),
      finishTime?: string(name='FinishTime', description='The end time of the evaluation task, formatted as <i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z (UTC time).', example='2022-03-16T08:01:31.000+00:00'),
      id?: string(name='Id', description='The ID of this evaluation item in the database.', example='123123'),
      ignoreFlag?: string(name='IgnoreFlag', description='Whether to directly ignore this specific item and move to the next one. Return values:
- **N**: No. - **Y**: Yes.', example='N'),
      item?: string(name='Item', description='Name of the evaluation item', example='ANALYSIS_MYSQL_4_ITEM'),
      jobId?: string(name='JobId', description='The ID of the evaluation task.', example='11234234xc'),
      logs?: [ 
        {
          errData?: string(name='ErrData', description='Error message', example='Please modify this object'),
          errMsg?: string(name='ErrMsg', description='Error message from DTS when a specific project encounters an error.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
          errType?: string(name='ErrType', description='Error type.', example='ForeignKey'),
          logLevel?: string(name='LogLevel', description='The level of the log.', example='ERROR'),
        }
      ](name='Logs', description='Sub-assessment item.'),
      names?: string(name='Names', description='Name of the evaluation item', example='ANALYSIS_MYSQL_4_DETAIL'),
      orderNum?: int32(name='OrderNum', description='The number of the evaluation item.', example='10'),
      parentObj?: string(name='ParentObj', description='This parameter will be deprecated.', example='demo'),
      repairMethod?: string(name='RepairMethod', description='Remediation method for the evaluation item.', example='ANALYSIS_'),
      skip?: boolean(name='Skip', description='If this evaluation item fails, whether you set to skip this item. Return values: * **true**: Yes * **false**: No', example='false'),
      sourceSchema?: string(name='SourceSchema', description='Name of the database to which the migration objects in the source instance belong.', example='dtstestdata'),
      state?: string(name='State', description='The result of the evaluation, with return values being: - **Failed**: Failure. - **Success**: Success.', example='Success'),
      sub?: string(name='Sub', description='Progress of sub-projects under a specific project. > If it returns <b>[]</b>, it indicates there are no sub-projects.', example='[]'),
      targetNames?: string(name='TargetNames', description='Name of the target object', example='testTable'),
      total?: int32(name='Total', description='The total number of specific items in the sub-task.', example='1'),
    }
  ](name='AnalysisJobProgress', description='Display list of evaluation tasks'),
  code?: string(name='Code', description='The task code that indicates the type of the subtask. Valid values:

*   **01**: precheck.
*   **02**: schema migration or initial schema synchronization.
*   **03**: full data migration or initial full data synchronization.
*   **04**: incremental data migration or synchronization.', example='01'),
  errorAnalysisItem?: int32(name='ErrorAnalysisItem', description='Number of failed evaluation items', example='0'),
  errorItem?: int32(name='ErrorItem', description='The total number of subtask failures.', example='0'),
  fullNetCheckJobStatus?: [ 
    {
      code?: string(name='Code', description='Task code, **01** represents pre-check.', example='01'),
      destRegion?: string(name='DestRegion', description='ID of the region to which the target network segment belongs.', example='cn-hangzhou'),
      destRegionCidr?: string(name='DestRegionCidr', description='Destination network segment.', example='100.104.XX.XXX/XX'),
      destinationEndpointType?: string(name='DestinationEndpointType', description='The access method of the target instance, with return values as follows: - **ALIYUN**: Access method is **cloud instance**. - **OTHER**: Access method is **public IP**. - **ECS**: Access method is **ECS self-built database**. - **EXPRESS**: Access method is **Express Connect / VPN Gateway / Smart Gateway**. - **CEN**: Access method is **Cloud Enterprise Network (CEN)**. - **DG**: Access method is **Database Gateway (DG)**.', example='CEN'),
      errorItem?: int32(name='ErrorItem', description='Number of pre-check failed items', example='0'),
      hostRegion?: string(name='HostRegion', description='The region ID of the instance\\"s running node.', example='cn-hangzhou'),
      jobId?: string(name='JobId', description='Task ID.', example='l3m1213ye7l****'),
      jobName?: string(name='JobName', description='Task name.', example='dts.step.fullnetcheck'),
      jobProgress?: [ 
        {
          bootTime?: string(name='BootTime', description='The specific project start time, formatted as <i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z (UTC time).', example='2022-03-30T03:36:11.000+00:00'),
          canSkip?: boolean(name='CanSkip', description='Whether DTS supports skipping a project after it fails. Return values: * **true**: Yes * **false**: No', example='false'),
          current?: string(name='Current', description='The number of currently running tasks.', example='0'),
          ddlSql?: string(name='DdlSql', description='The DDL operation to be executed.', example='CREATE TABLE ****'),
          delaySeconds?: int32(name='DelaySeconds', description='Task delay time', example='0'),
          destSchema?: string(name='DestSchema', description='Name of the database to which the migration objects in the target instance belong.', example='dest'),
          diffRow?: long(name='DiffRow', description='This parameter will be deprecated.', example='1'),
          errDetail?: string(name='ErrDetail', description='Details of the error when a specific project fails.', example='CHECK__ERROR_SAME_OBJ_DETAIL'),
          errMsg?: string(name='ErrMsg', description='Error message prompt when a specific project encounters an error.', example='ODPS project does not exist odps.`huijin'),
          finishTime?: string(name='FinishTime', description='Task completion time, formatted as yyyy-MM-ddTHH:mm:ssZ (UTC time).', example='2022-03-31T03:36:11.000+00:00'),
          id?: string(name='Id', description='The ID of the record in the metadata database.', example='922305811766881****'),
          ignoreFlag?: string(name='IgnoreFlag', description='Whether to directly ignore this specific item and move to the next one. Return values:
- **N**: No. - **Y**: Yes.', example='N'),
          item?: string(name='Item', description='Specific project name.', example='CHECK_CONN_SRC'),
          jobId?: string(name='JobId', description='Task ID.', example='l3m1213ye7l****'),
          logs?: [ 
            {
              errData?: string(name='ErrData', description='Error record.', example='CREATE TABLE `dtstestdata`.`customer` ****'),
              errMsg?: string(name='ErrMsg', description='Specific error message.', example='get metric list fail'),
              errType?: string(name='ErrType', description='Type of error.', example='ForeignKey'),
              logLevel?: string(name='LogLevel', description='The level of the log.', example='INFO'),
            }
          ](name='Logs', description='Error execution log information.'),
          names?: string(name='Names', description='Specific project name.', example='CHECK_CONN_SRC_DETAIL'),
          orderNum?: int32(name='OrderNum', description='Project number.', example='1'),
          parentObj?: string(name='ParentObj', description='This parameter will be deprecated.', example='demo'),
          repairMethod?: string(name='RepairMethod', description='The corresponding remediation method when the pre-check fails.', example='CHECK__ERROR_SAME_OBJ_REPAIR'),
          skip?: boolean(name='Skip', description='After this specific item fails, do you set to skip this item. Return values: * **true**: Yes * **false**: No', example='false'),
          sourceSchema?: string(name='SourceSchema', description='Name of the database to which the migration objects in the source instance belong.', example='dtstestdata'),
          state?: string(name='State', description='Check result, the return value is: - **Failed**: Failure. - **Success**: Completed.', example='Success'),
          sub?: string(name='Sub', description='Progress of sub-projects under a specific project. > If it returns <b>[]</b>, it indicates there are no sub-projects.', example='[]'),
          targetNames?: string(name='TargetNames', description='Name of the target object', example='order'),
          total?: int32(name='Total', description='The total number of projects.', example='11'),
        }
      ](name='JobProgress', description='A list of specific items for the task and their execution progress.'),
      sourceEndpointType?: string(name='SourceEndpointType', description='The access method of the source instance, with return values as follows: - **ALIYUN**: Access method is **cloud instance**. - **OTHER**: Access method is **public IP**. - **ECS**: Access method is **ECS self-built database**. - **EXPRESS**: Access method is **dedicated line/VPN gateway/smart gateway**. - **CEN**: Access method is **Cloud Enterprise Network CEN**. - **DG**: Access method is **Database Gateway DG**.', example='CEN'),
      srcRegion?: string(name='SrcRegion', description='ID of the region to which the source network segment belongs.', example='cn-hangzhou'),
      srcRegionCidr?: string(name='SrcRegionCidr', description='Source network segment.', example='100.104.XX.XXX/XX'),
      state?: string(name='State', description='Check result, the return value is: - **Failed**: Failure. - **Success**: Completed.', example='Success'),
      total?: int32(name='Total', description='Total number of items in the project.', example='11'),
    }
  ](name='FullNetCheckJobStatus', description='Network-wide inspection results.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The status code that is returned.', example='200'),
  jobId?: string(name='JobId', description='The ID of the data migration or synchronization task.', example='b4my3zg929a****'),
  jobName?: string(name='JobName', description='The name of the subtask.', example='dtstest'),
  jobProgress?: [ 
    {
      bootTime?: string(name='BootTime', description='The time when the subtask was started. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.', example='2021-03-16T08:01:31.000+00:00'),
      canSkip?: boolean(name='CanSkip', description='Indicates whether the subtask can be ignored if it fails.', example='true'),
      current?: string(name='Current', description='The number of the subtasks that are running.', example='0'),
      ddlSql?: string(name='DdlSql', description='The DDL statements.', example='CREATE TABLE `dtstestdata`.`order` (\\n`orderid`  int(11)     COMMENT \\"\\"   NOT NULL   , \\n`username`  char(32)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NULL   , \\n`ordertime`  datetime     COMMENT \\"\\"   NULL   , \\n`commodity`  varchar(32)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NULL   , \\n`phonenumber`  int(11)     COMMENT \\"\\"   NULL   , \\n`address`  text  CHARSET `utf8mb4` COLLATE `utf8mb4_general_ci`    COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`orderid`)) engine=InnoDB DEFAULT CHARSET=`gbk` DEFAULT COLLATE `gbk_chinese_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
      delaySeconds?: int32(name='DelaySeconds', description='The latency of incremental data migration or synchronization.

> If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.', example='0'),
      destSchema?: string(name='DestSchema', description='The name of the database to which the object in the destination instance belongs.', example='dtstestdata_new'),
      diffRow?: long(name='DiffRow', description='This parameter will be removed in the future.', example='1'),
      errDetail?: string(name='ErrDetail', description='The error details of the subtask failure.', example='CHECK__ERROR_SAME_OBJ_DETAIL'),
      errMsg?: string(name='ErrMsg', description='The error message of the subtask failure.', example='CHECK__ERROR_SAME_OBJ'),
      finishTime?: string(name='FinishTime', description='The time when the subtask was complete. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.', example='2021-03-16T08:01:34.000+00:00'),
      id?: string(name='Id', description='The ID of the entry in the metadatabase.', example='5632'),
      ignoreFlag?: string(name='IgnoreFlag', description='Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:

*   **N**: no.
*   **Y**: yes.', example='N'),
      item?: string(name='Item', description='The shortened name of the subtask.', example='CHECK_CONN_DEST'),
      jobId?: string(name='JobId', description='The subtask ID.', example='fj1c33ro168****'),
      logs?: [ 
        {
          errData?: string(name='ErrData', description='The error message.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`runoob_id`  int(10) unsigned   auto_increment  COMMENT \\"\\"   NOT NULL   , \\n`runoob_title`  varchar(100)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`runoob_author1216`  varchar(40)  CHARSET `utf8` COLLATE `utf8_general_ci`    COMMENT \\"\\"   NOT NULL   , \\n`submission_date1216`  date     COMMENT \\"\\"   NULL   \\n, PRIMARY KEY (`runoob_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
          errMsg?: string(name='ErrMsg', description='The error message that is returned when an error occurs on the subtask.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
          errType?: string(name='ErrType', description='The error type.', example='ForeignKey'),
          logLevel?: string(name='LogLevel', description='The level of logs.', example='ERROR'),
        }
      ](name='Logs', description='The logs of subtask failures.'),
      names?: string(name='Names', description='The name of the subtask.', example='CHECK_CONN_DEST_DETAIL'),
      orderNum?: int32(name='OrderNum', description='The serial number of the subtask.', example='10'),
      parentObj?: string(name='ParentObj', description='This parameter will be removed in the future.', example='demo'),
      repairMethod?: string(name='RepairMethod', description='The method to fix the subtask failure.', example='CHECK__ERROR_SAME_OBJ_REPAIR'),
      skip?: boolean(name='Skip', description='Indicates whether the subtask is ignored if it fails. Valid values:

*   **true**
*   **false**', example='false'),
      sourceSchema?: string(name='SourceSchema', description='The name of the database to which the object in the source instance belongs.', example='dtstestdata'),
      state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Warning**: The subtask encounters an exception.
*   **Success**: The subtask is complete.', example='Success'),
      sub?: string(name='Sub', description='The sub-item progress of the subtask.

> If \\*\\*[]\\*\\* is returned, the subtask has no sub-items.', example='[]'),
      targetNames?: string(name='TargetNames', description='The names of the objects that are migrated or synchronized.', example='order'),
      total?: int32(name='Total', description='The total number of sub-items of the subtask.', example='1'),
    }
  ](name='JobProgress', description='The subtasks and the progress of each subtask.'),
  networkDiagnosisResult?: {
    diagnosis?: [ 
      {
        cnDocUrl?: string(name='CnDocUrl', description='Document address for China region.', example='https://***.ali***.com/document_detail/470447.html'),
        code?: string(name='Code', description='Diagnostic code.', example='dts.kunlun.diagnosis.network.express_doc'),
        endpointType?: string(name='EndpointType', description='Access point, the return values are: - **source**: source end. - **destination**: destination end. - **unknown**: unknown.', example='source'),
        internationalDocUrl?: string(name='InternationalDocUrl', description='Overseas region document address.', example='https://www.ali***.com/help/en/data-transmission-service/latest/how-to-solve-an-error-when-accessing-a-database-instance-to-dts-using-vpn'),
        result?: string(name='Result', description='Reserved field for diagnostic results, default is empty.', example='none'),
      }
    ](name='Diagnosis', description='Network diagnostic report'),
    modelVersion?: string(name='ModelVersion', description='Diagnose model version.', example='network-v0.2'),
  }(name='NetworkDiagnosisResult', description='Network diagnosis result'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageRecordCount?: long(name='PageRecordCount', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='C096FA97-B6BA-4575-899D-61E12B59****'),
  state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Suspending**: The subtask is paused.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
*   **Finished**: The subtask is complete.', example='Finished'),
  subDistributedJobStatus?: [ 
    {
      code?: string(name='Code', description='The task code that indicates the type of the subtask. Valid values:

*   **01**: precheck.
*   **02**: schema migration or initial schema synchronization.
*   **03**: full data migration or initial full data synchronization.
*   **04**: incremental data migration or synchronization.', example='02'),
      errorItem?: int32(name='ErrorItem', description='The number of subtasks that failed.', example='0'),
      jobId?: string(name='JobId', description='The subtask ID.', example='n0gm1682j6563np'),
      jobName?: string(name='JobName', description='The name of distributed subtasks associated with the subtask.', example='dts.step.struct.load'),
      jobProgress?: [ 
        {
          bootTime?: string(name='BootTime', description='The time when the subtask was started. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2022-03-30T03:36:11.000+00:00'),
          canSkip?: boolean(name='CanSkip', description='Indicates whether the subtask can be ignored if it fails. Valid values:

*   **true**
*   **false**', example='false'),
          current?: string(name='Current', description='The number of the subtasks that are running.', example='0'),
          ddlSql?: string(name='DdlSql', description='The DDL statements.', example='None'),
          delaySeconds?: int32(name='DelaySeconds', description='The latency of incremental data migration or synchronization.', example='0'),
          destSchema?: string(name='DestSchema', description='The name of the database to which the object in the destination instance belongs.', example='databasetest'),
          diffRow?: long(name='DiffRow', description='This parameter will be removed in the future.', example='None'),
          errDetail?: string(name='ErrDetail', description='The error details of the subtask failure.', example='CHECK__ERROR_SAME_OBJ_DETAIL'),
          errMsg?: string(name='ErrMsg', description='The error message of the subtask failure.', example='ODPS project does not exist odps.`huijin'),
          finishTime?: string(name='FinishTime', description='The time when the subtask was complete. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2022-03-31T03:36:11.000+00:00'),
          id?: string(name='Id', description='The ID of the entry in the metadatabase.', example='3890'),
          ignoreFlag?: string(name='IgnoreFlag', description='Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:

*   **N**: no.
*   **Y**: yes.', example='N'),
          item?: string(name='Item', description='The name of the subtask.', example='login_common_time'),
          jobId?: string(name='JobId', description='The subtask ID.', example='l3m1213ye7l****'),
          logs?: [ 
            {
              errData?: string(name='ErrData', description='The record of errors.', example='CREATE TABLE `dtstestdata`.`customer` (\\n`runoob_id` int(10) unsigned auto_increment COMMENT \\"\\" NOT NULL , \\n`runoob_title` varchar(100) CHARSET `utf8` COLLATE `utf8_general_ci` COMMENT \\"\\" NOT NULL , \\n`runoob_author1216` varchar(40) CHARSET `utf8` COLLATE `utf8_general_ci` COMMENT \\"\\" NOT NULL , \\n`submission_date1216` date COMMENT \\"\\" NULL \\n, PRIMARY KEY (`runoob_id`)) engine=InnoDB AUTO_INCREMENT=200001 DEFAULT CHARSET=`utf8` DEFAULT COLLATE `utf8_general_ci` ROW_FORMAT= Dynamic comment = \\"\\" ;\\n'),
              errMsg?: string(name='ErrMsg', description='The error message.', example='get metric list fail'),
              errType?: string(name='ErrType', description='The error type.', example='ForeignKey'),
              logLevel?: string(name='LogLevel', description='The level of logs.', example='INFO'),
            }
          ](name='Logs', description='The operations logs of errors.'),
          names?: string(name='Names', description='The name of the subtask.', example='metricRuleTargets-20180308houe'),
          orderNum?: int32(name='OrderNum', description='The serial number of the subtask.', example='1'),
          parentObj?: string(name='ParentObj', description='This parameter will be removed in the future.', example='None'),
          repairMethod?: string(name='RepairMethod', description='The method to fix a precheck failure.', example='CHECK__ERROR_SAME_OBJ_REPAIR'),
          skip?: boolean(name='Skip', description='Indicates whether the subtask was ignored. Valid values:

*   **true**
*   **false**', example='True'),
          sourceSchema?: string(name='SourceSchema', description='The name of the database to which the object in the source instance belongs.', example='databasetest'),
          state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Suspending**: The subtask is paused.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
*   **Finished**: The subtask is complete.', example='Finished'),
          sub?: string(name='Sub', description='The sub-item progress of the subtask.

> If \\*\\*[]\\*\\* is returned, the subtask has no sub-item.', example='[]'),
          targetNames?: string(name='TargetNames', description='The names of the objects that are migrated or synchronized.', example='order'),
          total?: int32(name='Total', description='The total number of subtasks.', example='11'),
        }
      ](name='JobProgress', description='The subtasks and the progress of each subtask.'),
      state?: string(name='State', description='The status of the subtask. Valid values:

*   **NotStarted**: The subtask is not started.
*   **Suspending**: The subtask is paused.
*   **Checking**: The subtask is being checked.
*   **Migrating**: The subtask is in progress. Data is being migrated.
*   **Failed**: The subtask failed.
*   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
*   **Finished**: The subtask is complete.', example='Finished'),
      total?: int32(name='Total', description='The total number of entries that are returned.', example='11'),
    }
  ](name='SubDistributedJobStatus', description='The information about the distributed subtasks.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  total?: int32(name='Total', description='The total number of subtasks.', example='0'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of entries that are returned.', example='100'),
}

model DescribePreCheckStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreCheckStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePreCheckStatus  DescribePreCheckStatusRequest
  * @return DescribePreCheckStatusResponse
 */
async function describePreCheckStatus(request: DescribePreCheckStatusRequest): DescribePreCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtsl8zl9ek6292****', position='Query'),
}

model DescribeSubscriptionInstanceAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts.', example='1361234****,1371234****'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Indicates whether task latency is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. The unit is seconds and the value is an integer. The recommended value is 10 seconds.', example='10'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts.', example='1361234****,1371234****'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Indicates whether task status is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210ec2e116055198849072222d****'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID', description='The ID of the change tracking instance.', example='dtsl8zl9ek6292****'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.', example='test'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeSubscriptionInstanceAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionInstanceAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSubscriptionInstanceAlert  DescribeSubscriptionInstanceAlertRequest
  * @return DescribeSubscriptionInstanceAlertResponse
 */
async function describeSubscriptionInstanceAlert(request: DescribeSubscriptionInstanceAlertRequest): DescribeSubscriptionInstanceAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstanceAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstanceStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html) operation to query the instance ID.

This parameter is required.', example='dtsy0zz3t13h7d****', position='Query'),
}

model DescribeSubscriptionInstanceStatusResponseBody = {
  beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-03-15T08:25:34Z'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-03-23T07:30:31Z'),
  consumptionClient?: string(name='ConsumptionClient', description='The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-03-26T14:03:21Z'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if change tracking failed.', example='******'),
  payType?: string(name='PayType', description='The billing method of the change tracking instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0845D0A-6D36-4EEB-BE26-CF191E1A****'),
  sourceEndpoint?: {
    instanceID?: string(name='InstanceID', description='The ID of the instance that hosts the source database.', example='rm-bp1162kryivb8****'),
    instanceType?: string(name='InstanceType', description='The instance type of the source database.

>  This parameter is returned only for change tracking instances of the new version.', example='RDS'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  status?: string(name='Status', description='The status of the change tracking task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Abnormal**: The task is not running as expected.', example='Normal'),
  subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

>  This parameter is returned only if your change tracking instance is of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
  subscriptionDataType?: {
    DDL?: boolean(name='DDL', description='Indicates whether data definition language (DDL) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    DML?: boolean(name='DML', description='Indicates whether data manipulation language (DML) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='SubscriptionDataType', description='The types of operations that are tracked by the task.'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
    publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
    VPCHost?: string(name='VPCHost', description='The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-vpc.aliyuncs.com:18003'),
  }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID', description='The ID of the change tracking instance.', example='rm-bp1162kryivb8****'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.', example='dtstest'),
  subscriptionObject?: {
    synchronousObject?: [ 
    {
      databaseName?: string(name='DatabaseName', description='The name of the database to which the object belongs.', example='dtstestdata'),
      tableList?: {
        table?: [ string ](name='Table')
      }(name='TableList', description='The table name.'),
      wholeDatabase?: string(name='WholeDatabase', description='Indicates whether the data of an entire database is tracked. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    }
  ](name='SynchronousObject')
  }(name='SubscriptionObject', description='The objects for change tracking.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The ID of the change tracking task.', example='y0zz3t13h7d****'),
}

model DescribeSubscriptionInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionInstanceStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSubscriptionInstanceStatus  DescribeSubscriptionInstanceStatusRequest
  * @return DescribeSubscriptionInstanceStatusResponse
 */
async function describeSubscriptionInstanceStatus(request: DescribeSubscriptionInstanceStatusRequest): DescribeSubscriptionInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstancesRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/49442.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.

>  If you specify this parameter, DTS returns all the change tracking instances that match the specified name.', example='MySQL订阅', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.

This parameter is required.', example='testkey1'),
      value?: string(name='Value', description='The tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='Tags of the data migration instance, used as a filter. When this is not empty, only instances with this tag will be returned.', position='Query'),
}

model DescribeSubscriptionInstancesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of entries that can be displayed on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC3BAAF2-74E3-4471-8EB5-96202D6A****'),
  subscriptionInstances?: {
    subscriptionInstance?: [ 
    {
      beginTimestamp?: string(name='BeginTimestamp', description='The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T08:25:43Z'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint', description='The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T09:30:31Z'),
      consumptionClient?: string(name='ConsumptionClient', description='The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.', example='114.***.***.**:dts********'),
      endTimestamp?: string(name='EndTimestamp', description='The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T10:17:21Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if change tracking failed.', example='xxxxxxxx'),
      instanceCreateTime?: string(name='InstanceCreateTime', description='The time when the change tracking instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2021-06-21T02:48:20Z'),
      jobCreateTime?: string(name='JobCreateTime', description='The time when the change tracking task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-21T02:48:20Z'),
      payType?: string(name='PayType', description='The billing method of the change tracking instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
      sourceEndpoint?: {
        instanceID?: string(name='InstanceID', description='The ID of the source instance.', example='rm-bp1162kryivb8****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.

>  This parameter is returned only for change tracking instances of the new version.', example='RDS'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The status of the change tracking task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Starting**: The task is being started.
*   **Normal**: The task is running as expected.
*   **Abnormal**: The task is not running as expected.', example='Normal'),
      subscribeTopic?: string(name='SubscribeTopic', description='The topic of the change tracking instance.

>  This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.', example='cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2'),
      subscriptionDataType?: {
        DDL?: boolean(name='DDL', description='Indicates whether data definition language (DDL) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
        DML?: boolean(name='DML', description='Indicates whether data manipulation language (DML) operations are tracked. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      }(name='SubscriptionDataType', description='The types of operations that are tracked by the task.'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost', description='The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-internal.aliyuncs.com:18002'),
        publicHost?: string(name='PublicHost', description='The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****.aliyuncs.com:18001'),
        VPCHost?: string(name='VPCHost', description='The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.', example='dts-cn-****-vpc.aliyuncs.com:18003'),
      }(name='SubscriptionHost', description='The endpoint of the change tracking instance.'),
      subscriptionInstanceID?: string(name='SubscriptionInstanceID', description='The ID of the change tracking instance.', example='rm-bp1162kryivb8****'),
      subscriptionInstanceName?: string(name='SubscriptionInstanceName', description='The name of the change tracking instance.', example='dtstest'),
      subscriptionObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName', description='The name of the database to which the object belongs.', example='dtstestdata'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList', description='The table name.'),
          wholeDatabase?: string(name='WholeDatabase', description='Indicates whether the data of an entire database is tracked. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        }
      ](name='SynchronousObject')
      }(name='SubscriptionObject', description='The objects for change tracking.'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='testkey1'),
          value?: string(name='Value', description='The tag value that corresponds to the tag key.', example='testvalue1'),
        }
      ](name='Tag')
      }(name='Tags', description='The collection of tags.'),
    }
  ](name='SubscriptionInstance')
  }(name='SubscriptionInstances', description='The list of change tracking instances and the details of each instance.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of change tracking instances that belong to your Alibaba Cloud account.', example='1'),
}

model DescribeSubscriptionInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSubscriptionInstances  DescribeSubscriptionInstancesRequest
  * @return DescribeSubscriptionInstancesResponse
 */
async function describeSubscriptionInstances(request: DescribeSubscriptionInstancesRequest): DescribeSubscriptionInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionMetaRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the distributed change tracking instance.', example='dtsbr4m9luv2******', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the change tracking instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  sid: string(name='Sid', description='The ID of the consumer group.

This parameter is required.', example='z38m91gg2******', position='Query'),
  subMigrationJobIds?: map[string]any(name='SubMigrationJobIds', description='The IDs of all subtasks in the distributed change tracking task. Separate multiple subtask IDs with commas (,).

>  You must specify at least one of the SubMigrationJobIds and **Topics** parameters. We recommend that you specify the SubMigrationJobIds parameter.', example='z38m91gg2******', shrink='json', position='Query'),
  topics?: map[string]any(name='Topics', description='The topics of all subtasks in the distributed change tracking task. Separate multiple topics with commas (,).

>  You must specify at least one of the **SubMigrationJobIds** and Topics parameters. We recommend that you specify the **SubMigrationJobIds** parameter.', example='cn_hangzhou_rm_bp1n0x0x5tz******_dtstestdata_version2', shrink='json', position='Query'),
}

model DescribeSubscriptionMetaResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C12E7A51-09A4-5796-94BE-08B6DA******'),
  subscriptionMetaList?: [ 
    {
      checkpoint?: long(name='Checkpoint', description='The consumer offset of the subtask. It is a UNIX timestamp that is generated when the client consumes the first data record. Unit: seconds.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1610524452'),
      DBList?: string(name='DBList', description='The objects of the subtask. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).', example='{\\"dtstestdata\\":{\\"name\\":\\"dtstestdata\\",\\"all\\":false,\\"Table\\":{\\"order\\":{\\"name\\":\\"order\\",\\"all\\":true}}}}'),
      dProxyUrl?: string(name='DProxyUrl', description='The endpoint and port number of the change tracking instance.', example='dts-cn-hangzhou.aliyuncs.com:18001'),
      sid?: string(name='Sid', description='The consumer group ID of the subtask.', example='z38m91gg2******'),
      topic?: string(name='Topic', description='The topic of the subtask.', example='cn_hangzhou_rm_bp1n0x0x5tz******_dtstestdata_version2'),
    }
  ](name='SubscriptionMetaList', description='The details of the subtasks.'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeSubscriptionMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscriptionMetaResponseBody(name='body'),
}

/**
  * @description *   When Data Transmission Service (DTS) tracks data changes from a PolarDB-X 1.0 instance, data is distributed across the attached ApsaraDB RDS for MySQL instances. DTS runs a subtask for each ApsaraDB RDS for MySQL instance. You can call this operation to query the details of the subtasks in a distributed change tracking task.
  * *   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the ID of the change tracking instance and the ID of the consumer group.
  * @param request  the request parameters of DescribeSubscriptionMeta  DescribeSubscriptionMetaRequest
  * @return DescribeSubscriptionMetaResponse
 */
async function describeSubscriptionMeta(request: DescribeSubscriptionMetaRequest): DescribeSubscriptionMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionMeta', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSyncStatusRequest {
  direction?: string(name='Direction', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeSyncStatusResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  syncStatusList?: [ 
    {
      checkpoint?: long(name='Checkpoint'),
      code?: string(name='Code'),
      delay?: long(name='Delay'),
      jobId?: string(name='JobId'),
      rate?: string(name='Rate'),
      status?: string(name='Status'),
    }
  ](name='SyncStatusList'),
}

model DescribeSyncStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSyncStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSyncStatus  DescribeSyncStatusRequest
  * @return DescribeSyncStatusResponse
 */
async function describeSyncStatus(request: DescribeSyncStatusRequest): DescribeSyncStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSyncStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.

This parameter is required.', example='dtskxz1170c10p****', position='Query'),
}

model DescribeSynchronizationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone', description='The mobile phone numbers that receive latency-related alerts.', example='1361234****,1371234****'),
  delayAlertStatus?: string(name='DelayAlertStatus', description='Indicates whether task latency is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  delayOverSeconds?: string(name='DelayOverSeconds', description='The threshold for triggering latency alerts. Unit: seconds.', example='10'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorAlertPhone?: string(name='ErrorAlertPhone', description='The mobile phone numbers that receive status-related alerts.', example='1361234****,1371234****'),
  errorAlertStatus?: string(name='ErrorAlertStatus', description='Indicates whether task status is monitored. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='210ec20e16055205968635339d****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**

*   **Reverse**

> This parameter is returned only when the topology of data synchronization is two-way synchronization.', example='Forward'),
  synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='kxz1170c10p****'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.', example='Polar MySQL_TO_RDS MySQL'),
}

model DescribeSynchronizationJobAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynchronizationJobAlert  DescribeSynchronizationJobAlertRequest
  * @return DescribeSynchronizationJobAlertResponse
 */
async function describeSynchronizationJobAlert(request: DescribeSynchronizationJobAlertRequest): DescribeSynchronizationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.

This parameter is required.', example='dtsexjk1alb116****', position='Query'),
}

model DescribeSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E6EB407F-C59F-4682-A682-A00FA6A2****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable', description='Indicates whether image matching is enabled. Valid values:

*   **true**: Image matching is enabled.
*   **false**: Image matching is disabled.', example='true'),
}

model DescribeSynchronizationJobReplicatorCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynchronizationJobReplicatorCompare  DescribeSynchronizationJobReplicatorCompareRequest
  * @return DescribeSynchronizationJobReplicatorCompareResponse
 */
async function describeSynchronizationJobReplicatorCompare(request: DescribeSynchronizationJobReplicatorCompareRequest): DescribeSynchronizationJobReplicatorCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobReplicatorCompare', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.

The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.

This parameter is required.', example='dtsexjk1alb116****', position='Query'),
}

model DescribeSynchronizationJobStatusResponseBody = {
  checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest data record was synchronized.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1610616144'),
  dataInitialization?: string(name='DataInitialization', description='Indicates whether full data synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
    percent?: string(name='Percent', description='The progress of full data synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='200001'),
    status?: string(name='Status', description='The status of full data synchronization. Valid values:

*   **NotStarted**: Full data synchronization is not started.
*   **Migrating**: Full data synchronization is in progress.
*   **Failed**: Full data synchronization failed.
*   **Finished**: Full data synchronization is completed.', example='Finished'),
  }(name='DataInitializationStatus', description='The status of full data synchronization.'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest data record was synchronized.', example='1610709865'),
    delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
    delayMillis?: long(name='DelayMillis', description='The synchronization latency, in milliseconds.', example='856'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
    percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: %.', example='100'),
    status?: string(name='Status', description='The status of incremental data synchronization. Valid values:

*   **NotStarted**: Incremental data synchronization is not started.
*   **Migrating**: Incremental data synchronization is in progress.
*   **Failed**: Incremental data synchronization failed.
*   **Finished**: Incremental data synchronization is completed.', example='Finished'),
  }(name='DataSynchronizationStatus', description='The status of incremental data synchronization.'),
  delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
  delayMillis?: long(name='DelayMillis', description='The synchronization delay, in milliseconds.', example='506'),
  destinationEndpoint?: {
    engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the destination instance.', example='rm-bp162d4tp0500****'),
    instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
    port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
  }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
  expireTime?: string(name='ExpireTime', description='The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.

>  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.', example='2021-03-07T16:00:00Z'),
  payType?: string(name='PayType', description='The billing method of the data synchronization instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
  performance?: {
    FLOW?: string(name='FLOW', description='The data traffic that is synchronized per second. Unit: MB/s.', example='1'),
    RPS?: string(name='RPS', description='The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
  }(name='Performance', description='The performance of the data synchronization instance.'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
        itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
        repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
      }
    ](name='Detail', description='The result of each precheck item.'),
    percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
    status?: string(name='Status', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
  }(name='PrecheckStatus', description='The precheck status.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DACDF659-AFC6-4DC8-ADB8-4569419A4****'),
  sourceEndpoint?: {
    engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
    ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
    instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
    instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
    port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
    userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
  }(name='SourceEndpoint', description='The connection settings of the source instance.'),
  status?: string(name='Status', description='The status of the data synchronization task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is synchronizing data.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is completed.', example='synchronizing'),
  structureInitialization?: string(name='StructureInitialization', description='Indicates whether schema synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
    percent?: string(name='Percent', description='The progress of schema synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of tables whose schemas have been synchronized.', example='1'),
    status?: string(name='Status', description='The status of schema synchronization. Valid values:

*   **NotStarted**: Schema synchronization is not started.
*   **Migrating**: Schema synchronization is in progress.
*   **Failed**: Schema synchronization failed.
*   **Finished**: Schema synchronization is completed.', example='Finished'),
  }(name='StructureInitializationStatus', description='The status of schema synchronization.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**', example='Forward'),
  synchronizationJobClass?: string(name='SynchronizationJobClass', description='The specification of the data synchronization instance.', example='large'),
  synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtsexjk1alb116****'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.', example='dtstest'),
  synchronizationObjects?: [ 
    {
      newSchemaName?: string(name='NewSchemaName', description='The database name that is used in the destination instance.', example='newdtstestdatabase'),
      schemaName?: string(name='SchemaName', description='The name of the synchronized database.', example='dtstestdatabase'),
      tableExcludes?: [ 
        {
          tableName?: string(name='TableName', description='The name of the excluded table.', example='order'),
        }
      ](name='TableExcludes', description='The source tables that are excluded from the data synchronization task.'),
      tableIncludes?: [ 
        {
          tableName?: string(name='TableName', description='The name of the synchronized table.', example='customer'),
        }
      ](name='TableIncludes', description='The tables that are synchronized by the task.'),
    }
  ](name='SynchronizationObjects', description='The objects that are synchronized by the task.'),
  taskId?: string(name='TaskId', example='exjk1alb116****'),
}

model DescribeSynchronizationJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynchronizationJobStatus  DescribeSynchronizationJobStatusRequest
  * @return DescribeSynchronizationJobStatusResponse
 */
async function describeSynchronizationJobStatus(request: DescribeSynchronizationJobStatusRequest): DescribeSynchronizationJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobStatusListRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instances reside. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationJobIdListJsonStr: string(name='SynchronizationJobIdListJsonStr', description='The IDs of the data synchronization instances. The value is a JSON array. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance IDs.

This parameter is required.', example='["dtsexjk1alb116****","dtskfq1149w254****"]', position='Query'),
}

model DescribeSynchronizationJobStatusListResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of data synchronization instances displayed on one page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1413460B-138A-48D1-836C-B24EDDC1****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  synchronizationJobListStatusList?: [ 
    {
      synchronizationDirectionInfoList?: [ 
        {
          checkpoint?: string(name='Checkpoint', description='The UNIX timestamp generated when the latest data record was synchronized.

>  You can use a search engine to obtain a UNIX timestamp converter.', example='1610524452'),
          status?: string(name='Status', description='The status of the data synchronization task in this direction. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is synchronizing data.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is completed.', example='InitializeFailed'),
          synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**', example='Forward'),
        }
      ](name='SynchronizationDirectionInfoList', description='The details of data synchronization tasks in each direction.'),
      synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtsexjk1alb116****'),
    }
  ](name='SynchronizationJobListStatusList', description='The status of the data synchronization tasks.'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data synchronization instances.', example='2'),
}

model DescribeSynchronizationJobStatusListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobStatusListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynchronizationJobStatusList  DescribeSynchronizationJobStatusListRequest
  * @return DescribeSynchronizationJobStatusListResponse
 */
async function describeSynchronizationJobStatusList(request: DescribeSynchronizationJobStatusListRequest): DescribeSynchronizationJobStatusListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobStatusList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobsRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.

>  Fuzzy matching is supported.', example='dtstest', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.

This parameter is required.', example='testkey1'),
      value?: string(name='Value', description='The tag value. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='The tag key. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   This parameter cannot be an empty string.', position='Query'),
}

model DescribeSynchronizationJobsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The maximum number of entries that can be displayed on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='92E1E99D-5224-4AD3-8C94-23A3516B****'),
  synchronizationInstances?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd* *HH:mm:ss*.0 format (UTC+8).', example='2021-06-28 17:34:53.0'),
      dataInitialization?: string(name='DataInitialization', description='Indicates whether full data synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
        percent?: string(name='Percent', description='The progress of full data synchronization. Unit: %.', example='100'),
        progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='200001'),
        status?: string(name='Status', description='The status of full data synchronization. Valid values:

*   **NotStarted**: Full data synchronization is not started.
*   **Migrating**: Full data synchronization is in progress.
*   **Failed**: Full data synchronization failed.
*   **Finished**: Full data synchronization is completed.', example='Finished'),
      }(name='DataInitializationStatus', description='The status of full data synchronization.'),
      dataSynchronizationStatus?: {
        delay?: string(name='Delay', description='The synchronization latency.

>  This parameter is no longer available.', example='0'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.

>  This parameter is no longer available.', example='The task has failed for too long and cannot be restored'),
        percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: %.

>  This parameter is no longer available.', example='100'),
        status?: string(name='Status', description='The status of incremental data synchronization.

>  This parameter is no longer available.', example='Finished'),
      }(name='DataSynchronizationStatus', description='The status of incremental data synchronization.

>  This parameter and its sub-parameters are no longer available.'),
      delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
      destinationEndpoint?: {
        engineName?: string(name='EngineName', description='The database type of the destination instance.', example='MySQL'),
        ip?: string(name='IP', description='The endpoint of the destination instance.', example='172.16.88.***'),
        instanceId?: string(name='InstanceId', description='The ID of the destination instance.', example='rm-bp162d4tp0500****'),
        instanceType?: string(name='InstanceType', description='The type of the destination instance.', example='RDS'),
        port?: string(name='Port', description='The database service port of the destination instance.', example='3306'),
        userName?: string(name='UserName', description='The database account of the destination instance.', example='dtstest'),
      }(name='DestinationEndpoint', description='The connection settings of the destination instance.'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned if data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
      expireTime?: string(name='ExpireTime', description='The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.

>  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.', example='2021-07-07T16:00:00Z'),
      instanceCreateTime?: string(name='InstanceCreateTime', description='The time when the instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-28T09:36:32Z'),
      jobCreateTime?: string(name='JobCreateTime', description='The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.', example='2021-06-28T09:34:53Z'),
      payType?: string(name='PayType', description='The billing method of the data synchronization instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
      performance?: {
        FLOW?: string(name='FLOW', description='The data traffic that is synchronized per second. Unit: MB/s.', example='1'),
        RPS?: string(name='RPS', description='The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.', example='100'),
      }(name='Performance', description='The performance of the data synchronization instance.'),
      precheckStatus?: {
        detail?: [ 
          {
            checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
            errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.***.**\\" (using password: YES)'),
            itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
            repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
          }
        ](name='Detail', description='The result of each precheck item.'),
        percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
        status?: string(name='Status', description='The precheck result. Valid values:

*   **Success**: The task passed the precheck.
*   **Failed**: The task failed to pass the precheck.', example='Success'),
      }(name='PrecheckStatus', description='The precheck status.'),
      sourceEndpoint?: {
        engineName?: string(name='EngineName', description='The database type of the source instance.', example='MySQL'),
        ip?: string(name='IP', description='The endpoint of the source instance.', example='172.16.88.***'),
        instanceId?: string(name='InstanceId', description='The ID of the source instance.', example='rm-bp1i99e8l7913****'),
        instanceType?: string(name='InstanceType', description='The type of the source instance.', example='RDS'),
        port?: string(name='Port', description='The database service port of the source instance.', example='3306'),
        userName?: string(name='UserName', description='The database account of the source instance.', example='dtstest'),
      }(name='SourceEndpoint', description='The connection settings of the source instance.'),
      status?: string(name='Status', description='The status of the data synchronization task. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Initializing**: The task is performing initial synchronization.
*   **InitializeFailed**: Initial synchronization failed.
*   **Synchronizing**: The task is synchronizing data.
*   **Failed**: The task failed to synchronize data.
*   **Suspending**: The task is paused.
*   **Modifying**: The objects in the task are being modified.
*   **Finished**: The task is completed.', example='synchronizing'),
      structureInitialization?: string(name='StructureInitialization', description='Indicates whether schema synchronization is performed. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage', description='The error message returned if schema synchronization failed.', example='DTS-1020042 Execute sql error sql: ERROR: type "geometry" does not exist;'),
        percent?: string(name='Percent', description='The progress of schema synchronization. Unit: %.', example='100'),
        progress?: string(name='Progress', description='The number of tables whose schemas have been synchronized.', example='1'),
        status?: string(name='Status', description='The status of schema synchronization. Valid values:

*   **NotStarted**: Schema synchronization is not started.
*   **Migrating**: Schema synchronization is in progress.
*   **Failed**: Schema synchronization failed.
*   **Finished**: Schema synchronization is completed.', example='Finished'),
      }(name='StructureInitializationStatus', description='The status of schema synchronization.'),
      synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**', example='Forward'),
      synchronizationJobClass?: string(name='SynchronizationJobClass', description='The specification of the data synchronization instance.', example='large'),
      synchronizationJobId?: string(name='SynchronizationJobId', description='The ID of the data synchronization instance.', example='dtsexjk1alb116****'),
      synchronizationJobName?: string(name='SynchronizationJobName', description='The name of the data synchronization task.', example='dtstest'),
      synchronizationObjects?: [ 
        {
          newSchemaName?: string(name='NewSchemaName', description='The database name that is used in the destination instance.', example='newdtstestdatabase'),
          schemaName?: string(name='SchemaName', description='The name of the synchronized database.', example='dtstestdatabase'),
          tableExcludes?: [ 
            {
              tableName?: string(name='TableName', description='The name of the excluded table.', example='order'),
            }
          ](name='TableExcludes', description='The source tables that are excluded from the data synchronization task.'),
          tableIncludes?: [ 
            {
              tableName?: string(name='TableName', description='The name of the synchronized table.', example='customer'),
            }
          ](name='TableIncludes', description='The tables that are synchronized by the task.'),
        }
      ](name='SynchronizationObjects', description='The objects that are synchronized by the task.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='testkey1'),
          value?: string(name='Value', description='The tag value that corresponds to the tag key.', example='testvalue1'),
        }
      ](name='Tags', description='The collection of tags.'),
    }
  ](name='SynchronizationInstances', description='The list of data synchronization instances and the details of each instance.'),
  totalRecordCount?: long(name='TotalRecordCount', description='The total number of data synchronization instances that belong to your Alibaba Cloud account.', example='100'),
}

model DescribeSynchronizationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynchronizationJobs  DescribeSynchronizationJobsRequest
  * @return DescribeSynchronizationJobsResponse
 */
async function describeSynchronizationJobs(request: DescribeSynchronizationJobsRequest): DescribeSynchronizationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationObjectModifyStatusRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  taskId: string(name='TaskId', description='The task ID, which is returned after you call the [ModifySynchronizationObject](https://help.aliyun.com/document_detail/49451.html) operation to modify the objects to be synchronized.

This parameter is required.', example='k71r16fj13g****', position='Query'),
}

model DescribeSynchronizationObjectModifyStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if full data synchronization failed.', example='java.lang.NumberFormatException: For input string: ""'),
    percent?: string(name='Percent', description='The progress of full data synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of records that have been synchronized during full data synchronization.', example='39754'),
    status?: string(name='Status', description='The status of full data synchronization. Valid values:

*   **NotStarted**: Full data synchronization is not started.
*   **Migrating**: Full data synchronization is in progress.
*   **Failed**: Full data synchronization failed.
*   **Finished**: Full data synchronization is completed.', example='Finished'),
  }(name='DataInitializationStatus', description='The status of full data synchronization.'),
  dataSynchronizationStatus?: {
    delay?: string(name='Delay', description='The synchronization latency, in seconds.', example='0'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if incremental data synchronization failed.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
    percent?: string(name='Percent', description='The progress of incremental data synchronization. Unit: %.', example='100'),
    status?: string(name='Status', description='The status of incremental data synchronization. Valid values:

*   **NotStarted**: Incremental data synchronization is not started.
*   **Migrating**: Incremental data synchronization is in progress.
*   **Failed**: Incremental data synchronization failed.
*   **Finished**: Incremental data synchronization is completed.', example='Migrating'),
  }(name='DataSynchronizationStatus', description='The status of incremental data synchronization.

>  This parameter and its sub-parameters will be removed in the future.'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to modify the objects to be synchronized.', example='DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus', description='The precheck result. Valid values:

*   Success: The task passed the precheck.
*   Failed: The task failed to pass the precheck.', example='Success'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned if the task failed to pass the precheck.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.', example='Original error: Access denied for user \\"dtstest\\"@\\"100.104.xxx.xx\\" (using password: YES)'),
        itemName?: string(name='ItemName', description='The name of the precheck item.', example='CHECK_CONN_SRC'),
        repairMethod?: string(name='RepairMethod', description='The method to fix the precheck failure.

>  This parameter is returned only if the return value of the **CheckStatus** parameter is Failed.', example='CHECK_ERROR_DEST_CONN_REPAIR2'),
      }
    ](name='Detail', description='The result of each precheck item.'),
    percent?: string(name='Percent', description='The precheck progress. Unit: %.', example='100'),
    status?: string(name='Status', description='The precheck status.', example='Finished'),
  }(name='PrecheckStatus', description='The precheck status.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B38C644B-4395-4F6F-86E3-592F26BE****'),
  status?: string(name='Status', description='The status of the task that changes the objects to be synchronized. Valid values:

*   **NotStarted**: The task is not started.
*   **Prechecking**: The task is being prechecked.
*   **PrecheckFailed**: The task failed to pass the precheck.
*   **Migrating**: The task is running.
*   **Failed**: The task failed.
*   **Finished**: The task is completed.', example='Finished'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage', description='The error message returned if schema synchronization failed.', example='DTS-1020042 Execute sql error sql: Table \\"customer\\" already exists'),
    percent?: string(name='Percent', description='The progress of schema synchronization. Unit: %.', example='100'),
    progress?: string(name='Progress', description='The number of tables whose schemas have been synchronized.', example='1'),
    status?: string(name='Status', description='The status of schema synchronization. Valid values:

*   **NotStarted**: Schema synchronization is not started.
*   **Migrating**: Schema synchronization is in progress.
*   **Failed**: Schema synchronization failed.
*   **Finished**: Schema synchronization is completed.', example='Finished'),
  }(name='StructureInitializationStatus', description='The status of schema synchronization.'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DescribeSynchronizationObjectModifyStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynchronizationObjectModifyStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynchronizationObjectModifyStatus  DescribeSynchronizationObjectModifyStatusRequest
  * @return DescribeSynchronizationObjectModifyStatusResponse
 */
async function describeSynchronizationObjectModifyStatus(request: DescribeSynchronizationObjectModifyStatusRequest): DescribeSynchronizationObjectModifyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationObjectModifyStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysRequest {
  category?: string(name='Category', description='The type of the tag. Valid values:

*   **Custom**: The tag is added by a user.
*   **System**: The tag is added by the system.

>  By default, if the parameter is left empty, custom tags and system tags are returned.', example='Custom', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1. This parameter is used together with PageSize.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of tags to return on each page if the DTS instance has multiple tags. Default value: 20.', example='20', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.', example='dtsl5o11f9029c****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
}

model DescribeTagKeysResponseBody = {
  category?: string(name='Category', description='The type of the tag.', example='Custom'),
  pageNumber?: int32(name='PageNumber', description='The start page of the returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of tags returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD110813-9AD6-5F07-BFC8-4C841309****'),
  tagKeys?: [ string ](name='TagKeys', description='The key of the tag.'),
  totalCount?: int32(name='TotalCount', description='The total number of returned tag keys.', example='10'),
}

model DescribeTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagKeys  DescribeTagKeysRequest
  * @return DescribeTagKeysResponse
 */
async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagValuesRequest {
  category?: string(name='Category', description='The type of the tag key. Valid values:

*   **Custom**: The tag key is created by users.
*   **System**: The tag key is created by the system.

>  By default, if the parameter is left empty, both custom tag keys and system tag keys are returned.', example='Custom', position='Query'),
  key?: string(name='Key', description='The tag key.

>  This parameter is required.', example='owner', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the start page to return for a tag key that has multiple values. The valid value ranges from 1 to the maximum value of the INTEGER data type. This parameter is often used with the PageSize parameter. Default value: 1.', example='1', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of tag values to return each time for a tag key that has multiple values. Default value: 20.', example='20', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

>  If this parameter is left empty, the values of all tag keys of the current user are returned.', example='dtsl5o11f9029c****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
}

model DescribeTagValuesResponseBody = {
  category?: string(name='Category', description='The type of the tag key.', example='Custom'),
  pageNumber?: int32(name='PageNumber', description='The start page of the returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of tag values returned on each page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD110813-9AD6-5F07-BFC8-4C841309****'),
  tagValues?: [ string ](name='TagValues', description='The tag values that are associated with the tag key.'),
  totalCount?: int32(name='TotalCount', description='The total number of tag values that are associated with the tag key.', example='13'),
}

model DescribeTagValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagValuesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagValues  DescribeTagValuesRequest
  * @return DescribeTagValuesResponse
 */
async function describeTagValues(request: DescribeTagValuesRequest): DescribeTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagValues', 'POST', '/', 'json', false, 'json', request);
}

model DetachGadInstanceDbMemberRequest {
  instanceId?: string(name='InstanceId', example='gad-bp162d4tp0500****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****', position='Query'),
  slaveDbInstanceId?: string(name='SlaveDbInstanceId', example='rm-sdfghjk****', position='Query'),
}

model DetachGadInstanceDbMemberResponseBody = {
  createTime?: long(name='CreateTime', example='2021-06-28 17:34:53.0'),
  dynamicCode?: string(name='DynamicCode', example='403'),
  dynamicMessage?: string(name='DynamicMessage', example='****'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instanceId?: string(name='InstanceId', example='gad-bp1i99e8l7913****'),
  instanceName?: string(name='InstanceName', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='6063641E-BAD1-4BA7-B70B-26FFFD18****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
  slaveDbInstanceId?: string(name='SlaveDbInstanceId', example='rm-bp1i99e8l7913****'),
  success?: string(name='Success', example='true'),
}

model DetachGadInstanceDbMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachGadInstanceDbMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachGadInstanceDbMember  DetachGadInstanceDbMemberRequest
  * @return DetachGadInstanceDbMemberResponse
 */
async function detachGadInstanceDbMember(request: DetachGadInstanceDbMemberRequest): DetachGadInstanceDbMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachGadInstanceDbMember', 'POST', '/', 'json', false, 'json', request);
}

model InitDtsRdsInstanceRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data synchronization task.', example='dtszvxa4qmot6p****', position='Query'),
  endpointCenId?: string(name='EndpointCenId', description='If the node is a self-managed MySQL database that is connected over CEN, you must specify the ID of the CEN instance.

> You must specify the **EndpointRegion** and **EndpointInstanceId** parameters or the EndpointCenId parameter based on the type of the node.', example='cen-9kqshqum*******', position='Query'),
  endpointInstanceId?: string(name='EndpointInstanceId', description='If the node is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.

> *   You must also specify the **EndpointRegion** parameter.
>*   You must specify the EndpointInstanceId parameter or the **EndpointCenId** parameter based on the type of the node.', example='rm-bp1162kryivb8****', position='Query'),
  endpointInstanceType?: string(name='EndpointInstanceType', description='The type of the node. Valid values:

*   **RDS**: an ApsaraDB RDS for MySQL instance
*   **CEN**: a self-managed MySQL database that is connected over CEN', example='RDS', position='Query'),
  endpointRegion?: string(name='EndpointRegion', description='If the node is an ApsaraDB RDS for MySQL instance, you must specify the region in which the ApsaraDB RDS for MySQL instance resides.

> *   You must also specify the **EndpointInstanceId** parameter.
>*   You must specify the EndpointRegion parameter or the **EndpointCenId** parameter based on the type of the node.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the active geo-redundancy database cluster resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model InitDtsRdsInstanceResponseBody = {
  adminAccount?: string(name='AdminAccount', description='The built-in account that is used by DTS to connect to the node.', example='rdsdt_dtsacct'),
  adminPassword?: string(name='AdminPassword', description='The password of the built-in account.', example='1jecpqrtc****'),
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7796ECE0-9C17-5E4D-9CE6-B7EC825A****'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model InitDtsRdsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitDtsRdsInstanceResponseBody(name='body'),
}

/**
  * @description *   The node must be an ApsaraDB RDS for MySQL instance or a self-managed MySQL database that is connected over Cloud Enterprise Network (CEN).
  * *   This operation is used to initialize the built-in account named rdsdt_dtsacct on a node of an active geo-redundancy database cluster. DTS uses this account to connect to the node and perform data synchronization tasks.
  * @param request  the request parameters of InitDtsRdsInstance  InitDtsRdsInstanceRequest
  * @return InitDtsRdsInstanceResponse
 */
async function initDtsRdsInstance(request: InitDtsRdsInstanceRequest): InitDtsRdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitDtsRdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListDedicatedClusterRequest {
  orderColumn?: string(name='OrderColumn', description='The basis on which the retrieved entries are sorted if multiple DTS dedicated clusters are returned. Valid values:

*   **gmtCreated**: the time when a cluster was created.
*   **orderCount**: the number of nodes in a cluster.', example='gmtCreated', position='Query'),
  orderDirection?: string(name='OrderDirection', description='The order in which you want to sort the retrieved entries. Valid values:

*   asc: sorts the retrieved entries in ascending order. This is the default value.
*   desc: sorts the retrieved entries in descending order.', example='asc', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value of this parameter must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of clusters to return on each page.', example='10', position='Query'),
  params?: string(name='Params', description='The content of the query condition.

>  You must set the **Type parameter** to specify the type of the query condition.', example='dtspk3f13r731m****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfntftbiobqyky', position='Query'),
  state?: string(name='State', description='The status of the cluster. Valid values:

*   **init**: The cluster is being initialized.
*   **schedule**: The cluster is pending scheduling.
*   **running**: The cluster is running.
*   **upgrade**: The cluster is being upgraded.
*   **downgrade**: The cluster is being downgraded.
*   **locked**: The cluster is locked.
*   **releasing**: The cluster is being released.
*   **released**: The cluster is released.', example='init', position='Query'),
  type?: string(name='Type', description='The type of the query condition. Valid values:

*   **NAME**: the name of the cluster.
*   **INSTANCE**: the ID of a cluster instance.
*   **DEDICAETEDCLUSTERID**: the ID of a dedicated cluster.

>  You must specify the query condition by using the **Params** parameter.', example='NAME', position='Query'),
}

model ListDedicatedClusterResponseBody = {
  dedicatedClusterStatusList?: {
    dedicatedClusterStatus?: [ 
    {
      cpuUtilization?: long(name='CpuUtilization', description='The CPU utilization, in percentage.', example='30'),
      dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtscluster*******'),
      dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='daily_test'),
      diskUtilization?: long(name='DiskUtilization', description='The disk usage.', example='50'),
      dtsInstanceID?: string(name='DtsInstanceID', description='The ID of the DTS instance.', example='dtsi03e3zty16i****'),
      du?: long(name='Du', description='The number of DTS units (DUs).', example='30'),
      duUtilization?: long(name='DuUtilization', description='The DU usage, in percentage.', example='16.6667'),
      gmtCreated?: long(name='GmtCreated', description='The time when the cluster was created.', example='1647424384606'),
      memUtilization?: long(name='MemUtilization', description='The memory usage.', example='20'),
      nodeCount?: long(name='NodeCount', description='The number of nodes in the cluster.', example='5'),
      oversoldDu?: long(name='OversoldDu', description='The number of over-provisioned DUs.', example='60'),
      regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides.', example='cn-hangzhou'),
      state?: string(name='State', description='The status of the cluster. Valid values:

*   **init**: The cluster is being initialized.
*   **schedule**: The cluster is pending scheduling.
*   **running**: The cluster is running.
*   **upgrade**: The cluster is being upgraded.
*   **downgrade**: The cluster is being downgraded.
*   **locked**: The cluster is locked.
*   **releasing**: The cluster is being released.
*   **released**: The cluster is released.', example='init'),
      totalCpuCore?: long(name='TotalCpuCore', description='The total number of CPU cores.', example='100'),
      totalDiskGBSize?: long(name='TotalDiskGBSize', description='The total disk capacity. Unit: GB.', example='2048'),
      totalMemGBSize?: long(name='TotalMemGBSize', description='The total memory capacity. Unit: GB.', example='256'),
      usedCpuCore?: long(name='UsedCpuCore', description='The number of used CPU cores.', example='30'),
      usedDiskGBSize?: long(name='UsedDiskGBSize', description='The used disk capacity. Unit: GB.', example='1024'),
      usedDu?: long(name='UsedDu', description='The number of used DUs.', example='5'),
      usedMemGBSize?: long(name='UsedMemGBSize', description='The used memory capacity. Unit: GB.', example='128'),
    }
  ](name='DedicatedClusterStatus')
  }(name='DedicatedClusterStatusList', description='The statuses of all clusters.'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of clusters that meet the query condition.', example='15'),
}

model ListDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDedicatedClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDedicatedCluster  ListDedicatedClusterRequest
  * @return ListDedicatedClusterResponse
 */
async function listDedicatedCluster(request: ListDedicatedClusterRequest): ListDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The query token.

>  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.', example='212db86sca4384811e0b5e8707ec2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The instance ID for data migration, synchronization, and subscription, which can be obtained by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).  > - N indicates the Nth instance ID being passed. For example, ResourceId.0 represents the first instance ID; ResourceId.1 represents the second instance ID. Up to 50 instance IDs can be queried simultaneously. - At least one of this parameter and **Tag.N.Key** must be provided.', example='dtsntk10k6r12v****', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.

This parameter is required.', example='ALIYUN::DTS::INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
*   You must specify at least one of the **ResourceId.N** and Tag.N.Key parameters. The parameters cannot be empty strings.', example='testkey1'),
      value?: string(name='Value', description='The tag value.

> 
*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
*   This parameter can be an empty string.', example='testvalue1'),
    }
  ](name='Tag', description='The value corresponding to the tag key.', position='Query'),
}

model ListTagResourcesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  nextToken?: string(name='NextToken', description='The query token.

>  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.', example='212db86sca4384811e0b5e8707ec2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='609AD332-F2B1-48B7-BF43-41FEE641****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the DTS instance.', example='dtsntk10k6r12v****'),
      resourceType?: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE'),
      tagKey?: string(name='TagKey', description='The tag key.', example='testkey1'),
      tagValue?: string(name='TagValue', description='The tag value that corresponds to the tag key.', example='testvalue1'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The collection of tags.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @description ****
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumerChannelRequest {
  consumerGroupId: string(name='ConsumerGroupId', description='The ID of the consumer group. You can call the [DescribeConsumerChannel](https://help.aliyun.com/document_detail/264169.html) operation to query the consumer group ID.

This parameter is required.', example='dtsor2y66j4219****', position='Query'),
  consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.', example='dtstest', position='Query'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword', description='The new password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.', example='Test123456', position='Query'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The new username of the consumer group.

*   A username can contain one or more of the following character types: uppercase letters, lowercase letters, digits, and underscores (_).
*   A username cannot exceed 16 characters in length.', example='dtstest', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='dtsboss6pn1w73****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.', example='boss6pn1w73****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ModifyConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='055CAF9B-C15D-4799-BB9E-E62D417****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyConsumerChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConsumerChannelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyConsumerChannel  ModifyConsumerChannelRequest
  * @return ModifyConsumerChannelResponse
 */
async function modifyConsumerChannel(request: ModifyConsumerChannelRequest): ModifyConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumerGroupPasswordRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumerGroupID: string(name='ConsumerGroupID', description='The ID of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the consumer group ID.

This parameter is required.', example='dtswc411cg617p****', position='Query'),
  consumerGroupName?: string(name='ConsumerGroupName', description='The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.', example='dtstest', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', description='The new password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.

This parameter is required.', example='Test123456', position='Query'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName', description='The username of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the username.', example='dtstest', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.

This parameter is required.', example='dtsg2m10r1x15a****', position='Query'),
  consumerGroupNewPassword: string(name='consumerGroupNewPassword', description='The new password of the consumer group.
 
*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.

This parameter is required.', example='Test654321', position='Query'),
}

model ModifyConsumerGroupPasswordResponseBody = {
  errCode?: string(name='ErrCode', description='The current password of the consumer group.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The username of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the username.', example='A06B5CFF-9576-4BC1-BE62-A3D43E1F****'),
  success?: string(name='Success', description='The new password of the consumer group.

*   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
*   A password must be 8 to 32 characters in length.', example='true'),
}

model ModifyConsumerGroupPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConsumerGroupPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyConsumerGroupPassword  ModifyConsumerGroupPasswordRequest
  * @return ModifyConsumerGroupPasswordResponse
 */
async function modifyConsumerGroupPassword(request: ModifyConsumerGroupPasswordRequest): ModifyConsumerGroupPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumerGroupPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumptionTimestampRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  consumptionTimestamp: string(name='ConsumptionTimestamp', description='The consumption checkpoint. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.

This parameter is required.', example='2019-10-15T17:20:03Z', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtsg2m10r1x15a****', position='Query'),
}

model ModifyConsumptionTimestampResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABBACEFC-CBA9-4F80-A337-42F202F5****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyConsumptionTimestampResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConsumptionTimestampResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyConsumptionTimestamp  ModifyConsumptionTimestampRequest
  * @return ModifyConsumptionTimestampResponse
 */
async function modifyConsumptionTimestamp(request: ModifyConsumptionTimestampRequest): ModifyConsumptionTimestampResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumptionTimestamp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedClusterRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='dtscluster_h3fl1cs217sx952', position='Query'),
  dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='dtscluster_test_001', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='rm-bp1162kryivb8****', position='Query'),
  oversoldRatio?: int32(name='OversoldRatio', description='The overcommit ratio. Unit: %.', example='150', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Data Transmission Service (DTS) instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ModifyDedicatedClusterResponseBody = {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.', example='dtscluster_h3fl1cs217sx952'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDedicatedClusterResponseBody(name='body'),
}

/**
  * @description You can modify only the overcommit ratio.
  * @param request  the request parameters of ModifyDedicatedCluster  ModifyDedicatedClusterRequest
  * @return ModifyDedicatedClusterResponse
 */
async function modifyDedicatedCluster(request: ModifyDedicatedClusterRequest): ModifyDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobConfigRequest {
  dtsJobId?: string(name='DtsJobId', description='DTS job ID, which can be queried by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).', example='lxsn87r328d****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  parameters?: string(name='Parameters', description='The parameters that you want to modify. Specify a JSON string. For more information, see [Parameters](https://help.aliyun.com/document_detail/2536412.html).', example='[{\\"module\\":\\"07\\",\\"name\\":\\"sink.connection.idle.second\\",\\"value\\":60},{\\"module\\":\\"07\\",\\"name\\":\\"sink.batch.size.maximum\\",\\"value\\":64}]', position='Query'),
  regionId?: string(name='RegionId', description='The region where the instance is located. For more details, see [List of Supported Regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ModifyDtsJobConfigResponseBody = {
  requestId?: string(name='RequestId', description='request ID', example='068FA72F-4800-4A54-90BB-94806068****'),
}

model ModifyDtsJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDtsJobConfig  ModifyDtsJobConfigRequest
  * @return ModifyDtsJobConfigResponse
 */
async function modifyDtsJobConfig(request: ModifyDtsJobConfigRequest): ModifyDtsJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobDedicatedClusterRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The dedicated cluster ID.', example='dtsxxxx', position='Query'),
  dtsJobIds?: string(name='DtsJobIds', description='The DTS task IDs. The value can be a JSON array that consists of multiple DTS task IDs. Separate the IDs with commas (,).', example='["dtsxxxx01", "dtsxxx02"]', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides.

> For information about the regions that support dedicated clusters, see [DTS dedicated cluster](https://help.aliyun.com/document_detail/417481.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ModifyDtsJobDedicatedClusterResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service.', example='500'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace %s in **ErrMessage**.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: long(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDtsJobDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobDedicatedClusterResponseBody(name='body'),
}

/**
  * @description > After a DTS task is migrated from a dedicated cluster to a shared cluster, the task is billed on a pay-as-you-go basis.
  * @param request  the request parameters of ModifyDtsJobDedicatedCluster  ModifyDtsJobDedicatedClusterRequest
  * @return ModifyDtsJobDedicatedClusterResponse
 */
async function modifyDtsJobDedicatedCluster(request: ModifyDtsJobDedicatedClusterRequest): ModifyDtsJobDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobDuLimitRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.

This parameter is required.', example='dtsxxx', position='Query'),
  duLimit: long(name='DuLimit', description='The upper limit of DUs for the DTS task.

>  Minimum value: **1**.

This parameter is required.', example='1', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ModifyDtsJobDuLimitResponseBody = {
  code?: string(name='Code', description='The error code returned by the backend service. The number is incremented.', example='500'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: long(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDtsJobDuLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobDuLimitResponseBody(name='body'),
}

/**
  * @description *   DTS allows you to upgrade or downgrade the configurations of DTS instances in a dedicated cluster. You can adjust the resources that are occupied for task execution to dynamically adjust the number of tasks that can be scheduled in the cluster. This way, you can reduce the total number of DUs required for the cluster or release DUs.
  * *   Before you modify the upper limit of DUs for a DTS task, make sure that sufficient DUs are available.
  * @param request  the request parameters of ModifyDtsJobDuLimit  ModifyDtsJobDuLimitRequest
  * @return ModifyDtsJobDuLimitResponse
 */
async function modifyDtsJobDuLimit(request: ModifyDtsJobDuLimitRequest): ModifyDtsJobDuLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobDuLimit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobEndpointRequest {
  aliyunUid?: string(name='AliyunUid', description='The ID of the Alibaba Cloud account (primary account) to which the database instance belongs.
>  Passing this parameter indicates that cross-Alibaba Cloud account data synchronization will be performed, and you also need to pass the **RoleName** parameter.', example='150780020300****', position='Query'),
  database?: string(name='Database', description='When the database type is **PostgreSQL**, **PolarDB for PostgreSQL**, or **AnalyticDB PostgreSQL**, it represents the database name; when the database type is **MongoDB**, it represents the authentication database name.
> This parameter is only available and must be provided when the database type is **PostgreSQL**, **PolarDB for PostgreSQL**, **AnalyticDB PostgreSQL**, or **MongoDB**.', example='admin', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a precheck. Valid values:

*   **true**: Yes. After the precheck is passed, the database is not changed.
*   **false** (default): No. After the precheck is passed, the system changes the original database of the DTS task and runs the task.', example='true', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the DTS instance. If this parameter is not provided, **DtsJobId** must be specified.', example='dtsaw012y2g15q****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='DTS job ID, which can be queried by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).
> If this parameter is not provided, **DtsInstanceId** must be filled in.', example='m4312mab158****', position='Query'),
  endpoint: string(name='Endpoint', description='The database instance to be modified, with values:
- **src**: Source database instance. - **dest**: Target database instance.

This parameter is required.', example='src', position='Query'),
  endpointInstanceId?: string(name='EndpointInstanceId', description='ID of the database instance.', example='rm-bp10k50h8374w****', position='Query'),
  endpointInstanceType: string(name='EndpointInstanceType', description='The type of the database. Valid values:

*   **rds**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, or ApsaraDB RDS for PostgreSQL instance.
*   **polardb**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster.
*   **mongodb**: ApsaraDB for MongoDB replica set instance.
*   **distributed_mongodb**: ApsaraDB for MongoDB sharded cluster instance.
*   **greenplum**: AnalyticDB for PostgreSQL instance.
*   **kafka**: ApsaraMQ for Kafka instance.
*   **ecs**: self-managed database that is hosted on an Elastic Compute Service (ECS) instance. If you set this parameter to ecs, the database must be the supported one.
*   **express**: database that is connected over Express Connect. If you set this parameter to express, the database must be the supported one.
*   **other**: database that is connected over Internet. If you set this parameter to other, the database must be the supported one.

> 

*   The following types of databases are supported: **MySQL**, **PolarDB for MySQL**, **PostgreSQL**, **PolarDB for PostgreSQL**, **MongoDB**, **SQL Server**, **Kafka**, and **AnalyticDB for PostgreSQL**.

*   If the original database is an ApsaraDB for MongoDB sharded cluster instance, the new database must have the same number of shards as the original database.
*   If the database that you want to change is a source **PostgreSQL** database, you must make sure that the latency of the DTS instance is less than 30 seconds and no data is written to the source database during the change. Otherwise, data inconsistency may occur.
*   The value of this parameter is case-insensitive.

This parameter is required.', example='rds', position='Query'),
  endpointIp?: string(name='EndpointIp', description='The IP of the database instance.', example='172.168.XX.XXX', position='Query'),
  endpointPort?: string(name='EndpointPort', description='port of the database instance.', example='3306', position='Query'),
  endpointRegionId?: string(name='EndpointRegionId', description='The ID of the region in which the database resides.', example='cn-hangzhou', position='Query'),
  modifyAccount?: boolean(name='ModifyAccount', description='Specifies whether to change the password of the database account. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  password?: string(name='Password', description='The password of the database account.

>  This parameter is valid only if **ModifyAccount** is set to **true**.', example='DTStest****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  roleName?: string(name='RoleName', description='Cross Alibaba Cloud account role name. When performing data synchronization across Alibaba Cloud accounts, this parameter must be passed. For the required permissions and authorization methods for this role, please refer to [How to Configure RAM Authorization for Cross-Account Data Migration or Synchronization](https://help.aliyun.com/document_detail/48468.html).', example='ram-for-dts', position='Query'),
  shardPassword?: string(name='ShardPassword', description='The account password of the shard of the ApsaraDB for MongoDB sharded cluster instance.

> 

*   This parameter is valid and required only if the source database is an ApsaraDB for MongoDB sharded cluster instance.

*   This parameter is valid only if **ModifyAccount** is set to **true**.', example='DTStest****', position='Query'),
  shardUsername?: string(name='ShardUsername', description='The account username of the shard of the ApsaraDB for MongoDB sharded cluster instance.

> 

*   This parameter is valid and required only if the source database is an ApsaraDB for MongoDB sharded cluster instance.

*   This parameter is valid only if **ModifyAccount** is set to **true**.', example='shard', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='Synchronization direction, with values:
- **Forward** (default): Forward. - **Reverse**: Reverse.', example='Forward', position='Query'),
  username?: string(name='Username', description='The database account.

>  This parameter is valid only if **ModifyAccount** is set to **true**.', example='dtstest', position='Query'),
}

model ModifyDtsJobEndpointResponseBody = {
  errCode?: string(name='ErrCode', description='Error code returned when the call fails.', example='DTS.Msg.InvalidEndpoint'),
  errMessage?: string(name='ErrMessage', description='Error message returned when the call fails.', example='The endpoint is invalid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='Status code.', example='200'),
  requestId?: string(name='RequestId', description='request ID', example='3FA98DF2-2F81-51FF-8A38-AA5112DD****'),
  success?: boolean(name='Success', description='Whether the request was successful.', example='true'),
}

model ModifyDtsJobEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobEndpointResponseBody(name='body'),
}

/**
  * @description >  After the database is changed, Data Transmission Service (DTS) rolls back the incremental write offset for 10 seconds. If the synchronized or migrated data does not have a primary key, make sure that no data is written to the source database while the source or destination database is being replaced. Otherwise, duplicate data may exist.
  * @param request  the request parameters of ModifyDtsJobEndpoint  ModifyDtsJobEndpointRequest
  * @return ModifyDtsJobEndpointResponse
 */
async function modifyDtsJobEndpoint(request: ModifyDtsJobEndpointRequest): ModifyDtsJobEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobNameRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the DTS task. The DTS task can be a data migration, data synchronization, or change tracking task.

This parameter is required.', example='l3m1213ye7l****', position='Query'),
  dtsJobName: string(name='DtsJobName', description='The new name of the DTS task.

>  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.

This parameter is required.', example='dtstest', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-beijing', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-aekzfkjjb5gyy6i', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model ModifyDtsJobNameResponseBody = {
  code?: string(name='Code', description='The error code. This parameter is going to be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.

>  If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** in the request is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C498360-7892-433C-847A-BA71A850****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyDtsJobNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDtsJobName  ModifyDtsJobNameRequest
  * @return ModifyDtsJobNameResponse
 */
async function modifyDtsJobName(request: ModifyDtsJobNameRequest): ModifyDtsJobNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobPasswordRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.

>  You can call the [DescribeMigrationJobs](https://help.aliyun.com/document_detail/208139.html), [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html), or [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the DTS task. The DTS task can be a data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  endpoint?: string(name='Endpoint', description='The database to which the password belongs. Valid values:

*   **src**: source database.
*   **dest**: destination database.

>  This parameter is required.', example='src', position='Query'),
  password?: string(name='Password', description='The new password.

>  This parameter is required and cannot be set to a value that is the same as the current password.', example='Test123456', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='Synchronization direction, with values:
- **Forward** (default): Forward. - **Reverse**: Reverse.', example='Forward', position='Query'),
  userName?: string(name='UserName', description='The account of the source or destination database.

>  This parameter is required.', example='dtstest', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='false', position='Query'),
}

model ModifyDtsJobPasswordResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.

>  If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** in the request is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message that is returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C498360-7892-433C-847A-BA71A850****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyDtsJobPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDtsJobPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDtsJobPassword  ModifyDtsJobPasswordRequest
  * @return ModifyDtsJobPasswordResponse
 */
async function modifyDtsJobPassword(request: ModifyDtsJobPasswordRequest): ModifyDtsJobPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDynamicConfigRequest {
  configList?: string(name='ConfigList', description='The specific throttling configuration.

*   **dts.datamove.blaster.qps.max**: The rate at which queries are made to the source database per second.
*   **dts.datamove.source.rps.max**: The number of rows that are fully synchronized or migrated per second.
*   **dts.datamove.source.bps.max**: the amount of data processed per second for full synchronization or migration. Unit: MB.

> 

*   If you set the **JobCode** parameter to **03**, you need to specify **true** for the **EnableLimit** parameter. Otherwise, the configuration cannot take effect.

*   If you set the **JobCode** parameter to **04** or **07**, you only need to specify the **dts.datamove.source.rps.max** and **dts.datamove.source.bps.max** parameters.
*   A value of \\*\\*-1\\*\\* indicates no rate limit.', example='{\\"dts.datamove.source.rps.max\\":5000,\\"dts.datamove.source.bps.max\\":10485760}', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or synchronization task.

>  You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='ta7w132u12h****', position='Query'),
  enableLimit?: boolean(name='EnableLimit', description='Specifies whether to enable throttling for data synchronization or migration. Valid values: **true** and **false**.

>  Only needs to be configured when the **JobCode** parameter is set to **03**.', example='true', position='Query'),
  jobCode: string(name='JobCode', description='The task type. Valid values:

*   **03**: a full data synchronization or full data migration task.
*   **04**: an incremental data migration task.
*   **07**: an incremental data synchronization task.

This parameter is required.', example='07', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz6zsi7ce5rpy', position='Query'),
}

model ModifyDynamicConfigResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** value is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request fails.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='8D81829D-1BBD-5CE8-BE75-1CAD5750****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyDynamicConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDynamicConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDynamicConfig  ModifyDynamicConfigRequest
  * @return ModifyDynamicConfigResponse
 */
async function modifyDynamicConfig(request: ModifyDynamicConfigRequest): ModifyDynamicConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDynamicConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGadInstanceNameRequest {
  instanceId?: string(name='InstanceId', example='rm-bp1i99e8l7913****', position='Query'),
  instanceName?: string(name='InstanceName', example='rm-uf6b0m001ir8mr9i9', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26mat2ldb4oy', position='Query'),
}

model ModifyGadInstanceNameResponseBody = {
  createTime?: long(name='CreateTime', example='2021-06-28 17:34:53.0'),
  dynamicCode?: string(name='DynamicCode', example='403'),
  dynamicMessage?: string(name='DynamicMessage', example='present environment is not support,so skip.'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instanceId?: string(name='InstanceId', example='rm-bp162d4tp0500****'),
  instanceName?: string(name='InstanceName', example='rm-2zehh163694qs5c3v'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='4D0ADAD5-DD97-41B6-B78F-D1961AB1****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
  success?: string(name='Success', example='true'),
}

model ModifyGadInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGadInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyGadInstanceName  ModifyGadInstanceNameRequest
  * @return ModifyGadInstanceNameResponse
 */
async function modifyGadInstanceName(request: ModifyGadInstanceNameRequest): ModifyGadInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGadInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubscriptionRequest {
  dbList: string(name='DbList', description='The objects of the change tracking task. The value is a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).

>  You can call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the original objects of the task.

This parameter is required.', example='{"dtstest":{"name":"dtstest","all":true}}', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.', example='dtsboss6pn1w******', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.', example='boss6pn1w******', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionDataTypeDDL: boolean(name='SubscriptionDataTypeDDL', description='Specifies whether to retrieve data definition language (DDL) statements. Valid values:

*   **true**: yes
*   **false**: no

This parameter is required.', example='true', position='Query'),
  subscriptionDataTypeDML: boolean(name='SubscriptionDataTypeDML', description='Specifies whether to retrieve data manipulation language (DML) statements. Valid values:

*   **true**: yes
*   **false**: no

This parameter is required.', example='true', position='Query'),
}

model ModifySubscriptionResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='068FA72F-4800-4A54-90BB-94806068****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifySubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySubscriptionResponseBody(name='body'),
}

/**
  * @description >  You can preview related API operation parameters when you modify the information about a change tracking task in the Data Transmission Service (DTS) console. This helps you configure the request parameters of this API operation. For more information, see [Preview the request parameters of API operations](https://help.aliyun.com/document_detail/2851612.html).
  * @param request  the request parameters of ModifySubscription  ModifySubscriptionRequest
  * @return ModifySubscriptionResponse
 */
async function modifySubscription(request: ModifySubscriptionRequest): ModifySubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubscription', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubscriptionObjectRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html) operation to query the instance ID.

This parameter is required.', example='dtsl8zl9ek6292****', position='Query'),
  subscriptionObject: string(name='SubscriptionObject', description='The objects from which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](https://help.aliyun.com/document_detail/141902.html).

This parameter is required.', example='[{"DBName":"dtstestdata"}]', position='Query'),
}

model ModifySubscriptionObjectResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABBACEFC-CBA9-4F80-A337-42F202F5****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifySubscriptionObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySubscriptionObjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySubscriptionObject  ModifySubscriptionObjectRequest
  * @return ModifySubscriptionObjectResponse
 */
async function modifySubscriptionObject(request: ModifySubscriptionObjectRequest): ModifySubscriptionObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubscriptionObject', 'POST', '/', 'json', false, 'json', request);
}

model ModifySynchronizationObjectRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.

This parameter is required.', example='dtskfq1149w254****', position='Query'),
  synchronizationObjects: string(name='SynchronizationObjects', description='This parameter is required.', position='Body'),
}

model ModifySynchronizationObjectResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='902DDCDE-C755-4458-85DA-DF9A323C****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The ID of the task that changes the objects. You must specify the task ID when you call the DescribeSynchronizationObjectModifyStatus operation to query the status and progress of the task.', example='tl911uvi25z****'),
}

model ModifySynchronizationObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySynchronizationObjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySynchronizationObject  ModifySynchronizationObjectRequest
  * @return ModifySynchronizationObjectResponse
 */
async function modifySynchronizationObject(request: ModifySynchronizationObjectRequest): ModifySynchronizationObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySynchronizationObject', 'POST', '/', 'json', true, 'form', request);
}

model PreCheckCreateGadOrderRequest {
  instanceId?: string(name='InstanceId', example='gad-bp1i99e8l7913****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfntftbiobqyky', position='Query'),
  slaveDbInstanceId?: string(name='SlaveDbInstanceId', example='rm-bp17562h64****', position='Query'),
  slaveDbInstanceRegion?: string(name='SlaveDbInstanceRegion', example='cn-hangzhou', position='Query'),
}

model PreCheckCreateGadOrderResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='403'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode', example='InternalError'),
  errMessage?: string(name='ErrMessage', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instanceId?: string(name='InstanceId', example='rm-bp162d4tp0500****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='C166D79D-436B-45F0-B5A5-25E1959F****'),
  success?: string(name='Success', example='true'),
  taskId?: string(name='TaskId', example='z2v12jfo309****'),
}

model PreCheckCreateGadOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreCheckCreateGadOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PreCheckCreateGadOrder  PreCheckCreateGadOrderRequest
  * @return PreCheckCreateGadOrderResponse
 */
async function preCheckCreateGadOrder(request: PreCheckCreateGadOrderRequest): PreCheckCreateGadOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreCheckCreateGadOrder', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  buyCount?: string(name='BuyCount', description='The subscription duration of the DTS instance after renewal. Default value: 1.

*   If **Period** is set to **Year**, the valid values are **1 to 5**.
*   If **Period** is set to **Month**, the valid values are **1 to 60**.', example='1', position='Query'),
  chargeType: string(name='ChargeType', description='The billing method of the DTS instance. Set the value to **PREPAY**, which specifies the subscription billing method.

This parameter is required.', example='PREPAY', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='qi0r643lc31****', position='Query'),
  period?: string(name='Period', description='The billing cycle of the DTS instance after renewal. Valid values:

*   **Year**
*   **Month** (default)', example='Month', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model RenewInstanceResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method of the DTS instance. Only **PREPAY** may be returned, which indicates the subscription billing method.', example='PREPAY'),
  code?: string(name='Code', description='The error code returned if the request failed.

> This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task.', example='qi0r643lc31****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the value of **ErrMessage**.

> If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.', example='DtsJobId'),
  endTime?: string(name='EndTime', description='The time when the DTS instance expires after renewal. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ssZZZ* format. The time is displayed in UTC.

> **ZZZ** indicates the offset of the time zone, which is displayed in the format of a plus sign (+) or a minus sign (-) followed by hours and minutes, such as **+00:00**.', example='2021-08-04T16:00:00.000+00:00'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceId?: string(name='InstanceId', description='The ID of the instance', example='dtsqi0r643lc31****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1112E255-0C38-4970-8159-1D54AD92****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewInstance  RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data synchronization or change tracking instance.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', description='The region where the DTS instance is located. For more information, see [List of Supported Regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekzn4iqlbsm7hy', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to reset the reverse synchronization task only when the topology is two-way synchronization.', example='Forward', position='Query'),
}

model ResetDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ResetDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDtsJobResponseBody(name='body'),
}

/**
  * @description >  If you clear the configurations of a data synchronization or change tracking task, DTS deletes the task. Then, DTS creates another task. The task is in the Not Configured state. You must call the [ConfigureDtsJob](https://help.aliyun.com/document_detail/208399.html) operation reconfigure the task.
  * @param request  the request parameters of ResetDtsJob  ResetDtsJobRequest
  * @return ResetDtsJobResponse
 */
async function resetDtsJob(request: ResetDtsJobRequest): ResetDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model ResetSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to stop reverse synchronization only when the topology is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.

This parameter is required.', example='dtsm761239l27m****', position='Query'),
}

model ResetSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDC111B1-ACBF-457D-9656-247FDEE9****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ResetSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetSynchronizationJobResponseBody(name='body'),
}

/**
  * @description >  If you clear the configurations of a data synchronization task, the task will be released. To start the task again, you must call the **ConfigureSynchronizationJob** operation to reconfigure the task.
  * @param request  the request parameters of ResetSynchronizationJob  ResetSynchronizationJobRequest
  * @return ResetSynchronizationJobResponse
 */
async function resetSynchronizationJob(request: ResetSynchronizationJobRequest): ResetSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model ReverseTwoWayDirectionRequest {
  dtsInstanceId?: string(name='DtsInstanceId', example='dtsldy114cy24f****', position='Query'),
  ignoreErrorSubJob?: boolean(name='IgnoreErrorSubJob', example='false', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ReverseTwoWayDirectionResponseBody = {
  code?: string(name='Code', example='200'),
  dynamicMessage?: string(name='DynamicMessage', example='DtsInstanceId'),
  errCode?: string(name='ErrCode', example='403'),
  errMessage?: string(name='ErrMessage', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', example='true'),
}

model ReverseTwoWayDirectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReverseTwoWayDirectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReverseTwoWayDirection  ReverseTwoWayDirectionRequest
  * @return ReverseTwoWayDirectionResponse
 */
async function reverseTwoWayDirection(request: ReverseTwoWayDirectionRequest): ReverseTwoWayDirectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReverseTwoWayDirection', 'POST', '/', 'json', false, 'json', request);
}

model ShieldPrecheckRequest {
  dtsInstanceId: string(name='DtsInstanceId', description='The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

>  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.

This parameter is required.', example='dtsi76118o3w92****', position='Query'),
  precheckItems: string(name='PrecheckItems', description='The precheck items that you want to ignore. Separate multiple items with commas (,). Valid values:
 
*   **CHECK_SAME_OBJ**: schema name conflict
 
*   **CHECK_SAME_USER**: multiple usernames for one instance
 
*   **CHECK_SRC**: source database version
 
*   **CHECK_TOPOLOGY**: topology
 
> For more information about the topologies supported by DTS, see [Synchronization topologies](https://help.aliyun.com/document_detail/124115.html).
 
*   **CHECK_SERVER_ID**: value of server_id in the source database

This parameter is required.', example='CHECK_SAME_OBJ', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model ShieldPrecheckResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F4B5BC4-34B1-49C9-9C8F-C8F16AC4****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ShieldPrecheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ShieldPrecheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ShieldPrecheck  ShieldPrecheckRequest
  * @return ShieldPrecheckResponse
 */
async function shieldPrecheck(request: ShieldPrecheckRequest): ShieldPrecheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShieldPrecheck', 'POST', '/', 'json', false, 'json', request);
}

model SkipFullJobTableRequest {
  dtsJobId?: string(name='DtsJobId', description='The ID of the DTS task. The DTS task can be a data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  jobProgressId?: string(name='JobProgressId', description='The ID of the primary key.', example='123', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2ilvoxlrdcby', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Specifies whether to query only zero-extract, transform, load (ETL) integration tasks. Valid values:

*   **true**: yes.
*   **false**: no.', example='true', position='Query'),
}

model SkipFullJobTableResponseBody = {
  code?: string(name='Code', description='The error code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D0ADAD5-DD97-41B6-B78F-D1961AB1****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SkipFullJobTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SkipFullJobTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SkipFullJobTable  SkipFullJobTableRequest
  * @return SkipFullJobTableResponse
 */
async function skipFullJobTable(request: SkipFullJobTableRequest): SkipFullJobTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SkipFullJobTable', 'POST', '/', 'json', false, 'json', request);
}

model SkipPreCheckRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.

This parameter is required.', example='c7412z57g8k****', position='Query'),
  jobId?: string(name='JobId', description='The precheck task ID. You can call the **DescribePreCheckStatus** operation to query the task ID.', example='b4my3zg929a****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  skip: boolean(name='Skip', description='Specifies whether to skip the precheck item. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
  skipPreCheckItems?: string(name='SkipPreCheckItems', description='The shortened name of the precheck item. Valid values:

*   **["CHECK_SAME_OBJ"]**: object name conflict.
*   **["CHECK_SAME_USER"]**: username conflict.
*   **["CHECK_SRC"]**: source database version.
*   **["CHECK_TOPOLOGY"]**: topology. For more information about the topologies supported by Data Transmission Service (DTS), see [Synchronization topologies](https://help.aliyun.com/document_detail/124115.html).
*   **["CHECK_SERVER_ID"]**: the server ID of the source database.
*   **["CHECK_DEST_TABLE_EMPTY"]**: existence of objects in the destination database.

> Separate multiple item names with commas (,). Example: **["CHECK_SRC","CHECK_SAME_OBJ"]**.', example='["CHECK_SAME_OBJ"]', position='Query'),
  skipPreCheckNames?: string(name='SkipPreCheckNames', description='The precheck item name. This parameter corresponds to **SkipPreCheckItems**. Valid values:

*   **["CHECK_SAME_OBJ_DETAIL"]**: object name conflict.
*   **["CHECK_SAME_USER_DETAIL"]**: username conflict.
*   **["CHECK_SRC_DETAIL"]**: source database version.
*   **["CHECK_TOPOLOGY_DETAIL"]**: topology. For more information about the topologies supported by DTS, see [Synchronization topologies](https://help.aliyun.com/document_detail/124115.html).
*   **["CHECK_SERVER_ID_DETAIL"]**: the server ID of the source database.
*   **["CHECK_DEST_TABLE_EMPTY_DETAIL"]**: empty tables in the destination database.

> Separate multiple item names with commas (,). Example: **["CHECK_SRC_DETAIL","CHECK_SAME_OBJ_DETAIL"]**.', example='["CHECK_SAME_OBJ_DETAIL"]', position='Query'),
}

model SkipPreCheckResponseBody = {
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace %s in ErrMessage.

> If JobId is invalid, JobId is returned for DynamicMessage, and the following message is returned for ErrMessage: The Value of Input Parameter %s is not valid.', example='JobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status codes returned.', example='200'),
  migrationJobId?: string(name='MigrationJobId', description='The precheck task ID.', example='b4my3zg929a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C498360-7892-433C-847A-BA71A850****'),
  scheduleJobId?: string(name='ScheduleJobId', description='The precheck task ID.', example='b4my3zg929a****'),
  skipItems?: string(name='SkipItems', description='The shortened name of the precheck item.', example='CHECK_SAME_OBJ'),
  skipNames?: string(name='SkipNames', description='The precheck item name.', example='CHECK_SAME_OBJ_DETAIL'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SkipPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SkipPreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SkipPreCheck  SkipPreCheckRequest
  * @return SkipPreCheckResponse
 */
async function skipPreCheck(request: SkipPreCheckRequest): SkipPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SkipPreCheck', 'POST', '/', 'json', false, 'json', request);
}

model StartDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.

>  You can call the [DescribeMigrationJobs](https://help.aliyun.com/document_detail/208139.html), [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html), or [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Data Transmission Service (DTS) instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aek2ilvoxlrdcby', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Default value: Forward. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.

*   **Reverse**: Data is synchronized from the destination database to the source database.

>You can set this parameter to **Reverse** to start the reverse synchronization task only if the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model StartDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='601B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StartDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDtsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDtsJob  StartDtsJobRequest
  * @return StartDtsJobResponse
 */
async function startDtsJob(request: StartDtsJobRequest): StartDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model StartDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration or data synchronization task.

> 
*   For multiple tasks, separate them with commas (**,**).
*   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='l5o11f9029c****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model StartDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StartDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDtsJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDtsJobs  StartDtsJobsRequest
  * @return StartDtsJobsResponse
 */
async function startDtsJobs(request: StartDtsJobsRequest): StartDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model StartMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.

This parameter is required.', example='dtss0611o8vv90****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
}

model StartMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='Request ID.', example='FDC111B1-ACBF-457D-9656-247FDEE9****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StartMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartMigrationJob  StartMigrationJobRequest
  * @return StartMigrationJobResponse
 */
async function startMigrationJob(request: StartMigrationJobRequest): StartMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model StartReverseWriterRequest {
  regionId?: string(name='RegionId', position='Host'),
  checkPoint?: string(name='CheckPoint', description='The offset of the Incremental Write module. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. 

> The default value is the offset that is automatically saved by DTS when the task is paused.', example='1695613785', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the reverse task that was created by calling the CreateReverseDtsJob operation.

This parameter is required.', example='n99m9jx822k****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model StartReverseWriterResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291BA4F1-2035-3FAA-6D5A-5D2015CC****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StartReverseWriterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartReverseWriterResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that your instance is not released and is paused. You can check the status of the instance in the Data Transmission Service (DTS) console or by calling the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation.
  * @param request  the request parameters of StartReverseWriter  StartReverseWriterRequest
  * @return StartReverseWriterResponse
 */
async function startReverseWriter(request: StartReverseWriterRequest): StartReverseWriterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartReverseWriter', 'POST', '/', 'json', false, 'json', request);
}

model StartSubscriptionInstanceRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', description='The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.

This parameter is required.', example='dtso6m11cxt26q****', position='Query'),
}

model StartSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B083F9AB-BE9B-4716-8AD3-CFA04391****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The task ID. This parameter will be removed in the future.', example='11****'),
}

model StartSubscriptionInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSubscriptionInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartSubscriptionInstance  StartSubscriptionInstanceRequest
  * @return StartSubscriptionInstanceResponse
 */
async function startSubscriptionInstance(request: StartSubscriptionInstanceRequest): StartSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.

*   You can set this parameter to **Reverse** to start the reverse synchronization task only if the topology is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.

This parameter is required.', example='dtsf19100l2186****', position='Query'),
}

model StartSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FDC111B1-ACBF-457D-9656-247FDEE9****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model StartSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSynchronizationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartSynchronizationJob  StartSynchronizationJobRequest
  * @return StartSynchronizationJobResponse
 */
async function startSynchronizationJob(request: StartSynchronizationJobRequest): StartSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model StopDedicatedClusterRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId', description='The ID of the cluster.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='dtscluster_h3fl1cs217sx952', position='Query'),
  dedicatedClusterName?: string(name='DedicatedClusterName', description='The name of the cluster.', example='dtscluster_test_001', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

>  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.', example='rm-bp1162kryivb8****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID. This parameter is a global parameter and not required.', example='The resource group ID. This parameter is a global parameter and not required.', position='Query'),
}

model StopDedicatedClusterResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.q'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='621BB4F8-3016-4FAA-8D5A-5D3163CC****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StopDedicatedClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDedicatedClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDedicatedCluster  StopDedicatedClusterRequest
  * @return StopDedicatedClusterResponse
 */
async function stopDedicatedCluster(request: StopDedicatedClusterRequest): StopDedicatedClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDedicatedCluster', 'POST', '/', 'json', false, 'json', request);
}

model StopDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration, data synchronization, or change tracking task.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Data Transmission Service (DTS) instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-qingdao', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekznwnajjh4d3a', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to stop the reverse synchronization task only when the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model StopDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message, which is used to replace **%s** in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model StopDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDtsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDtsJob  StopDtsJobRequest
  * @return StopDtsJobResponse
 */
async function stopDtsJob(request: StopDtsJobRequest): StopDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model StopDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration or data synchronization task.

> 
*   Separate multiple task IDs by **,** (commas).
*   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query task IDs.

This parameter is required.', example='l5o11f9029c****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekzsf6yoxhfpva', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model StopDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StopDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDtsJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDtsJobs  StopDtsJobsRequest
  * @return StopDtsJobsResponse
 */
async function stopDtsJobs(request: StopDtsJobsRequest): StopDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model StopMigrationJobRequest {
  accountId?: string(name='AccountId', description='The IDoftheAlibabaCloudaccount. Youdonotneed to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.

This parameter is required.', example='dtsb2c11sxpi3j****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model StopMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='true'),
}

model StopMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopMigrationJob  StopMigrationJobRequest
  * @return StopMigrationJobResponse
 */
async function stopMigrationJob(request: StopMigrationJobRequest): StopMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model SummaryJobDetailRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration or data synchronization instance.

>  You must specify at least one of the DtsJobId and DtsInstanceId parameters.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task.

>  You must specify at least one of the DtsJobId and DtsInstanceId parameters.

This parameter is required.', example='l3m1213ye7l****', position='Query'),
  jobCode: string(name='JobCode', description='The phase of the data migration task. Valid values:

*   **02**: The task is in the schema migration phase.
*   **03**: The task is in the incremental migration phase.

This parameter is required.', example='02', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aek25bwhtt22cjq', position='Query'),
  structType?: string(name='StructType', description='The type of schema definition. Valid values:

*   **before**: schema migration or initial schema synchronization
*   **after**: DDL operations performed during incremental data migration or synchronization', example='before', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction of the data synchronization task. Valid values:

*   **Forward**: Data is synchronized from the source database to the destination database.
*   **Reverse**: Data is synchronized from the destination database to the source database.

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model SummaryJobDetailResponseBody = {
  code?: string(name='Code', description='The error code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  jobId?: string(name='JobId', description='The ID of the data migration or data synchronization task.', example='l3m1213ye7l****'),
  progressSummaryDetails?: [ 
    {
      key?: string(name='Key', description='The type of migrated or synchronized object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.', example='Table'),
      state?: int32(name='State', description='The state of the data migration or data synchronization task. Valid values:

*   **0**: The task was complete.
*   **1**: The task was waiting to start.
*   **2**: The task was being initialized.
*   **3**: The task was in progress.
*   **4**: An error occurred.
*   **5**: The task failed.', example='0'),
      totalCount?: long(name='TotalCount', description='The total number of migrated or synchronized objects.', example='100'),
    }
  ](name='ProgressSummaryDetails', description='The returned information about the migrated or synchronized objects in arrays.

>  The arrays are in the following format: [{"key":"Function","state":5,"totalCount":22},{"key":"Procedure","state":5,"totalCount":26},{"key":"Table","state":0,"totalCount":68},{"key":"View","state":5,"totalCount":100}].'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9033138C-5AB3-5EB7-BA78-43131F19297C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model SummaryJobDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SummaryJobDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SummaryJobDetail  SummaryJobDetailRequest
  * @return SummaryJobDetailResponse
 */
async function summaryJobDetail(request: SummaryJobDetailRequest): SummaryJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SummaryJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='The ID of the data migration, data synchronization, or change tracking instance.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the Data Transmission Service (DTS) task. The DTS task can be a data migration, data synchronization, or change tracking task.

>  You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to obtain the task ID.', example='l3m1213ye7l****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 

*   The default value is **Forward**.

*   You can set this parameter to **Reverse** only if the topology is two-way synchronization.', example='Forward', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model SuspendDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter is going to be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.

>  If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** in the request is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='01B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SuspendDtsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendDtsJobResponseBody(name='body'),
}

/**
  * @description ****
  * @param request  the request parameters of SuspendDtsJob  SuspendDtsJobRequest
  * @return SuspendDtsJobResponse
 */
async function suspendDtsJob(request: SuspendDtsJobRequest): SuspendDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', description='The ID of the data migration or data synchronization task.

> 
*   For multiple tasks, separate them with commas (,).
*   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='hfi12iv4z7e****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='true', position='Query'),
}

model SuspendDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SuspendDtsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendDtsJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuspendDtsJobs  SuspendDtsJobsRequest
  * @return SuspendDtsJobsResponse
 */
async function suspendDtsJobs(request: SuspendDtsJobsRequest): SuspendDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model SuspendMigrationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  migrationJobId: string(name='MigrationJobId', description='The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.

This parameter is required.', example='dtsj1x11y51g3b****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
}

model SuspendMigrationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model SuspendMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuspendMigrationJob  SuspendMigrationJobRequest
  * @return SuspendMigrationJobResponse
 */
async function suspendMigrationJob(request: SuspendMigrationJobRequest): SuspendMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendSynchronizationJobRequest {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource GroupId', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

> 
*   Default value: **Forward**.
*   You can set this parameter to **Reverse** to pause reverse synchronization only when the topology is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.

This parameter is required.', example='dtsmr1q4mc2152****', position='Query'),
}

model SuspendSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C306C198-7807-409D-930A-D6CE6C32****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model SuspendSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendSynchronizationJobResponseBody(name='body'),
}

/**
  * @description > 
  * *   When you call this operation, the data synchronization task must be in the Synchronizing state.
  * *   We recommend that you do not pause a data synchronization task for more than 6 hours. Otherwise, the task cannot be started again.
  * *   If the billing method is pay-as-you-go, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, data synchronization consumes resources such as the bandwidth of the source database.
  * @param request  the request parameters of SuspendSynchronizationJob  SuspendSynchronizationJobRequest
  * @return SuspendSynchronizationJobResponse
 */
async function suspendSynchronizationJob(request: SuspendSynchronizationJobRequest): SuspendSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model SwitchPhysicalDtsJobToCloudRequest {
  dtsInstanceId?: string(name='DtsInstanceId', description='Migration, synchronization, or subscription instance ID.', example='dtsl3m1213ye7l****', position='Query'),
  dtsJobId?: string(name='DtsJobId', description='Data migration or synchronization instance ID, which can be queried by calling the **describedtsjobs** interface.', example='l5512es7w15****', position='Query'),
  regionId?: string(name='RegionId', description='Region ID. Pass this parameter to specify the region where the instance is located. For more details, see the list of supported regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aekz4us4iruleja', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='Synchronization direction, values: - **Forward**: Forward. - **Reverse**: Reverse.
> - The default value is **Forward**. - **Reverse** can only be passed when the topology of the data synchronization instance is bidirectional, to release the reverse synchronization link.', example='Forward', position='Query'),
}

model SwitchPhysicalDtsJobToCloudResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='Dynamic error code, this parameter will be deprecated.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='Dynamic error message used to replace the **%s** in the **ErrMessage** return parameter.  > If **ErrMessage** returns **The Value of Input Parameter %s is not valid**, and **DynamicMessage** returns **DtsJobId**, it indicates that the request parameter **DtsJobId** is invalid.', example='DtsJobId'),
  errCode?: string(name='ErrCode', description='Error code returned when the call fails.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='Returns the corresponding error message when an invocation error occurs.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Status code.', example='200'),
  requestId?: string(name='RequestId', description='request ID.', example='659304E3-D44E-5EFA-BDE3-60015E30403B'),
  success?: boolean(name='Success', description='Whether the request was successful.', example='True'),
}

model SwitchPhysicalDtsJobToCloudResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchPhysicalDtsJobToCloudResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchPhysicalDtsJobToCloud  SwitchPhysicalDtsJobToCloudRequest
  * @return SwitchPhysicalDtsJobToCloudResponse
 */
async function switchPhysicalDtsJobToCloud(request: SwitchPhysicalDtsJobToCloudRequest): SwitchPhysicalDtsJobToCloudResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchPhysicalDtsJobToCloud', 'POST', '/', 'json', false, 'json', request);
}

model SwitchSynchronizationEndpointRequest {
  endpoint?: {
    ip?: string(name='IP', description='The IP address of the database.

>  You must specify the IP address only if the **Endpoint.InstanceType** parameter is set to **Express**.', example='172.15.185.***'),
    instanceId: string(name='InstanceId', description='The ID of the ECS instance or the virtual private cloud (VPC).

> 
*   If the **Endpoint.InstanceType** parameter is set to **ECS**, you must specify the ID of the ECS instance.
*   If the **Endpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the VPC.

This parameter is required.', example='i-bp11haem1kpkhoup****'),
    instanceType: string(name='InstanceType', description='The instance type of the database. Valid values:

*   **LocalInstance**: self-managed database with a public IP address
*   **ECS**: self-managed database that is hosted on ECS
*   **Express**: self-managed database that is connected over Express Connect

This parameter is required.', example='ECS'),
    port: string(name='Port', description='The service port number of the database.

This parameter is required.', example='3306'),
    type: string(name='Type', description='Specifies whether to update the connection settings of the source instance or the destination instance. Valid values:

*   **Source**
*   **Destination**

This parameter is required.', example='Destination'),
  }(name='Endpoint', position='Query'),
  sourceEndpoint?: {
    ownerID?: string(name='OwnerID', description='The ID of the Alibaba Cloud account to which the source instance belongs. You must specify this parameter only if the source instance and the destination instance belong to different Alibaba Cloud accounts.', example='14069264****'),
    role?: string(name='Role', description='The authorized Resource Access Management (RAM) role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.

>  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).', example='ram-for-dts'),
  }(name='SourceEndpoint', position='Query'),
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.', example='12323344****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', description='The synchronization direction. Valid values:

*   **Forward**
*   **Reverse**

>  Default value: **Forward**.

The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.', example='Forward', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.

This parameter is required.', example='dtsexjk1alb116****', position='Query'),
}

model SwitchSynchronizationEndpointResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3232F84C-C961-4811-B014-4EA7A27C****'),
  success?: string(name='Success', description='Indicates whether the call was successful.', example='true'),
  taskId?: string(name='TaskId', description='The task ID. You must specify the task ID when you call the [DescribeEndpointSwitchStatus](https://help.aliyun.com/document_detail/135598.html) operation to query the execution status of the task.', example='11****'),
}

model SwitchSynchronizationEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchSynchronizationEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchSynchronizationEndpoint  SwitchSynchronizationEndpointRequest
  * @return SwitchSynchronizationEndpointResponse
 */
async function switchSynchronizationEndpoint(request: SwitchSynchronizationEndpointRequest): SwitchSynchronizationEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchSynchronizationEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The region ID of the Data Transmission Service (DTS) instances. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the data migration, data synchronization, or change tracking instances. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance IDs.

> N specifies the serial number of the instance. For example, ResourceId.1 specifies the ID of the first instance and ResourceId.2 specifies the ID of the second instance.

This parameter is required.', example='dtsntk10k6r12v****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The key of tag N.

> 

*   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag, and Tag.2.Key specifies the key of the second tag.

*   The tag key cannot be an empty string.

This parameter is required.', example='testkey1'),
      value: string(name='Value', description='The value of tag N.

> 

*   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag.

*   The tag value can be an empty string.

This parameter is required.', example='testvalue1'),
    }
  ](name='Tag', description='The tags to be added to the instances.

This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The request ID.', example='755D7B84-6813-42B0-BC9D-2699CFEA****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @description If you have a large number of instances, you can create multiple tags and add these tags to the instances. Then, you can query instances by tag.
  * *   A tag consists of a key and a value. Each key must be unique in a region within an Alibaba Cloud account. Different keys can be mapped to the same value.
  * *   If the tag that you specify does not exist, this tag is automatically created and added to the specified instance.
  * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
  * *   You can add up to 20 tags to an instance.
  * *   You can add tags to up to 50 instances in each request.
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TransferInstanceClassRequest {
  dtsJobId: string(name='DtsJobId', description='The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='r4yr723m199****', position='Query'),
  instanceClass: string(name='InstanceClass', description='The new instance class of the DTS instance. You can call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the original instance class of the DTS instance.

*   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
*   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.

> For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization channels](https://help.aliyun.com/document_detail/26605.html).

This parameter is required.', example='large', position='Query'),
  orderType: string(name='OrderType', description='Set the value to **UPGRADE**.

This parameter is required.', example='UPGRADE', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model TransferInstanceClassResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method of the DTS instance. Valid values:

*   **POSTPAY**: pay-as-you-go.
*   **PREPAY**: subscription.', example='POSTPAY'),
  code?: string(name='Code', description='The error code that is returned.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the data migration or data synchronization task.', example='r4yr723m199****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.

> For example, if the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified value of the **DtsJobId** parameter is invalid.', example='DtsJobId'),
  endTime?: string(name='EndTime', description='The expiration time of the DTS instance.

> This parameter is returned only if the value of the ChargeType parameter is **PREPAY**.', example='2021-08-04T16:00:00.000+00:00'),
  errCode?: string(name='ErrCode', description='The error code returned if the request failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the request failed.', example='The request processing has failed due to some unknown error.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceId?: string(name='InstanceId', description='The ID of the DTS instance.', example='dtsr4yr723m199****'),
  requestId?: string(name='RequestId', description='The request ID.', example='716DB03E-2D0B-4DC3-BC4C-F7A9EE21****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model TransferInstanceClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferInstanceClassResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransferInstanceClass  TransferInstanceClassRequest
  * @return TransferInstanceClassResponse
 */
async function transferInstanceClass(request: TransferInstanceClassRequest): TransferInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInstanceClass', 'POST', '/', 'json', false, 'json', request);
}

model TransferPayTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically renew the DTS instance when it expires. Valid values:

*   **false**: does not automatically renew the DTS instance when it expires. This is the default value.
*   **true**: automatically renews the DTS instance when it expires.', example='true', position='Query'),
  buyCount?: string(name='BuyCount', description='The subscription length.

*   If the **Period** parameter is set to **Year**, the value range is **1** to **5**.
*   If the **Period** parameter is set to **Month**, the value range is **1** to **60**.

>  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.', example='5', position='Query'),
  chargeType: string(name='ChargeType', description='The new billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.

This parameter is required.', example='PostPaid', position='Query'),
  dtsJobId: string(name='DtsJobId', description='The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.

This parameter is required.', example='o4nh3g7jg56****', position='Query'),
  instanceClass?: string(name='InstanceClass', description='The new instance class of the DTS instance. You can call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the original instance class of the DTS instance.

*   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
*   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.

> For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization channels](https://help.aliyun.com/document_detail/26605.html).', example='small', position='Query'),
  maxDu?: int32(name='MaxDu', description='The maximum number of DUs in a serverless instance. Valid values: 2, 4, 8, and 16.

>  This feature is not supported. Do not specify this parameter.', example='16', position='Query'),
  minDu?: int32(name='MinDu', description='The minimum number of DTS Units (DUs) in a serverless instance. Valid values: 1, 2, 4, 8, and 16.

>  This feature is not supported. Do not specify this parameter.', example='1', position='Query'),
  period?: string(name='Period', description='The billing cycle of the subscription instance. Valid values:

*   **Year**
*   **Month** (default value)

>  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.', example='Year', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model TransferPayTypeResponseBody = {
  chargeType?: string(name='ChargeType', description='The billing method of the DTS instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
  code?: string(name='Code', description='The error code. This parameter will be removed in the future.', example='200'),
  dtsJobId?: string(name='DtsJobId', description='The ID of the DTS task.', example='o4nh3g7jg56****'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='DtsJobId'),
  endTime?: string(name='EndTime', description='The expiration time of the subscription instance. The value is a UNIX timestamp.

> 
*   If the DTS instance is a pay-as-you-go instance, the value of this parameter is empty.
*   You can use a search engine to obtain a UNIX timestamp converter.', example='1614916318'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceId?: string(name='InstanceId', description='The ID of the DTS instance.', example='dtso4nh3g7jg56****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='601B6F25-21E7-4484-99D5-3EF2625C****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model TransferPayTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferPayTypeResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you fully understand the [billing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of DTS.
  * *   To prevent resource waste, make sure that the billing method of your DTS instances has to be changed.
  * *   Data migration instances only support the pay-as-you-go billing method.
  * @param request  the request parameters of TransferPayType  TransferPayTypeRequest
  * @return TransferPayTypeResponse
 */
async function transferPayType(request: TransferPayTypeRequest): TransferPayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferPayType', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to unbind all tags from the specified instances. Valid values:

*   **true**: unbinds all tags from the specified instances.
*   **false**: To unbind only specific tags, you must specify the **TagKey.N** parameter.

> 
*   You must specify at least one of the All and **TagKey.N** parameters.
*   If you specify both the All parameter and the **TagKey.N** parameter, the All parameter does not take effect.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of the data migration, synchronization, and subscription instances, which can be queried by calling the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) API. > N indicates the Nth instance ID to be passed. For example, ResourceId.0 represents passing the first instance ID; ResourceId.1 represents passing the second instance ID. You can unbind tags for 1 to 50 instances simultaneously.

This parameter is required.', example='dtsntk10k6r12v****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.', example='ALIYUN::DTS::INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='Tag key. > - N indicates the position of the tag key being passed. For example, TagKey.0 represents the first tag key; TagKey.1 represents the second tag key. Up to 20 tag keys can be unbound simultaneously. - Empty strings are not allowed. - At least one of **All** or this parameter must be provided. - If both **All** and this parameter are provided, only this parameter will take effect.', example='testkey1', position='Query'),
}

model UntagResourcesResponseBody = {
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED3A8FE0-EEFA-4416-BC42-34D61A52****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @description >  If a tag is unbound from an instance and is not bound to other instances, the tag is deleted.
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeTwoWayRequest {
  instanceClass: string(name='InstanceClass', description='The instance class of the two-way synchronization task. Valid values: **large**, **medium**, **micro**, and **small**.

>  For more information, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).

This parameter is required.', example='large', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the data synchronization instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.

This parameter is required.', example='dtsh77p49x4k28****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-acfmzawhxxc****', position='Query'),
}

model UpgradeTwoWayResponseBody = {
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and that of the **DynamicMessage** parameter is **InstanceId**, the specified **InstanceId** parameter is invalid.', example='InstanceId'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D3B4615-923F-49AA-AF21-6D8E3967****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpgradeTwoWayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeTwoWayResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS)
  * When you call this operation, take note of the following information:
  * *   The source and destination databases of the data synchronization task are both **MySQL** databases.
  * *   The synchronization topology of the data synchronization task is **one-way synchronization**.
  * *   The data synchronization task is in the **Synchronizing** state.
  * *   The upgrade operation causes data synchronization latency of about 5 seconds. We recommend that you perform this operation during off-peak hours.
  * @param request  the request parameters of UpgradeTwoWay  UpgradeTwoWayRequest
  * @return UpgradeTwoWayResponse
 */
async function upgradeTwoWay(request: UpgradeTwoWayRequest): UpgradeTwoWayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeTwoWay', 'POST', '/', 'json', false, 'json', request);
}

model WhiteIpListRequest {
  destAliyunUid?: string(name='DestAliyunUid', description='destination aliyun uid', example='****', position='Query'),
  destPrimaryVswId?: string(name='DestPrimaryVswId', description='VPCNAT destination main VSW', example='****', position='Query'),
  destRoleName?: string(name='DestRoleName', description='destination role name', example='ram-for-dts-sq', position='Query'),
  destSecondaryVswId?: string(name='DestSecondaryVswId', description='VPCNAT destination backup VSW', example='****', position='Query'),
  destVpcId?: string(name='DestVpcId', description='source vpc id', example='****', position='Query'),
  destinationRegion?: string(name='DestinationRegion', description='The region ID to which the target instance belongs, please refer to the supported region list for details.
>>If the target instance is a self built database or third-party cloud database with a public IP address, you can pass in the cn Hangzhou or the region ID closest to the physical distance of the database.
 - When the DTS task is migration or synchronization, this parameter must be passed in.', example='cn-hangzhou', position='Query'),
  region: string(name='Region', description='The region ID of the change tracking instance. The region ID is the same as that of the source instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID.', example='rg-aek26mat2ldb4oy', position='Query'),
  srcAliyunUid?: string(name='SrcAliyunUid', description='source aliyun uid', example='1971721963139419', position='Query'),
  srcPrimaryVswId?: string(name='SrcPrimaryVswId', description='VPCNAT source end main VSW', example='****', position='Query'),
  srcRoleName?: string(name='SrcRoleName', description='source role Name', example='ram-for-dts', position='Query'),
  srcSecondaryVswId?: string(name='SrcSecondaryVswId', description='VPCNAT source backup VSW', example='****', position='Query'),
  srcVpcId?: string(name='SrcVpcId', description='source vpc id', example='****', position='Query'),
  type: string(name='Type', description='The access method for self built databases or third-party cloud databases, with a value of
 - Internet: accessed through the public network.
 - VPC: Connected through dedicated line/VPN gateway/intelligent gateway.

This parameter is required.', example='vpc', position='Query'),
  zeroEtlJob?: boolean(name='ZeroEtlJob', description='Whether it is a seamless integration (Zero-ETL) task, the value can be:
- **false**: No. - **true**: Yes.', example='false', position='Query'),
}

model WhiteIpListResponseBody = {
  destIpList?: string(name='DestIpList', description='Target end adaptation to VPCNAT IP whitelist', example='127.0.0.1'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code. This parameter will be removed in the future.', example='403'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message. This parameter will be removed in the future.', example='Type'),
  errCode?: string(name='ErrCode', description='The error code returned if the call failed.', example='InternalError'),
  errMessage?: string(name='ErrMessage', description='The error message returned if the call failed.', example='The Value of Input Parameter %s is not valid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  ipList?: string(name='IpList', description='IP address.', example='10.151.12.0/24,47.102.181.0/24,47.101.109.0/24,120.55.129.0/24,11.115.103.0/24,47.102.234.0/24'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD823BD3-1BA6-4117-A536-165CB280****'),
  srcIpList?: string(name='SrcIpList', description='Source adaptation to VPC NAT IP whitelist', example='127.0.0.1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model WhiteIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WhiteIpListResponseBody(name='body'),
}

/**
  * @description The operation that you want to perform. Set the value to **WhiteIpList**.
  * @param request  the request parameters of WhiteIpList  WhiteIpListRequest
  * @return WhiteIpListResponse
 */
async function whiteIpList(request: WhiteIpListRequest): WhiteIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WhiteIpList', 'POST', '/', 'json', false, 'json', request);
}

