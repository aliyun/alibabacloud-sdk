/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dts';
  @version = '2020-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'dts.aliyuncs.com',
    cn-beijing = 'dts.aliyuncs.com',
    cn-zhangjiakou = 'dts.aliyuncs.com',
    cn-huhehaote = 'dts.aliyuncs.com',
    cn-hangzhou = 'dts.aliyuncs.com',
    cn-shanghai = 'dts.aliyuncs.com',
    cn-shenzhen = 'dts.aliyuncs.com',
    cn-hongkong = 'dts.aliyuncs.com',
    ap-southeast-1 = 'dts.aliyuncs.com',
    ap-southeast-2 = 'dts.aliyuncs.com',
    ap-southeast-3 = 'dts.aliyuncs.com',
    ap-southeast-5 = 'dts.aliyuncs.com',
    eu-west-1 = 'dts.aliyuncs.com',
    us-west-1 = 'dts.aliyuncs.com',
    us-east-1 = 'dts.aliyuncs.com',
    eu-central-1 = 'dts.aliyuncs.com',
    me-east-1 = 'dts.aliyuncs.com',
    ap-south-1 = 'dts.aliyuncs.com',
    cn-hangzhou-finance = 'dts.aliyuncs.com',
    cn-shanghai-finance-1 = 'dts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dts.aliyuncs.com',
    cn-north-2-gov-1 = 'dts.aliyuncs.com',
    ap-northeast-2-pop = 'dts.aliyuncs.com',
    cn-beijing-finance-1 = 'dts.aliyuncs.com',
    cn-beijing-finance-pop = 'dts.aliyuncs.com',
    cn-beijing-gov-1 = 'dts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dts.aliyuncs.com',
    cn-chengdu = 'dts.aliyuncs.com',
    cn-edge-1 = 'dts.aliyuncs.com',
    cn-fujian = 'dts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dts.aliyuncs.com',
    cn-hangzhou-test-306 = 'dts.aliyuncs.com',
    cn-hongkong-finance-pop = 'dts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'dts.aliyuncs.com',
    cn-qingdao-nebula = 'dts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dts.aliyuncs.com',
    cn-shanghai-inner = 'dts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dts.aliyuncs.com',
    cn-shenzhen-inner = 'dts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dts.aliyuncs.com',
    cn-wuhan = 'dts.aliyuncs.com',
    cn-wulanchabu = 'dts.aliyuncs.com',
    cn-yushanfang = 'dts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dts.aliyuncs.com',
    eu-west-1-oxs = 'dts.aliyuncs.com',
    rus-west-1-pop = 'dts.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ConfigureDtsJobRequest {
  checkpoint?: string(name='Checkpoint', position='Query'),
  dataInitialization: boolean(name='DataInitialization', position='Query'),
  dataSynchronization: boolean(name='DataSynchronization', position='Query'),
  dbList: string(name='DbList', position='Body'),
  delayNotice?: boolean(name='DelayNotice', position='Query'),
  delayPhone?: string(name='DelayPhone', position='Query'),
  delayRuleTime?: long(name='DelayRuleTime', minimum=1, maximum=10000000000, position='Query'),
  destinationEndpointDataBaseName?: string(name='DestinationEndpointDataBaseName', position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', position='Query'),
  destinationEndpointIP?: string(name='DestinationEndpointIP', position='Query'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID', position='Query'),
  destinationEndpointInstanceType: string(name='DestinationEndpointInstanceType', position='Query'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID', position='Query'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword', position='Query'),
  destinationEndpointPort?: string(name='DestinationEndpointPort', position='Query'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', position='Query'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  dtsJobName: string(name='DtsJobName', position='Query'),
  errorNotice?: boolean(name='ErrorNotice', position='Query'),
  errorPhone?: string(name='ErrorPhone', position='Query'),
  jobType: string(name='JobType', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  reserve?: string(name='Reserve', position='Body'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', position='Query'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  sourceEndpointRole?: string(name='SourceEndpointRole', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', position='Query'),
  structureInitialization: boolean(name='StructureInitialization', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model ConfigureDtsJobResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureDtsJobResponseBody(name='body'),
}

async function configureDtsJob(request: ConfigureDtsJobRequest): ConfigureDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureDtsJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureMigrationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName', position=''),
    engineName?: string(name='EngineName', position=''),
    IP?: string(name='IP', position=''),
    instanceID?: string(name='InstanceID', position=''),
    instanceType: string(name='InstanceType', position=''),
    oracleSID?: string(name='OracleSID', position=''),
    password?: string(name='Password', position=''),
    port?: string(name='Port', position=''),
    region?: string(name='Region', position=''),
    userName?: string(name='UserName', position=''),
  }(name='DestinationEndpoint'),
  migrationMode?: {
    dataIntialization: boolean(name='DataIntialization', position=''),
    dataSynchronization: boolean(name='DataSynchronization', position=''),
    structureIntialization: boolean(name='StructureIntialization', position=''),
  }(name='MigrationMode'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', position=''),
    engineName?: string(name='EngineName', position=''),
    IP?: string(name='IP', position=''),
    instanceID?: string(name='InstanceID', position=''),
    instanceType: string(name='InstanceType', position=''),
    oracleSID?: string(name='OracleSID', position=''),
    ownerID?: string(name='OwnerID', position=''),
    password?: string(name='Password', position=''),
    port?: string(name='Port', position=''),
    region?: string(name='Region', position=''),
    role?: string(name='Role', position=''),
    userName?: string(name='UserName', position=''),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId', position='Query'),
  checkpoint?: string(name='Checkpoint', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  migrationJobName: string(name='MigrationJobName', position='Query'),
  migrationObject: string(name='MigrationObject', position='Body'),
  migrationReserved?: string(name='MigrationReserved', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ConfigureMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureMigrationJobResponseBody(name='body'),
}

async function configureMigrationJob(request: ConfigureMigrationJobRequest): ConfigureMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureMigrationJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureMigrationJobAlertRequest {
  accountId?: string(name='AccountId', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ConfigureMigrationJobAlertResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureMigrationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureMigrationJobAlertResponseBody(name='body'),
}

async function configureMigrationJobAlert(request: ConfigureMigrationJobAlertRequest): ConfigureMigrationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureMigrationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSubscriptionRequest {
  checkpoint?: string(name='Checkpoint', position='Query'),
  dbList: string(name='DbList', position='Query'),
  delayNotice?: boolean(name='DelayNotice', position='Query'),
  delayPhone?: string(name='DelayPhone', position='Query'),
  delayRuleTime?: long(name='DelayRuleTime', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  dtsJobName: string(name='DtsJobName', position='Query'),
  errorNotice?: boolean(name='ErrorNotice', position='Query'),
  errorPhone?: string(name='ErrorPhone', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  reserve?: string(name='Reserve', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', position='Query'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', position='Query'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  sourceEndpointRole?: string(name='SourceEndpointRole', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', position='Query'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL', position='Query'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML', position='Query'),
  subscriptionInstanceNetworkType: string(name='SubscriptionInstanceNetworkType', position='Query'),
  subscriptionInstanceVPCId?: string(name='SubscriptionInstanceVPCId', position='Query'),
  subscriptionInstanceVSwitchId?: string(name='SubscriptionInstanceVSwitchId', position='Query'),
}

model ConfigureSubscriptionResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionResponseBody(name='body'),
}

async function configureSubscription(request: ConfigureSubscriptionRequest): ConfigureSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscription', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSubscriptionInstanceRequest {
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', position=''),
    IP?: string(name='IP', position=''),
    instanceID?: string(name='InstanceID', position=''),
    instanceType?: string(name='InstanceType', position=''),
    oracleSID?: string(name='OracleSID', position=''),
    ownerID?: string(name='OwnerID', position=''),
    password?: string(name='Password', position=''),
    port?: string(name='Port', position=''),
    role?: string(name='Role', position=''),
    userName?: string(name='UserName', position=''),
  }(name='SourceEndpoint'),
  subscriptionDataType?: {
    DDL: boolean(name='DDL', position=''),
    DML: boolean(name='DML', position=''),
  }(name='SubscriptionDataType'),
  subscriptionInstance?: {
    VPCId?: string(name='VPCId', position=''),
    vSwitchId?: string(name='VSwitchId', position=''),
  }(name='SubscriptionInstance'),
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', position='Query'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType', position='Query'),
  subscriptionObject: string(name='SubscriptionObject', position='Body'),
}

model ConfigureSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionInstanceResponseBody(name='body'),
}

async function configureSubscriptionInstance(request: ConfigureSubscriptionInstanceRequest): ConfigureSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscriptionInstance', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model ConfigureSubscriptionInstanceAlertResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSubscriptionInstanceAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionInstanceAlertResponseBody(name='body'),
}

async function configureSubscriptionInstanceAlert(request: ConfigureSubscriptionInstanceAlertRequest): ConfigureSubscriptionInstanceAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSubscriptionInstanceAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSynchronizationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName', position=''),
    IP?: string(name='IP', position=''),
    instanceId?: string(name='InstanceId', position=''),
    instanceType?: string(name='InstanceType', position=''),
    password?: string(name='Password', position=''),
    port?: string(name='Port', position=''),
    userName?: string(name='UserName', position=''),
  }(name='DestinationEndpoint'),
  partitionKey?: {
    modifyTimeDay?: boolean(name='ModifyTime_Day', position=''),
    modifyTimeHour?: boolean(name='ModifyTime_Hour', position=''),
    modifyTimeMinute?: boolean(name='ModifyTime_Minute', position=''),
    modifyTimeMonth?: boolean(name='ModifyTime_Month', position=''),
    modifyTimeYear?: boolean(name='ModifyTime_Year', position=''),
  }(name='PartitionKey'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName', position=''),
    IP?: string(name='IP', position=''),
    instanceId?: string(name='InstanceId', position=''),
    instanceType?: string(name='InstanceType', position=''),
    ownerID?: string(name='OwnerID', position=''),
    password?: string(name='Password', position=''),
    port?: string(name='Port', position=''),
    role?: string(name='Role', position=''),
    userName?: string(name='UserName', position=''),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId', position='Query'),
  checkpoint?: string(name='Checkpoint', position='Query'),
  dataInitialization: boolean(name='DataInitialization', position='Query'),
  migrationReserved?: string(name='MigrationReserved', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  structureInitialization: boolean(name='StructureInitialization', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
  synchronizationJobName?: string(name='SynchronizationJobName', position='Query'),
  synchronizationObjects: string(name='SynchronizationObjects', position='Body'),
}

model ConfigureSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobResponseBody(name='body'),
}

async function configureSynchronizationJob(request: ConfigureSynchronizationJobRequest): ConfigureSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJob', 'POST', '/', 'json', true, 'form', request);
}

model ConfigureSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId', position='Query'),
  delayAlertPhone?: string(name='DelayAlertPhone', position='Query'),
  delayAlertStatus?: string(name='DelayAlertStatus', position='Query'),
  delayOverSeconds?: string(name='DelayOverSeconds', position='Query'),
  errorAlertPhone?: string(name='ErrorAlertPhone', position='Query'),
  errorAlertStatus?: string(name='ErrorAlertStatus', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model ConfigureSynchronizationJobAlertResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSynchronizationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobAlertResponseBody(name='body'),
}

async function configureSynchronizationJobAlert(request: ConfigureSynchronizationJobAlertRequest): ConfigureSynchronizationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable', position='Query'),
}

model ConfigureSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSynchronizationJobReplicatorCompareResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function configureSynchronizationJobReplicatorCompare(request: ConfigureSynchronizationJobReplicatorCompareRequest): ConfigureSynchronizationJobReplicatorCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureSynchronizationJobReplicatorCompare', 'POST', '/', 'json', false, 'json', request);
}

model CountJobByConditionRequest {
  destDbType?: string(name='DestDbType', description='目标端数据库类型', position='Query'),
  groupId?: string(name='GroupId', description='父任务id', position='Query'),
  jobType?: string(name='JobType', position='Query'),
  params?: string(name='Params', description='查询的值，与Type对应', position='Query'),
  region: string(name='Region', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  srcDbType?: string(name='SrcDbType', description='源端数据库类型', position='Query'),
  status?: string(name='Status', position='Query'),
  type?: string(name='Type', description='查询类型', position='Query'),
}

model CountJobByConditionResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model CountJobByConditionResponse = {
  headers: map[string]string(name='headers'),
  body: CountJobByConditionResponseBody(name='body'),
}

async function countJobByCondition(request: CountJobByConditionRequest): CountJobByConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountJobByCondition', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerChannelRequest {
  consumerGroupName: string(name='ConsumerGroupName', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', position='Query'),
  consumerGroupUserName: string(name='ConsumerGroupUserName', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateConsumerChannelResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerChannelResponseBody(name='body'),
}

async function createConsumerChannel(request: CreateConsumerChannelRequest): CreateConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  consumerGroupName: string(name='ConsumerGroupName', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', position='Query'),
  consumerGroupUserName: string(name='ConsumerGroupUserName', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDtsInstanceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoStart?: boolean(name='AutoStart', position='Query'),
  computeUnit?: int32(name='ComputeUnit', minimum=1, maximum=999999, position='Query'),
  databaseCount?: int32(name='DatabaseCount', minimum=1, maximum=10000, position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', position='Query'),
  destinationRegion?: string(name='DestinationRegion', position='Query'),
  feeType?: string(name='FeeType', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  payType?: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  quantity?: int32(name='Quantity', minimum=1, maximum=9999999, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', position='Query'),
  sourceRegion?: string(name='SourceRegion', position='Query'),
  syncArchitecture?: string(name='SyncArchitecture', position='Query'),
  type?: string(name='Type', position='Query'),
  usedTime?: int32(name='UsedTime', minimum=1, maximum=10000, position='Query'),
}

model CreateDtsInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateDtsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDtsInstanceResponseBody(name='body'),
}

async function createDtsInstance(request: CreateDtsInstanceRequest): CreateDtsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDtsInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateJobMonitorRuleRequest {
  delayRuleTime?: long(name='DelayRuleTime', position='Query'),
  dtsJobId: string(name='DtsJobId', position='Query'),
  phone?: string(name='Phone', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  state?: string(name='State', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreateJobMonitorRuleResponseBody = {
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateJobMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobMonitorRuleResponseBody(name='body'),
}

async function createJobMonitorRule(request: CreateJobMonitorRuleRequest): CreateJobMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJobMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateMigrationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  migrationJobClass: string(name='MigrationJobClass', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  region: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model CreateMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  migrationJobId?: string(name='MigrationJobId'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMigrationJobResponseBody(name='body'),
}

async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubscriptionInstanceRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType', position=''),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType?: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  region: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  usedTime?: int32(name='UsedTime', position='Query'),
}

model CreateSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  success?: string(name='Success'),
}

model CreateSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionInstanceResponseBody(name='body'),
}

async function createSubscriptionInstance(request: CreateSubscriptionInstanceRequest): CreateSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSynchronizationJobRequest {
  destinationEndpoint?: {
    instanceType?: string(name='InstanceType', position=''),
  }(name='DestinationEndpoint'),
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType', position=''),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstanceCount?: int32(name='DBInstanceCount', minimum=0, maximum=10000, position='Query'),
  destRegion: string(name='DestRegion', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceRegion: string(name='SourceRegion', position='Query'),
  synchronizationJobClass: string(name='SynchronizationJobClass', position='Query'),
  topology?: string(name='Topology', position='Query'),
  usedTime?: int32(name='UsedTime', position='Query'),
  networkType?: string(name='networkType', position='Query'),
}

model CreateSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model CreateSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSynchronizationJobResponseBody(name='body'),
}

async function createSynchronizationJob(request: CreateSynchronizationJobRequest): CreateSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerChannelRequest {
  consumerGroupId: string(name='ConsumerGroupId', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerChannelResponseBody(name='body'),
}

async function deleteConsumerChannel(request: DeleteConsumerChannelRequest): DeleteConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  consumerGroupID: string(name='ConsumerGroupID', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model DeleteDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDtsJobResponseBody(name='body'),
}

async function deleteDtsJob(request: DeleteDtsJobRequest): DeleteDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDtsJobsResponseBody(name='body'),
}

async function deleteDtsJobs(request: DeleteDtsJobsRequest): DeleteDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMigrationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMigrationJobResponseBody(name='body'),
}

async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSubscriptionInstanceRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model DeleteSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscriptionInstanceResponseBody(name='body'),
}

async function deleteSubscriptionInstance(request: DeleteSubscriptionInstanceRequest): DeleteSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSynchronizationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model DeleteSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSynchronizationJobResponseBody(name='body'),
}

async function deleteSynchronizationJob(request: DeleteSynchronizationJobRequest): DeleteSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConnectionStatusRequest {
  destinationEndpointArchitecture?: string(name='DestinationEndpointArchitecture', position='Query'),
  destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName', position='Query'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName', position='Query'),
  destinationEndpointIP?: string(name='DestinationEndpointIP', position='Query'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID', position='Query'),
  destinationEndpointInstanceType: string(name='DestinationEndpointInstanceType', position='Query'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID', position='Query'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword', position='Query'),
  destinationEndpointPort?: string(name='DestinationEndpointPort', position='Query'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', position='Query'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceEndpointArchitecture?: string(name='SourceEndpointArchitecture', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', position='Query'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', position='Query'),
  sourceEndpointPort?: string(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', position='Query'),
}

model DescribeConnectionStatusResponseBody = {
  destinationConnectionStatus?: map[string]any(name='DestinationConnectionStatus'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  sourceConnectionStatus?: map[string]any(name='SourceConnectionStatus'),
  success?: string(name='Success'),
}

model DescribeConnectionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConnectionStatusResponseBody(name='body'),
}

async function describeConnectionStatus(request: DescribeConnectionStatusRequest): DescribeConnectionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConnectionStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsumerChannelRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentChannelId?: string(name='ParentChannelId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeConsumerChannelResponseBody = {
  consumerChannels?: [ 
    {
      consumerGroupId?: string(name='ConsumerGroupId'),
      consumerGroupName?: string(name='ConsumerGroupName'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      messageDelay?: long(name='MessageDelay'),
      unconsumedData?: long(name='UnconsumedData'),
    }
  ](name='ConsumerChannels'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConsumerChannelResponseBody(name='body'),
}

async function describeConsumerChannel(request: DescribeConsumerChannelRequest): DescribeConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsumerGroupRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model DescribeConsumerGroupResponseBody = {
  consumerChannels?: {
    describeConsumerChannel?: [ 
    {
      consumerGroupID?: string(name='ConsumerGroupID'),
      consumerGroupName?: string(name='ConsumerGroupName'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      messageDelay?: long(name='MessageDelay'),
      unconsumedData?: long(name='UnconsumedData'),
    }
  ](name='DescribeConsumerChannel')
  }(name='ConsumerChannels'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConsumerGroupResponseBody(name='body'),
}

async function describeConsumerGroup(request: DescribeConsumerGroupRequest): DescribeConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDTSIPRequest {
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sourceEndpointRegion: string(name='SourceEndpointRegion', position='Query'),
}

model DescribeDTSIPResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeDTSIPResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDTSIPResponseBody(name='body'),
}

async function describeDTSIP(request: DescribeDTSIPRequest): DescribeDTSIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDTSIP', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsEtlJobVersionInfoRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDtsEtlJobVersionInfoResponseBody = {
  dtsEtlJobVersionInfos?: [ 
    {
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      creatorName?: string(name='CreatorName'),
      dtsInstanceId?: string(name='DtsInstanceId'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      modifyTime?: string(name='ModifyTime'),
      safeCheckpoint?: string(name='SafeCheckpoint'),
      status?: string(name='Status'),
      version?: int32(name='Version'),
    }
  ](name='DtsEtlJobVersionInfos'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDtsEtlJobVersionInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsEtlJobVersionInfoResponseBody(name='body'),
}

async function describeDtsEtlJobVersionInfo(request: DescribeDtsEtlJobVersionInfoRequest): DescribeDtsEtlJobVersionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsEtlJobVersionInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobDetailRequest {
  dtsInstanceID?: string(name='DtsInstanceID', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  syncSubJobHistory?: boolean(name='SyncSubJobHistory', description='是否返回所有的同步子任务', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model DescribeDtsJobDetailResponseBody = {
  appName?: string(name='AppName'),
  beginTimestamp?: string(name='BeginTimestamp'),
  checkpoint?: long(name='Checkpoint'),
  code?: int32(name='Code'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
  consumptionClient?: string(name='ConsumptionClient'),
  createTime?: string(name='CreateTime'),
  databaseCount?: int32(name='DatabaseCount'),
  dbObject?: string(name='DbObject'),
  delay?: long(name='Delay'),
  demoJob?: boolean(name='DemoJob'),
  destNetType?: string(name='DestNetType'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    ip?: string(name='Ip'),
    oracleSID?: string(name='OracleSID'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    sslSolutionEnum?: string(name='SslSolutionEnum'),
    userName?: string(name='UserName'),
  }(name='DestinationEndpoint'),
  dtsInstanceID?: string(name='DtsInstanceID'),
  dtsJobClass?: string(name='DtsJobClass'),
  dtsJobDirection?: string(name='DtsJobDirection'),
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTimestamp?: string(name='EndTimestamp'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  etlCalculator?: string(name='EtlCalculator'),
  expireTime?: string(name='ExpireTime'),
  finishTime?: string(name='FinishTime'),
  groupId?: string(name='GroupId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobType?: string(name='JobType'),
  migrationMode?: {
    dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
    dataInitialization?: boolean(name='DataInitialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
    structureInitialization?: boolean(name='StructureInitialization'),
  }(name='MigrationMode'),
  payType?: string(name='PayType'),
  requestId?: string(name='RequestId'),
  reserved?: string(name='Reserved'),
  sourceEndpoint?: {
    aliyunUid?: string(name='AliyunUid'),
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    ip?: string(name='Ip'),
    oracleSID?: string(name='OracleSID'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    roleName?: string(name='RoleName'),
    sslSolutionEnum?: string(name='SslSolutionEnum'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  status?: string(name='Status'),
  subDistributedJob?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataSynchronizationStatus'),
      databaseCount?: int32(name='DatabaseCount'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destNetType?: string(name='DestNetType'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      etlCalculator?: string(name='EtlCalculator'),
      expireTime?: string(name='ExpireTime'),
      finishTime?: string(name='FinishTime'),
      groupId?: string(name='GroupId'),
      isDemoJob?: boolean(name='IsDemoJob'),
      jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
        rps?: string(name='Rps', description='每秒同步的记录数'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='预检查项'),
            checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
            checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
            failedReason?: string(name='FailedReason', description='错误原因'),
            repairMethod?: string(name='RepairMethod', description='修复方法'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMsg?: string(name='ErrMsg', description='错误信息'),
        jobId?: string(name='JobId', description='任务ID'),
        maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
        module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
        retryCount?: int32(name='RetryCount', description='已重试次数'),
        retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
        retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
        retrying?: boolean(name='Retrying', description='是否重试中'),
      }(name='RetryState'),
      reverseJob?: {
        appName?: string(name='AppName'),
        beginTimestamp?: string(name='BeginTimestamp'),
        checkpoint?: string(name='Checkpoint'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
        consumptionClient?: string(name='ConsumptionClient'),
        createTime?: string(name='CreateTime'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataEtlStatus'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataSynchronizationStatus'),
        databaseCount?: int32(name='DatabaseCount'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destNetType?: string(name='DestNetType'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        endTimestamp?: string(name='EndTimestamp'),
        errorMessage?: string(name='ErrorMessage'),
        etlCalculator?: string(name='EtlCalculator'),
        expireTime?: string(name='ExpireTime'),
        finishTime?: string(name='FinishTime'),
        groupId?: string(name='GroupId'),
        isDemoJob?: boolean(name='IsDemoJob'),
        jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
          rps?: string(name='Rps', description='每秒同步的记录数'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='预检查项'),
              checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
              checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
              failedReason?: string(name='FailedReason', description='错误原因'),
              repairMethod?: string(name='RepairMethod', description='修复方法'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        retryState?: {
          errMsg?: string(name='ErrMsg', description='错误信息'),
          jobId?: string(name='JobId', description='任务ID'),
          maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
          module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
          retryCount?: int32(name='RetryCount', description='已重试次数'),
          retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
          retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
          retrying?: boolean(name='Retrying', description='是否重试中'),
        }(name='RetryState'),
        reverseJob?: any(name='ReverseJob'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='StructureInitializationStatus'),
        subscribeTopic?: string(name='SubscribeTopic'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl'),
          dml?: boolean(name='Dml'),
        }(name='SubscriptionDataType'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost'),
          publicHost?: string(name='PublicHost'),
          vpcHost?: string(name='VpcHost'),
        }(name='SubscriptionHost'),
        synchronizationDirection?: string(name='SynchronizationDirection'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid', description='用户id'),
            creator?: long(name='Creator', description='标签操作者'),
            gmtCreate?: string(name='GmtCreate', description='创建时间'),
            gmtModified?: string(name='GmtModified', description='修改时间'),
            id?: long(name='Id', description='主键'),
            regionId?: string(name='RegionId', description='region_id'),
            resourceId?: string(name='ResourceId', description='dts instance id'),
            resourceType?: string(name='ResourceType', description='资源类型'),
            scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
            srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
            tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
            tagKey?: string(name='TagKey', description='标签键tagkey'),
            tagValue?: string(name='TagValue', description='标签值tagvalue'),
          }
        ](name='TagList'),
        taskType?: string(name='TaskType'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='StructureInitializationStatus'),
      subSyncJob?: [ any ](name='SubSyncJob'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl'),
        dml?: boolean(name='Dml'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        vpcHost?: string(name='VpcHost'),
      }(name='SubscriptionHost'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid', description='用户id'),
          creator?: long(name='Creator', description='标签操作者'),
          gmtCreate?: string(name='GmtCreate', description='创建时间'),
          gmtModified?: string(name='GmtModified', description='修改时间'),
          id?: long(name='Id', description='主键'),
          regionId?: string(name='RegionId', description='region_id'),
          resourceId?: string(name='ResourceId', description='dts instance id'),
          resourceType?: string(name='ResourceType', description='资源类型'),
          scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
          srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
          tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
          tagKey?: string(name='TagKey', description='标签键tagkey'),
          tagValue?: string(name='TagValue', description='标签值tagvalue'),
        }
      ](name='TagList'),
      taskType?: string(name='TaskType'),
    }
  ](name='SubDistributedJob'),
  subSyncJob?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataSynchronizationStatus'),
      databaseCount?: int32(name='DatabaseCount'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destNetType?: string(name='DestNetType'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      etlCalculator?: string(name='EtlCalculator'),
      expireTime?: string(name='ExpireTime'),
      finishTime?: string(name='FinishTime'),
      groupId?: string(name='GroupId'),
      isDemoJob?: boolean(name='IsDemoJob'),
      jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
        rps?: string(name='Rps', description='每秒同步的记录数'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='预检查项'),
            checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
            checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
            failedReason?: string(name='FailedReason', description='错误原因'),
            repairMethod?: string(name='RepairMethod', description='修复方法'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMsg?: string(name='ErrMsg', description='错误信息'),
        jobId?: string(name='JobId', description='任务ID'),
        maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
        module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
        retryCount?: int32(name='RetryCount', description='已重试次数'),
        retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
        retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
        retrying?: boolean(name='Retrying', description='是否重试中'),
      }(name='RetryState'),
      reverseJob?: {
        appName?: string(name='AppName'),
        beginTimestamp?: string(name='BeginTimestamp'),
        checkpoint?: string(name='Checkpoint'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
        consumptionClient?: string(name='ConsumptionClient'),
        createTime?: string(name='CreateTime'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataEtlStatus'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataSynchronizationStatus'),
        databaseCount?: int32(name='DatabaseCount'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destNetType?: string(name='DestNetType'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        endTimestamp?: string(name='EndTimestamp'),
        errorMessage?: string(name='ErrorMessage'),
        etlCalculator?: string(name='EtlCalculator'),
        expireTime?: string(name='ExpireTime'),
        finishTime?: string(name='FinishTime'),
        groupId?: string(name='GroupId'),
        isDemoJob?: boolean(name='IsDemoJob'),
        jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
          rps?: string(name='Rps', description='每秒同步的记录数'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='预检查项'),
              checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
              checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
              failedReason?: string(name='FailedReason', description='错误原因'),
              repairMethod?: string(name='RepairMethod', description='修复方法'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        retryState?: {
          errMsg?: string(name='ErrMsg', description='错误信息'),
          jobId?: string(name='JobId', description='任务ID'),
          maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
          module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
          retryCount?: int32(name='RetryCount', description='已重试次数'),
          retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
          retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
          retrying?: boolean(name='Retrying', description='是否重试中'),
        }(name='RetryState'),
        reverseJob?: any(name='ReverseJob'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='StructureInitializationStatus'),
        subscribeTopic?: string(name='SubscribeTopic'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl'),
          dml?: boolean(name='Dml'),
        }(name='SubscriptionDataType'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost'),
          publicHost?: string(name='PublicHost'),
          vpcHost?: string(name='VpcHost'),
        }(name='SubscriptionHost'),
        synchronizationDirection?: string(name='SynchronizationDirection'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid', description='用户id'),
            creator?: long(name='Creator', description='标签操作者'),
            gmtCreate?: string(name='GmtCreate', description='创建时间'),
            gmtModified?: string(name='GmtModified', description='修改时间'),
            id?: long(name='Id', description='主键'),
            regionId?: string(name='RegionId', description='region_id'),
            resourceId?: string(name='ResourceId', description='dts instance id'),
            resourceType?: string(name='ResourceType', description='资源类型'),
            scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
            srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
            tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
            tagKey?: string(name='TagKey', description='标签键tagkey'),
            tagValue?: string(name='TagValue', description='标签值tagvalue'),
          }
        ](name='TagList'),
        taskType?: string(name='TaskType'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='StructureInitializationStatus'),
      subSyncJob?: [ any ](name='SubSyncJob'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl'),
        dml?: boolean(name='Dml'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        vpcHost?: string(name='VpcHost'),
      }(name='SubscriptionHost'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid', description='用户id'),
          creator?: long(name='Creator', description='标签操作者'),
          gmtCreate?: string(name='GmtCreate', description='创建时间'),
          gmtModified?: string(name='GmtModified', description='修改时间'),
          id?: long(name='Id', description='主键'),
          regionId?: string(name='RegionId', description='region_id'),
          resourceId?: string(name='ResourceId', description='dts instance id'),
          resourceType?: string(name='ResourceType', description='资源类型'),
          scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
          srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
          tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
          tagKey?: string(name='TagKey', description='标签键tagkey'),
          tagValue?: string(name='TagValue', description='标签值tagvalue'),
        }
      ](name='TagList'),
      taskType?: string(name='TaskType'),
    }
  ](name='SubSyncJob'),
  subscribeTopic?: string(name='SubscribeTopic'),
  subscriptionDataType?: {
    ddl?: boolean(name='Ddl'),
    dml?: boolean(name='Dml'),
  }(name='SubscriptionDataType'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost'),
    publicHost?: string(name='PublicHost'),
    vpcHost?: string(name='VpcHost'),
  }(name='SubscriptionHost'),
  success?: boolean(name='Success'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  taskType?: string(name='TaskType'),
}

model DescribeDtsJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsJobDetailResponseBody(name='body'),
}

async function describeDtsJobDetail(request: DescribeDtsJobDetailRequest): DescribeDtsJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsJobsRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobType?: string(name='JobType', position='Query'),
  orderColumn?: string(name='OrderColumn', position='Query'),
  orderDirection?: string(name='OrderDirection', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  params?: string(name='Params', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  status?: string(name='Status', position='Query'),
  tags?: string(name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDtsJobsResponseBody = {
  dtsJobList?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      jobType?: string(name='JobType', description='DTS任务类型'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow'),
        rps?: string(name='Rps'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkResult?: string(name='CheckResult'),
            failedReason?: string(name='FailedReason'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMessage?: string(name='ErrMessage'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        retryCount?: int32(name='RetryCount'),
        retryTarget?: string(name='RetryTarget'),
        retryTime?: int32(name='RetryTime'),
      }(name='RetryState'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint'),
        createTime?: string(name='CreateTime'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataSynchronizationStatus'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        errorMessage?: string(name='ErrorMessage'),
        expireTime?: string(name='ExpireTime'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow'),
          rps?: string(name='Rps'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkResult?: string(name='CheckResult'),
              failedReason?: string(name='FailedReason'),
              repairMethod?: string(name='RepairMethod'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='StructureInitializationStatus'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
    }
  ](name='DtsJobList'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  etlDemoList?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      jobType?: string(name='JobType', description='DtsJob类型'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow'),
        rps?: string(name='Rps'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkResult?: string(name='CheckResult'),
            failedReason?: string(name='FailedReason'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMessage?: string(name='ErrMessage'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        retryCount?: int32(name='RetryCount'),
        retryTarget?: string(name='RetryTarget'),
        retryTime?: int32(name='RetryTime'),
      }(name='RetryState'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint'),
        createTime?: string(name='CreateTime'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataSynchronizationStatus'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        errorMessage?: string(name='ErrorMessage'),
        expireTime?: string(name='ExpireTime'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow'),
          rps?: string(name='Rps'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkResult?: string(name='CheckResult'),
              failedReason?: string(name='FailedReason'),
              repairMethod?: string(name='RepairMethod'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='StructureInitializationStatus'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
    }
  ](name='EtlDemoList'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsJobsResponseBody(name='body'),
}

async function describeDtsJobs(request: DescribeDtsJobsRequest): DescribeDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDtsServiceLogRequest {
  dtsJobId?: string(name='DtsJobId', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  subJobType?: string(name='SubJobType', position='Query'),
}

model DescribeDtsServiceLogResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  serviceLogContexts?: [ 
    {
      context?: string(name='Context'),
      state?: string(name='State'),
      time?: string(name='Time'),
    }
  ](name='ServiceLogContexts'),
  success?: boolean(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeDtsServiceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsServiceLogResponseBody(name='body'),
}

async function describeDtsServiceLog(request: DescribeDtsServiceLogRequest): DescribeDtsServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDtsServiceLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndpointSwitchStatusRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeEndpointSwitchStatusResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: string(name='Success'),
}

model DescribeEndpointSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEndpointSwitchStatusResponseBody(name='body'),
}

async function describeEndpointSwitchStatus(request: DescribeEndpointSwitchStatusRequest): DescribeEndpointSwitchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndpointSwitchStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEtlJobLogsRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeEtlJobLogsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  etlRunningLogs?: [ 
    {
      content?: string(name='Content'),
      contentKey?: string(name='ContentKey'),
      etlId?: string(name='EtlId'),
      logDatetime?: string(name='LogDatetime'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
    }
  ](name='EtlRunningLogs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeEtlJobLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEtlJobLogsResponseBody(name='body'),
}

async function describeEtlJobLogs(request: DescribeEtlJobLogsRequest): DescribeEtlJobLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEtlJobLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInitializationStatusRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=300, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model DescribeInitializationStatusResponseBody = {
  dataInitializationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      finishRowNum?: string(name='FinishRowNum'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      totalRowNum?: string(name='TotalRowNum'),
      usedTime?: string(name='UsedTime'),
    }
  ](name='DataInitializationDetails'),
  dataSynchronizationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
    }
  ](name='DataSynchronizationDetails'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  structureInitializationDetails?: [ 
    {
      constraints?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
          errorMessage?: string(name='ErrorMessage'),
          objectDefinition?: string(name='ObjectDefinition'),
          objectName?: string(name='ObjectName'),
          objectType?: string(name='ObjectType'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName'),
          status?: string(name='Status'),
        }
      ](name='Constraints'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      objectDefinition?: string(name='ObjectDefinition'),
      objectName?: string(name='ObjectName'),
      objectType?: string(name='ObjectType'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
    }
  ](name='StructureInitializationDetails'),
  success?: string(name='Success'),
}

model DescribeInitializationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInitializationStatusResponseBody(name='body'),
}

async function describeInitializationStatus(request: DescribeInitializationStatusRequest): DescribeInitializationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInitializationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobMonitorRuleRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeJobMonitorRuleResponseBody = {
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  monitorRules?: [ 
    {
      delayRuleTime?: long(name='DelayRuleTime'),
      phone?: string(name='Phone'),
      state?: string(name='State'),
      type?: string(name='Type'),
    }
  ](name='MonitorRules'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topics?: [ string ](name='Topics'),
}

model DescribeJobMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobMonitorRuleResponseBody(name='body'),
}

async function describeJobMonitorRule(request: DescribeJobMonitorRuleRequest): DescribeJobMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobAlertRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeMigrationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  migrationJobId?: string(name='MigrationJobId'),
  migrationJobName?: string(name='MigrationJobName'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeMigrationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobAlertResponseBody(name='body'),
}

async function describeMigrationJobAlert(request: DescribeMigrationJobAlertRequest): DescribeMigrationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobDetailRequest {
  migrationMode?: {
    dataInitialization?: boolean(name='DataInitialization', position=''),
    dataSynchronization?: boolean(name='DataSynchronization', position=''),
    structureInitialization?: boolean(name='StructureInitialization', position=''),
  }(name='MigrationMode'),
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeMigrationJobDetailResponseBody = {
  dataInitializationDetailList?: {
    dataInitializationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      finishRowNum?: string(name='FinishRowNum'),
      migrationTime?: string(name='MigrationTime'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      totalRowNum?: string(name='TotalRowNum'),
    }
  ](name='DataInitializationDetail')
  }(name='DataInitializationDetailList'),
  dataSynchronizationDetailList?: {
    dataSynchronizationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
    }
  ](name='DataSynchronizationDetail')
  }(name='DataSynchronizationDetailList'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  structureInitializationDetailList?: {
    structureInitializationDetail?: [ 
    {
      constraintList?: {
        structureInitializationDetail?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
          errorMessage?: string(name='ErrorMessage'),
          objectDefinition?: string(name='ObjectDefinition'),
          objectName?: string(name='ObjectName'),
          objectType?: string(name='ObjectType'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName'),
          status?: string(name='Status'),
        }
      ](name='StructureInitializationDetail')
      }(name='ConstraintList'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      objectDefinition?: string(name='ObjectDefinition'),
      objectName?: string(name='ObjectName'),
      objectType?: string(name='ObjectType'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
    }
  ](name='StructureInitializationDetail')
  }(name='StructureInitializationDetailList'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeMigrationJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobDetailResponseBody(name='body'),
}

async function describeMigrationJobDetail(request: DescribeMigrationJobDetailRequest): DescribeMigrationJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobStatusRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeMigrationJobStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint'),
    delay?: string(name='Delay'),
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    oracleSID?: string(name='oracleSID'),
  }(name='DestinationEndpoint'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  migrationJobClass?: string(name='MigrationJobClass'),
  migrationJobId?: string(name='MigrationJobId'),
  migrationJobName?: string(name='MigrationJobName'),
  migrationJobStatus?: string(name='MigrationJobStatus'),
  migrationMode?: {
    dataInitialization?: boolean(name='dataInitialization'),
    dataSynchronization?: boolean(name='dataSynchronization'),
    structureInitialization?: boolean(name='structureInitialization'),
  }(name='MigrationMode'),
  migrationObject?: string(name='MigrationObject'),
  payType?: string(name='PayType'),
  precheckStatus?: {
    detail?: {
      checkItem?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='CheckItem')
    }(name='Detail'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='PrecheckStatus'),
  requestId?: string(name='RequestId'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    oracleSID?: string(name='oracleSID'),
  }(name='SourceEndpoint'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='StructureInitializationStatus'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model DescribeMigrationJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobStatusResponseBody(name='body'),
}

async function describeMigrationJobStatus(request: DescribeMigrationJobStatusRequest): DescribeMigrationJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMigrationJobsRequest {
  accountId?: string(name='AccountId', position='Query'),
  migrationJobName?: string(name='MigrationJobName', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeMigrationJobsResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  migrationJobs?: {
    migrationJob?: [ 
    {
      dataInitialization?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='status'),
      }(name='DataInitialization'),
      dataSynchronization?: {
        delay?: string(name='Delay'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='status'),
      }(name='DataSynchronization'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      jobCreateTime?: string(name='JobCreateTime'),
      migrationJobClass?: string(name='MigrationJobClass'),
      migrationJobID?: string(name='MigrationJobID'),
      migrationJobName?: string(name='MigrationJobName'),
      migrationJobStatus?: string(name='MigrationJobStatus'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      migrationObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList'),
          wholeDatabase?: string(name='WholeDatabase'),
        }
      ](name='SynchronousObject')
      }(name='MigrationObject'),
      payType?: string(name='PayType'),
      precheck?: {
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='Precheck'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      structureInitialization?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='status'),
      }(name='StructureInitialization'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='MigrationJob')
  }(name='MigrationJobs'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeMigrationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobsResponseBody(name='body'),
}

async function describeMigrationJobs(request: DescribeMigrationJobsRequest): DescribeMigrationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMigrationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribePreCheckStatusRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  jobCode: string(name='JobCode', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNo?: string(name='PageNo', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  structPhase?: string(name='StructPhase', position='Query'),
  structType?: string(name='StructType', position='Query'),
}

model DescribePreCheckStatusResponseBody = {
  code?: string(name='Code'),
  errorItem?: int32(name='ErrorItem'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobId?: string(name='JobId'),
  jobName?: string(name='JobName'),
  jobProgress?: [ 
    {
      bootTime?: string(name='BootTime'),
      canSkip?: boolean(name='CanSkip'),
      ddlSql?: string(name='DdlSql'),
      delaySeconds?: int32(name='DelaySeconds'),
      destSchema?: string(name='DestSchema'),
      diffRow?: long(name='DiffRow'),
      errDetail?: string(name='ErrDetail'),
      errMsg?: string(name='ErrMsg'),
      finishTime?: string(name='FinishTime'),
      id?: string(name='Id'),
      ignoreFlag?: string(name='IgnoreFlag'),
      item?: string(name='Item'),
      jobId?: string(name='JobId'),
      logs?: [ 
        {
          errData?: string(name='ErrData'),
          errMsg?: string(name='ErrMsg'),
          errType?: string(name='ErrType'),
          logLevel?: string(name='LogLevel'),
        }
      ](name='Logs'),
      names?: string(name='Names'),
      orderNum?: int32(name='OrderNum'),
      parentObj?: string(name='ParentObj'),
      repairMethod?: string(name='RepairMethod'),
      skip?: boolean(name='Skip'),
      sourceSchema?: string(name='SourceSchema'),
      state?: string(name='State'),
      sub?: string(name='Sub'),
      targetNames?: string(name='TargetNames'),
      total?: int32(name='Total'),
    }
  ](name='JobProgress'),
  pageNumber?: long(name='PageNumber'),
  pageRecordCount?: long(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
  subDistributedJobStatus?: [ 
    {
      code?: string(name='Code'),
      errorItem?: int32(name='ErrorItem'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      jobProgress?: [ 
        {
          bootTime?: string(name='BootTime'),
          canSkip?: boolean(name='CanSkip'),
          ddlSql?: string(name='DdlSql'),
          delaySeconds?: int32(name='DelaySeconds'),
          destSchema?: string(name='DestSchema'),
          diffRow?: long(name='DiffRow'),
          errDetail?: string(name='ErrDetail'),
          errMsg?: string(name='ErrMsg'),
          finishTime?: string(name='FinishTime'),
          id?: string(name='Id'),
          ignoreFlag?: string(name='IgnoreFlag'),
          item?: string(name='Item'),
          jobId?: string(name='JobId'),
          logs?: [ 
            {
              errData?: string(name='ErrData'),
              errMsg?: string(name='ErrMsg'),
              errType?: string(name='ErrType'),
              logLevel?: string(name='LogLevel'),
            }
          ](name='Logs'),
          names?: string(name='Names'),
          orderNum?: int32(name='OrderNum'),
          parentObj?: string(name='ParentObj'),
          repairMethod?: string(name='RepairMethod'),
          skip?: boolean(name='Skip'),
          sourceSchema?: string(name='SourceSchema'),
          state?: string(name='State'),
          sub?: string(name='Sub'),
          targetNames?: string(name='TargetNames'),
          total?: int32(name='Total'),
        }
      ](name='JobProgress'),
      state?: string(name='State'),
      total?: int32(name='Total'),
    }
  ](name='SubDistributedJobStatus'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribePreCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckStatusResponseBody(name='body'),
}

async function describePreCheckStatus(request: DescribePreCheckStatusRequest): DescribePreCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model DescribeSubscriptionInstanceAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  requestId?: string(name='RequestId'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  success?: string(name='Success'),
}

model DescribeSubscriptionInstanceAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstanceAlertResponseBody(name='body'),
}

async function describeSubscriptionInstanceAlert(request: DescribeSubscriptionInstanceAlertRequest): DescribeSubscriptionInstanceAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstanceAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstanceStatusRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model DescribeSubscriptionInstanceStatusResponseBody = {
  beginTimestamp?: string(name='BeginTimestamp'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
  consumptionClient?: string(name='ConsumptionClient'),
  endTimestamp?: string(name='EndTimestamp'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  payType?: string(name='PayType'),
  requestId?: string(name='RequestId'),
  sourceEndpoint?: {
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
  }(name='SourceEndpoint'),
  status?: string(name='Status'),
  subscribeTopic?: string(name='SubscribeTopic'),
  subscriptionDataType?: {
    DDL?: boolean(name='DDL'),
    DML?: boolean(name='DML'),
  }(name='SubscriptionDataType'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost'),
    publicHost?: string(name='PublicHost'),
    VPCHost?: string(name='VPCHost'),
  }(name='SubscriptionHost'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  subscriptionObject?: {
    synchronousObject?: [ 
    {
      databaseName?: string(name='DatabaseName'),
      tableList?: {
        table?: [ string ](name='Table')
      }(name='TableList'),
      wholeDatabase?: string(name='WholeDatabase'),
    }
  ](name='SynchronousObject')
  }(name='SubscriptionObject'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model DescribeSubscriptionInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstanceStatusResponseBody(name='body'),
}

async function describeSubscriptionInstanceStatus(request: DescribeSubscriptionInstanceStatusRequest): DescribeSubscriptionInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionInstancesRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeSubscriptionInstancesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  subscriptionInstances?: {
    subscriptionInstance?: [ 
    {
      beginTimestamp?: string(name='BeginTimestamp'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      jobCreateTime?: string(name='JobCreateTime'),
      payType?: string(name='PayType'),
      sourceEndpoint?: {
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        DDL?: boolean(name='DDL'),
        DML?: boolean(name='DML'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        VPCHost?: string(name='VPCHost'),
      }(name='SubscriptionHost'),
      subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
      subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
      subscriptionObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList'),
          wholeDatabase?: string(name='WholeDatabase'),
        }
      ](name='SynchronousObject')
      }(name='SubscriptionObject'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='SubscriptionInstance')
  }(name='SubscriptionInstances'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeSubscriptionInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstancesResponseBody(name='body'),
}

async function describeSubscriptionInstances(request: DescribeSubscriptionInstancesRequest): DescribeSubscriptionInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubscriptionMetaRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  sid: string(name='Sid', position='Query'),
  subMigrationJobIds?: map[string]any(name='SubMigrationJobIds', position='Query'),
  topics?: map[string]any(name='Topics', position='Query'),
}

model DescribeSubscriptionMetaResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  subscriptionMetaList?: [ 
    {
      checkpoint?: long(name='Checkpoint'),
      DBList?: string(name='DBList'),
      DProxyUrl?: string(name='DProxyUrl'),
      sid?: string(name='Sid'),
      topic?: string(name='Topic'),
    }
  ](name='SubscriptionMetaList'),
  success?: string(name='Success'),
}

model DescribeSubscriptionMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionMetaResponseBody(name='body'),
}

async function describeSubscriptionMeta(request: DescribeSubscriptionMetaRequest): DescribeSubscriptionMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscriptionMeta', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model DescribeSynchronizationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
}

model DescribeSynchronizationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobAlertResponseBody(name='body'),
}

async function describeSynchronizationJobAlert(request: DescribeSynchronizationJobAlertRequest): DescribeSynchronizationJobAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobAlert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model DescribeSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable'),
}

model DescribeSynchronizationJobReplicatorCompareResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function describeSynchronizationJobReplicatorCompare(request: DescribeSynchronizationJobReplicatorCompareRequest): DescribeSynchronizationJobReplicatorCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobReplicatorCompare', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobStatusRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model DescribeSynchronizationJobStatusResponseBody = {
  checkpoint?: string(name='Checkpoint'),
  dataInitialization?: string(name='DataInitialization'),
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint'),
    delay?: string(name='Delay'),
    delayMillis?: long(name='DelayMillis'),
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  delay?: string(name='Delay'),
  delayMillis?: long(name='DelayMillis'),
  destinationEndpoint?: {
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
  }(name='DestinationEndpoint'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  expireTime?: string(name='ExpireTime'),
  payType?: string(name='PayType'),
  performance?: {
    FLOW?: string(name='FLOW'),
    RPS?: string(name='RPS'),
  }(name='Performance'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='Detail'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='PrecheckStatus'),
  requestId?: string(name='RequestId'),
  sourceEndpoint?: {
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  status?: string(name='Status'),
  structureInitialization?: string(name='StructureInitialization'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='StructureInitializationStatus'),
  success?: string(name='Success'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobClass?: string(name='SynchronizationJobClass'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
  synchronizationObjects?: [ 
    {
      newSchemaName?: string(name='NewSchemaName'),
      schemaName?: string(name='SchemaName'),
      tableExcludes?: [ 
        {
          tableName?: string(name='TableName'),
        }
      ](name='TableExcludes'),
      tableIncludes?: [ 
        {
          tableName?: string(name='TableName'),
        }
      ](name='TableIncludes'),
    }
  ](name='SynchronizationObjects'),
  taskId?: string(name='TaskId'),
}

model DescribeSynchronizationJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobStatusResponseBody(name='body'),
}

async function describeSynchronizationJobStatus(request: DescribeSynchronizationJobStatusRequest): DescribeSynchronizationJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobStatusListRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationJobIdListJsonStr: string(name='SynchronizationJobIdListJsonStr', position='Query'),
}

model DescribeSynchronizationJobStatusListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationJobListStatusList?: [ 
    {
      synchronizationDirectionInfoList?: [ 
        {
          checkpoint?: string(name='Checkpoint'),
          status?: string(name='Status'),
          synchronizationDirection?: string(name='SynchronizationDirection'),
        }
      ](name='SynchronizationDirectionInfoList'),
      synchronizationJobId?: string(name='SynchronizationJobId'),
    }
  ](name='SynchronizationJobListStatusList'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeSynchronizationJobStatusListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobStatusListResponseBody(name='body'),
}

async function describeSynchronizationJobStatusList(request: DescribeSynchronizationJobStatusListRequest): DescribeSynchronizationJobStatusListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobStatusList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationJobsRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationJobName?: string(name='SynchronizationJobName', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeSynchronizationJobsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  synchronizationInstances?: [ 
    {
      createTime?: string(name='CreateTime'),
      dataInitialization?: string(name='DataInitialization'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        delay?: string(name='Delay'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      delay?: string(name='Delay'),
      destinationEndpoint?: {
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceId?: string(name='InstanceId'),
        instanceType?: string(name='InstanceType'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      jobCreateTime?: string(name='JobCreateTime'),
      payType?: string(name='PayType'),
      performance?: {
        FLOW?: string(name='FLOW'),
        RPS?: string(name='RPS'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkStatus?: string(name='CheckStatus'),
            errorMessage?: string(name='ErrorMessage'),
            itemName?: string(name='ItemName'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      sourceEndpoint?: {
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceId?: string(name='InstanceId'),
        instanceType?: string(name='InstanceType'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitialization?: string(name='StructureInitialization'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      synchronizationJobClass?: string(name='SynchronizationJobClass'),
      synchronizationJobId?: string(name='SynchronizationJobId'),
      synchronizationJobName?: string(name='SynchronizationJobName'),
      synchronizationObjects?: [ 
        {
          newSchemaName?: string(name='NewSchemaName'),
          schemaName?: string(name='SchemaName'),
          tableExcludes?: [ 
            {
              tableName?: string(name='TableName'),
            }
          ](name='TableExcludes'),
          tableIncludes?: [ 
            {
              tableName?: string(name='TableName'),
            }
          ](name='TableIncludes'),
        }
      ](name='SynchronizationObjects'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='SynchronizationInstances'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeSynchronizationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobsResponseBody(name='body'),
}

async function describeSynchronizationJobs(request: DescribeSynchronizationJobsRequest): DescribeSynchronizationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynchronizationObjectModifyStatusRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeSynchronizationObjectModifyStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    delay?: string(name='Delay'),
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='Detail'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='PrecheckStatus'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='StructureInitializationStatus'),
  success?: string(name='Success'),
}

model DescribeSynchronizationObjectModifyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationObjectModifyStatusResponseBody(name='body'),
}

async function describeSynchronizationObjectModifyStatus(request: DescribeSynchronizationObjectModifyStatusRequest): DescribeSynchronizationObjectModifyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynchronizationObjectModifyStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysRequest {
  category?: string(name='Category', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeTagKeysResponseBody = {
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagKeys?: [ string ](name='TagKeys'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagValuesRequest {
  category?: string(name='Category', position='Query'),
  key?: string(name='Key', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeTagValuesResponseBody = {
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagValues?: [ string ](name='TagValues'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagValuesResponseBody(name='body'),
}

async function describeTagValues(request: DescribeTagValuesRequest): DescribeTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagValues', 'POST', '/', 'json', false, 'json', request);
}

model InitDtsRdsInstanceRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  endpointCenId?: string(name='EndpointCenId', position='Query'),
  endpointInstanceId?: string(name='EndpointInstanceId', position='Query'),
  endpointInstanceType?: string(name='EndpointInstanceType', position='Query'),
  endpointRegion?: string(name='EndpointRegion', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model InitDtsRdsInstanceResponseBody = {
  adminAccount?: string(name='AdminAccount'),
  adminPassword?: string(name='AdminPassword'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model InitDtsRdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: InitDtsRdsInstanceResponseBody(name='body'),
}

async function initDtsRdsInstance(request: InitDtsRdsInstanceRequest): InitDtsRdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitDtsRdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumerChannelRequest {
  consumerGroupId: string(name='ConsumerGroupId', position='Query'),
  consumerGroupName?: string(name='ConsumerGroupName', position='Query'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword', position='Query'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumerChannelResponseBody(name='body'),
}

async function modifyConsumerChannel(request: ModifyConsumerChannelRequest): ModifyConsumerChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumerChannel', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumerGroupPasswordRequest {
  accountId?: string(name='AccountId', position='Query'),
  consumerGroupID: string(name='ConsumerGroupID', position='Query'),
  consumerGroupName?: string(name='ConsumerGroupName', position='Query'),
  consumerGroupPassword: string(name='ConsumerGroupPassword', position='Query'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
  consumerGroupNewPassword: string(name='consumerGroupNewPassword', position='Query'),
}

model ModifyConsumerGroupPasswordResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyConsumerGroupPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumerGroupPasswordResponseBody(name='body'),
}

async function modifyConsumerGroupPassword(request: ModifyConsumerGroupPasswordRequest): ModifyConsumerGroupPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumerGroupPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConsumptionTimestampRequest {
  accountId?: string(name='AccountId', position='Query'),
  consumptionTimestamp: string(name='ConsumptionTimestamp', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model ModifyConsumptionTimestampResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyConsumptionTimestampResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumptionTimestampResponseBody(name='body'),
}

async function modifyConsumptionTimestamp(request: ModifyConsumptionTimestampRequest): ModifyConsumptionTimestampResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConsumptionTimestamp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dbList?: map[string]any(name='DbList', position='Body'),
  dtsInstanceId: string(name='DtsInstanceId', position='Query'),
  etlOperatorColumnReference?: string(name='EtlOperatorColumnReference', position='Body'),
  modifyTypeEnum?: string(name='ModifyTypeEnum', description='修改任务的方式，当为UPDATE_RESERVED时为修改reserve字段，不传默认修改dbList', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  reserved?: string(name='Reserved', description='新增的reserved字段，新增而不是覆盖', position='Body'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model ModifyDtsJobResponseBody = {
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  errMessage?: boolean(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model ModifyDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobResponseBody(name='body'),
}

async function modifyDtsJob(request: ModifyDtsJobRequest): ModifyDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJob', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDtsJobNameRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  dtsJobName?: string(name='DtsJobName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ModifyDtsJobNameResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDtsJobNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobNameResponseBody(name='body'),
}

async function modifyDtsJobName(request: ModifyDtsJobNameRequest): ModifyDtsJobNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDtsJobPasswordRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  endpoint?: string(name='Endpoint', position='Query'),
  password?: string(name='Password', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model ModifyDtsJobPasswordResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDtsJobPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobPasswordResponseBody(name='body'),
}

async function modifyDtsJobPassword(request: ModifyDtsJobPasswordRequest): ModifyDtsJobPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDtsJobPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubscriptionRequest {
  dbList: string(name='DbList', position='Query'),
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionDataTypeDDL: boolean(name='SubscriptionDataTypeDDL', position='Query'),
  subscriptionDataTypeDML: boolean(name='SubscriptionDataTypeDML', position='Query'),
}

model ModifySubscriptionResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifySubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySubscriptionResponseBody(name='body'),
}

async function modifySubscription(request: ModifySubscriptionRequest): ModifySubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubscription', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubscriptionObjectRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
  subscriptionObject: string(name='SubscriptionObject', position='Query'),
}

model ModifySubscriptionObjectResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifySubscriptionObjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySubscriptionObjectResponseBody(name='body'),
}

async function modifySubscriptionObject(request: ModifySubscriptionObjectRequest): ModifySubscriptionObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubscriptionObject', 'POST', '/', 'json', false, 'json', request);
}

model ModifySynchronizationObjectRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
  synchronizationObjects: string(name='SynchronizationObjects', position='Query'),
}

model ModifySynchronizationObjectResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model ModifySynchronizationObjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySynchronizationObjectResponseBody(name='body'),
}

async function modifySynchronizationObject(request: ModifySynchronizationObjectRequest): ModifySynchronizationObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySynchronizationObject', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  buyCount?: string(name='BuyCount', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  dtsJobId: string(name='DtsJobId', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model RenewInstanceResponseBody = {
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTime?: string(name='EndTime'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model ResetDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResetDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDtsJobResponseBody(name='body'),
}

async function resetDtsJob(request: ResetDtsJobRequest): ResetDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model ResetSynchronizationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model ResetSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ResetSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSynchronizationJobResponseBody(name='body'),
}

async function resetSynchronizationJob(request: ResetSynchronizationJobRequest): ResetSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model ShieldPrecheckRequest {
  dtsInstanceId: string(name='DtsInstanceId', position='Query'),
  precheckItems: string(name='PrecheckItems', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ShieldPrecheckResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ShieldPrecheckResponse = {
  headers: map[string]string(name='headers'),
  body: ShieldPrecheckResponseBody(name='body'),
}

async function shieldPrecheck(request: ShieldPrecheckRequest): ShieldPrecheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShieldPrecheck', 'POST', '/', 'json', false, 'json', request);
}

model SkipPreCheckRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  skip: boolean(name='Skip', position='Query'),
  skipPreCheckItems?: string(name='SkipPreCheckItems', position='Query'),
  skipPreCheckNames?: string(name='SkipPreCheckNames', position='Query'),
}

model SkipPreCheckResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  migrationJobId?: string(name='MigrationJobId'),
  requestId?: string(name='RequestId'),
  scheduleJobId?: string(name='ScheduleJobId'),
  skipItems?: string(name='SkipItems'),
  skipNames?: string(name='SkipNames'),
  success?: boolean(name='Success'),
}

model SkipPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPreCheckResponseBody(name='body'),
}

async function skipPreCheck(request: SkipPreCheckRequest): SkipPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SkipPreCheck', 'POST', '/', 'json', false, 'json', request);
}

model StartDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model StartDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartDtsJobResponseBody(name='body'),
}

async function startDtsJob(request: StartDtsJobRequest): StartDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model StartDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model StartDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: StartDtsJobsResponseBody(name='body'),
}

async function startDtsJobs(request: StartDtsJobsRequest): StartDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model StartMigrationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model StartMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model StartMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartMigrationJobResponseBody(name='body'),
}

async function startMigrationJob(request: StartMigrationJobRequest): StartMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model StartSubscriptionInstanceRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  subscriptionInstanceId: string(name='SubscriptionInstanceId', position='Query'),
}

model StartSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model StartSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartSubscriptionInstanceResponseBody(name='body'),
}

async function startSubscriptionInstance(request: StartSubscriptionInstanceRequest): StartSubscriptionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSubscriptionInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartSynchronizationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model StartSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model StartSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartSynchronizationJobResponseBody(name='body'),
}

async function startSynchronizationJob(request: StartSynchronizationJobRequest): StartSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model StopDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model StopDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopDtsJobResponseBody(name='body'),
}

async function stopDtsJob(request: StopDtsJobRequest): StopDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model StopDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model StopDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: StopDtsJobsResponseBody(name='body'),
}

async function stopDtsJobs(request: StopDtsJobsRequest): StopDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model StopMigrationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model StopMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model StopMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopMigrationJobResponseBody(name='body'),
}

async function stopMigrationJob(request: StopMigrationJobRequest): StopMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model SummaryJobDetailRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId: string(name='DtsJobId', position='Query'),
  jobCode: string(name='JobCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model SummaryJobDetailResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobId?: string(name='JobId'),
  progressSummaryDetails?: [ 
    {
      key?: string(name='Key'),
      state?: int32(name='State'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='ProgressSummaryDetails'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SummaryJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: SummaryJobDetailResponseBody(name='body'),
}

async function summaryJobDetail(request: SummaryJobDetailRequest): SummaryJobDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SummaryJobDetail', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId', position='Query'),
  dtsJobId?: string(name='DtsJobId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
}

model SuspendDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendDtsJobResponseBody(name='body'),
}

async function suspendDtsJob(request: SuspendDtsJobRequest): SuspendDtsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDtsJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendDtsJobsRequest {
  dtsJobIds: string(name='DtsJobIds', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model SuspendDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendDtsJobsResponseBody(name='body'),
}

async function suspendDtsJobs(request: SuspendDtsJobsRequest): SuspendDtsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendDtsJobs', 'POST', '/', 'json', false, 'json', request);
}

model SuspendMigrationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  migrationJobId: string(name='MigrationJobId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model SuspendMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model SuspendMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendMigrationJobResponseBody(name='body'),
}

async function suspendMigrationJob(request: SuspendMigrationJobRequest): SuspendMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendMigrationJob', 'POST', '/', 'json', false, 'json', request);
}

model SuspendSynchronizationJobRequest {
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model SuspendSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model SuspendSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendSynchronizationJobResponseBody(name='body'),
}

async function suspendSynchronizationJob(request: SuspendSynchronizationJobRequest): SuspendSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model SwitchSynchronizationEndpointRequest {
  endpoint?: {
    IP?: string(name='IP', position=''),
    instanceId: string(name='InstanceId', position=''),
    instanceType: string(name='InstanceType', position=''),
    port: string(name='Port', position=''),
    type: string(name='Type', position=''),
  }(name='Endpoint'),
  sourceEndpoint?: {
    ownerID?: string(name='OwnerID', position=''),
    role?: string(name='Role', position=''),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  synchronizationDirection?: string(name='SynchronizationDirection', position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', position='Query'),
}

model SwitchSynchronizationEndpointResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model SwitchSynchronizationEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchSynchronizationEndpointResponseBody(name='body'),
}

async function switchSynchronizationEndpoint(request: SwitchSynchronizationEndpointRequest): SwitchSynchronizationEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchSynchronizationEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TransferInstanceClassRequest {
  dtsJobId: string(name='DtsJobId', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model TransferInstanceClassResponseBody = {
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTime?: string(name='EndTime'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: TransferInstanceClassResponseBody(name='body'),
}

async function transferInstanceClass(request: TransferInstanceClassRequest): TransferInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferInstanceClass', 'POST', '/', 'json', false, 'json', request);
}

model TransferPayTypeRequest {
  buyCount?: string(name='BuyCount', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  dtsJobId: string(name='DtsJobId', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model TransferPayTypeResponseBody = {
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTime?: string(name='EndTime'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferPayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransferPayTypeResponseBody(name='body'),
}

async function transferPayType(request: TransferPayTypeRequest): TransferPayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferPayType', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeTwoWayRequest {
  instanceClass: string(name='InstanceClass', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model UpgradeTwoWayResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradeTwoWayResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeTwoWayResponseBody(name='body'),
}

async function upgradeTwoWay(request: UpgradeTwoWayRequest): UpgradeTwoWayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeTwoWay', 'POST', '/', 'json', false, 'json', request);
}

model WhiteIpListRequest {
  destinationRegion?: string(name='DestinationRegion', position='Query'),
  region: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  type: string(name='Type', position='Query'),
}

model WhiteIpListResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  ipList?: string(name='IpList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model WhiteIpListResponse = {
  headers: map[string]string(name='headers'),
  body: WhiteIpListResponseBody(name='body'),
}

async function whiteIpList(request: WhiteIpListRequest): WhiteIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WhiteIpList', 'POST', '/', 'json', false, 'json', request);
}

