/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'dts.aliyuncs.com',
    cn-beijing = 'dts.aliyuncs.com',
    cn-zhangjiakou = 'dts.aliyuncs.com',
    cn-huhehaote = 'dts.aliyuncs.com',
    cn-hangzhou = 'dts.aliyuncs.com',
    cn-shanghai = 'dts.aliyuncs.com',
    cn-shenzhen = 'dts.aliyuncs.com',
    cn-hongkong = 'dts.aliyuncs.com',
    ap-southeast-1 = 'dts.aliyuncs.com',
    ap-southeast-2 = 'dts.aliyuncs.com',
    ap-southeast-3 = 'dts.aliyuncs.com',
    ap-southeast-5 = 'dts.aliyuncs.com',
    eu-west-1 = 'dts.aliyuncs.com',
    us-west-1 = 'dts.aliyuncs.com',
    us-east-1 = 'dts.aliyuncs.com',
    eu-central-1 = 'dts.aliyuncs.com',
    me-east-1 = 'dts.aliyuncs.com',
    ap-south-1 = 'dts.aliyuncs.com',
    cn-hangzhou-finance = 'dts.aliyuncs.com',
    cn-shanghai-finance-1 = 'dts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dts.aliyuncs.com',
    cn-north-2-gov-1 = 'dts.aliyuncs.com',
    ap-northeast-2-pop = 'dts.aliyuncs.com',
    cn-beijing-finance-1 = 'dts.aliyuncs.com',
    cn-beijing-finance-pop = 'dts.aliyuncs.com',
    cn-beijing-gov-1 = 'dts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dts.aliyuncs.com',
    cn-chengdu = 'dts.aliyuncs.com',
    cn-edge-1 = 'dts.aliyuncs.com',
    cn-fujian = 'dts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dts.aliyuncs.com',
    cn-hangzhou-test-306 = 'dts.aliyuncs.com',
    cn-hongkong-finance-pop = 'dts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'dts.aliyuncs.com',
    cn-qingdao-nebula = 'dts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dts.aliyuncs.com',
    cn-shanghai-inner = 'dts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dts.aliyuncs.com',
    cn-shenzhen-inner = 'dts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dts.aliyuncs.com',
    cn-wuhan = 'dts.aliyuncs.com',
    cn-wulanchabu = 'dts.aliyuncs.com',
    cn-yushanfang = 'dts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dts.aliyuncs.com',
    eu-west-1-oxs = 'dts.aliyuncs.com',
    rus-west-1-pop = 'dts.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dts', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConfigureDtsJobRequest {
  checkpoint?: string(name='Checkpoint'),
  dataInitialization?: boolean(name='DataInitialization'),
  dataSynchronization?: boolean(name='DataSynchronization'),
  dbList?: string(name='DbList'),
  dedicatedClusterId?: string(name='DedicatedClusterId'),
  delayNotice?: boolean(name='DelayNotice'),
  delayPhone?: string(name='DelayPhone'),
  delayRuleTime?: long(name='DelayRuleTime'),
  destinationEndpointDataBaseName?: string(name='DestinationEndpointDataBaseName'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  destinationEndpointIP?: string(name='DestinationEndpointIP'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID'),
  destinationEndpointInstanceType?: string(name='DestinationEndpointInstanceType'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword'),
  destinationEndpointPort?: string(name='DestinationEndpointPort'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  errorNotice?: boolean(name='ErrorNotice'),
  errorPhone?: string(name='ErrorPhone'),
  fileOssUrl?: string(name='FileOssUrl'),
  jobType?: string(name='JobType'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  reserve?: string(name='Reserve'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointRole?: string(name='SourceEndpointRole'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
  structureInitialization?: boolean(name='StructureInitialization'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model ConfigureDtsJobAdvanceRequest {
  fileOssUrlObject: readable(name='FileOssUrlObject'),
  checkpoint?: string(name='Checkpoint'),
  dataInitialization?: boolean(name='DataInitialization'),
  dataSynchronization?: boolean(name='DataSynchronization'),
  dbList?: string(name='DbList'),
  dedicatedClusterId?: string(name='DedicatedClusterId'),
  delayNotice?: boolean(name='DelayNotice'),
  delayPhone?: string(name='DelayPhone'),
  delayRuleTime?: long(name='DelayRuleTime'),
  destinationEndpointDataBaseName?: string(name='DestinationEndpointDataBaseName'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  destinationEndpointIP?: string(name='DestinationEndpointIP'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID'),
  destinationEndpointInstanceType?: string(name='DestinationEndpointInstanceType'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword'),
  destinationEndpointPort?: string(name='DestinationEndpointPort'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  errorNotice?: boolean(name='ErrorNotice'),
  errorPhone?: string(name='ErrorPhone'),
  jobType?: string(name='JobType'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  reserve?: string(name='Reserve'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointRole?: string(name='SourceEndpointRole'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
  structureInitialization?: boolean(name='StructureInitialization'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model ConfigureDtsJobResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureDtsJobResponseBody(name='body'),
}

async function configureDtsJobWithOptions(request: ConfigureDtsJobRequest, runtime: Util.RuntimeOptions): ConfigureDtsJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkpoint)) {
    query['Checkpoint'] = request.checkpoint;
  }
  if (!Util.isUnset(request.dataInitialization)) {
    query['DataInitialization'] = request.dataInitialization;
  }
  if (!Util.isUnset(request.dataSynchronization)) {
    query['DataSynchronization'] = request.dataSynchronization;
  }
  if (!Util.isUnset(request.dedicatedClusterId)) {
    query['DedicatedClusterId'] = request.dedicatedClusterId;
  }
  if (!Util.isUnset(request.delayNotice)) {
    query['DelayNotice'] = request.delayNotice;
  }
  if (!Util.isUnset(request.delayPhone)) {
    query['DelayPhone'] = request.delayPhone;
  }
  if (!Util.isUnset(request.delayRuleTime)) {
    query['DelayRuleTime'] = request.delayRuleTime;
  }
  if (!Util.isUnset(request.destinationEndpointDataBaseName)) {
    query['DestinationEndpointDataBaseName'] = request.destinationEndpointDataBaseName;
  }
  if (!Util.isUnset(request.destinationEndpointEngineName)) {
    query['DestinationEndpointEngineName'] = request.destinationEndpointEngineName;
  }
  if (!Util.isUnset(request.destinationEndpointIP)) {
    query['DestinationEndpointIP'] = request.destinationEndpointIP;
  }
  if (!Util.isUnset(request.destinationEndpointInstanceID)) {
    query['DestinationEndpointInstanceID'] = request.destinationEndpointInstanceID;
  }
  if (!Util.isUnset(request.destinationEndpointInstanceType)) {
    query['DestinationEndpointInstanceType'] = request.destinationEndpointInstanceType;
  }
  if (!Util.isUnset(request.destinationEndpointOracleSID)) {
    query['DestinationEndpointOracleSID'] = request.destinationEndpointOracleSID;
  }
  if (!Util.isUnset(request.destinationEndpointPassword)) {
    query['DestinationEndpointPassword'] = request.destinationEndpointPassword;
  }
  if (!Util.isUnset(request.destinationEndpointPort)) {
    query['DestinationEndpointPort'] = request.destinationEndpointPort;
  }
  if (!Util.isUnset(request.destinationEndpointRegion)) {
    query['DestinationEndpointRegion'] = request.destinationEndpointRegion;
  }
  if (!Util.isUnset(request.destinationEndpointUserName)) {
    query['DestinationEndpointUserName'] = request.destinationEndpointUserName;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.dtsJobName)) {
    query['DtsJobName'] = request.dtsJobName;
  }
  if (!Util.isUnset(request.errorNotice)) {
    query['ErrorNotice'] = request.errorNotice;
  }
  if (!Util.isUnset(request.errorPhone)) {
    query['ErrorPhone'] = request.errorPhone;
  }
  if (!Util.isUnset(request.fileOssUrl)) {
    query['FileOssUrl'] = request.fileOssUrl;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceEndpointDatabaseName)) {
    query['SourceEndpointDatabaseName'] = request.sourceEndpointDatabaseName;
  }
  if (!Util.isUnset(request.sourceEndpointEngineName)) {
    query['SourceEndpointEngineName'] = request.sourceEndpointEngineName;
  }
  if (!Util.isUnset(request.sourceEndpointIP)) {
    query['SourceEndpointIP'] = request.sourceEndpointIP;
  }
  if (!Util.isUnset(request.sourceEndpointInstanceID)) {
    query['SourceEndpointInstanceID'] = request.sourceEndpointInstanceID;
  }
  if (!Util.isUnset(request.sourceEndpointInstanceType)) {
    query['SourceEndpointInstanceType'] = request.sourceEndpointInstanceType;
  }
  if (!Util.isUnset(request.sourceEndpointOracleSID)) {
    query['SourceEndpointOracleSID'] = request.sourceEndpointOracleSID;
  }
  if (!Util.isUnset(request.sourceEndpointOwnerID)) {
    query['SourceEndpointOwnerID'] = request.sourceEndpointOwnerID;
  }
  if (!Util.isUnset(request.sourceEndpointPassword)) {
    query['SourceEndpointPassword'] = request.sourceEndpointPassword;
  }
  if (!Util.isUnset(request.sourceEndpointPort)) {
    query['SourceEndpointPort'] = request.sourceEndpointPort;
  }
  if (!Util.isUnset(request.sourceEndpointRegion)) {
    query['SourceEndpointRegion'] = request.sourceEndpointRegion;
  }
  if (!Util.isUnset(request.sourceEndpointRole)) {
    query['SourceEndpointRole'] = request.sourceEndpointRole;
  }
  if (!Util.isUnset(request.sourceEndpointUserName)) {
    query['SourceEndpointUserName'] = request.sourceEndpointUserName;
  }
  if (!Util.isUnset(request.structureInitialization)) {
    query['StructureInitialization'] = request.structureInitialization;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.dbList)) {
    body['DbList'] = request.dbList;
  }
  if (!Util.isUnset(request.reserve)) {
    body['Reserve'] = request.reserve;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureDtsJob(request: ConfigureDtsJobRequest): ConfigureDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureDtsJobWithOptions(request, runtime);
}

async function configureDtsJobAdvance(request: ConfigureDtsJobAdvanceRequest, runtime: Util.RuntimeOptions): ConfigureDtsJobResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Dts',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var configureDtsJobReq = new ConfigureDtsJobRequest{};
  OpenApiUtil.convert(request, configureDtsJobReq);

  if(!Util.isUnset(request.fileOssUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.fileOssUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    configureDtsJobReq.fileOssUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var configureDtsJobResp = configureDtsJobWithOptions(configureDtsJobReq, runtime);
  return configureDtsJobResp;
}

model ConfigureMigrationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName'),
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    oracleSID?: string(name='OracleSID'),
    password?: string(name='Password'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    userName?: string(name='UserName'),
  }(name='DestinationEndpoint'),
  migrationMode?: {
    dataIntialization?: boolean(name='DataIntialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
    structureIntialization?: boolean(name='StructureIntialization'),
  }(name='MigrationMode'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    oracleSID?: string(name='OracleSID'),
    ownerID?: string(name='OwnerID'),
    password?: string(name='Password'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    role?: string(name='Role'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId'),
  checkpoint?: string(name='Checkpoint'),
  migrationJobId?: string(name='MigrationJobId'),
  migrationJobName?: string(name='MigrationJobName'),
  migrationObject?: string(name='MigrationObject'),
  migrationReserved?: string(name='MigrationReserved'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model ConfigureMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureMigrationJobResponseBody(name='body'),
}

async function configureMigrationJobWithOptions(request: ConfigureMigrationJobRequest, runtime: Util.RuntimeOptions): ConfigureMigrationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.checkpoint)) {
    query['Checkpoint'] = request.checkpoint;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.migrationJobName)) {
    query['MigrationJobName'] = request.migrationJobName;
  }
  if (!Util.isUnset(request.migrationReserved)) {
    query['MigrationReserved'] = request.migrationReserved;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.destinationEndpoint)) {
    query['DestinationEndpoint'] = request.destinationEndpoint;
  }
  if (!Util.isUnset(request.migrationMode)) {
    query['MigrationMode'] = request.migrationMode;
  }
  if (!Util.isUnset(request.sourceEndpoint)) {
    query['SourceEndpoint'] = request.sourceEndpoint;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.migrationObject)) {
    body['MigrationObject'] = request.migrationObject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureMigrationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureMigrationJob(request: ConfigureMigrationJobRequest): ConfigureMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureMigrationJobWithOptions(request, runtime);
}

model ConfigureMigrationJobAlertRequest {
  accountId?: string(name='AccountId'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model ConfigureMigrationJobAlertResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureMigrationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureMigrationJobAlertResponseBody(name='body'),
}

async function configureMigrationJobAlertWithOptions(request: ConfigureMigrationJobAlertRequest, runtime: Util.RuntimeOptions): ConfigureMigrationJobAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.delayAlertPhone)) {
    query['DelayAlertPhone'] = request.delayAlertPhone;
  }
  if (!Util.isUnset(request.delayAlertStatus)) {
    query['DelayAlertStatus'] = request.delayAlertStatus;
  }
  if (!Util.isUnset(request.delayOverSeconds)) {
    query['DelayOverSeconds'] = request.delayOverSeconds;
  }
  if (!Util.isUnset(request.errorAlertPhone)) {
    query['ErrorAlertPhone'] = request.errorAlertPhone;
  }
  if (!Util.isUnset(request.errorAlertStatus)) {
    query['ErrorAlertStatus'] = request.errorAlertStatus;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureMigrationJobAlert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureMigrationJobAlert(request: ConfigureMigrationJobAlertRequest): ConfigureMigrationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureMigrationJobAlertWithOptions(request, runtime);
}

model ConfigureSubscriptionRequest {
  checkpoint?: string(name='Checkpoint'),
  dbList?: string(name='DbList'),
  dedicatedClusterId?: string(name='DedicatedClusterId'),
  delayNotice?: boolean(name='DelayNotice'),
  delayPhone?: string(name='DelayPhone'),
  delayRuleTime?: long(name='DelayRuleTime'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  errorNotice?: boolean(name='ErrorNotice'),
  errorPhone?: string(name='ErrorPhone'),
  regionId?: string(name='RegionId'),
  reserve?: string(name='Reserve'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointRole?: string(name='SourceEndpointRole'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType'),
  subscriptionInstanceVPCId?: string(name='SubscriptionInstanceVPCId'),
  subscriptionInstanceVSwitchId?: string(name='SubscriptionInstanceVSwitchId'),
}

model ConfigureSubscriptionResponseBody = {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionResponseBody(name='body'),
}

async function configureSubscriptionWithOptions(request: ConfigureSubscriptionRequest, runtime: Util.RuntimeOptions): ConfigureSubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkpoint)) {
    query['Checkpoint'] = request.checkpoint;
  }
  if (!Util.isUnset(request.dbList)) {
    query['DbList'] = request.dbList;
  }
  if (!Util.isUnset(request.dedicatedClusterId)) {
    query['DedicatedClusterId'] = request.dedicatedClusterId;
  }
  if (!Util.isUnset(request.delayNotice)) {
    query['DelayNotice'] = request.delayNotice;
  }
  if (!Util.isUnset(request.delayPhone)) {
    query['DelayPhone'] = request.delayPhone;
  }
  if (!Util.isUnset(request.delayRuleTime)) {
    query['DelayRuleTime'] = request.delayRuleTime;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.dtsJobName)) {
    query['DtsJobName'] = request.dtsJobName;
  }
  if (!Util.isUnset(request.errorNotice)) {
    query['ErrorNotice'] = request.errorNotice;
  }
  if (!Util.isUnset(request.errorPhone)) {
    query['ErrorPhone'] = request.errorPhone;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reserve)) {
    query['Reserve'] = request.reserve;
  }
  if (!Util.isUnset(request.sourceEndpointDatabaseName)) {
    query['SourceEndpointDatabaseName'] = request.sourceEndpointDatabaseName;
  }
  if (!Util.isUnset(request.sourceEndpointEngineName)) {
    query['SourceEndpointEngineName'] = request.sourceEndpointEngineName;
  }
  if (!Util.isUnset(request.sourceEndpointIP)) {
    query['SourceEndpointIP'] = request.sourceEndpointIP;
  }
  if (!Util.isUnset(request.sourceEndpointInstanceID)) {
    query['SourceEndpointInstanceID'] = request.sourceEndpointInstanceID;
  }
  if (!Util.isUnset(request.sourceEndpointInstanceType)) {
    query['SourceEndpointInstanceType'] = request.sourceEndpointInstanceType;
  }
  if (!Util.isUnset(request.sourceEndpointOracleSID)) {
    query['SourceEndpointOracleSID'] = request.sourceEndpointOracleSID;
  }
  if (!Util.isUnset(request.sourceEndpointOwnerID)) {
    query['SourceEndpointOwnerID'] = request.sourceEndpointOwnerID;
  }
  if (!Util.isUnset(request.sourceEndpointPassword)) {
    query['SourceEndpointPassword'] = request.sourceEndpointPassword;
  }
  if (!Util.isUnset(request.sourceEndpointPort)) {
    query['SourceEndpointPort'] = request.sourceEndpointPort;
  }
  if (!Util.isUnset(request.sourceEndpointRegion)) {
    query['SourceEndpointRegion'] = request.sourceEndpointRegion;
  }
  if (!Util.isUnset(request.sourceEndpointRole)) {
    query['SourceEndpointRole'] = request.sourceEndpointRole;
  }
  if (!Util.isUnset(request.sourceEndpointUserName)) {
    query['SourceEndpointUserName'] = request.sourceEndpointUserName;
  }
  if (!Util.isUnset(request.subscriptionDataTypeDDL)) {
    query['SubscriptionDataTypeDDL'] = request.subscriptionDataTypeDDL;
  }
  if (!Util.isUnset(request.subscriptionDataTypeDML)) {
    query['SubscriptionDataTypeDML'] = request.subscriptionDataTypeDML;
  }
  if (!Util.isUnset(request.subscriptionInstanceNetworkType)) {
    query['SubscriptionInstanceNetworkType'] = request.subscriptionInstanceNetworkType;
  }
  if (!Util.isUnset(request.subscriptionInstanceVPCId)) {
    query['SubscriptionInstanceVPCId'] = request.subscriptionInstanceVPCId;
  }
  if (!Util.isUnset(request.subscriptionInstanceVSwitchId)) {
    query['SubscriptionInstanceVSwitchId'] = request.subscriptionInstanceVSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSubscription',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSubscription(request: ConfigureSubscriptionRequest): ConfigureSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSubscriptionWithOptions(request, runtime);
}

model ConfigureSubscriptionInstanceRequest {
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    IP?: string(name='IP'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    oracleSID?: string(name='OracleSID'),
    ownerID?: string(name='OwnerID'),
    password?: string(name='Password'),
    port?: string(name='Port'),
    role?: string(name='Role'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  subscriptionDataType?: {
    DDL?: boolean(name='DDL'),
    DML?: boolean(name='DML'),
  }(name='SubscriptionDataType'),
  subscriptionInstance?: {
    VPCId?: string(name='VPCId'),
    vSwitchId?: string(name='VSwitchId'),
  }(name='SubscriptionInstance'),
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType'),
  subscriptionObject?: string(name='SubscriptionObject'),
}

model ConfigureSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionInstanceResponseBody(name='body'),
}

async function configureSubscriptionInstanceWithOptions(request: ConfigureSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): ConfigureSubscriptionInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  if (!Util.isUnset(request.subscriptionInstanceName)) {
    query['SubscriptionInstanceName'] = request.subscriptionInstanceName;
  }
  if (!Util.isUnset(request.subscriptionInstanceNetworkType)) {
    query['SubscriptionInstanceNetworkType'] = request.subscriptionInstanceNetworkType;
  }
  if (!Util.isUnset(request.sourceEndpoint)) {
    query['SourceEndpoint'] = request.sourceEndpoint;
  }
  if (!Util.isUnset(request.subscriptionDataType)) {
    query['SubscriptionDataType'] = request.subscriptionDataType;
  }
  if (!Util.isUnset(request.subscriptionInstance)) {
    query['SubscriptionInstance'] = request.subscriptionInstance;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.subscriptionObject)) {
    body['SubscriptionObject'] = request.subscriptionObject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSubscriptionInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSubscriptionInstance(request: ConfigureSubscriptionInstanceRequest): ConfigureSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSubscriptionInstanceWithOptions(request, runtime);
}

model ConfigureSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model ConfigureSubscriptionInstanceAlertResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSubscriptionInstanceAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionInstanceAlertResponseBody(name='body'),
}

async function configureSubscriptionInstanceAlertWithOptions(request: ConfigureSubscriptionInstanceAlertRequest, runtime: Util.RuntimeOptions): ConfigureSubscriptionInstanceAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.delayAlertPhone)) {
    query['DelayAlertPhone'] = request.delayAlertPhone;
  }
  if (!Util.isUnset(request.delayAlertStatus)) {
    query['DelayAlertStatus'] = request.delayAlertStatus;
  }
  if (!Util.isUnset(request.delayOverSeconds)) {
    query['DelayOverSeconds'] = request.delayOverSeconds;
  }
  if (!Util.isUnset(request.errorAlertPhone)) {
    query['ErrorAlertPhone'] = request.errorAlertPhone;
  }
  if (!Util.isUnset(request.errorAlertStatus)) {
    query['ErrorAlertStatus'] = request.errorAlertStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSubscriptionInstanceAlert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSubscriptionInstanceAlert(request: ConfigureSubscriptionInstanceAlertRequest): ConfigureSubscriptionInstanceAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSubscriptionInstanceAlertWithOptions(request, runtime);
}

model ConfigureSynchronizationJobRequest {
  destinationEndpoint?: {
    dataBaseName?: string(name='DataBaseName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    password?: string(name='Password'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
  }(name='DestinationEndpoint'),
  partitionKey?: {
    modifyTimeDay?: boolean(name='ModifyTime_Day'),
    modifyTimeHour?: boolean(name='ModifyTime_Hour'),
    modifyTimeMinute?: boolean(name='ModifyTime_Minute'),
    modifyTimeMonth?: boolean(name='ModifyTime_Month'),
    modifyTimeYear?: boolean(name='ModifyTime_Year'),
  }(name='PartitionKey'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    ownerID?: string(name='OwnerID'),
    password?: string(name='Password'),
    port?: string(name='Port'),
    role?: string(name='Role'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId'),
  checkpoint?: string(name='Checkpoint'),
  dataInitialization?: boolean(name='DataInitialization'),
  migrationReserved?: string(name='MigrationReserved'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  structureInitialization?: boolean(name='StructureInitialization'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
  synchronizationObjects?: string(name='SynchronizationObjects'),
}

model ConfigureSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobResponseBody(name='body'),
}

async function configureSynchronizationJobWithOptions(request: ConfigureSynchronizationJobRequest, runtime: Util.RuntimeOptions): ConfigureSynchronizationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.checkpoint)) {
    query['Checkpoint'] = request.checkpoint;
  }
  if (!Util.isUnset(request.dataInitialization)) {
    query['DataInitialization'] = request.dataInitialization;
  }
  if (!Util.isUnset(request.migrationReserved)) {
    query['MigrationReserved'] = request.migrationReserved;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.structureInitialization)) {
    query['StructureInitialization'] = request.structureInitialization;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  if (!Util.isUnset(request.synchronizationJobName)) {
    query['SynchronizationJobName'] = request.synchronizationJobName;
  }
  if (!Util.isUnset(request.destinationEndpoint)) {
    query['DestinationEndpoint'] = request.destinationEndpoint;
  }
  if (!Util.isUnset(request.partitionKey)) {
    query['PartitionKey'] = request.partitionKey;
  }
  if (!Util.isUnset(request.sourceEndpoint)) {
    query['SourceEndpoint'] = request.sourceEndpoint;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.synchronizationObjects)) {
    body['SynchronizationObjects'] = request.synchronizationObjects;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSynchronizationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSynchronizationJob(request: ConfigureSynchronizationJobRequest): ConfigureSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSynchronizationJobWithOptions(request, runtime);
}

model ConfigureSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model ConfigureSynchronizationJobAlertResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSynchronizationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobAlertResponseBody(name='body'),
}

async function configureSynchronizationJobAlertWithOptions(request: ConfigureSynchronizationJobAlertRequest, runtime: Util.RuntimeOptions): ConfigureSynchronizationJobAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.delayAlertPhone)) {
    query['DelayAlertPhone'] = request.delayAlertPhone;
  }
  if (!Util.isUnset(request.delayAlertStatus)) {
    query['DelayAlertStatus'] = request.delayAlertStatus;
  }
  if (!Util.isUnset(request.delayOverSeconds)) {
    query['DelayOverSeconds'] = request.delayOverSeconds;
  }
  if (!Util.isUnset(request.errorAlertPhone)) {
    query['ErrorAlertPhone'] = request.errorAlertPhone;
  }
  if (!Util.isUnset(request.errorAlertStatus)) {
    query['ErrorAlertStatus'] = request.errorAlertStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSynchronizationJobAlert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSynchronizationJobAlert(request: ConfigureSynchronizationJobAlertRequest): ConfigureSynchronizationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSynchronizationJobAlertWithOptions(request, runtime);
}

model ConfigureSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable'),
}

model ConfigureSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ConfigureSynchronizationJobReplicatorCompareResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function configureSynchronizationJobReplicatorCompareWithOptions(request: ConfigureSynchronizationJobReplicatorCompareRequest, runtime: Util.RuntimeOptions): ConfigureSynchronizationJobReplicatorCompareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  if (!Util.isUnset(request.synchronizationReplicatorCompareEnable)) {
    query['SynchronizationReplicatorCompareEnable'] = request.synchronizationReplicatorCompareEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSynchronizationJobReplicatorCompare',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSynchronizationJobReplicatorCompare(request: ConfigureSynchronizationJobReplicatorCompareRequest): ConfigureSynchronizationJobReplicatorCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSynchronizationJobReplicatorCompareWithOptions(request, runtime);
}

model CountJobByConditionRequest {
  destDbType?: string(name='DestDbType', description='目标端数据库类型'),
  groupId?: string(name='GroupId', description='父任务id'),
  jobType?: string(name='JobType'),
  params?: string(name='Params', description='查询的值，与Type对应'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  srcDbType?: string(name='SrcDbType', description='源端数据库类型'),
  status?: string(name='Status'),
  type?: string(name='Type', description='查询类型'),
}

model CountJobByConditionResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model CountJobByConditionResponse = {
  headers: map[string]string(name='headers'),
  body: CountJobByConditionResponseBody(name='body'),
}

async function countJobByConditionWithOptions(request: CountJobByConditionRequest, runtime: Util.RuntimeOptions): CountJobByConditionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destDbType)) {
    query['DestDbType'] = request.destDbType;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.srcDbType)) {
    query['SrcDbType'] = request.srcDbType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CountJobByCondition',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countJobByCondition(request: CountJobByConditionRequest): CountJobByConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return countJobByConditionWithOptions(request, runtime);
}

model CreateConsumerChannelRequest {
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model CreateConsumerChannelResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerChannelResponseBody(name='body'),
}

async function createConsumerChannelWithOptions(request: CreateConsumerChannelRequest, runtime: Util.RuntimeOptions): CreateConsumerChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupName)) {
    query['ConsumerGroupName'] = request.consumerGroupName;
  }
  if (!Util.isUnset(request.consumerGroupPassword)) {
    query['ConsumerGroupPassword'] = request.consumerGroupPassword;
  }
  if (!Util.isUnset(request.consumerGroupUserName)) {
    query['ConsumerGroupUserName'] = request.consumerGroupUserName;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerChannel',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConsumerChannel(request: CreateConsumerChannelRequest): CreateConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerChannelWithOptions(request, runtime);
}

model CreateConsumerGroupRequest {
  accountId?: string(name='AccountId'),
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model CreateConsumerGroupResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.consumerGroupName)) {
    query['ConsumerGroupName'] = request.consumerGroupName;
  }
  if (!Util.isUnset(request.consumerGroupPassword)) {
    query['ConsumerGroupPassword'] = request.consumerGroupPassword;
  }
  if (!Util.isUnset(request.consumerGroupUserName)) {
    query['ConsumerGroupUserName'] = request.consumerGroupUserName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupWithOptions(request, runtime);
}

model CreateDtsInstanceRequest {
  autoPay?: boolean(name='AutoPay'),
  autoStart?: boolean(name='AutoStart'),
  computeUnit?: int32(name='ComputeUnit'),
  databaseCount?: int32(name='DatabaseCount'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  destinationRegion?: string(name='DestinationRegion'),
  du?: int32(name='Du'),
  feeType?: string(name='FeeType'),
  instanceClass?: string(name='InstanceClass'),
  jobId?: string(name='JobId'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  quantity?: int32(name='Quantity'),
  regionId?: string(name='RegionId'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceRegion?: string(name='SourceRegion'),
  syncArchitecture?: string(name='SyncArchitecture'),
  type?: string(name='Type'),
  usedTime?: int32(name='UsedTime'),
}

model CreateDtsInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateDtsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDtsInstanceResponseBody(name='body'),
}

async function createDtsInstanceWithOptions(request: CreateDtsInstanceRequest, runtime: Util.RuntimeOptions): CreateDtsInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoStart)) {
    query['AutoStart'] = request.autoStart;
  }
  if (!Util.isUnset(request.computeUnit)) {
    query['ComputeUnit'] = request.computeUnit;
  }
  if (!Util.isUnset(request.databaseCount)) {
    query['DatabaseCount'] = request.databaseCount;
  }
  if (!Util.isUnset(request.destinationEndpointEngineName)) {
    query['DestinationEndpointEngineName'] = request.destinationEndpointEngineName;
  }
  if (!Util.isUnset(request.destinationRegion)) {
    query['DestinationRegion'] = request.destinationRegion;
  }
  if (!Util.isUnset(request.du)) {
    query['Du'] = request.du;
  }
  if (!Util.isUnset(request.feeType)) {
    query['FeeType'] = request.feeType;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceEndpointEngineName)) {
    query['SourceEndpointEngineName'] = request.sourceEndpointEngineName;
  }
  if (!Util.isUnset(request.sourceRegion)) {
    query['SourceRegion'] = request.sourceRegion;
  }
  if (!Util.isUnset(request.syncArchitecture)) {
    query['SyncArchitecture'] = request.syncArchitecture;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDtsInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDtsInstance(request: CreateDtsInstanceRequest): CreateDtsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDtsInstanceWithOptions(request, runtime);
}

model CreateJobMonitorRuleRequest {
  delayRuleTime?: long(name='DelayRuleTime'),
  dtsJobId?: string(name='DtsJobId'),
  phone?: string(name='Phone'),
  regionId?: string(name='RegionId'),
  state?: string(name='State'),
  type?: string(name='Type'),
}

model CreateJobMonitorRuleResponseBody = {
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateJobMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobMonitorRuleResponseBody(name='body'),
}

async function createJobMonitorRuleWithOptions(request: CreateJobMonitorRuleRequest, runtime: Util.RuntimeOptions): CreateJobMonitorRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.delayRuleTime)) {
    query['DelayRuleTime'] = request.delayRuleTime;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateJobMonitorRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createJobMonitorRule(request: CreateJobMonitorRuleRequest): CreateJobMonitorRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobMonitorRuleWithOptions(request, runtime);
}

model CreateMigrationJobRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  migrationJobClass?: string(name='MigrationJobClass'),
  ownerId?: string(name='OwnerId'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
}

model CreateMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  migrationJobId?: string(name='MigrationJobId'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMigrationJobResponseBody(name='body'),
}

async function createMigrationJobWithOptions(request: CreateMigrationJobRequest, runtime: Util.RuntimeOptions): CreateMigrationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.migrationJobClass)) {
    query['MigrationJobClass'] = request.migrationJobClass;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMigrationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrationJobWithOptions(request, runtime);
}

model CreateSubscriptionInstanceRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  usedTime?: int32(name='UsedTime'),
}

model CreateSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  success?: string(name='Success'),
}

model CreateSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionInstanceResponseBody(name='body'),
}

async function createSubscriptionInstanceWithOptions(request: CreateSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): CreateSubscriptionInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.sourceEndpoint)) {
    query['SourceEndpoint'] = request.sourceEndpoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubscriptionInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubscriptionInstance(request: CreateSubscriptionInstanceRequest): CreateSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscriptionInstanceWithOptions(request, runtime);
}

model CreateSynchronizationJobRequest {
  destinationEndpoint?: {
    instanceType?: string(name='InstanceType'),
  }(name='DestinationEndpoint'),
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceCount?: int32(name='DBInstanceCount'),
  destRegion?: string(name='DestRegion'),
  ownerId?: string(name='OwnerId'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  regionId?: string(name='RegionId'),
  sourceRegion?: string(name='SourceRegion'),
  synchronizationJobClass?: string(name='SynchronizationJobClass'),
  topology?: string(name='Topology'),
  usedTime?: int32(name='UsedTime'),
  networkType?: string(name='networkType'),
}

model CreateSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model CreateSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSynchronizationJobResponseBody(name='body'),
}

async function createSynchronizationJobWithOptions(request: CreateSynchronizationJobRequest, runtime: Util.RuntimeOptions): CreateSynchronizationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceCount)) {
    query['DBInstanceCount'] = request.DBInstanceCount;
  }
  if (!Util.isUnset(request.destRegion)) {
    query['DestRegion'] = request.destRegion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceRegion)) {
    query['SourceRegion'] = request.sourceRegion;
  }
  if (!Util.isUnset(request.synchronizationJobClass)) {
    query['SynchronizationJobClass'] = request.synchronizationJobClass;
  }
  if (!Util.isUnset(request.topology)) {
    query['Topology'] = request.topology;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.networkType)) {
    query['networkType'] = request.networkType;
  }
  if (!Util.isUnset(request.destinationEndpoint)) {
    query['DestinationEndpoint'] = request.destinationEndpoint;
  }
  if (!Util.isUnset(request.sourceEndpoint)) {
    query['SourceEndpoint'] = request.sourceEndpoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSynchronizationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSynchronizationJob(request: CreateSynchronizationJobRequest): CreateSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSynchronizationJobWithOptions(request, runtime);
}

model DeleteConsumerChannelRequest {
  consumerGroupId?: string(name='ConsumerGroupId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model DeleteConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerChannelResponseBody(name='body'),
}

async function deleteConsumerChannelWithOptions(request: DeleteConsumerChannelRequest, runtime: Util.RuntimeOptions): DeleteConsumerChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupId)) {
    query['ConsumerGroupId'] = request.consumerGroupId;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerChannel',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConsumerChannel(request: DeleteConsumerChannelRequest): DeleteConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerChannelWithOptions(request, runtime);
}

model DeleteConsumerGroupRequest {
  accountId?: string(name='AccountId'),
  consumerGroupID?: string(name='ConsumerGroupID'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model DeleteConsumerGroupResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.consumerGroupID)) {
    query['ConsumerGroupID'] = request.consumerGroupID;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupWithOptions(request, runtime);
}

model DeleteDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model DeleteDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDtsJobResponseBody(name='body'),
}

async function deleteDtsJobWithOptions(request: DeleteDtsJobRequest, runtime: Util.RuntimeOptions): DeleteDtsJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDtsJob(request: DeleteDtsJobRequest): DeleteDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDtsJobWithOptions(request, runtime);
}

model DeleteDtsJobsRequest {
  dtsJobIds?: string(name='DtsJobIds'),
  regionId?: string(name='RegionId'),
}

model DeleteDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDtsJobsResponseBody(name='body'),
}

async function deleteDtsJobsWithOptions(request: DeleteDtsJobsRequest, runtime: Util.RuntimeOptions): DeleteDtsJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobIds)) {
    query['DtsJobIds'] = request.dtsJobIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDtsJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDtsJobs(request: DeleteDtsJobsRequest): DeleteDtsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDtsJobsWithOptions(request, runtime);
}

model DeleteMigrationJobRequest {
  accountId?: string(name='AccountId'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model DeleteMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMigrationJobResponseBody(name='body'),
}

async function deleteMigrationJobWithOptions(request: DeleteMigrationJobRequest, runtime: Util.RuntimeOptions): DeleteMigrationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMigrationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMigrationJobWithOptions(request, runtime);
}

model DeleteSubscriptionInstanceRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model DeleteSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscriptionInstanceResponseBody(name='body'),
}

async function deleteSubscriptionInstanceWithOptions(request: DeleteSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): DeleteSubscriptionInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubscriptionInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSubscriptionInstance(request: DeleteSubscriptionInstanceRequest): DeleteSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubscriptionInstanceWithOptions(request, runtime);
}

model DeleteSynchronizationJobRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model DeleteSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSynchronizationJobResponseBody(name='body'),
}

async function deleteSynchronizationJobWithOptions(request: DeleteSynchronizationJobRequest, runtime: Util.RuntimeOptions): DeleteSynchronizationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSynchronizationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSynchronizationJob(request: DeleteSynchronizationJobRequest): DeleteSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSynchronizationJobWithOptions(request, runtime);
}

model DescribeConnectionStatusRequest {
  destinationEndpointArchitecture?: string(name='DestinationEndpointArchitecture'),
  destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  destinationEndpointIP?: string(name='DestinationEndpointIP'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID'),
  destinationEndpointInstanceType?: string(name='DestinationEndpointInstanceType'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword'),
  destinationEndpointPort?: string(name='DestinationEndpointPort'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName'),
  regionId?: string(name='RegionId'),
  sourceEndpointArchitecture?: string(name='SourceEndpointArchitecture'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
}

model DescribeConnectionStatusResponseBody = {
  destinationConnectionStatus?: map[string]any(name='DestinationConnectionStatus'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  sourceConnectionStatus?: map[string]any(name='SourceConnectionStatus'),
  success?: string(name='Success'),
}

model DescribeConnectionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConnectionStatusResponseBody(name='body'),
}

async function describeConnectionStatusWithOptions(request: DescribeConnectionStatusRequest, runtime: Util.RuntimeOptions): DescribeConnectionStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationEndpointArchitecture)) {
    query['DestinationEndpointArchitecture'] = request.destinationEndpointArchitecture;
  }
  if (!Util.isUnset(request.destinationEndpointDatabaseName)) {
    query['DestinationEndpointDatabaseName'] = request.destinationEndpointDatabaseName;
  }
  if (!Util.isUnset(request.destinationEndpointEngineName)) {
    query['DestinationEndpointEngineName'] = request.destinationEndpointEngineName;
  }
  if (!Util.isUnset(request.destinationEndpointIP)) {
    query['DestinationEndpointIP'] = request.destinationEndpointIP;
  }
  if (!Util.isUnset(request.destinationEndpointInstanceID)) {
    query['DestinationEndpointInstanceID'] = request.destinationEndpointInstanceID;
  }
  if (!Util.isUnset(request.destinationEndpointInstanceType)) {
    query['DestinationEndpointInstanceType'] = request.destinationEndpointInstanceType;
  }
  if (!Util.isUnset(request.destinationEndpointOracleSID)) {
    query['DestinationEndpointOracleSID'] = request.destinationEndpointOracleSID;
  }
  if (!Util.isUnset(request.destinationEndpointPassword)) {
    query['DestinationEndpointPassword'] = request.destinationEndpointPassword;
  }
  if (!Util.isUnset(request.destinationEndpointPort)) {
    query['DestinationEndpointPort'] = request.destinationEndpointPort;
  }
  if (!Util.isUnset(request.destinationEndpointRegion)) {
    query['DestinationEndpointRegion'] = request.destinationEndpointRegion;
  }
  if (!Util.isUnset(request.destinationEndpointUserName)) {
    query['DestinationEndpointUserName'] = request.destinationEndpointUserName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceEndpointArchitecture)) {
    query['SourceEndpointArchitecture'] = request.sourceEndpointArchitecture;
  }
  if (!Util.isUnset(request.sourceEndpointDatabaseName)) {
    query['SourceEndpointDatabaseName'] = request.sourceEndpointDatabaseName;
  }
  if (!Util.isUnset(request.sourceEndpointEngineName)) {
    query['SourceEndpointEngineName'] = request.sourceEndpointEngineName;
  }
  if (!Util.isUnset(request.sourceEndpointIP)) {
    query['SourceEndpointIP'] = request.sourceEndpointIP;
  }
  if (!Util.isUnset(request.sourceEndpointInstanceID)) {
    query['SourceEndpointInstanceID'] = request.sourceEndpointInstanceID;
  }
  if (!Util.isUnset(request.sourceEndpointInstanceType)) {
    query['SourceEndpointInstanceType'] = request.sourceEndpointInstanceType;
  }
  if (!Util.isUnset(request.sourceEndpointOracleSID)) {
    query['SourceEndpointOracleSID'] = request.sourceEndpointOracleSID;
  }
  if (!Util.isUnset(request.sourceEndpointPassword)) {
    query['SourceEndpointPassword'] = request.sourceEndpointPassword;
  }
  if (!Util.isUnset(request.sourceEndpointPort)) {
    query['SourceEndpointPort'] = request.sourceEndpointPort;
  }
  if (!Util.isUnset(request.sourceEndpointRegion)) {
    query['SourceEndpointRegion'] = request.sourceEndpointRegion;
  }
  if (!Util.isUnset(request.sourceEndpointUserName)) {
    query['SourceEndpointUserName'] = request.sourceEndpointUserName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeConnectionStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConnectionStatus(request: DescribeConnectionStatusRequest): DescribeConnectionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConnectionStatusWithOptions(request, runtime);
}

model DescribeConsumerChannelRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  parentChannelId?: string(name='ParentChannelId'),
  regionId?: string(name='RegionId'),
}

model DescribeConsumerChannelResponseBody = {
  consumerChannels?: [ 
    {
      consumerGroupId?: string(name='ConsumerGroupId'),
      consumerGroupName?: string(name='ConsumerGroupName'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      messageDelay?: long(name='MessageDelay'),
      unconsumedData?: long(name='UnconsumedData'),
    }
  ](name='ConsumerChannels'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConsumerChannelResponseBody(name='body'),
}

async function describeConsumerChannelWithOptions(request: DescribeConsumerChannelRequest, runtime: Util.RuntimeOptions): DescribeConsumerChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentChannelId)) {
    query['ParentChannelId'] = request.parentChannelId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeConsumerChannel',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConsumerChannel(request: DescribeConsumerChannelRequest): DescribeConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConsumerChannelWithOptions(request, runtime);
}

model DescribeConsumerGroupRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model DescribeConsumerGroupResponseBody = {
  consumerChannels?: {
    describeConsumerChannel?: [ 
    {
      consumerGroupID?: string(name='ConsumerGroupID'),
      consumerGroupName?: string(name='ConsumerGroupName'),
      consumerGroupUserName?: string(name='ConsumerGroupUserName'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      messageDelay?: long(name='MessageDelay'),
      unconsumedData?: long(name='UnconsumedData'),
    }
  ](name='DescribeConsumerChannel')
  }(name='ConsumerChannels'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConsumerGroupResponseBody(name='body'),
}

async function describeConsumerGroupWithOptions(request: DescribeConsumerGroupRequest, runtime: Util.RuntimeOptions): DescribeConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeConsumerGroup',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConsumerGroup(request: DescribeConsumerGroupRequest): DescribeConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConsumerGroupWithOptions(request, runtime);
}

model DescribeDTSIPRequest {
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
  regionId?: string(name='RegionId'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
}

model DescribeDTSIPResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeDTSIPResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDTSIPResponseBody(name='body'),
}

async function describeDTSIPWithOptions(request: DescribeDTSIPRequest, runtime: Util.RuntimeOptions): DescribeDTSIPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationEndpointRegion)) {
    query['DestinationEndpointRegion'] = request.destinationEndpointRegion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceEndpointRegion)) {
    query['SourceEndpointRegion'] = request.sourceEndpointRegion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDTSIP',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDTSIP(request: DescribeDTSIPRequest): DescribeDTSIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDTSIPWithOptions(request, runtime);
}

model DescribeDtsEtlJobVersionInfoRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeDtsEtlJobVersionInfoResponseBody = {
  dtsEtlJobVersionInfos?: [ 
    {
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      creatorName?: string(name='CreatorName'),
      dtsInstanceId?: string(name='DtsInstanceId'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      modifyTime?: string(name='ModifyTime'),
      safeCheckpoint?: string(name='SafeCheckpoint'),
      status?: string(name='Status'),
      version?: int32(name='Version'),
    }
  ](name='DtsEtlJobVersionInfos'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDtsEtlJobVersionInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsEtlJobVersionInfoResponseBody(name='body'),
}

async function describeDtsEtlJobVersionInfoWithOptions(request: DescribeDtsEtlJobVersionInfoRequest, runtime: Util.RuntimeOptions): DescribeDtsEtlJobVersionInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDtsEtlJobVersionInfo',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDtsEtlJobVersionInfo(request: DescribeDtsEtlJobVersionInfoRequest): DescribeDtsEtlJobVersionInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDtsEtlJobVersionInfoWithOptions(request, runtime);
}

model DescribeDtsJobDetailRequest {
  dtsInstanceID?: string(name='DtsInstanceID'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  syncSubJobHistory?: boolean(name='SyncSubJobHistory', description='是否返回所有的同步子任务'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model DescribeDtsJobDetailResponseBody = {
  appName?: string(name='AppName'),
  beginTimestamp?: string(name='BeginTimestamp'),
  checkpoint?: long(name='Checkpoint'),
  code?: int32(name='Code'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
  consumptionClient?: string(name='ConsumptionClient'),
  createTime?: string(name='CreateTime'),
  databaseCount?: int32(name='DatabaseCount'),
  dbObject?: string(name='DbObject'),
  dedicatedClusterId?: string(name='DedicatedClusterId'),
  delay?: long(name='Delay'),
  demoJob?: boolean(name='DemoJob'),
  destNetType?: string(name='DestNetType'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    ip?: string(name='Ip'),
    oracleSID?: string(name='OracleSID'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    sslSolutionEnum?: string(name='SslSolutionEnum'),
    userName?: string(name='UserName'),
  }(name='DestinationEndpoint'),
  dtsInstanceID?: string(name='DtsInstanceID'),
  dtsJobClass?: string(name='DtsJobClass'),
  dtsJobDirection?: string(name='DtsJobDirection'),
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTimestamp?: string(name='EndTimestamp'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  etlCalculator?: string(name='EtlCalculator'),
  expireTime?: string(name='ExpireTime'),
  finishTime?: string(name='FinishTime'),
  groupId?: string(name='GroupId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobType?: string(name='JobType'),
  migrationMode?: {
    dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
    dataInitialization?: boolean(name='DataInitialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
    structureInitialization?: boolean(name='StructureInitialization'),
  }(name='MigrationMode'),
  payType?: string(name='PayType'),
  requestId?: string(name='RequestId'),
  reserved?: string(name='Reserved'),
  sourceEndpoint?: {
    aliyunUid?: string(name='AliyunUid'),
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
    ip?: string(name='Ip'),
    oracleSID?: string(name='OracleSID'),
    port?: string(name='Port'),
    region?: string(name='Region'),
    roleName?: string(name='RoleName'),
    sslSolutionEnum?: string(name='SslSolutionEnum'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  status?: string(name='Status'),
  subDistributedJob?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataSynchronizationStatus'),
      databaseCount?: int32(name='DatabaseCount'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destNetType?: string(name='DestNetType'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      etlCalculator?: string(name='EtlCalculator'),
      expireTime?: string(name='ExpireTime'),
      finishTime?: string(name='FinishTime'),
      groupId?: string(name='GroupId'),
      isDemoJob?: boolean(name='IsDemoJob'),
      jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
        rps?: string(name='Rps', description='每秒同步的记录数'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='预检查项'),
            checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
            checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
            failedReason?: string(name='FailedReason', description='错误原因'),
            repairMethod?: string(name='RepairMethod', description='修复方法'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMsg?: string(name='ErrMsg', description='错误信息'),
        jobId?: string(name='JobId', description='任务ID'),
        maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
        module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
        retryCount?: int32(name='RetryCount', description='已重试次数'),
        retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
        retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
        retrying?: boolean(name='Retrying', description='是否重试中'),
      }(name='RetryState'),
      reverseJob?: {
        appName?: string(name='AppName'),
        beginTimestamp?: string(name='BeginTimestamp'),
        checkpoint?: string(name='Checkpoint'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
        consumptionClient?: string(name='ConsumptionClient'),
        createTime?: string(name='CreateTime'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataEtlStatus'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataSynchronizationStatus'),
        databaseCount?: int32(name='DatabaseCount'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destNetType?: string(name='DestNetType'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        endTimestamp?: string(name='EndTimestamp'),
        errorMessage?: string(name='ErrorMessage'),
        etlCalculator?: string(name='EtlCalculator'),
        expireTime?: string(name='ExpireTime'),
        finishTime?: string(name='FinishTime'),
        groupId?: string(name='GroupId'),
        isDemoJob?: boolean(name='IsDemoJob'),
        jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
          rps?: string(name='Rps', description='每秒同步的记录数'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='预检查项'),
              checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
              checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
              failedReason?: string(name='FailedReason', description='错误原因'),
              repairMethod?: string(name='RepairMethod', description='修复方法'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        retryState?: {
          errMsg?: string(name='ErrMsg', description='错误信息'),
          jobId?: string(name='JobId', description='任务ID'),
          maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
          module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
          retryCount?: int32(name='RetryCount', description='已重试次数'),
          retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
          retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
          retrying?: boolean(name='Retrying', description='是否重试中'),
        }(name='RetryState'),
        reverseJob?: any(name='ReverseJob'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='StructureInitializationStatus'),
        subscribeTopic?: string(name='SubscribeTopic'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl'),
          dml?: boolean(name='Dml'),
        }(name='SubscriptionDataType'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost'),
          publicHost?: string(name='PublicHost'),
          vpcHost?: string(name='VpcHost'),
        }(name='SubscriptionHost'),
        synchronizationDirection?: string(name='SynchronizationDirection'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid', description='用户id'),
            creator?: long(name='Creator', description='标签操作者'),
            gmtCreate?: string(name='GmtCreate', description='创建时间'),
            gmtModified?: string(name='GmtModified', description='修改时间'),
            id?: long(name='Id', description='主键'),
            regionId?: string(name='RegionId', description='region_id'),
            resourceId?: string(name='ResourceId', description='dts instance id'),
            resourceType?: string(name='ResourceType', description='资源类型'),
            scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
            srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
            tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
            tagKey?: string(name='TagKey', description='标签键tagkey'),
            tagValue?: string(name='TagValue', description='标签值tagvalue'),
          }
        ](name='TagList'),
        taskType?: string(name='TaskType'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='StructureInitializationStatus'),
      subSyncJob?: [ any ](name='SubSyncJob'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl'),
        dml?: boolean(name='Dml'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        vpcHost?: string(name='VpcHost'),
      }(name='SubscriptionHost'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid', description='用户id'),
          creator?: long(name='Creator', description='标签操作者'),
          gmtCreate?: string(name='GmtCreate', description='创建时间'),
          gmtModified?: string(name='GmtModified', description='修改时间'),
          id?: long(name='Id', description='主键'),
          regionId?: string(name='RegionId', description='region_id'),
          resourceId?: string(name='ResourceId', description='dts instance id'),
          resourceType?: string(name='ResourceType', description='资源类型'),
          scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
          srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
          tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
          tagKey?: string(name='TagKey', description='标签键tagkey'),
          tagValue?: string(name='TagValue', description='标签值tagvalue'),
        }
      ](name='TagList'),
      taskType?: string(name='TaskType'),
    }
  ](name='SubDistributedJob'),
  subSyncJob?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='DataSynchronizationStatus'),
      databaseCount?: int32(name='DatabaseCount'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destNetType?: string(name='DestNetType'),
      destinationEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      etlCalculator?: string(name='EtlCalculator'),
      expireTime?: string(name='ExpireTime'),
      finishTime?: string(name='FinishTime'),
      groupId?: string(name='GroupId'),
      isDemoJob?: boolean(name='IsDemoJob'),
      jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
      migrationMode?: {
        dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
        rps?: string(name='Rps', description='每秒同步的记录数'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem', description='预检查项'),
            checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
            checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
            failedReason?: string(name='FailedReason', description='错误原因'),
            repairMethod?: string(name='RepairMethod', description='修复方法'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMsg?: string(name='ErrMsg', description='错误信息'),
        jobId?: string(name='JobId', description='任务ID'),
        maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
        module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
        retryCount?: int32(name='RetryCount', description='已重试次数'),
        retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
        retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
        retrying?: boolean(name='Retrying', description='是否重试中'),
      }(name='RetryState'),
      reverseJob?: {
        appName?: string(name='AppName'),
        beginTimestamp?: string(name='BeginTimestamp'),
        checkpoint?: string(name='Checkpoint'),
        consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
        consumptionClient?: string(name='ConsumptionClient'),
        createTime?: string(name='CreateTime'),
        dataEtlStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataEtlStatus'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='DataSynchronizationStatus'),
        databaseCount?: int32(name='DatabaseCount'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destNetType?: string(name='DestNetType'),
        destinationEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection', description='请使用'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        endTimestamp?: string(name='EndTimestamp'),
        errorMessage?: string(name='ErrorMessage'),
        etlCalculator?: string(name='EtlCalculator'),
        expireTime?: string(name='ExpireTime'),
        finishTime?: string(name='FinishTime'),
        groupId?: string(name='GroupId'),
        isDemoJob?: boolean(name='IsDemoJob'),
        jobType?: string(name='JobType', description='返回结果中新增jobType字段'),
        migrationMode?: {
          dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        originType?: string(name='OriginType', description='任务来源 pts任务、dms任务 (PTS, DMS, DTS)'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow', description='每秒同步的流量，单位为：MB/s'),
          rps?: string(name='Rps', description='每秒同步的记录数'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem', description='预检查项'),
              checkItemDescription?: string(name='CheckItemDescription', description='检查项的描述'),
              checkResult?: string(name='CheckResult', description='检查结果 (NotStarted: 未启动, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Warning: 警告, Success: 完成)'),
              failedReason?: string(name='FailedReason', description='错误原因'),
              repairMethod?: string(name='RepairMethod', description='修复方法'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        retryState?: {
          errMsg?: string(name='ErrMsg', description='错误信息'),
          jobId?: string(name='JobId', description='任务ID'),
          maxRetryTime?: int32(name='MaxRetryTime', description='最大重试时间,单位秒'),
          module?: string(name='Module', description='模块名称 reader/store/writer/full/struct'),
          retryCount?: int32(name='RetryCount', description='已重试次数'),
          retryTarget?: string(name='RetryTarget', description='srcDB/destDB/metaDB/dstore'),
          retryTime?: int32(name='RetryTime', description='已重试时间,单位秒'),
          retrying?: boolean(name='Retrying', description='是否重试中'),
        }(name='RetryState'),
        reverseJob?: any(name='ReverseJob'),
        sourceEndpoint?: {
          aliyunUid?: string(name='AliyunUid'),
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          roleName?: string(name='RoleName'),
          sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
          percent?: string(name='Percent', description='迁移进度'),
          progress?: string(name='Progress', description='已经完成迁移的表数量'),
          status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
        }(name='StructureInitializationStatus'),
        subscribeTopic?: string(name='SubscribeTopic'),
        subscriptionDataType?: {
          ddl?: boolean(name='Ddl'),
          dml?: boolean(name='Dml'),
        }(name='SubscriptionDataType'),
        subscriptionHost?: {
          privateHost?: string(name='PrivateHost'),
          publicHost?: string(name='PublicHost'),
          vpcHost?: string(name='VpcHost'),
        }(name='SubscriptionHost'),
        synchronizationDirection?: string(name='SynchronizationDirection'),
        tagList?: [ 
          {
            aliUid?: long(name='AliUid', description='用户id'),
            creator?: long(name='Creator', description='标签操作者'),
            gmtCreate?: string(name='GmtCreate', description='创建时间'),
            gmtModified?: string(name='GmtModified', description='修改时间'),
            id?: long(name='Id', description='主键'),
            regionId?: string(name='RegionId', description='region_id'),
            resourceId?: string(name='ResourceId', description='dts instance id'),
            resourceType?: string(name='ResourceType', description='资源类型'),
            scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
            srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
            tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
            tagKey?: string(name='TagKey', description='标签键tagkey'),
            tagValue?: string(name='TagValue', description='标签值tagvalue'),
          }
        ](name='TagList'),
        taskType?: string(name='TaskType'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        aliyunUid?: string(name='AliyunUid'),
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        roleName?: string(name='RoleName'),
        sslSolutionEnum?: string(name='SslSolutionEnum', description='DISABLE: 不使用 SSL, ENABLE_WITH_CERTIFICATE: 使用 SSL, 需要用户上传 CA 证书, ENABLE_ONLY_4_MONGODB_ATLAS: 使用 SSL, 但只适用于 AWS MongoDB Altas, 不需要证书, ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256: Kafka SCRAM-SHA-256 支持, 不需要证书'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade', description='是否显示提升升级规格'),
        percent?: string(name='Percent', description='迁移进度'),
        progress?: string(name='Progress', description='已经完成迁移的表数量'),
        status?: string(name='Status', description='NotStarted: 未启动, Suspending: 暂停中, Checking: 检查中, Migrating: 迁移中, Failed: 失败, Catched: 同步中 ｜ 增量迁移中, Finished: 完成'),
      }(name='StructureInitializationStatus'),
      subSyncJob?: [ any ](name='SubSyncJob'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        ddl?: boolean(name='Ddl'),
        dml?: boolean(name='Dml'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        vpcHost?: string(name='VpcHost'),
      }(name='SubscriptionHost'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      tagList?: [ 
        {
          aliUid?: long(name='AliUid', description='用户id'),
          creator?: long(name='Creator', description='标签操作者'),
          gmtCreate?: string(name='GmtCreate', description='创建时间'),
          gmtModified?: string(name='GmtModified', description='修改时间'),
          id?: long(name='Id', description='主键'),
          regionId?: string(name='RegionId', description='region_id'),
          resourceId?: string(name='ResourceId', description='dts instance id'),
          resourceType?: string(name='ResourceType', description='资源类型'),
          scope?: string(name='Scope', description='0为public，1为private (Public, Private, All)'),
          srcRegion?: string(name='SrcRegion', description='任务所在region，注意一般是dts的目标端region'),
          tagCategory?: string(name='TagCategory', description='标签类型：系统标签－System，用户标签－Custom (Custom, System, All)'),
          tagKey?: string(name='TagKey', description='标签键tagkey'),
          tagValue?: string(name='TagValue', description='标签值tagvalue'),
        }
      ](name='TagList'),
      taskType?: string(name='TaskType'),
    }
  ](name='SubSyncJob'),
  subscribeTopic?: string(name='SubscribeTopic'),
  subscriptionDataType?: {
    ddl?: boolean(name='Ddl'),
    dml?: boolean(name='Dml'),
  }(name='SubscriptionDataType'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost'),
    publicHost?: string(name='PublicHost'),
    vpcHost?: string(name='VpcHost'),
  }(name='SubscriptionHost'),
  success?: boolean(name='Success'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  taskType?: string(name='TaskType'),
}

model DescribeDtsJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsJobDetailResponseBody(name='body'),
}

async function describeDtsJobDetailWithOptions(request: DescribeDtsJobDetailRequest, runtime: Util.RuntimeOptions): DescribeDtsJobDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceID)) {
    query['DtsInstanceID'] = request.dtsInstanceID;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.syncSubJobHistory)) {
    query['SyncSubJobHistory'] = request.syncSubJobHistory;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDtsJobDetail',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDtsJobDetail(request: DescribeDtsJobDetailRequest): DescribeDtsJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDtsJobDetailWithOptions(request, runtime);
}

model DescribeDtsJobsRequest {
  dedicatedClusterId?: string(name='DedicatedClusterId'),
  dedicatedClusterNodeId?: long(name='DedicatedClusterNodeId'),
  dtsJobId?: string(name='DtsJobId'),
  groupId?: string(name='GroupId'),
  jobType?: string(name='JobType'),
  orderColumn?: string(name='OrderColumn'),
  orderDirection?: string(name='OrderDirection'),
  ownerId?: string(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  params?: string(name='Params'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  tags?: string(name='Tags'),
  type?: string(name='Type'),
}

model DescribeDtsJobsResponseBody = {
  dtsJobList?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      cpuUsage?: string(name='CpuUsage'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      dbObject?: string(name='DbObject'),
      dedicatedClusterId?: string(name='DedicatedClusterId'),
      delay?: long(name='Delay'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      duUsage?: long(name='DuUsage'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      jobType?: string(name='JobType', description='DTS任务类型'),
      memUsage?: string(name='MemUsage'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow'),
        rps?: string(name='Rps'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkResult?: string(name='CheckResult'),
            failedReason?: string(name='FailedReason'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMessage?: string(name='ErrMessage'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        retryCount?: int32(name='RetryCount'),
        retryTarget?: string(name='RetryTarget'),
        retryTime?: int32(name='RetryTime'),
      }(name='RetryState'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint'),
        cpuUsage?: string(name='CpuUsage'),
        createTime?: string(name='CreateTime'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataSynchronizationStatus'),
        dbObject?: string(name='DbObject'),
        dedicatedClusterId?: string(name='DedicatedClusterId'),
        delay?: long(name='Delay'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        duUsage?: long(name='DuUsage'),
        errorMessage?: string(name='ErrorMessage'),
        expireTime?: string(name='ExpireTime'),
        memUsage?: string(name='MemUsage'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow'),
          rps?: string(name='Rps'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkResult?: string(name='CheckResult'),
              failedReason?: string(name='FailedReason'),
              repairMethod?: string(name='RepairMethod'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='StructureInitializationStatus'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
    }
  ](name='DtsJobList'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  etlDemoList?: [ 
    {
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      checkpoint?: string(name='Checkpoint'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      createTime?: string(name='CreateTime'),
      dataEtlStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataEtlStatus'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      dbObject?: string(name='DbObject'),
      delay?: long(name='Delay'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobClass?: string(name='DtsJobClass'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      dtsJobId?: string(name='DtsJobId'),
      dtsJobName?: string(name='DtsJobName'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      jobType?: string(name='JobType', description='DtsJob类型'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      originType?: string(name='OriginType'),
      payType?: string(name='PayType'),
      performance?: {
        flow?: string(name='Flow'),
        rps?: string(name='Rps'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkItem?: string(name='CheckItem'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkResult?: string(name='CheckResult'),
            failedReason?: string(name='FailedReason'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      reserved?: string(name='Reserved'),
      retryState?: {
        errMessage?: string(name='ErrMessage'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        retryCount?: int32(name='RetryCount'),
        retryTarget?: string(name='RetryTarget'),
        retryTime?: int32(name='RetryTime'),
      }(name='RetryState'),
      reverseJob?: {
        checkpoint?: string(name='Checkpoint'),
        createTime?: string(name='CreateTime'),
        dataInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='DataSynchronizationStatus'),
        dbObject?: string(name='DbObject'),
        delay?: long(name='Delay'),
        destinationEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='DestinationEndpoint'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        dtsJobId?: string(name='DtsJobId'),
        dtsJobName?: string(name='DtsJobName'),
        errorMessage?: string(name='ErrorMessage'),
        expireTime?: string(name='ExpireTime'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        payType?: string(name='PayType'),
        performance?: {
          flow?: string(name='Flow'),
          rps?: string(name='Rps'),
        }(name='Performance'),
        precheckStatus?: {
          detail?: [ 
            {
              checkItem?: string(name='CheckItem'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkResult?: string(name='CheckResult'),
              failedReason?: string(name='FailedReason'),
              repairMethod?: string(name='RepairMethod'),
            }
          ](name='Detail'),
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          status?: string(name='Status'),
        }(name='PrecheckStatus'),
        reserved?: string(name='Reserved'),
        sourceEndpoint?: {
          databaseName?: string(name='DatabaseName'),
          engineName?: string(name='EngineName'),
          instanceID?: string(name='InstanceID'),
          instanceType?: string(name='InstanceType'),
          ip?: string(name='Ip'),
          oracleSID?: string(name='OracleSID'),
          port?: string(name='Port'),
          region?: string(name='Region'),
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          userName?: string(name='UserName'),
        }(name='SourceEndpoint'),
        status?: string(name='Status'),
        structureInitializationStatus?: {
          errorMessage?: string(name='ErrorMessage'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          status?: string(name='Status'),
        }(name='StructureInitializationStatus'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        ip?: string(name='Ip'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        region?: string(name='Region'),
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
    }
  ](name='EtlDemoList'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsJobsResponseBody(name='body'),
}

async function describeDtsJobsWithOptions(request: DescribeDtsJobsRequest, runtime: Util.RuntimeOptions): DescribeDtsJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedClusterId)) {
    query['DedicatedClusterId'] = request.dedicatedClusterId;
  }
  if (!Util.isUnset(request.dedicatedClusterNodeId)) {
    query['DedicatedClusterNodeId'] = request.dedicatedClusterNodeId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.orderColumn)) {
    query['OrderColumn'] = request.orderColumn;
  }
  if (!Util.isUnset(request.orderDirection)) {
    query['OrderDirection'] = request.orderDirection;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDtsJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDtsJobs(request: DescribeDtsJobsRequest): DescribeDtsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDtsJobsWithOptions(request, runtime);
}

model DescribeDtsServiceLogRequest {
  dtsJobId?: string(name='DtsJobId'),
  endTime?: long(name='EndTime'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
  subJobType?: string(name='SubJobType'),
}

model DescribeDtsServiceLogResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  serviceLogContexts?: [ 
    {
      context?: string(name='Context'),
      state?: string(name='State'),
      time?: string(name='Time'),
    }
  ](name='ServiceLogContexts'),
  success?: boolean(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeDtsServiceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsServiceLogResponseBody(name='body'),
}

async function describeDtsServiceLogWithOptions(request: DescribeDtsServiceLogRequest, runtime: Util.RuntimeOptions): DescribeDtsServiceLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.subJobType)) {
    query['SubJobType'] = request.subJobType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDtsServiceLog',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDtsServiceLog(request: DescribeDtsServiceLogRequest): DescribeDtsServiceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDtsServiceLogWithOptions(request, runtime);
}

model DescribeEndpointSwitchStatusRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model DescribeEndpointSwitchStatusResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: string(name='Success'),
}

model DescribeEndpointSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEndpointSwitchStatusResponseBody(name='body'),
}

async function describeEndpointSwitchStatusWithOptions(request: DescribeEndpointSwitchStatusRequest, runtime: Util.RuntimeOptions): DescribeEndpointSwitchStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEndpointSwitchStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEndpointSwitchStatus(request: DescribeEndpointSwitchStatusRequest): DescribeEndpointSwitchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEndpointSwitchStatusWithOptions(request, runtime);
}

model DescribeEtlJobLogsRequest {
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model DescribeEtlJobLogsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  etlRunningLogs?: [ 
    {
      content?: string(name='Content'),
      contentKey?: string(name='ContentKey'),
      etlId?: string(name='EtlId'),
      logDatetime?: string(name='LogDatetime'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
    }
  ](name='EtlRunningLogs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeEtlJobLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEtlJobLogsResponseBody(name='body'),
}

async function describeEtlJobLogsWithOptions(request: DescribeEtlJobLogsRequest, runtime: Util.RuntimeOptions): DescribeEtlJobLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEtlJobLogs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEtlJobLogs(request: DescribeEtlJobLogsRequest): DescribeEtlJobLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEtlJobLogsWithOptions(request, runtime);
}

model DescribeInitializationStatusRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model DescribeInitializationStatusResponseBody = {
  dataInitializationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      finishRowNum?: string(name='FinishRowNum'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      totalRowNum?: string(name='TotalRowNum'),
      usedTime?: string(name='UsedTime'),
    }
  ](name='DataInitializationDetails'),
  dataSynchronizationDetails?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
    }
  ](name='DataSynchronizationDetails'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  structureInitializationDetails?: [ 
    {
      constraints?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
          errorMessage?: string(name='ErrorMessage'),
          objectDefinition?: string(name='ObjectDefinition'),
          objectName?: string(name='ObjectName'),
          objectType?: string(name='ObjectType'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName'),
          status?: string(name='Status'),
        }
      ](name='Constraints'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      objectDefinition?: string(name='ObjectDefinition'),
      objectName?: string(name='ObjectName'),
      objectType?: string(name='ObjectType'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
    }
  ](name='StructureInitializationDetails'),
  success?: string(name='Success'),
}

model DescribeInitializationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInitializationStatusResponseBody(name='body'),
}

async function describeInitializationStatusWithOptions(request: DescribeInitializationStatusRequest, runtime: Util.RuntimeOptions): DescribeInitializationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInitializationStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInitializationStatus(request: DescribeInitializationStatusRequest): DescribeInitializationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInitializationStatusWithOptions(request, runtime);
}

model DescribeJobMonitorRuleRequest {
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model DescribeJobMonitorRuleResponseBody = {
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  monitorRules?: [ 
    {
      delayRuleTime?: long(name='DelayRuleTime'),
      phone?: string(name='Phone'),
      state?: string(name='State'),
      type?: string(name='Type'),
    }
  ](name='MonitorRules'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topics?: [ string ](name='Topics'),
}

model DescribeJobMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobMonitorRuleResponseBody(name='body'),
}

async function describeJobMonitorRuleWithOptions(request: DescribeJobMonitorRuleRequest, runtime: Util.RuntimeOptions): DescribeJobMonitorRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeJobMonitorRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeJobMonitorRule(request: DescribeJobMonitorRuleRequest): DescribeJobMonitorRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeJobMonitorRuleWithOptions(request, runtime);
}

model DescribeMigrationJobAlertRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model DescribeMigrationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  migrationJobId?: string(name='MigrationJobId'),
  migrationJobName?: string(name='MigrationJobName'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeMigrationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobAlertResponseBody(name='body'),
}

async function describeMigrationJobAlertWithOptions(request: DescribeMigrationJobAlertRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationJobAlert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationJobAlert(request: DescribeMigrationJobAlertRequest): DescribeMigrationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobAlertWithOptions(request, runtime);
}

model DescribeMigrationJobDetailRequest {
  migrationMode?: {
    dataInitialization?: boolean(name='DataInitialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
    structureInitialization?: boolean(name='StructureInitialization'),
  }(name='MigrationMode'),
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeMigrationJobDetailResponseBody = {
  dataInitializationDetailList?: {
    dataInitializationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      finishRowNum?: string(name='FinishRowNum'),
      migrationTime?: string(name='MigrationTime'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      totalRowNum?: string(name='TotalRowNum'),
    }
  ](name='DataInitializationDetail')
  }(name='DataInitializationDetailList'),
  dataSynchronizationDetailList?: {
    dataSynchronizationDetail?: [ 
    {
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
    }
  ](name='DataSynchronizationDetail')
  }(name='DataSynchronizationDetailList'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  structureInitializationDetailList?: {
    structureInitializationDetail?: [ 
    {
      constraintList?: {
        structureInitializationDetail?: [ 
        {
          destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
          errorMessage?: string(name='ErrorMessage'),
          objectDefinition?: string(name='ObjectDefinition'),
          objectName?: string(name='ObjectName'),
          objectType?: string(name='ObjectType'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName'),
          status?: string(name='Status'),
        }
      ](name='StructureInitializationDetail')
      }(name='ConstraintList'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      errorMessage?: string(name='ErrorMessage'),
      objectDefinition?: string(name='ObjectDefinition'),
      objectName?: string(name='ObjectName'),
      objectType?: string(name='ObjectType'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
    }
  ](name='StructureInitializationDetail')
  }(name='StructureInitializationDetailList'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeMigrationJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobDetailResponseBody(name='body'),
}

async function describeMigrationJobDetailWithOptions(request: DescribeMigrationJobDetailRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.migrationMode)) {
    query['MigrationMode'] = request.migrationMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationJobDetail',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationJobDetail(request: DescribeMigrationJobDetailRequest): DescribeMigrationJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobDetailWithOptions(request, runtime);
}

model DescribeMigrationJobStatusRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model DescribeMigrationJobStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint'),
    delay?: string(name='Delay'),
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    oracleSID?: string(name='oracleSID'),
  }(name='DestinationEndpoint'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  migrationJobClass?: string(name='MigrationJobClass'),
  migrationJobId?: string(name='MigrationJobId'),
  migrationJobName?: string(name='MigrationJobName'),
  migrationJobStatus?: string(name='MigrationJobStatus'),
  migrationMode?: {
    dataInitialization?: boolean(name='dataInitialization'),
    dataSynchronization?: boolean(name='dataSynchronization'),
    structureInitialization?: boolean(name='structureInitialization'),
  }(name='MigrationMode'),
  migrationObject?: string(name='MigrationObject'),
  payType?: string(name='PayType'),
  precheckStatus?: {
    detail?: {
      checkItem?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='CheckItem')
    }(name='Detail'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='PrecheckStatus'),
  requestId?: string(name='RequestId'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    oracleSID?: string(name='oracleSID'),
  }(name='SourceEndpoint'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='StructureInitializationStatus'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model DescribeMigrationJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobStatusResponseBody(name='body'),
}

async function describeMigrationJobStatusWithOptions(request: DescribeMigrationJobStatusRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationJobStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationJobStatus(request: DescribeMigrationJobStatusRequest): DescribeMigrationJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobStatusWithOptions(request, runtime);
}

model DescribeMigrationJobsRequest {
  accountId?: string(name='AccountId'),
  migrationJobName?: string(name='MigrationJobName'),
  ownerId?: string(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeMigrationJobsResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  migrationJobs?: {
    migrationJob?: [ 
    {
      dataInitialization?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='status'),
      }(name='DataInitialization'),
      dataSynchronization?: {
        delay?: string(name='Delay'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='status'),
      }(name='DataSynchronization'),
      destinationEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      jobCreateTime?: string(name='JobCreateTime'),
      migrationJobClass?: string(name='MigrationJobClass'),
      migrationJobID?: string(name='MigrationJobID'),
      migrationJobName?: string(name='MigrationJobName'),
      migrationJobStatus?: string(name='MigrationJobStatus'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      migrationObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList'),
          wholeDatabase?: string(name='WholeDatabase'),
        }
      ](name='SynchronousObject')
      }(name='MigrationObject'),
      payType?: string(name='PayType'),
      precheck?: {
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='Precheck'),
      sourceEndpoint?: {
        databaseName?: string(name='DatabaseName'),
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
        oracleSID?: string(name='OracleSID'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      structureInitialization?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='status'),
      }(name='StructureInitialization'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='MigrationJob')
  }(name='MigrationJobs'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeMigrationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobsResponseBody(name='body'),
}

async function describeMigrationJobsWithOptions(request: DescribeMigrationJobsRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.migrationJobName)) {
    query['MigrationJobName'] = request.migrationJobName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationJobs(request: DescribeMigrationJobsRequest): DescribeMigrationJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobsWithOptions(request, runtime);
}

model DescribePreCheckStatusRequest {
  dtsJobId?: string(name='DtsJobId'),
  jobCode?: string(name='JobCode'),
  name?: string(name='Name'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  regionId?: string(name='RegionId'),
  structPhase?: string(name='StructPhase'),
  structType?: string(name='StructType'),
}

model DescribePreCheckStatusResponseBody = {
  code?: string(name='Code'),
  errorItem?: int32(name='ErrorItem'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobId?: string(name='JobId'),
  jobName?: string(name='JobName'),
  jobProgress?: [ 
    {
      bootTime?: string(name='BootTime'),
      canSkip?: boolean(name='CanSkip'),
      ddlSql?: string(name='DdlSql'),
      delaySeconds?: int32(name='DelaySeconds'),
      destSchema?: string(name='DestSchema'),
      diffRow?: long(name='DiffRow'),
      errDetail?: string(name='ErrDetail'),
      errMsg?: string(name='ErrMsg'),
      finishTime?: string(name='FinishTime'),
      id?: string(name='Id'),
      ignoreFlag?: string(name='IgnoreFlag'),
      item?: string(name='Item'),
      jobId?: string(name='JobId'),
      logs?: [ 
        {
          errData?: string(name='ErrData'),
          errMsg?: string(name='ErrMsg'),
          errType?: string(name='ErrType'),
          logLevel?: string(name='LogLevel'),
        }
      ](name='Logs'),
      names?: string(name='Names'),
      orderNum?: int32(name='OrderNum'),
      parentObj?: string(name='ParentObj'),
      repairMethod?: string(name='RepairMethod'),
      skip?: boolean(name='Skip'),
      sourceSchema?: string(name='SourceSchema'),
      state?: string(name='State'),
      sub?: string(name='Sub'),
      targetNames?: string(name='TargetNames'),
      total?: int32(name='Total'),
    }
  ](name='JobProgress'),
  pageNumber?: long(name='PageNumber'),
  pageRecordCount?: long(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
  subDistributedJobStatus?: [ 
    {
      code?: string(name='Code'),
      errorItem?: int32(name='ErrorItem'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      jobProgress?: [ 
        {
          bootTime?: string(name='BootTime'),
          canSkip?: boolean(name='CanSkip'),
          ddlSql?: string(name='DdlSql'),
          delaySeconds?: int32(name='DelaySeconds'),
          destSchema?: string(name='DestSchema'),
          diffRow?: long(name='DiffRow'),
          errDetail?: string(name='ErrDetail'),
          errMsg?: string(name='ErrMsg'),
          finishTime?: string(name='FinishTime'),
          id?: string(name='Id'),
          ignoreFlag?: string(name='IgnoreFlag'),
          item?: string(name='Item'),
          jobId?: string(name='JobId'),
          logs?: [ 
            {
              errData?: string(name='ErrData'),
              errMsg?: string(name='ErrMsg'),
              errType?: string(name='ErrType'),
              logLevel?: string(name='LogLevel'),
            }
          ](name='Logs'),
          names?: string(name='Names'),
          orderNum?: int32(name='OrderNum'),
          parentObj?: string(name='ParentObj'),
          repairMethod?: string(name='RepairMethod'),
          skip?: boolean(name='Skip'),
          sourceSchema?: string(name='SourceSchema'),
          state?: string(name='State'),
          sub?: string(name='Sub'),
          targetNames?: string(name='TargetNames'),
          total?: int32(name='Total'),
        }
      ](name='JobProgress'),
      state?: string(name='State'),
      total?: int32(name='Total'),
    }
  ](name='SubDistributedJobStatus'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribePreCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckStatusResponseBody(name='body'),
}

async function describePreCheckStatusWithOptions(request: DescribePreCheckStatusRequest, runtime: Util.RuntimeOptions): DescribePreCheckStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.jobCode)) {
    query['JobCode'] = request.jobCode;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.structPhase)) {
    query['StructPhase'] = request.structPhase;
  }
  if (!Util.isUnset(request.structType)) {
    query['StructType'] = request.structType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePreCheckStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePreCheckStatus(request: DescribePreCheckStatusRequest): DescribePreCheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreCheckStatusWithOptions(request, runtime);
}

model DescribeSubscriptionInstanceAlertRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model DescribeSubscriptionInstanceAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  requestId?: string(name='RequestId'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  success?: string(name='Success'),
}

model DescribeSubscriptionInstanceAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstanceAlertResponseBody(name='body'),
}

async function describeSubscriptionInstanceAlertWithOptions(request: DescribeSubscriptionInstanceAlertRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionInstanceAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSubscriptionInstanceAlert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSubscriptionInstanceAlert(request: DescribeSubscriptionInstanceAlertRequest): DescribeSubscriptionInstanceAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionInstanceAlertWithOptions(request, runtime);
}

model DescribeSubscriptionInstanceStatusRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model DescribeSubscriptionInstanceStatusResponseBody = {
  beginTimestamp?: string(name='BeginTimestamp'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
  consumptionClient?: string(name='ConsumptionClient'),
  endTimestamp?: string(name='EndTimestamp'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  payType?: string(name='PayType'),
  requestId?: string(name='RequestId'),
  sourceEndpoint?: {
    instanceID?: string(name='InstanceID'),
    instanceType?: string(name='InstanceType'),
  }(name='SourceEndpoint'),
  status?: string(name='Status'),
  subscribeTopic?: string(name='SubscribeTopic'),
  subscriptionDataType?: {
    DDL?: boolean(name='DDL'),
    DML?: boolean(name='DML'),
  }(name='SubscriptionDataType'),
  subscriptionHost?: {
    privateHost?: string(name='PrivateHost'),
    publicHost?: string(name='PublicHost'),
    VPCHost?: string(name='VPCHost'),
  }(name='SubscriptionHost'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  subscriptionObject?: {
    synchronousObject?: [ 
    {
      databaseName?: string(name='DatabaseName'),
      tableList?: {
        table?: [ string ](name='Table')
      }(name='TableList'),
      wholeDatabase?: string(name='WholeDatabase'),
    }
  ](name='SynchronousObject')
  }(name='SubscriptionObject'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model DescribeSubscriptionInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstanceStatusResponseBody(name='body'),
}

async function describeSubscriptionInstanceStatusWithOptions(request: DescribeSubscriptionInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSubscriptionInstanceStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSubscriptionInstanceStatus(request: DescribeSubscriptionInstanceStatusRequest): DescribeSubscriptionInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionInstanceStatusWithOptions(request, runtime);
}

model DescribeSubscriptionInstancesRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeSubscriptionInstancesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  subscriptionInstances?: {
    subscriptionInstance?: [ 
    {
      beginTimestamp?: string(name='BeginTimestamp'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      consumptionClient?: string(name='ConsumptionClient'),
      endTimestamp?: string(name='EndTimestamp'),
      errorMessage?: string(name='ErrorMessage'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      jobCreateTime?: string(name='JobCreateTime'),
      payType?: string(name='PayType'),
      sourceEndpoint?: {
        instanceID?: string(name='InstanceID'),
        instanceType?: string(name='InstanceType'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionDataType?: {
        DDL?: boolean(name='DDL'),
        DML?: boolean(name='DML'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        privateHost?: string(name='PrivateHost'),
        publicHost?: string(name='PublicHost'),
        VPCHost?: string(name='VPCHost'),
      }(name='SubscriptionHost'),
      subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
      subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
      subscriptionObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList'),
          wholeDatabase?: string(name='WholeDatabase'),
        }
      ](name='SynchronousObject')
      }(name='SubscriptionObject'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='SubscriptionInstance')
  }(name='SubscriptionInstances'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeSubscriptionInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstancesResponseBody(name='body'),
}

async function describeSubscriptionInstancesWithOptions(request: DescribeSubscriptionInstancesRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceName)) {
    query['SubscriptionInstanceName'] = request.subscriptionInstanceName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSubscriptionInstances',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSubscriptionInstances(request: DescribeSubscriptionInstancesRequest): DescribeSubscriptionInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionInstancesWithOptions(request, runtime);
}

model DescribeSubscriptionMetaRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  regionId?: string(name='RegionId'),
  sid?: string(name='Sid'),
  subMigrationJobIds?: map[string]any(name='SubMigrationJobIds'),
  topics?: map[string]any(name='Topics'),
}

model DescribeSubscriptionMetaShrinkRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  regionId?: string(name='RegionId'),
  sid?: string(name='Sid'),
  subMigrationJobIdsShrink?: string(name='SubMigrationJobIds'),
  topicsShrink?: string(name='Topics'),
}

model DescribeSubscriptionMetaResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  subscriptionMetaList?: [ 
    {
      checkpoint?: long(name='Checkpoint'),
      DBList?: string(name='DBList'),
      DProxyUrl?: string(name='DProxyUrl'),
      sid?: string(name='Sid'),
      topic?: string(name='Topic'),
    }
  ](name='SubscriptionMetaList'),
  success?: string(name='Success'),
}

model DescribeSubscriptionMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionMetaResponseBody(name='body'),
}

async function describeSubscriptionMetaWithOptions(tmpReq: DescribeSubscriptionMetaRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionMetaResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeSubscriptionMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subMigrationJobIds)) {
    request.subMigrationJobIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subMigrationJobIds, 'SubMigrationJobIds', 'json');
  }
  if (!Util.isUnset(tmpReq.topics)) {
    request.topicsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.topics, 'Topics', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sid)) {
    query['Sid'] = request.sid;
  }
  if (!Util.isUnset(request.subMigrationJobIdsShrink)) {
    query['SubMigrationJobIds'] = request.subMigrationJobIdsShrink;
  }
  if (!Util.isUnset(request.topicsShrink)) {
    query['Topics'] = request.topicsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSubscriptionMeta',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSubscriptionMeta(request: DescribeSubscriptionMetaRequest): DescribeSubscriptionMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionMetaWithOptions(request, runtime);
}

model DescribeSynchronizationJobAlertRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model DescribeSynchronizationJobAlertResponseBody = {
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
}

model DescribeSynchronizationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobAlertResponseBody(name='body'),
}

async function describeSynchronizationJobAlertWithOptions(request: DescribeSynchronizationJobAlertRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSynchronizationJobAlert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSynchronizationJobAlert(request: DescribeSynchronizationJobAlertRequest): DescribeSynchronizationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobAlertWithOptions(request, runtime);
}

model DescribeSynchronizationJobReplicatorCompareRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model DescribeSynchronizationJobReplicatorCompareResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable'),
}

model DescribeSynchronizationJobReplicatorCompareResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function describeSynchronizationJobReplicatorCompareWithOptions(request: DescribeSynchronizationJobReplicatorCompareRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobReplicatorCompareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSynchronizationJobReplicatorCompare',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSynchronizationJobReplicatorCompare(request: DescribeSynchronizationJobReplicatorCompareRequest): DescribeSynchronizationJobReplicatorCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobReplicatorCompareWithOptions(request, runtime);
}

model DescribeSynchronizationJobStatusRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model DescribeSynchronizationJobStatusResponseBody = {
  checkpoint?: string(name='Checkpoint'),
  dataInitialization?: string(name='DataInitialization'),
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    checkpoint?: string(name='Checkpoint'),
    delay?: string(name='Delay'),
    delayMillis?: long(name='DelayMillis'),
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  delay?: string(name='Delay'),
  delayMillis?: long(name='DelayMillis'),
  destinationEndpoint?: {
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
  }(name='DestinationEndpoint'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  expireTime?: string(name='ExpireTime'),
  payType?: string(name='PayType'),
  performance?: {
    FLOW?: string(name='FLOW'),
    RPS?: string(name='RPS'),
  }(name='Performance'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='Detail'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='PrecheckStatus'),
  requestId?: string(name='RequestId'),
  sourceEndpoint?: {
    engineName?: string(name='EngineName'),
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  status?: string(name='Status'),
  structureInitialization?: string(name='StructureInitialization'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='StructureInitializationStatus'),
  success?: string(name='Success'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobClass?: string(name='SynchronizationJobClass'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
  synchronizationObjects?: [ 
    {
      newSchemaName?: string(name='NewSchemaName'),
      schemaName?: string(name='SchemaName'),
      tableExcludes?: [ 
        {
          tableName?: string(name='TableName'),
        }
      ](name='TableExcludes'),
      tableIncludes?: [ 
        {
          tableName?: string(name='TableName'),
        }
      ](name='TableIncludes'),
    }
  ](name='SynchronizationObjects'),
  taskId?: string(name='TaskId'),
}

model DescribeSynchronizationJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobStatusResponseBody(name='body'),
}

async function describeSynchronizationJobStatusWithOptions(request: DescribeSynchronizationJobStatusRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSynchronizationJobStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSynchronizationJobStatus(request: DescribeSynchronizationJobStatusRequest): DescribeSynchronizationJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobStatusWithOptions(request, runtime);
}

model DescribeSynchronizationJobStatusListRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationJobIdListJsonStr?: string(name='SynchronizationJobIdListJsonStr'),
}

model DescribeSynchronizationJobStatusListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchronizationJobListStatusList?: [ 
    {
      synchronizationDirectionInfoList?: [ 
        {
          checkpoint?: string(name='Checkpoint'),
          status?: string(name='Status'),
          synchronizationDirection?: string(name='SynchronizationDirection'),
        }
      ](name='SynchronizationDirectionInfoList'),
      synchronizationJobId?: string(name='SynchronizationJobId'),
    }
  ](name='SynchronizationJobListStatusList'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeSynchronizationJobStatusListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobStatusListResponseBody(name='body'),
}

async function describeSynchronizationJobStatusListWithOptions(request: DescribeSynchronizationJobStatusListRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobStatusListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationJobIdListJsonStr)) {
    query['SynchronizationJobIdListJsonStr'] = request.synchronizationJobIdListJsonStr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSynchronizationJobStatusList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSynchronizationJobStatusList(request: DescribeSynchronizationJobStatusListRequest): DescribeSynchronizationJobStatusListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobStatusListWithOptions(request, runtime);
}

model DescribeSynchronizationJobsRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeSynchronizationJobsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  synchronizationInstances?: [ 
    {
      createTime?: string(name='CreateTime'),
      dataInitialization?: string(name='DataInitialization'),
      dataInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        delay?: string(name='Delay'),
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='DataSynchronizationStatus'),
      delay?: string(name='Delay'),
      destinationEndpoint?: {
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceId?: string(name='InstanceId'),
        instanceType?: string(name='InstanceType'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='DestinationEndpoint'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      jobCreateTime?: string(name='JobCreateTime'),
      payType?: string(name='PayType'),
      performance?: {
        FLOW?: string(name='FLOW'),
        RPS?: string(name='RPS'),
      }(name='Performance'),
      precheckStatus?: {
        detail?: [ 
          {
            checkStatus?: string(name='CheckStatus'),
            errorMessage?: string(name='ErrorMessage'),
            itemName?: string(name='ItemName'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
        percent?: string(name='Percent'),
        status?: string(name='Status'),
      }(name='PrecheckStatus'),
      sourceEndpoint?: {
        engineName?: string(name='EngineName'),
        IP?: string(name='IP'),
        instanceId?: string(name='InstanceId'),
        instanceType?: string(name='InstanceType'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
      }(name='SourceEndpoint'),
      status?: string(name='Status'),
      structureInitialization?: string(name='StructureInitialization'),
      structureInitializationStatus?: {
        errorMessage?: string(name='ErrorMessage'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        status?: string(name='Status'),
      }(name='StructureInitializationStatus'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      synchronizationJobClass?: string(name='SynchronizationJobClass'),
      synchronizationJobId?: string(name='SynchronizationJobId'),
      synchronizationJobName?: string(name='SynchronizationJobName'),
      synchronizationObjects?: [ 
        {
          newSchemaName?: string(name='NewSchemaName'),
          schemaName?: string(name='SchemaName'),
          tableExcludes?: [ 
            {
              tableName?: string(name='TableName'),
            }
          ](name='TableExcludes'),
          tableIncludes?: [ 
            {
              tableName?: string(name='TableName'),
            }
          ](name='TableIncludes'),
        }
      ](name='SynchronizationObjects'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='SynchronizationInstances'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeSynchronizationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobsResponseBody(name='body'),
}

async function describeSynchronizationJobsWithOptions(request: DescribeSynchronizationJobsRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationJobName)) {
    query['SynchronizationJobName'] = request.synchronizationJobName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSynchronizationJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSynchronizationJobs(request: DescribeSynchronizationJobsRequest): DescribeSynchronizationJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobsWithOptions(request, runtime);
}

model DescribeSynchronizationObjectModifyStatusRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model DescribeSynchronizationObjectModifyStatusResponseBody = {
  dataInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    delay?: string(name='Delay'),
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='DataSynchronizationStatus'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  errorMessage?: string(name='ErrorMessage'),
  precheckStatus?: {
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='Detail'),
    percent?: string(name='Percent'),
    status?: string(name='Status'),
  }(name='PrecheckStatus'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  structureInitializationStatus?: {
    errorMessage?: string(name='ErrorMessage'),
    percent?: string(name='Percent'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
  }(name='StructureInitializationStatus'),
  success?: string(name='Success'),
}

model DescribeSynchronizationObjectModifyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationObjectModifyStatusResponseBody(name='body'),
}

async function describeSynchronizationObjectModifyStatusWithOptions(request: DescribeSynchronizationObjectModifyStatusRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationObjectModifyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSynchronizationObjectModifyStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSynchronizationObjectModifyStatus(request: DescribeSynchronizationObjectModifyStatusRequest): DescribeSynchronizationObjectModifyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationObjectModifyStatusWithOptions(request, runtime);
}

model DescribeTagKeysRequest {
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTagKeysResponseBody = {
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagKeys?: [ string ](name='TagKeys'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeysWithOptions(request: DescribeTagKeysRequest, runtime: Util.RuntimeOptions): DescribeTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagKeys',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagKeysWithOptions(request, runtime);
}

model DescribeTagValuesRequest {
  category?: string(name='Category'),
  key?: string(name='Key'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTagValuesResponseBody = {
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagValues?: [ string ](name='TagValues'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagValuesResponseBody(name='body'),
}

async function describeTagValuesWithOptions(request: DescribeTagValuesRequest, runtime: Util.RuntimeOptions): DescribeTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagValues',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagValues(request: DescribeTagValuesRequest): DescribeTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagValuesWithOptions(request, runtime);
}

model InitDtsRdsInstanceRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  endpointCenId?: string(name='EndpointCenId'),
  endpointInstanceId?: string(name='EndpointInstanceId'),
  endpointInstanceType?: string(name='EndpointInstanceType'),
  endpointRegion?: string(name='EndpointRegion'),
  regionId?: string(name='RegionId'),
}

model InitDtsRdsInstanceResponseBody = {
  adminAccount?: string(name='AdminAccount'),
  adminPassword?: string(name='AdminPassword'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model InitDtsRdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: InitDtsRdsInstanceResponseBody(name='body'),
}

async function initDtsRdsInstanceWithOptions(request: InitDtsRdsInstanceRequest, runtime: Util.RuntimeOptions): InitDtsRdsInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.endpointCenId)) {
    query['EndpointCenId'] = request.endpointCenId;
  }
  if (!Util.isUnset(request.endpointInstanceId)) {
    query['EndpointInstanceId'] = request.endpointInstanceId;
  }
  if (!Util.isUnset(request.endpointInstanceType)) {
    query['EndpointInstanceType'] = request.endpointInstanceType;
  }
  if (!Util.isUnset(request.endpointRegion)) {
    query['EndpointRegion'] = request.endpointRegion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitDtsRdsInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initDtsRdsInstance(request: InitDtsRdsInstanceRequest): InitDtsRdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return initDtsRdsInstanceWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyConsumerChannelRequest {
  consumerGroupId?: string(name='ConsumerGroupId'),
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model ModifyConsumerChannelResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumerChannelResponseBody(name='body'),
}

async function modifyConsumerChannelWithOptions(request: ModifyConsumerChannelRequest, runtime: Util.RuntimeOptions): ModifyConsumerChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupId)) {
    query['ConsumerGroupId'] = request.consumerGroupId;
  }
  if (!Util.isUnset(request.consumerGroupName)) {
    query['ConsumerGroupName'] = request.consumerGroupName;
  }
  if (!Util.isUnset(request.consumerGroupPassword)) {
    query['ConsumerGroupPassword'] = request.consumerGroupPassword;
  }
  if (!Util.isUnset(request.consumerGroupUserName)) {
    query['ConsumerGroupUserName'] = request.consumerGroupUserName;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyConsumerChannel',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyConsumerChannel(request: ModifyConsumerChannelRequest): ModifyConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConsumerChannelWithOptions(request, runtime);
}

model ModifyConsumerGroupPasswordRequest {
  accountId?: string(name='AccountId'),
  consumerGroupID?: string(name='ConsumerGroupID'),
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  consumerGroupNewPassword?: string(name='consumerGroupNewPassword'),
}

model ModifyConsumerGroupPasswordResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyConsumerGroupPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumerGroupPasswordResponseBody(name='body'),
}

async function modifyConsumerGroupPasswordWithOptions(request: ModifyConsumerGroupPasswordRequest, runtime: Util.RuntimeOptions): ModifyConsumerGroupPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.consumerGroupID)) {
    query['ConsumerGroupID'] = request.consumerGroupID;
  }
  if (!Util.isUnset(request.consumerGroupName)) {
    query['ConsumerGroupName'] = request.consumerGroupName;
  }
  if (!Util.isUnset(request.consumerGroupPassword)) {
    query['ConsumerGroupPassword'] = request.consumerGroupPassword;
  }
  if (!Util.isUnset(request.consumerGroupUserName)) {
    query['ConsumerGroupUserName'] = request.consumerGroupUserName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  if (!Util.isUnset(request.consumerGroupNewPassword)) {
    query['consumerGroupNewPassword'] = request.consumerGroupNewPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyConsumerGroupPassword',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyConsumerGroupPassword(request: ModifyConsumerGroupPasswordRequest): ModifyConsumerGroupPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConsumerGroupPasswordWithOptions(request, runtime);
}

model ModifyConsumptionTimestampRequest {
  accountId?: string(name='AccountId'),
  consumptionTimestamp?: string(name='ConsumptionTimestamp'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model ModifyConsumptionTimestampResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyConsumptionTimestampResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumptionTimestampResponseBody(name='body'),
}

async function modifyConsumptionTimestampWithOptions(request: ModifyConsumptionTimestampRequest, runtime: Util.RuntimeOptions): ModifyConsumptionTimestampResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.consumptionTimestamp)) {
    query['ConsumptionTimestamp'] = request.consumptionTimestamp;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyConsumptionTimestamp',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyConsumptionTimestamp(request: ModifyConsumptionTimestampRequest): ModifyConsumptionTimestampResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConsumptionTimestampWithOptions(request, runtime);
}

model ModifyDtsJobRequest {
  clientToken?: string(name='ClientToken'),
  dbList?: map[string]any(name='DbList'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  etlOperatorColumnReference?: string(name='EtlOperatorColumnReference'),
  fileOssUrl?: string(name='FileOssUrl', description='文件上传后的url'),
  modifyTypeEnum?: string(name='ModifyTypeEnum', description='修改任务的方式，当为UPDATE_RESERVED时为修改reserve字段，不传默认修改dbList'),
  regionId?: string(name='RegionId'),
  reserved?: string(name='Reserved', description='新增的reserved字段，新增而不是覆盖'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model ModifyDtsJobAdvanceRequest {
  fileOssUrlObject: readable(name='FileOssUrlObject'),
  clientToken?: string(name='ClientToken'),
  dbList?: map[string]any(name='DbList'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  etlOperatorColumnReference?: string(name='EtlOperatorColumnReference'),
  modifyTypeEnum?: string(name='ModifyTypeEnum', description='修改任务的方式，当为UPDATE_RESERVED时为修改reserve字段，不传默认修改dbList'),
  regionId?: string(name='RegionId'),
  reserved?: string(name='Reserved', description='新增的reserved字段，新增而不是覆盖'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model ModifyDtsJobShrinkRequest {
  clientToken?: string(name='ClientToken'),
  dbListShrink?: string(name='DbList'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  etlOperatorColumnReference?: string(name='EtlOperatorColumnReference'),
  fileOssUrl?: string(name='FileOssUrl', description='文件上传后的url'),
  modifyTypeEnum?: string(name='ModifyTypeEnum', description='修改任务的方式，当为UPDATE_RESERVED时为修改reserve字段，不传默认修改dbList'),
  regionId?: string(name='RegionId'),
  reserved?: string(name='Reserved', description='新增的reserved字段，新增而不是覆盖'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model ModifyDtsJobResponseBody = {
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  errMessage?: boolean(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model ModifyDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobResponseBody(name='body'),
}

async function modifyDtsJobWithOptions(tmpReq: ModifyDtsJobRequest, runtime: Util.RuntimeOptions): ModifyDtsJobResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyDtsJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dbList)) {
    request.dbListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dbList, 'DbList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.fileOssUrl)) {
    query['FileOssUrl'] = request.fileOssUrl;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.dbListShrink)) {
    body['DbList'] = request.dbListShrink;
  }
  if (!Util.isUnset(request.etlOperatorColumnReference)) {
    body['EtlOperatorColumnReference'] = request.etlOperatorColumnReference;
  }
  if (!Util.isUnset(request.modifyTypeEnum)) {
    body['ModifyTypeEnum'] = request.modifyTypeEnum;
  }
  if (!Util.isUnset(request.reserved)) {
    body['Reserved'] = request.reserved;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDtsJob(request: ModifyDtsJobRequest): ModifyDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDtsJobWithOptions(request, runtime);
}

async function modifyDtsJobAdvance(request: ModifyDtsJobAdvanceRequest, runtime: Util.RuntimeOptions): ModifyDtsJobResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Dts',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var modifyDtsJobReq = new ModifyDtsJobRequest{};
  OpenApiUtil.convert(request, modifyDtsJobReq);

  if(!Util.isUnset(request.fileOssUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.fileOssUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    modifyDtsJobReq.fileOssUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var modifyDtsJobResp = modifyDtsJobWithOptions(modifyDtsJobReq, runtime);
  return modifyDtsJobResp;
}

model ModifyDtsJobNameRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  regionId?: string(name='RegionId'),
}

model ModifyDtsJobNameResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDtsJobNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobNameResponseBody(name='body'),
}

async function modifyDtsJobNameWithOptions(request: ModifyDtsJobNameRequest, runtime: Util.RuntimeOptions): ModifyDtsJobNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.dtsJobName)) {
    query['DtsJobName'] = request.dtsJobName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDtsJobName',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDtsJobName(request: ModifyDtsJobNameRequest): ModifyDtsJobNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDtsJobNameWithOptions(request, runtime);
}

model ModifyDtsJobPasswordRequest {
  dtsJobId?: string(name='DtsJobId'),
  endpoint?: string(name='Endpoint'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  userName?: string(name='UserName'),
}

model ModifyDtsJobPasswordResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDtsJobPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobPasswordResponseBody(name='body'),
}

async function modifyDtsJobPasswordWithOptions(request: ModifyDtsJobPasswordRequest, runtime: Util.RuntimeOptions): ModifyDtsJobPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.endpoint)) {
    query['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDtsJobPassword',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDtsJobPassword(request: ModifyDtsJobPasswordRequest): ModifyDtsJobPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDtsJobPasswordWithOptions(request, runtime);
}

model ModifySubscriptionRequest {
  dbList?: string(name='DbList'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML'),
}

model ModifySubscriptionResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifySubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySubscriptionResponseBody(name='body'),
}

async function modifySubscriptionWithOptions(request: ModifySubscriptionRequest, runtime: Util.RuntimeOptions): ModifySubscriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbList)) {
    query['DbList'] = request.dbList;
  }
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionDataTypeDDL)) {
    query['SubscriptionDataTypeDDL'] = request.subscriptionDataTypeDDL;
  }
  if (!Util.isUnset(request.subscriptionDataTypeDML)) {
    query['SubscriptionDataTypeDML'] = request.subscriptionDataTypeDML;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySubscription',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySubscription(request: ModifySubscriptionRequest): ModifySubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySubscriptionWithOptions(request, runtime);
}

model ModifySubscriptionObjectRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  subscriptionObject?: string(name='SubscriptionObject'),
}

model ModifySubscriptionObjectResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifySubscriptionObjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySubscriptionObjectResponseBody(name='body'),
}

async function modifySubscriptionObjectWithOptions(request: ModifySubscriptionObjectRequest, runtime: Util.RuntimeOptions): ModifySubscriptionObjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  if (!Util.isUnset(request.subscriptionObject)) {
    query['SubscriptionObject'] = request.subscriptionObject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySubscriptionObject',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySubscriptionObject(request: ModifySubscriptionObjectRequest): ModifySubscriptionObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySubscriptionObjectWithOptions(request, runtime);
}

model ModifySynchronizationObjectRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationObjects?: string(name='SynchronizationObjects'),
}

model ModifySynchronizationObjectResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model ModifySynchronizationObjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySynchronizationObjectResponseBody(name='body'),
}

async function modifySynchronizationObjectWithOptions(request: ModifySynchronizationObjectRequest, runtime: Util.RuntimeOptions): ModifySynchronizationObjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.synchronizationObjects)) {
    body['SynchronizationObjects'] = request.synchronizationObjects;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifySynchronizationObject',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySynchronizationObject(request: ModifySynchronizationObjectRequest): ModifySynchronizationObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySynchronizationObjectWithOptions(request, runtime);
}

model RenewInstanceRequest {
  buyCount?: string(name='BuyCount'),
  chargeType?: string(name='ChargeType'),
  dtsJobId?: string(name='DtsJobId'),
  period?: string(name='Period'),
  regionId?: string(name='RegionId'),
}

model RenewInstanceResponseBody = {
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTime?: string(name='EndTime'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.buyCount)) {
    query['BuyCount'] = request.buyCount;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ResetDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model ResetDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResetDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDtsJobResponseBody(name='body'),
}

async function resetDtsJobWithOptions(request: ResetDtsJobRequest, runtime: Util.RuntimeOptions): ResetDtsJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetDtsJob(request: ResetDtsJobRequest): ResetDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDtsJobWithOptions(request, runtime);
}

model ResetSynchronizationJobRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model ResetSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ResetSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSynchronizationJobResponseBody(name='body'),
}

async function resetSynchronizationJobWithOptions(request: ResetSynchronizationJobRequest, runtime: Util.RuntimeOptions): ResetSynchronizationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSynchronizationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetSynchronizationJob(request: ResetSynchronizationJobRequest): ResetSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSynchronizationJobWithOptions(request, runtime);
}

model ShieldPrecheckRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  precheckItems?: string(name='PrecheckItems'),
  regionId?: string(name='RegionId'),
}

model ShieldPrecheckResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ShieldPrecheckResponse = {
  headers: map[string]string(name='headers'),
  body: ShieldPrecheckResponseBody(name='body'),
}

async function shieldPrecheckWithOptions(request: ShieldPrecheckRequest, runtime: Util.RuntimeOptions): ShieldPrecheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.precheckItems)) {
    query['PrecheckItems'] = request.precheckItems;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ShieldPrecheck',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function shieldPrecheck(request: ShieldPrecheckRequest): ShieldPrecheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return shieldPrecheckWithOptions(request, runtime);
}

model SkipPreCheckRequest {
  dtsJobId?: string(name='DtsJobId'),
  jobId?: string(name='JobId'),
  regionId?: string(name='RegionId'),
  skip?: boolean(name='Skip'),
  skipPreCheckItems?: string(name='SkipPreCheckItems'),
  skipPreCheckNames?: string(name='SkipPreCheckNames'),
}

model SkipPreCheckResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  migrationJobId?: string(name='MigrationJobId'),
  requestId?: string(name='RequestId'),
  scheduleJobId?: string(name='ScheduleJobId'),
  skipItems?: string(name='SkipItems'),
  skipNames?: string(name='SkipNames'),
  success?: boolean(name='Success'),
}

model SkipPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPreCheckResponseBody(name='body'),
}

async function skipPreCheckWithOptions(request: SkipPreCheckRequest, runtime: Util.RuntimeOptions): SkipPreCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.skip)) {
    query['Skip'] = request.skip;
  }
  if (!Util.isUnset(request.skipPreCheckItems)) {
    query['SkipPreCheckItems'] = request.skipPreCheckItems;
  }
  if (!Util.isUnset(request.skipPreCheckNames)) {
    query['SkipPreCheckNames'] = request.skipPreCheckNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SkipPreCheck',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function skipPreCheck(request: SkipPreCheckRequest): SkipPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return skipPreCheckWithOptions(request, runtime);
}

model StartDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model StartDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartDtsJobResponseBody(name='body'),
}

async function startDtsJobWithOptions(request: StartDtsJobRequest, runtime: Util.RuntimeOptions): StartDtsJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDtsJob(request: StartDtsJobRequest): StartDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDtsJobWithOptions(request, runtime);
}

model StartDtsJobsRequest {
  dtsJobIds?: string(name='DtsJobIds'),
  regionId?: string(name='RegionId'),
}

model StartDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: StartDtsJobsResponseBody(name='body'),
}

async function startDtsJobsWithOptions(request: StartDtsJobsRequest, runtime: Util.RuntimeOptions): StartDtsJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobIds)) {
    query['DtsJobIds'] = request.dtsJobIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDtsJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDtsJobs(request: StartDtsJobsRequest): StartDtsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDtsJobsWithOptions(request, runtime);
}

model StartMigrationJobRequest {
  accountId?: string(name='AccountId'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model StartMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model StartMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartMigrationJobResponseBody(name='body'),
}

async function startMigrationJobWithOptions(request: StartMigrationJobRequest, runtime: Util.RuntimeOptions): StartMigrationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartMigrationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startMigrationJob(request: StartMigrationJobRequest): StartMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMigrationJobWithOptions(request, runtime);
}

model StartSubscriptionInstanceRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
}

model StartSubscriptionInstanceResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model StartSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartSubscriptionInstanceResponseBody(name='body'),
}

async function startSubscriptionInstanceWithOptions(request: StartSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): StartSubscriptionInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subscriptionInstanceId)) {
    query['SubscriptionInstanceId'] = request.subscriptionInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartSubscriptionInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startSubscriptionInstance(request: StartSubscriptionInstanceRequest): StartSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startSubscriptionInstanceWithOptions(request, runtime);
}

model StartSynchronizationJobRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model StartSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model StartSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartSynchronizationJobResponseBody(name='body'),
}

async function startSynchronizationJobWithOptions(request: StartSynchronizationJobRequest, runtime: Util.RuntimeOptions): StartSynchronizationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartSynchronizationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startSynchronizationJob(request: StartSynchronizationJobRequest): StartSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startSynchronizationJobWithOptions(request, runtime);
}

model StopDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model StopDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopDtsJobResponseBody(name='body'),
}

async function stopDtsJobWithOptions(request: StopDtsJobRequest, runtime: Util.RuntimeOptions): StopDtsJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDtsJob(request: StopDtsJobRequest): StopDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDtsJobWithOptions(request, runtime);
}

model StopDtsJobsRequest {
  dtsJobIds?: string(name='DtsJobIds'),
  regionId?: string(name='RegionId'),
}

model StopDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: StopDtsJobsResponseBody(name='body'),
}

async function stopDtsJobsWithOptions(request: StopDtsJobsRequest, runtime: Util.RuntimeOptions): StopDtsJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobIds)) {
    query['DtsJobIds'] = request.dtsJobIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDtsJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDtsJobs(request: StopDtsJobsRequest): StopDtsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDtsJobsWithOptions(request, runtime);
}

model StopMigrationJobRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model StopMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model StopMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopMigrationJobResponseBody(name='body'),
}

async function stopMigrationJobWithOptions(request: StopMigrationJobRequest, runtime: Util.RuntimeOptions): StopMigrationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopMigrationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopMigrationJob(request: StopMigrationJobRequest): StopMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMigrationJobWithOptions(request, runtime);
}

model SummaryJobDetailRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  jobCode?: string(name='JobCode'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model SummaryJobDetailResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  jobId?: string(name='JobId'),
  progressSummaryDetails?: [ 
    {
      key?: string(name='Key'),
      state?: int32(name='State'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='ProgressSummaryDetails'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SummaryJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: SummaryJobDetailResponseBody(name='body'),
}

async function summaryJobDetailWithOptions(request: SummaryJobDetailRequest, runtime: Util.RuntimeOptions): SummaryJobDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.jobCode)) {
    query['JobCode'] = request.jobCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SummaryJobDetail',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function summaryJobDetail(request: SummaryJobDetailRequest): SummaryJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return summaryJobDetailWithOptions(request, runtime);
}

model SuspendDtsJobRequest {
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model SuspendDtsJobResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendDtsJobResponseBody(name='body'),
}

async function suspendDtsJobWithOptions(request: SuspendDtsJobRequest, runtime: Util.RuntimeOptions): SuspendDtsJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsInstanceId)) {
    query['DtsInstanceId'] = request.dtsInstanceId;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SuspendDtsJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendDtsJob(request: SuspendDtsJobRequest): SuspendDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendDtsJobWithOptions(request, runtime);
}

model SuspendDtsJobsRequest {
  dtsJobIds?: string(name='DtsJobIds'),
  regionId?: string(name='RegionId'),
}

model SuspendDtsJobsResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendDtsJobsResponseBody(name='body'),
}

async function suspendDtsJobsWithOptions(request: SuspendDtsJobsRequest, runtime: Util.RuntimeOptions): SuspendDtsJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobIds)) {
    query['DtsJobIds'] = request.dtsJobIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SuspendDtsJobs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendDtsJobs(request: SuspendDtsJobsRequest): SuspendDtsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendDtsJobsWithOptions(request, runtime);
}

model SuspendMigrationJobRequest {
  accountId?: string(name='AccountId'),
  clientToken?: string(name='ClientToken'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model SuspendMigrationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model SuspendMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendMigrationJobResponseBody(name='body'),
}

async function suspendMigrationJobWithOptions(request: SuspendMigrationJobRequest, runtime: Util.RuntimeOptions): SuspendMigrationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.migrationJobId)) {
    query['MigrationJobId'] = request.migrationJobId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SuspendMigrationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendMigrationJob(request: SuspendMigrationJobRequest): SuspendMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendMigrationJobWithOptions(request, runtime);
}

model SuspendSynchronizationJobRequest {
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model SuspendSynchronizationJobResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model SuspendSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendSynchronizationJobResponseBody(name='body'),
}

async function suspendSynchronizationJobWithOptions(request: SuspendSynchronizationJobRequest, runtime: Util.RuntimeOptions): SuspendSynchronizationJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SuspendSynchronizationJob',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendSynchronizationJob(request: SuspendSynchronizationJobRequest): SuspendSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendSynchronizationJobWithOptions(request, runtime);
}

model SwitchSynchronizationEndpointRequest {
  endpoint?: {
    IP?: string(name='IP'),
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    type?: string(name='Type'),
  }(name='Endpoint'),
  sourceEndpoint?: {
    ownerID?: string(name='OwnerID'),
    role?: string(name='Role'),
  }(name='SourceEndpoint'),
  accountId?: string(name='AccountId'),
  ownerId?: string(name='OwnerId'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
}

model SwitchSynchronizationEndpointResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  taskId?: string(name='TaskId'),
}

model SwitchSynchronizationEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchSynchronizationEndpointResponseBody(name='body'),
}

async function switchSynchronizationEndpointWithOptions(request: SwitchSynchronizationEndpointRequest, runtime: Util.RuntimeOptions): SwitchSynchronizationEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.synchronizationDirection)) {
    query['SynchronizationDirection'] = request.synchronizationDirection;
  }
  if (!Util.isUnset(request.synchronizationJobId)) {
    query['SynchronizationJobId'] = request.synchronizationJobId;
  }
  if (!Util.isUnset(request.endpoint)) {
    query['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.sourceEndpoint)) {
    query['SourceEndpoint'] = request.sourceEndpoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchSynchronizationEndpoint',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchSynchronizationEndpoint(request: SwitchSynchronizationEndpointRequest): SwitchSynchronizationEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchSynchronizationEndpointWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TransferInstanceClassRequest {
  dtsJobId?: string(name='DtsJobId'),
  instanceClass?: string(name='InstanceClass'),
  orderType?: string(name='OrderType'),
  regionId?: string(name='RegionId'),
}

model TransferInstanceClassResponseBody = {
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTime?: string(name='EndTime'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: TransferInstanceClassResponseBody(name='body'),
}

async function transferInstanceClassWithOptions(request: TransferInstanceClassRequest, runtime: Util.RuntimeOptions): TransferInstanceClassResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransferInstanceClass',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferInstanceClass(request: TransferInstanceClassRequest): TransferInstanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferInstanceClassWithOptions(request, runtime);
}

model TransferPayTypeRequest {
  buyCount?: string(name='BuyCount'),
  chargeType?: string(name='ChargeType'),
  dtsJobId?: string(name='DtsJobId'),
  period?: string(name='Period'),
  regionId?: string(name='RegionId'),
}

model TransferPayTypeResponseBody = {
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dtsJobId?: string(name='DtsJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  endTime?: string(name='EndTime'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferPayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransferPayTypeResponseBody(name='body'),
}

async function transferPayTypeWithOptions(request: TransferPayTypeRequest, runtime: Util.RuntimeOptions): TransferPayTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.buyCount)) {
    query['BuyCount'] = request.buyCount;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.dtsJobId)) {
    query['DtsJobId'] = request.dtsJobId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransferPayType',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferPayType(request: TransferPayTypeRequest): TransferPayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferPayTypeWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeTwoWayRequest {
  instanceClass?: string(name='InstanceClass'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model UpgradeTwoWayResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradeTwoWayResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeTwoWayResponseBody(name='body'),
}

async function upgradeTwoWayWithOptions(request: UpgradeTwoWayRequest, runtime: Util.RuntimeOptions): UpgradeTwoWayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeTwoWay',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeTwoWay(request: UpgradeTwoWayRequest): UpgradeTwoWayResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeTwoWayWithOptions(request, runtime);
}

model WhiteIpListRequest {
  destinationRegion?: string(name='DestinationRegion'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
}

model WhiteIpListResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  ipList?: string(name='IpList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model WhiteIpListResponse = {
  headers: map[string]string(name='headers'),
  body: WhiteIpListResponseBody(name='body'),
}

async function whiteIpListWithOptions(request: WhiteIpListRequest, runtime: Util.RuntimeOptions): WhiteIpListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationRegion)) {
    query['DestinationRegion'] = request.destinationRegion;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WhiteIpList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function whiteIpList(request: WhiteIpListRequest): WhiteIpListResponse {
  var runtime = new Util.RuntimeOptions{};
  return whiteIpListWithOptions(request, runtime);
}

