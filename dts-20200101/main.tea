/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'dts.aliyuncs.com',
    cn-beijing = 'dts.aliyuncs.com',
    cn-zhangjiakou = 'dts.aliyuncs.com',
    cn-huhehaote = 'dts.aliyuncs.com',
    cn-hangzhou = 'dts.aliyuncs.com',
    cn-shanghai = 'dts.aliyuncs.com',
    cn-shenzhen = 'dts.aliyuncs.com',
    cn-hongkong = 'dts.aliyuncs.com',
    ap-southeast-1 = 'dts.aliyuncs.com',
    ap-southeast-2 = 'dts.aliyuncs.com',
    ap-southeast-3 = 'dts.aliyuncs.com',
    ap-southeast-5 = 'dts.aliyuncs.com',
    eu-west-1 = 'dts.aliyuncs.com',
    us-west-1 = 'dts.aliyuncs.com',
    us-east-1 = 'dts.aliyuncs.com',
    eu-central-1 = 'dts.aliyuncs.com',
    me-east-1 = 'dts.aliyuncs.com',
    ap-south-1 = 'dts.aliyuncs.com',
    cn-hangzhou-finance = 'dts.aliyuncs.com',
    cn-shanghai-finance-1 = 'dts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dts.aliyuncs.com',
    cn-north-2-gov-1 = 'dts.aliyuncs.com',
    ap-northeast-2-pop = 'dts.aliyuncs.com',
    cn-beijing-finance-1 = 'dts.aliyuncs.com',
    cn-beijing-finance-pop = 'dts.aliyuncs.com',
    cn-beijing-gov-1 = 'dts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dts.aliyuncs.com',
    cn-chengdu = 'dts.aliyuncs.com',
    cn-edge-1 = 'dts.aliyuncs.com',
    cn-fujian = 'dts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dts.aliyuncs.com',
    cn-hangzhou-test-306 = 'dts.aliyuncs.com',
    cn-hongkong-finance-pop = 'dts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'dts.aliyuncs.com',
    cn-qingdao-nebula = 'dts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dts.aliyuncs.com',
    cn-shanghai-inner = 'dts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dts.aliyuncs.com',
    cn-shenzhen-inner = 'dts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dts.aliyuncs.com',
    cn-wuhan = 'dts.aliyuncs.com',
    cn-wulanchabu = 'dts.aliyuncs.com',
    cn-yushanfang = 'dts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dts.aliyuncs.com',
    eu-west-1-oxs = 'dts.aliyuncs.com',
    rus-west-1-pop = 'dts.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('dts', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeInitializationStatusRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeInitializationStatusResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dataInitializationDetails?: [ 
    {
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      usedTime?: string(name='UsedTime'),
      tableName?: string(name='TableName'),
      errorMessage?: string(name='ErrorMessage'),
      finishRowNum?: string(name='FinishRowNum'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      totalRowNum?: string(name='TotalRowNum'),
    }
  ](name='DataInitializationDetails'),
  dataSynchronizationDetails?: [ 
    {
      status?: string(name='Status'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      tableName?: string(name='TableName'),
      errorMessage?: string(name='ErrorMessage'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
    }
  ](name='DataSynchronizationDetails'),
  structureInitializationDetails?: [ 
    {
      status?: string(name='Status'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      objectDefinition?: string(name='ObjectDefinition'),
      objectType?: string(name='ObjectType'),
      errorMessage?: string(name='ErrorMessage'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      objectName?: string(name='ObjectName'),
      constraints?: [ 
        {
          status?: string(name='Status'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName'),
          objectDefinition?: string(name='ObjectDefinition'),
          objectType?: string(name='ObjectType'),
          errorMessage?: string(name='ErrorMessage'),
          destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
          objectName?: string(name='ObjectName'),
        }
      ](name='Constraints'),
    }
  ](name='StructureInitializationDetails'),
}

model DescribeInitializationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInitializationStatusResponseBody(name='body'),
}

async function describeInitializationStatusWithOptions(request: DescribeInitializationStatusRequest, runtime: Util.RuntimeOptions): DescribeInitializationStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInitializationStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInitializationStatus(request: DescribeInitializationStatusRequest): DescribeInitializationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInitializationStatusWithOptions(request, runtime);
}

model CreateSynchronizationJobRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
  }(name='SourceEndpoint'),
  destinationEndpoint?: {
    instanceType?: string(name='InstanceType'),
  }(name='DestinationEndpoint'),
  regionId?: string(name='RegionId'),
  sourceRegion?: string(name='SourceRegion'),
  destRegion?: string(name='DestRegion'),
  topology?: string(name='Topology'),
  synchronizationJobClass?: string(name='SynchronizationJobClass'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: int32(name='UsedTime'),
  clientToken?: string(name='ClientToken'),
  networkType?: string(name='networkType'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
  DBInstanceCount?: int32(name='DBInstanceCount'),
}

model CreateSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  errMessage?: string(name='ErrMessage'),
}

model CreateSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSynchronizationJobResponseBody(name='body'),
}

async function createSynchronizationJobWithOptions(request: CreateSynchronizationJobRequest, runtime: Util.RuntimeOptions): CreateSynchronizationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSynchronizationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSynchronizationJob(request: CreateSynchronizationJobRequest): CreateSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSynchronizationJobWithOptions(request, runtime);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model DeleteMigrationJobRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DeleteMigrationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DeleteMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMigrationJobResponseBody(name='body'),
}

async function deleteMigrationJobWithOptions(request: DeleteMigrationJobRequest, runtime: Util.RuntimeOptions): DeleteMigrationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMigrationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMigrationJobWithOptions(request, runtime);
}

model DescribeSynchronizationJobStatusListRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobIdListJsonStr?: string(name='SynchronizationJobIdListJsonStr'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSynchronizationJobStatusListResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  pageRecordCount?: int32(name='PageRecordCount'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  synchronizationJobListStatusList?: [ 
    {
      synchronizationJobId?: string(name='SynchronizationJobId'),
      synchronizationDirectionInfoList?: [ 
        {
          status?: string(name='Status'),
          synchronizationDirection?: string(name='SynchronizationDirection'),
          checkpoint?: string(name='Checkpoint'),
        }
      ](name='SynchronizationDirectionInfoList'),
    }
  ](name='SynchronizationJobListStatusList'),
}

model DescribeSynchronizationJobStatusListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobStatusListResponseBody(name='body'),
}

async function describeSynchronizationJobStatusListWithOptions(request: DescribeSynchronizationJobStatusListRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobStatusListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSynchronizationJobStatusList', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSynchronizationJobStatusList(request: DescribeSynchronizationJobStatusListRequest): DescribeSynchronizationJobStatusListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobStatusListWithOptions(request, runtime);
}

model DescribeSubscriptionInstanceAlertRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSubscriptionInstanceAlertResponseBody = {
  requestId?: string(name='RequestId'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errMessage?: string(name='ErrMessage'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
}

model DescribeSubscriptionInstanceAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstanceAlertResponseBody(name='body'),
}

async function describeSubscriptionInstanceAlertWithOptions(request: DescribeSubscriptionInstanceAlertRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionInstanceAlertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSubscriptionInstanceAlert', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSubscriptionInstanceAlert(request: DescribeSubscriptionInstanceAlertRequest): DescribeSubscriptionInstanceAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionInstanceAlertWithOptions(request, runtime);
}

model CountJobByConditionRequest {
  type?: string(name='Type'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  jobType?: string(name='JobType'),
  params?: string(name='Params'),
  status?: string(name='Status'),
  orderDirection?: string(name='OrderDirection'),
  orderColumn?: string(name='OrderColumn'),
  tags?: string(name='Tags'),
  groupId?: string(name='GroupId'),
}

model CountJobByConditionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model CountJobByConditionResponse = {
  headers: map[string]string(name='headers'),
  body: CountJobByConditionResponseBody(name='body'),
}

async function countJobByConditionWithOptions(request: CountJobByConditionRequest, runtime: Util.RuntimeOptions): CountJobByConditionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CountJobByCondition', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function countJobByCondition(request: CountJobByConditionRequest): CountJobByConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return countJobByConditionWithOptions(request, runtime);
}

model DescribeSubscriptionInstanceStatusRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSubscriptionInstanceStatusResponseBody = {
  status?: string(name='Status'),
  errorMessage?: string(name='ErrorMessage'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  payType?: string(name='PayType'),
  consumptionClient?: string(name='ConsumptionClient'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
  endTimestamp?: string(name='EndTimestamp'),
  beginTimestamp?: string(name='BeginTimestamp'),
  requestId?: string(name='RequestId'),
  subscribeTopic?: string(name='SubscribeTopic'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
  taskId?: string(name='TaskId'),
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
    instanceID?: string(name='InstanceID'),
  }(name='SourceEndpoint'),
  subscriptionDataType?: {
    DML?: boolean(name='DML'),
    DDL?: boolean(name='DDL'),
  }(name='SubscriptionDataType'),
  subscriptionHost?: {
    VPCHost?: string(name='VPCHost'),
    publicHost?: string(name='PublicHost'),
    privateHost?: string(name='PrivateHost'),
  }(name='SubscriptionHost'),
  subscriptionObject?: {
    synchronousObject?: [ 
    {
      databaseName?: string(name='DatabaseName'),
      wholeDatabase?: string(name='WholeDatabase'),
      tableList?: {
        table?: [ string ](name='Table')
      }(name='TableList'),
    }
  ](name='SynchronousObject')
  }(name='SubscriptionObject'),
}

model DescribeSubscriptionInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstanceStatusResponseBody(name='body'),
}

async function describeSubscriptionInstanceStatusWithOptions(request: DescribeSubscriptionInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionInstanceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSubscriptionInstanceStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSubscriptionInstanceStatus(request: DescribeSubscriptionInstanceStatusRequest): DescribeSubscriptionInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionInstanceStatusWithOptions(request, runtime);
}

model DescribeDTSIPRequest {
  regionId?: string(name='RegionId'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
}

model DescribeDTSIPResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model DescribeDTSIPResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDTSIPResponseBody(name='body'),
}

async function describeDTSIPWithOptions(request: DescribeDTSIPRequest, runtime: Util.RuntimeOptions): DescribeDTSIPResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDTSIP', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDTSIP(request: DescribeDTSIPRequest): DescribeDTSIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDTSIPWithOptions(request, runtime);
}

model DescribeMigrationJobAlertRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeMigrationJobAlertResponseBody = {
  requestId?: string(name='RequestId'),
  migrationJobName?: string(name='MigrationJobName'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errMessage?: string(name='ErrMessage'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  migrationJobId?: string(name='MigrationJobId'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
}

model DescribeMigrationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobAlertResponseBody(name='body'),
}

async function describeMigrationJobAlertWithOptions(request: DescribeMigrationJobAlertRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobAlertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrationJobAlert', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrationJobAlert(request: DescribeMigrationJobAlertRequest): DescribeMigrationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobAlertWithOptions(request, runtime);
}

model StartDtsJobRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model StartDtsJobResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model StartDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartDtsJobResponseBody(name='body'),
}

async function startDtsJobWithOptions(request: StartDtsJobRequest, runtime: Util.RuntimeOptions): StartDtsJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDtsJob(request: StartDtsJobRequest): StartDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDtsJobWithOptions(request, runtime);
}

model ResetDtsJobRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model ResetDtsJobResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model ResetDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDtsJobResponseBody(name='body'),
}

async function resetDtsJobWithOptions(request: ResetDtsJobRequest, runtime: Util.RuntimeOptions): ResetDtsJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetDtsJob(request: ResetDtsJobRequest): ResetDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDtsJobWithOptions(request, runtime);
}

model SuspendSynchronizationJobRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model SuspendSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model SuspendSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendSynchronizationJobResponseBody(name='body'),
}

async function suspendSynchronizationJobWithOptions(request: SuspendSynchronizationJobRequest, runtime: Util.RuntimeOptions): SuspendSynchronizationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendSynchronizationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendSynchronizationJob(request: SuspendSynchronizationJobRequest): SuspendSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendSynchronizationJobWithOptions(request, runtime);
}

model InitDtsRdsInstanceRequest {
  regionId?: string(name='RegionId'),
  endpointInstanceType?: string(name='EndpointInstanceType'),
  endpointRegion?: string(name='EndpointRegion'),
  endpointInstanceId?: string(name='EndpointInstanceId'),
  endpointCenId?: string(name='EndpointCenId'),
}

model InitDtsRdsInstanceResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  adminAccount?: string(name='AdminAccount'),
  adminPassword?: string(name='AdminPassword'),
}

model InitDtsRdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: InitDtsRdsInstanceResponseBody(name='body'),
}

async function initDtsRdsInstanceWithOptions(request: InitDtsRdsInstanceRequest, runtime: Util.RuntimeOptions): InitDtsRdsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitDtsRdsInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initDtsRdsInstance(request: InitDtsRdsInstanceRequest): InitDtsRdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return initDtsRdsInstanceWithOptions(request, runtime);
}

model CreateSubscriptionInstanceRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
  }(name='SourceEndpoint'),
  regionId?: string(name='RegionId'),
  region?: string(name='Region'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: int32(name='UsedTime'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model CreateSubscriptionInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model CreateSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionInstanceResponseBody(name='body'),
}

async function createSubscriptionInstanceWithOptions(request: CreateSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): CreateSubscriptionInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSubscriptionInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSubscriptionInstance(request: CreateSubscriptionInstanceRequest): CreateSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscriptionInstanceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  dtsJobId?: string(name='DtsJobId'),
  chargeType?: string(name='ChargeType'),
  period?: string(name='Period'),
  buyCount?: string(name='BuyCount'),
  regionId?: string(name='RegionId'),
}

model RenewInstanceResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  dtsJobId?: string(name='DtsJobId'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  chargeType?: string(name='ChargeType'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  instanceId?: string(name='InstanceId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model DescribePreCheckStatusRequest {
  dtsJobId?: string(name='DtsJobId'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  jobCode?: string(name='JobCode'),
  structType?: string(name='StructType'),
  regionId?: string(name='RegionId'),
  structPhase?: string(name='StructPhase'),
  name?: string(name='Name'),
}

model DescribePreCheckStatusResponseBody = {
  state?: string(name='State'),
  success?: boolean(name='Success'),
  pageRecordCount?: long(name='PageRecordCount'),
  total?: int32(name='Total'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  jobName?: string(name='JobName'),
  jobId?: string(name='JobId'),
  errorItem?: int32(name='ErrorItem'),
  totalRecordCount?: long(name='TotalRecordCount'),
  code?: string(name='Code'),
  pageNumber?: long(name='PageNumber'),
  jobProgress?: [ 
    {
      skip?: boolean(name='Skip'),
      finishTime?: string(name='FinishTime'),
      ignoreFlag?: string(name='IgnoreFlag'),
      delaySeconds?: int32(name='DelaySeconds'),
      ddlSql?: string(name='DdlSql'),
      state?: string(name='State'),
      bootTime?: string(name='BootTime'),
      item?: string(name='Item'),
      sub?: string(name='Sub'),
      total?: int32(name='Total'),
      targetNames?: string(name='TargetNames'),
      canSkip?: boolean(name='CanSkip'),
      names?: string(name='Names'),
      errDetail?: string(name='ErrDetail'),
      diffRow?: long(name='DiffRow'),
      jobId?: string(name='JobId'),
      sourceSchema?: string(name='SourceSchema'),
      destSchema?: string(name='DestSchema'),
      parentObj?: string(name='ParentObj'),
      errMsg?: string(name='ErrMsg'),
      orderNum?: int32(name='OrderNum'),
      repairMethod?: string(name='RepairMethod'),
      id?: string(name='Id'),
      logs?: [ 
        {
          errData?: string(name='ErrData'),
          errMsg?: string(name='ErrMsg'),
          logLevel?: string(name='LogLevel'),
          errType?: string(name='ErrType'),
        }
      ](name='Logs'),
    }
  ](name='JobProgress'),
  subDistributedJobStatus?: [ 
    {
      jobName?: string(name='JobName'),
      state?: string(name='State'),
      jobId?: string(name='JobId'),
      errorItem?: int32(name='ErrorItem'),
      code?: string(name='Code'),
      total?: int32(name='Total'),
      jobProgress?: [ 
        {
          skip?: boolean(name='Skip'),
          finishTime?: string(name='FinishTime'),
          ignoreFlag?: string(name='IgnoreFlag'),
          delaySeconds?: int32(name='DelaySeconds'),
          ddlSql?: string(name='DdlSql'),
          state?: string(name='State'),
          bootTime?: string(name='BootTime'),
          item?: string(name='Item'),
          sub?: string(name='Sub'),
          total?: int32(name='Total'),
          targetNames?: string(name='TargetNames'),
          canSkip?: boolean(name='CanSkip'),
          names?: string(name='Names'),
          errDetail?: string(name='ErrDetail'),
          diffRow?: long(name='DiffRow'),
          jobId?: string(name='JobId'),
          sourceSchema?: string(name='SourceSchema'),
          destSchema?: string(name='DestSchema'),
          parentObj?: string(name='ParentObj'),
          errMsg?: string(name='ErrMsg'),
          orderNum?: int32(name='OrderNum'),
          repairMethod?: string(name='RepairMethod'),
          id?: string(name='Id'),
          logs?: [ 
            {
              errData?: string(name='ErrData'),
              errMsg?: string(name='ErrMsg'),
              logLevel?: string(name='LogLevel'),
              errType?: string(name='ErrType'),
            }
          ](name='Logs'),
        }
      ](name='JobProgress'),
    }
  ](name='SubDistributedJobStatus'),
}

model DescribePreCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckStatusResponseBody(name='body'),
}

async function describePreCheckStatusWithOptions(request: DescribePreCheckStatusRequest, runtime: Util.RuntimeOptions): DescribePreCheckStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePreCheckStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePreCheckStatus(request: DescribePreCheckStatusRequest): DescribePreCheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreCheckStatusWithOptions(request, runtime);
}

model SuspendMigrationJobRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model SuspendMigrationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model SuspendMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendMigrationJobResponseBody(name='body'),
}

async function suspendMigrationJobWithOptions(request: SuspendMigrationJobRequest, runtime: Util.RuntimeOptions): SuspendMigrationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendMigrationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendMigrationJob(request: SuspendMigrationJobRequest): SuspendMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendMigrationJobWithOptions(request, runtime);
}

model ConfigureSynchronizationJobAlertRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureSynchronizationJobAlertResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureSynchronizationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobAlertResponseBody(name='body'),
}

async function configureSynchronizationJobAlertWithOptions(request: ConfigureSynchronizationJobAlertRequest, runtime: Util.RuntimeOptions): ConfigureSynchronizationJobAlertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureSynchronizationJobAlert', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureSynchronizationJobAlert(request: ConfigureSynchronizationJobAlertRequest): ConfigureSynchronizationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSynchronizationJobAlertWithOptions(request, runtime);
}

model DeleteConsumerGroupRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  consumerGroupID?: string(name='ConsumerGroupID'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DeleteConsumerGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConsumerGroup', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupWithOptions(request, runtime);
}

model TransferPayTypeRequest {
  dtsJobId?: string(name='DtsJobId'),
  chargeType?: string(name='ChargeType'),
  period?: string(name='Period'),
  buyCount?: string(name='BuyCount'),
  regionId?: string(name='RegionId'),
}

model TransferPayTypeResponseBody = {
  endTime?: string(name='EndTime'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  chargeType?: string(name='ChargeType'),
  errMessage?: string(name='ErrMessage'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  instanceId?: string(name='InstanceId'),
}

model TransferPayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransferPayTypeResponseBody(name='body'),
}

async function transferPayTypeWithOptions(request: TransferPayTypeRequest, runtime: Util.RuntimeOptions): TransferPayTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferPayType', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferPayType(request: TransferPayTypeRequest): TransferPayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferPayTypeWithOptions(request, runtime);
}

model ShieldPrecheckRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  precheckItems?: string(name='PrecheckItems'),
}

model ShieldPrecheckResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ShieldPrecheckResponse = {
  headers: map[string]string(name='headers'),
  body: ShieldPrecheckResponseBody(name='body'),
}

async function shieldPrecheckWithOptions(request: ShieldPrecheckRequest, runtime: Util.RuntimeOptions): ShieldPrecheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ShieldPrecheck', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function shieldPrecheck(request: ShieldPrecheckRequest): ShieldPrecheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return shieldPrecheckWithOptions(request, runtime);
}

model ConfigureSynchronizationJobRequest {
  sourceEndpoint?: {
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    IP?: string(name='IP'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    password?: string(name='Password'),
    ownerID?: string(name='OwnerID'),
    role?: string(name='Role'),
    databaseName?: string(name='DatabaseName'),
  }(name='SourceEndpoint'),
  destinationEndpoint?: {
    instanceId?: string(name='InstanceId'),
    instanceType?: string(name='InstanceType'),
    IP?: string(name='IP'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    password?: string(name='Password'),
    dataBaseName?: string(name='DataBaseName'),
  }(name='DestinationEndpoint'),
  partitionKey?: {
    modifyTimeYear?: boolean(name='ModifyTime_Year'),
    modifyTimeMonth?: boolean(name='ModifyTime_Month'),
    modifyTimeDay?: boolean(name='ModifyTime_Day'),
    modifyTimeHour?: boolean(name='ModifyTime_Hour'),
    modifyTimeMinute?: boolean(name='ModifyTime_Minute'),
  }(name='PartitionKey'),
  regionId?: string(name='RegionId'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  structureInitialization?: boolean(name='StructureInitialization'),
  dataInitialization?: boolean(name='DataInitialization'),
  synchronizationObjects?: string(name='SynchronizationObjects'),
  migrationReserved?: string(name='MigrationReserved'),
  checkpoint?: string(name='Checkpoint'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobResponseBody(name='body'),
}

async function configureSynchronizationJobWithOptions(request: ConfigureSynchronizationJobRequest, runtime: Util.RuntimeOptions): ConfigureSynchronizationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureSynchronizationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureSynchronizationJob(request: ConfigureSynchronizationJobRequest): ConfigureSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSynchronizationJobWithOptions(request, runtime);
}

model DescribeEndpointSwitchStatusRequest {
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeEndpointSwitchStatusResponseBody = {
  status?: string(name='Status'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DescribeEndpointSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEndpointSwitchStatusResponseBody(name='body'),
}

async function describeEndpointSwitchStatusWithOptions(request: DescribeEndpointSwitchStatusRequest, runtime: Util.RuntimeOptions): DescribeEndpointSwitchStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEndpointSwitchStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEndpointSwitchStatus(request: DescribeEndpointSwitchStatusRequest): DescribeEndpointSwitchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEndpointSwitchStatusWithOptions(request, runtime);
}

model DescribeSynchronizationJobAlertRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSynchronizationJobAlertResponseBody = {
  synchronizationJobName?: string(name='SynchronizationJobName'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  errMessage?: string(name='ErrMessage'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  requestId?: string(name='RequestId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
}

model DescribeSynchronizationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobAlertResponseBody(name='body'),
}

async function describeSynchronizationJobAlertWithOptions(request: DescribeSynchronizationJobAlertRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobAlertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSynchronizationJobAlert', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSynchronizationJobAlert(request: DescribeSynchronizationJobAlertRequest): DescribeSynchronizationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobAlertWithOptions(request, runtime);
}

model DescribeConsumerChannelRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  parentChannelId?: string(name='ParentChannelId'),
}

model DescribeConsumerChannelResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  pageRecordCount?: int32(name='PageRecordCount'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  consumerChannels?: [ 
    {
      consumerGroupUserName?: string(name='ConsumerGroupUserName'),
      consumerGroupId?: string(name='ConsumerGroupId'),
      messageDelay?: long(name='MessageDelay'),
      consumerGroupName?: string(name='ConsumerGroupName'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      unconsumedData?: long(name='UnconsumedData'),
    }
  ](name='ConsumerChannels'),
}

model DescribeConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConsumerChannelResponseBody(name='body'),
}

async function describeConsumerChannelWithOptions(request: DescribeConsumerChannelRequest, runtime: Util.RuntimeOptions): DescribeConsumerChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConsumerChannel', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConsumerChannel(request: DescribeConsumerChannelRequest): DescribeConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConsumerChannelWithOptions(request, runtime);
}

model ConfigureDtsJobRequest {
  dtsJobName?: string(name='DtsJobName'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID'),
  sourceEndpointRole?: string(name='SourceEndpointRole'),
  destinationEndpointInstanceType?: string(name='DestinationEndpointInstanceType'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
  destinationEndpointIP?: string(name='DestinationEndpointIP'),
  destinationEndpointPort?: string(name='DestinationEndpointPort'),
  destinationEndpointDataBaseName?: string(name='DestinationEndpointDataBaseName'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword'),
  structureInitialization?: boolean(name='StructureInitialization'),
  dataInitialization?: boolean(name='DataInitialization'),
  dataSynchronization?: boolean(name='DataSynchronization'),
  dbList?: string(name='DbList'),
  reserve?: string(name='Reserve'),
  checkpoint?: string(name='Checkpoint'),
  ownerId?: string(name='OwnerId'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID'),
  jobType?: string(name='JobType'),
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  delayPhone?: string(name='DelayPhone'),
  delayRuleTime?: long(name='DelayRuleTime'),
  delayNotice?: boolean(name='DelayNotice'),
  errorPhone?: string(name='ErrorPhone'),
  errorNotice?: boolean(name='ErrorNotice'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model ConfigureDtsJobResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureDtsJobResponseBody(name='body'),
}

async function configureDtsJobWithOptions(request: ConfigureDtsJobRequest, runtime: Util.RuntimeOptions): ConfigureDtsJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureDtsJob(request: ConfigureDtsJobRequest): ConfigureDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureDtsJobWithOptions(request, runtime);
}

model StopDtsJobRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model StopDtsJobResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model StopDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopDtsJobResponseBody(name='body'),
}

async function stopDtsJobWithOptions(request: StopDtsJobRequest, runtime: Util.RuntimeOptions): StopDtsJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDtsJob(request: StopDtsJobRequest): StopDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDtsJobWithOptions(request, runtime);
}

model CreateConsumerChannelRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
}

model CreateConsumerChannelResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  consumerGroupID?: string(name='ConsumerGroupID'),
}

model CreateConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerChannelResponseBody(name='body'),
}

async function createConsumerChannelWithOptions(request: CreateConsumerChannelRequest, runtime: Util.RuntimeOptions): CreateConsumerChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConsumerChannel', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConsumerChannel(request: CreateConsumerChannelRequest): CreateConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerChannelWithOptions(request, runtime);
}

model ConfigureSubscriptionInstanceAlertRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureSubscriptionInstanceAlertResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureSubscriptionInstanceAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionInstanceAlertResponseBody(name='body'),
}

async function configureSubscriptionInstanceAlertWithOptions(request: ConfigureSubscriptionInstanceAlertRequest, runtime: Util.RuntimeOptions): ConfigureSubscriptionInstanceAlertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureSubscriptionInstanceAlert', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureSubscriptionInstanceAlert(request: ConfigureSubscriptionInstanceAlertRequest): ConfigureSubscriptionInstanceAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSubscriptionInstanceAlertWithOptions(request, runtime);
}

model CreateMigrationJobRequest {
  regionId?: string(name='RegionId'),
  region?: string(name='Region'),
  migrationJobClass?: string(name='MigrationJobClass'),
  ownerId?: string(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  accountId?: string(name='AccountId'),
}

model CreateMigrationJobResponseBody = {
  requestId?: string(name='RequestId'),
  migrationJobId?: string(name='MigrationJobId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model CreateMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMigrationJobResponseBody(name='body'),
}

async function createMigrationJobWithOptions(request: CreateMigrationJobRequest, runtime: Util.RuntimeOptions): CreateMigrationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMigrationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrationJobWithOptions(request, runtime);
}

model StartSubscriptionInstanceRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model StartSubscriptionInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  taskId?: string(name='TaskId'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model StartSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartSubscriptionInstanceResponseBody(name='body'),
}

async function startSubscriptionInstanceWithOptions(request: StartSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): StartSubscriptionInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartSubscriptionInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startSubscriptionInstance(request: StartSubscriptionInstanceRequest): StartSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startSubscriptionInstanceWithOptions(request, runtime);
}

model DeleteDtsJobRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model DeleteDtsJobResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model DeleteDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDtsJobResponseBody(name='body'),
}

async function deleteDtsJobWithOptions(request: DeleteDtsJobRequest, runtime: Util.RuntimeOptions): DeleteDtsJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDtsJob(request: DeleteDtsJobRequest): DeleteDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDtsJobWithOptions(request, runtime);
}

model DescribeConsumerGroupRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeConsumerGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  consumerChannels?: {
    describeConsumerChannel?: [ 
    {
      consumerGroupUserName?: string(name='ConsumerGroupUserName'),
      consumerGroupID?: string(name='ConsumerGroupID'),
      messageDelay?: long(name='MessageDelay'),
      consumerGroupName?: string(name='ConsumerGroupName'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      unconsumedData?: long(name='UnconsumedData'),
    }
  ](name='DescribeConsumerChannel')
  }(name='ConsumerChannels'),
}

model DescribeConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConsumerGroupResponseBody(name='body'),
}

async function describeConsumerGroupWithOptions(request: DescribeConsumerGroupRequest, runtime: Util.RuntimeOptions): DescribeConsumerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConsumerGroup', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConsumerGroup(request: DescribeConsumerGroupRequest): DescribeConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConsumerGroupWithOptions(request, runtime);
}

model DeleteSubscriptionInstanceRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DeleteSubscriptionInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DeleteSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscriptionInstanceResponseBody(name='body'),
}

async function deleteSubscriptionInstanceWithOptions(request: DeleteSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): DeleteSubscriptionInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSubscriptionInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSubscriptionInstance(request: DeleteSubscriptionInstanceRequest): DeleteSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubscriptionInstanceWithOptions(request, runtime);
}

model ModifyConsumptionTimestampRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  consumptionTimestamp?: string(name='ConsumptionTimestamp'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ModifyConsumptionTimestampResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ModifyConsumptionTimestampResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumptionTimestampResponseBody(name='body'),
}

async function modifyConsumptionTimestampWithOptions(request: ModifyConsumptionTimestampRequest, runtime: Util.RuntimeOptions): ModifyConsumptionTimestampResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyConsumptionTimestamp', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyConsumptionTimestamp(request: ModifyConsumptionTimestampRequest): ModifyConsumptionTimestampResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConsumptionTimestampWithOptions(request, runtime);
}

model DeleteSynchronizationJobRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DeleteSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DeleteSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSynchronizationJobResponseBody(name='body'),
}

async function deleteSynchronizationJobWithOptions(request: DeleteSynchronizationJobRequest, runtime: Util.RuntimeOptions): DeleteSynchronizationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSynchronizationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSynchronizationJob(request: DeleteSynchronizationJobRequest): DeleteSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSynchronizationJobWithOptions(request, runtime);
}

model DescribeDtsJobDetailRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceID?: string(name='DtsInstanceID'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model DescribeDtsJobDetailResponseBody = {
  status?: string(name='Status'),
  dtsJobName?: string(name='DtsJobName'),
  finishTime?: string(name='FinishTime'),
  errorMessage?: string(name='ErrorMessage'),
  dtsJobId?: string(name='DtsJobId'),
  createTime?: string(name='CreateTime'),
  payType?: string(name='PayType'),
  reserved?: string(name='Reserved'),
  databaseCount?: int32(name='DatabaseCount'),
  dtsJobClass?: string(name='DtsJobClass'),
  endTimestamp?: string(name='EndTimestamp'),
  appName?: string(name='AppName'),
  destNetType?: string(name='DestNetType'),
  subscribeTopic?: string(name='SubscribeTopic'),
  dtsInstanceID?: string(name='DtsInstanceID'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  checkpoint?: int32(name='Checkpoint'),
  delay?: int32(name='Delay'),
  expireTime?: string(name='ExpireTime'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  consumptionClient?: string(name='ConsumptionClient'),
  dbObject?: string(name='DbObject'),
  dynamicMessage?: string(name='DynamicMessage'),
  consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
  etlCalculator?: string(name='EtlCalculator'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  beginTimestamp?: string(name='BeginTimestamp'),
  groupId?: string(name='GroupId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  dtsJobDirection?: string(name='DtsJobDirection'),
  sourceEndpoint?: {
    oracleSID?: string(name='OracleSID'),
    sslSolutionEnum?: string(name='SslSolutionEnum'),
    ip?: string(name='Ip'),
    instanceID?: string(name='InstanceID'),
    roleName?: string(name='RoleName'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    engineName?: string(name='EngineName'),
    region?: string(name='Region'),
    databaseName?: string(name='DatabaseName'),
    aliyunUid?: string(name='AliyunUid'),
    userName?: string(name='UserName'),
  }(name='SourceEndpoint'),
  destinationEndpoint?: {
    sslSolutionEnum?: string(name='SslSolutionEnum'),
    oracleSID?: string(name='OracleSID'),
    databaseName?: string(name='DatabaseName'),
    region?: string(name='Region'),
    ip?: string(name='Ip'),
    instanceID?: string(name='InstanceID'),
    port?: string(name='Port'),
    instanceType?: string(name='InstanceType'),
    userName?: string(name='UserName'),
    engineName?: string(name='EngineName'),
  }(name='DestinationEndpoint'),
  migrationMode?: {
    dataExtractTransformLoad?: boolean(name='DataExtractTransformLoad'),
    dataInitialization?: boolean(name='DataInitialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
    structureInitialization?: boolean(name='StructureInitialization'),
  }(name='MigrationMode'),
  subscriptionHost?: {
    vpcHost?: string(name='VpcHost'),
    publicHost?: string(name='PublicHost'),
    privateHost?: string(name='PrivateHost'),
  }(name='SubscriptionHost'),
  subscriptionDataType?: {
    dml?: boolean(name='Dml'),
    ddl?: boolean(name='Ddl'),
  }(name='SubscriptionDataType'),
}

model DescribeDtsJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsJobDetailResponseBody(name='body'),
}

async function describeDtsJobDetailWithOptions(request: DescribeDtsJobDetailRequest, runtime: Util.RuntimeOptions): DescribeDtsJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDtsJobDetail', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDtsJobDetail(request: DescribeDtsJobDetailRequest): DescribeDtsJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDtsJobDetailWithOptions(request, runtime);
}

model TransferInstanceClassRequest {
  orderType?: string(name='OrderType'),
  instanceClass?: string(name='InstanceClass'),
  regionId?: string(name='RegionId'),
  dtsJobId?: string(name='DtsJobId'),
}

model TransferInstanceClassResponseBody = {
  endTime?: string(name='EndTime'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  chargeType?: string(name='ChargeType'),
  errMessage?: string(name='ErrMessage'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  instanceId?: string(name='InstanceId'),
}

model TransferInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: TransferInstanceClassResponseBody(name='body'),
}

async function transferInstanceClassWithOptions(request: TransferInstanceClassRequest, runtime: Util.RuntimeOptions): TransferInstanceClassResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferInstanceClass', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferInstanceClass(request: TransferInstanceClassRequest): TransferInstanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferInstanceClassWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model ConfigureMigrationJobAlertRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  delayAlertStatus?: string(name='DelayAlertStatus'),
  delayAlertPhone?: string(name='DelayAlertPhone'),
  errorAlertStatus?: string(name='ErrorAlertStatus'),
  errorAlertPhone?: string(name='ErrorAlertPhone'),
  delayOverSeconds?: string(name='DelayOverSeconds'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureMigrationJobAlertResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureMigrationJobAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureMigrationJobAlertResponseBody(name='body'),
}

async function configureMigrationJobAlertWithOptions(request: ConfigureMigrationJobAlertRequest, runtime: Util.RuntimeOptions): ConfigureMigrationJobAlertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureMigrationJobAlert', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureMigrationJobAlert(request: ConfigureMigrationJobAlertRequest): ConfigureMigrationJobAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureMigrationJobAlertWithOptions(request, runtime);
}

model DescribeMigrationJobsRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  migrationJobName?: string(name='MigrationJobName'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeMigrationJobsResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  pageRecordCount?: int32(name='PageRecordCount'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  migrationJobs?: {
    migrationJob?: [ 
    {
      migrationJobName?: string(name='MigrationJobName'),
      migrationJobStatus?: string(name='MigrationJobStatus'),
      payType?: string(name='PayType'),
      migrationJobClass?: string(name='MigrationJobClass'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      migrationJobID?: string(name='MigrationJobID'),
      jobCreateTime?: string(name='JobCreateTime'),
      migrationObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName'),
          wholeDatabase?: string(name='WholeDatabase'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList'),
        }
      ](name='SynchronousObject')
      }(name='MigrationObject'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      dataInitialization?: {
        percent?: string(name='Percent'),
        status?: string(name='status'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='DataInitialization'),
      dataSynchronization?: {
        delay?: string(name='Delay'),
        percent?: string(name='Percent'),
        status?: string(name='status'),
        errorMessage?: string(name='ErrorMessage'),
      }(name='DataSynchronization'),
      destinationEndpoint?: {
        oracleSID?: string(name='OracleSID'),
        databaseName?: string(name='DatabaseName'),
        instanceID?: string(name='InstanceID'),
        port?: string(name='Port'),
        IP?: string(name='IP'),
        instanceType?: string(name='InstanceType'),
        userName?: string(name='UserName'),
        engineName?: string(name='EngineName'),
      }(name='DestinationEndpoint'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      precheck?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
      }(name='Precheck'),
      sourceEndpoint?: {
        oracleSID?: string(name='OracleSID'),
        databaseName?: string(name='DatabaseName'),
        instanceID?: string(name='InstanceID'),
        port?: string(name='Port'),
        IP?: string(name='IP'),
        instanceType?: string(name='InstanceType'),
        userName?: string(name='UserName'),
        engineName?: string(name='EngineName'),
      }(name='SourceEndpoint'),
      structureInitialization?: {
        percent?: string(name='Percent'),
        status?: string(name='status'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='StructureInitialization'),
    }
  ](name='MigrationJob')
  }(name='MigrationJobs'),
}

model DescribeMigrationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobsResponseBody(name='body'),
}

async function describeMigrationJobsWithOptions(request: DescribeMigrationJobsRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrationJobs', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrationJobs(request: DescribeMigrationJobsRequest): DescribeMigrationJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  tagResources?: {
    tagResource?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model DescribeDtsJobsRequest {
  type?: string(name='Type'),
  params?: string(name='Params'),
  region?: string(name='Region'),
  status?: string(name='Status'),
  orderDirection?: string(name='OrderDirection'),
  orderColumn?: string(name='OrderColumn'),
  tags?: string(name='Tags'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  jobType?: string(name='JobType'),
  regionId?: string(name='RegionId'),
  groupId?: string(name='GroupId'),
}

model DescribeDtsJobsResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  pageNumber?: int32(name='PageNumber'),
  dynamicCode?: string(name='DynamicCode'),
  dtsJobList?: [ 
    {
      status?: string(name='Status'),
      dtsJobName?: string(name='DtsJobName'),
      delay?: int32(name='Delay'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      dtsJobId?: string(name='DtsJobId'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      reserved?: string(name='Reserved'),
      consumptionClient?: string(name='ConsumptionClient'),
      dbObject?: string(name='DbObject'),
      dtsJobClass?: string(name='DtsJobClass'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      endTimestamp?: string(name='EndTimestamp'),
      appName?: string(name='AppName'),
      beginTimestamp?: string(name='BeginTimestamp'),
      dtsInstanceID?: string(name='DtsInstanceID'),
      dtsJobDirection?: string(name='DtsJobDirection'),
      checkpoint?: string(name='Checkpoint'),
      tagList?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='TagList'),
      dataInitializationStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        status?: string(name='Status'),
        needUpgrade?: boolean(name='NeedUpgrade'),
        percent?: string(name='Percent'),
        progress?: string(name='Progress'),
        errorMessage?: string(name='ErrorMessage'),
      }(name='DataSynchronizationStatus'),
      dataEtlStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='DataEtlStatus'),
      destinationEndpoint?: {
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        oracleSID?: string(name='OracleSID'),
        region?: string(name='Region'),
        databaseName?: string(name='DatabaseName'),
        ip?: string(name='Ip'),
        instanceID?: string(name='InstanceID'),
        port?: string(name='Port'),
        instanceType?: string(name='InstanceType'),
        userName?: string(name='UserName'),
        engineName?: string(name='EngineName'),
      }(name='DestinationEndpoint'),
      migrationMode?: {
        dataInitialization?: boolean(name='DataInitialization'),
        dataSynchronization?: boolean(name='DataSynchronization'),
        structureInitialization?: boolean(name='StructureInitialization'),
      }(name='MigrationMode'),
      performance?: {
        rps?: string(name='Rps'),
        flow?: string(name='Flow'),
      }(name='Performance'),
      precheckStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
        detail?: [ 
          {
            checkResult?: string(name='CheckResult'),
            checkItemDescription?: string(name='CheckItemDescription'),
            checkItem?: string(name='CheckItem'),
            repairMethod?: string(name='RepairMethod'),
            failedReason?: string(name='FailedReason'),
          }
        ](name='Detail'),
      }(name='PrecheckStatus'),
      reverseJob?: {
        status?: string(name='Status'),
        dtsJobName?: string(name='DtsJobName'),
        delay?: int32(name='Delay'),
        errorMessage?: string(name='ErrorMessage'),
        dtsJobId?: string(name='DtsJobId'),
        expireTime?: string(name='ExpireTime'),
        createTime?: string(name='CreateTime'),
        payType?: string(name='PayType'),
        reserved?: string(name='Reserved'),
        dbObject?: string(name='DbObject'),
        dtsJobClass?: string(name='DtsJobClass'),
        dtsInstanceID?: string(name='DtsInstanceID'),
        dtsJobDirection?: string(name='DtsJobDirection'),
        checkpoint?: string(name='Checkpoint'),
        dataInitializationStatus?: {
          status?: string(name='Status'),
          percent?: string(name='Percent'),
          errorMessage?: string(name='ErrorMessage'),
          progress?: string(name='Progress'),
        }(name='DataInitializationStatus'),
        dataSynchronizationStatus?: {
          status?: string(name='Status'),
          needUpgrade?: boolean(name='NeedUpgrade'),
          percent?: string(name='Percent'),
          progress?: string(name='Progress'),
          errorMessage?: string(name='ErrorMessage'),
        }(name='DataSynchronizationStatus'),
        destinationEndpoint?: {
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          oracleSID?: string(name='OracleSID'),
          region?: string(name='Region'),
          databaseName?: string(name='DatabaseName'),
          ip?: string(name='Ip'),
          instanceID?: string(name='InstanceID'),
          port?: string(name='Port'),
          instanceType?: string(name='InstanceType'),
          userName?: string(name='UserName'),
          engineName?: string(name='EngineName'),
        }(name='DestinationEndpoint'),
        migrationMode?: {
          dataInitialization?: boolean(name='DataInitialization'),
          dataSynchronization?: boolean(name='DataSynchronization'),
          structureInitialization?: boolean(name='StructureInitialization'),
        }(name='MigrationMode'),
        performance?: {
          rps?: string(name='Rps'),
          flow?: string(name='Flow'),
        }(name='Performance'),
        precheckStatus?: {
          status?: string(name='Status'),
          percent?: string(name='Percent'),
          errorMessage?: string(name='ErrorMessage'),
          detail?: [ 
            {
              checkResult?: string(name='CheckResult'),
              checkItemDescription?: string(name='CheckItemDescription'),
              checkItem?: string(name='CheckItem'),
              repairMethod?: string(name='RepairMethod'),
              failedReason?: string(name='FailedReason'),
            }
          ](name='Detail'),
        }(name='PrecheckStatus'),
        sourceEndpoint?: {
          sslSolutionEnum?: string(name='SslSolutionEnum'),
          oracleSID?: string(name='OracleSID'),
          region?: string(name='Region'),
          databaseName?: string(name='DatabaseName'),
          ip?: string(name='Ip'),
          instanceID?: string(name='InstanceID'),
          port?: string(name='Port'),
          instanceType?: string(name='InstanceType'),
          userName?: string(name='UserName'),
          engineName?: string(name='EngineName'),
        }(name='SourceEndpoint'),
        structureInitializationStatus?: {
          status?: string(name='Status'),
          percent?: string(name='Percent'),
          errorMessage?: string(name='ErrorMessage'),
          progress?: string(name='Progress'),
        }(name='StructureInitializationStatus'),
      }(name='ReverseJob'),
      sourceEndpoint?: {
        sslSolutionEnum?: string(name='SslSolutionEnum'),
        oracleSID?: string(name='OracleSID'),
        region?: string(name='Region'),
        databaseName?: string(name='DatabaseName'),
        ip?: string(name='Ip'),
        instanceID?: string(name='InstanceID'),
        port?: string(name='Port'),
        instanceType?: string(name='InstanceType'),
        userName?: string(name='UserName'),
        engineName?: string(name='EngineName'),
      }(name='SourceEndpoint'),
      structureInitializationStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='StructureInitializationStatus'),
      retryState?: {
        retryCount?: int32(name='RetryCount'),
        maxRetryTime?: int32(name='MaxRetryTime'),
        errMessage?: string(name='ErrMessage'),
        retryTarget?: string(name='RetryTarget'),
        retryTime?: int32(name='RetryTime'),
      }(name='RetryState'),
    }
  ](name='DtsJobList'),
}

model DescribeDtsJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDtsJobsResponseBody(name='body'),
}

async function describeDtsJobsWithOptions(request: DescribeDtsJobsRequest, runtime: Util.RuntimeOptions): DescribeDtsJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDtsJobs', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDtsJobs(request: DescribeDtsJobsRequest): DescribeDtsJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDtsJobsWithOptions(request, runtime);
}

model SummaryJobDetailRequest {
  dtsJobId?: string(name='DtsJobId'),
  jobCode?: string(name='JobCode'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
}

model SummaryJobDetailResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  jobId?: string(name='JobId'),
  progressSummaryDetails?: [ 
    {
      key?: string(name='Key'),
      totalCount?: long(name='TotalCount'),
      state?: int32(name='State'),
    }
  ](name='ProgressSummaryDetails'),
}

model SummaryJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: SummaryJobDetailResponseBody(name='body'),
}

async function summaryJobDetailWithOptions(request: SummaryJobDetailRequest, runtime: Util.RuntimeOptions): SummaryJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SummaryJobDetail', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function summaryJobDetail(request: SummaryJobDetailRequest): SummaryJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return summaryJobDetailWithOptions(request, runtime);
}

model ModifyDtsJobNameRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsJobName?: string(name='DtsJobName'),
  regionId?: string(name='RegionId'),
}

model ModifyDtsJobNameResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
}

model ModifyDtsJobNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobNameResponseBody(name='body'),
}

async function modifyDtsJobNameWithOptions(request: ModifyDtsJobNameRequest, runtime: Util.RuntimeOptions): ModifyDtsJobNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDtsJobName', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDtsJobName(request: ModifyDtsJobNameRequest): ModifyDtsJobNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDtsJobNameWithOptions(request, runtime);
}

model WhiteIpListRequest {
  type?: string(name='Type'),
  region?: string(name='Region'),
  destinationRegion?: string(name='DestinationRegion'),
  regionId?: string(name='RegionId'),
}

model WhiteIpListResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  ipList?: string(name='IpList'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model WhiteIpListResponse = {
  headers: map[string]string(name='headers'),
  body: WhiteIpListResponseBody(name='body'),
}

async function whiteIpListWithOptions(request: WhiteIpListRequest, runtime: Util.RuntimeOptions): WhiteIpListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('WhiteIpList', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function whiteIpList(request: WhiteIpListRequest): WhiteIpListResponse {
  var runtime = new Util.RuntimeOptions{};
  return whiteIpListWithOptions(request, runtime);
}

model ModifySubscriptionObjectRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  subscriptionObject?: string(name='SubscriptionObject'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ModifySubscriptionObjectResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ModifySubscriptionObjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySubscriptionObjectResponseBody(name='body'),
}

async function modifySubscriptionObjectWithOptions(request: ModifySubscriptionObjectRequest, runtime: Util.RuntimeOptions): ModifySubscriptionObjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySubscriptionObject', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySubscriptionObject(request: ModifySubscriptionObjectRequest): ModifySubscriptionObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySubscriptionObjectWithOptions(request, runtime);
}

model ModifySynchronizationObjectRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationObjects?: string(name='SynchronizationObjects'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ModifySynchronizationObjectResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  taskId?: string(name='TaskId'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ModifySynchronizationObjectResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySynchronizationObjectResponseBody(name='body'),
}

async function modifySynchronizationObjectWithOptions(request: ModifySynchronizationObjectRequest, runtime: Util.RuntimeOptions): ModifySynchronizationObjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySynchronizationObject', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySynchronizationObject(request: ModifySynchronizationObjectRequest): ModifySynchronizationObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySynchronizationObjectWithOptions(request, runtime);
}

model CreateConsumerGroupRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model CreateConsumerGroupResponseBody = {
  consumerGroupID?: string(name='ConsumerGroupID'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConsumerGroup', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupWithOptions(request, runtime);
}

model DeleteConsumerChannelRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  consumerGroupId?: string(name='ConsumerGroupId'),
}

model DeleteConsumerChannelResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DeleteConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerChannelResponseBody(name='body'),
}

async function deleteConsumerChannelWithOptions(request: DeleteConsumerChannelRequest, runtime: Util.RuntimeOptions): DeleteConsumerChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConsumerChannel', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConsumerChannel(request: DeleteConsumerChannelRequest): DeleteConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerChannelWithOptions(request, runtime);
}

model SwitchSynchronizationEndpointRequest {
  endpoint?: {
    type?: string(name='Type'),
    instanceType?: string(name='InstanceType'),
    instanceId?: string(name='InstanceId'),
    IP?: string(name='IP'),
    port?: string(name='Port'),
  }(name='Endpoint'),
  sourceEndpoint?: {
    ownerID?: string(name='OwnerID'),
    role?: string(name='Role'),
  }(name='SourceEndpoint'),
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model SwitchSynchronizationEndpointResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  taskId?: string(name='TaskId'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model SwitchSynchronizationEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchSynchronizationEndpointResponseBody(name='body'),
}

async function switchSynchronizationEndpointWithOptions(request: SwitchSynchronizationEndpointRequest, runtime: Util.RuntimeOptions): SwitchSynchronizationEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchSynchronizationEndpoint', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchSynchronizationEndpoint(request: SwitchSynchronizationEndpointRequest): SwitchSynchronizationEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchSynchronizationEndpointWithOptions(request, runtime);
}

model DescribeSubscriptionInstancesRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeSubscriptionInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  pageRecordCount?: int32(name='PageRecordCount'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  subscriptionInstances?: {
    subscriptionInstance?: [ 
    {
      status?: string(name='Status'),
      errorMessage?: string(name='ErrorMessage'),
      payType?: string(name='PayType'),
      consumptionClient?: string(name='ConsumptionClient'),
      consumptionCheckpoint?: string(name='ConsumptionCheckpoint'),
      endTimestamp?: string(name='EndTimestamp'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      beginTimestamp?: string(name='BeginTimestamp'),
      subscribeTopic?: string(name='SubscribeTopic'),
      subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
      subscriptionInstanceID?: string(name='SubscriptionInstanceID'),
      jobCreateTime?: string(name='JobCreateTime'),
      subscriptionObject?: {
        synchronousObject?: [ 
        {
          databaseName?: string(name='DatabaseName'),
          wholeDatabase?: string(name='WholeDatabase'),
          tableList?: {
            table?: [ string ](name='Table')
          }(name='TableList'),
        }
      ](name='SynchronousObject')
      }(name='SubscriptionObject'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      sourceEndpoint?: {
        instanceType?: string(name='InstanceType'),
        instanceID?: string(name='InstanceID'),
      }(name='SourceEndpoint'),
      subscriptionDataType?: {
        DML?: boolean(name='DML'),
        DDL?: boolean(name='DDL'),
      }(name='SubscriptionDataType'),
      subscriptionHost?: {
        VPCHost?: string(name='VPCHost'),
        publicHost?: string(name='PublicHost'),
        privateHost?: string(name='PrivateHost'),
      }(name='SubscriptionHost'),
    }
  ](name='SubscriptionInstance')
  }(name='SubscriptionInstances'),
}

model DescribeSubscriptionInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionInstancesResponseBody(name='body'),
}

async function describeSubscriptionInstancesWithOptions(request: DescribeSubscriptionInstancesRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSubscriptionInstances', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSubscriptionInstances(request: DescribeSubscriptionInstancesRequest): DescribeSubscriptionInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionInstancesWithOptions(request, runtime);
}

model DescribeSynchronizationJobReplicatorCompareRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSynchronizationJobReplicatorCompareResponseBody = {
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DescribeSynchronizationJobReplicatorCompareResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function describeSynchronizationJobReplicatorCompareWithOptions(request: DescribeSynchronizationJobReplicatorCompareRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobReplicatorCompareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSynchronizationJobReplicatorCompare', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSynchronizationJobReplicatorCompare(request: DescribeSynchronizationJobReplicatorCompareRequest): DescribeSynchronizationJobReplicatorCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobReplicatorCompareWithOptions(request, runtime);
}

model StartMigrationJobRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model StartMigrationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model StartMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartMigrationJobResponseBody(name='body'),
}

async function startMigrationJobWithOptions(request: StartMigrationJobRequest, runtime: Util.RuntimeOptions): StartMigrationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartMigrationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startMigrationJob(request: StartMigrationJobRequest): StartMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMigrationJobWithOptions(request, runtime);
}

model ModifyDtsJobPasswordRequest {
  dtsJobId?: string(name='DtsJobId'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  endpoint?: string(name='Endpoint'),
  regionId?: string(name='RegionId'),
}

model ModifyDtsJobPasswordResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
}

model ModifyDtsJobPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobPasswordResponseBody(name='body'),
}

async function modifyDtsJobPasswordWithOptions(request: ModifyDtsJobPasswordRequest, runtime: Util.RuntimeOptions): ModifyDtsJobPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDtsJobPassword', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDtsJobPassword(request: ModifyDtsJobPasswordRequest): ModifyDtsJobPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDtsJobPasswordWithOptions(request, runtime);
}

model ConfigureSynchronizationJobReplicatorCompareRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  synchronizationReplicatorCompareEnable?: boolean(name='SynchronizationReplicatorCompareEnable'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureSynchronizationJobReplicatorCompareResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureSynchronizationJobReplicatorCompareResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSynchronizationJobReplicatorCompareResponseBody(name='body'),
}

async function configureSynchronizationJobReplicatorCompareWithOptions(request: ConfigureSynchronizationJobReplicatorCompareRequest, runtime: Util.RuntimeOptions): ConfigureSynchronizationJobReplicatorCompareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureSynchronizationJobReplicatorCompare', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureSynchronizationJobReplicatorCompare(request: ConfigureSynchronizationJobReplicatorCompareRequest): ConfigureSynchronizationJobReplicatorCompareResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSynchronizationJobReplicatorCompareWithOptions(request, runtime);
}

model DescribeSynchronizationJobsRequest {
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  synchronizationJobName?: string(name='SynchronizationJobName'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeSynchronizationJobsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: long(name='TotalRecordCount'),
  synchronizationInstances?: [ 
    {
      dataInitialization?: string(name='DataInitialization'),
      status?: string(name='Status'),
      synchronizationJobName?: string(name='SynchronizationJobName'),
      delay?: string(name='Delay'),
      errorMessage?: string(name='ErrorMessage'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      structureInitialization?: string(name='StructureInitialization'),
      synchronizationJobClass?: string(name='SynchronizationJobClass'),
      instanceCreateTime?: string(name='InstanceCreateTime'),
      synchronizationJobId?: string(name='SynchronizationJobId'),
      synchronizationDirection?: string(name='SynchronizationDirection'),
      jobCreateTime?: string(name='JobCreateTime'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      synchronizationObjects?: [ 
        {
          newSchemaName?: string(name='NewSchemaName'),
          schemaName?: string(name='SchemaName'),
          tableExcludes?: [ 
            {
              tableName?: string(name='TableName'),
            }
          ](name='TableExcludes'),
          tableIncludes?: [ 
            {
              tableName?: string(name='TableName'),
            }
          ](name='TableIncludes'),
        }
      ](name='SynchronizationObjects'),
      dataInitializationStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='DataInitializationStatus'),
      dataSynchronizationStatus?: {
        status?: string(name='Status'),
        delay?: string(name='Delay'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
      }(name='DataSynchronizationStatus'),
      destinationEndpoint?: {
        instanceId?: string(name='InstanceId'),
        IP?: string(name='IP'),
        instanceType?: string(name='InstanceType'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
        engineName?: string(name='EngineName'),
      }(name='DestinationEndpoint'),
      performance?: {
        RPS?: string(name='RPS'),
        FLOW?: string(name='FLOW'),
      }(name='Performance'),
      precheckStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        detail?: [ 
          {
            checkStatus?: string(name='CheckStatus'),
            errorMessage?: string(name='ErrorMessage'),
            itemName?: string(name='ItemName'),
            repairMethod?: string(name='RepairMethod'),
          }
        ](name='Detail'),
      }(name='PrecheckStatus'),
      sourceEndpoint?: {
        instanceId?: string(name='InstanceId'),
        IP?: string(name='IP'),
        instanceType?: string(name='InstanceType'),
        port?: string(name='Port'),
        userName?: string(name='UserName'),
        engineName?: string(name='EngineName'),
      }(name='SourceEndpoint'),
      structureInitializationStatus?: {
        status?: string(name='Status'),
        percent?: string(name='Percent'),
        errorMessage?: string(name='ErrorMessage'),
        progress?: string(name='Progress'),
      }(name='StructureInitializationStatus'),
    }
  ](name='SynchronizationInstances'),
}

model DescribeSynchronizationJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobsResponseBody(name='body'),
}

async function describeSynchronizationJobsWithOptions(request: DescribeSynchronizationJobsRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSynchronizationJobs', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSynchronizationJobs(request: DescribeSynchronizationJobsRequest): DescribeSynchronizationJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobsWithOptions(request, runtime);
}

model ModifyConsumerGroupPasswordRequest {
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  consumerGroupID?: string(name='ConsumerGroupID'),
  consumerGroupName?: string(name='ConsumerGroupName'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupNewPassword?: string(name='consumerGroupNewPassword'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ModifyConsumerGroupPasswordResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ModifyConsumerGroupPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumerGroupPasswordResponseBody(name='body'),
}

async function modifyConsumerGroupPasswordWithOptions(request: ModifyConsumerGroupPasswordRequest, runtime: Util.RuntimeOptions): ModifyConsumerGroupPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyConsumerGroupPassword', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyConsumerGroupPassword(request: ModifyConsumerGroupPasswordRequest): ModifyConsumerGroupPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConsumerGroupPasswordWithOptions(request, runtime);
}

model DescribeJobMonitorRuleRequest {
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model DescribeJobMonitorRuleResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  monitorRules?: [ 
    {
      type?: string(name='Type'),
      delayRuleTime?: long(name='DelayRuleTime'),
      state?: string(name='State'),
      phone?: string(name='Phone'),
    }
  ](name='MonitorRules'),
}

model DescribeJobMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobMonitorRuleResponseBody(name='body'),
}

async function describeJobMonitorRuleWithOptions(request: DescribeJobMonitorRuleRequest, runtime: Util.RuntimeOptions): DescribeJobMonitorRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeJobMonitorRule', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeJobMonitorRule(request: DescribeJobMonitorRuleRequest): DescribeJobMonitorRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeJobMonitorRuleWithOptions(request, runtime);
}

model SkipPreCheckRequest {
  jobId?: string(name='JobId'),
  skip?: boolean(name='Skip'),
  skipPreCheckItems?: string(name='SkipPreCheckItems'),
  skipPreCheckNames?: string(name='SkipPreCheckNames'),
  dtsJobId?: string(name='DtsJobId'),
  regionId?: string(name='RegionId'),
}

model SkipPreCheckResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  skipNames?: string(name='SkipNames'),
  code?: string(name='Code'),
  scheduleJobId?: string(name='ScheduleJobId'),
  dynamicMessage?: string(name='DynamicMessage'),
  migrationJobId?: string(name='MigrationJobId'),
  skipItems?: string(name='SkipItems'),
}

model SkipPreCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SkipPreCheckResponseBody(name='body'),
}

async function skipPreCheckWithOptions(request: SkipPreCheckRequest, runtime: Util.RuntimeOptions): SkipPreCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SkipPreCheck', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function skipPreCheck(request: SkipPreCheckRequest): SkipPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return skipPreCheckWithOptions(request, runtime);
}

model StartSynchronizationJobRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model StartSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model StartSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartSynchronizationJobResponseBody(name='body'),
}

async function startSynchronizationJobWithOptions(request: StartSynchronizationJobRequest, runtime: Util.RuntimeOptions): StartSynchronizationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartSynchronizationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startSynchronizationJob(request: StartSynchronizationJobRequest): StartSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startSynchronizationJobWithOptions(request, runtime);
}

model DescribeSubscriptionMetaRequest {
  sid?: string(name='Sid'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  subMigrationJobIds?: map[string]any(name='SubMigrationJobIds'),
  topics?: map[string]any(name='Topics'),
  regionId?: string(name='RegionId'),
}

model DescribeSubscriptionMetaShrinkRequest {
  sid?: string(name='Sid'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  subMigrationJobIdsShrink?: string(name='SubMigrationJobIds'),
  topicsShrink?: string(name='Topics'),
  regionId?: string(name='RegionId'),
}

model DescribeSubscriptionMetaResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  subscriptionMetaList?: [ 
    {
      sid?: string(name='Sid'),
      checkpoint?: long(name='Checkpoint'),
      DProxyUrl?: string(name='DProxyUrl'),
      DBList?: string(name='DBList'),
      topic?: string(name='Topic'),
    }
  ](name='SubscriptionMetaList'),
}

model DescribeSubscriptionMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubscriptionMetaResponseBody(name='body'),
}

async function describeSubscriptionMetaWithOptions(tmpReq: DescribeSubscriptionMetaRequest, runtime: Util.RuntimeOptions): DescribeSubscriptionMetaResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeSubscriptionMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subMigrationJobIds)) {
    request.subMigrationJobIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subMigrationJobIds, 'SubMigrationJobIds', 'json');
  }
  if (!Util.isUnset(tmpReq.topics)) {
    request.topicsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.topics, 'Topics', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSubscriptionMeta', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSubscriptionMeta(request: DescribeSubscriptionMetaRequest): DescribeSubscriptionMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubscriptionMetaWithOptions(request, runtime);
}

model ConfigureSubscriptionRequest {
  regionId?: string(name='RegionId'),
  dtsJobName?: string(name='DtsJobName'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  sourceEndpointOwnerID?: string(name='SourceEndpointOwnerID'),
  sourceEndpointRole?: string(name='SourceEndpointRole'),
  dbList?: string(name='DbList'),
  reserve?: string(name='Reserve'),
  checkpoint?: string(name='Checkpoint'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType'),
  subscriptionInstanceVPCId?: string(name='SubscriptionInstanceVPCId'),
  subscriptionInstanceVSwitchId?: string(name='SubscriptionInstanceVSwitchId'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML'),
  delayPhone?: string(name='DelayPhone'),
  delayRuleTime?: long(name='DelayRuleTime'),
  delayNotice?: boolean(name='DelayNotice'),
  errorPhone?: string(name='ErrorPhone'),
  errorNotice?: boolean(name='ErrorNotice'),
}

model ConfigureSubscriptionResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  dtsJobId?: string(name='DtsJobId'),
  success?: string(name='Success'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionResponseBody(name='body'),
}

async function configureSubscriptionWithOptions(request: ConfigureSubscriptionRequest, runtime: Util.RuntimeOptions): ConfigureSubscriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureSubscription', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureSubscription(request: ConfigureSubscriptionRequest): ConfigureSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSubscriptionWithOptions(request, runtime);
}

model StopMigrationJobRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model StopMigrationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model StopMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopMigrationJobResponseBody(name='body'),
}

async function stopMigrationJobWithOptions(request: StopMigrationJobRequest, runtime: Util.RuntimeOptions): StopMigrationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopMigrationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopMigrationJob(request: StopMigrationJobRequest): StopMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMigrationJobWithOptions(request, runtime);
}

model ModifyConsumerChannelRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dtsJobId?: string(name='DtsJobId'),
  consumerGroupId?: string(name='ConsumerGroupId'),
  consumerGroupPassword?: string(name='ConsumerGroupPassword'),
  consumerGroupUserName?: string(name='ConsumerGroupUserName'),
  consumerGroupName?: string(name='ConsumerGroupName'),
}

model ModifyConsumerChannelResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ModifyConsumerChannelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyConsumerChannelResponseBody(name='body'),
}

async function modifyConsumerChannelWithOptions(request: ModifyConsumerChannelRequest, runtime: Util.RuntimeOptions): ModifyConsumerChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyConsumerChannel', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyConsumerChannel(request: ModifyConsumerChannelRequest): ModifyConsumerChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConsumerChannelWithOptions(request, runtime);
}

model SuspendDtsJobRequest {
  dtsJobId?: string(name='DtsJobId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  regionId?: string(name='RegionId'),
}

model SuspendDtsJobResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model SuspendDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendDtsJobResponseBody(name='body'),
}

async function suspendDtsJobWithOptions(request: SuspendDtsJobRequest, runtime: Util.RuntimeOptions): SuspendDtsJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendDtsJob(request: SuspendDtsJobRequest): SuspendDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendDtsJobWithOptions(request, runtime);
}

model ModifyDtsJobRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  clientToken?: string(name='ClientToken'),
  dbList?: map[string]any(name='DbList'),
  etlOperatorColumnReference?: string(name='EtlOperatorColumnReference'),
}

model ModifyDtsJobShrinkRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  clientToken?: string(name='ClientToken'),
  dbListShrink?: string(name='DbList'),
  etlOperatorColumnReference?: string(name='EtlOperatorColumnReference'),
}

model ModifyDtsJobResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: boolean(name='ErrMessage'),
}

model ModifyDtsJobResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDtsJobResponseBody(name='body'),
}

async function modifyDtsJobWithOptions(tmpReq: ModifyDtsJobRequest, runtime: Util.RuntimeOptions): ModifyDtsJobResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyDtsJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dbList)) {
    request.dbListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dbList, 'DbList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDtsJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDtsJob(request: ModifyDtsJobRequest): ModifyDtsJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDtsJobWithOptions(request, runtime);
}

model IgnoreJobDetailRequest {
  dtsJobId?: string(name='DtsJobId'),
  jobCode?: string(name='JobCode'),
  id?: string(name='Id'),
  regionId?: string(name='RegionId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  dtsInstanceId?: string(name='DtsInstanceId'),
}

model IgnoreJobDetailResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model IgnoreJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreJobDetailResponseBody(name='body'),
}

async function ignoreJobDetailWithOptions(request: IgnoreJobDetailRequest, runtime: Util.RuntimeOptions): IgnoreJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IgnoreJobDetail', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function ignoreJobDetail(request: IgnoreJobDetailRequest): IgnoreJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreJobDetailWithOptions(request, runtime);
}

model DescribeSynchronizationObjectModifyStatusRequest {
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSynchronizationObjectModifyStatusResponseBody = {
  status?: string(name='Status'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dataInitializationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    progress?: string(name='Progress'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    status?: string(name='Status'),
    delay?: string(name='Delay'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
  }(name='DataSynchronizationStatus'),
  precheckStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='Detail'),
  }(name='PrecheckStatus'),
  structureInitializationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    progress?: string(name='Progress'),
  }(name='StructureInitializationStatus'),
}

model DescribeSynchronizationObjectModifyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationObjectModifyStatusResponseBody(name='body'),
}

async function describeSynchronizationObjectModifyStatusWithOptions(request: DescribeSynchronizationObjectModifyStatusRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationObjectModifyStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSynchronizationObjectModifyStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSynchronizationObjectModifyStatus(request: DescribeSynchronizationObjectModifyStatusRequest): DescribeSynchronizationObjectModifyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationObjectModifyStatusWithOptions(request, runtime);
}

model DescribeSynchronizationJobStatusRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeSynchronizationJobStatusResponseBody = {
  synchronizationJobName?: string(name='SynchronizationJobName'),
  status?: string(name='Status'),
  dataInitialization?: string(name='DataInitialization'),
  delay?: string(name='Delay'),
  errorMessage?: string(name='ErrorMessage'),
  expireTime?: string(name='ExpireTime'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  structureInitialization?: string(name='StructureInitialization'),
  payType?: string(name='PayType'),
  errMessage?: string(name='ErrMessage'),
  synchronizationJobClass?: string(name='SynchronizationJobClass'),
  requestId?: string(name='RequestId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  delayMillis?: long(name='DelayMillis'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  taskId?: string(name='TaskId'),
  checkpoint?: string(name='Checkpoint'),
  dataInitializationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    progress?: string(name='Progress'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    status?: string(name='Status'),
    delay?: string(name='Delay'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    delayMillis?: long(name='DelayMillis'),
    checkpoint?: string(name='Checkpoint'),
  }(name='DataSynchronizationStatus'),
  destinationEndpoint?: {
    instanceId?: string(name='InstanceId'),
    IP?: string(name='IP'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    engineName?: string(name='EngineName'),
  }(name='DestinationEndpoint'),
  performance?: {
    RPS?: string(name='RPS'),
    FLOW?: string(name='FLOW'),
  }(name='Performance'),
  precheckStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    detail?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='Detail'),
  }(name='PrecheckStatus'),
  sourceEndpoint?: {
    instanceId?: string(name='InstanceId'),
    IP?: string(name='IP'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    engineName?: string(name='EngineName'),
  }(name='SourceEndpoint'),
  structureInitializationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    progress?: string(name='Progress'),
  }(name='StructureInitializationStatus'),
  synchronizationObjects?: [ 
    {
      newSchemaName?: string(name='NewSchemaName'),
      schemaName?: string(name='SchemaName'),
      tableExcludes?: [ 
        {
          tableName?: string(name='TableName'),
        }
      ](name='TableExcludes'),
      tableIncludes?: [ 
        {
          tableName?: string(name='TableName'),
        }
      ](name='TableIncludes'),
    }
  ](name='SynchronizationObjects'),
}

model DescribeSynchronizationJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynchronizationJobStatusResponseBody(name='body'),
}

async function describeSynchronizationJobStatusWithOptions(request: DescribeSynchronizationJobStatusRequest, runtime: Util.RuntimeOptions): DescribeSynchronizationJobStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSynchronizationJobStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSynchronizationJobStatus(request: DescribeSynchronizationJobStatusRequest): DescribeSynchronizationJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSynchronizationJobStatusWithOptions(request, runtime);
}

model UpgradeTwoWayRequest {
  instanceId?: string(name='InstanceId'),
  instanceClass?: string(name='InstanceClass'),
  regionId?: string(name='RegionId'),
}

model UpgradeTwoWayResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  dynamicMessage?: string(name='DynamicMessage'),
  dynamicCode?: string(name='DynamicCode'),
}

model UpgradeTwoWayResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeTwoWayResponseBody(name='body'),
}

async function upgradeTwoWayWithOptions(request: UpgradeTwoWayRequest, runtime: Util.RuntimeOptions): UpgradeTwoWayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeTwoWay', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeTwoWay(request: UpgradeTwoWayRequest): UpgradeTwoWayResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeTwoWayWithOptions(request, runtime);
}

model ConfigureSubscriptionInstanceRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
    instanceID?: string(name='InstanceID'),
    IP?: string(name='IP'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    password?: string(name='Password'),
    oracleSID?: string(name='OracleSID'),
    databaseName?: string(name='DatabaseName'),
    ownerID?: string(name='OwnerID'),
    role?: string(name='Role'),
  }(name='SourceEndpoint'),
  subscriptionDataType?: {
    DDL?: boolean(name='DDL'),
    DML?: boolean(name='DML'),
  }(name='SubscriptionDataType'),
  subscriptionInstance?: {
    VPCId?: string(name='VPCId'),
    vSwitchId?: string(name='VSwitchId'),
  }(name='SubscriptionInstance'),
  regionId?: string(name='RegionId'),
  subscriptionInstanceId?: string(name='SubscriptionInstanceId'),
  subscriptionInstanceName?: string(name='SubscriptionInstanceName'),
  subscriptionObject?: string(name='SubscriptionObject'),
  subscriptionInstanceNetworkType?: string(name='SubscriptionInstanceNetworkType'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureSubscriptionInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureSubscriptionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureSubscriptionInstanceResponseBody(name='body'),
}

async function configureSubscriptionInstanceWithOptions(request: ConfigureSubscriptionInstanceRequest, runtime: Util.RuntimeOptions): ConfigureSubscriptionInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureSubscriptionInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureSubscriptionInstance(request: ConfigureSubscriptionInstanceRequest): ConfigureSubscriptionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSubscriptionInstanceWithOptions(request, runtime);
}

model DescribeMigrationJobDetailRequest {
  migrationMode?: {
    structureInitialization?: boolean(name='StructureInitialization'),
    dataInitialization?: boolean(name='DataInitialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
  }(name='MigrationMode'),
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNum?: int32(name='PageNum'),
  migrationJobId?: string(name='MigrationJobId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeMigrationJobDetailResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  pageRecordCount?: int32(name='PageRecordCount'),
  success?: string(name='Success'),
  totalRecordCount?: long(name='TotalRecordCount'),
  errMessage?: string(name='ErrMessage'),
  pageNumber?: int32(name='PageNumber'),
  dataInitializationDetailList?: {
    dataInitializationDetail?: [ 
    {
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      errorMessage?: string(name='ErrorMessage'),
      finishRowNum?: string(name='FinishRowNum'),
      migrationTime?: string(name='MigrationTime'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      totalRowNum?: string(name='TotalRowNum'),
    }
  ](name='DataInitializationDetail')
  }(name='DataInitializationDetailList'),
  dataSynchronizationDetailList?: {
    dataSynchronizationDetail?: [ 
    {
      status?: string(name='Status'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      tableName?: string(name='TableName'),
      errorMessage?: string(name='ErrorMessage'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
    }
  ](name='DataSynchronizationDetail')
  }(name='DataSynchronizationDetailList'),
  structureInitializationDetailList?: {
    structureInitializationDetail?: [ 
    {
      status?: string(name='Status'),
      sourceOwnerDBName?: string(name='SourceOwnerDBName'),
      objectDefinition?: string(name='ObjectDefinition'),
      objectType?: string(name='ObjectType'),
      errorMessage?: string(name='ErrorMessage'),
      destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
      objectName?: string(name='ObjectName'),
      constraintList?: {
        structureInitializationDetail?: [ 
        {
          status?: string(name='Status'),
          sourceOwnerDBName?: string(name='SourceOwnerDBName'),
          objectDefinition?: string(name='ObjectDefinition'),
          objectType?: string(name='ObjectType'),
          errorMessage?: string(name='ErrorMessage'),
          destinationOwnerDBName?: string(name='DestinationOwnerDBName'),
          objectName?: string(name='ObjectName'),
        }
      ](name='StructureInitializationDetail')
      }(name='ConstraintList'),
    }
  ](name='StructureInitializationDetail')
  }(name='StructureInitializationDetailList'),
}

model DescribeMigrationJobDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobDetailResponseBody(name='body'),
}

async function describeMigrationJobDetailWithOptions(request: DescribeMigrationJobDetailRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrationJobDetail', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrationJobDetail(request: DescribeMigrationJobDetailRequest): DescribeMigrationJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobDetailWithOptions(request, runtime);
}

model DescribeConnectionStatusRequest {
  sourceEndpointArchitecture?: string(name='SourceEndpointArchitecture'),
  sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion'),
  sourceEndpointIP?: string(name='SourceEndpointIP'),
  sourceEndpointPort?: string(name='SourceEndpointPort'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword'),
  destinationEndpointInstanceType?: string(name='DestinationEndpointInstanceType'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
  destinationEndpointIP?: string(name='DestinationEndpointIP'),
  destinationEndpointPort?: string(name='DestinationEndpointPort'),
  destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID'),
  destinationEndpointArchitecture?: string(name='DestinationEndpointArchitecture'),
  regionId?: string(name='RegionId'),
}

model DescribeConnectionStatusResponseBody = {
  sourceConnectionStatus?: map[string]any(name='SourceConnectionStatus'),
  destinationConnectionStatus?: map[string]any(name='DestinationConnectionStatus'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model DescribeConnectionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConnectionStatusResponseBody(name='body'),
}

async function describeConnectionStatusWithOptions(request: DescribeConnectionStatusRequest, runtime: Util.RuntimeOptions): DescribeConnectionStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConnectionStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConnectionStatus(request: DescribeConnectionStatusRequest): DescribeConnectionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConnectionStatusWithOptions(request, runtime);
}

model ResetSynchronizationJobRequest {
  regionId?: string(name='RegionId'),
  synchronizationJobId?: string(name='SynchronizationJobId'),
  synchronizationDirection?: string(name='SynchronizationDirection'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ResetSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ResetSynchronizationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSynchronizationJobResponseBody(name='body'),
}

async function resetSynchronizationJobWithOptions(request: ResetSynchronizationJobRequest, runtime: Util.RuntimeOptions): ResetSynchronizationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetSynchronizationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetSynchronizationJob(request: ResetSynchronizationJobRequest): ResetSynchronizationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSynchronizationJobWithOptions(request, runtime);
}

model CreateDtsInstanceRequest {
  jobId?: string(name='JobId'),
  instanceClass?: string(name='InstanceClass'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  syncArchitecture?: string(name='SyncArchitecture'),
  autoStart?: boolean(name='AutoStart'),
  usedTime?: int32(name='UsedTime'),
  quantity?: int32(name='Quantity'),
  autoPay?: boolean(name='AutoPay'),
  type?: string(name='Type'),
  databaseCount?: int32(name='DatabaseCount'),
  sourceRegion?: string(name='SourceRegion'),
  destinationRegion?: string(name='DestinationRegion'),
  sourceEndpointEngineName?: string(name='SourceEndpointEngineName'),
  destinationEndpointEngineName?: string(name='DestinationEndpointEngineName'),
  computeUnit?: int32(name='ComputeUnit'),
  regionId?: string(name='RegionId'),
}

model CreateDtsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  jobId?: string(name='JobId'),
  errMessage?: string(name='ErrMessage'),
  instanceId?: string(name='InstanceId'),
}

model CreateDtsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDtsInstanceResponseBody(name='body'),
}

async function createDtsInstanceWithOptions(request: CreateDtsInstanceRequest, runtime: Util.RuntimeOptions): CreateDtsInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDtsInstance', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDtsInstance(request: CreateDtsInstanceRequest): CreateDtsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDtsInstanceWithOptions(request, runtime);
}

model ConfigureMigrationJobRequest {
  sourceEndpoint?: {
    instanceType?: string(name='InstanceType'),
    instanceID?: string(name='InstanceID'),
    engineName?: string(name='EngineName'),
    region?: string(name='Region'),
    IP?: string(name='IP'),
    port?: string(name='Port'),
    oracleSID?: string(name='OracleSID'),
    databaseName?: string(name='DatabaseName'),
    userName?: string(name='UserName'),
    password?: string(name='Password'),
    ownerID?: string(name='OwnerID'),
    role?: string(name='Role'),
  }(name='SourceEndpoint'),
  destinationEndpoint?: {
    instanceType?: string(name='InstanceType'),
    instanceID?: string(name='InstanceID'),
    engineName?: string(name='EngineName'),
    region?: string(name='Region'),
    IP?: string(name='IP'),
    port?: string(name='Port'),
    dataBaseName?: string(name='DataBaseName'),
    userName?: string(name='UserName'),
    password?: string(name='Password'),
    oracleSID?: string(name='OracleSID'),
  }(name='DestinationEndpoint'),
  migrationMode?: {
    structureIntialization?: boolean(name='StructureIntialization'),
    dataIntialization?: boolean(name='DataIntialization'),
    dataSynchronization?: boolean(name='DataSynchronization'),
  }(name='MigrationMode'),
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  migrationJobName?: string(name='MigrationJobName'),
  migrationObject?: string(name='MigrationObject'),
  migrationReserved?: string(name='MigrationReserved'),
  checkpoint?: string(name='Checkpoint'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model ConfigureMigrationJobResponseBody = {
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ConfigureMigrationJobResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureMigrationJobResponseBody(name='body'),
}

async function configureMigrationJobWithOptions(request: ConfigureMigrationJobRequest, runtime: Util.RuntimeOptions): ConfigureMigrationJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigureMigrationJob', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configureMigrationJob(request: ConfigureMigrationJobRequest): ConfigureMigrationJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureMigrationJobWithOptions(request, runtime);
}

model ModifySubscriptionRequest {
  regionId?: string(name='RegionId'),
  dtsInstanceId?: string(name='DtsInstanceId'),
  dbList?: string(name='DbList'),
  dtsJobId?: string(name='DtsJobId'),
  subscriptionDataTypeDDL?: boolean(name='SubscriptionDataTypeDDL'),
  subscriptionDataTypeDML?: boolean(name='SubscriptionDataTypeDML'),
}

model ModifySubscriptionResponseBody = {
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  errMessage?: string(name='ErrMessage'),
}

model ModifySubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySubscriptionResponseBody(name='body'),
}

async function modifySubscriptionWithOptions(request: ModifySubscriptionRequest, runtime: Util.RuntimeOptions): ModifySubscriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySubscription', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySubscription(request: ModifySubscriptionRequest): ModifySubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySubscriptionWithOptions(request, runtime);
}

model CreateJobMonitorRuleRequest {
  dtsJobId?: string(name='DtsJobId'),
  type?: string(name='Type'),
  state?: string(name='State'),
  phone?: string(name='Phone'),
  delayRuleTime?: long(name='DelayRuleTime'),
  regionId?: string(name='RegionId'),
}

model CreateJobMonitorRuleResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  dtsJobId?: string(name='DtsJobId'),
  errCode?: string(name='ErrCode'),
  success?: boolean(name='Success'),
  errMessage?: string(name='ErrMessage'),
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
}

model CreateJobMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobMonitorRuleResponseBody(name='body'),
}

async function createJobMonitorRuleWithOptions(request: CreateJobMonitorRuleRequest, runtime: Util.RuntimeOptions): CreateJobMonitorRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateJobMonitorRule', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createJobMonitorRule(request: CreateJobMonitorRuleRequest): CreateJobMonitorRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobMonitorRuleWithOptions(request, runtime);
}

model DescribeMigrationJobStatusRequest {
  regionId?: string(name='RegionId'),
  migrationJobId?: string(name='MigrationJobId'),
  clientToken?: string(name='ClientToken'),
  ownerId?: string(name='OwnerId'),
  accountId?: string(name='AccountId'),
}

model DescribeMigrationJobStatusResponseBody = {
  requestId?: string(name='RequestId'),
  migrationJobName?: string(name='MigrationJobName'),
  migrationJobStatus?: string(name='MigrationJobStatus'),
  errCode?: string(name='ErrCode'),
  success?: string(name='Success'),
  payType?: string(name='PayType'),
  errMessage?: string(name='ErrMessage'),
  migrationObject?: string(name='MigrationObject'),
  migrationJobId?: string(name='MigrationJobId'),
  taskId?: string(name='TaskId'),
  migrationJobClass?: string(name='MigrationJobClass'),
  dataInitializationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    progress?: string(name='Progress'),
  }(name='DataInitializationStatus'),
  dataSynchronizationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    delay?: string(name='Delay'),
    errorMessage?: string(name='ErrorMessage'),
    checkpoint?: string(name='Checkpoint'),
  }(name='DataSynchronizationStatus'),
  destinationEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    instanceId?: string(name='InstanceId'),
    IP?: string(name='IP'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    oracleSID?: string(name='oracleSID'),
    engineName?: string(name='EngineName'),
  }(name='DestinationEndpoint'),
  migrationMode?: {
    dataInitialization?: boolean(name='dataInitialization'),
    dataSynchronization?: boolean(name='dataSynchronization'),
    structureInitialization?: boolean(name='structureInitialization'),
  }(name='MigrationMode'),
  precheckStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    detail?: {
      checkItem?: [ 
      {
        checkStatus?: string(name='CheckStatus'),
        errorMessage?: string(name='ErrorMessage'),
        itemName?: string(name='ItemName'),
        repairMethod?: string(name='RepairMethod'),
      }
    ](name='CheckItem')
    }(name='Detail'),
  }(name='PrecheckStatus'),
  sourceEndpoint?: {
    databaseName?: string(name='DatabaseName'),
    instanceId?: string(name='InstanceId'),
    IP?: string(name='IP'),
    instanceType?: string(name='InstanceType'),
    port?: string(name='Port'),
    userName?: string(name='UserName'),
    oracleSID?: string(name='oracleSID'),
    engineName?: string(name='EngineName'),
  }(name='SourceEndpoint'),
  structureInitializationStatus?: {
    status?: string(name='Status'),
    percent?: string(name='Percent'),
    errorMessage?: string(name='ErrorMessage'),
    progress?: string(name='Progress'),
  }(name='StructureInitializationStatus'),
}

model DescribeMigrationJobStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMigrationJobStatusResponseBody(name='body'),
}

async function describeMigrationJobStatusWithOptions(request: DescribeMigrationJobStatusRequest, runtime: Util.RuntimeOptions): DescribeMigrationJobStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMigrationJobStatus', '2020-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMigrationJobStatus(request: DescribeMigrationJobStatusRequest): DescribeMigrationJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationJobStatusWithOptions(request, runtime);
}

