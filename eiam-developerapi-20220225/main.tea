/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eiam-developerapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model CreateOrganizationalUnitRequest {
  description?: string(name='description', description='描述'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='机构外部ID'),
  organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
  parentId?: string(name='parentId', description='父机构ID'),
}

model CreateOrganizationalUnitResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
}

model CreateOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrganizationalUnitResponseBody(name='body'),
}

async function createOrganizationalUnit(instanceId: string, applicationId: string, request: CreateOrganizationalUnitRequest): CreateOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateOrganizationalUnitHeaders{};
  return createOrganizationalUnitWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function createOrganizationalUnitWithOptions(instanceId: string, applicationId: string, request: CreateOrganizationalUnitRequest, headers: CreateOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): CreateOrganizationalUnitResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.organizationalUnitExternalId)) {
    body['organizationalUnitExternalId'] = request.organizationalUnitExternalId;
  }
  if (!Util.isUnset(request.organizationalUnitName)) {
    body['organizationalUnitName'] = request.organizationalUnitName;
  }
  if (!Util.isUnset(request.parentId)) {
    body['parentId'] = request.parentId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model CreateUserRequest {
  description?: string(name='description', description='描述'),
  displayName?: string(name='displayName', description='账户展示名'),
  email?: string(name='email', description='邮箱'),
  emailVerified?: boolean(name='emailVerified', description='邮箱是否验证，邮箱若设置此字段必须设置，无特殊业务可直接设置为true'),
  password?: string(name='password', description='密码, 参考密码策略'),
  phoneNumber?: string(name='phoneNumber', description='手机号'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证，手机号若设置此字段必须设置，无特殊业务可直接设置为true'),
  phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +, 手机号若设置，此参数必填'),
  primaryOrganizationalUnitId?: string(name='primaryOrganizationalUnitId', description='账户主机构ID'),
  userExternalId?: string(name='userExternalId', description='账户外部ID'),
  username?: string(name='username', description='账户名'),
}

model CreateUserResponseBody = {
  userId?: string(name='userId', description='账户ID'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(instanceId: string, applicationId: string, request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateUserHeaders{};
  return createUserWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function createUserWithOptions(instanceId: string, applicationId: string, request: CreateUserRequest, headers: CreateUserHeaders, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.emailVerified)) {
    body['emailVerified'] = request.emailVerified;
  }
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['phoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.phoneNumberVerified)) {
    body['phoneNumberVerified'] = request.phoneNumberVerified;
  }
  if (!Util.isUnset(request.phoneRegion)) {
    body['phoneRegion'] = request.phoneRegion;
  }
  if (!Util.isUnset(request.primaryOrganizationalUnitId)) {
    body['primaryOrganizationalUnitId'] = request.primaryOrganizationalUnitId;
  }
  if (!Util.isUnset(request.userExternalId)) {
    body['userExternalId'] = request.userExternalId;
  }
  if (!Util.isUnset(request.username)) {
    body['username'] = request.username;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model DeleteOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteOrganizationalUnit(instanceId: string, applicationId: string, organizationalUnitId: string): DeleteOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteOrganizationalUnitHeaders{};
  return deleteOrganizationalUnitWithOptions(instanceId, applicationId, organizationalUnitId, headers, runtime);
}

async function deleteOrganizationalUnitWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, headers: DeleteOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): DeleteOrganizationalUnitResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  organizationalUnitId = OpenApiUtil.getEncodeParam(organizationalUnitId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'DeleteOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits/${organizationalUnitId}`,
    method = 'DELETE',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model DeleteUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteUser(instanceId: string, applicationId: string, userId: string): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteUserHeaders{};
  return deleteUserWithOptions(instanceId, applicationId, userId, headers, runtime);
}

async function deleteUserWithOptions(instanceId: string, applicationId: string, userId: string, headers: DeleteUserHeaders, runtime: Util.RuntimeOptions): DeleteUserResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  userId = OpenApiUtil.getEncodeParam(userId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users/${userId}`,
    method = 'DELETE',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model GenerateDeviceCodeRequest {
  scope?: string(name='scope', description='scope范围'),
}

model GenerateDeviceCodeResponseBody = {
  deviceCode?: string(name='device_code', description='设备验证码'),
  expiresAt?: long(name='expires_at', description='过期时间'),
  expiresIn?: long(name='expires_in', description='device_code和user_code的有效时长，单位秒'),
  interval?: long(name='interval', description='请求token节点的超时时间，单位秒'),
  userCode?: string(name='user_code', description='终端用户验证码'),
  verificationUri?: string(name='verification_uri', description='验证URI'),
  verificationUriComplete?: string(name='verification_uri_complete', description='包含user_code的完整验证URI'),
}

model GenerateDeviceCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDeviceCodeResponseBody(name='body'),
}

async function generateDeviceCode(instanceId: string, applicationId: string, request: GenerateDeviceCodeRequest): GenerateDeviceCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateDeviceCodeWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function generateDeviceCodeWithOptions(instanceId: string, applicationId: string, request: GenerateDeviceCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateDeviceCodeResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.scope)) {
    query['scope'] = request.scope;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDeviceCode',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/oauth2/device/code`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GenerateTokenRequest {
  clientId?: string(name='client_id'),
  clientSecret?: string(name='client_secret'),
  code?: string(name='code', description='code码'),
  codeVerifier?: string(name='code_verifier', description='验证code'),
  deviceCode?: string(name='device_code', description='设备码'),
  exclusiveTag?: string(name='exclusive_tag', description='排除的tag'),
  grantType?: string(name='grant_type', description='授权类型'),
  password?: string(name='password', description='密码'),
  redirectUri?: string(name='redirect_uri', description='重定向URI'),
  refreshToken?: string(name='refresh_token', description='更新token'),
  scope?: string(name='scope', description='scope范围'),
  username?: string(name='username', description='用户名'),
}

model GenerateTokenResponseBody = {
  accessToken?: string(name='access_token', description='access_token'),
  expiresAt?: long(name='expires_at', description='过期时间'),
  expiresIn?: long(name='expires_in', description='有效时长，单位秒'),
  idToken?: string(name='id_token', description='id_token'),
  refreshToken?: string(name='refresh_token', description='refresh_token'),
  tokenType?: string(name='token_type', description='token类型，包含Basic,Bearer'),
}

model GenerateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateTokenResponseBody(name='body'),
}

async function generateToken(instanceId: string, applicationId: string, request: GenerateTokenRequest): GenerateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateTokenWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function generateTokenWithOptions(instanceId: string, applicationId: string, request: GenerateTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateTokenResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientId)) {
    query['client_id'] = request.clientId;
  }
  if (!Util.isUnset(request.clientSecret)) {
    query['client_secret'] = request.clientSecret;
  }
  if (!Util.isUnset(request.code)) {
    query['code'] = request.code;
  }
  if (!Util.isUnset(request.codeVerifier)) {
    query['code_verifier'] = request.codeVerifier;
  }
  if (!Util.isUnset(request.deviceCode)) {
    query['device_code'] = request.deviceCode;
  }
  if (!Util.isUnset(request.exclusiveTag)) {
    query['exclusive_tag'] = request.exclusiveTag;
  }
  if (!Util.isUnset(request.grantType)) {
    query['grant_type'] = request.grantType;
  }
  if (!Util.isUnset(request.password)) {
    query['password'] = request.password;
  }
  if (!Util.isUnset(request.redirectUri)) {
    query['redirect_uri'] = request.redirectUri;
  }
  if (!Util.isUnset(request.refreshToken)) {
    query['refresh_token'] = request.refreshToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['scope'] = request.scope;
  }
  if (!Util.isUnset(request.username)) {
    query['username'] = request.username;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateToken',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/oauth2/token`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetApplicationProvisioningScopeHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetApplicationProvisioningScopeResponseBody = {
  organizationalUnitIds?: [ string ](name='organizationalUnitIds', description='机构ID列表'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScope(instanceId: string, applicationId: string): GetApplicationProvisioningScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetApplicationProvisioningScopeHeaders{};
  return getApplicationProvisioningScopeWithOptions(instanceId, applicationId, headers, runtime);
}

async function getApplicationProvisioningScopeWithOptions(instanceId: string, applicationId: string, headers: GetApplicationProvisioningScopeHeaders, runtime: Util.RuntimeOptions): GetApplicationProvisioningScopeResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationProvisioningScope',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/provisioningScope`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetOrganizationalUnitResponseBody = {
  createTime?: long(name='createTime', description='创建时间，毫秒'),
  description?: string(name='description', description='描述'),
  instanceId?: string(name='instanceId', description='实例ID'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='外部ID'),
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
  organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
  organizationalUnitSourceId?: string(name='organizationalUnitSourceId', description='来源ID'),
  organizationalUnitSourceType?: string(name='organizationalUnitSourceType', description='来源类型'),
  parentId?: string(name='parentId', description='父机构ID'),
  updateTime?: long(name='updateTime', description='最近一次更新时间，毫秒'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnit(instanceId: string, applicationId: string, organizationalUnitId: string): GetOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOrganizationalUnitHeaders{};
  return getOrganizationalUnitWithOptions(instanceId, applicationId, organizationalUnitId, headers, runtime);
}

async function getOrganizationalUnitWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, headers: GetOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): GetOrganizationalUnitResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  organizationalUnitId = OpenApiUtil.getEncodeParam(organizationalUnitId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits/${organizationalUnitId}`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetOrganizationalUnitIdByExternalIdHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetOrganizationalUnitIdByExternalIdRequest {
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='机构外部ID'),
}

model GetOrganizationalUnitIdByExternalIdResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
}

model GetOrganizationalUnitIdByExternalIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitIdByExternalIdResponseBody(name='body'),
}

async function getOrganizationalUnitIdByExternalId(instanceId: string, applicationId: string, request: GetOrganizationalUnitIdByExternalIdRequest): GetOrganizationalUnitIdByExternalIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOrganizationalUnitIdByExternalIdHeaders{};
  return getOrganizationalUnitIdByExternalIdWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getOrganizationalUnitIdByExternalIdWithOptions(instanceId: string, applicationId: string, request: GetOrganizationalUnitIdByExternalIdRequest, headers: GetOrganizationalUnitIdByExternalIdHeaders, runtime: Util.RuntimeOptions): GetOrganizationalUnitIdByExternalIdResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.organizationalUnitExternalId)) {
    body['organizationalUnitExternalId'] = request.organizationalUnitExternalId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationalUnitIdByExternalId',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits/_/actions/getOrganizationalUnitIdByExternalId`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetUserResponseBody = {
  accountExpireTime?: long(name='accountExpireTime', description='账户过期时间, 毫秒时间'),
  createTime?: long(name='createTime', description='创建时间, 毫秒时间'),
  description?: string(name='description', description='账号描述'),
  displayName?: string(name='displayName', description='显示名'),
  email?: string(name='email', description='邮箱'),
  emailVerified?: boolean(name='emailVerified', description='邮箱是否验证'),
  instanceId?: string(name='instanceId', description='实例ID'),
  lockExpireTime?: long(name='lockExpireTime', description='锁定过期时间, 毫秒时间'),
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
      organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
      primary?: boolean(name='primary', description='是否主机构'),
    }
  ](name='organizationalUnits', description='账户所属组织列表'),
  passwordSet?: boolean(name='passwordSet', description='密码是否已设置'),
  phoneNumber?: string(name='phoneNumber', description='手机号'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证'),
  phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +'),
  primaryOrganizationalUnitId?: string(name='primaryOrganizationalUnitId', description='账户主机构ID'),
  registerTime?: long(name='registerTime'),
  status?: string(name='status', description='账户状态, enabled:启用,disabled:禁用'),
  updateTime?: long(name='updateTime', description='最近一次更新时间, 毫秒时间'),
  userExternalId?: string(name='userExternalId', description='外部ID'),
  userId?: string(name='userId', description='账户ID'),
  userSourceId?: string(name='userSourceId', description='来源ID'),
  userSourceType?: string(name='userSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]'),
  username?: string(name='username', description='账户名'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(instanceId: string, applicationId: string, userId: string): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserHeaders{};
  return getUserWithOptions(instanceId, applicationId, userId, headers, runtime);
}

async function getUserWithOptions(instanceId: string, applicationId: string, userId: string, headers: GetUserHeaders, runtime: Util.RuntimeOptions): GetUserResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  userId = OpenApiUtil.getEncodeParam(userId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users/${userId}`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserIdByExternalIdHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetUserIdByExternalIdRequest {
  userExternalId?: string(name='userExternalId', description='账户外部ID'),
}

model GetUserIdByExternalIdResponseBody = {
  userId?: string(name='userId', description='账户ID'),
}

model GetUserIdByExternalIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserIdByExternalIdResponseBody(name='body'),
}

async function getUserIdByExternalId(instanceId: string, applicationId: string, request: GetUserIdByExternalIdRequest): GetUserIdByExternalIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdByExternalIdHeaders{};
  return getUserIdByExternalIdWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getUserIdByExternalIdWithOptions(instanceId: string, applicationId: string, request: GetUserIdByExternalIdRequest, headers: GetUserIdByExternalIdHeaders, runtime: Util.RuntimeOptions): GetUserIdByExternalIdResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.userExternalId)) {
    body['userExternalId'] = request.userExternalId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserIdByExternalId',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users/_/actions/getUserIdByExternalId`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserInfoHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetUserInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function getUserInfo(instanceId: string, applicationId: string): GetUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserInfoHeaders{};
  return getUserInfoWithOptions(instanceId, applicationId, headers, runtime);
}

async function getUserInfoWithOptions(instanceId: string, applicationId: string, headers: GetUserInfoHeaders, runtime: Util.RuntimeOptions): GetUserInfoResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetUserInfo',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/oauth2/userinfo`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserPasswordPolicyHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model GetUserPasswordPolicyResponseBody = {
  activeCycle?: long(name='activeCycle', description='密码修改周期, 单位毫秒，-1表示永不过期'),
  instanceId?: string(name='instanceId', description='实例ID'),
  minLength?: int32(name='minLength', description='密码最短长度，-1表示不限制'),
  passwordComplexityItem?: {
    containLowerCase?: boolean(name='containLowerCase', description='是否包含小写字母'),
    containNumber?: boolean(name='containNumber', description='是否包含数字'),
    containSpecialChar?: boolean(name='containSpecialChar', description='是否包含特殊字符'),
    containUpperCase?: boolean(name='containUpperCase', description='是否包含大写字母'),
    displayNameCheck?: boolean(name='displayNameCheck', description='是否进行包含显示名检测'),
    emailCheck?: boolean(name='emailCheck', description='是否进行email检测'),
    phoneCheck?: boolean(name='phoneCheck', description='是否进行包含手机号检测'),
    usernameCheck?: boolean(name='usernameCheck', description='是否进行包含用户名检测'),
  }(name='passwordComplexityItem', description='密码复杂项'),
  reservationCount?: int32(name='reservationCount', description='保留最近密码记录数'),
}

model GetUserPasswordPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserPasswordPolicyResponseBody(name='body'),
}

async function getUserPasswordPolicy(instanceId: string, applicationId: string): GetUserPasswordPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserPasswordPolicyHeaders{};
  return getUserPasswordPolicyWithOptions(instanceId, applicationId, headers, runtime);
}

async function getUserPasswordPolicyWithOptions(instanceId: string, applicationId: string, headers: GetUserPasswordPolicyHeaders, runtime: Util.RuntimeOptions): GetUserPasswordPolicyResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetUserPasswordPolicy',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users/_/actions/getUserPasswordPolicy`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOrganizationalUnitParentIdsHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model ListOrganizationalUnitParentIdsResponseBody = {
  parentIds?: [ string ](name='parentIds', description='父机构ID列表，顺序层级从上到下'),
}

model ListOrganizationalUnitParentIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitParentIdsResponseBody(name='body'),
}

async function listOrganizationalUnitParentIds(instanceId: string, applicationId: string, organizationalUnitId: string): ListOrganizationalUnitParentIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListOrganizationalUnitParentIdsHeaders{};
  return listOrganizationalUnitParentIdsWithOptions(instanceId, applicationId, organizationalUnitId, headers, runtime);
}

async function listOrganizationalUnitParentIdsWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, headers: ListOrganizationalUnitParentIdsHeaders, runtime: Util.RuntimeOptions): ListOrganizationalUnitParentIdsResponse {
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  organizationalUnitId = OpenApiUtil.getEncodeParam(organizationalUnitId);
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnitParentIds',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits/${organizationalUnitId}/parentIds`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOrganizationalUnitsHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model ListOrganizationalUnitsRequest {
  pageNumber?: int32(name='pageNumber', description='页码，默认1'),
  pageSize?: int32(name='pageSize', description='单页大小，默认20'),
  parentId?: string(name='parentId', description='父机构ID'),
}

model ListOrganizationalUnitsResponseBody = {
  data?: [ 
    {
      createTime?: long(name='createTime', description='创建时间，毫秒'),
      description?: string(name='description', description='描述'),
      instanceId?: string(name='instanceId', description='实例ID'),
      organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='外部ID'),
      organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
      organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
      organizationalUnitSourceId?: string(name='organizationalUnitSourceId', description='来源ID'),
      organizationalUnitSourceType?: string(name='organizationalUnitSourceType', description='来源类型'),
      parentId?: string(name='parentId', description='父机构ID'),
      updateTime?: long(name='updateTime', description='最近一次更新时间，毫秒'),
    }
  ](name='data'),
  totalCount?: long(name='totalCount', description='记录总数'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnits(instanceId: string, applicationId: string, request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListOrganizationalUnitsHeaders{};
  return listOrganizationalUnitsWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function listOrganizationalUnitsWithOptions(instanceId: string, applicationId: string, request: ListOrganizationalUnitsRequest, headers: ListOrganizationalUnitsHeaders, runtime: Util.RuntimeOptions): ListOrganizationalUnitsResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['parentId'] = request.parentId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnits',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListUsersHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model ListUsersRequest {
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
  pageNumber?: int32(name='pageNumber', description='页码，默认1'),
  pageSize?: int32(name='pageSize', description='单页大小，默认20'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountExpireTime?: long(name='accountExpireTime', description='账户过期时间, 毫秒时间'),
      createTime?: long(name='createTime', description='创建时间, 毫秒时间'),
      description?: string(name='description', description='账号描述'),
      displayName?: string(name='displayName', description='显示名'),
      email?: string(name='email', description='邮箱'),
      emailVerified?: boolean(name='emailVerified', description='邮箱是否验证'),
      instanceId?: string(name='instanceId', description='实例ID'),
      lockExpireTime?: long(name='lockExpireTime', description='锁定过期时间, 毫秒时间'),
      passwordSet?: boolean(name='passwordSet', description='密码是否已设置'),
      phoneNumber?: string(name='phoneNumber', description='手机号'),
      phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证'),
      phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +'),
      registerTime?: long(name='registerTime'),
      status?: string(name='status', description='账户状态, enabled:启用,disabled:禁用'),
      updateTime?: long(name='updateTime', description='最近一次更新时间, 毫秒时间'),
      userExternalId?: string(name='userExternalId', description='外部ID'),
      userId?: string(name='userId', description='账户ID'),
      userSourceId?: string(name='userSourceId', description='来源ID'),
      userSourceType?: string(name='userSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]'),
      username?: string(name='username', description='账户名'),
    }
  ](name='data'),
  totalCount?: long(name='totalCount', description='记录总数'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(instanceId: string, applicationId: string, request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListUsersHeaders{};
  return listUsersWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function listUsersWithOptions(instanceId: string, applicationId: string, request: ListUsersRequest, headers: ListUsersHeaders, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['organizationalUnitId'] = request.organizationalUnitId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PatchOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model PatchOrganizationalUnitRequest {
  description?: string(name='description', description='机构描述'),
  organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
}

model PatchOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function patchOrganizationalUnit(instanceId: string, applicationId: string, organizationalUnitId: string, request: PatchOrganizationalUnitRequest): PatchOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PatchOrganizationalUnitHeaders{};
  return patchOrganizationalUnitWithOptions(instanceId, applicationId, organizationalUnitId, request, headers, runtime);
}

async function patchOrganizationalUnitWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, request: PatchOrganizationalUnitRequest, headers: PatchOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): PatchOrganizationalUnitResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  organizationalUnitId = OpenApiUtil.getEncodeParam(organizationalUnitId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.organizationalUnitName)) {
    body['organizationalUnitName'] = request.organizationalUnitName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PatchOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/organizationalUnits/${organizationalUnitId}`,
    method = 'PATCH',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model PatchUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization', description='认证信息，格式:Bearer access_token'),
}

model PatchUserRequest {
  displayName?: string(name='displayName', description='账户展示名'),
  email?: string(name='email', description='邮箱'),
  emailVerified?: boolean(name='emailVerified', description='邮箱是否验证，邮箱若设置此字段必须设置，无特殊业务可直接设置为true'),
  phoneNumber?: string(name='phoneNumber', description='手机号'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证，手机号若设置此字段必须设置，无特殊业务可直接设置为true'),
  phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +, 手机号若设置，此参数必填'),
  username?: string(name='username', description='账户名'),
}

model PatchUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function patchUser(instanceId: string, applicationId: string, userId: string, request: PatchUserRequest): PatchUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PatchUserHeaders{};
  return patchUserWithOptions(instanceId, applicationId, userId, request, headers, runtime);
}

async function patchUserWithOptions(instanceId: string, applicationId: string, userId: string, request: PatchUserRequest, headers: PatchUserHeaders, runtime: Util.RuntimeOptions): PatchUserResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  userId = OpenApiUtil.getEncodeParam(userId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.emailVerified)) {
    body['emailVerified'] = request.emailVerified;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['phoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.phoneNumberVerified)) {
    body['phoneNumberVerified'] = request.phoneNumberVerified;
  }
  if (!Util.isUnset(request.phoneRegion)) {
    body['phoneRegion'] = request.phoneRegion;
  }
  if (!Util.isUnset(request.username)) {
    body['username'] = request.username;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PatchUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/users/${userId}`,
    method = 'PATCH',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model RevokeTokenRequest {
  clientId?: string(name='client_id'),
  clientSecret?: string(name='client_secret'),
  token?: string(name='token', description='撤销的token'),
  tokenTypeHint?: string(name='token_type_hint', description='token类型'),
}

model RevokeTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function revokeToken(instanceId: string, applicationId: string, request: RevokeTokenRequest): RevokeTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return revokeTokenWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function revokeTokenWithOptions(instanceId: string, applicationId: string, request: RevokeTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RevokeTokenResponse {
  Util.validateModel(request);
  instanceId = OpenApiUtil.getEncodeParam(instanceId);
  applicationId = OpenApiUtil.getEncodeParam(applicationId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientId)) {
    query['client_id'] = request.clientId;
  }
  if (!Util.isUnset(request.clientSecret)) {
    query['client_secret'] = request.clientSecret;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }
  if (!Util.isUnset(request.tokenTypeHint)) {
    query['token_type_hint'] = request.tokenTypeHint;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeToken',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${instanceId}/${applicationId}/oauth2/revoke`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

