/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eiam-developerapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model CreateOrganizationalUnitRequest {
  description?: string(name='description'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId'),
  organizationalUnitName?: string(name='organizationalUnitName'),
  parentId?: string(name='parentId'),
}

model CreateOrganizationalUnitResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId'),
}

model CreateOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrganizationalUnitResponseBody(name='body'),
}

async function createOrganizationalUnit(instanceId: string, applicationId: string, request: CreateOrganizationalUnitRequest): CreateOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateOrganizationalUnitHeaders{};
  return createOrganizationalUnitWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function createOrganizationalUnitWithOptions(instanceId: string, applicationId: string, request: CreateOrganizationalUnitRequest, headers: CreateOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): CreateOrganizationalUnitResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.organizationalUnitExternalId)) {
    body['organizationalUnitExternalId'] = request.organizationalUnitExternalId;
  }
  if (!Util.isUnset(request.organizationalUnitName)) {
    body['organizationalUnitName'] = request.organizationalUnitName;
  }
  if (!Util.isUnset(request.parentId)) {
    body['parentId'] = request.parentId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model CreateUserRequest {
  customFields?: [ 
    {
      fieldName?: string(name='fieldName'),
      fieldValue?: string(name='fieldValue'),
    }
  ](name='customFields'),
  description?: string(name='description'),
  displayName?: string(name='displayName'),
  email?: string(name='email'),
  emailVerified?: boolean(name='emailVerified'),
  password?: string(name='password'),
  passwordInitializationConfig?: {
    passwordForcedUpdateStatus?: string(name='passwordForcedUpdateStatus'),
    passwordInitializationPolicyPriority?: string(name='passwordInitializationPolicyPriority'),
    passwordInitializationType?: string(name='passwordInitializationType'),
    userNotificationChannels?: [ string ](name='userNotificationChannels'),
  }(name='passwordInitializationConfig'),
  phoneNumber?: string(name='phoneNumber'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified'),
  phoneRegion?: string(name='phoneRegion'),
  primaryOrganizationalUnitId?: string(name='primaryOrganizationalUnitId'),
  userExternalId?: string(name='userExternalId'),
  username?: string(name='username'),
}

model CreateUserResponseBody = {
  userId?: string(name='userId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(instanceId: string, applicationId: string, request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateUserHeaders{};
  return createUserWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function createUserWithOptions(instanceId: string, applicationId: string, request: CreateUserRequest, headers: CreateUserHeaders, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customFields)) {
    body['customFields'] = request.customFields;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.emailVerified)) {
    body['emailVerified'] = request.emailVerified;
  }
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInitializationConfig)) {
    body['passwordInitializationConfig'] = request.passwordInitializationConfig;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['phoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.phoneNumberVerified)) {
    body['phoneNumberVerified'] = request.phoneNumberVerified;
  }
  if (!Util.isUnset(request.phoneRegion)) {
    body['phoneRegion'] = request.phoneRegion;
  }
  if (!Util.isUnset(request.primaryOrganizationalUnitId)) {
    body['primaryOrganizationalUnitId'] = request.primaryOrganizationalUnitId;
  }
  if (!Util.isUnset(request.userExternalId)) {
    body['userExternalId'] = request.userExternalId;
  }
  if (!Util.isUnset(request.username)) {
    body['username'] = request.username;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model DeleteOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteOrganizationalUnit(instanceId: string, applicationId: string, organizationalUnitId: string): DeleteOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteOrganizationalUnitHeaders{};
  return deleteOrganizationalUnitWithOptions(instanceId, applicationId, organizationalUnitId, headers, runtime);
}

async function deleteOrganizationalUnitWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, headers: DeleteOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): DeleteOrganizationalUnitResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'DeleteOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits/${OpenApiUtil.getEncodeParam(organizationalUnitId)}`,
    method = 'DELETE',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model DeleteUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteUser(instanceId: string, applicationId: string, userId: string): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteUserHeaders{};
  return deleteUserWithOptions(instanceId, applicationId, userId, headers, runtime);
}

async function deleteUserWithOptions(instanceId: string, applicationId: string, userId: string, headers: DeleteUserHeaders, runtime: Util.RuntimeOptions): DeleteUserResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/${OpenApiUtil.getEncodeParam(userId)}`,
    method = 'DELETE',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model DisableUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model DisableUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function disableUser(instanceId: string, applicationId: string, userId: string): DisableUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DisableUserHeaders{};
  return disableUserWithOptions(instanceId, applicationId, userId, headers, runtime);
}

async function disableUserWithOptions(instanceId: string, applicationId: string, userId: string, headers: DisableUserHeaders, runtime: Util.RuntimeOptions): DisableUserResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'DisableUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/${OpenApiUtil.getEncodeParam(userId)}/actions/disable`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model EnableUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model EnableUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function enableUser(instanceId: string, applicationId: string, userId: string): EnableUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EnableUserHeaders{};
  return enableUserWithOptions(instanceId, applicationId, userId, headers, runtime);
}

async function enableUserWithOptions(instanceId: string, applicationId: string, userId: string, headers: EnableUserHeaders, runtime: Util.RuntimeOptions): EnableUserResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'EnableUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/${OpenApiUtil.getEncodeParam(userId)}/actions/enable`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model GenerateDeviceCodeRequest {
  scope?: string(name='scope'),
}

model GenerateDeviceCodeResponseBody = {
  deviceCode?: string(name='device_code'),
  expiresAt?: long(name='expires_at'),
  expiresIn?: long(name='expires_in'),
  interval?: long(name='interval'),
  userCode?: string(name='user_code'),
  verificationUri?: string(name='verification_uri'),
  verificationUriComplete?: string(name='verification_uri_complete'),
}

model GenerateDeviceCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDeviceCodeResponseBody(name='body'),
}

async function generateDeviceCode(instanceId: string, applicationId: string, request: GenerateDeviceCodeRequest): GenerateDeviceCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateDeviceCodeWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function generateDeviceCodeWithOptions(instanceId: string, applicationId: string, request: GenerateDeviceCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateDeviceCodeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.scope)) {
    query['scope'] = request.scope;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDeviceCode',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/oauth2/device/code`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GenerateTokenRequest {
  clientId?: string(name='client_id'),
  clientSecret?: string(name='client_secret'),
  code?: string(name='code'),
  codeVerifier?: string(name='code_verifier'),
  deviceCode?: string(name='device_code'),
  exclusiveTag?: string(name='exclusive_tag'),
  grantType?: string(name='grant_type'),
  password?: string(name='password'),
  redirectUri?: string(name='redirect_uri'),
  refreshToken?: string(name='refresh_token'),
  scope?: string(name='scope'),
  username?: string(name='username'),
}

model GenerateTokenResponseBody = {
  accessToken?: string(name='access_token'),
  expiresAt?: long(name='expires_at'),
  expiresIn?: long(name='expires_in'),
  idToken?: string(name='id_token'),
  refreshToken?: string(name='refresh_token'),
  tokenType?: string(name='token_type'),
}

model GenerateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateTokenResponseBody(name='body'),
}

async function generateToken(instanceId: string, applicationId: string, request: GenerateTokenRequest): GenerateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateTokenWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function generateTokenWithOptions(instanceId: string, applicationId: string, request: GenerateTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clientId)) {
    query['client_id'] = request.clientId;
  }
  if (!Util.isUnset(request.clientSecret)) {
    query['client_secret'] = request.clientSecret;
  }
  if (!Util.isUnset(request.code)) {
    query['code'] = request.code;
  }
  if (!Util.isUnset(request.codeVerifier)) {
    query['code_verifier'] = request.codeVerifier;
  }
  if (!Util.isUnset(request.deviceCode)) {
    query['device_code'] = request.deviceCode;
  }
  if (!Util.isUnset(request.exclusiveTag)) {
    query['exclusive_tag'] = request.exclusiveTag;
  }
  if (!Util.isUnset(request.grantType)) {
    query['grant_type'] = request.grantType;
  }
  if (!Util.isUnset(request.password)) {
    query['password'] = request.password;
  }
  if (!Util.isUnset(request.redirectUri)) {
    query['redirect_uri'] = request.redirectUri;
  }
  if (!Util.isUnset(request.refreshToken)) {
    query['refresh_token'] = request.refreshToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['scope'] = request.scope;
  }
  if (!Util.isUnset(request.username)) {
    query['username'] = request.username;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateToken',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/oauth2/token`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetApplicationProvisioningScopeHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetApplicationProvisioningScopeResponseBody = {
  organizationalUnitIds?: [ string ](name='organizationalUnitIds'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScope(instanceId: string, applicationId: string): GetApplicationProvisioningScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetApplicationProvisioningScopeHeaders{};
  return getApplicationProvisioningScopeWithOptions(instanceId, applicationId, headers, runtime);
}

async function getApplicationProvisioningScopeWithOptions(instanceId: string, applicationId: string, headers: GetApplicationProvisioningScopeHeaders, runtime: Util.RuntimeOptions): GetApplicationProvisioningScopeResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationProvisioningScope',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/provisioningScope`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetOrganizationalUnitResponseBody = {
  createTime?: long(name='createTime'),
  description?: string(name='description'),
  instanceId?: string(name='instanceId'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId'),
  organizationalUnitId?: string(name='organizationalUnitId'),
  organizationalUnitName?: string(name='organizationalUnitName'),
  organizationalUnitSourceId?: string(name='organizationalUnitSourceId'),
  organizationalUnitSourceType?: string(name='organizationalUnitSourceType'),
  parentId?: string(name='parentId'),
  updateTime?: long(name='updateTime'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnit(instanceId: string, applicationId: string, organizationalUnitId: string): GetOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOrganizationalUnitHeaders{};
  return getOrganizationalUnitWithOptions(instanceId, applicationId, organizationalUnitId, headers, runtime);
}

async function getOrganizationalUnitWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, headers: GetOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): GetOrganizationalUnitResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits/${OpenApiUtil.getEncodeParam(organizationalUnitId)}`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetOrganizationalUnitIdByExternalIdHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetOrganizationalUnitIdByExternalIdRequest {
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId'),
  organizationalUnitSourceId?: string(name='organizationalUnitSourceId'),
  organizationalUnitSourceType?: string(name='organizationalUnitSourceType'),
}

model GetOrganizationalUnitIdByExternalIdResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId'),
}

model GetOrganizationalUnitIdByExternalIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitIdByExternalIdResponseBody(name='body'),
}

async function getOrganizationalUnitIdByExternalId(instanceId: string, applicationId: string, request: GetOrganizationalUnitIdByExternalIdRequest): GetOrganizationalUnitIdByExternalIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetOrganizationalUnitIdByExternalIdHeaders{};
  return getOrganizationalUnitIdByExternalIdWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getOrganizationalUnitIdByExternalIdWithOptions(instanceId: string, applicationId: string, request: GetOrganizationalUnitIdByExternalIdRequest, headers: GetOrganizationalUnitIdByExternalIdHeaders, runtime: Util.RuntimeOptions): GetOrganizationalUnitIdByExternalIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.organizationalUnitExternalId)) {
    body['organizationalUnitExternalId'] = request.organizationalUnitExternalId;
  }
  if (!Util.isUnset(request.organizationalUnitSourceId)) {
    body['organizationalUnitSourceId'] = request.organizationalUnitSourceId;
  }
  if (!Util.isUnset(request.organizationalUnitSourceType)) {
    body['organizationalUnitSourceType'] = request.organizationalUnitSourceType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationalUnitIdByExternalId',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits/_/actions/getOrganizationalUnitIdByExternalId`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetUserResponseBody = {
  accountExpireTime?: long(name='accountExpireTime'),
  createTime?: long(name='createTime'),
  customFields?: [ 
    {
      fieldName?: string(name='fieldName'),
      fieldValue?: string(name='fieldValue'),
    }
  ](name='customFields'),
  description?: string(name='description'),
  displayName?: string(name='displayName'),
  email?: string(name='email'),
  emailVerified?: boolean(name='emailVerified'),
  instanceId?: string(name='instanceId'),
  lockExpireTime?: long(name='lockExpireTime'),
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='organizationalUnitId'),
      organizationalUnitName?: string(name='organizationalUnitName'),
      primary?: boolean(name='primary'),
    }
  ](name='organizationalUnits'),
  passwordSet?: boolean(name='passwordSet'),
  phoneNumber?: string(name='phoneNumber'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified'),
  phoneRegion?: string(name='phoneRegion'),
  primaryOrganizationalUnitId?: string(name='primaryOrganizationalUnitId'),
  registerTime?: long(name='registerTime'),
  status?: string(name='status'),
  updateTime?: long(name='updateTime'),
  userExternalId?: string(name='userExternalId'),
  userId?: string(name='userId'),
  userSourceId?: string(name='userSourceId'),
  userSourceType?: string(name='userSourceType'),
  username?: string(name='username'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(instanceId: string, applicationId: string, userId: string): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserHeaders{};
  return getUserWithOptions(instanceId, applicationId, userId, headers, runtime);
}

async function getUserWithOptions(instanceId: string, applicationId: string, userId: string, headers: GetUserHeaders, runtime: Util.RuntimeOptions): GetUserResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/${OpenApiUtil.getEncodeParam(userId)}`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserIdByEmailHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetUserIdByEmailRequest {
  email?: string(name='email'),
}

model GetUserIdByEmailResponseBody = {
  userId?: string(name='userId'),
}

model GetUserIdByEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserIdByEmailResponseBody(name='body'),
}

async function getUserIdByEmail(instanceId: string, applicationId: string, request: GetUserIdByEmailRequest): GetUserIdByEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdByEmailHeaders{};
  return getUserIdByEmailWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getUserIdByEmailWithOptions(instanceId: string, applicationId: string, request: GetUserIdByEmailRequest, headers: GetUserIdByEmailHeaders, runtime: Util.RuntimeOptions): GetUserIdByEmailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserIdByEmail',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/_/actions/getUserIdByEmail`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserIdByPhoneNumberHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetUserIdByPhoneNumberRequest {
  phoneNumber?: string(name='phoneNumber'),
}

model GetUserIdByPhoneNumberResponseBody = {
  userId?: string(name='userId'),
}

model GetUserIdByPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserIdByPhoneNumberResponseBody(name='body'),
}

async function getUserIdByPhoneNumber(instanceId: string, applicationId: string, request: GetUserIdByPhoneNumberRequest): GetUserIdByPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdByPhoneNumberHeaders{};
  return getUserIdByPhoneNumberWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getUserIdByPhoneNumberWithOptions(instanceId: string, applicationId: string, request: GetUserIdByPhoneNumberRequest, headers: GetUserIdByPhoneNumberHeaders, runtime: Util.RuntimeOptions): GetUserIdByPhoneNumberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.phoneNumber)) {
    body['phoneNumber'] = request.phoneNumber;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserIdByPhoneNumber',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/_/actions/getUserIdByPhoneNumber`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserIdByUserExternalIdHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetUserIdByUserExternalIdRequest {
  userExternalId?: string(name='userExternalId'),
  userSourceId?: string(name='userSourceId'),
  userSourceType?: string(name='userSourceType'),
}

model GetUserIdByUserExternalIdResponseBody = {
  userId?: string(name='userId'),
}

model GetUserIdByUserExternalIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserIdByUserExternalIdResponseBody(name='body'),
}

async function getUserIdByUserExternalId(instanceId: string, applicationId: string, request: GetUserIdByUserExternalIdRequest): GetUserIdByUserExternalIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdByUserExternalIdHeaders{};
  return getUserIdByUserExternalIdWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getUserIdByUserExternalIdWithOptions(instanceId: string, applicationId: string, request: GetUserIdByUserExternalIdRequest, headers: GetUserIdByUserExternalIdHeaders, runtime: Util.RuntimeOptions): GetUserIdByUserExternalIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userExternalId)) {
    body['userExternalId'] = request.userExternalId;
  }
  if (!Util.isUnset(request.userSourceId)) {
    body['userSourceId'] = request.userSourceId;
  }
  if (!Util.isUnset(request.userSourceType)) {
    body['userSourceType'] = request.userSourceType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserIdByUserExternalId',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/_/actions/getUserIdByExternalId`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserIdByUsernameHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetUserIdByUsernameRequest {
  username?: string(name='username'),
}

model GetUserIdByUsernameResponseBody = {
  userId?: string(name='userId'),
}

model GetUserIdByUsernameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserIdByUsernameResponseBody(name='body'),
}

async function getUserIdByUsername(instanceId: string, applicationId: string, request: GetUserIdByUsernameRequest): GetUserIdByUsernameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserIdByUsernameHeaders{};
  return getUserIdByUsernameWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function getUserIdByUsernameWithOptions(instanceId: string, applicationId: string, request: GetUserIdByUsernameRequest, headers: GetUserIdByUsernameHeaders, runtime: Util.RuntimeOptions): GetUserIdByUsernameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.username)) {
    body['username'] = request.username;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserIdByUsername',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/_/actions/getUserIdByUsername`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserInfoHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model GetUserInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function getUserInfo(instanceId: string, applicationId: string): GetUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserInfoHeaders{};
  return getUserInfoWithOptions(instanceId, applicationId, headers, runtime);
}

async function getUserInfoWithOptions(instanceId: string, applicationId: string, headers: GetUserInfoHeaders, runtime: Util.RuntimeOptions): GetUserInfoResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetUserInfo',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/oauth2/userinfo`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOrganizationalUnitParentIdsHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model ListOrganizationalUnitParentIdsResponseBody = {
  parentIds?: [ string ](name='parentIds'),
}

model ListOrganizationalUnitParentIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitParentIdsResponseBody(name='body'),
}

async function listOrganizationalUnitParentIds(instanceId: string, applicationId: string, organizationalUnitId: string): ListOrganizationalUnitParentIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListOrganizationalUnitParentIdsHeaders{};
  return listOrganizationalUnitParentIdsWithOptions(instanceId, applicationId, organizationalUnitId, headers, runtime);
}

async function listOrganizationalUnitParentIdsWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, headers: ListOrganizationalUnitParentIdsHeaders, runtime: Util.RuntimeOptions): ListOrganizationalUnitParentIdsResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnitParentIds',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits/${OpenApiUtil.getEncodeParam(organizationalUnitId)}/parentIds`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListOrganizationalUnitsHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model ListOrganizationalUnitsRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  parentId?: string(name='parentId'),
}

model ListOrganizationalUnitsResponseBody = {
  data?: [ 
    {
      createTime?: long(name='createTime'),
      description?: string(name='description'),
      instanceId?: string(name='instanceId'),
      organizationalUnitExternalId?: string(name='organizationalUnitExternalId'),
      organizationalUnitId?: string(name='organizationalUnitId'),
      organizationalUnitName?: string(name='organizationalUnitName'),
      organizationalUnitSourceId?: string(name='organizationalUnitSourceId'),
      organizationalUnitSourceType?: string(name='organizationalUnitSourceType'),
      parentId?: string(name='parentId'),
      updateTime?: long(name='updateTime'),
    }
  ](name='data'),
  totalCount?: long(name='totalCount'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnits(instanceId: string, applicationId: string, request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListOrganizationalUnitsHeaders{};
  return listOrganizationalUnitsWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function listOrganizationalUnitsWithOptions(instanceId: string, applicationId: string, request: ListOrganizationalUnitsRequest, headers: ListOrganizationalUnitsHeaders, runtime: Util.RuntimeOptions): ListOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['parentId'] = request.parentId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnits',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListUsersHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model ListUsersRequest {
  organizationalUnitId?: string(name='organizationalUnitId'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountExpireTime?: long(name='accountExpireTime'),
      createTime?: long(name='createTime'),
      description?: string(name='description'),
      displayName?: string(name='displayName'),
      email?: string(name='email'),
      emailVerified?: boolean(name='emailVerified'),
      instanceId?: string(name='instanceId'),
      lockExpireTime?: long(name='lockExpireTime'),
      passwordSet?: boolean(name='passwordSet'),
      phoneNumber?: string(name='phoneNumber'),
      phoneNumberVerified?: boolean(name='phoneNumberVerified'),
      phoneRegion?: string(name='phoneRegion'),
      registerTime?: long(name='registerTime'),
      status?: string(name='status'),
      updateTime?: long(name='updateTime'),
      userExternalId?: string(name='userExternalId'),
      userId?: string(name='userId'),
      userSourceId?: string(name='userSourceId'),
      userSourceType?: string(name='userSourceType'),
      username?: string(name='username'),
    }
  ](name='data'),
  totalCount?: long(name='totalCount'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(instanceId: string, applicationId: string, request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListUsersHeaders{};
  return listUsersWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function listUsersWithOptions(instanceId: string, applicationId: string, request: ListUsersRequest, headers: ListUsersHeaders, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['organizationalUnitId'] = request.organizationalUnitId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PatchOrganizationalUnitHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model PatchOrganizationalUnitRequest {
  description?: string(name='description'),
  organizationalUnitName?: string(name='organizationalUnitName'),
}

model PatchOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function patchOrganizationalUnit(instanceId: string, applicationId: string, organizationalUnitId: string, request: PatchOrganizationalUnitRequest): PatchOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PatchOrganizationalUnitHeaders{};
  return patchOrganizationalUnitWithOptions(instanceId, applicationId, organizationalUnitId, request, headers, runtime);
}

async function patchOrganizationalUnitWithOptions(instanceId: string, applicationId: string, organizationalUnitId: string, request: PatchOrganizationalUnitRequest, headers: PatchOrganizationalUnitHeaders, runtime: Util.RuntimeOptions): PatchOrganizationalUnitResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.organizationalUnitName)) {
    body['organizationalUnitName'] = request.organizationalUnitName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PatchOrganizationalUnit',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/organizationalUnits/${OpenApiUtil.getEncodeParam(organizationalUnitId)}`,
    method = 'PATCH',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model PatchUserHeaders {
  commonHeaders?: map[string]string,
  authorization?: string(name='Authorization'),
}

model PatchUserRequest {
  customFields?: [ 
    {
      fieldName?: string(name='fieldName'),
      fieldValue?: string(name='fieldValue'),
      operator?: string(name='operator'),
    }
  ](name='customFields'),
  displayName?: string(name='displayName'),
  email?: string(name='email'),
  emailVerified?: boolean(name='emailVerified'),
  phoneNumber?: string(name='phoneNumber'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified'),
  phoneRegion?: string(name='phoneRegion'),
  username?: string(name='username'),
}

model PatchUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function patchUser(instanceId: string, applicationId: string, userId: string, request: PatchUserRequest): PatchUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PatchUserHeaders{};
  return patchUserWithOptions(instanceId, applicationId, userId, request, headers, runtime);
}

async function patchUserWithOptions(instanceId: string, applicationId: string, userId: string, request: PatchUserRequest, headers: PatchUserHeaders, runtime: Util.RuntimeOptions): PatchUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customFields)) {
    body['customFields'] = request.customFields;
  }
  if (!Util.isUnset(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.emailVerified)) {
    body['emailVerified'] = request.emailVerified;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['phoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.phoneNumberVerified)) {
    body['phoneNumberVerified'] = request.phoneNumberVerified;
  }
  if (!Util.isUnset(request.phoneRegion)) {
    body['phoneRegion'] = request.phoneRegion;
  }
  if (!Util.isUnset(request.username)) {
    body['username'] = request.username;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PatchUser',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/users/${OpenApiUtil.getEncodeParam(userId)}`,
    method = 'PATCH',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model RevokeTokenRequest {
  clientId?: string(name='client_id'),
  clientSecret?: string(name='client_secret'),
  token?: string(name='token'),
  tokenTypeHint?: string(name='token_type_hint'),
}

model RevokeTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function revokeToken(instanceId: string, applicationId: string, request: RevokeTokenRequest): RevokeTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return revokeTokenWithOptions(instanceId, applicationId, request, headers, runtime);
}

async function revokeTokenWithOptions(instanceId: string, applicationId: string, request: RevokeTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RevokeTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clientId)) {
    query['client_id'] = request.clientId;
  }
  if (!Util.isUnset(request.clientSecret)) {
    query['client_secret'] = request.clientSecret;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }
  if (!Util.isUnset(request.tokenTypeHint)) {
    query['token_type_hint'] = request.tokenTypeHint;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeToken',
    version = '2022-02-25',
    protocol = 'HTTPS',
    pathname = `/v2/${OpenApiUtil.getEncodeParam(instanceId)}/${OpenApiUtil.getEncodeParam(applicationId)}/oauth2/revoke`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

