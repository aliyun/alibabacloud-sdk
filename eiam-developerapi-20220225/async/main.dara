/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eiam-developerapi';
  @version = '2022-02-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateOrganizationalUnitRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  description?: string(name='description', description='描述', position='Body'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='机构外部ID', position='Body'),
  organizationalUnitName: string(name='organizationalUnitName', description='机构名称', position='Body'),
  parentId: string(name='parentId', description='父机构ID', position='Body'),
  regionId?: string(name='regionId', position='Host'),
}

model CreateOrganizationalUnitResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
}

model CreateOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrganizationalUnitResponseBody(name='body'),
}

async function createOrganizationalUnit(request: CreateOrganizationalUnitRequest): CreateOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOrganizationalUnit', 'POST', '/v2/{instanceId}/{applicationId}/organizationalUnits', 'json', false, 'json', request);
}

model CreateUserRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  description?: string(name='description', description='描述', position='Body'),
  displayName?: string(name='displayName', description='账户展示名', position='Body'),
  email?: string(name='email', description='邮箱', position='Body'),
  emailVerified?: boolean(name='emailVerified', description='邮箱是否验证，邮箱若设置此字段必须设置，无特殊业务可直接设置为true', position='Body'),
  password?: string(name='password', description='密码, 参考密码策略', position='Body'),
  phoneNumber?: string(name='phoneNumber', description='手机号', position='Body'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证，手机号若设置此字段必须设置，无特殊业务可直接设置为true', position='Body'),
  phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +, 手机号若设置，此参数必填', position='Body'),
  primaryOrganizationalUnitId: string(name='primaryOrganizationalUnitId', description='账户主机构ID', position='Body'),
  userExternalId?: string(name='userExternalId', description='账户外部ID', position='Body'),
  username: string(name='username', description='账户名', position='Body'),
  regionId?: string(name='regionId', position='Host'),
}

model CreateUserResponseBody = {
  userId?: string(name='userId', description='账户ID'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUser', 'POST', '/v2/{instanceId}/{applicationId}/users', 'json', false, 'json', request);
}

model DeleteOrganizationalUnitRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='机构ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model DeleteOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteOrganizationalUnit(request: DeleteOrganizationalUnitRequest): DeleteOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOrganizationalUnit', 'DELETE', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}', 'none', false, 'json', request);
}

model DeleteUserRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  userId: string(name='userId', description='账户ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUser', 'DELETE', '/v2/{instanceId}/{applicationId}/users/{userId}', 'none', false, 'json', request);
}

model GenerateDeviceCodeRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  regionId?: string(name='regionId', position='Host'),
  scope?: string(name='scope', description='scope范围', position='Query'),
}

model GenerateDeviceCodeResponseBody = {
  deviceCode?: string(name='device_code', description='设备验证码'),
  expiresAt?: long(name='expires_at', description='过期时间'),
  expiresIn?: long(name='expires_in', description='device_code和user_code的有效时长，单位秒'),
  interval?: long(name='interval', description='请求token节点的超时时间，单位秒'),
  userCode?: string(name='user_code', description='终端用户验证码'),
  verificationUri?: string(name='verification_uri', description='验证URI'),
  verificationUriComplete?: string(name='verification_uri_complete', description='包含user_code的完整验证URI'),
}

model GenerateDeviceCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateDeviceCodeResponseBody(name='body'),
}

async function generateDeviceCode(request: GenerateDeviceCodeRequest): GenerateDeviceCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateDeviceCode', 'POST', '/v2/{instanceId}/{applicationId}/oauth2/device/code', 'json', false, 'json', request);
}

model GenerateTokenRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  clientId?: string(name='client_id', position='Query'),
  clientSecret?: string(name='client_secret', position='Query'),
  code?: string(name='code', description='code码', position='Query'),
  codeVerifier?: string(name='code_verifier', description='验证code', position='Query'),
  deviceCode?: string(name='device_code', description='设备码', position='Query'),
  exclusiveTag?: string(name='exclusive_tag', description='排除的tag', position='Query'),
  grantType: string(name='grant_type', description='授权类型', position='Query'),
  password?: string(name='password', description='密码', position='Query'),
  redirectUri?: string(name='redirect_uri', description='重定向URI', position='Query'),
  refreshToken?: string(name='refresh_token', description='更新token', position='Query'),
  regionId?: string(name='regionId', position='Host'),
  scope?: string(name='scope', description='scope范围', position='Query'),
  username?: string(name='username', description='用户名', position='Query'),
}

model GenerateTokenResponseBody = {
  accessToken?: string(name='access_token', description='access_token'),
  expiresAt?: long(name='expires_at', description='过期时间'),
  expiresIn?: long(name='expires_in', description='有效时长，单位秒'),
  idToken?: string(name='id_token', description='id_token'),
  refreshToken?: string(name='refresh_token', description='refresh_token'),
  tokenType?: string(name='token_type', description='token类型，包含Basic,Bearer'),
}

model GenerateTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateTokenResponseBody(name='body'),
}

async function generateToken(request: GenerateTokenRequest): GenerateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateToken', 'POST', '/v2/{instanceId}/{applicationId}/oauth2/token', 'json', false, 'json', request);
}

model GetApplicationProvisioningScopeRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model GetApplicationProvisioningScopeResponseBody = {
  organizationalUnitIds?: [ string ](name='organizationalUnitIds', description='机构ID列表'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApplicationProvisioningScope', 'GET', '/v2/{instanceId}/{applicationId}/provisioningScope', 'json', false, 'json', request);
}

model GetOrganizationalUnitRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='机构ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model GetOrganizationalUnitResponseBody = {
  createTime?: long(name='createTime', description='创建时间，毫秒'),
  description?: string(name='description', description='描述'),
  instanceId?: string(name='instanceId', description='实例ID'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='外部ID'),
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
  organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
  organizationalUnitSourceId?: string(name='organizationalUnitSourceId', description='来源ID'),
  organizationalUnitSourceType?: string(name='organizationalUnitSourceType', description='来源类型'),
  parentId?: string(name='parentId', description='父机构ID'),
  updateTime?: long(name='updateTime', description='最近一次更新时间，毫秒'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrganizationalUnit', 'GET', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}', 'json', false, 'json', request);
}

model GetUserRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  userId: string(name='userId', description='账户ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model GetUserResponseBody = {
  accountExpireTime?: long(name='accountExpireTime', description='账户过期时间, 毫秒时间'),
  createTime?: long(name='createTime', description='创建时间, 毫秒时间'),
  description?: string(name='description', description='账号描述'),
  displayName?: string(name='displayName', description='显示名'),
  email?: string(name='email', description='邮箱'),
  emailVerified?: boolean(name='emailVerified', description='邮箱是否验证'),
  instanceId?: string(name='instanceId', description='实例ID'),
  lockExpireTime?: long(name='lockExpireTime', description='锁定过期时间, 毫秒时间'),
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
      organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
      primary?: boolean(name='primary', description='是否主机构'),
    }
  ](name='organizationalUnits', description='账户所属组织列表'),
  passwordSet?: boolean(name='passwordSet', description='密码是否已设置'),
  phoneNumber?: string(name='phoneNumber', description='手机号'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证'),
  phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +'),
  primaryOrganizationalUnitId?: string(name='primaryOrganizationalUnitId', description='账户主机构ID'),
  registerTime?: long(name='registerTime'),
  status?: string(name='status', description='账户状态, enabled:启用,disabled:禁用'),
  updateTime?: long(name='updateTime', description='最近一次更新时间, 毫秒时间'),
  userExternalId?: string(name='userExternalId', description='外部ID'),
  userId?: string(name='userId', description='账户ID'),
  userSourceId?: string(name='userSourceId', description='来源ID'),
  userSourceType?: string(name='userSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]'),
  username?: string(name='username', description='账户名'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'GET', '/v2/{instanceId}/{applicationId}/users/{userId}', 'json', false, 'json', request);
}

model GetUserInfoRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model GetUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function getUserInfo(request: GetUserInfoRequest): GetUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserInfo', 'GET', '/v2/{instanceId}/{applicationId}/oauth2/userinfo', 'json', false, 'json', request);
}

model GetUserPasswordPolicyRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model GetUserPasswordPolicyResponseBody = {
  activeCycle?: long(name='activeCycle', description='密码修改周期, 单位毫秒，-1表示永不过期'),
  instanceId?: string(name='instanceId', description='实例ID'),
  minLength?: int32(name='minLength', description='密码最短长度，-1表示不限制'),
  passwordComplexityItem?: {
    containLowerCase?: boolean(name='containLowerCase', description='是否包含小写字母'),
    containNumber?: boolean(name='containNumber', description='是否包含数字'),
    containSpecialChar?: boolean(name='containSpecialChar', description='是否包含特殊字符'),
    containUpperCase?: boolean(name='containUpperCase', description='是否包含大写字母'),
    displayNameCheck?: boolean(name='displayNameCheck', description='是否进行包含显示名检测'),
    emailCheck?: boolean(name='emailCheck', description='是否进行email检测'),
    phoneCheck?: boolean(name='phoneCheck', description='是否进行包含手机号检测'),
    usernameCheck?: boolean(name='usernameCheck', description='是否进行包含用户名检测'),
  }(name='passwordComplexityItem', description='密码复杂项'),
  reservationCount?: int32(name='reservationCount', description='保留最近密码记录数'),
}

model GetUserPasswordPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserPasswordPolicyResponseBody(name='body'),
}

async function getUserPasswordPolicy(request: GetUserPasswordPolicyRequest): GetUserPasswordPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserPasswordPolicy', 'POST', '/v2/{instanceId}/{applicationId}/users/_/actions/getUserPasswordPolicy', 'json', false, 'json', request);
}

model ListOrganizationalUnitParentIdsRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='机构ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  regionId?: string(name='regionId', position='Host'),
}

model ListOrganizationalUnitParentIdsResponseBody = {
  parentIds?: [ string ](name='parentIds', description='父机构ID列表，顺序层级从上到下'),
}

model ListOrganizationalUnitParentIdsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationalUnitParentIdsResponseBody(name='body'),
}

async function listOrganizationalUnitParentIds(request: ListOrganizationalUnitParentIdsRequest): ListOrganizationalUnitParentIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizationalUnitParentIds', 'GET', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}/parentIds', 'json', false, 'json', request);
}

model ListOrganizationalUnitsRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  pageNumber?: int32(name='pageNumber', description='页码，默认1', position='Query'),
  pageSize?: int32(name='pageSize', description='单页大小，默认20', position='Query'),
  parentId: string(name='parentId', description='父机构ID', position='Query'),
  regionId?: string(name='regionId', position='Host'),
}

model ListOrganizationalUnitsResponseBody = {
  data?: [ 
    {
      createTime?: long(name='createTime', description='创建时间，毫秒'),
      description?: string(name='description', description='描述'),
      instanceId?: string(name='instanceId', description='实例ID'),
      organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='外部ID'),
      organizationalUnitId?: string(name='organizationalUnitId', description='机构ID'),
      organizationalUnitName?: string(name='organizationalUnitName', description='机构名称'),
      organizationalUnitSourceId?: string(name='organizationalUnitSourceId', description='来源ID'),
      organizationalUnitSourceType?: string(name='organizationalUnitSourceType', description='来源类型'),
      parentId?: string(name='parentId', description='父机构ID'),
      updateTime?: long(name='updateTime', description='最近一次更新时间，毫秒'),
    }
  ](name='data'),
  totalCount?: long(name='totalCount', description='记录总数'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizationalUnits', 'GET', '/v2/{instanceId}/{applicationId}/organizationalUnits', 'json', false, 'json', request);
}

model ListUsersRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  organizationalUnitId?: string(name='organizationalUnitId', description='机构ID', position='Query'),
  pageNumber?: int32(name='pageNumber', description='页码，默认1', position='Query'),
  pageSize?: int32(name='pageSize', description='单页大小，默认20', position='Query'),
  regionId?: string(name='regionId', position='Host'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountExpireTime?: long(name='accountExpireTime', description='账户过期时间, 毫秒时间'),
      createTime?: long(name='createTime', description='创建时间, 毫秒时间'),
      description?: string(name='description', description='账号描述'),
      displayName?: string(name='displayName', description='显示名'),
      email?: string(name='email', description='邮箱'),
      emailVerified?: boolean(name='emailVerified', description='邮箱是否验证'),
      instanceId?: string(name='instanceId', description='实例ID'),
      lockExpireTime?: long(name='lockExpireTime', description='锁定过期时间, 毫秒时间'),
      passwordSet?: boolean(name='passwordSet', description='密码是否已设置'),
      phoneNumber?: string(name='phoneNumber', description='手机号'),
      phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证'),
      phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +'),
      registerTime?: long(name='registerTime'),
      status?: string(name='status', description='账户状态, enabled:启用,disabled:禁用'),
      updateTime?: long(name='updateTime', description='最近一次更新时间, 毫秒时间'),
      userExternalId?: string(name='userExternalId', description='外部ID'),
      userId?: string(name='userId', description='账户ID'),
      userSourceId?: string(name='userSourceId', description='来源ID'),
      userSourceType?: string(name='userSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]'),
      username?: string(name='username', description='账户名'),
    }
  ](name='data'),
  totalCount?: long(name='totalCount', description='记录总数'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'GET', '/v2/{instanceId}/{applicationId}/users', 'json', false, 'json', request);
}

model PatchOrganizationalUnitRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='机构ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  description?: string(name='description', description='机构描述', position='Body'),
  organizationalUnitName?: string(name='organizationalUnitName', description='机构名称', position='Body'),
  regionId?: string(name='regionId', position='Host'),
}

model PatchOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
}

async function patchOrganizationalUnit(request: PatchOrganizationalUnitRequest): PatchOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PatchOrganizationalUnit', 'PATCH', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}', 'none', false, 'json', request);
}

model PatchUserRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  userId: string(name='userId', description='账户ID', position='Path'),
  authorization: string(name='Authorization', description='认证信息，格式:Bearer access_token', position='Header'),
  displayName?: string(name='displayName', description='账户展示名', position='Body'),
  email?: string(name='email', description='邮箱', position='Body'),
  emailVerified?: boolean(name='emailVerified', description='邮箱是否验证，邮箱若设置此字段必须设置，无特殊业务可直接设置为true', position='Body'),
  phoneNumber?: string(name='phoneNumber', description='手机号', position='Body'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='手机号是否验证，手机号若设置此字段必须设置，无特殊业务可直接设置为true', position='Body'),
  phoneRegion?: string(name='phoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +, 手机号若设置，此参数必填', position='Body'),
  username?: string(name='username', description='账户名', position='Body'),
  regionId?: string(name='regionId', position='Host'),
}

model PatchUserResponse = {
  headers: map[string]string(name='headers'),
}

async function patchUser(request: PatchUserRequest): PatchUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PatchUser', 'PATCH', '/v2/{instanceId}/{applicationId}/users/{userId}', 'none', false, 'json', request);
}

model RevokeTokenRequest {
  instanceId: string(name='instanceId', description='实例ID', position='Path'),
  applicationId: string(name='applicationId', description='应用ID', position='Path'),
  clientId?: string(name='client_id', position='Query'),
  clientSecret?: string(name='client_secret', position='Query'),
  regionId?: string(name='regionId', position='Host'),
  token: string(name='token', description='撤销的token', position='Query'),
  tokenTypeHint?: string(name='token_type_hint', description='token类型', position='Query'),
}

model RevokeTokenResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function revokeToken(request: RevokeTokenRequest): RevokeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeToken', 'POST', '/v2/{instanceId}/{applicationId}/oauth2/revoke', 'json', false, 'json', request);
}

