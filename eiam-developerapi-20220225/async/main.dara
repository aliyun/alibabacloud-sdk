/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eiam-developerapi';
  @version = '2022-02-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUserToOrganizationalUnitsRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  organizationalUnitIds: [ string ](name='organizationalUnitIds', description='This parameter is required.', example='[ou_wovwffm62xifdziem7an7xxxxx]', position='Body'),
}

model AddUserToOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of AddUserToOrganizationalUnits  AddUserToOrganizationalUnitsRequest
  * @return AddUserToOrganizationalUnitsResponse
 */
async function addUserToOrganizationalUnits(request: AddUserToOrganizationalUnitsRequest): AddUserToOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddUserToOrganizationalUnits', 'POST', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/addUserToOrganizationalUnits', 'none', false, 'json', request);
}

model AddUsersToGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='group_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  userIds: [ string ](name='userIds', description='This parameter is required.', example='[user_d6sbsuumeta4h66ec3il7yxxxx}', position='Body'),
}

model AddUsersToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of AddUsersToGroup  AddUsersToGroupRequest
  * @return AddUsersToGroupResponse
 */
async function addUsersToGroup(request: AddUsersToGroupRequest): AddUsersToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddUsersToGroup', 'POST', '/v2/{instanceId}/{applicationId}/groups/{groupId}/actions/addUsersToGroup', 'none', false, 'json', request);
}

model CreateGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  groupExternalId?: string(name='groupExternalId', example='group_2bo6lefcewdausyyxxxx', position='Body'),
  groupName: string(name='groupName', description='This parameter is required.', example='name001', position='Body'),
}

model CreateGroupResponseBody = {
  groupId?: string(name='groupId', example='group_wovwffm62xifdziem7an7xxxxx'),
}

model CreateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGroup  CreateGroupRequest
  * @return CreateGroupResponse
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGroup', 'POST', '/v2/{instanceId}/{applicationId}/groups', 'json', false, 'json', request);
}

model CreateOrganizationalUnitRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  description?: string(name='description', description='The description of the organizational unit.', example='test organizational unit', position='Body'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used to map external data to the data of the organizational unit in Employee Identity and Access Management (EIAM) of Identity as a Service (IDaaS). By default, the external ID is the organizational unit ID.

For organizational units with the same source type and source ID, each organizational unit has a unique external ID.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Body'),
  organizationalUnitName: string(name='organizationalUnitName', description='The name of the organizational unit.

This parameter is required.', example='name001', position='Body'),
  parentId: string(name='parentId', description='The ID of the parent organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Body'),
}

model CreateOrganizationalUnitResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
}

model CreateOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrganizationalUnit  CreateOrganizationalUnitRequest
  * @return CreateOrganizationalUnitResponse
 */
async function createOrganizationalUnit(request: CreateOrganizationalUnitRequest): CreateOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOrganizationalUnit', 'POST', '/v2/{instanceId}/{applicationId}/organizationalUnits', 'json', false, 'json', request);
}

model CreateUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  customFields?: [ 
    {
      fieldName?: string(name='fieldName', description='Field name', example='age'),
      fieldValue?: string(name='fieldValue', description='Filed value', example='fieldValue_001'),
    }
  ](name='customFields', description='Custom fields', position='Body'),
  description?: string(name='description', description='The description of the account. The description can be up to 256 characters in length.', example='test user', position='Body'),
  displayName?: string(name='displayName', description='The display name of the account. The display name can be up to 64 characters in length.', example='display_name001', position='Body'),
  email?: string(name='email', description='The email address of the user who owns the account.', example='example@example.com', position='Body'),
  emailVerified?: boolean(name='emailVerified', description='Indicates whether the email address is verified. This field is required if an email address is specified. If you have no special requirement, set this parameter to true.', example='true', position='Body'),
  password?: string(name='password', description='The password of the account. For information about the password rules, go to the Create User panel in the Identity as a Service (IDaaS) console.', example='xxxxx', position='Body'),
  passwordInitializationConfig?: {
    passwordForcedUpdateStatus?: string(name='passwordForcedUpdateStatus', description='Password  forced update', example='enabled'),
    passwordInitializationPolicyPriority?: string(name='passwordInitializationPolicyPriority', description='Password policy', example='global'),
    passwordInitializationType?: string(name='passwordInitializationType', description='Password Initialization Type', example='random'),
    userNotificationChannels?: [ string ](name='userNotificationChannels', description='User Notification Channels', example='sms'),
  }(name='passwordInitializationConfig', description='Configure the initial password', position='Body'),
  phoneNumber?: string(name='phoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx', position='Body'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='Indicates whether the mobile number is verified. This field is required if a mobile number is specified. If you have no special requirement, set this parameter to true.', example='true', position='Body'),
  phoneRegion?: string(name='phoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +. This parameter is required if a mobile number is specified.', example='86', position='Body'),
  primaryOrganizationalUnitId: string(name='primaryOrganizationalUnitId', description='The ID of the primary organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Body'),
  userExternalId?: string(name='userExternalId', description='The external ID of the account. The external ID can be used to map external data to the data of the account in EIAM of Identity as a Service (IDaaS). By default, the external ID is the account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Body'),
  username: string(name='username', description='The username of the account.

This parameter is required.', example='name001', position='Body'),
}

model CreateUserResponseBody = {
  userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUser  CreateUserRequest
  * @return CreateUserResponse
 */
async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUser', 'POST', '/v2/{instanceId}/{applicationId}/users', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='group_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
}

model DeleteGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteGroup  DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGroup', 'DELETE', '/v2/{instanceId}/{applicationId}/groups/{groupId}', 'none', false, 'json', request);
}

model DeleteOrganizationalUnitRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='The ID of the organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
}

model DeleteOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteOrganizationalUnit  DeleteOrganizationalUnitRequest
  * @return DeleteOrganizationalUnitResponse
 */
async function deleteOrganizationalUnit(request: DeleteOrganizationalUnitRequest): DeleteOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOrganizationalUnit', 'DELETE', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}', 'none', false, 'json', request);
}

model DeleteUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteUser  DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUser', 'DELETE', '/v2/{instanceId}/{applicationId}/users/{userId}', 'none', false, 'json', request);
}

model DisableUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='The account ID.

This parameter is required.', example='user_001', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer xxxx', position='Header'),
}

model DisableUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DisableUser  DisableUserRequest
  * @return DisableUserResponse
 */
async function disableUser(request: DisableUserRequest): DisableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableUser', 'POST', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/disable', 'none', false, 'json', request);
}

model EnableUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='The account ID.

This parameter is required.', example='user_001', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer xxxx', position='Header'),
}

model EnableUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of EnableUser  EnableUserRequest
  * @return EnableUserResponse
 */
async function enableUser(request: EnableUserRequest): EnableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableUser', 'POST', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/enable', 'none', false, 'json', request);
}

model GenerateDeviceCodeRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  scope?: string(name='scope', description='The authorization scope.', example='xxx', position='Query'),
}

model GenerateDeviceCodeResponseBody = {
  deviceCode?: string(name='device_code', description='The device code.', example='xxxxx'),
  expiresAt?: long(name='expires_at', description='The time when the token expires. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1653288641'),
  expiresIn?: long(name='expires_in', description='The remaining validity period of the device code. Unit: seconds.', example='1200'),
  interval?: long(name='interval', description='The timeout period of the request token. Unit: seconds.', example='5'),
  userCode?: string(name='user_code', description='The user authorization code.', example='xxxxx'),
  verificationUri?: string(name='verification_uri', description='The verification URI.', example='https://example.com/authorize/device'),
  verificationUriComplete?: string(name='verification_uri_complete', description='The complete verification URI.', example='https://example.com/authorize/device?user_code=
xxxx'),
}

model GenerateDeviceCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateDeviceCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateDeviceCode  GenerateDeviceCodeRequest
  * @return GenerateDeviceCodeResponse
 */
async function generateDeviceCode(request: GenerateDeviceCodeRequest): GenerateDeviceCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateDeviceCode', 'POST', '/v2/{instanceId}/{applicationId}/oauth2/device/code', 'json', false, 'json', request);
}

model GenerateTokenRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  clientId?: string(name='client_id', description='The client ID.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Query'),
  clientSecret?: string(name='client_secret', description='The client secret. This parameter is required if grant_type is set to client_credentials.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx', position='Query'),
  code?: string(name='code', description='The authorization code. This parameter is required if grant_type is set to authorization_code.', example='xxxx', position='Query'),
  codeVerifier?: string(name='code_verifier', description='The verification code.', example='xxx', position='Query'),
  deviceCode?: string(name='device_code', description='The device code. This parameter is required if grant_type is set to authorization_code.urn:ietf:params:oauth:grant-type:device_code.', example='xxxx', position='Query'),
  exclusiveTag?: string(name='exclusive_tag', description='The excluded tags.', example='ATxxx', position='Query'),
  grantType: string(name='grant_type', description='The authorization type. Valid values:

*
*
*
*
*

<!---->

*   authorization_code
*   urn:ietf:params:oauth:grant-type:device_code
*   refresh_token
*   client_credentials: You must specify the client_id and client_secret parameters.
*   password: This option is not supported.

This parameter is required.', example='client_credentials', position='Query'),
  password?: string(name='password', description='The username. This parameter is required if grant_type is set to password. The password authentication type is not supported.', example='xxxxxx', position='Query'),
  redirectUri?: string(name='redirect_uri', description='The redirect URI. This parameter is required if grant_type is set to authorization_code. The value of this parameter must be the same as the redirect URI in the request to obtain the authorization code.', example='xxx', position='Query'),
  refreshToken?: string(name='refresh_token', description='The refreshed token. This parameter is required if grant_type is set to refresh_token.', example='ATxxx', position='Query'),
  scope?: string(name='scope', description='The authorization scope. Valid values:

*   openid
*   email
*   phone
*   profile', example='xxxx', position='Query'),
  username?: string(name='username', description='The username. This parameter is required if grant_type is set to password. The password authentication type is not supported.', example='uesrname_001', position='Query'),
}

model GenerateTokenResponseBody = {
  accessToken?: string(name='access_token', description='The access token.', example='ATxxx'),
  expiresAt?: long(name='expires_at', description='The time when the token expires. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1653288641'),
  expiresIn?: long(name='expires_in', description='The remaining validity period of the token. Unit: seconds.', example='1200'),
  idToken?: string(name='id_token', description='The ID token.', example='xxxxx'),
  refreshToken?: string(name='refresh_token', description='The refresh token.', example='RTxxx'),
  tokenType?: string(name='token_type', description='The type of the token. Valid values: Basic Bearer', example='Bearer'),
}

model GenerateTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateTokenResponseBody(name='body'),
}

/**
  * @description > 
  * *   The following authorization types are supported: authorization code, device code, refresh token, and client credentials.
  * @param request  the request parameters of GenerateToken  GenerateTokenRequest
  * @return GenerateTokenResponse
 */
async function generateToken(request: GenerateTokenRequest): GenerateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateToken', 'POST', '/v2/{instanceId}/{applicationId}/oauth2/token', 'json', false, 'json', request);
}

model GetApplicationProvisioningScopeRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
}

model GetApplicationProvisioningScopeResponseBody = {
  groupIds?: [ string ](name='groupIds'),
  organizationalUnitIds?: [ string ](name='organizationalUnitIds', description='The IDs of organizational units.', example='[ou_xxx001]'),
}

model GetApplicationProvisioningScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationProvisioningScopeResponseBody(name='body'),
}

/**
  * @description > 
  * *   You can go to the Applications page in the IDaaS console to set the synchronization scope. After an application is created, the application has the permission to call this operation by default.
  * @param request  the request parameters of GetApplicationProvisioningScope  GetApplicationProvisioningScopeRequest
  * @return GetApplicationProvisioningScopeResponse
 */
async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApplicationProvisioningScope', 'GET', '/v2/{instanceId}/{applicationId}/provisioningScope', 'json', false, 'json', request);
}

model GetGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='group_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
}

model GetGroupResponseBody = {
  createTime?: long(name='createTime', example='1652085686179'),
  description?: string(name='description', example='description_demo'),
  groupExternalId?: string(name='groupExternalId', example='group_ufdsasn35ea5lmthk267xxxxx'),
  groupId?: string(name='groupId', example='group_ufdsasn35ea5lmthk267xxxxx'),
  groupName?: string(name='groupName', example='name_test'),
  groupSourceId?: string(name='groupSourceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  groupSourceType?: string(name='groupSourceType', example='build_in'),
  instanceId?: string(name='instanceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  updateTime?: long(name='updateTime', example='1652085686179'),
}

model GetGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGroup  GetGroupRequest
  * @return GetGroupResponse
 */
async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGroup', 'GET', '/v2/{instanceId}/{applicationId}/groups/{groupId}', 'json', false, 'json', request);
}

model GetOrganizationalUnitRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='The ID of the organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
}

model GetOrganizationalUnitResponseBody = {
  createTime?: long(name='createTime', description='The time when the organizational unit was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652083425923'),
  description?: string(name='description', description='The description of the organizational unit.', example='xxxxx'),
  instanceId?: string(name='instanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='The external ID of the organizational unit.', example='id_wovwffm62xifdziem7an7xxxxx'),
  organizationalUnitId?: string(name='organizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
  organizationalUnitName?: string(name='organizationalUnitName', description='The name of the organizational unit.', example='name001'),
  organizationalUnitSourceId?: string(name='organizationalUnitSourceId', description='The source ID of the organizational unit.', example='id_wovwffm62xifdziem7an7xxxxx'),
  organizationalUnitSourceType?: string(name='organizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in Identity as a Service (IDaaS).
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
  parentId?: string(name='parentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
  updateTime?: long(name='updateTime', description='The time when the organizational unit was last updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652083425923'),
}

model GetOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrganizationalUnit  GetOrganizationalUnitRequest
  * @return GetOrganizationalUnitResponse
 */
async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrganizationalUnit', 'GET', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}', 'json', false, 'json', request);
}

model GetOrganizationalUnitIdByExternalIdRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  organizationalUnitExternalId: string(name='organizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used to map external data to the data of the organizational unit in Employee Identity and Access Management (EIAM) of Identity as a Service (IDaaS). By default, the external ID is the organizational unit ID.

Note: For organizational units with the same source type and source ID, each organizational unit has a unique external ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Body'),
  organizationalUnitSourceId: string(name='organizationalUnitSourceId', description='The source ID of the organizational unit.

If the organizational unit was created in IDaaS, its source ID is the ID of the IDaaS instance. If the organizational unit was imported, its source ID is the enterprise ID in the source. For example, if the organizational unit was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Body'),
  organizationalUnitSourceType: string(name='organizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in IDaaS.
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.

This parameter is required.', example='build_in', position='Body'),
}

model GetOrganizationalUnitIdByExternalIdResponseBody = {
  organizationalUnitId?: string(name='organizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
}

model GetOrganizationalUnitIdByExternalIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrganizationalUnitIdByExternalIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrganizationalUnitIdByExternalId  GetOrganizationalUnitIdByExternalIdRequest
  * @return GetOrganizationalUnitIdByExternalIdResponse
 */
async function getOrganizationalUnitIdByExternalId(request: GetOrganizationalUnitIdByExternalIdRequest): GetOrganizationalUnitIdByExternalIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrganizationalUnitIdByExternalId', 'POST', '/v2/{instanceId}/{applicationId}/organizationalUnits/_/actions/getOrganizationalUnitIdByExternalId', 'json', false, 'json', request);
}

model GetUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
}

model GetUserResponseBody = {
  accountExpireTime?: long(name='accountExpireTime', description='The time when the account expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  createTime?: long(name='createTime', description='The time when the account was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  customFields?: [ 
    {
      fieldName?: string(name='fieldName', description='The name of the extended field.', example='xxxx'),
      fieldValue?: string(name='fieldValue', description='The value of the extended field. Field values are returned as strings regardless of the data types of the fields. For example, true or false is returned for a Boolean field.', example='字段数据值'),
    }
  ](name='customFields', description='The extended fields of the account.'),
  description?: string(name='description', description='The description of the account.', example='xxxx'),
  displayName?: string(name='displayName', description='The display name of the account.', example='display_name001'),
  email?: string(name='email', description='The email address of the user.', example='example@example.com'),
  emailVerified?: boolean(name='emailVerified', description='Indicates whether the email address has been verified. A value of true indicates that the email address has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the email address has not been verified.', example='true'),
  groups?: [ 
    {
      description?: string(name='description', description='组描述。', example='description_demo'),
      groupId?: string(name='groupId', description='组ID。', example='group_ufdsasn35ea5lmthk267xxxxx'),
      groupName?: string(name='groupName', description='组名称。', example='name_test'),
    }
  ](name='groups', description='账户所属组列表。'),
  instanceId?: string(name='instanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  lockExpireTime?: long(name='lockExpireTime', description='The time when the account lock expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='organizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitName?: string(name='organizationalUnitName', description='The name of the organizational unit.', example='name001'),
      primary?: boolean(name='primary', description='Indicates whether the organizational unit is the primary organizational unit.', example='true'),
    }
  ](name='organizationalUnits', description='The organizational units to which the account belongs.'),
  passwordSet?: boolean(name='passwordSet', description='Indicates whether the password is set.', example='true'),
  phoneNumber?: string(name='phoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='Indicates whether the mobile number has been verified. A value of true indicates that the mobile number has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the mobile number has not been verified.', example='true'),
  phoneRegion?: string(name='phoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86'),
  primaryOrganizationalUnitId?: string(name='primaryOrganizationalUnitId', description='The ID of the primary organizational unit of the account.', example='ou_wovwffm62xifdziem7an7xxxxx'),
  registerTime?: long(name='registerTime', description='The time when the account was registered. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  status?: string(name='status', description='The status of the account. Valid values: enabled disabled', example='enabled'),
  updateTime?: long(name='updateTime', description='The time when the account was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  userExternalId?: string(name='userExternalId', description='The external ID of the account. The external ID can be used to map external data to the data of the account in EIAM of Identity as a Service (IDaaS). By default, the external ID is the account ID.

Note: For accounts with the same source type and source ID, each account has a unique external ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
  userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
  userSourceId?: string(name='userSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  userSourceType?: string(name='userSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
  username?: string(name='username', description='The username of the account.', example='name001'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'GET', '/v2/{instanceId}/{applicationId}/users/{userId}', 'json', false, 'json', request);
}

model GetUserIdByEmailRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  email: string(name='email', description='The email address of the user who owns the account.

This parameter is required.', example='example@example.com', position='Body'),
}

model GetUserIdByEmailResponseBody = {
  userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model GetUserIdByEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserIdByEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserIdByEmail  GetUserIdByEmailRequest
  * @return GetUserIdByEmailResponse
 */
async function getUserIdByEmail(request: GetUserIdByEmailRequest): GetUserIdByEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserIdByEmail', 'POST', '/v2/{instanceId}/{applicationId}/users/_/actions/getUserIdByEmail', 'json', false, 'json', request);
}

model GetUserIdByPhoneNumberRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  phoneNumber: string(name='phoneNumber', description='The mobile number of the user who owns the account.

This parameter is required.', example='156xxxxxxx', position='Body'),
}

model GetUserIdByPhoneNumberResponseBody = {
  userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model GetUserIdByPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserIdByPhoneNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserIdByPhoneNumber  GetUserIdByPhoneNumberRequest
  * @return GetUserIdByPhoneNumberResponse
 */
async function getUserIdByPhoneNumber(request: GetUserIdByPhoneNumberRequest): GetUserIdByPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserIdByPhoneNumber', 'POST', '/v2/{instanceId}/{applicationId}/users/_/actions/getUserIdByPhoneNumber', 'json', false, 'json', request);
}

model GetUserIdByUserExternalIdRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  userExternalId: string(name='userExternalId', description='The external ID of the account.

This parameter is required.', example='xxx001', position='Body'),
  userSourceId: string(name='userSourceId', description='The source ID of the account. If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Body'),
  userSourceType: string(name='userSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in Identity as a Service (IDaaS).
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.

This parameter is required.', example='build_in', position='Body'),
}

model GetUserIdByUserExternalIdResponseBody = {
  userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model GetUserIdByUserExternalIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserIdByUserExternalIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserIdByUserExternalId  GetUserIdByUserExternalIdRequest
  * @return GetUserIdByUserExternalIdResponse
 */
async function getUserIdByUserExternalId(request: GetUserIdByUserExternalIdRequest): GetUserIdByUserExternalIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserIdByUserExternalId', 'POST', '/v2/{instanceId}/{applicationId}/users/_/actions/getUserIdByExternalId', 'json', false, 'json', request);
}

model GetUserIdByUsernameRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer xxxx', position='Header'),
  username: string(name='username', description='The username of the account.

This parameter is required.', example='username_001', position='Body'),
}

model GetUserIdByUsernameResponseBody = {
  userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model GetUserIdByUsernameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserIdByUsernameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserIdByUsername  GetUserIdByUsernameRequest
  * @return GetUserIdByUsernameResponse
 */
async function getUserIdByUsername(request: GetUserIdByUsernameRequest): GetUserIdByUsernameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserIdByUsername', 'POST', '/v2/{instanceId}/{applicationId}/users/_/actions/getUserIdByUsername', 'json', false, 'json', request);
}

model GetUserInfoRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer xxxx', position='Header'),
}

model GetUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: map[string]any(name='body'),
}

/**
  * @param request  the request parameters of GetUserInfo  GetUserInfoRequest
  * @return GetUserInfoResponse
 */
async function getUserInfo(request: GetUserInfoRequest): GetUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserInfo', 'GET', '/v2/{instanceId}/{applicationId}/oauth2/userinfo', 'json', false, 'json', request);
}

model ListGroupsRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  groupNameStartWith?: string(name='groupNameStartWith', example='group_xxx', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='nextToken', example='NTxxx', position='Query'),
}

model ListGroupsResponseBody = {
  data?: [ 
    {
      createTime?: long(name='createTime', example='1652085686179'),
      description?: string(name='description', example='description_demo'),
      groupExternalId?: string(name='groupExternalId', example='group_ufdsasn35ea5lmthk267xxxxx'),
      groupId?: string(name='groupId', example='group_ufdsasn35ea5lmthk267xxxxx'),
      groupName?: string(name='groupName', example='name_test'),
      groupSourceId?: string(name='groupSourceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      groupSourceType?: string(name='groupSourceType', example='build_in'),
      instanceId?: string(name='instanceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      updateTime?: long(name='updateTime', example='1652085686179'),
    }
  ](name='data'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='NTxxx'),
  totalCount?: long(name='totalCount', example='1000'),
}

model ListGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroups  ListGroupsRequest
  * @return ListGroupsResponse
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroups', 'GET', '/v2/{instanceId}/{applicationId}/groups', 'json', false, 'json', request);
}

model ListGroupsForUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='nextToken', example='NTxxx', position='Query'),
}

model ListGroupsForUserResponseBody = {
  data?: [ 
    {
      groupId?: string(name='groupId', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      groupMemberRelationSourceId?: string(name='groupMemberRelationSourceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      groupMemberRelationSourceType?: string(name='groupMemberRelationSourceType', example='build_in'),
      instanceId?: string(name='instanceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    }
  ](name='data'),
  maxResults?: long(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='NTxxx'),
  totalCount?: long(name='totalCount', example='1000'),
}

model ListGroupsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroupsForUser  ListGroupsForUserRequest
  * @return ListGroupsForUserResponse
 */
async function listGroupsForUser(request: ListGroupsForUserRequest): ListGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroupsForUser', 'GET', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/listGroupsForUser', 'json', false, 'json', request);
}

model ListOrganizationalUnitParentIdsRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='The ID of the organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
}

model ListOrganizationalUnitParentIdsResponseBody = {
  parentIds?: [ string ](name='parentIds', description='The IDs of the parent organizational units. The IDs of the organizational unit are ordered based on their levels from high to low. Only the IDs of the organizational units within the authorization scope are displayed.', example='[ou_xxx001]'),
}

model ListOrganizationalUnitParentIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationalUnitParentIdsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationalUnitParentIds  ListOrganizationalUnitParentIdsRequest
  * @return ListOrganizationalUnitParentIdsResponse
 */
async function listOrganizationalUnitParentIds(request: ListOrganizationalUnitParentIdsRequest): ListOrganizationalUnitParentIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizationalUnitParentIds', 'GET', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}/parentIds', 'json', false, 'json', request);
}

model ListOrganizationalUnitsRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  pageNumber?: int32(name='pageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 100.', example='20', position='Query'),
  parentId: string(name='parentId', description='The ID of the parent organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
}

model ListOrganizationalUnitsResponseBody = {
  data?: [ 
    {
      createTime?: long(name='createTime', description='The time when the organizational unit was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652083425923'),
      description?: string(name='description', description='The description of the organizational unit.', example='test organizational unit'),
      instanceId?: string(name='instanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      organizationalUnitExternalId?: string(name='organizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used to map external data to the data of the organizational unit in EIAM of Identity as a Service (IDaaS). By default, the external ID is the organizational unit ID.

Note: For organizational units with the same source type and source ID, each organizational unit has a unique external ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitId?: string(name='organizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitName?: string(name='organizationalUnitName', description='The name of the organizational unit.', example='name001'),
      organizationalUnitSourceId?: string(name='organizationalUnitSourceId', description='The source ID of the organizational unit.

If the organizational unit was created in IDaaS, its source ID is the ID of the IDaaS instance. If the organizational unit was imported, its source ID is the enterprise ID in the source. For example, if the organizational unit was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      organizationalUnitSourceType?: string(name='organizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in IDaaS.
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
      parentId?: string(name='parentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      updateTime?: long(name='updateTime', description='The time when the organizational unit was last updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652083425923'),
    }
  ](name='data', description='The queried organizational units.'),
  totalCount?: long(name='totalCount', description='The total number of entries returned.', example='1000'),
}

model ListOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationalUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationalUnits  ListOrganizationalUnitsRequest
  * @return ListOrganizationalUnitsResponse
 */
async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOrganizationalUnits', 'GET', '/v2/{instanceId}/{applicationId}/organizationalUnits', 'json', false, 'json', request);
}

model ListUsersRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  organizationalUnitId?: string(name='organizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
  pageNumber?: int32(name='pageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 100.', example='20', position='Query'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountExpireTime?: long(name='accountExpireTime', description='The time when the account expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      createTime?: long(name='createTime', description='The time when the account was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      description?: string(name='description', example='xxxx'),
      displayName?: string(name='displayName', description='The display name of the account.', example='display_name001'),
      email?: string(name='email', description='The email address of the user who owns the account.', example='example@example.com'),
      emailVerified?: boolean(name='emailVerified', description='Indicates whether the email address has been verified. A value of true indicates that the email address has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the email address has not been verified.', example='true'),
      instanceId?: string(name='instanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lockExpireTime?: long(name='lockExpireTime', description='The time when the account lock expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      passwordSet?: boolean(name='passwordSet', description='密码是否已设置', example='true'),
      phoneNumber?: string(name='phoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx'),
      phoneNumberVerified?: boolean(name='phoneNumberVerified', description='Indicates whether the mobile number has been verified. A value of true indicates that the mobile number has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the mobile number has not been verified.', example='true'),
      phoneRegion?: string(name='phoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86'),
      registerTime?: long(name='registerTime', description='The time when the account was registered. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      status?: string(name='status', description='The status of the account. Valid values: enabled disabled', example='enabled'),
      updateTime?: long(name='updateTime', description='The time when the account was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      userExternalId?: string(name='userExternalId', description='The external ID of the account. The external ID can be used to map external data to the data of the account in EIAM of Identity as a Service (IDaaS). By default, the external ID is the account ID.

Note: For accounts with the same source type and source ID, each account has a unique external ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userId?: string(name='userId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userSourceId?: string(name='userSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      userSourceType?: string(name='userSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
      username?: string(name='username', description='The username of the account.', example='name001'),
    }
  ](name='data', description='The queried EIAM accounts.'),
  totalCount?: long(name='totalCount', description='The total number of entries returned.', example='1000'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'GET', '/v2/{instanceId}/{applicationId}/users', 'json', false, 'json', request);
}

model ListUsersForGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='group_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', description='nextToken', example='NTxxx', position='Query'),
}

model ListUsersForGroupResponseBody = {
  data?: [ 
    {
      instanceId?: string(name='instanceId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      userId?: string(name='userId', example='user_001'),
    }
  ](name='data'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='NTxxx'),
  totalCount?: long(name='totalCount', example='1000'),
}

model ListUsersForGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersForGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsersForGroup  ListUsersForGroupRequest
  * @return ListUsersForGroupResponse
 */
async function listUsersForGroup(request: ListUsersForGroupRequest): ListUsersForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsersForGroup', 'GET', '/v2/{instanceId}/{applicationId}/groups/{groupId}/actions/listUsersForGroup', 'json', false, 'json', request);
}

model PatchGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='group_xxx001', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  groupName?: string(name='groupName', example='name001', position='Body'),
}

model PatchGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of PatchGroup  PatchGroupRequest
  * @return PatchGroupResponse
 */
async function patchGroup(request: PatchGroupRequest): PatchGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PatchGroup', 'PATCH', '/v2/{instanceId}/{applicationId}/groups/{groupId}', 'none', false, 'json', request);
}

model PatchOrganizationalUnitRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  organizationalUnitId: string(name='organizationalUnitId', description='The ID of the organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  description?: string(name='description', description='The description of the organizational unit.', example='test organizational unit', position='Body'),
  organizationalUnitName?: string(name='organizationalUnitName', description='The name of the organizational unit.', example='name001', position='Body'),
}

model PatchOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description The operation conforms to the HTTP PATCH request method. The value of a parameter is modified only if the parameter is specified in the request.
  * @param request  the request parameters of PatchOrganizationalUnit  PatchOrganizationalUnitRequest
  * @return PatchOrganizationalUnitResponse
 */
async function patchOrganizationalUnit(request: PatchOrganizationalUnitRequest): PatchOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PatchOrganizationalUnit', 'PATCH', '/v2/{instanceId}/{applicationId}/organizationalUnits/{organizationalUnitId}', 'none', false, 'json', request);
}

model PatchUserRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='The authentication information. Format: Bearer ${access_token}. Example: Bearer ATxxxx.

This parameter is required.', example='Bearer AT8csE2seYxxxxxij', position='Header'),
  customFields?: [ 
    {
      fieldName?: string(name='fieldName', example='age'),
      fieldValue?: string(name='fieldValue', example='test_value'),
      operation?: string(name='operation', description='字段操作类型，取值可选范围：
- add：添加。
- replace：替换。若对应扩展字段无设置值，会转换为add操作。
- remove：移除。', example='replace'),
      operator?: string(name='operator', example='replace', deprecated='true'),
    }
  ](name='customFields', position='Body'),
  displayName?: string(name='displayName', description='The display name of the account.', example='display_name001', position='Body'),
  email?: string(name='email', description='The email address of the user who owns the account.', example='example@example.com', position='Body'),
  emailVerified?: boolean(name='emailVerified', description='Indicates whether the email address is verified. This field is required if an email address is specified. If you have no special requirement, set this parameter to true.', example='true', position='Body'),
  phoneNumber?: string(name='phoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx', position='Body'),
  phoneNumberVerified?: boolean(name='phoneNumberVerified', description='Indicates whether the mobile number is verified. This field is required if a mobile number is specified. If you have no special requirement, set this parameter to true.', example='true', position='Body'),
  phoneRegion?: string(name='phoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +. This parameter is required if a mobile number is specified.', example='86', position='Body'),
  username?: string(name='username', description='The username of the account.', example='name001', position='Body'),
}

model PatchUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description The operation conforms to the HTTP PATCH request method. The value of a parameter is modified only if the parameter is specified in the request.
  * @param request  the request parameters of PatchUser  PatchUserRequest
  * @return PatchUserResponse
 */
async function patchUser(request: PatchUserRequest): PatchUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PatchUser', 'PATCH', '/v2/{instanceId}/{applicationId}/users/{userId}', 'none', false, 'json', request);
}

model RemoveUserFromOrganizationalUnitsRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  organizationalUnitIds: [ string ](name='organizationalUnitIds', description='This parameter is required.', example='[ou_wovwffm62xifdziem7an7xxxxx]', position='Body'),
}

model RemoveUserFromOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of RemoveUserFromOrganizationalUnits  RemoveUserFromOrganizationalUnitsRequest
  * @return RemoveUserFromOrganizationalUnitsResponse
 */
async function removeUserFromOrganizationalUnits(request: RemoveUserFromOrganizationalUnitsRequest): RemoveUserFromOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveUserFromOrganizationalUnits', 'POST', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/removeUserFromOrganizationalUnits', 'none', false, 'json', request);
}

model RemoveUsersFromGroupRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='group_wovwffm62xifdziem7an7xxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  userIds: [ string ](name='userIds', description='This parameter is required.', example='[user_d6sbsuumeta4h66ec3il7yxxxx}', position='Body'),
}

model RemoveUsersFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of RemoveUsersFromGroup  RemoveUsersFromGroupRequest
  * @return RemoveUsersFromGroupResponse
 */
async function removeUsersFromGroup(request: RemoveUsersFromGroupRequest): RemoveUsersFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveUsersFromGroup', 'POST', '/v2/{instanceId}/{applicationId}/groups/{groupId}/actions/removeUsersFromGroup', 'none', false, 'json', request);
}

model RevokeTokenRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  clientId?: string(name='client_id', description='The client ID.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Query'),
  clientSecret?: string(name='client_secret', description='The client secret.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx', position='Query'),
  token: string(name='token', description='The token to be revoked.

This parameter is required.', example='ATxxxx', position='Query'),
  tokenTypeHint?: string(name='token_type_hint', description='The type of the token. Valid values: access_token refresh_token', example='access_token', position='Query'),
}

model RevokeTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: map[string]any(name='body'),
}

/**
  * @param request  the request parameters of RevokeToken  RevokeTokenRequest
  * @return RevokeTokenResponse
 */
async function revokeToken(request: RevokeTokenRequest): RevokeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeToken', 'POST', '/v2/{instanceId}/{applicationId}/oauth2/revoke', 'json', false, 'json', request);
}

model SetUserPrimaryOrganizationalUnitRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  organizationalUnitId: string(name='organizationalUnitId', description='This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Body'),
}

model SetUserPrimaryOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of SetUserPrimaryOrganizationalUnit  SetUserPrimaryOrganizationalUnitRequest
  * @return SetUserPrimaryOrganizationalUnitResponse
 */
async function setUserPrimaryOrganizationalUnit(request: SetUserPrimaryOrganizationalUnitRequest): SetUserPrimaryOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetUserPrimaryOrganizationalUnit', 'POST', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/setUserPrimaryOrganizationalUnit', 'none', false, 'json', request);
}

model UpdateUserPasswordRequest {
  regionId?: string(name='regionId', position='Host'),
  instanceId: string(name='instanceId', description='This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', position='Path'),
  applicationId: string(name='applicationId', description='This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Path'),
  userId: string(name='userId', description='This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Path'),
  authorization: string(name='Authorization', description='This parameter is required.', example='Bearer xxxx', position='Header'),
  password?: string(name='password', example='xxxx', position='Body'),
}

model UpdateUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateUserPassword  UpdateUserPasswordRequest
  * @return UpdateUserPasswordResponse
 */
async function updateUserPassword(request: UpdateUserPasswordRequest): UpdateUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUserPassword', 'POST', '/v2/{instanceId}/{applicationId}/users/{userId}/actions/updateUserPassword', 'none', false, 'json', request);
}

