/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OpenSearch';
  @version = '2017-12-25';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BindESUserAnalyzerRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  esInstanceId: string(name='esInstanceId', position='Path'),
}

model BindESUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model BindESUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: BindESUserAnalyzerResponseBody(name='body'),
}

async function bindESUserAnalyzer(request: BindESUserAnalyzerRequest): BindESUserAnalyzerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BindESUserAnalyzer', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/es/{esInstanceId}/actions/bind-analyzer', 'json', false, 'json', request);
}

model BindEsInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model BindEsInstanceResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model BindEsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindEsInstanceResponseBody(name='body'),
}

async function bindEsInstance(request: BindEsInstanceRequest): BindEsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BindEsInstance', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/actions/bind-es-instance', 'json', false, 'json', request);
}

model CompileSortScriptRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  appVersionId?: string(name='appVersionId', position='Path'),
}

model CompileSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model CompileSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CompileSortScriptResponseBody(name='body'),
}

async function compileSortScript(request: CompileSortScriptRequest): CompileSortScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CompileSortScript', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}/actions/compiling', 'json', false, 'json', request);
}

model CreateABTestExperimentRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
}

model CreateABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestExperimentResponseBody(name='body'),
}

async function createABTestExperiment(request: CreateABTestExperimentRequest): CreateABTestExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateABTestExperiment', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments', 'json', false, 'json', request);
}

model CreateABTestGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId?: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
}

model CreateABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestGroupResponseBody(name='body'),
}

async function createABTestGroup(request: CreateABTestGroupRequest): CreateABTestGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateABTestGroup', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups', 'json', false, 'json', request);
}

model CreateABTestSceneRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model CreateABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    values?: [ string ](name='values'),
  }(name='result'),
}

model CreateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestSceneResponseBody(name='body'),
}

async function createABTestScene(request: CreateABTestSceneRequest): CreateABTestSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateABTestScene', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/scenes', 'json', false, 'json', request);
}

model CreateAppRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model CreateAppResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApp', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps', 'json', false, 'json', request);
}

model CreateAppGroupRequest {
}

model CreateAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    domain?: string(name='domain'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppGroupResponseBody(name='body'),
}

async function createAppGroup(request: CreateAppGroupRequest): CreateAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAppGroup', 'POST', '/v4/openapi/app-groups', 'json', false, 'json', request);
}

model CreateDataCollectionRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model CreateDataCollectionResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    dataCollectionType?: string(name='dataCollectionType'),
    id?: string(name='id'),
    industryName?: string(name='industryName'),
    name?: string(name='name'),
    status?: int32(name='status'),
    sundialId?: string(name='sundialId'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCollectionResponseBody(name='body'),
}

async function createDataCollection(request: CreateDataCollectionRequest): CreateDataCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataCollection', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/data-collections', 'json', false, 'json', request);
}

model CreateFirstRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model CreateFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model CreateFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFirstRankResponseBody(name='body'),
}

async function createFirstRank(request: CreateFirstRankRequest): CreateFirstRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFirstRank', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/first-ranks', 'json', false, 'json', request);
}

model CreateFunctionInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  functionName: string(name='functionName', position='Path'),
  createParameters?: [ 
    {
      name?: string(name='name', description='参数名称'),
      value?: string(name='value', description='参数值'),
    }
  ](name='createParameters', description='实例的参数列表', position='Body'),
  cron?: string(name='cron', description='Cron表达式', position='Body'),
  description?: string(name='description', description='实例描述', position='Body'),
  functionType?: string(name='functionType', description='功能类型', position='Body'),
  instanceName?: string(name='instanceName', description='实例名称', position='Body'),
  modelType: string(name='modelType', description='模型类型', position='Body'),
}

model CreateFunctionInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionInstanceResponseBody(name='body'),
}

async function createFunctionInstance(request: CreateFunctionInstanceRequest): CreateFunctionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFunctionInstance', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances', 'json', false, 'json', request);
}

model CreateFunctionTaskRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  functionName: string(name='functionName', position='Path'),
  instanceName: string(name='instanceName', position='Path'),
}

model CreateFunctionTaskResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateFunctionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFunctionTaskResponseBody(name='body'),
}

async function createFunctionTask(request: CreateFunctionTaskRequest): CreateFunctionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateFunctionTask', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances/{instanceName}/tasks', 'json', false, 'json', request);
}

model CreateInterventionDictionaryRequest {
}

model CreateInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    name?: string(name='name'),
    type?: string(name='type'),
    updated?: string(name='updated'),
  }(name='result'),
}

model CreateInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInterventionDictionaryResponseBody(name='body'),
}

async function createInterventionDictionary(request: CreateInterventionDictionaryRequest): CreateInterventionDictionaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInterventionDictionary', 'POST', '/v4/openapi/intervention-dictionaries', 'json', false, 'json', request);
}

model CreateModelRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model CreateModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModel', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models', 'json', false, 'json', request);
}

model CreateQueryProcessorRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model CreateQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    name?: string(name='name'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQueryProcessorResponseBody(name='body'),
}

async function createQueryProcessor(request: CreateQueryProcessorRequest): CreateQueryProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateQueryProcessor', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/query-processors', 'json', false, 'json', request);
}

model CreateScheduledTaskRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model CreateScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduledTaskResponseBody(name='body'),
}

async function createScheduledTask(request: CreateScheduledTaskRequest): CreateScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScheduledTask', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/scheduled-tasks', 'json', false, 'json', request);
}

model CreateSearchStrategyRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
}

model CreateSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model CreateSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSearchStrategyResponseBody(name='body'),
}

async function createSearchStrategy(request: CreateSearchStrategyRequest): CreateSearchStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSearchStrategy', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/search-strategies', 'json', false, 'json', request);
}

model CreateSecondRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model CreateSecondRankResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model CreateSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecondRankResponseBody(name='body'),
}

async function createSecondRank(request: CreateSecondRankRequest): CreateSecondRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSecondRank', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/second-ranks', 'json', false, 'json', request);
}

model CreateSortScriptRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
}

model CreateSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model CreateSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSortScriptResponseBody(name='body'),
}

async function createSortScript(request: CreateSortScriptRequest): CreateSortScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSortScript', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts', 'json', false, 'json', request);
}

model CreateUserAnalyzerRequest {
}

model CreateUserAnalyzerResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model CreateUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserAnalyzerResponseBody(name='body'),
}

async function createUserAnalyzer(request: CreateUserAnalyzerRequest): CreateUserAnalyzerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUserAnalyzer', 'POST', '/v4/openapi/user-analyzers', 'json', false, 'json', request);
}

model DeleteABTestExperimentRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
  experimentId: int32(name='experimentId', minimum=-1, maximum=999999999, position='Path'),
}

model DeleteABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestExperimentResponseBody(name='body'),
}

async function deleteABTestExperiment(request: DeleteABTestExperimentRequest): DeleteABTestExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteABTestExperiment', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments/{experimentId}', 'json', false, 'json', request);
}

model DeleteABTestGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
}

model DeleteABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestGroupResponseBody(name='body'),
}

async function deleteABTestGroup(request: DeleteABTestGroupRequest): DeleteABTestGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteABTestGroup', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}', 'json', false, 'json', request);
}

model DeleteABTestSceneRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
}

model DeleteABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestSceneResponseBody(name='body'),
}

async function deleteABTestScene(request: DeleteABTestSceneRequest): DeleteABTestSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteABTestScene', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}', 'json', false, 'json', request);
}

model DeleteFunctionInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', description='opensearch应用名', position='Path'),
  functionName: string(name='functionName', description='功能名称', position='Path'),
  instanceName: string(name='instanceName', description='实例名称', position='Path'),
}

model DeleteFunctionInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFunctionInstanceResponseBody(name='body'),
}

async function deleteFunctionInstance(request: DeleteFunctionInstanceRequest): DeleteFunctionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFunctionInstance', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances/{instanceName}', 'json', false, 'json', request);
}

model DeleteModelRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model DeleteModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModel', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}', 'json', false, 'json', request);
}

model DeleteSortScriptRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
}

model DeleteSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSortScriptResponseBody(name='body'),
}

async function deleteSortScript(request: DeleteSortScriptRequest): DeleteSortScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSortScript', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}', 'json', false, 'json', request);
}

model DeleteSortScriptFileRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  fileName: string(name='fileName', position='Path'),
}

model DeleteSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSortScriptFileResponseBody(name='body'),
}

async function deleteSortScriptFile(request: DeleteSortScriptFileRequest): DeleteSortScriptFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSortScriptFile', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}/files/src/{fileName}', 'json', false, 'json', request);
}

model DescribeABTestExperimentRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
  experimentId: int32(name='experimentId', minimum=-1, maximum=999999999, position='Path'),
}

model DescribeABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: {
      firstFormulaName?: string(name='first_formula_name'),
    }(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestExperimentResponseBody(name='body'),
}

async function describeABTestExperiment(request: DescribeABTestExperimentRequest): DescribeABTestExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeABTestExperiment', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments/{experimentId}', 'json', false, 'json', request);
}

model DescribeABTestGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
}

model DescribeABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestGroupResponseBody(name='body'),
}

async function describeABTestGroup(request: DescribeABTestGroupRequest): DescribeABTestGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeABTestGroup', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}', 'json', false, 'json', request);
}

model DescribeABTestSceneRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
}

model DescribeABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    values?: [ string ](name='values'),
  }(name='result'),
}

model DescribeABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestSceneResponseBody(name='body'),
}

async function describeABTestScene(request: DescribeABTestSceneRequest): DescribeABTestSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeABTestScene', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}', 'json', false, 'json', request);
}

model DescribeAppRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
}

model DescribeAppResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    algoDeploymentId?: int32(name='algoDeploymentId'),
    autoSwitch?: boolean(name='autoSwitch'),
    clusterName?: string(name='clusterName'),
    created?: int32(name='created'),
    description?: string(name='description'),
    domain?: {
      category?: string(name='category'),
      functions?: {
        algo?: [ string ](name='algo'),
        qp?: [ string ](name='qp'),
        service?: [ string ](name='service'),
      }(name='functions'),
      name?: string(name='name'),
    }(name='domain'),
    fetchFields?: [ string ](name='fetchFields'),
    id?: string(name='id'),
    progressPercent?: int32(name='progressPercent'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      qps?: int32(name='qps'),
      spec?: string(name='spec'),
    }(name='quota'),
    schema?: map[string]any(name='schema'),
    status?: string(name='status'),
    type?: string(name='type'),
  }(name='result'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeApp', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}', 'json', false, 'json', request);
}

model DescribeAppGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model DescribeAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    domain?: string(name='domain'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupResponseBody(name='body'),
}

async function describeAppGroup(request: DescribeAppGroupRequest): DescribeAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppGroup', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}', 'json', false, 'json', request);
}

model DescribeAppGroupDataReportRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  endTime: string(name='endTime', position='Query'),
  startTime: string(name='startTime', position='Query'),
}

model DescribeAppGroupDataReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    receivedCount?: int32(name='receivedCount'),
    receivedSample?: [ 
      {
        message?: {
          arg1?: string(name='arg1'),
          arg3?: string(name='arg3'),
          args?: string(name='args'),
          clientIp?: string(name='clientIp'),
          eventId?: int32(name='eventId'),
          page?: string(name='page'),
          sdkType?: string(name='sdkType'),
          sdkVersion?: string(name='sdkVersion'),
          sessionId?: string(name='sessionId'),
          userId?: string(name='userId'),
        }(name='message'),
        receivedTimeMs?: long(name='receivedTimeMs'),
      }
    ](name='receivedSample'),
  }(name='result'),
}

model DescribeAppGroupDataReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupDataReportResponseBody(name='body'),
}

async function describeAppGroupDataReport(request: DescribeAppGroupDataReportRequest): DescribeAppGroupDataReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppGroupDataReport', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/data-report', 'json', false, 'json', request);
}

model DescribeAppGroupStatisticsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model DescribeAppGroupStatisticsResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeAppGroupStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupStatisticsResponseBody(name='body'),
}

async function describeAppGroupStatistics(request: DescribeAppGroupStatisticsRequest): DescribeAppGroupStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppGroupStatistics', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/statistics', 'json', false, 'json', request);
}

model DescribeAppStatisticsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
}

model DescribeAppStatisticsResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeAppStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppStatisticsResponseBody(name='body'),
}

async function describeAppStatistics(request: DescribeAppStatisticsRequest): DescribeAppStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppStatistics', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/statistics', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model DescribeAppsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeApps', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps', 'json', false, 'json', request);
}

model DescribeDataCollctionRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  dataCollectionIdentity: string(name='dataCollectionIdentity', position='Path'),
}

model DescribeDataCollctionResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    dataCollectionType?: string(name='dataCollectionType'),
    id?: string(name='id'),
    industryName?: string(name='industryName'),
    name?: string(name='name'),
    status?: int32(name='status'),
    sundialId?: string(name='sundialId'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeDataCollctionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCollctionResponseBody(name='body'),
}

async function describeDataCollction(request: DescribeDataCollctionRequest): DescribeDataCollctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDataCollction', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/data-collections/{dataCollectionIdentity}', 'json', false, 'json', request);
}

model DescribeFirstRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
}

model DescribeFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model DescribeFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFirstRankResponseBody(name='body'),
}

async function describeFirstRank(request: DescribeFirstRankRequest): DescribeFirstRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeFirstRank', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/first-ranks/{name}', 'json', false, 'json', request);
}

model DescribeInterventionDictionaryRequest {
  name: string(name='name', position='Path'),
}

model DescribeInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    name?: string(name='name'),
    type?: string(name='type'),
    updated?: string(name='updated'),
  }(name='result'),
}

model DescribeInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInterventionDictionaryResponseBody(name='body'),
}

async function describeInterventionDictionary(request: DescribeInterventionDictionaryRequest): DescribeInterventionDictionaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeInterventionDictionary', 'GET', '/v4/openapi/intervention-dictionaries/{name}', 'json', false, 'json', request);
}

model DescribeModelRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model DescribeModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeModelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelResponseBody(name='body'),
}

async function describeModel(request: DescribeModelRequest): DescribeModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeModel', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}', 'json', false, 'json', request);
}

model DescribeQueryProcessorRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
}

model DescribeQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    name?: string(name='name'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeQueryProcessorResponseBody(name='body'),
}

async function describeQueryProcessor(request: DescribeQueryProcessorRequest): DescribeQueryProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeQueryProcessor', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/query-processors/{name}', 'json', false, 'json', request);
}

model DescribeRegionRequest {
}

model DescribeRegionResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    config?: map[string]any(name='config'),
    regionId?: string(name='regionId'),
  }(name='result'),
}

model DescribeRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionResponseBody(name='body'),
}

async function describeRegion(request: DescribeRegionRequest): DescribeRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegion', 'GET', '/v4/openapi/region', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      consoleUrl?: string(name='consoleUrl'),
      endpoint?: string(name='endpoint'),
      localName?: string(name='localName'),
      regionId?: string(name='regionId'),
    }
  ](name='result'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/v4/openapi/regions', 'json', false, 'json', request);
}

model DescribeScheduledTaskRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  taskId: string(name='taskId', position='Path'),
}

model DescribeScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduledTaskResponseBody(name='body'),
}

async function describeScheduledTask(request: DescribeScheduledTaskRequest): DescribeScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeScheduledTask', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scheduled-tasks/{taskId}', 'json', false, 'json', request);
}

model DescribeSecondRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
}

model DescribeSecondRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    description?: string(name='description'),
    id?: string(name='id'),
    isDefault?: string(name='isDefault'),
    isSys?: string(name='isSys'),
    meta?: string(name='meta'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecondRankResponseBody(name='body'),
}

async function describeSecondRank(request: DescribeSecondRankRequest): DescribeSecondRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSecondRank', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/second-ranks/{name}', 'json', false, 'json', request);
}

model DescribeSlowQueryStatusRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model DescribeSlowQueryStatusResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    appGroupId?: string(name='appGroupId'),
    region?: string(name='region'),
    status?: string(name='status'),
  }(name='result'),
}

model DescribeSlowQueryStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowQueryStatusResponseBody(name='body'),
}

async function describeSlowQueryStatus(request: DescribeSlowQueryStatusRequest): DescribeSlowQueryStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSlowQueryStatus', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/optimizers/slow-query', 'json', false, 'json', request);
}

model DescribeUserAnalyzerRequest {
  name: string(name='name', position='Path'),
  with?: string(name='with', position='Query'),
}

model DescribeUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserAnalyzerResponseBody(name='body'),
}

async function describeUserAnalyzer(request: DescribeUserAnalyzerRequest): DescribeUserAnalyzerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserAnalyzer', 'GET', '/v4/openapi/user-analyzers/{name}', 'json', false, 'json', request);
}

model DisableSlowQueryRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model DisableSlowQueryResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DisableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSlowQueryResponseBody(name='body'),
}

async function disableSlowQuery(request: DisableSlowQueryRequest): DisableSlowQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableSlowQuery', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/optimizers/slow-query/actions/disable', 'json', false, 'json', request);
}

model EnableSlowQueryRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model EnableSlowQueryResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model EnableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSlowQueryResponseBody(name='body'),
}

async function enableSlowQuery(request: EnableSlowQueryRequest): EnableSlowQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableSlowQuery', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/optimizers/slow-query/actions/enable', 'json', false, 'json', request);
}

model GenerateMergedTableRequest {
  spec?: string(name='spec', position='Query'),
}

model GenerateMergedTableResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    fromTable?: map[string]any(name='fromTable'),
    mergeTable?: map[string]any(name='mergeTable'),
    primaryKey?: string(name='primaryKey'),
  }(name='result'),
}

model GenerateMergedTableResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateMergedTableResponseBody(name='body'),
}

async function generateMergedTable(request: GenerateMergedTableRequest): GenerateMergedTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateMergedTable', 'POST', '/v4/openapi/assist/schema/actions/merge', 'json', false, 'json', request);
}

model GetDomainRequest {
  domainName: string(name='domainName', position='Path'),
  appGroupIdentity: string(name='appGroupIdentity', position='Query'),
}

model GetDomainResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetDomainResponse = {
  headers: map[string]string(name='headers'),
  body: GetDomainResponseBody(name='body'),
}

async function getDomain(request: GetDomainRequest): GetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDomain', 'GET', '/v4/openapi/domains/{domainName}', 'json', false, 'json', request);
}

model GetFunctionCurrentVersionRequest {
  functionName: string(name='functionName', position='Path'),
  category?: string(name='category', position='Query'),
  domain?: string(name='domain', position='Query'),
  functionType?: string(name='functionType', position='Query'),
  modelType: string(name='modelType', position='Query'),
}

model GetFunctionCurrentVersionResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    functionName?: string(name='FunctionName'),
    functionType?: string(name='FunctionType'),
    modelType?: string(name='ModelType'),
    versionConfig?: {
      createParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='CreateParameters'),
      depends?: [ 
        {
          condition?: string(name='Condition'),
          dependency?: string(name='Dependency'),
          description?: string(name='Description'),
        }
      ](name='Depends'),
      usageParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='UsageParameters'),
    }(name='VersionConfig'),
    versionId?: long(name='VersionId'),
    versionName?: string(name='VersionName'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionCurrentVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionCurrentVersionResponseBody(name='body'),
}

async function getFunctionCurrentVersion(request: GetFunctionCurrentVersionRequest): GetFunctionCurrentVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionCurrentVersion', 'GET', '/v4/openapi/functions/{functionName}/current-version', 'json', false, 'json', request);
}

model GetFunctionDefaultInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  functionName: string(name='functionName', position='Path'),
}

model GetFunctionDefaultInstanceResponseBody = {
  code?: string(name='Code'),
  functionName?: string(name='FunctionName', description='功能名称'),
  httpCode?: long(name='HttpCode'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    instanceName?: string(name='InstanceName'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionDefaultInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionDefaultInstanceResponseBody(name='body'),
}

async function getFunctionDefaultInstance(request: GetFunctionDefaultInstanceRequest): GetFunctionDefaultInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionDefaultInstance', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/default-instance', 'json', false, 'json', request);
}

model GetFunctionInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  functionName: string(name='functionName', position='Path'),
  instanceName: string(name='instanceName', position='Path'),
  output?: string(name='output', position='Query'),
}

model GetFunctionInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    belongs?: {
      category?: string(name='Category'),
      domain?: string(name='Domain'),
      language?: string(name='Language'),
    }(name='Belongs'),
    createParameters?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='CreateParameters'),
    createTime?: long(name='CreateTime'),
    cron?: string(name='Cron'),
    description?: string(name='Description'),
    extendInfo?: string(name='ExtendInfo'),
    functionName?: string(name='FunctionName'),
    functionType?: string(name='FunctionType'),
    instanceName?: string(name='InstanceName'),
    modelType?: string(name='ModelType'),
    source?: string(name='Source'),
    status?: string(name='Status'),
    task?: {
      dagStatus?: string(name='DagStatus'),
      lastRunTime?: long(name='LastRunTime'),
    }(name='Task'),
    versionId?: long(name='VersionId'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionInstanceResponseBody(name='body'),
}

async function getFunctionInstance(request: GetFunctionInstanceRequest): GetFunctionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionInstance', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances/{instanceName}', 'json', false, 'json', request);
}

model GetFunctionVersionRequest {
  functionName: string(name='functionName', position='Path'),
  versionId: int32(name='versionId', position='Path'),
}

model GetFunctionVersionResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    functionName?: string(name='FunctionName'),
    functionType?: string(name='FunctionType'),
    modelType?: string(name='ModelType'),
    versionConfig?: {
      createParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='CreateParameters'),
      depends?: [ 
        {
          condition?: string(name='Condition'),
          dependency?: string(name='Dependency'),
          description?: string(name='Description'),
        }
      ](name='Depends'),
      usageParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='UsageParameters'),
    }(name='VersionConfig'),
    versionId?: long(name='VersionId'),
    versionName?: string(name='VersionName'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetFunctionVersionResponseBody(name='body'),
}

async function getFunctionVersion(request: GetFunctionVersionRequest): GetFunctionVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFunctionVersion', 'GET', '/v4/openapi/functions/{functionName}/versions/{versionId}', 'json', false, 'json', request);
}

model GetModelProgressRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model GetModelProgressResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    progress?: int32(name='progress'),
    status?: string(name='status'),
  }(name='result'),
}

model GetModelProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelProgressResponseBody(name='body'),
}

async function getModelProgress(request: GetModelProgressRequest): GetModelProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelProgress', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}/progress', 'json', false, 'json', request);
}

model GetModelReportRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model GetModelReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetModelReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelReportResponseBody(name='body'),
}

async function getModelReport(request: GetModelReportRequest): GetModelReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModelReport', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}/report', 'json', false, 'json', request);
}

model GetScriptFileNamesRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
}

model GetScriptFileNamesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      createTime?: string(name='createTime'),
      fileName?: string(name='fileName'),
      modifyTime?: string(name='modifyTime'),
    }
  ](name='result'),
}

model GetScriptFileNamesResponse = {
  headers: map[string]string(name='headers'),
  body: GetScriptFileNamesResponseBody(name='body'),
}

async function getScriptFileNames(request: GetScriptFileNamesRequest): GetScriptFileNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetScriptFileNames', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}/file-names', 'json', false, 'json', request);
}

model GetSearchStrategyRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
  strategyName: string(name='strategyName', position='Path'),
}

model GetSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model GetSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: GetSearchStrategyResponseBody(name='body'),
}

async function getSearchStrategy(request: GetSearchStrategyRequest): GetSearchStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSearchStrategy', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/search-strategies/{strategyName}', 'json', false, 'json', request);
}

model GetSortScriptRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
}

model GetSortScriptResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    createTime?: string(name='createTime'),
    modifyTime?: string(name='modifyTime'),
    scope?: string(name='scope'),
    status?: string(name='status'),
    type?: string(name='type'),
  }(name='result'),
}

model GetSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetSortScriptResponseBody(name='body'),
}

async function getSortScript(request: GetSortScriptRequest): GetSortScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSortScript', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}', 'json', false, 'json', request);
}

model GetSortScriptFileRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
  fileName: string(name='fileName', position='Path'),
}

model GetSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    content?: string(name='content'),
    createTime?: string(name='createTime'),
    modifyTime?: string(name='modifyTime'),
    version?: long(name='version'),
  }(name='result'),
}

model GetSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetSortScriptFileResponseBody(name='body'),
}

async function getSortScriptFile(request: GetSortScriptFileRequest): GetSortScriptFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSortScriptFile', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}/files/src/{fileName}', 'json', false, 'json', request);
}

model GetValidationErrorRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  errorCode: string(name='errorCode', position='Query'),
}

model GetValidationErrorResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model GetValidationErrorResponse = {
  headers: map[string]string(name='headers'),
  body: GetValidationErrorResponseBody(name='body'),
}

async function getValidationError(request: GetValidationErrorRequest): GetValidationErrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetValidationError', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/data/validation-error', 'json', false, 'json', request);
}

model GetValidationReportRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  type: string(name='type', position='Query'),
}

model GetValidationReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model GetValidationReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetValidationReportResponseBody(name='body'),
}

async function getValidationReport(request: GetValidationReportRequest): GetValidationReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetValidationReport', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/data/validation-report', 'json', false, 'json', request);
}

model ListABTestExperimentsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
}

model ListABTestExperimentsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      id?: string(name='id'),
      name?: string(name='name'),
      online?: boolean(name='online'),
      params?: map[string]any(name='params'),
      traffic?: int32(name='traffic'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListABTestExperimentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestExperimentsResponseBody(name='body'),
}

async function listABTestExperiments(request: ListABTestExperimentsRequest): ListABTestExperimentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABTestExperiments', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments', 'json', false, 'json', request);
}

model ListABTestFixedFlowDividersRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
  experimentId: int32(name='experimentId', minimum=-1, maximum=999999999, position='Path'),
}

model ListABTestFixedFlowDividersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model ListABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestFixedFlowDividersResponseBody(name='body'),
}

async function listABTestFixedFlowDividers(request: ListABTestFixedFlowDividersRequest): ListABTestFixedFlowDividersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABTestFixedFlowDividers', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments/{experimentId}/fixed-flow-dividers', 'json', false, 'json', request);
}

model ListABTestGroupsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
}

model ListABTestGroupsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      id?: string(name='id'),
      name?: string(name='name'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListABTestGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestGroupsResponseBody(name='body'),
}

async function listABTestGroups(request: ListABTestGroupsRequest): ListABTestGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABTestGroups', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups', 'json', false, 'json', request);
}

model ListABTestMetricsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
}

model ListABTestMetricsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      ctr?: float(name='ctr'),
      date?: string(name='date'),
      experimentName?: string(name='experimentName'),
      ipv?: int32(name='ipv'),
      ipvUv?: int32(name='ipvUv'),
      pv?: int32(name='pv'),
      uv?: int32(name='uv'),
      zeroHitRate?: float(name='zeroHitRate'),
    }
  ](name='result'),
}

model ListABTestMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestMetricsResponseBody(name='body'),
}

async function listABTestMetrics(request: ListABTestMetricsRequest): ListABTestMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABTestMetrics', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/metrics', 'json', false, 'json', request);
}

model ListABTestScenesRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model ListABTestScenesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      id?: string(name='id'),
      name?: string(name='name'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
      values?: [ string ](name='values'),
    }
  ](name='result'),
}

model ListABTestScenesResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestScenesResponseBody(name='body'),
}

async function listABTestScenes(request: ListABTestScenesRequest): ListABTestScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListABTestScenes', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scenes', 'json', false, 'json', request);
}

model ListAppGroupErrorsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId?: string(name='appId', position='Query'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  startTime?: int32(name='startTime', position='Query'),
  stopTime?: int32(name='stopTime', position='Query'),
}

model ListAppGroupErrorsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListAppGroupErrorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupErrorsResponseBody(name='body'),
}

async function listAppGroupErrors(request: ListAppGroupErrorsRequest): ListAppGroupErrorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAppGroupErrors', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/errors', 'json', false, 'json', request);
}

model ListAppGroupMetricsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  endTime?: int32(name='endTime', position='Query'),
  indexes?: string(name='indexes', position='Query'),
  metricType?: string(name='metricType', position='Query'),
  startTime?: int32(name='startTime', position='Query'),
}

model ListAppGroupMetricsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model ListAppGroupMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupMetricsResponseBody(name='body'),
}

async function listAppGroupMetrics(request: ListAppGroupMetricsRequest): ListAppGroupMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAppGroupMetrics', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/metrics', 'json', false, 'json', request);
}

model ListAppGroupsRequest {
  instanceId?: string(name='instanceId', position='Query'),
  name?: string(name='name', position='Query'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', position='Query'),
  sortBy?: int32(name='sortBy', position='Query'),
  type?: string(name='type', position='Query'),
}

model ListAppGroupsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      chargeType?: string(name='chargeType'),
      chargingWay?: int32(name='chargingWay'),
      commodityCode?: string(name='commodityCode'),
      created?: int32(name='created'),
      currentVersion?: string(name='currentVersion'),
      description?: string(name='description'),
      domain?: string(name='domain'),
      expireOn?: string(name='expireOn'),
      firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
      hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
      id?: string(name='id'),
      instanceId?: string(name='instanceId'),
      lockMode?: string(name='lockMode'),
      lockedByExpiration?: int32(name='lockedByExpiration'),
      name?: string(name='name'),
      pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
      processingOrderId?: string(name='processingOrderId'),
      produced?: int32(name='produced'),
      projectId?: string(name='projectId'),
      quota?: {
        computeResource?: int32(name='computeResource'),
        docSize?: int32(name='docSize'),
        spec?: string(name='spec'),
      }(name='quota'),
      secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
      status?: string(name='status'),
      switchedTime?: int32(name='switchedTime'),
      type?: string(name='type'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListAppGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupsResponseBody(name='body'),
}

async function listAppGroups(request: ListAppGroupsRequest): ListAppGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAppGroups', 'GET', '/v4/openapi/app-groups', 'json', false, 'json', request);
}

model ListAppsRequest {
  regionId: string(name='RegionId', position='Host'),
  group?: boolean(name='group', position='Query'),
  page?: int32(name='page', position='Query'),
  size?: int32(name='size', position='Query'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListApps', 'GET', '/v4/openapi/apps', 'none', false, 'json', request);
}

model ListDataCollectionsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
}

model ListDataCollectionsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      dataCollectionType?: string(name='dataCollectionType'),
      id?: string(name='id'),
      industryName?: string(name='industryName'),
      name?: string(name='name'),
      status?: int32(name='status'),
      sundialId?: string(name='sundialId'),
      type?: string(name='type'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListDataCollectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataCollectionsResponseBody(name='body'),
}

async function listDataCollections(request: ListDataCollectionsRequest): ListDataCollectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataCollections', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/data-collections', 'json', false, 'json', request);
}

model ListDataSourceTableFieldsRequest {
  dataSourceType: string(name='dataSourceType', position='Path'),
  params: string(name='params', position='Query'),
}

model ListDataSourceTableFieldsResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model ListDataSourceTableFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceTableFieldsResponseBody(name='body'),
}

async function listDataSourceTableFields(request: ListDataSourceTableFieldsRequest): ListDataSourceTableFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceTableFields', 'GET', '/v4/openapi/assist/data-sources/{dataSourceType}/fields', 'json', false, 'json', request);
}

model ListDataSourceTablesRequest {
  dataSourceType: string(name='dataSourceType', position='Path'),
  params: string(name='params', position='Query'),
}

model ListDataSourceTablesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model ListDataSourceTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceTablesResponseBody(name='body'),
}

async function listDataSourceTables(request: ListDataSourceTablesRequest): ListDataSourceTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSourceTables', 'GET', '/v4/openapi/assist/data-sources/{dataSourceType}/tables', 'json', false, 'json', request);
}

model ListDeployedAlgorithmModelsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  algorithmType?: string(name='algorithmType', position='Query'),
  inServiceOnly?: boolean(name='inServiceOnly', position='Query'),
}

model ListDeployedAlgorithmModelsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      appGroupName?: string(name='appGroupName'),
      apps?: [ string ](name='apps'),
      desc?: string(name='desc'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      id?: string(name='id'),
      models?: [ 
        {
          algorithmType?: string(name='algorithmType'),
          modelId?: int32(name='modelId'),
          modelName?: string(name='modelName'),
          progress?: int32(name='progress'),
          projectId?: int32(name='projectId'),
          status?: string(name='status'),
        }
      ](name='models'),
      scene?: string(name='scene'),
      status?: string(name='status'),
    }
  ](name='result'),
}

model ListDeployedAlgorithmModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployedAlgorithmModelsResponseBody(name='body'),
}

async function listDeployedAlgorithmModels(request: ListDeployedAlgorithmModelsRequest): ListDeployedAlgorithmModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeployedAlgorithmModels', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/deployed-algorithm-models', 'json', false, 'json', request);
}

model ListFirstRanksRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
}

model ListFirstRanksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      description?: string(name='description'),
      meta?: [ 
        {
          arg?: string(name='arg'),
          attribute?: string(name='attribute'),
          weight?: int32(name='weight'),
        }
      ](name='meta'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListFirstRanksResponse = {
  headers: map[string]string(name='headers'),
  body: ListFirstRanksResponseBody(name='body'),
}

async function listFirstRanks(request: ListFirstRanksRequest): ListFirstRanksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFirstRanks', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/first-ranks', 'json', false, 'json', request);
}

model ListFunctionInstancesRequest {
  appGroupIdentity: string(name='appGroupIdentity', description='实例名称', position='Path'),
  functionName: string(name='functionName', description='功能名称', position='Path'),
  functionType?: string(name='functionType', description='功能类型', position='Query'),
  modelType?: string(name='modelType', description='模型类型', position='Query'),
  output?: string(name='output', description='返回信息的丰富度', position='Query'),
  pageNumber?: int32(name='pageNumber', description='页码', position='Query'),
  pageSize?: int32(name='pageSize', description='每页大小', position='Query'),
  source?: string(name='source', description='实例来源', position='Query'),
}

model ListFunctionInstancesResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      belongs?: {
        category?: string(name='Category'),
        domain?: string(name='Domain'),
        language?: string(name='Language'),
      }(name='Belongs'),
      createParameters?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='CreateParameters'),
      createTime?: long(name='CreateTime'),
      cron?: string(name='Cron'),
      description?: string(name='Description'),
      extendInfo?: string(name='ExtendInfo'),
      functionName?: string(name='FunctionName'),
      functionType?: string(name='FunctionType'),
      instanceName?: string(name='InstanceName'),
      modelType?: string(name='ModelType'),
      source?: string(name='Source'),
      status?: string(name='Status'),
      versionId?: long(name='VersionId'),
    }
  ](name='Result'),
  status?: string(name='Status'),
  totalCount?: long(name='TotalCount'),
}

model ListFunctionInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionInstancesResponseBody(name='body'),
}

async function listFunctionInstances(request: ListFunctionInstancesRequest): ListFunctionInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctionInstances', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances', 'json', false, 'json', request);
}

model ListFunctionTasksRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  functionName: string(name='functionName', position='Path'),
  instanceName: string(name='instanceName', position='Path'),
  endTime?: long(name='endTime', position='Query'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  startTime?: long(name='startTime', position='Query'),
  status?: string(name='status', position='Query'),
}

model ListFunctionTasksResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      endTime?: long(name='EndTime'),
      extendInfo?: string(name='ExtendInfo'),
      functionName?: string(name='FunctionName'),
      progress?: long(name='Progress'),
      runId?: string(name='RunId'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Result'),
  status?: string(name='Status'),
  totalCount?: long(name='TotalCount'),
}

model ListFunctionTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionTasksResponseBody(name='body'),
}

async function listFunctionTasks(request: ListFunctionTasksRequest): ListFunctionTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctionTasks', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances/{instanceName}/tasks', 'json', false, 'json', request);
}

model ListInterventionDictionariesRequest {
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  types?: string(name='types', position='Query'),
}

model ListInterventionDictionariesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      analyzer?: string(name='analyzer'),
      created?: int32(name='created'),
      id?: int32(name='id'),
      name?: string(name='name'),
      type?: string(name='type'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListInterventionDictionariesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionariesResponseBody(name='body'),
}

async function listInterventionDictionaries(request: ListInterventionDictionariesRequest): ListInterventionDictionariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInterventionDictionaries', 'GET', '/v4/openapi/intervention-dictionaries', 'json', false, 'json', request);
}

model ListInterventionDictionaryEntriesRequest {
  name: string(name='name', position='Path'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  word?: string(name='word', position='Query'),
}

model ListInterventionDictionaryEntriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      cmd?: string(name='cmd'),
      created?: long(name='created'),
      relevance?: map[string]any(name='relevance'),
      status?: string(name='status'),
      tokens?: [ 
        {
          order?: int32(name='order'),
          tag?: string(name='tag'),
          tagLabel?: string(name='tagLabel'),
          token?: string(name='token'),
        }
      ](name='tokens'),
      updated?: long(name='updated'),
      word?: string(name='word'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryEntriesResponseBody(name='body'),
}

async function listInterventionDictionaryEntries(request: ListInterventionDictionaryEntriesRequest): ListInterventionDictionaryEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInterventionDictionaryEntries', 'GET', '/v4/openapi/intervention-dictionaries/{name}/entries', 'json', false, 'json', request);
}

model ListInterventionDictionaryNerResultsRequest {
  name: string(name='name', position='Path'),
  query: string(name='query', position='Query'),
}

model ListInterventionDictionaryNerResultsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      order?: int32(name='order'),
      tag?: string(name='tag'),
      tagLabel?: string(name='tagLabel'),
      token?: string(name='token'),
    }
  ](name='result'),
}

model ListInterventionDictionaryNerResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryNerResultsResponseBody(name='body'),
}

async function listInterventionDictionaryNerResults(request: ListInterventionDictionaryNerResultsRequest): ListInterventionDictionaryNerResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInterventionDictionaryNerResults', 'GET', '/v4/openapi/intervention-dictionaries/{name}/ner-results', 'json', false, 'json', request);
}

model ListInterventionDictionaryRelatedEntitiesRequest {
  name: string(name='name', position='Path'),
}

model ListInterventionDictionaryRelatedEntitiesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model ListInterventionDictionaryRelatedEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryRelatedEntitiesResponseBody(name='body'),
}

async function listInterventionDictionaryRelatedEntities(request: ListInterventionDictionaryRelatedEntitiesRequest): ListInterventionDictionaryRelatedEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInterventionDictionaryRelatedEntities', 'GET', '/v4/openapi/intervention-dictionaries/{name}/related', 'json', false, 'json', request);
}

model ListModelsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  type?: string(name='type', position='Query'),
}

model ListModelsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model ListModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelsResponseBody(name='body'),
}

async function listModels(request: ListModelsRequest): ListModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModels', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models', 'json', false, 'json', request);
}

model ListProceedingsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model ListProceedingsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProceedingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProceedingsResponseBody(name='body'),
}

async function listProceedings(request: ListProceedingsRequest): ListProceedingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProceedings', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/proceedings', 'json', false, 'json', request);
}

model ListQueryProcessorAnalyzerResultsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
  name: string(name='name', position='Path'),
  text: string(name='text', position='Query'),
}

model ListQueryProcessorAnalyzerResultsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model ListQueryProcessorAnalyzerResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorAnalyzerResultsResponseBody(name='body'),
}

async function listQueryProcessorAnalyzerResults(request: ListQueryProcessorAnalyzerResultsRequest): ListQueryProcessorAnalyzerResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryProcessorAnalyzerResults', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/query-processors/{name}/analyze', 'json', false, 'json', request);
}

model ListQueryProcessorNersRequest {
  domain?: string(name='domain', position='Query'),
}

model ListQueryProcessorNersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      label?: string(name='label'),
      order?: int32(name='order'),
      priority?: string(name='priority'),
      tag?: string(name='tag'),
    }
  ](name='result'),
}

model ListQueryProcessorNersResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorNersResponseBody(name='body'),
}

async function listQueryProcessorNers(request: ListQueryProcessorNersRequest): ListQueryProcessorNersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryProcessorNers', 'GET', '/v4/openapi/query-processor/ner/default-priorities', 'json', false, 'json', request);
}

model ListQueryProcessorsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  isActive?: int32(name='isActive', position='Query'),
}

model ListQueryProcessorsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      domain?: string(name='domain'),
      indexes?: [ string ](name='indexes'),
      name?: string(name='name'),
      processors?: [  map[string]any ](name='processors'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListQueryProcessorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorsResponseBody(name='body'),
}

async function listQueryProcessors(request: ListQueryProcessorsRequest): ListQueryProcessorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQueryProcessors', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/query-processors', 'json', false, 'json', request);
}

model ListQuotaReviewTasksRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
}

model ListQuotaReviewTasksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      appGroupId?: int32(name='appGroupId'),
      appGroupName?: string(name='appGroupName'),
      appGroupType?: string(name='appGroupType'),
      approved?: boolean(name='approved'),
      available?: boolean(name='available'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      id?: int32(name='id'),
      memo?: string(name='memo'),
      newComputeResource?: int32(name='newComputeResource'),
      newSocSize?: int32(name='newSocSize'),
      newSpec?: string(name='newSpec'),
      oldComputeResource?: int32(name='oldComputeResource'),
      oldDocSize?: int32(name='oldDocSize'),
      oldSpec?: string(name='oldSpec'),
      pending?: boolean(name='pending'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListQuotaReviewTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotaReviewTasksResponseBody(name='body'),
}

async function listQuotaReviewTasks(request: ListQuotaReviewTasksRequest): ListQuotaReviewTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotaReviewTasks', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/quota-review-tasks', 'json', false, 'json', request);
}

model ListRamRolesRequest {
}

model ListRamRolesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      assumed?: boolean(name='assumed'),
      name?: string(name='name'),
      service?: string(name='service'),
      templateId?: string(name='template_id'),
    }
  ](name='result'),
}

model ListRamRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRamRolesResponseBody(name='body'),
}

async function listRamRoles(request: ListRamRolesRequest): ListRamRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRamRoles', 'GET', '/v4/openapi/assist/ram/roles', 'json', false, 'json', request);
}

model ListScheduledTasksRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  pageNumber?: int32(name='pageNumber', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  type?: string(name='type', position='Query'),
}

model ListScheduledTasksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListScheduledTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListScheduledTasksResponseBody(name='body'),
}

async function listScheduledTasks(request: ListScheduledTasksRequest): ListScheduledTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScheduledTasks', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/scheduled-tasks', 'json', false, 'json', request);
}

model ListSearchStrategiesRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
}

model ListSearchStrategiesResponseBody = {
  requestId?: string(name='requestId'),
}

model ListSearchStrategiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSearchStrategiesResponseBody(name='body'),
}

async function listSearchStrategies(request: ListSearchStrategiesRequest): ListSearchStrategiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSearchStrategies', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/search-strategies', 'json', false, 'json', request);
}

model ListSecondRanksRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
}

model ListSecondRanksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      description?: string(name='description'),
      id?: string(name='id'),
      isDefault?: string(name='isDefault'),
      isSys?: string(name='isSys'),
      meta?: string(name='meta'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListSecondRanksResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecondRanksResponseBody(name='body'),
}

async function listSecondRanks(request: ListSecondRanksRequest): ListSecondRanksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSecondRanks', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/second-ranks', 'json', false, 'json', request);
}

model ListSlowQueryCategoriesRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model ListSlowQueryCategoriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzeStatus?: string(name='analyzeStatus'),
    end?: int32(name='end'),
    start?: int32(name='start'),
  }(name='result'),
}

model ListSlowQueryCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlowQueryCategoriesResponseBody(name='body'),
}

async function listSlowQueryCategories(request: ListSlowQueryCategoriesRequest): ListSlowQueryCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSlowQueryCategories', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/optimizers/slow-query/categories', 'json', false, 'json', request);
}

model ListSlowQueryQueriesRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  categoryIndex: string(name='categoryIndex', position='Path'),
}

model ListSlowQueryQueriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    appQuery?: string(name='appQuery'),
    end?: int32(name='end'),
    index?: int32(name='index'),
    start?: int32(name='start'),
  }(name='result'),
}

model ListSlowQueryQueriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlowQueryQueriesResponseBody(name='body'),
}

async function listSlowQueryQueries(request: ListSlowQueryQueriesRequest): ListSlowQueryQueriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSlowQueryQueries', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/optimizers/slow-query/categories/{categoryIndex}/queries', 'json', false, 'json', request);
}

model ListSortExpressionsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', minimum=1, maximum=999999999, position='Path'),
}

model ListSortExpressionsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      description?: string(name='description'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListSortExpressionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSortExpressionsResponseBody(name='body'),
}

async function listSortExpressions(request: ListSortExpressionsRequest): ListSortExpressionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSortExpressions', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/sort-expressions', 'json', false, 'json', request);
}

model ListSortScriptsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
}

model ListSortScriptsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      createTime?: string(name='createTime'),
      modifyTime?: string(name='modifyTime'),
      scope?: string(name='scope'),
      scriptName?: string(name='scriptName'),
      status?: string(name='status'),
      type?: string(name='type'),
    }
  ](name='result'),
}

model ListSortScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSortScriptsResponseBody(name='body'),
}

async function listSortScripts(request: ListSortScriptsRequest): ListSortScriptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSortScripts', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts', 'json', false, 'json', request);
}

model ListStatisticLogsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  moduleName: string(name='moduleName', position='Path'),
  columns?: string(name='columns', position='Query'),
  distinct?: boolean(name='distinct', position='Query'),
  pageNumber?: int32(name='pageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='pageSize', minimum=1, maximum=10000, position='Query'),
  query?: string(name='query', position='Query'),
  sortBy?: string(name='sortBy', position='Query'),
  startTime?: int32(name='startTime', minimum=0, maximum=9999999999, position='Query'),
  stopTime?: int32(name='stopTime', minimum=0, maximum=9999999999, position='Query'),
}

model ListStatisticLogsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListStatisticLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatisticLogsResponseBody(name='body'),
}

async function listStatisticLogs(request: ListStatisticLogsRequest): ListStatisticLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStatisticLogs', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/statistic-logs/{moduleName}', 'json', false, 'json', request);
}

model ListStatisticReportRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  moduleName: string(name='moduleName', position='Path'),
  columns?: string(name='columns', position='Query'),
  endTime?: int32(name='endTime', minimum=0, maximum=9999999999, position='Query'),
  pageNumber?: int32(name='pageNumber', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='pageSize', minimum=1, maximum=10000, position='Query'),
  query?: string(name='query', position='Query'),
  startTime?: int32(name='startTime', minimum=0, maximum=9999999999, position='Query'),
}

model ListStatisticReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListStatisticReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatisticReportResponseBody(name='body'),
}

async function listStatisticReport(request: ListStatisticReportRequest): ListStatisticReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStatisticReport', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/statistic-report/{moduleName}', 'json', false, 'json', request);
}

model ListUserAnalyzerEntriesRequest {
  name: string(name='name', position='Path'),
  pageNumber?: int32(name='pageNumber', minimum=-1, maximum=999999999, position='Query'),
  pageSize?: int32(name='pageSize', minimum=-1, maximum=999999999, position='Query'),
  word?: string(name='word', position='Query'),
}

model ListUserAnalyzerEntriesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model ListUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAnalyzerEntriesResponseBody(name='body'),
}

async function listUserAnalyzerEntries(request: ListUserAnalyzerEntriesRequest): ListUserAnalyzerEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserAnalyzerEntries', 'GET', '/v4/openapi/user-analyzers/{name}/entries', 'json', false, 'json', request);
}

model ListUserAnalyzersRequest {
  pageNumber?: int32(name='pageNumber', minimum=-1, maximum=999999999, position='Query'),
  pageSize?: int32(name='pageSize', minimum=-1, maximum=999999999, position='Query'),
}

model ListUserAnalyzersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      available?: boolean(name='available'),
      business?: string(name='business'),
      created?: int32(name='created'),
      dicts?: [ 
        {
          available?: boolean(name='available'),
          created?: int32(name='created'),
          entriesCount?: int32(name='entriesCount'),
          entriesLimit?: int32(name='entriesLimit'),
          id?: string(name='id'),
          type?: string(name='type'),
          updated?: int32(name='updated'),
        }
      ](name='dicts'),
      id?: string(name='id'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListUserAnalyzersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAnalyzersResponseBody(name='body'),
}

async function listUserAnalyzers(request: ListUserAnalyzersRequest): ListUserAnalyzersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserAnalyzers', 'GET', '/v4/openapi/user-analyzers', 'json', false, 'json', request);
}

model ModifyAppGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model ModifyAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    domain?: string(name='domain'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifyAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppGroupResponseBody(name='body'),
}

async function modifyAppGroup(request: ModifyAppGroupRequest): ModifyAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAppGroup', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}', 'json', false, 'json', request);
}

model ModifyAppGroupQuotaRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model ModifyAppGroupQuotaResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifyAppGroupQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppGroupQuotaResponseBody(name='body'),
}

async function modifyAppGroupQuota(request: ModifyAppGroupQuotaRequest): ModifyAppGroupQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyAppGroupQuota', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/quota', 'json', false, 'json', request);
}

model ModifyFirstRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model ModifyFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model ModifyFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFirstRankResponseBody(name='body'),
}

async function modifyFirstRank(request: ModifyFirstRankRequest): ModifyFirstRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyFirstRank', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/first-ranks/{name}', 'json', false, 'json', request);
}

model ModifyModelRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model ModifyModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyModel', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}', 'json', false, 'json', request);
}

model ModifyQueryProcessorRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model ModifyQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    name?: string(name='name'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifyQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyQueryProcessorResponseBody(name='body'),
}

async function modifyQueryProcessor(request: ModifyQueryProcessorRequest): ModifyQueryProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyQueryProcessor', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/query-processors/{name}', 'json', false, 'json', request);
}

model ModifyScheduledTaskRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  taskId: string(name='taskId', position='Path'),
}

model ModifyScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model ModifyScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScheduledTaskResponseBody(name='body'),
}

async function modifyScheduledTask(request: ModifyScheduledTaskRequest): ModifyScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyScheduledTask', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/scheduled-tasks/{taskId}', 'json', false, 'json', request);
}

model ModifySecondRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model ModifySecondRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    description?: string(name='description'),
    id?: string(name='id'),
    isDefault?: string(name='isDefault'),
    isSys?: string(name='isSys'),
    meta?: string(name='meta'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifySecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecondRankResponseBody(name='body'),
}

async function modifySecondRank(request: ModifySecondRankRequest): ModifySecondRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifySecondRank', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/second-ranks/{name}', 'json', false, 'json', request);
}

model PreviewModelRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
  query?: string(name='query', position='Query'),
}

model PreviewModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model PreviewModelResponse = {
  headers: map[string]string(name='headers'),
  body: PreviewModelResponseBody(name='body'),
}

async function previewModel(request: PreviewModelRequest): PreviewModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PreviewModel', 'GET', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}/actions/preview', 'json', false, 'json', request);
}

model PushInterventionDictionaryEntriesRequest {
  name: string(name='name', position='Path'),
}

model PushInterventionDictionaryEntriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model PushInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PushInterventionDictionaryEntriesResponseBody(name='body'),
}

async function pushInterventionDictionaryEntries(request: PushInterventionDictionaryEntriesRequest): PushInterventionDictionaryEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushInterventionDictionaryEntries', 'POST', '/v4/openapi/intervention-dictionaries/{name}/entries/actions/bulk', 'json', false, 'json', request);
}

model PushUserAnalyzerEntriesRequest {
  name: string(name='name', position='Path'),
}

model PushUserAnalyzerEntriesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model PushUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PushUserAnalyzerEntriesResponseBody(name='body'),
}

async function pushUserAnalyzerEntries(request: PushUserAnalyzerEntriesRequest): PushUserAnalyzerEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushUserAnalyzerEntries', 'POST', '/v4/openapi/user-analyzers/{name}/entries/actions/bulk', 'json', false, 'json', request);
}

model RankPreviewQueryRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model RankPreviewQueryResponseBody = {
  requestId?: string(name='requestId'),
}

model RankPreviewQueryResponse = {
  headers: map[string]string(name='headers'),
  body: RankPreviewQueryResponseBody(name='body'),
}

async function rankPreviewQuery(request: RankPreviewQueryRequest): RankPreviewQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RankPreviewQuery', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}/actions/query-rank', 'json', false, 'json', request);
}

model ReleaseSortScriptRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
}

model ReleaseSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model ReleaseSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSortScriptResponseBody(name='body'),
}

async function releaseSortScript(request: ReleaseSortScriptRequest): ReleaseSortScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseSortScript', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}/actions/release', 'json', false, 'json', request);
}

model RemoveAppRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
}

model RemoveAppResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ int32 ](name='result'),
}

model RemoveAppResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppResponseBody(name='body'),
}

async function removeApp(request: RemoveAppRequest): RemoveAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveApp', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}', 'json', false, 'json', request);
}

model RemoveAppGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model RemoveAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ int32 ](name='result'),
}

model RemoveAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppGroupResponseBody(name='body'),
}

async function removeAppGroup(request: RemoveAppGroupRequest): RemoveAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveAppGroup', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}', 'json', false, 'json', request);
}

model RemoveDataCollectionRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  dataCollectionIdentity: string(name='dataCollectionIdentity', position='Path'),
}

model RemoveDataCollectionResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model RemoveDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDataCollectionResponseBody(name='body'),
}

async function removeDataCollection(request: RemoveDataCollectionRequest): RemoveDataCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveDataCollection', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/data-collections/{dataCollectionIdentity}', 'json', false, 'json', request);
}

model RemoveFirstRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
}

model RemoveFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model RemoveFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFirstRankResponseBody(name='body'),
}

async function removeFirstRank(request: RemoveFirstRankRequest): RemoveFirstRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveFirstRank', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/first-ranks/{name}', 'json', false, 'json', request);
}

model RemoveInterventionDictionaryRequest {
  name?: string(name='name', position='Path'),
}

model RemoveInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    name?: string(name='name'),
    type?: string(name='type'),
    updated?: string(name='updated'),
  }(name='result'),
}

model RemoveInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInterventionDictionaryResponseBody(name='body'),
}

async function removeInterventionDictionary(request: RemoveInterventionDictionaryRequest): RemoveInterventionDictionaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveInterventionDictionary', 'DELETE', '/v4/openapi/intervention-dictionaries/{name}', 'json', false, 'json', request);
}

model RemoveQueryProcessorRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
}

model RemoveQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model RemoveQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveQueryProcessorResponseBody(name='body'),
}

async function removeQueryProcessor(request: RemoveQueryProcessorRequest): RemoveQueryProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveQueryProcessor', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/query-processors/{name}', 'json', false, 'json', request);
}

model RemoveScheduledTaskRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  taskId: string(name='taskId', position='Path'),
}

model RemoveScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ int32 ](name='result'),
}

model RemoveScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveScheduledTaskResponseBody(name='body'),
}

async function removeScheduledTask(request: RemoveScheduledTaskRequest): RemoveScheduledTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveScheduledTask', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/scheduled-tasks/{taskId}', 'json', false, 'json', request);
}

model RemoveSearchStrategyRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
  strategyName: string(name='strategyName', position='Path'),
}

model RemoveSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model RemoveSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSearchStrategyResponseBody(name='body'),
}

async function removeSearchStrategy(request: RemoveSearchStrategyRequest): RemoveSearchStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveSearchStrategy', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/search-strategies/{strategyName}', 'json', false, 'json', request);
}

model RemoveSecondRankRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  name: string(name='name', position='Path'),
}

model RemoveSecondRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model RemoveSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSecondRankResponseBody(name='body'),
}

async function removeSecondRank(request: RemoveSecondRankRequest): RemoveSecondRankResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveSecondRank', 'DELETE', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/second-ranks/{name}', 'json', false, 'json', request);
}

model RemoveUserAnalyzerRequest {
  name: string(name='name', position='Path'),
}

model RemoveUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model RemoveUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserAnalyzerResponseBody(name='body'),
}

async function removeUserAnalyzer(request: RemoveUserAnalyzerRequest): RemoveUserAnalyzerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveUserAnalyzer', 'DELETE', '/v4/openapi/user-analyzers/{name}', 'json', false, 'json', request);
}

model RenewAppGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model RenewAppGroupResponseBody = {
  requestId?: string(name='requestId'),
}

model RenewAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RenewAppGroupResponseBody(name='body'),
}

async function renewAppGroup(request: RenewAppGroupRequest): RenewAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenewAppGroup', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/actions/renew', 'json', false, 'json', request);
}

model ReplaceAppGroupCommodityCodeRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model ReplaceAppGroupCommodityCodeResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
    versions?: [ string ](name='versions'),
  }(name='result'),
}

model ReplaceAppGroupCommodityCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceAppGroupCommodityCodeResponseBody(name='body'),
}

async function replaceAppGroupCommodityCode(request: ReplaceAppGroupCommodityCodeRequest): ReplaceAppGroupCommodityCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReplaceAppGroupCommodityCode', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/actions/to-instance-typed', 'json', false, 'json', request);
}

model SaveSortScriptFileRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
  fileName: string(name='fileName', position='Path'),
}

model SaveSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
}

model SaveSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: SaveSortScriptFileResponseBody(name='body'),
}

async function saveSortScriptFile(request: SaveSortScriptFileRequest): SaveSortScriptFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveSortScriptFile', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}/files/src/{fileName}', 'json', false, 'json', request);
}

model StartSlowQueryAnalyzerRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model StartSlowQueryAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model StartSlowQueryAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: StartSlowQueryAnalyzerResponseBody(name='body'),
}

async function startSlowQueryAnalyzer(request: StartSlowQueryAnalyzerRequest): StartSlowQueryAnalyzerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartSlowQueryAnalyzer', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/optimizers/slow-query/actions/run', 'json', false, 'json', request);
}

model TrainModelRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  modelName: string(name='modelName', position='Path'),
}

model TrainModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model TrainModelResponse = {
  headers: map[string]string(name='headers'),
  body: TrainModelResponseBody(name='body'),
}

async function trainModel(request: TrainModelRequest): TrainModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TrainModel', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/algorithm/models/{modelName}/actions/train', 'json', false, 'json', request);
}

model UnbindESUserAnalyzerRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  esInstanceId: string(name='esInstanceId', position='Path'),
}

model UnbindESUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model UnbindESUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindESUserAnalyzerResponseBody(name='body'),
}

async function unbindESUserAnalyzer(request: UnbindESUserAnalyzerRequest): UnbindESUserAnalyzerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnbindESUserAnalyzer', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/es/{esInstanceId}/actions/unbind-analyzer', 'json', false, 'json', request);
}

model UnbindEsInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
}

model UnbindEsInstanceResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model UnbindEsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindEsInstanceResponseBody(name='body'),
}

async function unbindEsInstance(request: UnbindEsInstanceRequest): UnbindEsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnbindEsInstance', 'POST', '/v4/openapi/app-groups/{appGroupIdentity}/actions/unbind-es-instance', 'json', false, 'json', request);
}

model UpdateABTestExperimentRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
  experimentId: int32(name='experimentId', minimum=-1, maximum=999999999, position='Path'),
}

model UpdateABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model UpdateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestExperimentResponseBody(name='body'),
}

async function updateABTestExperiment(request: UpdateABTestExperimentRequest): UpdateABTestExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateABTestExperiment', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments/{experimentId}', 'json', false, 'json', request);
}

model UpdateABTestFixedFlowDividersRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
  experimentId: int32(name='experimentId', minimum=-1, maximum=999999999, position='Path'),
}

model UpdateABTestFixedFlowDividersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model UpdateABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestFixedFlowDividersResponseBody(name='body'),
}

async function updateABTestFixedFlowDividers(request: UpdateABTestFixedFlowDividersRequest): UpdateABTestFixedFlowDividersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateABTestFixedFlowDividers', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}/experiments/{experimentId}/fixed-flow-dividers', 'json', false, 'json', request);
}

model UpdateABTestGroupRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
  groupId: int32(name='groupId', minimum=-1, maximum=999999999, position='Path'),
}

model UpdateABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model UpdateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestGroupResponseBody(name='body'),
}

async function updateABTestGroup(request: UpdateABTestGroupRequest): UpdateABTestGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateABTestGroup', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}/groups/{groupId}', 'json', false, 'json', request);
}

model UpdateABTestSceneRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  sceneId: int32(name='sceneId', minimum=-1, maximum=999999999, position='Path'),
}

model UpdateABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model UpdateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestSceneResponseBody(name='body'),
}

async function updateABTestScene(request: UpdateABTestSceneRequest): UpdateABTestSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateABTestScene', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/scenes/{sceneId}', 'json', false, 'json', request);
}

model UpdateFetchFieldsRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model UpdateFetchFieldsResponseBody = {
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model UpdateFetchFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFetchFieldsResponseBody(name='body'),
}

async function updateFetchFields(request: UpdateFetchFieldsRequest): UpdateFetchFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFetchFields', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/fetch-fields', 'json', false, 'json', request);
}

model UpdateFunctionDefaultInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  functionName: string(name='functionName', position='Path'),
  instanceName: string(name='instanceName', description='实例名称', position='Body'),
}

model UpdateFunctionDefaultInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateFunctionDefaultInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFunctionDefaultInstanceResponseBody(name='body'),
}

async function updateFunctionDefaultInstance(request: UpdateFunctionDefaultInstanceRequest): UpdateFunctionDefaultInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFunctionDefaultInstance', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/default-instance', 'json', false, 'json', request);
}

model UpdateFunctionInstanceRequest {
  appGroupIdentity: string(name='appGroupIdentity', description='opensearch应用名', position='Path'),
  functionName: string(name='functionName', description='功能名称', position='Path'),
  instanceName: string(name='instanceName', description='实例名称', position='Path'),
  createParameters?: [ 
    {
      name?: string(name='name', description='参数名称'),
      value?: string(name='value', description='参数值'),
    }
  ](name='createParameters', description='实例的参数列表', position='Body'),
  cron?: string(name='cron', description='Cron表达式', position='Body'),
  description?: string(name='description', description='实例状态', position='Body'),
}

model UpdateFunctionInstanceResponseBody = {
  code?: string(name='Code', description='错误码'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency', description='耗时'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFunctionInstanceResponseBody(name='body'),
}

async function updateFunctionInstance(request: UpdateFunctionInstanceRequest): UpdateFunctionInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFunctionInstance', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/functions/{functionName}/instances/{instanceName}', 'json', false, 'json', request);
}

model UpdateSearchStrategyRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: string(name='appId', position='Path'),
  strategyName: string(name='strategyName', position='Path'),
}

model UpdateSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSearchStrategyResponseBody(name='body'),
}

async function updateSearchStrategy(request: UpdateSearchStrategyRequest): UpdateSearchStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSearchStrategy', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/search-strategies/{strategyName}', 'json', false, 'json', request);
}

model UpdateSortScriptRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appVersionId: string(name='appVersionId', position='Path'),
  scriptName: string(name='scriptName', position='Path'),
}

model UpdateSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSortScriptResponseBody(name='body'),
}

async function updateSortScript(request: UpdateSortScriptRequest): UpdateSortScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSortScript', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appVersionId}/sort-scripts/{scriptName}', 'json', false, 'json', request);
}

model UpdateSummariesRequest {
  appGroupIdentity: string(name='appGroupIdentity', position='Path'),
  appId: int32(name='appId', position='Path'),
  dryRun?: boolean(name='dryRun', position='Query'),
}

model UpdateSummariesResponseBody = {
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model UpdateSummariesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSummariesResponseBody(name='body'),
}

async function updateSummaries(request: UpdateSummariesRequest): UpdateSummariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSummaries', 'PUT', '/v4/openapi/app-groups/{appGroupIdentity}/apps/{appId}/summaries', 'json', false, 'json', request);
}

model ValidateDataSourcesRequest {
}

model ValidateDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      code?: string(name='code'),
      dataSource?: {
        parameters?: map[string]any(name='parameters'),
        tableName?: string(name='tableName'),
        type?: string(name='type'),
      }(name='dataSource'),
      message?: string(name='message'),
    }
  ](name='result'),
}

model ValidateDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateDataSourcesResponseBody(name='body'),
}

async function validateDataSources(request: ValidateDataSourcesRequest): ValidateDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateDataSources', 'POST', '/v4/openapi/assist/data-sources/validations', 'json', false, 'json', request);
}

