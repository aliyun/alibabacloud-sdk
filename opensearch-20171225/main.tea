/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('opensearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BindESUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model BindESUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindESUserAnalyzerResponseBody(name='body'),
}

async function bindESUserAnalyzer(appGroupIdentity: string, esInstanceId: string): BindESUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return bindESUserAnalyzerWithOptions(appGroupIdentity, esInstanceId, headers, runtime);
}

async function bindESUserAnalyzerWithOptions(appGroupIdentity: string, esInstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): BindESUserAnalyzerResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  esInstanceId = OpenApiUtil.getEncodeParam(esInstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'BindESUserAnalyzer',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/es/${esInstanceId}/actions/bind-analyzer`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BindEsInstanceResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model BindEsInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindEsInstanceResponseBody(name='body'),
}

async function bindEsInstance(appGroupIdentity: string): BindEsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return bindEsInstanceWithOptions(appGroupIdentity, headers, runtime);
}

async function bindEsInstanceWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): BindEsInstanceResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'BindEsInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/actions/bind-es-instance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CompileSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model CompileSortScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompileSortScriptResponseBody(name='body'),
}

async function compileSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): CompileSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return compileSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function compileSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CompileSortScriptResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CompileSortScript',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/compiling`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateABTestExperimentResponseBody(name='body'),
}

async function createABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string): CreateABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function createABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateABTestExperimentResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateABTestExperiment',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateABTestGroupResponseBody(name='body'),
}

async function createABTestGroup(appGroupIdentity: string, sceneId: string): CreateABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createABTestGroupWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function createABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateABTestGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateABTestGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    values?: [ string ](name='values'),
  }(name='result'),
}

model CreateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateABTestSceneResponseBody(name='body'),
}

async function createABTestScene(appGroupIdentity: string): CreateABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createABTestSceneWithOptions(appGroupIdentity, headers, runtime);
}

async function createABTestSceneWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateABTestSceneResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateABTestScene',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateAppRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateAppResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(appGroupIdentity: string, request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAppWithOptions(appGroupIdentity, request, headers, runtime);
}

async function createAppWithOptions(appGroupIdentity: string, request: CreateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    domain?: string(name='domain'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppGroupResponseBody(name='body'),
}

async function createAppGroup(): CreateAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAppGroupWithOptions(headers, runtime);
}

async function createAppGroupWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateAppGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateDataCollectionResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    dataCollectionType?: string(name='dataCollectionType'),
    id?: string(name='id'),
    industryName?: string(name='industryName'),
    name?: string(name='name'),
    status?: int32(name='status'),
    sundialId?: string(name='sundialId'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataCollectionResponseBody(name='body'),
}

async function createDataCollection(appGroupIdentity: string): CreateDataCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataCollectionWithOptions(appGroupIdentity, headers, runtime);
}

async function createDataCollectionWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataCollectionResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateDataCollection',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/data-collections`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateFirstRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model CreateFirstRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFirstRankResponseBody(name='body'),
}

async function createFirstRank(appGroupIdentity: string, appId: string, request: CreateFirstRankRequest): CreateFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFirstRankWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function createFirstRankWithOptions(appGroupIdentity: string, appId: string, request: CreateFirstRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFirstRankResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFirstRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateFunctionInstanceRequest {
  createParameters?: [ 
    {
      name?: string(name='name', description='参数名称'),
      value?: string(name='value', description='参数值'),
    }
  ](name='createParameters', description='创建参数'),
  cron?: string(name='cron', description='周期训练'),
  description?: string(name='description', description='实例描述'),
  functionType?: string(name='functionType', description='功能类型'),
  instanceName?: string(name='instanceName', description='实例名称'),
  modelType?: string(name='modelType', description='模型类型'),
  usageParameters?: [ 
    {
      name?: string(name='name', description='参数名称'),
      value?: string(name='value', description='参数值'),
    }
  ](name='usageParameters', description='使用参数'),
}

model CreateFunctionInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFunctionInstanceResponseBody(name='body'),
}

async function createFunctionInstance(appGroupIdentity: string, functionName: string, request: CreateFunctionInstanceRequest): CreateFunctionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFunctionInstanceWithOptions(appGroupIdentity, functionName, request, headers, runtime);
}

async function createFunctionInstanceWithOptions(appGroupIdentity: string, functionName: string, request: CreateFunctionInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFunctionInstanceResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  var body : map[string]any= {};
  if (!Util.isUnset(request.createParameters)) {
    body['createParameters'] = request.createParameters;
  }
  if (!Util.isUnset(request.cron)) {
    body['cron'] = request.cron;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.functionType)) {
    body['functionType'] = request.functionType;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.modelType)) {
    body['modelType'] = request.modelType;
  }
  if (!Util.isUnset(request.usageParameters)) {
    body['usageParameters'] = request.usageParameters;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFunctionInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateFunctionTaskResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateFunctionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFunctionTaskResponseBody(name='body'),
}

async function createFunctionTask(appGroupIdentity: string, functionName: string, instanceName: string): CreateFunctionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFunctionTaskWithOptions(appGroupIdentity, functionName, instanceName, headers, runtime);
}

async function createFunctionTaskWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFunctionTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateFunctionTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}/tasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    name?: string(name='name'),
    type?: string(name='type'),
    updated?: string(name='updated'),
  }(name='result'),
}

model CreateInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInterventionDictionaryResponseBody(name='body'),
}

async function createInterventionDictionary(): CreateInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInterventionDictionaryWithOptions(headers, runtime);
}

async function createInterventionDictionaryWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateInterventionDictionaryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateInterventionDictionary',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateModelRequest {
  body?: map[string]any(name='body'),
}

model CreateModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateModelResponseBody(name='body'),
}

async function createModel(appGroupIdentity: string, request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelWithOptions(appGroupIdentity, request, headers, runtime);
}

async function createModelWithOptions(appGroupIdentity: string, request: CreateModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var body : map[string]any= {};
  if (!Util.isUnset(request.body)) {
    body['body'] = request.body;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateModel',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateQueryProcessorRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    name?: string(name='name'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model CreateQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQueryProcessorResponseBody(name='body'),
}

async function createQueryProcessor(appGroupIdentity: string, appId: string, request: CreateQueryProcessorRequest): CreateQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createQueryProcessorWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function createQueryProcessorWithOptions(appGroupIdentity: string, appId: string, request: CreateQueryProcessorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQueryProcessorResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateQueryProcessor',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateScheduledTaskResponseBody(name='body'),
}

async function createScheduledTask(appGroupIdentity: string): CreateScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createScheduledTaskWithOptions(appGroupIdentity, headers, runtime);
}

async function createScheduledTaskWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateScheduledTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduledTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model CreateSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSearchStrategyResponseBody(name='body'),
}

async function createSearchStrategy(appGroupIdentity: string, appId: string): CreateSearchStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSearchStrategyWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function createSearchStrategyWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSearchStrategyResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateSearchStrategy',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/search-strategies`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSecondRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateSecondRankResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model CreateSecondRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSecondRankResponseBody(name='body'),
}

async function createSecondRank(appGroupIdentity: string, appId: string, request: CreateSecondRankRequest): CreateSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSecondRankWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function createSecondRankWithOptions(appGroupIdentity: string, appId: string, request: CreateSecondRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSecondRankResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecondRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model CreateSortScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSortScriptResponseBody(name='body'),
}

async function createSortScript(appGroupIdentity: string, appVersionId: string): CreateSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSortScriptWithOptions(appGroupIdentity, appVersionId, headers, runtime);
}

async function createSortScriptWithOptions(appGroupIdentity: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSortScriptResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateSortScript',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateUserAnalyzerResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model CreateUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserAnalyzerResponseBody(name='body'),
}

async function createUserAnalyzer(): CreateUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createUserAnalyzerWithOptions(headers, runtime);
}

async function createUserAnalyzerWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateUserAnalyzerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CreateUserAnalyzer',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/user-analyzers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteABTestExperimentResponseBody(name='body'),
}

async function deleteABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): DeleteABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function deleteABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteABTestExperimentResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  experimentId = OpenApiUtil.getEncodeParam(experimentId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteABTestExperiment',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteABTestGroupResponseBody(name='body'),
}

async function deleteABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string): DeleteABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function deleteABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteABTestGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteABTestGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteABTestSceneResponseBody(name='body'),
}

async function deleteABTestScene(appGroupIdentity: string, sceneId: string): DeleteABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteABTestSceneWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function deleteABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteABTestSceneResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteABTestScene',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteFunctionInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFunctionInstanceResponseBody(name='body'),
}

async function deleteFunctionInstance(appGroupIdentity: string, functionName: string, instanceName: string): DeleteFunctionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFunctionInstanceWithOptions(appGroupIdentity, functionName, instanceName, headers, runtime);
}

async function deleteFunctionInstanceWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFunctionInstanceResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFunctionInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteFunctionTaskResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteFunctionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFunctionTaskResponseBody(name='body'),
}

async function deleteFunctionTask(appGroupIdentity: string, functionName: string, instanceName: string, generation: string): DeleteFunctionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFunctionTaskWithOptions(appGroupIdentity, functionName, instanceName, generation, headers, runtime);
}

async function deleteFunctionTaskWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, generation: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFunctionTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  generation = OpenApiUtil.getEncodeParam(generation);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteFunctionTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}/tasks/${generation}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModel(appGroupIdentity: string, modelName: string): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function deleteModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteModelResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteModel',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteSortScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSortScriptResponseBody(name='body'),
}

async function deleteSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): DeleteSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function deleteSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSortScriptResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSortScript',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSortScriptFileResponseBody(name='body'),
}

async function deleteSortScriptFile(appGroupIdentity: string, appVersionId: string, scriptName: string, fileName: string): DeleteSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSortScriptFileWithOptions(appGroupIdentity, appVersionId, scriptName, fileName, headers, runtime);
}

async function deleteSortScriptFileWithOptions(appGroupIdentity: string, appVersionId: string, scriptName: string, fileName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSortScriptFileResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  fileName = OpenApiUtil.getEncodeParam(fileName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSortScriptFile',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/${fileName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: {
      firstFormulaName?: string(name='first_formula_name'),
    }(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeABTestExperimentResponseBody(name='body'),
}

async function describeABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): DescribeABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function describeABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeABTestExperimentResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  experimentId = OpenApiUtil.getEncodeParam(experimentId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeABTestExperiment',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeABTestGroupResponseBody(name='body'),
}

async function describeABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string): DescribeABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function describeABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeABTestGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeABTestGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    values?: [ string ](name='values'),
  }(name='result'),
}

model DescribeABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeABTestSceneResponseBody(name='body'),
}

async function describeABTestScene(appGroupIdentity: string, sceneId: string): DescribeABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeABTestSceneWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function describeABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeABTestSceneResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeABTestScene',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeAppResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    algoDeploymentId?: int32(name='algoDeploymentId'),
    autoSwitch?: boolean(name='autoSwitch'),
    clusterName?: string(name='clusterName'),
    created?: int32(name='created'),
    description?: string(name='description'),
    domain?: {
      category?: string(name='category'),
      functions?: {
        algo?: [ string ](name='algo'),
        qp?: [ string ](name='qp'),
        service?: [ string ](name='service'),
      }(name='functions'),
      name?: string(name='name'),
    }(name='domain'),
    fetchFields?: [ string ](name='fetchFields'),
    id?: string(name='id'),
    progressPercent?: int32(name='progressPercent'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      qps?: int32(name='qps'),
      spec?: string(name='spec'),
    }(name='quota'),
    schema?: map[string]any(name='schema'),
    status?: string(name='status'),
    type?: string(name='type'),
  }(name='result'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeApp(appGroupIdentity: string, appId: string): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function describeAppWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeApp',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    domain?: string(name='domain'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppGroupResponseBody(name='body'),
}

async function describeAppGroup(appGroupIdentity: string): DescribeAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function describeAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeAppGroupDataReportRequest {
  endTime?: string(name='endTime'),
  startTime?: string(name='startTime'),
}

model DescribeAppGroupDataReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    receivedCount?: int32(name='receivedCount'),
    receivedSample?: [ 
      {
        message?: {
          arg1?: string(name='arg1'),
          arg3?: string(name='arg3'),
          args?: string(name='args'),
          clientIp?: string(name='clientIp'),
          eventId?: int32(name='eventId'),
          page?: string(name='page'),
          sdkType?: string(name='sdkType'),
          sdkVersion?: string(name='sdkVersion'),
          sessionId?: string(name='sessionId'),
          userId?: string(name='userId'),
        }(name='message'),
        receivedTimeMs?: long(name='receivedTimeMs'),
      }
    ](name='receivedSample'),
  }(name='result'),
}

model DescribeAppGroupDataReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppGroupDataReportResponseBody(name='body'),
}

async function describeAppGroupDataReport(appGroupIdentity: string, request: DescribeAppGroupDataReportRequest): DescribeAppGroupDataReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppGroupDataReportWithOptions(appGroupIdentity, request, headers, runtime);
}

async function describeAppGroupDataReportWithOptions(appGroupIdentity: string, request: DescribeAppGroupDataReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppGroupDataReportResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppGroupDataReport',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/data-report`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeAppGroupStatisticsResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeAppGroupStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppGroupStatisticsResponseBody(name='body'),
}

async function describeAppGroupStatistics(appGroupIdentity: string): DescribeAppGroupStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppGroupStatisticsWithOptions(appGroupIdentity, headers, runtime);
}

async function describeAppGroupStatisticsWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppGroupStatisticsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppGroupStatistics',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/statistics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeAppStatisticsResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeAppStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppStatisticsResponseBody(name='body'),
}

async function describeAppStatistics(appGroupIdentity: string, appId: string): DescribeAppStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppStatisticsWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function describeAppStatisticsWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppStatisticsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppStatistics',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/statistics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeAppsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeApps(appGroupIdentity: string): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppsWithOptions(appGroupIdentity, headers, runtime);
}

async function describeAppsWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeApps',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeDataCollctionResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    dataCollectionType?: string(name='dataCollectionType'),
    id?: string(name='id'),
    industryName?: string(name='industryName'),
    name?: string(name='name'),
    status?: int32(name='status'),
    sundialId?: string(name='sundialId'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeDataCollctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataCollctionResponseBody(name='body'),
}

async function describeDataCollction(appGroupIdentity: string, dataCollectionIdentity: string): DescribeDataCollctionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeDataCollctionWithOptions(appGroupIdentity, dataCollectionIdentity, headers, runtime);
}

async function describeDataCollctionWithOptions(appGroupIdentity: string, dataCollectionIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeDataCollctionResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  dataCollectionIdentity = OpenApiUtil.getEncodeParam(dataCollectionIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataCollction',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/data-collections/${dataCollectionIdentity}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model DescribeFirstRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFirstRankResponseBody(name='body'),
}

async function describeFirstRank(appGroupIdentity: string, appId: string, name: string): DescribeFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeFirstRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function describeFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeFirstRankResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeFirstRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    name?: string(name='name'),
    type?: string(name='type'),
    updated?: string(name='updated'),
  }(name='result'),
}

model DescribeInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInterventionDictionaryResponseBody(name='body'),
}

async function describeInterventionDictionary(name: string): DescribeInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeInterventionDictionaryWithOptions(name, headers, runtime);
}

async function describeInterventionDictionaryWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeInterventionDictionaryResponse {
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeInterventionDictionary',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries/${name}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModelResponseBody(name='body'),
}

async function describeModel(appGroupIdentity: string, modelName: string): DescribeModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function describeModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeModelResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeModel',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    name?: string(name='name'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQueryProcessorResponseBody(name='body'),
}

async function describeQueryProcessor(appGroupIdentity: string, appId: string, name: string): DescribeQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeQueryProcessorWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function describeQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeQueryProcessorResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeQueryProcessor',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeRegionResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    config?: map[string]any(name='config'),
    regionId?: string(name='regionId'),
  }(name='result'),
}

model DescribeRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionResponseBody(name='body'),
}

async function describeRegion(): DescribeRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionWithOptions(headers, runtime);
}

async function describeRegionWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRegionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegion',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/region`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      consoleUrl?: string(name='consoleUrl'),
      endpoint?: string(name='endpoint'),
      localName?: string(name='localName'),
      regionId?: string(name='regionId'),
    }
  ](name='result'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionsWithOptions(headers, runtime);
}

async function describeRegionsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/regions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScheduledTaskResponseBody(name='body'),
}

async function describeScheduledTask(appGroupIdentity: string, taskId: string): DescribeScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeScheduledTaskWithOptions(appGroupIdentity, taskId, headers, runtime);
}

async function describeScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeScheduledTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  taskId = OpenApiUtil.getEncodeParam(taskId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeScheduledTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeSecondRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    description?: string(name='description'),
    id?: string(name='id'),
    isDefault?: string(name='isDefault'),
    isSys?: string(name='isSys'),
    meta?: string(name='meta'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model DescribeSecondRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecondRankResponseBody(name='body'),
}

async function describeSecondRank(appGroupIdentity: string, appId: string, name: string): DescribeSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSecondRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function describeSecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSecondRankResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecondRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeSlowQueryStatusResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    appGroupId?: string(name='appGroupId'),
    region?: string(name='region'),
    status?: string(name='status'),
  }(name='result'),
}

model DescribeSlowQueryStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowQueryStatusResponseBody(name='body'),
}

async function describeSlowQueryStatus(appGroupIdentity: string): DescribeSlowQueryStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSlowQueryStatusWithOptions(appGroupIdentity, headers, runtime);
}

async function describeSlowQueryStatusWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSlowQueryStatusResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowQueryStatus',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DescribeUserAnalyzerRequest {
  with?: string(name='with'),
}

model DescribeUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DescribeUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserAnalyzerResponseBody(name='body'),
}

async function describeUserAnalyzer(name: string, request: DescribeUserAnalyzerRequest): DescribeUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserAnalyzerWithOptions(name, request, headers, runtime);
}

async function describeUserAnalyzerWithOptions(name: string, request: DescribeUserAnalyzerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserAnalyzerResponse {
  Util.validateModel(request);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.with)) {
    query['with'] = request.with;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserAnalyzer',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/user-analyzers/${name}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DisableSlowQueryResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DisableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSlowQueryResponseBody(name='body'),
}

async function disableSlowQuery(appGroupIdentity: string): DisableSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableSlowQueryWithOptions(appGroupIdentity, headers, runtime);
}

async function disableSlowQueryWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSlowQueryResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DisableSlowQuery',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/disable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model EnableSlowQueryResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model EnableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSlowQueryResponseBody(name='body'),
}

async function enableSlowQuery(appGroupIdentity: string): EnableSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableSlowQueryWithOptions(appGroupIdentity, headers, runtime);
}

async function enableSlowQueryWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSlowQueryResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'EnableSlowQuery',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/enable`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GenerateMergedTableRequest {
  spec?: string(name='spec'),
}

model GenerateMergedTableResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    fromTable?: map[string]any(name='fromTable'),
    mergeTable?: map[string]any(name='mergeTable'),
    primaryKey?: string(name='primaryKey'),
  }(name='result'),
}

model GenerateMergedTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateMergedTableResponseBody(name='body'),
}

async function generateMergedTable(request: GenerateMergedTableRequest): GenerateMergedTableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateMergedTableWithOptions(request, headers, runtime);
}

async function generateMergedTableWithOptions(request: GenerateMergedTableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateMergedTableResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.spec)) {
    query['spec'] = request.spec;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateMergedTable',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/assist/schema/actions/merge`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDomainRequest {
  appGroupIdentity?: string(name='appGroupIdentity'),
}

model GetDomainResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDomainResponseBody(name='body'),
}

async function getDomain(domainName: string, request: GetDomainRequest): GetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDomainWithOptions(domainName, request, headers, runtime);
}

async function getDomainWithOptions(domainName: string, request: GetDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDomainResponse {
  Util.validateModel(request);
  domainName = OpenApiUtil.getEncodeParam(domainName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appGroupIdentity)) {
    query['appGroupIdentity'] = request.appGroupIdentity;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDomain',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/domains/${domainName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFunctionCurrentVersionRequest {
  category?: string(name='category'),
  domain?: string(name='domain'),
  functionType?: string(name='functionType'),
  modelType?: string(name='modelType'),
}

model GetFunctionCurrentVersionResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    functionName?: string(name='FunctionName'),
    functionType?: string(name='FunctionType'),
    modelType?: string(name='ModelType'),
    versionConfig?: {
      createParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='CreateParameters'),
      depends?: [ 
        {
          condition?: string(name='Condition'),
          dependency?: string(name='Dependency'),
          description?: string(name='Description'),
        }
      ](name='Depends'),
      usageParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='UsageParameters'),
    }(name='VersionConfig'),
    versionId?: long(name='VersionId'),
    versionName?: string(name='VersionName'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionCurrentVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionCurrentVersionResponseBody(name='body'),
}

async function getFunctionCurrentVersion(functionName: string, request: GetFunctionCurrentVersionRequest): GetFunctionCurrentVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFunctionCurrentVersionWithOptions(functionName, request, headers, runtime);
}

async function getFunctionCurrentVersionWithOptions(functionName: string, request: GetFunctionCurrentVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFunctionCurrentVersionResponse {
  Util.validateModel(request);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.domain)) {
    query['domain'] = request.domain;
  }
  if (!Util.isUnset(request.functionType)) {
    query['functionType'] = request.functionType;
  }
  if (!Util.isUnset(request.modelType)) {
    query['modelType'] = request.modelType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFunctionCurrentVersion',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/functions/${functionName}/current-version`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFunctionDefaultInstanceResponseBody = {
  code?: string(name='Code'),
  functionName?: string(name='FunctionName', description='功能名称'),
  httpCode?: long(name='HttpCode'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    instanceName?: string(name='InstanceName'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionDefaultInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionDefaultInstanceResponseBody(name='body'),
}

async function getFunctionDefaultInstance(appGroupIdentity: string, functionName: string): GetFunctionDefaultInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFunctionDefaultInstanceWithOptions(appGroupIdentity, functionName, headers, runtime);
}

async function getFunctionDefaultInstanceWithOptions(appGroupIdentity: string, functionName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetFunctionDefaultInstanceResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetFunctionDefaultInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/default-instance`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFunctionInstanceRequest {
  output?: string(name='output'),
}

model GetFunctionInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    belongs?: {
      category?: string(name='Category'),
      domain?: string(name='Domain'),
      language?: string(name='Language'),
    }(name='Belongs'),
    createParameters?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='CreateParameters'),
    createTime?: long(name='CreateTime'),
    cron?: string(name='Cron'),
    description?: string(name='Description'),
    extendInfo?: string(name='ExtendInfo'),
    functionName?: string(name='FunctionName'),
    functionType?: string(name='FunctionType'),
    instanceName?: string(name='InstanceName'),
    modelType?: string(name='ModelType'),
    source?: string(name='Source'),
    status?: string(name='Status'),
    task?: {
      dagStatus?: string(name='DagStatus'),
      lastRunTime?: long(name='LastRunTime'),
    }(name='Task'),
    usageParameters?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='UsageParameters'),
    versionId?: long(name='VersionId'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionInstanceResponseBody(name='body'),
}

async function getFunctionInstance(appGroupIdentity: string, functionName: string, instanceName: string, request: GetFunctionInstanceRequest): GetFunctionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFunctionInstanceWithOptions(appGroupIdentity, functionName, instanceName, request, headers, runtime);
}

async function getFunctionInstanceWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, request: GetFunctionInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFunctionInstanceResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.output)) {
    query['output'] = request.output;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFunctionInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFunctionTaskResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    endTime?: long(name='EndTime'),
    extendInfo?: string(name='ExtendInfo'),
    functionName?: string(name='FunctionName'),
    generation?: string(name='Generation'),
    progress?: long(name='Progress'),
    runId?: string(name='RunId'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionTaskResponseBody(name='body'),
}

async function getFunctionTask(appGroupIdentity: string, functionName: string, instanceName: string, generation: string): GetFunctionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFunctionTaskWithOptions(appGroupIdentity, functionName, instanceName, generation, headers, runtime);
}

async function getFunctionTaskWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, generation: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetFunctionTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  generation = OpenApiUtil.getEncodeParam(generation);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetFunctionTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}/tasks/${generation}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetFunctionVersionResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    functionName?: string(name='FunctionName'),
    functionType?: string(name='FunctionType'),
    modelType?: string(name='ModelType'),
    versionConfig?: {
      createParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='CreateParameters'),
      depends?: [ 
        {
          condition?: string(name='Condition'),
          dependency?: string(name='Dependency'),
          description?: string(name='Description'),
        }
      ](name='Depends'),
      usageParameters?: [ 
        {
          name?: string(name='Name'),
          required?: string(name='Required'),
        }
      ](name='UsageParameters'),
    }(name='VersionConfig'),
    versionId?: long(name='VersionId'),
    versionName?: string(name='VersionName'),
  }(name='Result'),
  status?: string(name='Status'),
}

model GetFunctionVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFunctionVersionResponseBody(name='body'),
}

async function getFunctionVersion(functionName: string, versionId: string): GetFunctionVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFunctionVersionWithOptions(functionName, versionId, headers, runtime);
}

async function getFunctionVersionWithOptions(functionName: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetFunctionVersionResponse {
  functionName = OpenApiUtil.getEncodeParam(functionName);
  versionId = OpenApiUtil.getEncodeParam(versionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetFunctionVersion',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/functions/${functionName}/versions/${versionId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetModelProgressResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    progress?: int32(name='progress'),
    status?: string(name='status'),
  }(name='result'),
}

model GetModelProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetModelProgressResponseBody(name='body'),
}

async function getModelProgress(appGroupIdentity: string, modelName: string): GetModelProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelProgressWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function getModelProgressWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetModelProgressResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetModelProgress',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/progress`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetModelReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetModelReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetModelReportResponseBody(name='body'),
}

async function getModelReport(appGroupIdentity: string, modelName: string): GetModelReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelReportWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function getModelReportWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetModelReportResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetModelReport',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/report`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetScriptFileNamesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      createTime?: string(name='createTime'),
      fileName?: string(name='fileName'),
      modifyTime?: string(name='modifyTime'),
    }
  ](name='result'),
}

model GetScriptFileNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetScriptFileNamesResponseBody(name='body'),
}

async function getScriptFileNames(appGroupIdentity: string, appVersionId: string, scriptName: string): GetScriptFileNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getScriptFileNamesWithOptions(appGroupIdentity, appVersionId, scriptName, headers, runtime);
}

async function getScriptFileNamesWithOptions(appGroupIdentity: string, appVersionId: string, scriptName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetScriptFileNamesResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetScriptFileNames',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/file-names`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model GetSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSearchStrategyResponseBody(name='body'),
}

async function getSearchStrategy(appGroupIdentity: string, appId: string, strategyName: string): GetSearchStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSearchStrategyWithOptions(appGroupIdentity, appId, strategyName, headers, runtime);
}

async function getSearchStrategyWithOptions(appGroupIdentity: string, appId: string, strategyName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSearchStrategyResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  strategyName = OpenApiUtil.getEncodeParam(strategyName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSearchStrategy',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/search-strategies/${strategyName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSortScriptResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    createTime?: string(name='createTime'),
    modifyTime?: string(name='modifyTime'),
    scope?: string(name='scope'),
    status?: string(name='status'),
    type?: string(name='type'),
  }(name='result'),
}

model GetSortScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSortScriptResponseBody(name='body'),
}

async function getSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): GetSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function getSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSortScriptResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSortScript',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    content?: string(name='content'),
    createTime?: string(name='createTime'),
    modifyTime?: string(name='modifyTime'),
    version?: long(name='version'),
  }(name='result'),
}

model GetSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSortScriptFileResponseBody(name='body'),
}

async function getSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string): GetSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, fileName, headers, runtime);
}

async function getSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSortScriptFileResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  fileName = OpenApiUtil.getEncodeParam(fileName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSortScriptFile',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/${fileName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetValidationErrorRequest {
  errorCode?: string(name='errorCode'),
}

model GetValidationErrorResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model GetValidationErrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetValidationErrorResponseBody(name='body'),
}

async function getValidationError(appGroupIdentity: string, request: GetValidationErrorRequest): GetValidationErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getValidationErrorWithOptions(appGroupIdentity, request, headers, runtime);
}

async function getValidationErrorWithOptions(appGroupIdentity: string, request: GetValidationErrorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetValidationErrorResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.errorCode)) {
    query['errorCode'] = request.errorCode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetValidationError',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/data/validation-error`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetValidationReportRequest {
  type?: string(name='type'),
}

model GetValidationReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model GetValidationReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetValidationReportResponseBody(name='body'),
}

async function getValidationReport(appGroupIdentity: string, request: GetValidationReportRequest): GetValidationReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getValidationReportWithOptions(appGroupIdentity, request, headers, runtime);
}

async function getValidationReportWithOptions(appGroupIdentity: string, request: GetValidationReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetValidationReportResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetValidationReport',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/data/validation-report`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListABTestExperimentsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      id?: string(name='id'),
      name?: string(name='name'),
      online?: boolean(name='online'),
      params?: map[string]any(name='params'),
      traffic?: int32(name='traffic'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListABTestExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListABTestExperimentsResponseBody(name='body'),
}

async function listABTestExperiments(appGroupIdentity: string, sceneId: string, groupId: string): ListABTestExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestExperimentsWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function listABTestExperimentsWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestExperimentsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListABTestExperiments',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListABTestFixedFlowDividersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model ListABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListABTestFixedFlowDividersResponseBody(name='body'),
}

async function listABTestFixedFlowDividers(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): ListABTestFixedFlowDividersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestFixedFlowDividersWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function listABTestFixedFlowDividersWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestFixedFlowDividersResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  experimentId = OpenApiUtil.getEncodeParam(experimentId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListABTestFixedFlowDividers',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}/fixed-flow-dividers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListABTestGroupsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      id?: string(name='id'),
      name?: string(name='name'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListABTestGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListABTestGroupsResponseBody(name='body'),
}

async function listABTestGroups(appGroupIdentity: string, sceneId: string): ListABTestGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestGroupsWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function listABTestGroupsWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestGroupsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListABTestGroups',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListABTestMetricsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      ctr?: float(name='ctr'),
      date?: string(name='date'),
      experimentName?: string(name='experimentName'),
      ipv?: int32(name='ipv'),
      ipvUv?: int32(name='ipvUv'),
      pv?: int32(name='pv'),
      uv?: int32(name='uv'),
      zeroHitRate?: float(name='zeroHitRate'),
    }
  ](name='result'),
}

model ListABTestMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListABTestMetricsResponseBody(name='body'),
}

async function listABTestMetrics(appGroupIdentity: string, sceneId: string, groupId: string): ListABTestMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestMetricsWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function listABTestMetricsWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestMetricsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListABTestMetrics',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListABTestScenesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      id?: string(name='id'),
      name?: string(name='name'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
      values?: [ string ](name='values'),
    }
  ](name='result'),
}

model ListABTestScenesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListABTestScenesResponseBody(name='body'),
}

async function listABTestScenes(appGroupIdentity: string): ListABTestScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestScenesWithOptions(appGroupIdentity, headers, runtime);
}

async function listABTestScenesWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestScenesResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListABTestScenes',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAppGroupErrorsRequest {
  appId?: string(name='appId'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  startTime?: int32(name='startTime'),
  stopTime?: int32(name='stopTime'),
}

model ListAppGroupErrorsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListAppGroupErrorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppGroupErrorsResponseBody(name='body'),
}

async function listAppGroupErrors(appGroupIdentity: string, request: ListAppGroupErrorsRequest): ListAppGroupErrorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppGroupErrorsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listAppGroupErrorsWithOptions(appGroupIdentity: string, request: ListAppGroupErrorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppGroupErrorsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    query['appId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.stopTime)) {
    query['stopTime'] = request.stopTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppGroupErrors',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/errors`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAppGroupMetricsRequest {
  endTime?: int32(name='endTime'),
  indexes?: string(name='indexes'),
  metricType?: string(name='metricType'),
  startTime?: int32(name='startTime'),
}

model ListAppGroupMetricsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model ListAppGroupMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppGroupMetricsResponseBody(name='body'),
}

async function listAppGroupMetrics(appGroupIdentity: string, request: ListAppGroupMetricsRequest): ListAppGroupMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppGroupMetricsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listAppGroupMetricsWithOptions(appGroupIdentity: string, request: ListAppGroupMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppGroupMetricsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.indexes)) {
    query['indexes'] = request.indexes;
  }
  if (!Util.isUnset(request.metricType)) {
    query['metricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppGroupMetrics',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAppGroupsRequest {
  instanceId?: string(name='instanceId'),
  name?: string(name='name'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  resourceGroupId?: string(name='resourceGroupId'),
  sortBy?: int32(name='sortBy'),
  type?: string(name='type'),
}

model ListAppGroupsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      chargeType?: string(name='chargeType'),
      chargingWay?: int32(name='chargingWay'),
      commodityCode?: string(name='commodityCode'),
      created?: int32(name='created'),
      currentVersion?: string(name='currentVersion'),
      description?: string(name='description'),
      domain?: string(name='domain'),
      expireOn?: string(name='expireOn'),
      firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
      hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
      id?: string(name='id'),
      instanceId?: string(name='instanceId'),
      lockMode?: string(name='lockMode'),
      lockedByExpiration?: int32(name='lockedByExpiration'),
      name?: string(name='name'),
      pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
      processingOrderId?: string(name='processingOrderId'),
      produced?: int32(name='produced'),
      projectId?: string(name='projectId'),
      quota?: {
        computeResource?: int32(name='computeResource'),
        docSize?: int32(name='docSize'),
        spec?: string(name='spec'),
      }(name='quota'),
      secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
      status?: string(name='status'),
      switchedTime?: int32(name='switchedTime'),
      type?: string(name='type'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListAppGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppGroupsResponseBody(name='body'),
}

async function listAppGroups(request: ListAppGroupsRequest): ListAppGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppGroupsWithOptions(request, headers, runtime);
}

async function listAppGroupsWithOptions(request: ListAppGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.instanceId)) {
    query['instanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['sortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppGroups',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAppsRequest {
  group?: boolean(name='group'),
  page?: int32(name='page'),
  size?: int32(name='size'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppsWithOptions(request, headers, runtime);
}

async function listAppsWithOptions(request: ListAppsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.group)) {
    query['group'] = request.group;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApps',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/apps`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model ListDataCollectionsRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListDataCollectionsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      created?: int32(name='created'),
      dataCollectionType?: string(name='dataCollectionType'),
      id?: string(name='id'),
      industryName?: string(name='industryName'),
      name?: string(name='name'),
      status?: int32(name='status'),
      sundialId?: string(name='sundialId'),
      type?: string(name='type'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListDataCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataCollectionsResponseBody(name='body'),
}

async function listDataCollections(appGroupIdentity: string, request: ListDataCollectionsRequest): ListDataCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataCollectionsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listDataCollectionsWithOptions(appGroupIdentity: string, request: ListDataCollectionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataCollectionsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataCollections',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/data-collections`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDataSourceTableFieldsRequest {
  params?: string(name='params'),
}

model ListDataSourceTableFieldsResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model ListDataSourceTableFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceTableFieldsResponseBody(name='body'),
}

async function listDataSourceTableFields(dataSourceType: string, request: ListDataSourceTableFieldsRequest): ListDataSourceTableFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourceTableFieldsWithOptions(dataSourceType, request, headers, runtime);
}

async function listDataSourceTableFieldsWithOptions(dataSourceType: string, request: ListDataSourceTableFieldsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourceTableFieldsResponse {
  Util.validateModel(request);
  dataSourceType = OpenApiUtil.getEncodeParam(dataSourceType);
  var query : map[string]any= {};
  if (!Util.isUnset(request.params)) {
    query['params'] = request.params;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceTableFields',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/assist/data-sources/${dataSourceType}/fields`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDataSourceTablesRequest {
  params?: string(name='params'),
}

model ListDataSourceTablesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model ListDataSourceTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceTablesResponseBody(name='body'),
}

async function listDataSourceTables(dataSourceType: string, request: ListDataSourceTablesRequest): ListDataSourceTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourceTablesWithOptions(dataSourceType, request, headers, runtime);
}

async function listDataSourceTablesWithOptions(dataSourceType: string, request: ListDataSourceTablesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourceTablesResponse {
  Util.validateModel(request);
  dataSourceType = OpenApiUtil.getEncodeParam(dataSourceType);
  var query : map[string]any= {};
  if (!Util.isUnset(request.params)) {
    query['params'] = request.params;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceTables',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/assist/data-sources/${dataSourceType}/tables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDeployedAlgorithmModelsRequest {
  algorithmType?: string(name='algorithmType'),
  inServiceOnly?: boolean(name='inServiceOnly'),
}

model ListDeployedAlgorithmModelsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      appGroupName?: string(name='appGroupName'),
      apps?: [ string ](name='apps'),
      desc?: string(name='desc'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      id?: string(name='id'),
      models?: [ 
        {
          algorithmType?: string(name='algorithmType'),
          modelId?: int32(name='modelId'),
          modelName?: string(name='modelName'),
          progress?: int32(name='progress'),
          projectId?: int32(name='projectId'),
          status?: string(name='status'),
        }
      ](name='models'),
      scene?: string(name='scene'),
      status?: string(name='status'),
    }
  ](name='result'),
}

model ListDeployedAlgorithmModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeployedAlgorithmModelsResponseBody(name='body'),
}

async function listDeployedAlgorithmModels(appGroupIdentity: string, request: ListDeployedAlgorithmModelsRequest): ListDeployedAlgorithmModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDeployedAlgorithmModelsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listDeployedAlgorithmModelsWithOptions(appGroupIdentity: string, request: ListDeployedAlgorithmModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDeployedAlgorithmModelsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.algorithmType)) {
    query['algorithmType'] = request.algorithmType;
  }
  if (!Util.isUnset(request.inServiceOnly)) {
    query['inServiceOnly'] = request.inServiceOnly;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployedAlgorithmModels',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/deployed-algorithm-models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListFirstRanksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      description?: string(name='description'),
      meta?: [ 
        {
          arg?: string(name='arg'),
          attribute?: string(name='attribute'),
          weight?: int32(name='weight'),
        }
      ](name='meta'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListFirstRanksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFirstRanksResponseBody(name='body'),
}

async function listFirstRanks(appGroupIdentity: string, appId: string): ListFirstRanksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFirstRanksWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listFirstRanksWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListFirstRanksResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListFirstRanks',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListFunctionInstancesRequest {
  functionType?: string(name='functionType', description='功能类型'),
  modelType?: string(name='modelType', description='模型类型'),
  output?: string(name='output', description='返回信息的丰富度'),
  pageNumber?: int32(name='pageNumber', description='页码'),
  pageSize?: int32(name='pageSize', description='每页大小'),
  source?: string(name='source', description='实例来源'),
}

model ListFunctionInstancesResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      belongs?: {
        category?: string(name='Category'),
        domain?: string(name='Domain'),
        language?: string(name='Language'),
      }(name='Belongs'),
      createParameters?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='CreateParameters'),
      createTime?: long(name='CreateTime'),
      cron?: string(name='Cron'),
      description?: string(name='Description'),
      extendInfo?: string(name='ExtendInfo'),
      functionName?: string(name='FunctionName'),
      functionType?: string(name='FunctionType'),
      instanceName?: string(name='InstanceName'),
      modelType?: string(name='ModelType'),
      source?: string(name='Source'),
      status?: string(name='Status'),
      usageParameters?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='UsageParameters'),
      versionId?: long(name='VersionId'),
    }
  ](name='Result'),
  status?: string(name='Status'),
  totalCount?: long(name='TotalCount'),
}

model ListFunctionInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFunctionInstancesResponseBody(name='body'),
}

async function listFunctionInstances(appGroupIdentity: string, functionName: string, request: ListFunctionInstancesRequest): ListFunctionInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFunctionInstancesWithOptions(appGroupIdentity, functionName, request, headers, runtime);
}

async function listFunctionInstancesWithOptions(appGroupIdentity: string, functionName: string, request: ListFunctionInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFunctionInstancesResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.functionType)) {
    query['functionType'] = request.functionType;
  }
  if (!Util.isUnset(request.modelType)) {
    query['modelType'] = request.modelType;
  }
  if (!Util.isUnset(request.output)) {
    query['output'] = request.output;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.source)) {
    query['source'] = request.source;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFunctionInstances',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListFunctionTasksRequest {
  endTime?: long(name='endTime'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  startTime?: long(name='startTime'),
  status?: string(name='status'),
}

model ListFunctionTasksResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      endTime?: long(name='EndTime'),
      extendInfo?: string(name='ExtendInfo'),
      functionName?: string(name='FunctionName'),
      generation?: string(name='Generation'),
      progress?: long(name='Progress'),
      runId?: string(name='RunId'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Result'),
  status?: string(name='Status'),
  totalCount?: long(name='TotalCount'),
}

model ListFunctionTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFunctionTasksResponseBody(name='body'),
}

async function listFunctionTasks(appGroupIdentity: string, functionName: string, instanceName: string, request: ListFunctionTasksRequest): ListFunctionTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFunctionTasksWithOptions(appGroupIdentity, functionName, instanceName, request, headers, runtime);
}

async function listFunctionTasksWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, request: ListFunctionTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFunctionTasksResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFunctionTasks',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInterventionDictionariesRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  types?: string(name='types'),
}

model ListInterventionDictionariesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      analyzer?: string(name='analyzer'),
      created?: int32(name='created'),
      id?: int32(name='id'),
      name?: string(name='name'),
      type?: string(name='type'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListInterventionDictionariesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterventionDictionariesResponseBody(name='body'),
}

async function listInterventionDictionaries(request: ListInterventionDictionariesRequest): ListInterventionDictionariesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionariesWithOptions(request, headers, runtime);
}

async function listInterventionDictionariesWithOptions(request: ListInterventionDictionariesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionariesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.types)) {
    query['types'] = request.types;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterventionDictionaries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInterventionDictionaryEntriesRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  word?: string(name='word'),
}

model ListInterventionDictionaryEntriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      cmd?: string(name='cmd'),
      created?: long(name='created'),
      relevance?: map[string]any(name='relevance'),
      status?: string(name='status'),
      tokens?: [ 
        {
          order?: int32(name='order'),
          tag?: string(name='tag'),
          tagLabel?: string(name='tagLabel'),
          token?: string(name='token'),
        }
      ](name='tokens'),
      updated?: long(name='updated'),
      word?: string(name='word'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterventionDictionaryEntriesResponseBody(name='body'),
}

async function listInterventionDictionaryEntries(name: string, request: ListInterventionDictionaryEntriesRequest): ListInterventionDictionaryEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionaryEntriesWithOptions(name, request, headers, runtime);
}

async function listInterventionDictionaryEntriesWithOptions(name: string, request: ListInterventionDictionaryEntriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionaryEntriesResponse {
  Util.validateModel(request);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.word)) {
    query['word'] = request.word;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterventionDictionaryEntries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries/${name}/entries`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInterventionDictionaryNerResultsRequest {
  query?: string(name='query'),
}

model ListInterventionDictionaryNerResultsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      order?: int32(name='order'),
      tag?: string(name='tag'),
      tagLabel?: string(name='tagLabel'),
      token?: string(name='token'),
    }
  ](name='result'),
}

model ListInterventionDictionaryNerResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterventionDictionaryNerResultsResponseBody(name='body'),
}

async function listInterventionDictionaryNerResults(name: string, request: ListInterventionDictionaryNerResultsRequest): ListInterventionDictionaryNerResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionaryNerResultsWithOptions(name, request, headers, runtime);
}

async function listInterventionDictionaryNerResultsWithOptions(name: string, request: ListInterventionDictionaryNerResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionaryNerResultsResponse {
  Util.validateModel(request);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterventionDictionaryNerResults',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries/${name}/ner-results`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInterventionDictionaryRelatedEntitiesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model ListInterventionDictionaryRelatedEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterventionDictionaryRelatedEntitiesResponseBody(name='body'),
}

async function listInterventionDictionaryRelatedEntities(name: string): ListInterventionDictionaryRelatedEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionaryRelatedEntitiesWithOptions(name, headers, runtime);
}

async function listInterventionDictionaryRelatedEntitiesWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionaryRelatedEntitiesResponse {
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListInterventionDictionaryRelatedEntities',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries/${name}/related`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListModelsRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  type?: string(name='type'),
}

model ListModelsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
}

model ListModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListModelsResponseBody(name='body'),
}

async function listModels(appGroupIdentity: string, request: ListModelsRequest): ListModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listModelsWithOptions(appGroupIdentity: string, request: ListModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListModelsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListModels',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProceedingsRequest {
  filterFinished?: boolean(name='filterFinished'),
}

model ListProceedingsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProceedingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProceedingsResponseBody(name='body'),
}

async function listProceedings(appGroupIdentity: string, request: ListProceedingsRequest): ListProceedingsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProceedingsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listProceedingsWithOptions(appGroupIdentity: string, request: ListProceedingsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProceedingsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.filterFinished)) {
    query['filterFinished'] = request.filterFinished;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProceedings',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/proceedings`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQueryProcessorAnalyzerResultsRequest {
  text?: string(name='text'),
}

model ListQueryProcessorAnalyzerResultsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model ListQueryProcessorAnalyzerResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueryProcessorAnalyzerResultsResponseBody(name='body'),
}

async function listQueryProcessorAnalyzerResults(appGroupIdentity: string, appId: string, name: string, request: ListQueryProcessorAnalyzerResultsRequest): ListQueryProcessorAnalyzerResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQueryProcessorAnalyzerResultsWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function listQueryProcessorAnalyzerResultsWithOptions(appGroupIdentity: string, appId: string, name: string, request: ListQueryProcessorAnalyzerResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQueryProcessorAnalyzerResultsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.text)) {
    query['text'] = request.text;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueryProcessorAnalyzerResults',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}/analyze`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQueryProcessorNersRequest {
  domain?: string(name='domain'),
}

model ListQueryProcessorNersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      label?: string(name='label'),
      order?: int32(name='order'),
      priority?: string(name='priority'),
      tag?: string(name='tag'),
    }
  ](name='result'),
}

model ListQueryProcessorNersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueryProcessorNersResponseBody(name='body'),
}

async function listQueryProcessorNers(request: ListQueryProcessorNersRequest): ListQueryProcessorNersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQueryProcessorNersWithOptions(request, headers, runtime);
}

async function listQueryProcessorNersWithOptions(request: ListQueryProcessorNersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQueryProcessorNersResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.domain)) {
    query['domain'] = request.domain;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueryProcessorNers',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/query-processor/ner/default-priorities`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQueryProcessorsRequest {
  isActive?: int32(name='isActive'),
}

model ListQueryProcessorsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      domain?: string(name='domain'),
      indexes?: [ string ](name='indexes'),
      name?: string(name='name'),
      processors?: [  map[string]any ](name='processors'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListQueryProcessorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQueryProcessorsResponseBody(name='body'),
}

async function listQueryProcessors(appGroupIdentity: string, appId: string, request: ListQueryProcessorsRequest): ListQueryProcessorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQueryProcessorsWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function listQueryProcessorsWithOptions(appGroupIdentity: string, appId: string, request: ListQueryProcessorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQueryProcessorsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.isActive)) {
    query['isActive'] = request.isActive;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueryProcessors',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQuotaReviewTasksRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListQuotaReviewTasksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      appGroupId?: int32(name='appGroupId'),
      appGroupName?: string(name='appGroupName'),
      appGroupType?: string(name='appGroupType'),
      approved?: boolean(name='approved'),
      available?: boolean(name='available'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      id?: int32(name='id'),
      memo?: string(name='memo'),
      newComputeResource?: int32(name='newComputeResource'),
      newSocSize?: int32(name='newSocSize'),
      newSpec?: string(name='newSpec'),
      oldComputeResource?: int32(name='oldComputeResource'),
      oldDocSize?: int32(name='oldDocSize'),
      oldSpec?: string(name='oldSpec'),
      pending?: boolean(name='pending'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListQuotaReviewTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuotaReviewTasksResponseBody(name='body'),
}

async function listQuotaReviewTasks(appGroupIdentity: string, request: ListQuotaReviewTasksRequest): ListQuotaReviewTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotaReviewTasksWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listQuotaReviewTasksWithOptions(appGroupIdentity: string, request: ListQuotaReviewTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotaReviewTasksResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotaReviewTasks',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/quota-review-tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRamRolesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      assumed?: boolean(name='assumed'),
      name?: string(name='name'),
      service?: string(name='service'),
      templateId?: string(name='template_id'),
    }
  ](name='result'),
}

model ListRamRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRamRolesResponseBody(name='body'),
}

async function listRamRoles(): ListRamRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRamRolesWithOptions(headers, runtime);
}

async function listRamRolesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListRamRolesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListRamRoles',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/assist/ram/roles`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListScheduledTasksRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  type?: string(name='type'),
}

model ListScheduledTasksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListScheduledTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListScheduledTasksResponseBody(name='body'),
}

async function listScheduledTasks(appGroupIdentity: string, request: ListScheduledTasksRequest): ListScheduledTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listScheduledTasksWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listScheduledTasksWithOptions(appGroupIdentity: string, request: ListScheduledTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListScheduledTasksResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScheduledTasks',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSearchStrategiesResponseBody = {
  requestId?: string(name='requestId'),
}

model ListSearchStrategiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSearchStrategiesResponseBody(name='body'),
}

async function listSearchStrategies(appGroupIdentity: string, appId: string): ListSearchStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSearchStrategiesWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listSearchStrategiesWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSearchStrategiesResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSearchStrategies',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/search-strategies`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSecondRanksResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      description?: string(name='description'),
      id?: string(name='id'),
      isDefault?: string(name='isDefault'),
      isSys?: string(name='isSys'),
      meta?: string(name='meta'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListSecondRanksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecondRanksResponseBody(name='body'),
}

async function listSecondRanks(appGroupIdentity: string, appId: string): ListSecondRanksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSecondRanksWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listSecondRanksWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSecondRanksResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSecondRanks',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSlowQueryCategoriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzeStatus?: string(name='analyzeStatus'),
    end?: int32(name='end'),
    start?: int32(name='start'),
  }(name='result'),
}

model ListSlowQueryCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSlowQueryCategoriesResponseBody(name='body'),
}

async function listSlowQueryCategories(appGroupIdentity: string): ListSlowQueryCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSlowQueryCategoriesWithOptions(appGroupIdentity, headers, runtime);
}

async function listSlowQueryCategoriesWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlowQueryCategoriesResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSlowQueryCategories',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/categories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSlowQueryQueriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    appQuery?: string(name='appQuery'),
    end?: int32(name='end'),
    index?: int32(name='index'),
    start?: int32(name='start'),
  }(name='result'),
}

model ListSlowQueryQueriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSlowQueryQueriesResponseBody(name='body'),
}

async function listSlowQueryQueries(appGroupIdentity: string, categoryIndex: string): ListSlowQueryQueriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSlowQueryQueriesWithOptions(appGroupIdentity, categoryIndex, headers, runtime);
}

async function listSlowQueryQueriesWithOptions(appGroupIdentity: string, categoryIndex: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlowQueryQueriesResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  categoryIndex = OpenApiUtil.getEncodeParam(categoryIndex);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSlowQueryQueries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/categories/${categoryIndex}/queries`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSortExpressionsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      active?: boolean(name='active'),
      created?: int32(name='created'),
      description?: string(name='description'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
}

model ListSortExpressionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSortExpressionsResponseBody(name='body'),
}

async function listSortExpressions(appGroupIdentity: string, appId: string): ListSortExpressionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSortExpressionsWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listSortExpressionsWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSortExpressionsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSortExpressions',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/sort-expressions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSortScriptsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      createTime?: string(name='createTime'),
      modifyTime?: string(name='modifyTime'),
      scope?: string(name='scope'),
      scriptName?: string(name='scriptName'),
      status?: string(name='status'),
      type?: string(name='type'),
    }
  ](name='result'),
}

model ListSortScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSortScriptsResponseBody(name='body'),
}

async function listSortScripts(appGroupIdentity: string, appVersionId: string): ListSortScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSortScriptsWithOptions(appGroupIdentity, appVersionId, headers, runtime);
}

async function listSortScriptsWithOptions(appGroupIdentity: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSortScriptsResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListSortScripts',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListStatisticLogsRequest {
  columns?: string(name='columns'),
  distinct?: boolean(name='distinct'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  query?: string(name='query'),
  sortBy?: string(name='sortBy'),
  startTime?: int32(name='startTime'),
  stopTime?: int32(name='stopTime'),
}

model ListStatisticLogsResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListStatisticLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStatisticLogsResponseBody(name='body'),
}

async function listStatisticLogs(appGroupIdentity: string, moduleName: string, request: ListStatisticLogsRequest): ListStatisticLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listStatisticLogsWithOptions(appGroupIdentity, moduleName, request, headers, runtime);
}

async function listStatisticLogsWithOptions(appGroupIdentity: string, moduleName: string, request: ListStatisticLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListStatisticLogsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  moduleName = OpenApiUtil.getEncodeParam(moduleName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.columns)) {
    query['columns'] = request.columns;
  }
  if (!Util.isUnset(request.distinct)) {
    query['distinct'] = request.distinct;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['sortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }
  if (!Util.isUnset(request.stopTime)) {
    query['stopTime'] = request.stopTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListStatisticLogs',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/statistic-logs/${moduleName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListStatisticReportRequest {
  columns?: string(name='columns'),
  endTime?: int32(name='endTime'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  query?: string(name='query'),
  startTime?: int32(name='startTime'),
}

model ListStatisticReportResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model ListStatisticReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStatisticReportResponseBody(name='body'),
}

async function listStatisticReport(appGroupIdentity: string, moduleName: string, request: ListStatisticReportRequest): ListStatisticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listStatisticReportWithOptions(appGroupIdentity, moduleName, request, headers, runtime);
}

async function listStatisticReportWithOptions(appGroupIdentity: string, moduleName: string, request: ListStatisticReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListStatisticReportResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  moduleName = OpenApiUtil.getEncodeParam(moduleName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.columns)) {
    query['columns'] = request.columns;
  }
  if (!Util.isUnset(request.endTime)) {
    query['endTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }
  if (!Util.isUnset(request.startTime)) {
    query['startTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListStatisticReport',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/statistic-report/${moduleName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListUserAnalyzerEntriesRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  word?: string(name='word'),
}

model ListUserAnalyzerEntriesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model ListUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserAnalyzerEntriesResponseBody(name='body'),
}

async function listUserAnalyzerEntries(name: string, request: ListUserAnalyzerEntriesRequest): ListUserAnalyzerEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserAnalyzerEntriesWithOptions(name, request, headers, runtime);
}

async function listUserAnalyzerEntriesWithOptions(name: string, request: ListUserAnalyzerEntriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserAnalyzerEntriesResponse {
  Util.validateModel(request);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.word)) {
    query['word'] = request.word;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserAnalyzerEntries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/user-analyzers/${name}/entries`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListUserAnalyzersRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListUserAnalyzersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ 
    {
      available?: boolean(name='available'),
      business?: string(name='business'),
      created?: int32(name='created'),
      dicts?: [ 
        {
          available?: boolean(name='available'),
          created?: int32(name='created'),
          entriesCount?: int32(name='entriesCount'),
          entriesLimit?: int32(name='entriesLimit'),
          id?: string(name='id'),
          type?: string(name='type'),
          updated?: int32(name='updated'),
        }
      ](name='dicts'),
      id?: string(name='id'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
    }
  ](name='result'),
  totalCount?: int32(name='totalCount'),
}

model ListUserAnalyzersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserAnalyzersResponseBody(name='body'),
}

async function listUserAnalyzers(request: ListUserAnalyzersRequest): ListUserAnalyzersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserAnalyzersWithOptions(request, headers, runtime);
}

async function listUserAnalyzersWithOptions(request: ListUserAnalyzersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserAnalyzersResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserAnalyzers',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/user-analyzers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifyAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    domain?: string(name='domain'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifyAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppGroupResponseBody(name='body'),
}

async function modifyAppGroup(appGroupIdentity: string): ModifyAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function modifyAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyAppGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifyAppGroupQuotaResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifyAppGroupQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppGroupQuotaResponseBody(name='body'),
}

async function modifyAppGroupQuota(appGroupIdentity: string): ModifyAppGroupQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyAppGroupQuotaWithOptions(appGroupIdentity, headers, runtime);
}

async function modifyAppGroupQuotaWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyAppGroupQuotaResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppGroupQuota',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/quota`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifyFirstRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model ModifyFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model ModifyFirstRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFirstRankResponseBody(name='body'),
}

async function modifyFirstRank(appGroupIdentity: string, appId: string, name: string, request: ModifyFirstRankRequest): ModifyFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyFirstRankWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function modifyFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifyFirstRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyFirstRankResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFirstRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifyModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModel(appGroupIdentity: string, modelName: string): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function modifyModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyModelResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyModel',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifyQueryProcessorRequest {
  dryRun?: boolean(name='dryRun'),
}

model ModifyQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    name?: string(name='name'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifyQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyQueryProcessorResponseBody(name='body'),
}

async function modifyQueryProcessor(appGroupIdentity: string, appId: string, name: string, request: ModifyQueryProcessorRequest): ModifyQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyQueryProcessorWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function modifyQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifyQueryProcessorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyQueryProcessorResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyQueryProcessor',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifyScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model ModifyScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyScheduledTaskResponseBody(name='body'),
}

async function modifyScheduledTask(appGroupIdentity: string, taskId: string): ModifyScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyScheduledTaskWithOptions(appGroupIdentity, taskId, headers, runtime);
}

async function modifyScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyScheduledTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  taskId = OpenApiUtil.getEncodeParam(taskId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ModifyScheduledTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ModifySecondRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model ModifySecondRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    created?: int32(name='created'),
    description?: string(name='description'),
    id?: string(name='id'),
    isDefault?: string(name='isDefault'),
    isSys?: string(name='isSys'),
    meta?: string(name='meta'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model ModifySecondRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecondRankResponseBody(name='body'),
}

async function modifySecondRank(appGroupIdentity: string, appId: string, name: string, request: ModifySecondRankRequest): ModifySecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifySecondRankWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function modifySecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifySecondRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifySecondRankResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecondRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PreviewModelRequest {
  query?: string(name='query'),
}

model PreviewModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: [  map[string]any ](name='result'),
  totalCount?: long(name='totalCount'),
}

model PreviewModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PreviewModelResponseBody(name='body'),
}

async function previewModel(appGroupIdentity: string, modelName: string, request: PreviewModelRequest): PreviewModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return previewModelWithOptions(appGroupIdentity, modelName, request, headers, runtime);
}

async function previewModelWithOptions(appGroupIdentity: string, modelName: string, request: PreviewModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PreviewModelResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var query : map[string]any= {};
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PreviewModel',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/preview`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PushInterventionDictionaryEntriesResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model PushInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushInterventionDictionaryEntriesResponseBody(name='body'),
}

async function pushInterventionDictionaryEntries(name: string): PushInterventionDictionaryEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushInterventionDictionaryEntriesWithOptions(name, headers, runtime);
}

async function pushInterventionDictionaryEntriesWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): PushInterventionDictionaryEntriesResponse {
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PushInterventionDictionaryEntries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries/${name}/entries/actions/bulk`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PushUserAnalyzerEntriesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='result'),
}

model PushUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushUserAnalyzerEntriesResponseBody(name='body'),
}

async function pushUserAnalyzerEntries(name: string): PushUserAnalyzerEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushUserAnalyzerEntriesWithOptions(name, headers, runtime);
}

async function pushUserAnalyzerEntriesWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): PushUserAnalyzerEntriesResponse {
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PushUserAnalyzerEntries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/user-analyzers/${name}/entries/actions/bulk`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RankPreviewQueryResponseBody = {
  requestId?: string(name='requestId'),
}

model RankPreviewQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RankPreviewQueryResponseBody(name='body'),
}

async function rankPreviewQuery(appGroupIdentity: string, modelName: string): RankPreviewQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return rankPreviewQueryWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function rankPreviewQueryWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RankPreviewQueryResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RankPreviewQuery',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/query-rank`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReleaseSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model ReleaseSortScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseSortScriptResponseBody(name='body'),
}

async function releaseSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): ReleaseSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return releaseSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function releaseSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseSortScriptResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ReleaseSortScript',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/release`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveAppResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ int32 ](name='result'),
}

model RemoveAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAppResponseBody(name='body'),
}

async function removeApp(appGroupIdentity: string, appId: string): RemoveAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeAppWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function removeAppWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveAppResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveApp',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveAppGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ int32 ](name='result'),
}

model RemoveAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAppGroupResponseBody(name='body'),
}

async function removeAppGroup(appGroupIdentity: string): RemoveAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function removeAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveAppGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveAppGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveDataCollectionResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model RemoveDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveDataCollectionResponseBody(name='body'),
}

async function removeDataCollection(appGroupIdentity: string, dataCollectionIdentity: string): RemoveDataCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeDataCollectionWithOptions(appGroupIdentity, dataCollectionIdentity, headers, runtime);
}

async function removeDataCollectionWithOptions(appGroupIdentity: string, dataCollectionIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveDataCollectionResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  dataCollectionIdentity = OpenApiUtil.getEncodeParam(dataCollectionIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveDataCollection',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/data-collections/${dataCollectionIdentity}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveFirstRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
    name?: string(name='name'),
  }(name='result'),
}

model RemoveFirstRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveFirstRankResponseBody(name='body'),
}

async function removeFirstRank(appGroupIdentity: string, appId: string, name: string): RemoveFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeFirstRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function removeFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveFirstRankResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveFirstRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    name?: string(name='name'),
    type?: string(name='type'),
    updated?: string(name='updated'),
  }(name='result'),
}

model RemoveInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveInterventionDictionaryResponseBody(name='body'),
}

async function removeInterventionDictionary(name: string): RemoveInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeInterventionDictionaryWithOptions(name, headers, runtime);
}

async function removeInterventionDictionaryWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveInterventionDictionaryResponse {
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveInterventionDictionary',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/intervention-dictionaries/${name}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveQueryProcessorResponseBody = {
  requestId?: string(name='requestId'),
  result?: string(name='result'),
}

model RemoveQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveQueryProcessorResponseBody(name='body'),
}

async function removeQueryProcessor(appGroupIdentity: string, appId: string, name: string): RemoveQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeQueryProcessorWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function removeQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveQueryProcessorResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveQueryProcessor',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveScheduledTaskResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ int32 ](name='result'),
}

model RemoveScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveScheduledTaskResponseBody(name='body'),
}

async function removeScheduledTask(appGroupIdentity: string, taskId: string): RemoveScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeScheduledTaskWithOptions(appGroupIdentity, taskId, headers, runtime);
}

async function removeScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveScheduledTaskResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  taskId = OpenApiUtil.getEncodeParam(taskId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveScheduledTask',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model RemoveSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSearchStrategyResponseBody(name='body'),
}

async function removeSearchStrategy(appGroupIdentity: string, appId: string, strategyName: string): RemoveSearchStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeSearchStrategyWithOptions(appGroupIdentity, appId, strategyName, headers, runtime);
}

async function removeSearchStrategyWithOptions(appGroupIdentity: string, appId: string, strategyName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveSearchStrategyResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  strategyName = OpenApiUtil.getEncodeParam(strategyName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveSearchStrategy',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/search-strategies/${strategyName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveSecondRankResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model RemoveSecondRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSecondRankResponseBody(name='body'),
}

async function removeSecondRank(appGroupIdentity: string, appId: string, name: string): RemoveSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeSecondRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function removeSecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveSecondRankResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveSecondRank',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model RemoveUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserAnalyzerResponseBody(name='body'),
}

async function removeUserAnalyzer(name: string): RemoveUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeUserAnalyzerWithOptions(name, headers, runtime);
}

async function removeUserAnalyzerWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveUserAnalyzerResponse {
  name = OpenApiUtil.getEncodeParam(name);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserAnalyzer',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/user-analyzers/${name}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RenewAppGroupResponseBody = {
  requestId?: string(name='requestId'),
}

model RenewAppGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewAppGroupResponseBody(name='body'),
}

async function renewAppGroup(appGroupIdentity: string): RenewAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return renewAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function renewAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): RenewAppGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RenewAppGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/actions/renew`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReplaceAppGroupCommodityCodeResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    chargeType?: string(name='chargeType'),
    chargingWay?: int32(name='chargingWay'),
    commodityCode?: string(name='commodityCode'),
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    description?: string(name='description'),
    expireOn?: string(name='expireOn'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    id?: string(name='id'),
    instanceId?: string(name='instanceId'),
    lockMode?: string(name='lockMode'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    name?: string(name='name'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    processingOrderId?: string(name='processingOrderId'),
    produced?: int32(name='produced'),
    projectId?: string(name='projectId'),
    quota?: {
      computeResource?: int32(name='computeResource'),
      docSize?: int32(name='docSize'),
      spec?: string(name='spec'),
    }(name='quota'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    status?: string(name='status'),
    switchedTime?: int32(name='switchedTime'),
    type?: string(name='type'),
    updated?: int32(name='updated'),
    versions?: [ string ](name='versions'),
  }(name='result'),
}

model ReplaceAppGroupCommodityCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceAppGroupCommodityCodeResponseBody(name='body'),
}

async function replaceAppGroupCommodityCode(appGroupIdentity: string): ReplaceAppGroupCommodityCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return replaceAppGroupCommodityCodeWithOptions(appGroupIdentity, headers, runtime);
}

async function replaceAppGroupCommodityCodeWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceAppGroupCommodityCodeResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ReplaceAppGroupCommodityCode',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/actions/to-instance-typed`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SaveSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
}

model SaveSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSortScriptFileResponseBody(name='body'),
}

async function saveSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string): SaveSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return saveSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, fileName, headers, runtime);
}

async function saveSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string, headers: map[string]string, runtime: Util.RuntimeOptions): SaveSortScriptFileResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  fileName = OpenApiUtil.getEncodeParam(fileName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'SaveSortScriptFile',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/${fileName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartSlowQueryAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model StartSlowQueryAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartSlowQueryAnalyzerResponseBody(name='body'),
}

async function startSlowQueryAnalyzer(appGroupIdentity: string): StartSlowQueryAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startSlowQueryAnalyzerWithOptions(appGroupIdentity, headers, runtime);
}

async function startSlowQueryAnalyzerWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartSlowQueryAnalyzerResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartSlowQueryAnalyzer',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/run`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TrainModelResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model TrainModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainModelResponseBody(name='body'),
}

async function trainModel(appGroupIdentity: string, modelName: string): TrainModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return trainModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function trainModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): TrainModelResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  modelName = OpenApiUtil.getEncodeParam(modelName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'TrainModel',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/train`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UnbindESUserAnalyzerResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model UnbindESUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindESUserAnalyzerResponseBody(name='body'),
}

async function unbindESUserAnalyzer(appGroupIdentity: string, esInstanceId: string): UnbindESUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unbindESUserAnalyzerWithOptions(appGroupIdentity, esInstanceId, headers, runtime);
}

async function unbindESUserAnalyzerWithOptions(appGroupIdentity: string, esInstanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindESUserAnalyzerResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  esInstanceId = OpenApiUtil.getEncodeParam(esInstanceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UnbindESUserAnalyzer',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/es/${esInstanceId}/actions/unbind-analyzer`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UnbindEsInstanceResponseBody = {
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model UnbindEsInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindEsInstanceResponseBody(name='body'),
}

async function unbindEsInstance(appGroupIdentity: string): UnbindEsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unbindEsInstanceWithOptions(appGroupIdentity, headers, runtime);
}

async function unbindEsInstanceWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindEsInstanceResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UnbindEsInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/actions/unbind-es-instance`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateABTestExperimentResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model UpdateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateABTestExperimentResponseBody(name='body'),
}

async function updateABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): UpdateABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function updateABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestExperimentResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  experimentId = OpenApiUtil.getEncodeParam(experimentId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateABTestExperiment',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateABTestFixedFlowDividersResponseBody = {
  requestId?: string(name='requestId'),
  result?: [ string ](name='result'),
}

model UpdateABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateABTestFixedFlowDividersResponseBody(name='body'),
}

async function updateABTestFixedFlowDividers(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): UpdateABTestFixedFlowDividersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestFixedFlowDividersWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function updateABTestFixedFlowDividersWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestFixedFlowDividersResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  experimentId = OpenApiUtil.getEncodeParam(experimentId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateABTestFixedFlowDividers',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}/fixed-flow-dividers`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateABTestGroupResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model UpdateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateABTestGroupResponseBody(name='body'),
}

async function updateABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string): UpdateABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function updateABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestGroupResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  groupId = OpenApiUtil.getEncodeParam(groupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateABTestGroup',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateABTestSceneResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    created?: int32(name='created'),
    id?: string(name='id'),
    name?: string(name='name'),
    online?: boolean(name='online'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    updated?: int32(name='updated'),
  }(name='result'),
}

model UpdateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateABTestSceneResponseBody(name='body'),
}

async function updateABTestScene(appGroupIdentity: string, sceneId: string): UpdateABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestSceneWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function updateABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestSceneResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  sceneId = OpenApiUtil.getEncodeParam(sceneId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateABTestScene',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateFetchFieldsRequest {
  dryRun?: boolean(name='dryRun'),
}

model UpdateFetchFieldsResponseBody = {
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model UpdateFetchFieldsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFetchFieldsResponseBody(name='body'),
}

async function updateFetchFields(appGroupIdentity: string, appId: string, request: UpdateFetchFieldsRequest): UpdateFetchFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFetchFieldsWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function updateFetchFieldsWithOptions(appGroupIdentity: string, appId: string, request: UpdateFetchFieldsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFetchFieldsResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFetchFields',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/fetch-fields`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateFunctionDefaultInstanceRequest {
  instanceName?: string(name='instanceName', description='实例名称'),
}

model UpdateFunctionDefaultInstanceResponseBody = {
  code?: string(name='Code'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateFunctionDefaultInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFunctionDefaultInstanceResponseBody(name='body'),
}

async function updateFunctionDefaultInstance(appGroupIdentity: string, functionName: string, request: UpdateFunctionDefaultInstanceRequest): UpdateFunctionDefaultInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFunctionDefaultInstanceWithOptions(appGroupIdentity, functionName, request, headers, runtime);
}

async function updateFunctionDefaultInstanceWithOptions(appGroupIdentity: string, functionName: string, request: UpdateFunctionDefaultInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFunctionDefaultInstanceResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  var body : map[string]any= {};
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFunctionDefaultInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/default-instance`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateFunctionInstanceRequest {
  createParameters?: [ 
    {
      name?: string(name='name', description='参数名称'),
      value?: string(name='value', description='参数值'),
    }
  ](name='createParameters', description='创建参数'),
  cron?: string(name='cron', description='周期训练'),
  description?: string(name='description', description='实例描述'),
  usageParameters?: [ 
    {
      name?: string(name='name'),
      value?: string(name='value'),
    }
  ](name='usageParameters', description='使用参数'),
}

model UpdateFunctionInstanceResponseBody = {
  code?: string(name='Code', description='错误码'),
  httpCode?: long(name='HttpCode'),
  latency?: long(name='Latency', description='耗时'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateFunctionInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFunctionInstanceResponseBody(name='body'),
}

async function updateFunctionInstance(appGroupIdentity: string, functionName: string, instanceName: string, request: UpdateFunctionInstanceRequest): UpdateFunctionInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFunctionInstanceWithOptions(appGroupIdentity, functionName, instanceName, request, headers, runtime);
}

async function updateFunctionInstanceWithOptions(appGroupIdentity: string, functionName: string, instanceName: string, request: UpdateFunctionInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFunctionInstanceResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  functionName = OpenApiUtil.getEncodeParam(functionName);
  instanceName = OpenApiUtil.getEncodeParam(instanceName);
  var body : map[string]any= {};
  if (!Util.isUnset(request.createParameters)) {
    body['createParameters'] = request.createParameters;
  }
  if (!Util.isUnset(request.cron)) {
    body['cron'] = request.cron;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.usageParameters)) {
    body['usageParameters'] = request.usageParameters;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFunctionInstance',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/functions/${functionName}/instances/${instanceName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateSearchStrategyResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateSearchStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSearchStrategyResponseBody(name='body'),
}

async function updateSearchStrategy(appGroupIdentity: string, appId: string, strategyName: string): UpdateSearchStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSearchStrategyWithOptions(appGroupIdentity, appId, strategyName, headers, runtime);
}

async function updateSearchStrategyWithOptions(appGroupIdentity: string, appId: string, strategyName: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSearchStrategyResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  strategyName = OpenApiUtil.getEncodeParam(strategyName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateSearchStrategy',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/search-strategies/${strategyName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateSortScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSortScriptResponseBody(name='body'),
}

async function updateSortScript(appGroupIdentity: string, appVersionId: string, scriptName: string): UpdateSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSortScriptWithOptions(appGroupIdentity, appVersionId, scriptName, headers, runtime);
}

async function updateSortScriptWithOptions(appGroupIdentity: string, appVersionId: string, scriptName: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSortScriptResponse {
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appVersionId = OpenApiUtil.getEncodeParam(appVersionId);
  scriptName = OpenApiUtil.getEncodeParam(scriptName);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateSortScript',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateSummariesRequest {
  dryRun?: boolean(name='dryRun'),
}

model UpdateSummariesResponseBody = {
  requestId?: string(name='requestId'),
  result?: boolean(name='result'),
}

model UpdateSummariesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSummariesResponseBody(name='body'),
}

async function updateSummaries(appGroupIdentity: string, appId: string, request: UpdateSummariesRequest): UpdateSummariesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSummariesWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function updateSummariesWithOptions(appGroupIdentity: string, appId: string, request: UpdateSummariesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSummariesResponse {
  Util.validateModel(request);
  appGroupIdentity = OpenApiUtil.getEncodeParam(appGroupIdentity);
  appId = OpenApiUtil.getEncodeParam(appId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query['dryRun'] = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSummaries',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/summaries`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ValidateDataSourcesResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
  result?: [ 
    {
      code?: string(name='code'),
      dataSource?: {
        parameters?: map[string]any(name='parameters'),
        tableName?: string(name='tableName'),
        type?: string(name='type'),
      }(name='dataSource'),
      message?: string(name='message'),
    }
  ](name='result'),
}

model ValidateDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateDataSourcesResponseBody(name='body'),
}

async function validateDataSources(): ValidateDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return validateDataSourcesWithOptions(headers, runtime);
}

async function validateDataSourcesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ValidateDataSourcesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ValidateDataSources',
    version = '2017-12-25',
    protocol = 'HTTPS',
    pathname = `/v4/openapi/assist/data-sources/validations`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

