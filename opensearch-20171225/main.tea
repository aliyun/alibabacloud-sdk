/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('opensearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CompileSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model CompileSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CompileSortScriptResponseBody(name='body'),
}

async function compileSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): CompileSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return compileSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function compileSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CompileSortScriptResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CompileSortScript', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/compiling`, 'json', req, runtime);
}

model CreateABTestExperimentResponseBody = {
  result?: {
    created?: int32(name='created'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    online?: boolean(name='online'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestExperimentResponseBody(name='body'),
}

async function createABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string): CreateABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function createABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateABTestExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateABTestExperiment', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments`, 'json', req, runtime);
}

model CreateABTestGroupResponseBody = {
  result?: {
    created?: int32(name='created'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestGroupResponseBody(name='body'),
}

async function createABTestGroup(appGroupIdentity: string, sceneId: string): CreateABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createABTestGroupWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function createABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateABTestGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateABTestGroup', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups`, 'json', req, runtime);
}

model CreateABTestSceneResponseBody = {
  result?: {
    created?: int32(name='created'),
    values?: [ string ](name='values'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestSceneResponseBody(name='body'),
}

async function createABTestScene(appGroupIdentity: string): CreateABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createABTestSceneWithOptions(appGroupIdentity, headers, runtime);
}

async function createABTestSceneWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateABTestSceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateABTestScene', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes`, 'json', req, runtime);
}

model CreateAppRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateAppResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(appGroupIdentity: string, request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAppWithOptions(appGroupIdentity, request, headers, runtime);
}

async function createAppWithOptions(appGroupIdentity: string, request: CreateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('CreateApp', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps`, 'json', req, runtime);
}

model CreateAppGroupResponseBody = {
  result?: {
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    lockMode?: string(name='lockMode'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
    chargeType?: string(name='chargeType'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    quota?: {
      spec?: string(name='spec'),
      docSize?: int32(name='docSize'),
      computeResource?: int32(name='computeResource'),
    }(name='quota'),
    name?: string(name='name'),
    processingOrderId?: string(name='processingOrderId'),
    instanceId?: string(name='instanceId'),
    type?: string(name='type'),
    chargingWay?: int32(name='chargingWay'),
    status?: string(name='status'),
    projectId?: string(name='projectId'),
    commodityCode?: string(name='commodityCode'),
    switchedTime?: int32(name='switchedTime'),
    expireOn?: string(name='expireOn'),
    domain?: string(name='domain'),
    description?: string(name='description'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    produced?: int32(name='produced'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppGroupResponseBody(name='body'),
}

async function createAppGroup(): CreateAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAppGroupWithOptions(headers, runtime);
}

async function createAppGroupWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateAppGroup', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups`, 'json', req, runtime);
}

model CreateDataCollectionResponseBody = {
  result?: {
    created?: int32(name='created'),
    dataCollectionType?: string(name='dataCollectionType'),
    type?: string(name='type'),
    industryName?: string(name='industryName'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    sundialId?: string(name='sundialId'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCollectionResponseBody(name='body'),
}

async function createDataCollection(appGroupIdentity: string): CreateDataCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataCollectionWithOptions(appGroupIdentity, headers, runtime);
}

async function createDataCollectionWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataCollectionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateDataCollection', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections`, 'json', req, runtime);
}

model CreateFirstRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateFirstRankResponseBody = {
  result?: {
    active?: boolean(name='active'),
    name?: string(name='name'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFirstRankResponseBody(name='body'),
}

async function createFirstRank(appGroupIdentity: string, appId: string, request: CreateFirstRankRequest): CreateFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFirstRankWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function createFirstRankWithOptions(appGroupIdentity: string, appId: string, request: CreateFirstRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFirstRankResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('CreateFirstRank', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks`, 'json', req, runtime);
}

model CreateInterventionDictionaryResponseBody = {
  requestId?: string(name='requestId'),
  result?: {
    name?: string(name='name'),
    type?: string(name='type'),
    analyzer?: string(name='analyzer'),
    created?: string(name='created'),
    updated?: string(name='updated'),
  }(name='result'),
}

model CreateInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInterventionDictionaryResponseBody(name='body'),
}

async function createInterventionDictionary(): CreateInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInterventionDictionaryWithOptions(headers, runtime);
}

async function createInterventionDictionaryWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateInterventionDictionaryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateInterventionDictionary', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/intervention-dictionaries`, 'json', req, runtime);
}

model CreateModelResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModel(appGroupIdentity: string): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createModelWithOptions(appGroupIdentity, headers, runtime);
}

async function createModelWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateModel', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models`, 'json', req, runtime);
}

model CreateQueryProcessorRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateQueryProcessorResponseBody = {
  result?: {
    created?: int32(name='created'),
    active?: boolean(name='active'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model CreateQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQueryProcessorResponseBody(name='body'),
}

async function createQueryProcessor(appGroupIdentity: string, appId: string, request: CreateQueryProcessorRequest): CreateQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createQueryProcessorWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function createQueryProcessorWithOptions(appGroupIdentity: string, appId: string, request: CreateQueryProcessorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQueryProcessorResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('CreateQueryProcessor', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors`, 'json', req, runtime);
}

model CreateScheduledTaskResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model CreateScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduledTaskResponseBody(name='body'),
}

async function createScheduledTask(appGroupIdentity: string): CreateScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createScheduledTaskWithOptions(appGroupIdentity, headers, runtime);
}

async function createScheduledTaskWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateScheduledTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateScheduledTask', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks`, 'json', req, runtime);
}

model CreateSecondRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model CreateSecondRankResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='RequestId'),
}

model CreateSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecondRankResponseBody(name='body'),
}

async function createSecondRank(appGroupIdentity: string, appId: string, request: CreateSecondRankRequest): CreateSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSecondRankWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function createSecondRankWithOptions(appGroupIdentity: string, appId: string, request: CreateSecondRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSecondRankResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('CreateSecondRank', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks`, 'json', req, runtime);
}

model CreateSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model CreateSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSortScriptResponseBody(name='body'),
}

async function createSortScript(appGroupIdentity: string, appVersionId: string): CreateSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSortScriptWithOptions(appGroupIdentity, appVersionId, headers, runtime);
}

async function createSortScriptWithOptions(appGroupIdentity: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSortScriptResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateSortScript', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`, 'json', req, runtime);
}

model CreateUserAnalyzerResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='RequestId'),
}

model CreateUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserAnalyzerResponseBody(name='body'),
}

async function createUserAnalyzer(): CreateUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createUserAnalyzerWithOptions(headers, runtime);
}

async function createUserAnalyzerWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CreateUserAnalyzerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CreateUserAnalyzer', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/user-analyzers`, 'json', req, runtime);
}

model DeleteABTestExperimentResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DeleteABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestExperimentResponseBody(name='body'),
}

async function deleteABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): DeleteABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function deleteABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteABTestExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteABTestExperiment', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`, 'json', req, runtime);
}

model DeleteABTestGroupResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DeleteABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestGroupResponseBody(name='body'),
}

async function deleteABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string): DeleteABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function deleteABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteABTestGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteABTestGroup', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`, 'json', req, runtime);
}

model DeleteABTestSceneResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DeleteABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestSceneResponseBody(name='body'),
}

async function deleteABTestScene(appGroupIdentity: string, sceneId: string): DeleteABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteABTestSceneWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function deleteABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteABTestSceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteABTestScene', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`, 'json', req, runtime);
}

model DeleteModelResponseBody = {
  result?: string(name='result'),
  requestId?: string(name='requestId'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModel(appGroupIdentity: string, modelName: string): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function deleteModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteModel', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`, 'json', req, runtime);
}

model DeleteSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSortScriptResponseBody(name='body'),
}

async function deleteSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): DeleteSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function deleteSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSortScriptResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteSortScript', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`, 'json', req, runtime);
}

model DeleteSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSortScriptFileResponseBody(name='body'),
}

async function deleteSortScriptFile(appGroupIdentity: string, appVersionId: string, scriptName: string, fileName: string): DeleteSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSortScriptFileWithOptions(appGroupIdentity, appVersionId, scriptName, fileName, headers, runtime);
}

async function deleteSortScriptFileWithOptions(appGroupIdentity: string, appVersionId: string, scriptName: string, fileName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSortScriptFileResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteSortScriptFile', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/${fileName}`, 'json', req, runtime);
}

model DescribeABTestExperimentResponseBody = {
  result?: {
    created?: int32(name='created'),
    params?: {
      firstFormulaName?: string(name='first_formula_name'),
    }(name='params'),
    traffic?: int32(name='traffic'),
    online?: boolean(name='online'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestExperimentResponseBody(name='body'),
}

async function describeABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): DescribeABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function describeABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeABTestExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeABTestExperiment', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`, 'json', req, runtime);
}

model DescribeABTestGroupResponseBody = {
  result?: {
    created?: int32(name='created'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestGroupResponseBody(name='body'),
}

async function describeABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string): DescribeABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function describeABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeABTestGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeABTestGroup', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`, 'json', req, runtime);
}

model DescribeABTestSceneResponseBody = {
  result?: {
    created?: int32(name='created'),
    values?: [ string ](name='values'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestSceneResponseBody(name='body'),
}

async function describeABTestScene(appGroupIdentity: string, sceneId: string): DescribeABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeABTestSceneWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function describeABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeABTestSceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeABTestScene', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`, 'json', req, runtime);
}

model DescribeAppResponseBody = {
  result?: {
    created?: int32(name='created'),
    clusterName?: string(name='clusterName'),
    autoSwitch?: boolean(name='autoSwitch'),
    type?: string(name='type'),
    status?: string(name='status'),
    schema?: map[string]any(name='schema'),
    progressPercent?: int32(name='progressPercent'),
    id?: string(name='id'),
    algoDeploymentId?: int32(name='algoDeploymentId'),
    domain?: {
      functions?: {
        service?: [ string ](name='service'),
        qp?: [ string ](name='qp'),
        algo?: [ string ](name='algo'),
      }(name='functions'),
      category?: string(name='category'),
      name?: string(name='name'),
    }(name='domain'),
    description?: string(name='description'),
    fetchFields?: [ string ](name='fetchFields'),
    quota?: {
      spec?: string(name='spec'),
      qps?: int32(name='qps'),
      docSize?: int32(name='docSize'),
      computeResource?: int32(name='computeResource'),
    }(name='quota'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeApp(appGroupIdentity: string, appId: string): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function describeAppWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeApp', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`, 'json', req, runtime);
}

model DescribeAppGroupResponseBody = {
  result?: {
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    lockMode?: string(name='lockMode'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
    chargeType?: string(name='chargeType'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    quota?: {
      spec?: string(name='spec'),
      docSize?: int32(name='docSize'),
      computeResource?: int32(name='computeResource'),
    }(name='quota'),
    name?: string(name='name'),
    processingOrderId?: string(name='processingOrderId'),
    instanceId?: string(name='instanceId'),
    type?: string(name='type'),
    chargingWay?: int32(name='chargingWay'),
    status?: string(name='status'),
    projectId?: string(name='projectId'),
    commodityCode?: string(name='commodityCode'),
    switchedTime?: int32(name='switchedTime'),
    expireOn?: string(name='expireOn'),
    domain?: string(name='domain'),
    description?: string(name='description'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    produced?: int32(name='produced'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupResponseBody(name='body'),
}

async function describeAppGroup(appGroupIdentity: string): DescribeAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function describeAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeAppGroup', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, 'json', req, runtime);
}

model DescribeAppGroupDataReportRequest {
  startTime?: string(name='startTime'),
  endTime?: string(name='endTime'),
}

model DescribeAppGroupDataReportResponseBody = {
  result?: {
    receivedSample?: [ 
      {
        receivedTimeMs?: long(name='receivedTimeMs'),
        message?: {
          eventId?: int32(name='eventId'),
          arg3?: string(name='arg3'),
          arg1?: string(name='arg1'),
          sdkVersion?: string(name='sdkVersion'),
          userId?: string(name='userId'),
          page?: string(name='page'),
          args?: string(name='args'),
          sessionId?: string(name='sessionId'),
          sdkType?: string(name='sdkType'),
          clientIp?: string(name='clientIp'),
        }(name='message'),
      }
    ](name='receivedSample'),
    receivedCount?: int32(name='receivedCount'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeAppGroupDataReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupDataReportResponseBody(name='body'),
}

async function describeAppGroupDataReport(appGroupIdentity: string, request: DescribeAppGroupDataReportRequest): DescribeAppGroupDataReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppGroupDataReportWithOptions(appGroupIdentity, request, headers, runtime);
}

async function describeAppGroupDataReportWithOptions(appGroupIdentity: string, request: DescribeAppGroupDataReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppGroupDataReportResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query.endTime = request.endTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeAppGroupDataReport', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-report`, 'json', req, runtime);
}

model DescribeAppsResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeApps(appGroupIdentity: string): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppsWithOptions(appGroupIdentity, headers, runtime);
}

async function describeAppsWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeApps', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps`, 'json', req, runtime);
}

model DescribeAppStatisticsResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeAppStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppStatisticsResponseBody(name='body'),
}

async function describeAppStatistics(appGroupIdentity: string, appId: string): DescribeAppStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppStatisticsWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function describeAppStatisticsWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeAppStatistics', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/statistics`, 'json', req, runtime);
}

model DescribeDataCollctionResponseBody = {
  result?: {
    created?: int32(name='created'),
    dataCollectionType?: string(name='dataCollectionType'),
    type?: string(name='type'),
    industryName?: string(name='industryName'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    sundialId?: string(name='sundialId'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeDataCollctionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCollctionResponseBody(name='body'),
}

async function describeDataCollction(appGroupIdentity: string, dataCollectionIdentity: string): DescribeDataCollctionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeDataCollctionWithOptions(appGroupIdentity, dataCollectionIdentity, headers, runtime);
}

async function describeDataCollctionWithOptions(appGroupIdentity: string, dataCollectionIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeDataCollctionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeDataCollction', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections/${dataCollectionIdentity}`, 'json', req, runtime);
}

model DescribeFirstRankResponseBody = {
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    name?: string(name='name'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFirstRankResponseBody(name='body'),
}

async function describeFirstRank(appGroupIdentity: string, appId: string, name: string): DescribeFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeFirstRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function describeFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeFirstRankResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeFirstRank', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`, 'json', req, runtime);
}

model DescribeInterventionDictionaryResponseBody = {
  result?: {
    created?: string(name='created'),
    type?: string(name='type'),
    analyzer?: string(name='analyzer'),
    updated?: string(name='updated'),
    name?: string(name='name'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInterventionDictionaryResponseBody(name='body'),
}

async function describeInterventionDictionary(name: string): DescribeInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeInterventionDictionaryWithOptions(name, headers, runtime);
}

async function describeInterventionDictionaryWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeInterventionDictionaryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeInterventionDictionary', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}`, 'json', req, runtime);
}

model DescribeModelResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeModelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelResponseBody(name='body'),
}

async function describeModel(appGroupIdentity: string, modelName: string): DescribeModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function describeModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeModel', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`, 'json', req, runtime);
}

model DescribeQueryProcessorResponseBody = {
  result?: {
    created?: int32(name='created'),
    active?: boolean(name='active'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeQueryProcessorResponseBody(name='body'),
}

async function describeQueryProcessor(appGroupIdentity: string, appId: string, name: string): DescribeQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeQueryProcessorWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function describeQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeQueryProcessorResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeQueryProcessor', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`, 'json', req, runtime);
}

model DescribeRegionResponseBody = {
  result?: {
    regionId?: string(name='regionId'),
    config?: map[string]any(name='config'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionResponseBody(name='body'),
}

async function describeRegion(): DescribeRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionWithOptions(headers, runtime);
}

async function describeRegionWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRegionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeRegion', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/region`, 'json', req, runtime);
}

model DescribeRegionsResponseBody = {
  result?: [ 
    {
      regionId?: string(name='regionId'),
      endpoint?: string(name='endpoint'),
      localName?: string(name='localName'),
      consoleUrl?: string(name='consoleUrl'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionsWithOptions(headers, runtime);
}

async function describeRegionsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeRegions', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/regions`, 'json', req, runtime);
}

model DescribeScheduledTaskResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduledTaskResponseBody(name='body'),
}

async function describeScheduledTask(appGroupIdentity: string, taskId: string): DescribeScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeScheduledTaskWithOptions(appGroupIdentity, taskId, headers, runtime);
}

async function describeScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeScheduledTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeScheduledTask', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`, 'json', req, runtime);
}

model DescribeSecondRankResponseBody = {
  result?: {
    created?: int32(name='created'),
    active?: boolean(name='active'),
    isDefault?: string(name='isDefault'),
    isSys?: string(name='isSys'),
    description?: string(name='description'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    meta?: string(name='meta'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecondRankResponseBody(name='body'),
}

async function describeSecondRank(appGroupIdentity: string, appId: string, name: string): DescribeSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSecondRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function describeSecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSecondRankResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeSecondRank', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`, 'json', req, runtime);
}

model DescribeSlowQueryStatusResponseBody = {
  result?: {
    region?: string(name='region'),
    status?: string(name='status'),
    appGroupId?: string(name='appGroupId'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeSlowQueryStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowQueryStatusResponseBody(name='body'),
}

async function describeSlowQueryStatus(appGroupIdentity: string): DescribeSlowQueryStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSlowQueryStatusWithOptions(appGroupIdentity, headers, runtime);
}

async function describeSlowQueryStatusWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSlowQueryStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeSlowQueryStatus', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query`, 'json', req, runtime);
}

model DescribeUserAnalyzerRequest {
  with?: string(name='with'),
}

model DescribeUserAnalyzerResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DescribeUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserAnalyzerResponseBody(name='body'),
}

async function describeUserAnalyzer(name: string, request: DescribeUserAnalyzerRequest): DescribeUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserAnalyzerWithOptions(name, request, headers, runtime);
}

async function describeUserAnalyzerWithOptions(name: string, request: DescribeUserAnalyzerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserAnalyzerResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.with)) {
    query.with = request.with;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeUserAnalyzer', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/user-analyzers/${name}`, 'json', req, runtime);
}

model DisableSlowQueryResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model DisableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSlowQueryResponseBody(name='body'),
}

async function disableSlowQuery(appGroupIdentity: string): DisableSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableSlowQueryWithOptions(appGroupIdentity, headers, runtime);
}

async function disableSlowQueryWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSlowQueryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DisableSlowQuery', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/disable`, 'json', req, runtime);
}

model EnableSlowQueryResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model EnableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSlowQueryResponseBody(name='body'),
}

async function enableSlowQuery(appGroupIdentity: string): EnableSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableSlowQueryWithOptions(appGroupIdentity, headers, runtime);
}

async function enableSlowQueryWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSlowQueryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('EnableSlowQuery', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/enable`, 'json', req, runtime);
}

model GetDomainRequest {
  appGroupIdentity?: string(name='appGroupIdentity'),
}

model GetDomainResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model GetDomainResponse = {
  headers: map[string]string(name='headers'),
  body: GetDomainResponseBody(name='body'),
}

async function getDomain(domainName: string, request: GetDomainRequest): GetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDomainWithOptions(domainName, request, headers, runtime);
}

async function getDomainWithOptions(domainName: string, request: GetDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDomainResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appGroupIdentity)) {
    query.appGroupIdentity = request.appGroupIdentity;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetDomain', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/domains/${domainName}`, 'json', req, runtime);
}

model GetModelProgressResponseBody = {
  result?: {
    status?: string(name='status'),
    progress?: int32(name='progress'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model GetModelProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelProgressResponseBody(name='body'),
}

async function getModelProgress(appGroupIdentity: string, modelName: string): GetModelProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelProgressWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function getModelProgressWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetModelProgressResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetModelProgress', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/progress`, 'json', req, runtime);
}

model GetModelReportResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model GetModelReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelReportResponseBody(name='body'),
}

async function getModelReport(appGroupIdentity: string, modelName: string): GetModelReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getModelReportWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function getModelReportWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetModelReportResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetModelReport', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/report`, 'json', req, runtime);
}

model GetScriptFileNamesResponseBody = {
  result?: [ 
    {
      fileName?: string(name='fileName'),
      createTime?: string(name='createTime'),
      modifyTime?: string(name='modifyTime'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model GetScriptFileNamesResponse = {
  headers: map[string]string(name='headers'),
  body: GetScriptFileNamesResponseBody(name='body'),
}

async function getScriptFileNames(appGroupIdentity: string, appVersionId: string, scriptName: string): GetScriptFileNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getScriptFileNamesWithOptions(appGroupIdentity, appVersionId, scriptName, headers, runtime);
}

async function getScriptFileNamesWithOptions(appGroupIdentity: string, appVersionId: string, scriptName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetScriptFileNamesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetScriptFileNames', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/file-names`, 'json', req, runtime);
}

model GetSortScriptResponseBody = {
  result?: {
    type?: string(name='type'),
    scope?: string(name='scope'),
    createTime?: string(name='createTime'),
    status?: string(name='status'),
    modifyTime?: string(name='modifyTime'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model GetSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetSortScriptResponseBody(name='body'),
}

async function getSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): GetSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function getSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSortScriptResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetSortScript', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`, 'json', req, runtime);
}

model GetSortScriptFileResponseBody = {
  result?: {
    content?: string(name='content'),
    createTime?: string(name='createTime'),
    modifyTime?: string(name='modifyTime'),
    version?: long(name='version'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model GetSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetSortScriptFileResponseBody(name='body'),
}

async function getSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string): GetSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, fileName, headers, runtime);
}

async function getSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSortScriptFileResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetSortScriptFile', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/${fileName}`, 'json', req, runtime);
}

model GetValidationErrorRequest {
  errorCode?: string(name='errorCode'),
}

model GetValidationErrorResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
}

model GetValidationErrorResponse = {
  headers: map[string]string(name='headers'),
  body: GetValidationErrorResponseBody(name='body'),
}

async function getValidationError(appGroupIdentity: string, request: GetValidationErrorRequest): GetValidationErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getValidationErrorWithOptions(appGroupIdentity, request, headers, runtime);
}

async function getValidationErrorWithOptions(appGroupIdentity: string, request: GetValidationErrorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetValidationErrorResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.errorCode)) {
    query.errorCode = request.errorCode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetValidationError', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/data/validation-error`, 'json', req, runtime);
}

model GetValidationReportRequest {
  type?: string(name='type'),
}

model GetValidationReportResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
}

model GetValidationReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetValidationReportResponseBody(name='body'),
}

async function getValidationReport(appGroupIdentity: string, request: GetValidationReportRequest): GetValidationReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getValidationReportWithOptions(appGroupIdentity, request, headers, runtime);
}

async function getValidationReportWithOptions(appGroupIdentity: string, request: GetValidationReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetValidationReportResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.type)) {
    query.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetValidationReport', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/data/validation-report`, 'json', req, runtime);
}

model ListABTestExperimentsResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      params?: map[string]any(name='params'),
      traffic?: int32(name='traffic'),
      online?: boolean(name='online'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
      id?: string(name='id'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListABTestExperimentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestExperimentsResponseBody(name='body'),
}

async function listABTestExperiments(appGroupIdentity: string, sceneId: string, groupId: string): ListABTestExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestExperimentsWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function listABTestExperimentsWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestExperimentsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListABTestExperiments', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments`, 'json', req, runtime);
}

model ListABTestFixedFlowDividersResponseBody = {
  result?: [ string ](name='result'),
  requestId?: string(name='requestId'),
}

model ListABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestFixedFlowDividersResponseBody(name='body'),
}

async function listABTestFixedFlowDividers(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): ListABTestFixedFlowDividersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestFixedFlowDividersWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function listABTestFixedFlowDividersWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestFixedFlowDividersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListABTestFixedFlowDividers', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}/fixed-flow-dividers`, 'json', req, runtime);
}

model ListABTestGroupsResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
      id?: string(name='id'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListABTestGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestGroupsResponseBody(name='body'),
}

async function listABTestGroups(appGroupIdentity: string, sceneId: string): ListABTestGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestGroupsWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function listABTestGroupsWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestGroupsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListABTestGroups', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups`, 'json', req, runtime);
}

model ListABTestMetricsResponseBody = {
  result?: [ 
    {
      zeroHitRate?: float(name='zeroHitRate'),
      ctr?: float(name='ctr'),
      experimentName?: string(name='experimentName'),
      date?: string(name='date'),
      ipvUv?: int32(name='ipvUv'),
      ipv?: int32(name='ipv'),
      uv?: int32(name='uv'),
      pv?: int32(name='pv'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListABTestMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestMetricsResponseBody(name='body'),
}

async function listABTestMetrics(appGroupIdentity: string, sceneId: string, groupId: string): ListABTestMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestMetricsWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function listABTestMetricsWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestMetricsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListABTestMetrics', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/metrics`, 'json', req, runtime);
}

model ListABTestScenesResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      values?: [ string ](name='values'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
      id?: string(name='id'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListABTestScenesResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestScenesResponseBody(name='body'),
}

async function listABTestScenes(appGroupIdentity: string): ListABTestScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listABTestScenesWithOptions(appGroupIdentity, headers, runtime);
}

async function listABTestScenesWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListABTestScenesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListABTestScenes', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes`, 'json', req, runtime);
}

model ListAppGroupErrorsRequest {
  appId?: string(name='appId'),
  startTime?: int32(name='startTime'),
  stopTime?: int32(name='stopTime'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListAppGroupErrorsResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: long(name='totalCount'),
}

model ListAppGroupErrorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupErrorsResponseBody(name='body'),
}

async function listAppGroupErrors(appGroupIdentity: string, request: ListAppGroupErrorsRequest): ListAppGroupErrorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppGroupErrorsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listAppGroupErrorsWithOptions(appGroupIdentity: string, request: ListAppGroupErrorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppGroupErrorsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    query.appId = request.appId;
  }
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.stopTime)) {
    query.stopTime = request.stopTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListAppGroupErrors', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/errors`, 'json', req, runtime);
}

model ListAppGroupMetricsRequest {
  metricType?: string(name='metricType'),
  startTime?: int32(name='startTime'),
  endTime?: int32(name='endTime'),
  indexes?: string(name='indexes'),
}

model ListAppGroupMetricsResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
}

model ListAppGroupMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupMetricsResponseBody(name='body'),
}

async function listAppGroupMetrics(appGroupIdentity: string, request: ListAppGroupMetricsRequest): ListAppGroupMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppGroupMetricsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listAppGroupMetricsWithOptions(appGroupIdentity: string, request: ListAppGroupMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppGroupMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.metricType)) {
    query.metricType = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query.endTime = request.endTime;
  }
  if (!Util.isUnset(request.indexes)) {
    query.indexes = request.indexes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListAppGroupMetrics', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/metrics`, 'json', req, runtime);
}

model ListAppGroupsRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  instanceId?: string(name='instanceId'),
  name?: string(name='name'),
  type?: string(name='type'),
  sortBy?: int32(name='sortBy'),
  resourceGroupId?: string(name='resourceGroupId'),
}

model ListAppGroupsResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      currentVersion?: string(name='currentVersion'),
      pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
      lockMode?: string(name='lockMode'),
      updated?: int32(name='updated'),
      id?: string(name='id'),
      chargeType?: string(name='chargeType'),
      hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
      secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
      quota?: {
        spec?: string(name='spec'),
        docSize?: int32(name='docSize'),
        computeResource?: int32(name='computeResource'),
      }(name='quota'),
      name?: string(name='name'),
      processingOrderId?: string(name='processingOrderId'),
      instanceId?: string(name='instanceId'),
      type?: string(name='type'),
      chargingWay?: int32(name='chargingWay'),
      status?: string(name='status'),
      projectId?: string(name='projectId'),
      commodityCode?: string(name='commodityCode'),
      switchedTime?: int32(name='switchedTime'),
      expireOn?: string(name='expireOn'),
      domain?: string(name='domain'),
      description?: string(name='description'),
      firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
      produced?: int32(name='produced'),
      lockedByExpiration?: int32(name='lockedByExpiration'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListAppGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupsResponseBody(name='body'),
}

async function listAppGroups(request: ListAppGroupsRequest): ListAppGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppGroupsWithOptions(request, headers, runtime);
}

async function listAppGroupsWithOptions(request: ListAppGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.instanceId)) {
    query.instanceId = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query.name = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query.type = request.type;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.sortBy = request.sortBy;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query.resourceGroupId = request.resourceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListAppGroups', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups`, 'json', req, runtime);
}

model ListAppsRequest {
  group?: boolean(name='group'),
  page?: int32(name='page'),
  size?: int32(name='size'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAppsWithOptions(request, headers, runtime);
}

async function listAppsWithOptions(request: ListAppsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.group)) {
    query.group = request.group;
  }
  if (!Util.isUnset(request.page)) {
    query.page = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query.size = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListApps', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/apps`, 'none', req, runtime);
}

model ListDataCollectionsRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListDataCollectionsResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      dataCollectionType?: string(name='dataCollectionType'),
      type?: string(name='type'),
      industryName?: string(name='industryName'),
      status?: int32(name='status'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
      sundialId?: string(name='sundialId'),
      id?: string(name='id'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListDataCollectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataCollectionsResponseBody(name='body'),
}

async function listDataCollections(appGroupIdentity: string, request: ListDataCollectionsRequest): ListDataCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataCollectionsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listDataCollectionsWithOptions(appGroupIdentity: string, request: ListDataCollectionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataCollectionsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListDataCollections', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections`, 'json', req, runtime);
}

model ListDeployedAlgorithmModelsRequest {
  inServiceOnly?: boolean(name='inServiceOnly'),
  algorithmType?: string(name='algorithmType'),
}

model ListDeployedAlgorithmModelsResponseBody = {
  result?: [ 
    {
      apps?: [ string ](name='apps'),
      appGroupName?: string(name='appGroupName'),
      models?: [ 
        {
          modelName?: string(name='modelName'),
          projectId?: int32(name='projectId'),
          modelId?: int32(name='modelId'),
          algorithmType?: string(name='algorithmType'),
          status?: string(name='status'),
          progress?: int32(name='progress'),
        }
      ](name='models'),
      gmtModified?: string(name='gmtModified'),
      status?: string(name='status'),
      scene?: string(name='scene'),
      gmtCreate?: string(name='gmtCreate'),
      id?: string(name='id'),
      desc?: string(name='desc'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListDeployedAlgorithmModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployedAlgorithmModelsResponseBody(name='body'),
}

async function listDeployedAlgorithmModels(appGroupIdentity: string, request: ListDeployedAlgorithmModelsRequest): ListDeployedAlgorithmModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDeployedAlgorithmModelsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listDeployedAlgorithmModelsWithOptions(appGroupIdentity: string, request: ListDeployedAlgorithmModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDeployedAlgorithmModelsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.inServiceOnly)) {
    query.inServiceOnly = request.inServiceOnly;
  }
  if (!Util.isUnset(request.algorithmType)) {
    query.algorithmType = request.algorithmType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListDeployedAlgorithmModels', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/deployed-algorithm-models`, 'json', req, runtime);
}

model ListFirstRanksResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      active?: boolean(name='active'),
      description?: string(name='description'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
      meta?: [ 
        {
          arg?: string(name='arg'),
          attribute?: string(name='attribute'),
          weight?: int32(name='weight'),
        }
      ](name='meta'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListFirstRanksResponse = {
  headers: map[string]string(name='headers'),
  body: ListFirstRanksResponseBody(name='body'),
}

async function listFirstRanks(appGroupIdentity: string, appId: string): ListFirstRanksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFirstRanksWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listFirstRanksWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListFirstRanksResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListFirstRanks', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks`, 'json', req, runtime);
}

model ListInterventionDictionariesRequest {
  pageSize?: int32(name='pageSize'),
  pageNumber?: int32(name='pageNumber'),
  types?: string(name='types'),
}

model ListInterventionDictionariesResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      type?: string(name='type'),
      analyzer?: string(name='analyzer'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
      id?: int32(name='id'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListInterventionDictionariesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionariesResponseBody(name='body'),
}

async function listInterventionDictionaries(request: ListInterventionDictionariesRequest): ListInterventionDictionariesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionariesWithOptions(request, headers, runtime);
}

async function listInterventionDictionariesWithOptions(request: ListInterventionDictionariesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionariesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.types)) {
    query.types = request.types;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListInterventionDictionaries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries`, 'json', req, runtime);
}

model ListInterventionDictionaryEntriesRequest {
  word?: string(name='word'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListInterventionDictionaryEntriesResponseBody = {
  result?: [ 
    {
      cmd?: string(name='cmd'),
      created?: long(name='created'),
      word?: string(name='word'),
      tokens?: [ 
        {
          tagLabel?: string(name='tagLabel'),
          tag?: string(name='tag'),
          token?: string(name='token'),
          order?: int32(name='order'),
        }
      ](name='tokens'),
      relevance?: map[string]any(name='relevance'),
      status?: string(name='status'),
      updated?: long(name='updated'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryEntriesResponseBody(name='body'),
}

async function listInterventionDictionaryEntries(name: string, request: ListInterventionDictionaryEntriesRequest): ListInterventionDictionaryEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionaryEntriesWithOptions(name, request, headers, runtime);
}

async function listInterventionDictionaryEntriesWithOptions(name: string, request: ListInterventionDictionaryEntriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionaryEntriesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.word)) {
    query.word = request.word;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListInterventionDictionaryEntries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}/entries`, 'json', req, runtime);
}

model ListInterventionDictionaryNerResultsRequest {
  query?: string(name='query'),
}

model ListInterventionDictionaryNerResultsResponseBody = {
  result?: [ 
    {
      tagLabel?: string(name='tagLabel'),
      tag?: string(name='tag'),
      token?: string(name='token'),
      order?: int32(name='order'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListInterventionDictionaryNerResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryNerResultsResponseBody(name='body'),
}

async function listInterventionDictionaryNerResults(name: string, request: ListInterventionDictionaryNerResultsRequest): ListInterventionDictionaryNerResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionaryNerResultsWithOptions(name, request, headers, runtime);
}

async function listInterventionDictionaryNerResultsWithOptions(name: string, request: ListInterventionDictionaryNerResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionaryNerResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.query)) {
    query.query = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListInterventionDictionaryNerResults', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}/ner-results`, 'json', req, runtime);
}

model ListInterventionDictionaryRelatedEntitiesResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
}

model ListInterventionDictionaryRelatedEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryRelatedEntitiesResponseBody(name='body'),
}

async function listInterventionDictionaryRelatedEntities(name: string): ListInterventionDictionaryRelatedEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInterventionDictionaryRelatedEntitiesWithOptions(name, headers, runtime);
}

async function listInterventionDictionaryRelatedEntitiesWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListInterventionDictionaryRelatedEntitiesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListInterventionDictionaryRelatedEntities', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}/related`, 'json', req, runtime);
}

model ListModelsRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  type?: string(name='type'),
}

model ListModelsResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
}

model ListModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelsResponseBody(name='body'),
}

async function listModels(appGroupIdentity: string, request: ListModelsRequest): ListModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listModelsWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listModelsWithOptions(appGroupIdentity: string, request: ListModelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListModelsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListModels', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models`, 'json', req, runtime);
}

model ListQueryProcessorNersRequest {
  domain?: string(name='domain'),
}

model ListQueryProcessorNersResponseBody = {
  result?: [ 
    {
      label?: string(name='label'),
      tag?: string(name='tag'),
      order?: int32(name='order'),
      priority?: string(name='priority'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListQueryProcessorNersResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorNersResponseBody(name='body'),
}

async function listQueryProcessorNers(request: ListQueryProcessorNersRequest): ListQueryProcessorNersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQueryProcessorNersWithOptions(request, headers, runtime);
}

async function listQueryProcessorNersWithOptions(request: ListQueryProcessorNersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQueryProcessorNersResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.domain)) {
    query.domain = request.domain;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListQueryProcessorNers', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/query-processor/ner/default-priorities`, 'json', req, runtime);
}

model ListQueryProcessorsRequest {
  isActive?: int32(name='isActive'),
}

model ListQueryProcessorsResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      active?: boolean(name='active'),
      domain?: string(name='domain'),
      indexes?: [ string ](name='indexes'),
      processors?: [  map[string]any ](name='processors'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListQueryProcessorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorsResponseBody(name='body'),
}

async function listQueryProcessors(appGroupIdentity: string, appId: string, request: ListQueryProcessorsRequest): ListQueryProcessorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQueryProcessorsWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function listQueryProcessorsWithOptions(appGroupIdentity: string, appId: string, request: ListQueryProcessorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQueryProcessorsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.isActive)) {
    query.isActive = request.isActive;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListQueryProcessors', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors`, 'json', req, runtime);
}

model ListScheduledTasksRequest {
  type?: string(name='type'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListScheduledTasksResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: long(name='totalCount'),
}

model ListScheduledTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListScheduledTasksResponseBody(name='body'),
}

async function listScheduledTasks(appGroupIdentity: string, request: ListScheduledTasksRequest): ListScheduledTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listScheduledTasksWithOptions(appGroupIdentity, request, headers, runtime);
}

async function listScheduledTasksWithOptions(appGroupIdentity: string, request: ListScheduledTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListScheduledTasksResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.type)) {
    query.type = request.type;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListScheduledTasks', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks`, 'json', req, runtime);
}

model ListSecondRanksResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      active?: boolean(name='active'),
      isDefault?: string(name='isDefault'),
      isSys?: string(name='isSys'),
      description?: string(name='description'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
      meta?: string(name='meta'),
      id?: string(name='id'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListSecondRanksResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecondRanksResponseBody(name='body'),
}

async function listSecondRanks(appGroupIdentity: string, appId: string): ListSecondRanksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSecondRanksWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listSecondRanksWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSecondRanksResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListSecondRanks', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks`, 'json', req, runtime);
}

model ListSlowQueryCategoriesResponseBody = {
  result?: {
    start?: int32(name='start'),
    analyzeStatus?: string(name='analyzeStatus'),
    end?: int32(name='end'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ListSlowQueryCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlowQueryCategoriesResponseBody(name='body'),
}

async function listSlowQueryCategories(appGroupIdentity: string): ListSlowQueryCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSlowQueryCategoriesWithOptions(appGroupIdentity, headers, runtime);
}

async function listSlowQueryCategoriesWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlowQueryCategoriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListSlowQueryCategories', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/categories`, 'json', req, runtime);
}

model ListSlowQueryQueriesResponseBody = {
  result?: {
    index?: int32(name='index'),
    appQuery?: string(name='appQuery'),
    start?: int32(name='start'),
    end?: int32(name='end'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ListSlowQueryQueriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlowQueryQueriesResponseBody(name='body'),
}

async function listSlowQueryQueries(appGroupIdentity: string, categoryIndex: string): ListSlowQueryQueriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSlowQueryQueriesWithOptions(appGroupIdentity, categoryIndex, headers, runtime);
}

async function listSlowQueryQueriesWithOptions(appGroupIdentity: string, categoryIndex: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlowQueryQueriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListSlowQueryQueries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/categories/${categoryIndex}/queries`, 'json', req, runtime);
}

model ListSortExpressionsResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      active?: boolean(name='active'),
      description?: string(name='description'),
      updated?: int32(name='updated'),
      name?: string(name='name'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListSortExpressionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSortExpressionsResponseBody(name='body'),
}

async function listSortExpressions(appGroupIdentity: string, appId: string): ListSortExpressionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSortExpressionsWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function listSortExpressionsWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSortExpressionsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListSortExpressions', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/sort-expressions`, 'json', req, runtime);
}

model ListSortScriptsResponseBody = {
  result?: [ 
    {
      type?: string(name='type'),
      scope?: string(name='scope'),
      createTime?: string(name='createTime'),
      status?: string(name='status'),
      modifyTime?: string(name='modifyTime'),
      scriptName?: string(name='scriptName'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
}

model ListSortScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSortScriptsResponseBody(name='body'),
}

async function listSortScripts(appGroupIdentity: string, appVersionId: string): ListSortScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSortScriptsWithOptions(appGroupIdentity, appVersionId, headers, runtime);
}

async function listSortScriptsWithOptions(appGroupIdentity: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListSortScriptsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ListSortScripts', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`, 'json', req, runtime);
}

model ListStatisticLogsRequest {
  startTime?: int32(name='startTime'),
  stopTime?: int32(name='stopTime'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  query?: string(name='query'),
  sortBy?: string(name='sortBy'),
  distinct?: boolean(name='distinct'),
  columns?: string(name='columns'),
}

model ListStatisticLogsResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: long(name='totalCount'),
}

model ListStatisticLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatisticLogsResponseBody(name='body'),
}

async function listStatisticLogs(appGroupIdentity: string, moduleName: string, request: ListStatisticLogsRequest): ListStatisticLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listStatisticLogsWithOptions(appGroupIdentity, moduleName, request, headers, runtime);
}

async function listStatisticLogsWithOptions(appGroupIdentity: string, moduleName: string, request: ListStatisticLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListStatisticLogsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.stopTime)) {
    query.stopTime = request.stopTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query.query = request.query;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.sortBy = request.sortBy;
  }
  if (!Util.isUnset(request.distinct)) {
    query.distinct = request.distinct;
  }
  if (!Util.isUnset(request.columns)) {
    query.columns = request.columns;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListStatisticLogs', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/statistic-logs/${moduleName}`, 'json', req, runtime);
}

model ListStatisticReportRequest {
  startTime?: int32(name='startTime'),
  endTime?: int32(name='endTime'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  columns?: string(name='columns'),
  query?: string(name='query'),
}

model ListStatisticReportResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: long(name='totalCount'),
}

model ListStatisticReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListStatisticReportResponseBody(name='body'),
}

async function listStatisticReport(appGroupIdentity: string, moduleName: string, request: ListStatisticReportRequest): ListStatisticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listStatisticReportWithOptions(appGroupIdentity, moduleName, request, headers, runtime);
}

async function listStatisticReportWithOptions(appGroupIdentity: string, moduleName: string, request: ListStatisticReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListStatisticReportResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.startTime)) {
    query.startTime = request.startTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query.endTime = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.columns)) {
    query.columns = request.columns;
  }
  if (!Util.isUnset(request.query)) {
    query.query = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListStatisticReport', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/statistic-report/${moduleName}`, 'json', req, runtime);
}

model ListUserAnalyzerEntriesRequest {
  word?: string(name='word'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListUserAnalyzerEntriesResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='RequestId'),
}

model ListUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAnalyzerEntriesResponseBody(name='body'),
}

async function listUserAnalyzerEntries(name: string, request: ListUserAnalyzerEntriesRequest): ListUserAnalyzerEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserAnalyzerEntriesWithOptions(name, request, headers, runtime);
}

async function listUserAnalyzerEntriesWithOptions(name: string, request: ListUserAnalyzerEntriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserAnalyzerEntriesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.word)) {
    query.word = request.word;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListUserAnalyzerEntries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/user-analyzers/${name}/entries`, 'json', req, runtime);
}

model ListUserAnalyzersRequest {
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
}

model ListUserAnalyzersResponseBody = {
  result?: [ 
    {
      created?: int32(name='created'),
      available?: boolean(name='available'),
      dicts?: [ 
        {
          created?: int32(name='created'),
          entriesCount?: int32(name='entriesCount'),
          type?: string(name='type'),
          entriesLimit?: int32(name='entriesLimit'),
          available?: boolean(name='available'),
          updated?: int32(name='updated'),
          id?: string(name='id'),
        }
      ](name='dicts'),
      name?: string(name='name'),
      updated?: int32(name='updated'),
      id?: string(name='id'),
      business?: string(name='business'),
    }
  ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListUserAnalyzersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAnalyzersResponseBody(name='body'),
}

async function listUserAnalyzers(request: ListUserAnalyzersRequest): ListUserAnalyzersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserAnalyzersWithOptions(request, headers, runtime);
}

async function listUserAnalyzersWithOptions(request: ListUserAnalyzersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserAnalyzersResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListUserAnalyzers', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/user-analyzers`, 'json', req, runtime);
}

model ModifyAppGroupResponseBody = {
  result?: {
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    lockMode?: string(name='lockMode'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
    chargeType?: string(name='chargeType'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    quota?: {
      spec?: string(name='spec'),
      docSize?: int32(name='docSize'),
      computeResource?: int32(name='computeResource'),
    }(name='quota'),
    name?: string(name='name'),
    processingOrderId?: string(name='processingOrderId'),
    instanceId?: string(name='instanceId'),
    type?: string(name='type'),
    chargingWay?: int32(name='chargingWay'),
    status?: string(name='status'),
    projectId?: string(name='projectId'),
    commodityCode?: string(name='commodityCode'),
    switchedTime?: int32(name='switchedTime'),
    expireOn?: string(name='expireOn'),
    domain?: string(name='domain'),
    description?: string(name='description'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    produced?: int32(name='produced'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ModifyAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppGroupResponseBody(name='body'),
}

async function modifyAppGroup(appGroupIdentity: string): ModifyAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function modifyAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyAppGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ModifyAppGroup', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, 'json', req, runtime);
}

model ModifyAppGroupQuotaResponseBody = {
  result?: {
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    lockMode?: string(name='lockMode'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
    chargeType?: string(name='chargeType'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    quota?: {
      spec?: string(name='spec'),
      docSize?: int32(name='docSize'),
      computeResource?: int32(name='computeResource'),
    }(name='quota'),
    name?: string(name='name'),
    processingOrderId?: string(name='processingOrderId'),
    instanceId?: string(name='instanceId'),
    type?: string(name='type'),
    chargingWay?: int32(name='chargingWay'),
    status?: string(name='status'),
    projectId?: string(name='projectId'),
    commodityCode?: string(name='commodityCode'),
    switchedTime?: int32(name='switchedTime'),
    expireOn?: string(name='expireOn'),
    description?: string(name='description'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
    produced?: int32(name='produced'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ModifyAppGroupQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppGroupQuotaResponseBody(name='body'),
}

async function modifyAppGroupQuota(appGroupIdentity: string): ModifyAppGroupQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyAppGroupQuotaWithOptions(appGroupIdentity, headers, runtime);
}

async function modifyAppGroupQuotaWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyAppGroupQuotaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ModifyAppGroupQuota', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/quota`, 'json', req, runtime);
}

model ModifyFirstRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model ModifyFirstRankResponseBody = {
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    name?: string(name='name'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ModifyFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFirstRankResponseBody(name='body'),
}

async function modifyFirstRank(appGroupIdentity: string, appId: string, name: string, request: ModifyFirstRankRequest): ModifyFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyFirstRankWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function modifyFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifyFirstRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyFirstRankResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ModifyFirstRank', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`, 'json', req, runtime);
}

model ModifyModelResponseBody = {
  result?: string(name='result'),
  requestId?: string(name='requestId'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModel(appGroupIdentity: string, modelName: string): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function modifyModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ModifyModel', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`, 'json', req, runtime);
}

model ModifyQueryProcessorRequest {
  dryRun?: boolean(name='dryRun'),
}

model ModifyQueryProcessorResponseBody = {
  result?: {
    created?: int32(name='created'),
    active?: boolean(name='active'),
    domain?: string(name='domain'),
    indexes?: [ string ](name='indexes'),
    processors?: [  map[string]any ](name='processors'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ModifyQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyQueryProcessorResponseBody(name='body'),
}

async function modifyQueryProcessor(appGroupIdentity: string, appId: string, name: string, request: ModifyQueryProcessorRequest): ModifyQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyQueryProcessorWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function modifyQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifyQueryProcessorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyQueryProcessorResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ModifyQueryProcessor', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`, 'json', req, runtime);
}

model ModifyScheduledTaskResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model ModifyScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScheduledTaskResponseBody(name='body'),
}

async function modifyScheduledTask(appGroupIdentity: string, taskId: string): ModifyScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyScheduledTaskWithOptions(appGroupIdentity, taskId, headers, runtime);
}

async function modifyScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyScheduledTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ModifyScheduledTask', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`, 'json', req, runtime);
}

model ModifySecondRankRequest {
  dryRun?: boolean(name='dryRun'),
}

model ModifySecondRankResponseBody = {
  result?: {
    created?: int32(name='created'),
    active?: boolean(name='active'),
    isDefault?: string(name='isDefault'),
    isSys?: string(name='isSys'),
    description?: string(name='description'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    meta?: string(name='meta'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ModifySecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecondRankResponseBody(name='body'),
}

async function modifySecondRank(appGroupIdentity: string, appId: string, name: string, request: ModifySecondRankRequest): ModifySecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifySecondRankWithOptions(appGroupIdentity, appId, name, request, headers, runtime);
}

async function modifySecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifySecondRankRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifySecondRankResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ModifySecondRank', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`, 'json', req, runtime);
}

model PreviewModelRequest {
  query?: string(name='query'),
}

model PreviewModelResponseBody = {
  result?: [  map[string]any ](name='result'),
  requestId?: string(name='requestId'),
  totalCount?: long(name='totalCount'),
}

model PreviewModelResponse = {
  headers: map[string]string(name='headers'),
  body: PreviewModelResponseBody(name='body'),
}

async function previewModel(appGroupIdentity: string, modelName: string, request: PreviewModelRequest): PreviewModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return previewModelWithOptions(appGroupIdentity, modelName, request, headers, runtime);
}

async function previewModelWithOptions(appGroupIdentity: string, modelName: string, request: PreviewModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PreviewModelResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.query)) {
    query.query = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('PreviewModel', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/preview`, 'json', req, runtime);
}

model PushInterventionDictionaryEntriesResponseBody = {
  result?: [ string ](name='result'),
  requestId?: string(name='requestId'),
}

model PushInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PushInterventionDictionaryEntriesResponseBody(name='body'),
}

async function pushInterventionDictionaryEntries(name: string): PushInterventionDictionaryEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushInterventionDictionaryEntriesWithOptions(name, headers, runtime);
}

async function pushInterventionDictionaryEntriesWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): PushInterventionDictionaryEntriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('PushInterventionDictionaryEntries', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/intervention-dictionaries/${name}/entries/actions/bulk`, 'json', req, runtime);
}

model PushUserAnalyzerEntriesResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='RequestId'),
}

model PushUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PushUserAnalyzerEntriesResponseBody(name='body'),
}

async function pushUserAnalyzerEntries(name: string): PushUserAnalyzerEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pushUserAnalyzerEntriesWithOptions(name, headers, runtime);
}

async function pushUserAnalyzerEntriesWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): PushUserAnalyzerEntriesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('PushUserAnalyzerEntries', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/user-analyzers/${name}/entries/actions/bulk`, 'json', req, runtime);
}

model RankPreviewQueryResponseBody = {
  requestId?: string(name='requestId'),
}

model RankPreviewQueryResponse = {
  headers: map[string]string(name='headers'),
  body: RankPreviewQueryResponseBody(name='body'),
}

async function rankPreviewQuery(appGroupIdentity: string, modelName: string): RankPreviewQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return rankPreviewQueryWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function rankPreviewQueryWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RankPreviewQueryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RankPreviewQuery', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/query-rank`, 'json', req, runtime);
}

model ReleaseSortScriptResponseBody = {
  requestId?: string(name='requestId'),
}

model ReleaseSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSortScriptResponseBody(name='body'),
}

async function releaseSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string): ReleaseSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return releaseSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, headers, runtime);
}

async function releaseSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseSortScriptResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ReleaseSortScript', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/release`, 'json', req, runtime);
}

model RemoveAppResponseBody = {
  result?: [ int32 ](name='result'),
  requestId?: string(name='requestId'),
}

model RemoveAppResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppResponseBody(name='body'),
}

async function removeApp(appGroupIdentity: string, appId: string): RemoveAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeAppWithOptions(appGroupIdentity, appId, headers, runtime);
}

async function removeAppWithOptions(appGroupIdentity: string, appId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveAppResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveApp', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`, 'json', req, runtime);
}

model RemoveAppGroupResponseBody = {
  result?: [ int32 ](name='result'),
  requestId?: string(name='requestId'),
}

model RemoveAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppGroupResponseBody(name='body'),
}

async function removeAppGroup(appGroupIdentity: string): RemoveAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function removeAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveAppGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveAppGroup', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, 'json', req, runtime);
}

model RemoveDataCollectionResponseBody = {
  result?: string(name='result'),
  requestId?: string(name='requestId'),
}

model RemoveDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDataCollectionResponseBody(name='body'),
}

async function removeDataCollection(appGroupIdentity: string, dataCollectionIdentity: string): RemoveDataCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeDataCollectionWithOptions(appGroupIdentity, dataCollectionIdentity, headers, runtime);
}

async function removeDataCollectionWithOptions(appGroupIdentity: string, dataCollectionIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveDataCollectionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveDataCollection', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections/${dataCollectionIdentity}`, 'json', req, runtime);
}

model RemoveFirstRankResponseBody = {
  result?: {
    active?: boolean(name='active'),
    description?: string(name='description'),
    name?: string(name='name'),
    meta?: [ 
      {
        arg?: string(name='arg'),
        attribute?: string(name='attribute'),
        weight?: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model RemoveFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFirstRankResponseBody(name='body'),
}

async function removeFirstRank(appGroupIdentity: string, appId: string, name: string): RemoveFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeFirstRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function removeFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveFirstRankResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveFirstRank', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`, 'json', req, runtime);
}

model RemoveInterventionDictionaryResponseBody = {
  result?: {
    created?: string(name='created'),
    type?: string(name='type'),
    analyzer?: string(name='analyzer'),
    updated?: string(name='updated'),
    name?: string(name='name'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model RemoveInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInterventionDictionaryResponseBody(name='body'),
}

async function removeInterventionDictionary(name: string): RemoveInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeInterventionDictionaryWithOptions(name, headers, runtime);
}

async function removeInterventionDictionaryWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveInterventionDictionaryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveInterventionDictionary', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/intervention-dictionaries/${name}`, 'json', req, runtime);
}

model RemoveQueryProcessorResponseBody = {
  result?: string(name='result'),
  requestId?: string(name='requestId'),
}

model RemoveQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveQueryProcessorResponseBody(name='body'),
}

async function removeQueryProcessor(appGroupIdentity: string, appId: string, name: string): RemoveQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeQueryProcessorWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function removeQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveQueryProcessorResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveQueryProcessor', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`, 'json', req, runtime);
}

model RemoveScheduledTaskResponseBody = {
  result?: [ int32 ](name='result'),
  requestId?: string(name='requestId'),
}

model RemoveScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveScheduledTaskResponseBody(name='body'),
}

async function removeScheduledTask(appGroupIdentity: string, taskId: string): RemoveScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeScheduledTaskWithOptions(appGroupIdentity, taskId, headers, runtime);
}

async function removeScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveScheduledTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveScheduledTask', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`, 'json', req, runtime);
}

model RemoveSecondRankResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model RemoveSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSecondRankResponseBody(name='body'),
}

async function removeSecondRank(appGroupIdentity: string, appId: string, name: string): RemoveSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeSecondRankWithOptions(appGroupIdentity, appId, name, headers, runtime);
}

async function removeSecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveSecondRankResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveSecondRank', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`, 'json', req, runtime);
}

model RemoveUserAnalyzerResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model RemoveUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserAnalyzerResponseBody(name='body'),
}

async function removeUserAnalyzer(name: string): RemoveUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeUserAnalyzerWithOptions(name, headers, runtime);
}

async function removeUserAnalyzerWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveUserAnalyzerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RemoveUserAnalyzer', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/user-analyzers/${name}`, 'json', req, runtime);
}

model RenewAppGroupResponseBody = {
  requestId?: string(name='requestId'),
}

model RenewAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RenewAppGroupResponseBody(name='body'),
}

async function renewAppGroup(appGroupIdentity: string): RenewAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return renewAppGroupWithOptions(appGroupIdentity, headers, runtime);
}

async function renewAppGroupWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): RenewAppGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('RenewAppGroup', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/actions/renew`, 'json', req, runtime);
}

model ReplaceAppGroupCommodityCodeResponseBody = {
  result?: {
    created?: int32(name='created'),
    currentVersion?: string(name='currentVersion'),
    pendingSecondRankAlgoDeploymentId?: int32(name='pendingSecondRankAlgoDeploymentId'),
    lockMode?: string(name='lockMode'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
    chargeType?: string(name='chargeType'),
    hasPendingQuotaReviewTask?: int32(name='hasPendingQuotaReviewTask'),
    secondRankAlgoDeploymentId?: int32(name='secondRankAlgoDeploymentId'),
    versions?: [ string ](name='versions'),
    quota?: {
      spec?: string(name='spec'),
      docSize?: int32(name='docSize'),
      computeResource?: int32(name='computeResource'),
    }(name='quota'),
    name?: string(name='name'),
    processingOrderId?: string(name='processingOrderId'),
    instanceId?: string(name='instanceId'),
    type?: string(name='type'),
    chargingWay?: int32(name='chargingWay'),
    status?: string(name='status'),
    projectId?: string(name='projectId'),
    commodityCode?: string(name='commodityCode'),
    switchedTime?: int32(name='switchedTime'),
    expireOn?: string(name='expireOn'),
    description?: string(name='description'),
    firstRankAlgoDeploymentId?: int32(name='firstRankAlgoDeploymentId'),
    produced?: int32(name='produced'),
    lockedByExpiration?: int32(name='lockedByExpiration'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model ReplaceAppGroupCommodityCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceAppGroupCommodityCodeResponseBody(name='body'),
}

async function replaceAppGroupCommodityCode(appGroupIdentity: string): ReplaceAppGroupCommodityCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return replaceAppGroupCommodityCodeWithOptions(appGroupIdentity, headers, runtime);
}

async function replaceAppGroupCommodityCodeWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceAppGroupCommodityCodeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ReplaceAppGroupCommodityCode', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/actions/to-instance-typed`, 'json', req, runtime);
}

model SaveSortScriptFileResponseBody = {
  requestId?: string(name='requestId'),
}

model SaveSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: SaveSortScriptFileResponseBody(name='body'),
}

async function saveSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string): SaveSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return saveSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, fileName, headers, runtime);
}

async function saveSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, fileName: string, headers: map[string]string, runtime: Util.RuntimeOptions): SaveSortScriptFileResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('SaveSortScriptFile', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/${fileName}`, 'json', req, runtime);
}

model StartSlowQueryAnalyzerResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model StartSlowQueryAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: StartSlowQueryAnalyzerResponseBody(name='body'),
}

async function startSlowQueryAnalyzer(appGroupIdentity: string): StartSlowQueryAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startSlowQueryAnalyzerWithOptions(appGroupIdentity, headers, runtime);
}

async function startSlowQueryAnalyzerWithOptions(appGroupIdentity: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartSlowQueryAnalyzerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('StartSlowQueryAnalyzer', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/run`, 'json', req, runtime);
}

model TrainModelResponseBody = {
  result?: map[string]any(name='result'),
  requestId?: string(name='requestId'),
}

model TrainModelResponse = {
  headers: map[string]string(name='headers'),
  body: TrainModelResponseBody(name='body'),
}

async function trainModel(appGroupIdentity: string, modelName: string): TrainModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return trainModelWithOptions(appGroupIdentity, modelName, headers, runtime);
}

async function trainModelWithOptions(appGroupIdentity: string, modelName: string, headers: map[string]string, runtime: Util.RuntimeOptions): TrainModelResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('TrainModel', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/train`, 'json', req, runtime);
}

model UpdateABTestExperimentResponseBody = {
  result?: {
    created?: int32(name='created'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    online?: boolean(name='online'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model UpdateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestExperimentResponseBody(name='body'),
}

async function updateABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): UpdateABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function updateABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('UpdateABTestExperiment', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`, 'json', req, runtime);
}

model UpdateABTestFixedFlowDividersResponseBody = {
  result?: [ string ](name='result'),
  requestId?: string(name='requestId'),
}

model UpdateABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestFixedFlowDividersResponseBody(name='body'),
}

async function updateABTestFixedFlowDividers(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string): UpdateABTestFixedFlowDividersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestFixedFlowDividersWithOptions(appGroupIdentity, sceneId, groupId, experimentId, headers, runtime);
}

async function updateABTestFixedFlowDividersWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestFixedFlowDividersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('UpdateABTestFixedFlowDividers', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}/fixed-flow-dividers`, 'json', req, runtime);
}

model UpdateABTestGroupResponseBody = {
  result?: {
    created?: int32(name='created'),
    status?: int32(name='status'),
    updated?: int32(name='updated'),
    name?: string(name='name'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model UpdateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestGroupResponseBody(name='body'),
}

async function updateABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string): UpdateABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, headers, runtime);
}

async function updateABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('UpdateABTestGroup', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`, 'json', req, runtime);
}

model UpdateABTestSceneResponseBody = {
  result?: {
    created?: int32(name='created'),
    params?: map[string]any(name='params'),
    traffic?: int32(name='traffic'),
    online?: boolean(name='online'),
    name?: string(name='name'),
    updated?: int32(name='updated'),
    id?: string(name='id'),
  }(name='result'),
  requestId?: string(name='requestId'),
}

model UpdateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestSceneResponseBody(name='body'),
}

async function updateABTestScene(appGroupIdentity: string, sceneId: string): UpdateABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateABTestSceneWithOptions(appGroupIdentity, sceneId, headers, runtime);
}

async function updateABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateABTestSceneResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('UpdateABTestScene', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`, 'json', req, runtime);
}

model UpdateFetchFieldsRequest {
  dryRun?: boolean(name='dryRun'),
}

model UpdateFetchFieldsResponseBody = {
  result?: boolean(name='result'),
  requestId?: string(name='requestId'),
}

model UpdateFetchFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFetchFieldsResponseBody(name='body'),
}

async function updateFetchFields(appGroupIdentity: string, appId: string, request: UpdateFetchFieldsRequest): UpdateFetchFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFetchFieldsWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function updateFetchFieldsWithOptions(appGroupIdentity: string, appId: string, request: UpdateFetchFieldsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFetchFieldsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('UpdateFetchFields', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/fetch-fields`, 'json', req, runtime);
}

model UpdateSummariesRequest {
  dryRun?: boolean(name='dryRun'),
}

model UpdateSummariesResponseBody = {
  result?: boolean(name='result'),
  requestId?: string(name='requestId'),
}

model UpdateSummariesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSummariesResponseBody(name='body'),
}

async function updateSummaries(appGroupIdentity: string, appId: string, request: UpdateSummariesRequest): UpdateSummariesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSummariesWithOptions(appGroupIdentity, appId, request, headers, runtime);
}

async function updateSummariesWithOptions(appGroupIdentity: string, appId: string, request: UpdateSummariesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSummariesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dryRun)) {
    query.dryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('UpdateSummaries', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/summaries`, 'json', req, runtime);
}

