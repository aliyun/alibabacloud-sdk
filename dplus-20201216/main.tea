/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('dplus', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateImageAmazonTaskRequest {
  gif?: boolean(name='Gif'),
  imgUrlList?: [ string ](name='ImgUrlList'),
  templateMode?: string(name='TemplateMode'),
  textList?: [ string ](name='TextList'),
}

model CreateImageAmazonTaskShrinkRequest {
  gif?: boolean(name='Gif'),
  imgUrlListShrink?: string(name='ImgUrlList'),
  templateMode?: string(name='TemplateMode'),
  textListShrink?: string(name='TextList'),
}

model CreateImageAmazonTaskResponseBody = {
  code?: long(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model CreateImageAmazonTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageAmazonTaskResponseBody(name='body'),
}

async function createImageAmazonTaskWithOptions(tmpReq: CreateImageAmazonTaskRequest, runtime: Util.RuntimeOptions): CreateImageAmazonTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateImageAmazonTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.imgUrlList)) {
    request.imgUrlListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imgUrlList, 'ImgUrlList', 'json');
  }
  if (!Util.isUnset(tmpReq.textList)) {
    request.textListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.textList, 'TextList', 'json');
  }
  var query = {};
  query["Gif"] = request.gif;
  query["ImgUrlList"] = request.imgUrlListShrink;
  query["TemplateMode"] = request.templateMode;
  query["TextList"] = request.textListShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageAmazonTask',
    version = '2020-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageAmazonTask(request: CreateImageAmazonTaskRequest): CreateImageAmazonTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageAmazonTaskWithOptions(request, runtime);
}

model GetTaskResultRequest {
  taskId?: long(name='TaskId'),
}

model GetTaskResultResponseBody = {
  code?: long(name='Code'),
  data?: {
    resuslt?: string(name='Resuslt'),
    status?: long(name='Status'),
    statusName?: string(name='StatusName'),
    taskId?: long(name='TaskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTaskResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResultResponseBody(name='body'),
}

async function getTaskResultWithOptions(request: GetTaskResultRequest, runtime: Util.RuntimeOptions): GetTaskResultResponse {
  Util.validateModel(request);
  var query = {};
  query["TaskId"] = request.taskId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskResult',
    version = '2020-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskResult(request: GetTaskResultRequest): GetTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskResultWithOptions(request, runtime);
}

model GetTaskStatusRequest {
  taskId?: long(name='TaskId'),
}

model GetTaskStatusResponseBody = {
  code?: long(name='Code'),
  data?: {
    status?: long(name='Status'),
    statusName?: string(name='StatusName'),
    taskId?: long(name='TaskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatusWithOptions(request: GetTaskStatusRequest, runtime: Util.RuntimeOptions): GetTaskStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["TaskId"] = request.taskId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskStatus',
    version = '2020-12-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskStatusWithOptions(request, runtime);
}

