/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'xtrace';
  @version = '2019-08-08';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CheckCommercialStatusRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
  service: string(name='Service', example='xtrace', position='Query'),
}

model CheckCommercialStatusResponseBody = {
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='1E2B6A4C-6B83-4062-8B6F-AEEC1FC47DED'),
}

model CheckCommercialStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCommercialStatusResponseBody(name='body'),
}

async function checkCommercialStatus(request: CheckCommercialStatusRequest): CheckCommercialStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCommercialStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTagKeyRequest {
  endTime?: long(name='EndTime', description='The timestamp of the end time of the time range to query. The timestamp is accurate to milliseconds.', example='1575622455686', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='appTest', position='Query'),
  spanName?: string(name='SpanName', description='The name of the span.', example='createOrder', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp of the start time of the time range to query. The timestamp is accurate to milliseconds.', example='1575561600000', position='Query'),
}

model GetTagKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1F******'),
  tagKeys?: {
    tagKey?: [ string ](name='TagKey')
  }(name='TagKeys', description='The tag keys.'),
}

model GetTagKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTagKeyResponseBody(name='body'),
}

async function getTagKey(request: GetTagKeyRequest): GetTagKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagKey', 'POST', '/', 'json', false, 'json', request);
}

model GetTagValRequest {
  endTime?: long(name='EndTime', description='The timestamp of the end time of the time range to query. The timestamp is accurate to milliseconds.', example='1575622455686', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='appTest', position='Query'),
  spanName?: string(name='SpanName', description='The name of the span.', example='createOrder', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp of the start time of the time range to query. The timestamp is accurate to milliseconds.', example='1575561600000', position='Query'),
  tagKey: string(name='TagKey', description='The tag key.', example='span.kind', position='Query'),
}

model GetTagValResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1F******'),
  tagValues?: {
    tagValue?: [ string ](name='TagValue')
  }(name='TagValues', description='The tag values.'),
}

model GetTagValResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTagValResponseBody(name='body'),
}

async function getTagVal(request: GetTagValRequest): GetTagValResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagVal', 'POST', '/', 'json', false, 'json', request);
}

model GetTraceRequest {
  appType?: string(name='AppType', description='The type of the application. You can set the value to **XTRACE** or leave this parameter unspecified.', example='XTRACE', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  traceID: string(name='TraceID', description='The unique ID of the trace.', example='1c6881aab84191a4', position='Query'),
}

model GetTraceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1F******'),
  spans?: {
    span?: [ 
    {
      duration?: long(name='Duration', description='The time used to call the trace. Unit: milliseconds.', example='1000'),
      haveStack?: boolean(name='HaveStack', description='Indicates whether the span has child spans. Valid values:

- true: The span has child spans. 
- false: The span has no child spans.', example='false'),
      logEventList?: {
        logEvent?: [ 
        {
          tagEntryList?: {
            tagEntry?: [ 
            {
              key?: string(name='Key', description='The tag key in the log event.', example='logLevel'),
              value?: string(name='Value', description='The tag value in the log event.', example='Warning'),
            }
          ](name='TagEntry')
          }(name='TagEntryList', description='The tags in the log event.'),
          timestamp?: long(name='Timestamp', description='The timestamp when the log event was generated.', example='1583683202047000'),
        }
      ](name='LogEvent')
      }(name='LogEventList', description='The log events in the trace.'),
      operationName?: string(name='OperationName', description='The name of the span.', example='/api'),
      parentSpanId?: string(name='ParentSpanId', description='The ID of the parent span.', example='fec891bb8f8XXX'),
      resultCode?: string(name='ResultCode', description='The status code.', example='200'),
      rpcId?: string(name='RpcId', description='The parent-child and sibling relationship between spans. For example, span 1.1 is the parent of span 1.1.1, and span 1.1.2 and span 1.1.1 are siblings.', example='1.1'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the server where the span resides.', example='192.168.XXX.XXX'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='server1'),
      spanId?: string(name='SpanId', description='Span ID.', example='fec891bb8f8XXX'),
      tagEntryList?: {
        tagEntry?: [ 
        {
          key?: string(name='Key', description='The tag key in the span.', example='logLevel'),
          value?: string(name='Value', description='The tag value in the span.', example='Warning'),
        }
      ](name='TagEntry')
      }(name='TagEntryList', description='The tags in the span.'),
      timestamp?: long(name='Timestamp', description='The timestamp when the span was generated. Unit: microseconds.', example='1689845513298000'),
      traceID?: string(name='TraceID', description='The unique ID of the trace.', example='1c6881aab84191a4****'),
    }
  ](name='Span')
  }(name='Spans', description='The details of the trace.'),
}

model GetTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceResponseBody(name='body'),
}

async function getTrace(request: GetTraceRequest): GetTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrace', 'POST', '/', 'json', false, 'json', request);
}

model ListIpOrHostsRequest {
  endTime?: long(name='EndTime', description='The timestamp of the end time of the time range to query. The timestamp is accurate to milliseconds.', example='1583723776974', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application. If you do not set this parameter, the IP addresses of all applications in the specified region are returned.', example='service1', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp of the start time of the time range to query. The timestamp is accurate to milliseconds.', example='1583683200000', position='Query'),
}

model ListIpOrHostsResponseBody = {
  ipNames?: {
    ipName?: [ string ](name='IpName')
  }(name='IpNames', description='The IP addresses.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1FC4****'),
}

model ListIpOrHostsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpOrHostsResponseBody(name='body'),
}

async function listIpOrHosts(request: ListIpOrHostsRequest): ListIpOrHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpOrHosts', 'POST', '/', 'json', false, 'json', request);
}

model ListServicesRequest {
  appType?: string(name='AppType', description='The type of the application. You can set the value to **XTRACE** or leave this parameter unspecified.', example='XTRACE', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
}

model ListServicesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the region.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1FC47DED'),
  services?: {
    service?: [ 
    {
      pid?: string(name='Pid', description='The ID of the application.', example='XXXqn3ly@741623b4e915df8'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-beijing'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='a3'),
    }
  ](name='Service')
  }(name='Services', description='The applications.'),
}

model ListServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServices', 'POST', '/', 'json', false, 'json', request);
}

model ListSpanNamesRequest {
  endTime?: long(name='EndTime', description='The timestamp of the end time of the time range to query. The timestamp is accurate to milliseconds.', example='1575622455686', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='service 1', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp of the start time of the time range to query. The timestamp is accurate to milliseconds.', example='1575561600000', position='Query'),
}

model ListSpanNamesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1F******'),
  spanNames?: {
    spanName?: [ string ](name='SpanName')
  }(name='SpanNames', description='The span names.'),
}

model ListSpanNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSpanNamesResponseBody(name='body'),
}

async function listSpanNames(request: ListSpanNamesRequest): ListSpanNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSpanNames', 'POST', '/', 'json', false, 'json', request);
}

model OpenXtraceServiceRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model OpenXtraceServiceResponseBody = {
  orderId?: string(name='OrderId', example='155709986'),
  requestId?: string(name='RequestId', example='1E2B6A4C-6B83-4062-8B6F-AEEC1FC4****'),
  result?: string(name='Result'),
}

model OpenXtraceServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenXtraceServiceResponseBody(name='body'),
}

async function openXtraceService(request: OpenXtraceServiceRequest): OpenXtraceServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenXtraceService', 'POST', '/', 'json', false, 'json', request);
}

model QueryMetricRequest {
  regionId?: string(name='RegionId', position='Host'),
  dimensions?: [ string ](name='Dimensions', description='The dimensions of the metric that you want to query.', example='RT', position='Query'),
  endTime: long(name='EndTime', description='The timestamp of the end time of the time range to query. The timestamp is accurate to milliseconds.', example='1575622455686', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the field that you want to use to filter the returned entries.', example='http.status_code'),
      value?: string(name='Value', description='The value of the field that you want to use to filter the returned entries.', example='200'),
    }
  ](name='Filters', description='The filter conditions.', position='Query'),
  intervalInSec?: int32(name='IntervalInSec', description='The time interval at which you want to query metric data. Unit: milliseconds. Minimum value: 60000. 

> If you set this parameter to 2147483647, all data in the specified time interval is returned.', example='100000', position='Query'),
  limit?: int32(name='Limit', description='The maximum number of entries that you want to return.', example='100', position='Query'),
  measures: [ string ](name='Measures', description='The measures of the metric that you want to query.', example='count', position='Query'),
  metric: string(name='Metric', description='The name of the metric. Valid values:

- `appstat.incall`: trace statistics 
- `appstat.sql`: SQL statistics', example='appstat.incall', position='Query'),
  order?: string(name='Order', description='The order in which you want to sort the returned entries. Valid values:

- ASC: ascending order 
- DESC: descending order', example='ASC', position='Query'),
  orderBy?: string(name='OrderBy', description='The field based on which you want to sort the returned entries.', example='count', position='Query'),
  proxyUserId?: string(name='ProxyUserId', description='The ID of the proxy user.', example='testefgag12', position='Query'),
  startTime: long(name='StartTime', description='The timestamp of the start time of the time range to query. The timestamp is accurate to milliseconds.', example='1575561600000', position='Query'),
}

model QueryMetricResponseBody = {
  data?: string(name='Data', description='The returned statistics.', example='{   "RequestId": "E2373982-D8CD-413D-B991-8EB678******",   "Data": "{\\"data\\":[{\\"date\\":1583686800000,\\"count\\":0,\\"rt\\":0,\\"rpc\\":\\"childSpan3\\"}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1F******'),
}

model QueryMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMetricResponseBody(name='body'),
}

async function queryMetric(request: QueryMetricRequest): QueryMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMetric', 'POST', '/', 'json', false, 'json', request);
}

model SearchTracesRequest {
  appType?: string(name='AppType', description='The type of the application. You can set the value to **XTRACE** or leave this parameter unspecified.', example='XTRACE', position='Query'),
  endTime: long(name='EndTime', description='The timestamp of the end time of the time range to query. The timestamp is accurate to milliseconds.', example='1575622455686', position='Query'),
  minDuration?: long(name='MinDuration', description='The time more than which is used to call the trace. Unit: milliseconds. For example, a value of 100 specifies to return the traces that more than 100 milliseconds are used to call.', example='1000', position='Query'),
  operationName?: string(name='OperationName', description='The name of the span.', example='/api', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. For example, a value of 5 indicates page 5.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='100', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: false. Valid values:

- true: reverse chronological order 
- false: chronological order', example='false', position='Query'),
  serviceIp?: string(name='ServiceIp', description='The IP address that corresponds to the span.', example='10.0.0.0', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='service 1', position='Query'),
  startTime: long(name='StartTime', description='The timestamp of the start time of the time range to query. The timestamp is accurate to milliseconds.', example='1575561600000', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='http.status_cod'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tag', description='The list of the tags.', position='Query'),
}

model SearchTracesResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='100'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1000'),
    traceInfos?: {
      traceInfo?: [ 
      {
        duration?: long(name='Duration', description='The time used to call the trace. Unit: milliseconds.', example='100'),
        operationName?: string(name='OperationName', description='The name of the span.', example='/api'),
        serviceIp?: string(name='ServiceIp', description='The IP address of the server where the span resides.', example='192.163.XXX.XXX'),
        serviceName?: string(name='ServiceName', description='The name of the application.', example='service1'),
        tagMap?: map[string]any(name='TagMap', description='The map of tags.', example='{"env":"dev"}'),
        timestamp?: long(name='Timestamp', description='The time when the span was generated. Unit: microseconds.', example='1575561600000000'),
        traceID?: string(name='TraceID', description='The ID of the trace.', example='1c6881aab84191a4'),
      }
    ](name='TraceInfo')
    }(name='TraceInfos', description='The information about the trace.'),
  }(name='PageBean', description='The information about the returned page.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E2B6A4C-6B83-4062-8B6F-AEEC1F******'),
}

model SearchTracesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTracesResponseBody(name='body'),
}

async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraces', 'POST', '/', 'json', false, 'json', request);
}

