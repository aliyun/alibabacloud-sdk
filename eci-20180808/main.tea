/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eci', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CommitContainerRequest {
  acrRegistryInfo?: {
    instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f3****'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
  }(name='AcrRegistryInfo'),
  arn?: {
    assumeRoleFor?: string(name='AssumeRoleFor', example='1619897******'),
    roleArn?: string(name='RoleArn'),
    roleType?: string(name='RoleType'),
  }(name='Arn'),
  containerGroupId?: string(name='ContainerGroupId', example='eci-bp1do4xz75fa5sd****'),
  containerName?: string(name='ContainerName', example='container-1'),
  image?: {
    author?: string(name='Author', example='ECI'),
    message?: string(name='Message', example='test commit'),
    repository?: string(name='Repository', example='registry-vpc.cn-hangzhou.aliyuncs.com/eastest/registry-test'),
    tag?: string(name='Tag', example='0.0.6'),
  }(name='Image'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CommitContainerResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CommitContainerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommitContainerResponseBody(name='body'),
}

async function commitContainerWithOptions(request: CommitContainerRequest, runtime: Util.RuntimeOptions): CommitContainerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acrRegistryInfo)) {
    query['AcrRegistryInfo'] = request.acrRegistryInfo;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.containerName)) {
    query['ContainerName'] = request.containerName;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommitContainer',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commitContainer(request: CommitContainerRequest): CommitContainerResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitContainerWithOptions(request, runtime);
}

model CreateContainerGroupRequest {
  dnsConfig?: {
    nameServer?: [ string ](name='NameServer'),
    option?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='Option'),
    search?: [ string ](name='Search'),
  }(name='DnsConfig'),
  hostSecurityContext?: {
    sysctl?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='Sysctl'),
  }(name='HostSecurityContext'),
  securityContext?: {
    sysctl?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='Sysctl'),
  }(name='SecurityContext'),
  acrRegistryInfo?: [ 
    {
      domain?: [ string ](name='Domain'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      regionId?: string(name='RegionId'),
    }
  ](name='AcrRegistryInfo'),
  activeDeadlineSeconds?: long(name='ActiveDeadlineSeconds'),
  arn?: [ 
    {
      assumeRoleFor?: string(name='AssumeRoleFor'),
      roleArn?: string(name='RoleArn'),
      roleType?: string(name='RoleType'),
    }
  ](name='Arn'),
  autoCreateEip?: boolean(name='AutoCreateEip'),
  autoMatchImageCache?: boolean(name='AutoMatchImageCache'),
  clientToken?: string(name='ClientToken'),
  container?: [ 
    {
      livenessProbe: {
        exec: {
            command?: [ string ](name='Command'),
        }(name='Exec'),
        failureThreshold?: int32(name='FailureThreshold'),
        httpGet: {
            path?: string(name='Path'),
            port?: int32(name='Port'),
            scheme?: string(name='Scheme'),
        }(name='HttpGet'),
        initialDelaySeconds?: int32(name='InitialDelaySeconds'),
        periodSeconds?: int32(name='PeriodSeconds'),
        successThreshold?: int32(name='SuccessThreshold'),
        tcpSocket: {
            port?: int32(name='Port'),
        }(name='TcpSocket'),
        timeoutSeconds?: int32(name='TimeoutSeconds'),
      }(name='LivenessProbe'),
      readinessProbe: {
        exec: {
            command?: [ string ](name='Command'),
        }(name='Exec'),
        failureThreshold?: int32(name='FailureThreshold'),
        httpGet: {
            path?: string(name='Path'),
            port?: int32(name='Port'),
            scheme?: string(name='Scheme'),
        }(name='HttpGet'),
        initialDelaySeconds?: int32(name='InitialDelaySeconds'),
        periodSeconds?: int32(name='PeriodSeconds'),
        successThreshold?: int32(name='SuccessThreshold'),
        tcpSocket: {
            port?: int32(name='Port'),
        }(name='TcpSocket'),
        timeoutSeconds?: int32(name='TimeoutSeconds'),
      }(name='ReadinessProbe'),
      securityContext: {
        capability: {
            add?: [ string ](name='Add'),
        }(name='Capability'),
        readOnlyRootFilesystem?: boolean(name='ReadOnlyRootFilesystem'),
        runAsUser?: long(name='RunAsUser'),
      }(name='SecurityContext'),
      arg?: [ string ](name='Arg'),
      command?: [ string ](name='Command'),
      cpu?: float(name='Cpu'),
      environmentVar?: [ 
        {
          fieldRef: {
            fieldPath?: string(name='FieldPath'),
          }(name='FieldRef'),
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='EnvironmentVar'),
      gpu?: int32(name='Gpu'),
      image?: string(name='Image'),
      imagePullPolicy?: string(name='ImagePullPolicy'),
      lifecyclePostStartHandlerExec?: [ string ](name='LifecyclePostStartHandlerExec'),
      lifecyclePostStartHandlerHttpGetHost?: string(name='LifecyclePostStartHandlerHttpGetHost'),
      lifecyclePostStartHandlerHttpGetHttpHeader?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='LifecyclePostStartHandlerHttpGetHttpHeader'),
      lifecyclePostStartHandlerHttpGetPath?: string(name='LifecyclePostStartHandlerHttpGetPath'),
      lifecyclePostStartHandlerHttpGetPort?: int32(name='LifecyclePostStartHandlerHttpGetPort'),
      lifecyclePostStartHandlerHttpGetScheme?: string(name='LifecyclePostStartHandlerHttpGetScheme'),
      lifecyclePostStartHandlerTcpSocketHost?: string(name='LifecyclePostStartHandlerTcpSocketHost'),
      lifecyclePostStartHandlerTcpSocketPort?: int32(name='LifecyclePostStartHandlerTcpSocketPort'),
      lifecyclePreStopHandlerExec?: [ string ](name='LifecyclePreStopHandlerExec'),
      lifecyclePreStopHandlerHttpGetHost?: string(name='LifecyclePreStopHandlerHttpGetHost'),
      lifecyclePreStopHandlerHttpGetHttpHeader?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='LifecyclePreStopHandlerHttpGetHttpHeader'),
      lifecyclePreStopHandlerHttpGetPath?: string(name='LifecyclePreStopHandlerHttpGetPath'),
      lifecyclePreStopHandlerHttpGetPort?: int32(name='LifecyclePreStopHandlerHttpGetPort'),
      lifecyclePreStopHandlerHttpGetScheme?: string(name='LifecyclePreStopHandlerHttpGetScheme'),
      lifecyclePreStopHandlerTcpSocketHost?: string(name='LifecyclePreStopHandlerTcpSocketHost'),
      lifecyclePreStopHandlerTcpSocketPort?: int32(name='LifecyclePreStopHandlerTcpSocketPort'),
      memory?: float(name='Memory'),
      name?: string(name='Name'),
      port?: [ 
        {
          port?: int32(name='Port'),
          protocol?: string(name='Protocol'),
        }
      ](name='Port'),
      stdin?: boolean(name='Stdin'),
      stdinOnce?: boolean(name='StdinOnce'),
      terminationMessagePath?: string(name='TerminationMessagePath'),
      terminationMessagePolicy?: string(name='TerminationMessagePolicy'),
      tty?: boolean(name='Tty'),
      volumeMount?: [ 
        {
          mountPath?: string(name='MountPath'),
          mountPropagation?: string(name='MountPropagation'),
          name?: string(name='Name'),
          readOnly?: boolean(name='ReadOnly'),
          subPath?: string(name='SubPath'),
        }
      ](name='VolumeMount'),
      workingDir?: string(name='WorkingDir'),
    }
  ](name='Container'),
  containerGroupName?: string(name='ContainerGroupName'),
  containerResourceView?: boolean(name='ContainerResourceView'),
  corePattern?: string(name='CorePattern'),
  cpu?: float(name='Cpu'),
  cpuOptionsCore?: int32(name='CpuOptionsCore'),
  cpuOptionsNuma?: string(name='CpuOptionsNuma'),
  cpuOptionsThreadsPerCore?: int32(name='CpuOptionsThreadsPerCore'),
  dnsPolicy?: string(name='DnsPolicy'),
  egressBandwidth?: long(name='EgressBandwidth'),
  eipBandwidth?: int32(name='EipBandwidth'),
  eipCommonBandwidthPackage?: string(name='EipCommonBandwidthPackage'),
  eipISP?: string(name='EipISP'),
  eipInstanceId?: string(name='EipInstanceId'),
  ephemeralStorage?: int32(name='EphemeralStorage'),
  hostAliase?: [ 
    {
      hostname?: [ string ](name='Hostname'),
      ip?: string(name='Ip'),
    }
  ](name='HostAliase'),
  hostName?: string(name='HostName'),
  imageAccelerateMode?: string(name='ImageAccelerateMode'),
  imageRegistryCredential?: [ 
    {
      password?: string(name='Password'),
      server?: string(name='Server'),
      userName?: string(name='UserName'),
    }
  ](name='ImageRegistryCredential'),
  imageSnapshotId?: string(name='ImageSnapshotId'),
  ingressBandwidth?: long(name='IngressBandwidth'),
  initContainer?: [ 
    {
      securityContext: {
        capability: {
            add?: [ string ](name='Add'),
        }(name='Capability'),
        readOnlyRootFilesystem?: boolean(name='ReadOnlyRootFilesystem'),
        runAsUser?: long(name='RunAsUser'),
      }(name='SecurityContext'),
      arg?: [ string ](name='Arg'),
      command?: [ string ](name='Command'),
      cpu?: float(name='Cpu'),
      environmentVar?: [ 
        {
          fieldRef: {
            fieldPath?: string(name='FieldPath'),
          }(name='FieldRef'),
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='EnvironmentVar'),
      gpu?: int32(name='Gpu'),
      image?: string(name='Image'),
      imagePullPolicy?: string(name='ImagePullPolicy'),
      memory?: float(name='Memory'),
      name?: string(name='Name'),
      port?: [ 
        {
          port?: int32(name='Port'),
          protocol?: string(name='Protocol'),
        }
      ](name='Port'),
      terminationMessagePath?: string(name='TerminationMessagePath'),
      terminationMessagePolicy?: string(name='TerminationMessagePolicy'),
      volumeMount?: [ 
        {
          mountPath?: string(name='MountPath'),
          mountPropagation?: string(name='MountPropagation'),
          name?: string(name='Name'),
          readOnly?: boolean(name='ReadOnly'),
          subPath?: string(name='SubPath'),
        }
      ](name='VolumeMount'),
      workingDir?: string(name='WorkingDir'),
    }
  ](name='InitContainer'),
  insecureRegistry?: string(name='InsecureRegistry'),
  instanceType?: string(name='InstanceType'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  ipv6GatewayBandwidth?: string(name='Ipv6GatewayBandwidth'),
  ipv6GatewayBandwidthEnable?: boolean(name='Ipv6GatewayBandwidthEnable'),
  memory?: float(name='Memory'),
  ntpServer?: [ string ](name='NtpServer'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  plainHttpRegistry?: string(name='PlainHttpRegistry'),
  productOnEciMode?: string(name='ProductOnEciMode'),
  ramRoleName?: string(name='RamRoleName'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  restartPolicy?: string(name='RestartPolicy'),
  scheduleStrategy?: string(name='ScheduleStrategy'),
  secondaryENIPolicy?: string(name='SecondaryENIPolicy'),
  securityGroupId?: string(name='SecurityGroupId'),
  shareProcessNamespace?: boolean(name='ShareProcessNamespace'),
  spotDuration?: long(name='SpotDuration'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotStrategy?: string(name='SpotStrategy'),
  strictSpot?: boolean(name='StrictSpot'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tenantSecurityGroupId?: string(name='TenantSecurityGroupId'),
  tenantVSwitchId?: string(name='TenantVSwitchId'),
  terminationGracePeriodSeconds?: long(name='TerminationGracePeriodSeconds'),
  vSwitchId?: string(name='VSwitchId'),
  volume?: [ 
    {
      configFileVolume: {
        configFileToPath?: [ 
          {
            content?: string(name='Content'),
            mode?: int32(name='Mode'),
            path?: string(name='Path'),
          }
        ](name='ConfigFileToPath'),
        defaultMode?: int32(name='DefaultMode'),
      }(name='ConfigFileVolume'),
      diskVolume: {
        diskId?: string(name='DiskId'),
        diskSize?: int32(name='DiskSize'),
        fsType?: string(name='FsType'),
      }(name='DiskVolume'),
      emptyDirVolume: {
        medium?: string(name='Medium'),
        sizeLimit?: string(name='SizeLimit'),
      }(name='EmptyDirVolume'),
      flexVolume: {
        driver?: string(name='Driver'),
        fsType?: string(name='FsType'),
        options?: string(name='Options'),
      }(name='FlexVolume'),
      hostPathVolume: {
        path?: string(name='Path'),
        type?: string(name='Type'),
      }(name='HostPathVolume'),
      NFSVolume: {
        path?: string(name='Path'),
        readOnly?: boolean(name='ReadOnly'),
        server?: string(name='Server'),
      }(name='NFSVolume'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Volume'),
  zoneId?: string(name='ZoneId'),
}

model CreateContainerGroupResponseBody = {
  containerGroupId?: string(name='ContainerGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateContainerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContainerGroupResponseBody(name='body'),
}

async function createContainerGroupWithOptions(request: CreateContainerGroupRequest, runtime: Util.RuntimeOptions): CreateContainerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acrRegistryInfo)) {
    query['AcrRegistryInfo'] = request.acrRegistryInfo;
  }
  if (!Util.isUnset(request.activeDeadlineSeconds)) {
    query['ActiveDeadlineSeconds'] = request.activeDeadlineSeconds;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.autoCreateEip)) {
    query['AutoCreateEip'] = request.autoCreateEip;
  }
  if (!Util.isUnset(request.autoMatchImageCache)) {
    query['AutoMatchImageCache'] = request.autoMatchImageCache;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.container)) {
    query['Container'] = request.container;
  }
  if (!Util.isUnset(request.containerGroupName)) {
    query['ContainerGroupName'] = request.containerGroupName;
  }
  if (!Util.isUnset(request.containerResourceView)) {
    query['ContainerResourceView'] = request.containerResourceView;
  }
  if (!Util.isUnset(request.corePattern)) {
    query['CorePattern'] = request.corePattern;
  }
  if (!Util.isUnset(request.cpu)) {
    query['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.cpuOptionsCore)) {
    query['CpuOptionsCore'] = request.cpuOptionsCore;
  }
  if (!Util.isUnset(request.cpuOptionsNuma)) {
    query['CpuOptionsNuma'] = request.cpuOptionsNuma;
  }
  if (!Util.isUnset(request.cpuOptionsThreadsPerCore)) {
    query['CpuOptionsThreadsPerCore'] = request.cpuOptionsThreadsPerCore;
  }
  if (!Util.isUnset(request.dnsPolicy)) {
    query['DnsPolicy'] = request.dnsPolicy;
  }
  if (!Util.isUnset(request.egressBandwidth)) {
    query['EgressBandwidth'] = request.egressBandwidth;
  }
  if (!Util.isUnset(request.eipBandwidth)) {
    query['EipBandwidth'] = request.eipBandwidth;
  }
  if (!Util.isUnset(request.eipCommonBandwidthPackage)) {
    query['EipCommonBandwidthPackage'] = request.eipCommonBandwidthPackage;
  }
  if (!Util.isUnset(request.eipISP)) {
    query['EipISP'] = request.eipISP;
  }
  if (!Util.isUnset(request.eipInstanceId)) {
    query['EipInstanceId'] = request.eipInstanceId;
  }
  if (!Util.isUnset(request.ephemeralStorage)) {
    query['EphemeralStorage'] = request.ephemeralStorage;
  }
  if (!Util.isUnset(request.hostAliase)) {
    query['HostAliase'] = request.hostAliase;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.imageAccelerateMode)) {
    query['ImageAccelerateMode'] = request.imageAccelerateMode;
  }
  if (!Util.isUnset(request.imageRegistryCredential)) {
    query['ImageRegistryCredential'] = request.imageRegistryCredential;
  }
  if (!Util.isUnset(request.imageSnapshotId)) {
    query['ImageSnapshotId'] = request.imageSnapshotId;
  }
  if (!Util.isUnset(request.ingressBandwidth)) {
    query['IngressBandwidth'] = request.ingressBandwidth;
  }
  if (!Util.isUnset(request.initContainer)) {
    query['InitContainer'] = request.initContainer;
  }
  if (!Util.isUnset(request.insecureRegistry)) {
    query['InsecureRegistry'] = request.insecureRegistry;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.ipv6GatewayBandwidth)) {
    query['Ipv6GatewayBandwidth'] = request.ipv6GatewayBandwidth;
  }
  if (!Util.isUnset(request.ipv6GatewayBandwidthEnable)) {
    query['Ipv6GatewayBandwidthEnable'] = request.ipv6GatewayBandwidthEnable;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.ntpServer)) {
    query['NtpServer'] = request.ntpServer;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.plainHttpRegistry)) {
    query['PlainHttpRegistry'] = request.plainHttpRegistry;
  }
  if (!Util.isUnset(request.productOnEciMode)) {
    query['ProductOnEciMode'] = request.productOnEciMode;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.restartPolicy)) {
    query['RestartPolicy'] = request.restartPolicy;
  }
  if (!Util.isUnset(request.scheduleStrategy)) {
    query['ScheduleStrategy'] = request.scheduleStrategy;
  }
  if (!Util.isUnset(request.secondaryENIPolicy)) {
    query['SecondaryENIPolicy'] = request.secondaryENIPolicy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.shareProcessNamespace)) {
    query['ShareProcessNamespace'] = request.shareProcessNamespace;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.strictSpot)) {
    query['StrictSpot'] = request.strictSpot;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tenantSecurityGroupId)) {
    query['TenantSecurityGroupId'] = request.tenantSecurityGroupId;
  }
  if (!Util.isUnset(request.tenantVSwitchId)) {
    query['TenantVSwitchId'] = request.tenantVSwitchId;
  }
  if (!Util.isUnset(request.terminationGracePeriodSeconds)) {
    query['TerminationGracePeriodSeconds'] = request.terminationGracePeriodSeconds;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.dnsConfig)) {
    query['DnsConfig'] = request.dnsConfig;
  }
  if (!Util.isUnset(request.hostSecurityContext)) {
    query['HostSecurityContext'] = request.hostSecurityContext;
  }
  if (!Util.isUnset(request.securityContext)) {
    query['SecurityContext'] = request.securityContext;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateContainerGroup',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createContainerGroup(request: CreateContainerGroupRequest): CreateContainerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createContainerGroupWithOptions(request, runtime);
}

model CreateImageCacheRequest {
  acrRegistryInfo?: [ 
    {
      domain?: [ string ](name='Domain', example='test****-registry.cn-beijing.cr.aliyuncs.com'),
      instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f3****'),
      instanceName?: string(name='InstanceName', example='test****'),
      regionId?: string(name='RegionId', example='cn-beijing'),
    }
  ](name='AcrRegistryInfo'),
  annotations?: string(name='Annotations', example='hide'),
  autoMatchImageCache?: boolean(name='AutoMatchImageCache', example='true'),
  clientToken?: string(name='ClientToken', example='123e4567-xxx-xxx-xxxx-42665544xxxx'),
  eipInstanceId?: string(name='EipInstanceId', example='eip-2zedsm5mfl3uhdj2d****'),
  eliminationStrategy?: string(name='EliminationStrategy', example='LRU'),
  flash?: boolean(name='Flash', example='true'),
  flashCopyCount?: int32(name='FlashCopyCount', example='7'),
  image?: [ string ](name='Image', example='registry-vpc.cn-hangzhou.aliyuncs.com/eci_open/nginx:1.15.10-perl'),
  imageCacheName?: string(name='ImageCacheName', example='testcache'),
  imageCacheSize?: int32(name='ImageCacheSize', example='20'),
  imageRegistryCredential?: [ 
    {
      password?: string(name='Password', example='password'),
      server?: string(name='Server', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
      userName?: string(name='UserName', example='username'),
    }
  ](name='ImageRegistryCredential'),
  insecureRegistry?: string(name='InsecureRegistry', example='"harbor***.pre.com,192.168.XX.XX:5000,reg***.test.com:80"'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  plainHttpRegistry?: string(name='PlainHttpRegistry', example='"harbor***.pre.com,192.168.XX.XX:5000,reg***.test.com:80"'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retentionDays?: int32(name='RetentionDays', example='7'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  standardCopyCount?: int32(name='StandardCopyCount', example='7'),
  tag?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
}

model CreateImageCacheResponseBody = {
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zebxkiifuyzzlhl****'),
  imageCacheId?: string(name='ImageCacheId', example='imc-2zebxkiifuyzzlhl****'),
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC391DD'),
}

model CreateImageCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageCacheResponseBody(name='body'),
}

async function createImageCacheWithOptions(request: CreateImageCacheRequest, runtime: Util.RuntimeOptions): CreateImageCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acrRegistryInfo)) {
    query['AcrRegistryInfo'] = request.acrRegistryInfo;
  }
  if (!Util.isUnset(request.annotations)) {
    query['Annotations'] = request.annotations;
  }
  if (!Util.isUnset(request.autoMatchImageCache)) {
    query['AutoMatchImageCache'] = request.autoMatchImageCache;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eipInstanceId)) {
    query['EipInstanceId'] = request.eipInstanceId;
  }
  if (!Util.isUnset(request.eliminationStrategy)) {
    query['EliminationStrategy'] = request.eliminationStrategy;
  }
  if (!Util.isUnset(request.flash)) {
    query['Flash'] = request.flash;
  }
  if (!Util.isUnset(request.flashCopyCount)) {
    query['FlashCopyCount'] = request.flashCopyCount;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageCacheName)) {
    query['ImageCacheName'] = request.imageCacheName;
  }
  if (!Util.isUnset(request.imageCacheSize)) {
    query['ImageCacheSize'] = request.imageCacheSize;
  }
  if (!Util.isUnset(request.imageRegistryCredential)) {
    query['ImageRegistryCredential'] = request.imageRegistryCredential;
  }
  if (!Util.isUnset(request.insecureRegistry)) {
    query['InsecureRegistry'] = request.insecureRegistry;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.plainHttpRegistry)) {
    query['PlainHttpRegistry'] = request.plainHttpRegistry;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.standardCopyCount)) {
    query['StandardCopyCount'] = request.standardCopyCount;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageCache',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageCache(request: CreateImageCacheRequest): CreateImageCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageCacheWithOptions(request, runtime);
}

model CreateInstanceOpsTaskRequest {
  containerGroupId?: string(name='ContainerGroupId', example='eci-bp1dvysdafbh00t7****'),
  opsType?: string(name='OpsType', example='coredump'),
  opsValue?: string(name='OpsValue', example='enable'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateInstanceOpsTaskResponseBody = {
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B'),
  result?: string(name='Result', example='Coredump settings has been configured successfully.'),
}

model CreateInstanceOpsTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceOpsTaskResponseBody(name='body'),
}

async function createInstanceOpsTaskWithOptions(request: CreateInstanceOpsTaskRequest, runtime: Util.RuntimeOptions): CreateInstanceOpsTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.opsType)) {
    query['OpsType'] = request.opsType;
  }
  if (!Util.isUnset(request.opsValue)) {
    query['OpsValue'] = request.opsValue;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceOpsTask',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstanceOpsTask(request: CreateInstanceOpsTaskRequest): CreateInstanceOpsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceOpsTaskWithOptions(request, runtime);
}

model CreateVirtualNodeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eipInstanceId?: string(name='EipInstanceId', example='eip-uf66jeqopgqa9hdn****'),
  enablePublicNetwork?: boolean(name='EnablePublicNetwork', example='false'),
  kubeConfig?: string(name='KubeConfig', example='JTVDbmFwaVZlcnNpb24lM0ElMjB2MSU1Q25jbHVzdGVycyUzQSU1Q24tJTIwY2x1c3RlciUzQSU1Q24uLi******'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-uf66jeqopgqa9hdn****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rotateCertificateEnabled?: boolean(name='RotateCertificateEnabled', example='false'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-2ze81zoc3yl7a3we****'),
  tag?: [ 
    {
      key?: string(name='Key', example='name'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
  taint?: [ 
    {
      effect?: string(name='Effect', example='NoSchedule'),
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Taint'),
  tlsBootstrapEnabled?: boolean(name='TlsBootstrapEnabled', example='false'),
  vSwitchId?: string(name='VSwitchId', example='vsw-2ze23nqzig8inprou****'),
  virtualNodeName?: string(name='VirtualNodeName', example='testNode'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model CreateVirtualNodeResponseBody = {
  requestId?: string(name='RequestId', example='89164E78-FC82-4684-BE97-DCDD85D26546'),
  virtualNodeId?: string(name='VirtualNodeId', example='vnd-2ze960zkdqrldeaw****'),
}

model CreateVirtualNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirtualNodeResponseBody(name='body'),
}

async function createVirtualNodeWithOptions(request: CreateVirtualNodeRequest, runtime: Util.RuntimeOptions): CreateVirtualNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eipInstanceId)) {
    query['EipInstanceId'] = request.eipInstanceId;
  }
  if (!Util.isUnset(request.enablePublicNetwork)) {
    query['EnablePublicNetwork'] = request.enablePublicNetwork;
  }
  if (!Util.isUnset(request.kubeConfig)) {
    query['KubeConfig'] = request.kubeConfig;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.rotateCertificateEnabled)) {
    query['RotateCertificateEnabled'] = request.rotateCertificateEnabled;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.taint)) {
    query['Taint'] = request.taint;
  }
  if (!Util.isUnset(request.tlsBootstrapEnabled)) {
    query['TlsBootstrapEnabled'] = request.tlsBootstrapEnabled;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.virtualNodeName)) {
    query['VirtualNodeName'] = request.virtualNodeName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualNode',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVirtualNode(request: CreateVirtualNodeRequest): CreateVirtualNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualNodeWithOptions(request, runtime);
}

model DeleteContainerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zelg8vwnlzdhf8hv****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteContainerGroupResponseBody = {
  requestId?: string(name='RequestId', example='45D5B0AD-3B00-4A9B-9911-6D5303B06712'),
}

model DeleteContainerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContainerGroupResponseBody(name='body'),
}

async function deleteContainerGroupWithOptions(request: DeleteContainerGroupRequest, runtime: Util.RuntimeOptions): DeleteContainerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteContainerGroup',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteContainerGroup(request: DeleteContainerGroupRequest): DeleteContainerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteContainerGroupWithOptions(request, runtime);
}

model DeleteImageCacheRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  imageCacheId?: string(name='ImageCacheId', example='imc-2zebxkiifuyzzlhl****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteImageCacheResponseBody = {
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A218-354284CFC7A2'),
}

model DeleteImageCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImageCacheResponseBody(name='body'),
}

async function deleteImageCacheWithOptions(request: DeleteImageCacheRequest, runtime: Util.RuntimeOptions): DeleteImageCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageCacheId)) {
    query['ImageCacheId'] = request.imageCacheId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImageCache',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteImageCache(request: DeleteImageCacheRequest): DeleteImageCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageCacheWithOptions(request, runtime);
}

model DeleteVirtualNodeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  virtualNodeId?: string(name='VirtualNodeId', example='vnd-2ze960zkdqrldeaw****'),
}

model DeleteVirtualNodeResponseBody = {
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B3'),
}

model DeleteVirtualNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualNodeResponseBody(name='body'),
}

async function deleteVirtualNodeWithOptions(request: DeleteVirtualNodeRequest, runtime: Util.RuntimeOptions): DeleteVirtualNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.virtualNodeId)) {
    query['VirtualNodeId'] = request.virtualNodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualNode',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVirtualNode(request: DeleteVirtualNodeRequest): DeleteVirtualNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualNodeWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  destinationResource?: {
    category?: string(name='Category', example='InstanceTypeFamily'),
    cores?: float(name='Cores', example='2'),
    memory?: float(name='Memory', example='4'),
    value?: string(name='Value', example='ecs.c6'),
  }(name='DestinationResource'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotResource?: {
    spotDuration?: int32(name='SpotDuration', example='1'),
    spotPriceLimit?: double(name='SpotPriceLimit', example='0.2'),
    spotStrategy?: string(name='SpotStrategy', example='SpotAsPriceGo'),
  }(name='SpotResource'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-e'),
}

model DescribeAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      availableResources?: {
        availableResource?: [ 
        {
          supportedResources?: {
            supportedResource?: [ 
            {
              statusCategory?: string(name='StatusCategory', example='WithStock'),
              value?: string(name='Value', example='ecs.c6'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources'),
          type?: string(name='Type', example='InstanceTypeFamily'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-e'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
  requestId?: string(name='RequestId', example='6829735A-FF76-58C6-AECB-27CBF135A7AA'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationResource)) {
    query['DestinationResource'] = request.destinationResource;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotResource)) {
    query['SpotResource'] = request.spotResource;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResource',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeCommitContainerTaskRequest {
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zelg8vwnlzdhf8hv****'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: [ string ](name='TaskId'),
  taskStatus?: string(name='TaskStatus', example='Running'),
}

model DescribeCommitContainerTaskResponseBody = {
  commitTasks?: [ 
    {
      commitPhaseInfos?: [ 
        {
          message?: string(name='Message', example='test msg'),
          phase?: string(name='Phase', example='scan'),
          recordTime?: string(name='RecordTime', example='1652595636420'),
          status?: string(name='Status', example='Failed'),
        }
      ](name='CommitPhaseInfos'),
      containerName?: string(name='ContainerName', example='worker0'),
      creationTime?: string(name='CreationTime', example='2022-12-24T12:50Z'),
      finishedTime?: string(name='FinishedTime', example='2022-12-24T12:52Z'),
      statusMessage?: string(name='StatusMessage'),
      taskId?: string(name='TaskId', example='task-xxx'),
      taskProgress?: string(name='TaskProgress', example='50%'),
      taskStatus?: string(name='TaskStatus', example='Running'),
    }
  ](name='CommitTasks'),
  maxResults?: string(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', example='45D5B0AD-3B00-4A9B-9911-6D5303B06712'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeCommitContainerTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommitContainerTaskResponseBody(name='body'),
}

async function describeCommitContainerTaskWithOptions(request: DescribeCommitContainerTaskRequest, runtime: Util.RuntimeOptions): DescribeCommitContainerTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommitContainerTask',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommitContainerTask(request: DescribeCommitContainerTaskRequest): DescribeCommitContainerTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommitContainerTaskWithOptions(request, runtime);
}

model DescribeContainerGroupEventsRequest {
  containerGroupIds?: string(name='ContainerGroupIds', example='["eci-bp17gw49eu09yiwm****", "eci-bp19aq49du01abcm****", "eci-2zegym1qhbmdfr1s****"]'),
  eventSource?: string(name='EventSource', example='K8sAgent'),
  limit?: int32(name='Limit', example='200'),
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-xaee-b16db43be5bc'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-uf66jeqopgqa9hdn****'),
  sinceSecond?: int32(name='SinceSecond', example='60'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='name'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
}

model DescribeContainerGroupEventsResponseBody = {
  data?: [ 
    {
      containerGroupId?: string(name='ContainerGroupId', example='eci-uf6fonnghi50v6nq****'),
      events?: [ 
        {
          count?: int32(name='Count', example='10'),
          firstTimestamp?: string(name='FirstTimestamp', example='2021-10-04T09:08:04Z'),
          lastTimestamp?: string(name='LastTimestamp', example='2021-10-04T09:08:04Z'),
          message?: string(name='Message', example='Started container'),
          metadata?: {
            name?: string(name='Name', example='eci-uto-created-eci-for-ubuntu.167e3fb73cc7f9cb'),
            namespace?: string(name='Namespace', example='default'),
          }(name='Metadata'),
          reason?: string(name='Reason', example='Started'),
          reportingComponent?: string(name='ReportingComponent', example='test'),
          reportingInstance?: string(name='ReportingInstance', example='test'),
          source?: {
            component?: string(name='Component', example='kubelet'),
            host?: string(name='Host', example='eci'),
          }(name='Source'),
          type?: string(name='Type', example='Normal'),
          involvedObject?: {
            apiVersion?: string(name='ApiVersion', example='v1'),
            kind?: string(name='Kind', example='Pod'),
            name?: string(name='Name', example='test'),
            namespace?: string(name='Namespace', example='default'),
            uid?: string(name='Uid', example='eci-8vb5nkcq3a5cu0p3****'),
          }(name='involvedObject'),
        }
      ](name='Events'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='1340C38D-6189-54D1-86F6-7D5ECF3E0088'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeContainerGroupEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerGroupEventsResponseBody(name='body'),
}

async function describeContainerGroupEventsWithOptions(request: DescribeContainerGroupEventsRequest, runtime: Util.RuntimeOptions): DescribeContainerGroupEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupIds)) {
    query['ContainerGroupIds'] = request.containerGroupIds;
  }
  if (!Util.isUnset(request.eventSource)) {
    query['EventSource'] = request.eventSource;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sinceSecond)) {
    query['SinceSecond'] = request.sinceSecond;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerGroupEvents',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerGroupEvents(request: DescribeContainerGroupEventsRequest): DescribeContainerGroupEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerGroupEventsWithOptions(request, runtime);
}

model DescribeContainerGroupMetricRequest {
  containerGroupId?: string(name='ContainerGroupId', example='eci-bp17da5olmkuagfr****'),
  endTime?: string(name='EndTime', example='2019-09-12T01:05:00.000Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: string(name='Period', example='15'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', example='2019-03-12T01:00:00.000Z'),
}

model DescribeContainerGroupMetricResponseBody = {
  containerGroupId?: string(name='ContainerGroupId', example='eci-bp1dqpye03ke5s6p****'),
  records?: [ 
    {
      CPU?: {
        limit?: long(name='Limit', example='2000'),
        load?: long(name='Load', example='0'),
        usageCoreNanoSeconds?: long(name='UsageCoreNanoSeconds', example='70769883'),
        usageNanoCores?: long(name='UsageNanoCores', example='0'),
      }(name='CPU'),
      containers?: [ 
        {
          CPU?: {
            limit?: long(name='Limit', example='1024'),
            load?: long(name='Load', example='0'),
            usageCoreNanoSeconds?: long(name='UsageCoreNanoSeconds', example='40876694'),
            usageNanoCores?: long(name='UsageNanoCores', example='0'),
          }(name='CPU'),
          memory?: {
            availableBytes?: long(name='AvailableBytes', example='4285091840'),
            cache?: long(name='Cache', example='9289728'),
            rss?: long(name='Rss', example='9289728'),
            usageBytes?: long(name='UsageBytes', example='9289728'),
            workingSet?: long(name='WorkingSet', example='9289728'),
          }(name='Memory'),
          name?: string(name='Name', example='u1'),
        }
      ](name='Containers'),
      disk?: [ 
        {
          device?: string(name='Device', example='/dev/vda'),
          readBytes?: long(name='ReadBytes', example='210714112'),
          readIO?: long(name='ReadIO', example='123'),
          writeBytes?: long(name='WriteBytes', example='1375109120'),
          writeIO?: long(name='WriteIO', example='123'),
        }
      ](name='Disk'),
      filesystem?: [ 
        {
          available?: long(name='Available', example='35319836672'),
          capacity?: long(name='Capacity', example='41610981376'),
          category?: string(name='Category', example='System'),
          fsName?: string(name='FsName', example='/dev/root'),
          usage?: long(name='Usage', example='4368744448'),
        }
      ](name='Filesystem'),
      memory?: {
        availableBytes?: long(name='AvailableBytes', example='4285091840'),
        cache?: long(name='Cache', example='9289728'),
        rss?: long(name='Rss', example='9289728'),
        usageBytes?: long(name='UsageBytes', example='9289728'),
        workingSet?: long(name='WorkingSet', example='9289728'),
      }(name='Memory'),
      network?: {
        interfaces?: [ 
          {
            name?: string(name='Name', example='eth0'),
            rxBytes?: long(name='RxBytes', example='505001954'),
            rxDrops?: long(name='RxDrops', example='0'),
            rxErrors?: long(name='RxErrors', example='0'),
            rxPackets?: long(name='RxPackets', example='4800583'),
            txBytes?: long(name='TxBytes', example='1381805699'),
            txDrops?: long(name='TxDrops', example='0'),
            txErrors?: long(name='TxErrors', example='0'),
            txPackets?: long(name='TxPackets', example='5158427'),
          }
        ](name='Interfaces'),
      }(name='Network'),
      timestamp?: string(name='Timestamp', example='2021-08-25T16:22:00.000+08:00'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='D81A4A13-6DCC-4579-AC62-90A6C3EC7BBC'),
}

model DescribeContainerGroupMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerGroupMetricResponseBody(name='body'),
}

async function describeContainerGroupMetricWithOptions(request: DescribeContainerGroupMetricRequest, runtime: Util.RuntimeOptions): DescribeContainerGroupMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerGroupMetric',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerGroupMetric(request: DescribeContainerGroupMetricRequest): DescribeContainerGroupMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerGroupMetricWithOptions(request, runtime);
}

model DescribeContainerGroupPriceRequest {
  cpu?: float(name='Cpu', example='2.0'),
  ephemeralStorage?: int32(name='EphemeralStorage', example='20'),
  instanceType?: string(name='InstanceType', example='ecs.c5.large'),
  memory?: float(name='Memory', example='4.0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotPriceLimit?: float(name='SpotPriceLimit', example='0.2'),
  spotStrategy?: string(name='SpotStrategy', example='SpotWithPriceLimit'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
}

model DescribeContainerGroupPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      detailInfos?: {
        detailInfo?: [ 
        {
          discountPrice?: float(name='DiscountPrice', example='0'),
          originalPrice?: float(name='OriginalPrice', example='0.000098'),
          resource?: string(name='Resource', example='cpu'),
          rules?: {
            rule?: [ 
            {
              description?: string(name='Description'),
              ruleId?: long(name='RuleId', example='123456'),
            }
          ](name='Rule')
          }(name='Rules'),
          tradePrice?: float(name='TradePrice', example='0.000098'),
        }
      ](name='DetailInfo')
      }(name='DetailInfos'),
      discountPrice?: float(name='DiscountPrice', example='0'),
      originalPrice?: float(name='OriginalPrice', example='0.00012252'),
      tradePrice?: float(name='TradePrice', example='0.00012252'),
    }(name='Price'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='123456'),
      }
    ](name='Rule')
    }(name='Rules'),
    spotPrices?: {
      spotPrice?: [ 
      {
        instanceType?: string(name='InstanceType', example='ecs.c5.large'),
        originPrice?: float(name='OriginPrice', example='0.622'),
        spotPrice?: float(name='SpotPrice', example='0.056'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      }
    ](name='SpotPrice')
    }(name='SpotPrices'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='7A872585-33C7-4D69-AB8E-412E81EBA387'),
}

model DescribeContainerGroupPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerGroupPriceResponseBody(name='body'),
}

async function describeContainerGroupPriceWithOptions(request: DescribeContainerGroupPriceRequest, runtime: Util.RuntimeOptions): DescribeContainerGroupPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cpu)) {
    query['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.ephemeralStorage)) {
    query['EphemeralStorage'] = request.ephemeralStorage;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerGroupPrice',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerGroupPrice(request: DescribeContainerGroupPriceRequest): DescribeContainerGroupPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerGroupPriceWithOptions(request, runtime);
}

model DescribeContainerGroupStatusRequest {
  containerGroupIds?: string(name='ContainerGroupIds', example='["eci-bp17gw49eu09yiwm****", "eci-bp19aq49du01abcm****", "eci-2zegym1qhbmdfr1s****"]'),
  limit?: int32(name='Limit', example='200'),
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-xaee-b16db43be5bc'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-uf66jeqopgqa9hdn****'),
  sinceSecond?: int32(name='SinceSecond', example='60'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
}

model DescribeContainerGroupStatusResponseBody = {
  data?: [ 
    {
      containerGroupId?: string(name='ContainerGroupId', example='eci-bp1jrgfqqy54kg5hc****'),
      name?: string(name='Name', example='nginx'),
      namespace?: string(name='Namespace', example='default'),
      podStatus?: {
        conditions?: [ 
          {
            message?: string(name='Message', example='Completed'),
            reason?: string(name='Reason', example='Completed'),
            lastTransitionTime?: string(name='lastTransitionTime', example='2021-05-12T07:02:47Z'),
            status?: string(name='status', example='True'),
            type?: string(name='type', example='Ready'),
          }
        ](name='Conditions'),
        containerStatuses?: [ 
          {
            image?: string(name='Image', example='registry-vpc.cn-zhangjiakou.aliyuncs.com/eci_open/ubuntu:18.04'),
            imageID?: string(name='ImageID', example='registry-vpc.cn-zhangjiakou.aliyuncs.com/eci_open/ubuntu@sha256:134c7fe821b9d359490cd009ce7ca322453f4f2d018623f849e580a89a685e5d'),
            lastState?: {
              running?: {
                startedAtstartedAt?: string(name='StartedAtstartedAt', example='2021-05-23T20:49:31Z'),
              }(name='Running'),
              terminated?: {
                containerID?: string(name='ContainerID', example='containerd://3ff993933bea366c4719e43a1b067d89bc7f01f1f573981659a44ff17a******'),
                exitCode?: int32(name='ExitCode', example='0'),
                finishedAt?: string(name='FinishedAt', example='2021-05-23T20:49:31Z'),
                message?: string(name='Message', example='Completed'),
                reason?: string(name='Reason', example='Completed'),
                signal?: int32(name='Signal', example='1'),
                startedAt?: string(name='StartedAt', example='021-05-12T07:02:52Z'),
              }(name='Terminated'),
              waiting?: {
                message?: string(name='Message', example='Back-off'),
                reason?: string(name='Reason', example='Started'),
              }(name='Waiting'),
            }(name='LastState'),
            name?: string(name='Name', example='ubuntu'),
            ready?: boolean(name='Ready', example='true'),
            restartCount?: int32(name='RestartCount', example='1'),
            started?: boolean(name='Started', example='true'),
            state?: {
              running?: {
                startedAtstartedAt?: string(name='StartedAtstartedAt', example='2021-05-23T20:49:31Z'),
              }(name='Running'),
              terminated?: {
                containerID?: string(name='ContainerID', example='containerd://3ff993933bea366c4719e43a1b067d89bc7f01f1f573981659a44ff17a******'),
                exitCode?: int32(name='ExitCode', example='0'),
                finishedAt?: string(name='FinishedAt', example='2021-05-23T20:55:31Z'),
                message?: string(name='Message', example='Completed'),
                reason?: string(name='Reason', example='Completed'),
                signal?: int32(name='Signal', example='1'),
                startedAt?: string(name='StartedAt', example='2021-05-23T20:49:31Z'),
              }(name='Terminated'),
              waiting?: {
                message?: string(name='Message', example='Back-off'),
                reason?: string(name='Reason', example='Started'),
              }(name='Waiting'),
            }(name='State'),
          }
        ](name='ContainerStatuses'),
        hostIp?: string(name='HostIp', example='192.168.XX.XX'),
        phase?: string(name='Phase', example='Running'),
        podIp?: string(name='PodIp', example='192.168.XX.XX'),
        podIps?: [ 
          {
            ip?: string(name='Ip', example='192.168.XX.XX'),
          }
        ](name='PodIps'),
        qosClass?: string(name='QosClass', description='Pod Qos。', example='Guaranteed'),
        startTime?: string(name='StartTime', example='2021-05-12T07:02:47Z'),
      }(name='PodStatus'),
      status?: string(name='Status', example='Running'),
      uuid?: string(name='uuid', example='78ee0657-987g-b8b2-1f507dic4****'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-****-b16db43be5bc'),
  requestId?: string(name='RequestId', example='1340C38D-6189-54D1-86F6-7D5ECF3E0088'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeContainerGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerGroupStatusResponseBody(name='body'),
}

async function describeContainerGroupStatusWithOptions(request: DescribeContainerGroupStatusRequest, runtime: Util.RuntimeOptions): DescribeContainerGroupStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupIds)) {
    query['ContainerGroupIds'] = request.containerGroupIds;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sinceSecond)) {
    query['SinceSecond'] = request.sinceSecond;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerGroupStatus',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerGroupStatus(request: DescribeContainerGroupStatusRequest): DescribeContainerGroupStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerGroupStatusWithOptions(request, runtime);
}

model DescribeContainerGroupsRequest {
  containerGroupIds?: string(name='ContainerGroupIds', example='["eci-bp17gw49eu09yiwm****", "eci-bp19aq49du01abcm****", "eci-2zegym1qhbmdfr1s****"]'),
  containerGroupName?: string(name='ContainerGroupName', example='test'),
  limit?: int32(name='Limit', example='20'),
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-****-b16db43be5bc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', example='Running'),
  tag?: [ 
    {
      key?: string(name='Key', example='name'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1jrgfqqy54kg5hc****'),
  withEvent?: boolean(name='WithEvent', example='true'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model DescribeContainerGroupsResponseBody = {
  containerGroups?: [ 
    {
      containerGroupId?: string(name='ContainerGroupId', example='eci-bp1jrgfqqy54kg5hc****'),
      containerGroupName?: string(name='ContainerGroupName', example='test'),
      containers?: [ 
        {
          args?: [ string ](name='Args'),
          commands?: [ string ](name='Commands'),
          cpu?: float(name='Cpu', example='2.0'),
          currentState?: {
            detailStatus?: string(name='DetailStatus', example='working'),
            exitCode?: int32(name='ExitCode', example='0'),
            finishTime?: string(name='FinishTime', example='2018-08-02T15:00:00Z'),
            message?: string(name='Message', example='Back-off 5m0s restarting failed container=test pod=test_eci-xxx(xxx)'),
            reason?: string(name='Reason', example='Started'),
            signal?: int32(name='Signal', example='1'),
            startTime?: string(name='StartTime', example='2019-12-19T12:05:02Z'),
            state?: string(name='State', example='Terminated'),
          }(name='CurrentState'),
          environmentVars?: [ 
            {
              key?: string(name='Key', example='PATH'),
              value?: string(name='Value', example='/usr/bin/'),
              valueFrom?: {
                fieldRef?: {
                  fieldPath?: string(name='FieldPath', example='status.podIP'),
                }(name='FieldRef'),
              }(name='ValueFrom'),
            }
          ](name='EnvironmentVars'),
          gpu?: int32(name='Gpu', example='1'),
          image?: string(name='Image', example='mysql'),
          imagePullPolicy?: string(name='ImagePullPolicy', example='Always'),
          livenessProbe?: {
            execs?: [ string ](name='Execs'),
            failureThreshold?: int32(name='FailureThreshold', example='3'),
            httpGet?: {
              path?: string(name='Path', example='/usr/nginx/'),
              port?: int32(name='Port', example='80'),
              scheme?: string(name='Scheme', example='HTTP'),
            }(name='HttpGet', description='HttpGet。'),
            initialDelaySeconds?: int32(name='InitialDelaySeconds', example='10'),
            periodSeconds?: int32(name='PeriodSeconds', example='5'),
            successThreshold?: int32(name='SuccessThreshold', example='1'),
            tcpSocket?: {
              host?: string(name='Host', example='1.2.3.4'),
              port?: int32(name='Port', example='80'),
            }(name='TcpSocket', description='TcpSocket。'),
            timeoutSeconds?: int32(name='TimeoutSeconds', example='10'),
          }(name='LivenessProbe'),
          memory?: float(name='Memory', example='2.0'),
          name?: string(name='Name', example='nginx'),
          ports?: [ 
            {
              port?: int32(name='Port', example='8080'),
              protocol?: string(name='Protocol', example='TCP'),
            }
          ](name='Ports'),
          previousState?: {
            detailStatus?: string(name='DetailStatus', example='working'),
            exitCode?: int32(name='ExitCode', example='0'),
            finishTime?: string(name='FinishTime', example='2018-08-02T15:00:00Z'),
            message?: string(name='Message', example='Back-off 5m0s restarting failed container=test pod=test_eci-xxx(xxx)'),
            reason?: string(name='Reason', example='Completed'),
            signal?: int32(name='Signal', example='1'),
            startTime?: string(name='StartTime', example='2018-08-02T15:00:00Z'),
            state?: string(name='State', example='Terminated'),
          }(name='PreviousState'),
          readinessProbe?: {
            execs?: [ string ](name='Execs'),
            failureThreshold?: int32(name='FailureThreshold', example='3'),
            httpGet?: {
              path?: string(name='Path', example='/usr/local'),
              port?: int32(name='Port', example='8080'),
              scheme?: string(name='Scheme', description='HTTP／HTTPS。', example='HTTP'),
            }(name='HttpGet', description='HttpGet。'),
            initialDelaySeconds?: int32(name='InitialDelaySeconds', example='5'),
            periodSeconds?: int32(name='PeriodSeconds', example='1'),
            successThreshold?: int32(name='SuccessThreshold', example='1'),
            tcpSocket?: {
              host?: string(name='Host', description='Host。', example='1.2.3.4'),
              port?: int32(name='Port', example='8888'),
            }(name='TcpSocket', description='TcpSocket。'),
            timeoutSeconds?: int32(name='TimeoutSeconds', example='5'),
          }(name='ReadinessProbe'),
          ready?: boolean(name='Ready', example='true'),
          restartCount?: int32(name='RestartCount', example='0'),
          securityContext?: {
            capability?: {
              adds?: [ string ](name='Adds'),
            }(name='Capability'),
            readOnlyRootFilesystem?: boolean(name='ReadOnlyRootFilesystem', example='true'),
            runAsUser?: long(name='RunAsUser', example='1000'),
          }(name='SecurityContext'),
          stdin?: boolean(name='Stdin', example='true'),
          stdinOnce?: boolean(name='StdinOnce', example='true'),
          tty?: boolean(name='Tty', example='false'),
          volumeMounts?: [ 
            {
              mountPath?: string(name='MountPath', example='/usr/share/'),
              mountPropagation?: string(name='MountPropagation', example='None'),
              name?: string(name='Name', example='test-empty'),
              readOnly?: boolean(name='ReadOnly', example='false'),
            }
          ](name='VolumeMounts'),
          workingDir?: string(name='WorkingDir', example='/usr/local/nginx'),
        }
      ](name='Containers'),
      cpu?: float(name='Cpu', example='2.0'),
      creationTime?: string(name='CreationTime', example='2018-08-02T15:00:00Z'),
      discount?: int32(name='Discount', example='9'),
      dnsConfig?: {
        nameServers?: [ string ](name='NameServers'),
        options?: [ 
          {
            name?: string(name='Name', example='name'),
            value?: string(name='Value', example='value'),
          }
        ](name='Options'),
        searches?: [ string ](name='Searches'),
      }(name='DnsConfig'),
      eciSecurityContext?: {
        sysctls?: [ 
          {
            name?: string(name='Name', example='kernel.msgmax'),
            value?: string(name='Value', example='65536'),
          }
        ](name='Sysctls'),
      }(name='EciSecurityContext'),
      eniInstanceId?: string(name='EniInstanceId', example='eni-bp14rzqi6fd8satm****'),
      ephemeralStorage?: int32(name='EphemeralStorage', example='20'),
      events?: [ 
        {
          count?: int32(name='Count', example='20'),
          firstTimestamp?: string(name='FirstTimestamp', example='2018-08-02T15:00:00Z'),
          lastTimestamp?: string(name='LastTimestamp', example='2018-08-02T15:00:00Z'),
          message?: string(name='Message', example='Started container'),
          name?: string(name='Name', example='test-xxx'),
          reason?: string(name='Reason', example='Created'),
          type?: string(name='Type', example='Normal'),
        }
      ](name='Events'),
      expiredTime?: string(name='ExpiredTime', example='2018-08-02T15:00:00Z'),
      failedTime?: string(name='FailedTime', example='2018-08-02T15:00:00Z'),
      hostAliases?: [ 
        {
          hostnames?: [ string ](name='Hostnames'),
          ip?: string(name='Ip', example='192.0.XX.XX'),
        }
      ](name='HostAliases'),
      initContainers?: [ 
        {
          args?: [ string ](name='Args'),
          command?: [ string ](name='Command'),
          cpu?: float(name='Cpu', example='1.0'),
          currentState?: {
            detailStatus?: string(name='DetailStatus', example='working'),
            exitCode?: int32(name='ExitCode', example='0'),
            finishTime?: string(name='FinishTime', example='2018-08-02T15:00:00Z'),
            message?: string(name='Message', example='Created container'),
            reason?: string(name='Reason', example='Started'),
            signal?: int32(name='Signal', example='1'),
            startTime?: string(name='StartTime', example='2018-08-02T15:00:00Z'),
            state?: string(name='State', example='Running'),
          }(name='CurrentState'),
          environmentVars?: [ 
            {
              key?: string(name='Key', example='PATH'),
              value?: string(name='Value', example='/usr/local/bin'),
              valueFrom?: {
                fieldRef?: {
                  fieldPath?: string(name='FieldPath', example='status.podIP'),
                }(name='FieldRef'),
              }(name='ValueFrom'),
            }
          ](name='EnvironmentVars'),
          gpu?: int32(name='Gpu', example='1'),
          image?: string(name='Image', example='nginx'),
          imagePullPolicy?: string(name='ImagePullPolicy', example='Always'),
          memory?: float(name='Memory', example='2.0'),
          name?: string(name='Name', example='Init-xxx'),
          ports?: [ 
            {
              port?: int32(name='Port', example='8888'),
              protocol?: string(name='Protocol', example='TCP'),
            }
          ](name='Ports'),
          previousState?: {
            detailStatus?: string(name='DetailStatus', example='working'),
            exitCode?: int32(name='ExitCode', example='0'),
            finishTime?: string(name='FinishTime', example='2019-12-24T05:35:44Z'),
            message?: string(name='Message', example='Started container'),
            reason?: string(name='Reason', example='completed'),
            signal?: int32(name='Signal', example='1'),
            startTime?: string(name='StartTime', example='2019-12-24T05:35:44Z'),
            state?: string(name='State', example='Terminated'),
          }(name='PreviousState'),
          ready?: boolean(name='Ready', example='true'),
          restartCount?: int32(name='RestartCount', example='5'),
          securityContext?: {
            capability?: {
              adds?: [ string ](name='Adds'),
            }(name='Capability'),
            readOnlyRootFilesystem?: boolean(name='ReadOnlyRootFilesystem', example='true'),
            runAsUser?: long(name='RunAsUser', example='1557'),
          }(name='SecurityContext'),
          volumeMounts?: [ 
            {
              mountPath?: string(name='MountPath', example='/usr/share/'),
              mountPropagation?: string(name='MountPropagation', example='None'),
              name?: string(name='Name', example='test-empty'),
              readOnly?: boolean(name='ReadOnly', example='false'),
            }
          ](name='VolumeMounts'),
          workingDir?: string(name='WorkingDir', example='/usr/test'),
        }
      ](name='InitContainers'),
      instanceType?: string(name='InstanceType', example='ecs.g5.large'),
      internetIp?: string(name='InternetIp', example='192.0.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.16.XX.XX'),
      ipv6Address?: string(name='Ipv6Address', example='2001:XXXX:4:4:4:4:4:4'),
      memory?: float(name='Memory', example='4.0'),
      ramRoleName?: string(name='RamRoleName', example='ram:PassRole'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-8db03793gfrz****'),
      restartPolicy?: string(name='RestartPolicy', example='Never'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp12ujq5zpxuyjfo3o8r'),
      spotPriceLimit?: double(name='SpotPriceLimit', example='0.025'),
      spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
      status?: string(name='Status', example='Running'),
      succeededTime?: string(name='SucceededTime', example='2019-12-11T04:33:42Z'),
      tags?: [ 
        {
          key?: string(name='Key', example='name'),
          value?: string(name='Value', example='test-xh'),
        }
      ](name='Tags'),
      tenantEniInstanceId?: string(name='TenantEniInstanceId', example='i-xxx'),
      tenantEniIp?: string(name='TenantEniIp', example='10.10.XX.XX'),
      tenantSecurityGroupId?: string(name='TenantSecurityGroupId', example='sg-xxx'),
      tenantVSwitchId?: string(name='TenantVSwitchId', example='vsw-xxx'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1vzjjflab6wvjox****'),
      volumes?: [ 
        {
          configFileVolumeConfigFileToPaths?: [ 
            {
              content?: string(name='Content', example='hello world'),
              path?: string(name='Path', example='/usr/bin/'),
            }
          ](name='ConfigFileVolumeConfigFileToPaths'),
          diskVolumeDiskId?: string(name='DiskVolumeDiskId', example='d-xxxx'),
          diskVolumeFsType?: string(name='DiskVolumeFsType', example='xfs'),
          flexVolumeDriver?: string(name='FlexVolumeDriver', example='flexvolume'),
          flexVolumeFsType?: string(name='FlexVolumeFsType', example='ntfs'),
          flexVolumeOptions?: string(name='FlexVolumeOptions', example='[nolock,tcp,noresvport]'),
          NFSVolumePath?: string(name='NFSVolumePath', example='/eci'),
          NFSVolumeReadOnly?: boolean(name='NFSVolumeReadOnly', example='false'),
          NFSVolumeServer?: string(name='NFSVolumeServer', example='0eafxxxxx-xxxxx.cn-hangzhou.nas.aliyuncs.com'),
          name?: string(name='Name', example='test-empty'),
          type?: string(name='Type', example='EmptyDirVolume'),
        }
      ](name='Volumes'),
      vpcId?: string(name='VpcId', example='vpc-1vzjjflab6wvjox****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='ContainerGroups'),
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-****-b16db43be5bc'),
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B3'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeContainerGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerGroupsResponseBody(name='body'),
}

async function describeContainerGroupsWithOptions(request: DescribeContainerGroupsRequest, runtime: Util.RuntimeOptions): DescribeContainerGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupIds)) {
    query['ContainerGroupIds'] = request.containerGroupIds;
  }
  if (!Util.isUnset(request.containerGroupName)) {
    query['ContainerGroupName'] = request.containerGroupName;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.withEvent)) {
    query['WithEvent'] = request.withEvent;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerGroups',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerGroups(request: DescribeContainerGroupsRequest): DescribeContainerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerGroupsWithOptions(request, runtime);
}

model DescribeContainerLogRequest {
  containerGroupId?: string(name='ContainerGroupId', example='eci-uf6fonnghi50v6nq****'),
  containerName?: string(name='ContainerName', example='nginx'),
  lastTime?: boolean(name='LastTime', example='false'),
  limitBytes?: long(name='LimitBytes', example='123798'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sinceSeconds?: int32(name='SinceSeconds', example='10'),
  startTime?: string(name='StartTime', example='2018-08-02T15:00:00Z'),
  tail?: int32(name='Tail', example='500'),
  timestamps?: boolean(name='Timestamps', example='false'),
}

model DescribeContainerLogResponseBody = {
  containerName?: string(name='ContainerName', example='nginx'),
  content?: string(name='Content', example='{}'),
  requestId?: string(name='RequestId', example='CA850ADA-****-4AC8-****-5B5990EAB7D0'),
}

model DescribeContainerLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerLogResponseBody(name='body'),
}

async function describeContainerLogWithOptions(request: DescribeContainerLogRequest, runtime: Util.RuntimeOptions): DescribeContainerLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.containerName)) {
    query['ContainerName'] = request.containerName;
  }
  if (!Util.isUnset(request.lastTime)) {
    query['LastTime'] = request.lastTime;
  }
  if (!Util.isUnset(request.limitBytes)) {
    query['LimitBytes'] = request.limitBytes;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sinceSeconds)) {
    query['SinceSeconds'] = request.sinceSeconds;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tail)) {
    query['Tail'] = request.tail;
  }
  if (!Util.isUnset(request.timestamps)) {
    query['Timestamps'] = request.timestamps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerLog',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerLog(request: DescribeContainerLogRequest): DescribeContainerLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerLogWithOptions(request, runtime);
}

model DescribeImageCachesRequest {
  image?: string(name='Image', example='nginx'),
  imageCacheId?: string(name='ImageCacheId', example='imc-bp195erqe9o2pb09****'),
  imageCacheName?: string(name='ImageCacheName', example='testcache'),
  limit?: int32(name='Limit', example='20'),
  matchImage?: [ string ](name='MatchImage', example='registry-vpc.cn-hangzhou.aliyuncs.com/eci_open/nginx:1.15.10-perl'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-2df3isufhi38****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId', example='s-2zec5oj8e1yhxijt****'),
  tag?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
}

model DescribeImageCachesResponseBody = {
  imageCaches?: [ 
    {
      containerGroupId?: string(name='ContainerGroupId', example='eci-bp18oq3m15prd9jb****'),
      creationTime?: string(name='CreationTime', example='2021-02-09T02:24:07Z'),
      eliminationStrategy?: string(name='EliminationStrategy', example='LRU'),
      events?: [ 
        {
          count?: int32(name='Count', example='1'),
          firstTimestamp?: string(name='FirstTimestamp', example='2021-02-09T02:24:48Z'),
          lastTimestamp?: string(name='LastTimestamp', example='2021-02-09T02:24:48Z'),
          message?: string(name='Message', example='Successfully check image cache resource.'),
          name?: string(name='Name', example='imagetest.1661f31f851a****'),
          type?: string(name='Type', example='Normal'),
        }
      ](name='Events'),
      expireDateTime?: string(name='ExpireDateTime', example='2019-11-10T09:00:48Z'),
      flashSnapshotId?: string(name='FlashSnapshotId', example='s-bp12w3v37sit96t6****'),
      imageCacheId?: string(name='ImageCacheId', example='imc-bp195erqe9o2pb09****'),
      imageCacheName?: string(name='ImageCacheName', example='imagetest'),
      imageCacheSize?: int32(name='ImageCacheSize', example='20'),
      images?: [ string ](name='Images'),
      lastMatchedTime?: string(name='LastMatchedTime', example='2021-08-18T03:48:10Z'),
      progress?: string(name='Progress', example='100%'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-2df3isufhi38****'),
      snapshotId?: string(name='SnapshotId', example='s-2zec5oj8e1yhxijt****'),
      status?: string(name='Status', example='Ready'),
      tags?: [ 
        {
          key?: string(name='Key', example='imc'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
    }
  ](name='ImageCaches'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', example='39FC2E43-3DD7-4CEF-9EF4-E4AD6E635301'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model DescribeImageCachesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageCachesResponseBody(name='body'),
}

async function describeImageCachesWithOptions(request: DescribeImageCachesRequest, runtime: Util.RuntimeOptions): DescribeImageCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageCacheId)) {
    query['ImageCacheId'] = request.imageCacheId;
  }
  if (!Util.isUnset(request.imageCacheName)) {
    query['ImageCacheName'] = request.imageCacheName;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.matchImage)) {
    query['MatchImage'] = request.matchImage;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageCaches',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageCaches(request: DescribeImageCachesRequest): DescribeImageCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageCachesWithOptions(request, runtime);
}

model DescribeInstanceOpsRecordsRequest {
  containerGroupId?: string(name='ContainerGroupId', example='eci-bp1dvysdafbh00t7****'),
  opsType?: string(name='OpsType', example='coredump'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceOpsRecordsResponseBody = {
  records?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-12-29T15:00:00Z'),
      expireTime?: string(name='ExpireTime', example='2099-12-29T15:00:00Z'),
      opsStatus?: string(name='OpsStatus', example='Ready'),
      opsType?: string(name='OpsType', example='coredump'),
      resultContent?: string(name='ResultContent', example='https://******'),
      resultType?: string(name='ResultType', example='OSS'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B3'),
}

model DescribeInstanceOpsRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceOpsRecordsResponseBody(name='body'),
}

async function describeInstanceOpsRecordsWithOptions(request: DescribeInstanceOpsRecordsRequest, runtime: Util.RuntimeOptions): DescribeInstanceOpsRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.opsType)) {
    query['OpsType'] = request.opsType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceOpsRecords',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceOpsRecords(request: DescribeInstanceOpsRecordsRequest): DescribeInstanceOpsRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceOpsRecordsWithOptions(request, runtime);
}

model DescribeMultiContainerGroupMetricRequest {
  containerGroupIds?: string(name='ContainerGroupIds', example='["eci-2zegym1qhbmdfr1s****","eci-2ze39w5svzj5ic34****"]'),
  metricType?: string(name='MetricType', example='summary'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzw2jz2z****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeMultiContainerGroupMetricResponseBody = {
  monitorDatas?: [ 
    {
      containerGroupId?: string(name='ContainerGroupId', example='eci-bp15oolgorelvhfb****'),
      records?: [ 
        {
          CPU?: {
            limit?: long(name='Limit', example='2000'),
            load?: long(name='Load', example='0'),
            usageCoreNanoSeconds?: long(name='UsageCoreNanoSeconds', example='70769883'),
            usageNanoCores?: long(name='UsageNanoCores', example='0'),
          }(name='CPU'),
          containers?: [ 
            {
              CPU?: {
                limit?: long(name='Limit', example='321234'),
                load?: long(name='Load', example='12341'),
                usageCoreNanoSeconds?: long(name='UsageCoreNanoSeconds', example='40876694'),
                usageNanoCores?: long(name='UsageNanoCores', example='0'),
              }(name='CPU'),
              memory?: {
                availableBytes?: long(name='AvailableBytes', example='4285091840'),
                cache?: long(name='Cache', example='9289728'),
                rss?: long(name='Rss', example='9289728'),
                usageBytes?: long(name='UsageBytes', example='9289728'),
                workingSet?: long(name='WorkingSet', example='9289728'),
              }(name='Memory'),
              name?: string(name='Name', example='test1'),
            }
          ](name='Containers'),
          disk?: [ 
            {
              device?: string(name='Device', example='/dev/vda'),
              readBytes?: long(name='ReadBytes', example='210714112'),
              readIo?: long(name='ReadIo', example='123'),
              writeBytes?: long(name='WriteBytes', example='1375109120'),
              writeIo?: long(name='WriteIo', example='123'),
            }
          ](name='Disk'),
          filesystem?: [ 
            {
              available?: long(name='Available', example='35319836672'),
              capacity?: long(name='Capacity', example='41610981376'),
              fsName?: string(name='FsName', example='/dev/root'),
              usage?: long(name='Usage', example='4368744448'),
            }
          ](name='Filesystem'),
          memory?: {
            availableBytes?: long(name='AvailableBytes', example='4289445888'),
            cache?: long(name='Cache', example='7028736'),
            rss?: long(name='Rss', example='1593344'),
            usageBytes?: long(name='UsageBytes', example='11153408'),
            workingSet?: long(name='WorkingSet', example='5521408'),
          }(name='Memory'),
          network?: {
            interfaces?: [ 
              {
                name?: string(name='Name', example='eth0'),
                rxBytes?: long(name='RxBytes', example='505001954'),
                rxDrops?: long(name='RxDrops', example='0'),
                rxErrors?: long(name='RxErrors', example='0'),
                rxPackets?: long(name='RxPackets', example='4800583'),
                txBytes?: long(name='TxBytes', example='1381805699'),
                txDrops?: long(name='TxDrops', example='0'),
                txErrors?: long(name='TxErrors', example='0'),
                txPackets?: long(name='TxPackets', example='5158427'),
              }
            ](name='Interfaces'),
          }(name='Network'),
          timestamp?: string(name='Timestamp', example='2019-12-19T02:31:54Z'),
        }
      ](name='Records'),
    }
  ](name='MonitorDatas'),
  requestId?: string(name='RequestId', example='B8756BA0-6452-419C-9727-37A6209C85E0'),
}

model DescribeMultiContainerGroupMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMultiContainerGroupMetricResponseBody(name='body'),
}

async function describeMultiContainerGroupMetricWithOptions(request: DescribeMultiContainerGroupMetricRequest, runtime: Util.RuntimeOptions): DescribeMultiContainerGroupMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerGroupIds)) {
    query['ContainerGroupIds'] = request.containerGroupIds;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMultiContainerGroupMetric',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMultiContainerGroupMetric(request: DescribeMultiContainerGroupMetricRequest): DescribeMultiContainerGroupMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMultiContainerGroupMetricWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      recommendZones?: [ string ](name='RecommendZones'),
      regionEndpoint?: string(name='RegionEndpoint', example='eci.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: [ string ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B3'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeVirtualNodesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  limit?: long(name='Limit', example='20'),
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-****-b16db43be5bc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-uf66jeqopgqa9hdn****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-2ze81zoc3yl7a3we****'),
  status?: string(name='Status', example='Ready'),
  tag?: [ 
    {
      key?: string(name='Key', example='name'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-2ze23nqzig8inprou****'),
  virtualNodeIds?: string(name='VirtualNodeIds', example='["vnd-2ze960zkdqrldeaw****","vnd-3ebzcviqbwt25dsz****"]'),
  virtualNodeName?: string(name='VirtualNodeName', example='testNode'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model DescribeVirtualNodesResponseBody = {
  nextToken?: string(name='NextToken', example='d78f2dd8-5979-42fe-****-b16db43be5bc'),
  requestId?: string(name='RequestId', example='9C9B9917-ED22-50D5-ADE6-9FA9D58AD05F'),
  totalCount?: int32(name='TotalCount', example='1'),
  virtualNodes?: [ 
    {
      clusterId?: string(name='ClusterId', example='c9af4f6c1563c4cd4bda887bfeb72****'),
      cpu?: float(name='Cpu', example='2.0'),
      creationTime?: string(name='CreationTime', example='2021-09-08T15:00:00Z'),
      eniInstanceId?: string(name='EniInstanceId', example='eni-bp14rzqi6fd8satm****'),
      events?: [ 
        {
          count?: int32(name='Count', example='1'),
          firstTimestamp?: string(name='FirstTimestamp', example='2021-09-08T02:24:48Z'),
          lastTimestamp?: string(name='LastTimestamp', example='2021-09-08T02:24:52Z'),
          message?: string(name='Message', example='Successfully'),
          name?: string(name='Name', example='test'),
          reason?: string(name='Reason', example='Created'),
          type?: string(name='Type', example='Normal'),
        }
      ](name='Events'),
      internetIp?: string(name='InternetIp', example='192.0.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='10.19.XX.XX'),
      memory?: float(name='Memory', example='4.0'),
      ramRoleName?: string(name='RamRoleName', example='testECI'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-uf66jeqopgqa9hdn****'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-2ze81zoc3yl7a3we****'),
      status?: string(name='Status', example='Ready'),
      tags?: [ 
        {
          key?: string(name='Key', example='name'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-2ze23nqzig8inprou****'),
      virtualNodeId?: string(name='VirtualNodeId', example='vnd-2ze960zkdqrldeaw****'),
      virtualNodeName?: string(name='VirtualNodeName', example='testNode'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-1vzjjflab6wvjox****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='VirtualNodes'),
}

model DescribeVirtualNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualNodesResponseBody(name='body'),
}

async function describeVirtualNodesWithOptions(request: DescribeVirtualNodesRequest, runtime: Util.RuntimeOptions): DescribeVirtualNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.virtualNodeIds)) {
    query['VirtualNodeIds'] = request.virtualNodeIds;
  }
  if (!Util.isUnset(request.virtualNodeName)) {
    query['VirtualNodeName'] = request.virtualNodeName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualNodes',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualNodes(request: DescribeVirtualNodesRequest): DescribeVirtualNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualNodesWithOptions(request, runtime);
}

model ExecContainerCommandRequest {
  command?: string(name='Command', example='["/bin/sh", "-c", "ls -a"]'),
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zebxkiifulhl****'),
  containerName?: string(name='ContainerName', example='nginx'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  stdin?: boolean(name='Stdin', example='true'),
  sync?: boolean(name='Sync', example='false'),
  TTY?: boolean(name='TTY', example='false'),
}

model ExecContainerCommandResponseBody = {
  httpUrl?: string(name='HttpUrl', example='https://eci.console.aliyun.com/terminal?param=X32a****'),
  requestId?: string(name='RequestId', example='28B583A8-313D-4383-7817-B5A9F7E0****'),
  syncResponse?: string(name='SyncResponse', example='Hello'),
  webSocketUri?: string(name='WebSocketUri', example='wss://eci-cn-shanghai.aliyun.com/exec/?s=ktHPx****'),
}

model ExecContainerCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecContainerCommandResponseBody(name='body'),
}

async function execContainerCommandWithOptions(request: ExecContainerCommandRequest, runtime: Util.RuntimeOptions): ExecContainerCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.command)) {
    query['Command'] = request.command;
  }
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.containerName)) {
    query['ContainerName'] = request.containerName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.stdin)) {
    query['Stdin'] = request.stdin;
  }
  if (!Util.isUnset(request.sync)) {
    query['Sync'] = request.sync;
  }
  if (!Util.isUnset(request.TTY)) {
    query['TTY'] = request.TTY;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecContainerCommand',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function execContainerCommand(request: ExecContainerCommandRequest): ExecContainerCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return execContainerCommandWithOptions(request, runtime);
}

model ListUsageRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListUsageResponseBody = {
  attributes?: map[string]any(name='Attributes', example='{"UsedCpu": 11,"MaxCpu": 1000,"MaxImageCacheCount": 50,"UsedImageCacheCount": 0}'),
  requestId?: string(name='RequestId', example='89164E78-FC82-4684-BE97-DCDD85D26546'),
}

model ListUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsageResponseBody(name='body'),
}

async function listUsageWithOptions(request: ListUsageRequest, runtime: Util.RuntimeOptions): ListUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsage',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsage(request: ListUsageRequest): ListUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsageWithOptions(request, runtime);
}

model ResizeContainerGroupVolumeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zelg8vwnlzdhf8hv****'),
  newSize?: long(name='NewSize', example='100'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  volumeName?: string(name='VolumeName', example='default-volume1'),
}

model ResizeContainerGroupVolumeResponseBody = {
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B3'),
}

model ResizeContainerGroupVolumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResizeContainerGroupVolumeResponseBody(name='body'),
}

async function resizeContainerGroupVolumeWithOptions(request: ResizeContainerGroupVolumeRequest, runtime: Util.RuntimeOptions): ResizeContainerGroupVolumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.newSize)) {
    query['NewSize'] = request.newSize;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.volumeName)) {
    query['VolumeName'] = request.volumeName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResizeContainerGroupVolume',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resizeContainerGroupVolume(request: ResizeContainerGroupVolumeRequest): ResizeContainerGroupVolumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeContainerGroupVolumeWithOptions(request, runtime);
}

model RestartContainerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zelg8vwnlzdhf8hv****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RestartContainerGroupResponseBody = {
  requestId?: string(name='RequestId', example='45D5B0AD-3B00-4A9B-9911-6D5303B06712'),
}

model RestartContainerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartContainerGroupResponseBody(name='body'),
}

async function restartContainerGroupWithOptions(request: RestartContainerGroupRequest, runtime: Util.RuntimeOptions): RestartContainerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartContainerGroup',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartContainerGroup(request: RestartContainerGroupRequest): RestartContainerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartContainerGroupWithOptions(request, runtime);
}

model UpdateContainerGroupRequest {
  dnsConfig?: {
    nameServer?: [ string ](name='NameServer', example='1.2.3.4'),
    option?: [ 
      {
        name?: string(name='Name', example='ndots'),
        value?: string(name='Value', example='2'),
      }
    ](name='Option'),
    search?: [ string ](name='Search', example='my.dns.search.suffix'),
  }(name='DnsConfig'),
  acrRegistryInfo?: [ 
    {
      domain?: [ string ](name='Domain'),
      instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f3****'),
      instanceName?: string(name='InstanceName', example='acr-test'),
      regionId?: string(name='RegionId', example='cn-beijing'),
    }
  ](name='AcrRegistryInfo'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  container?: [ 
    {
      livenessProbe: {
        exec: {
            command?: [ string ](name='Command'),
        }(name='Exec'),
        failureThreshold?: int32(name='FailureThreshold'),
        httpGet: {
            path?: string(name='Path'),
            port?: int32(name='Port'),
            scheme?: string(name='Scheme'),
        }(name='HttpGet'),
        initialDelaySeconds?: int32(name='InitialDelaySeconds'),
        periodSeconds?: int32(name='PeriodSeconds'),
        successThreshold?: int32(name='SuccessThreshold'),
        tcpSocket: {
            port?: int32(name='Port'),
        }(name='TcpSocket'),
        timeoutSeconds?: int32(name='TimeoutSeconds'),
      }(name='LivenessProbe'),
      readinessProbe: {
        exec: {
            command?: [ string ](name='Command'),
        }(name='Exec'),
        failureThreshold?: int32(name='FailureThreshold'),
        httpGet: {
            path?: string(name='Path'),
            port?: int32(name='Port'),
            scheme?: string(name='Scheme'),
        }(name='HttpGet'),
        initialDelaySeconds?: int32(name='InitialDelaySeconds'),
        periodSeconds?: int32(name='PeriodSeconds'),
        successThreshold?: int32(name='SuccessThreshold'),
        tcpSocket: {
            port?: int32(name='Port'),
        }(name='TcpSocket'),
        timeoutSeconds?: int32(name='TimeoutSeconds'),
      }(name='ReadinessProbe'),
      securityContext: {
        capability: {
            add?: [ string ](name='Add'),
        }(name='Capability'),
        readOnlyRootFilesystem?: boolean(name='ReadOnlyRootFilesystem'),
        runAsUser?: long(name='RunAsUser'),
      }(name='SecurityContext'),
      arg?: [ string ](name='Arg', example='hello'),
      command?: [ string ](name='Command', example='echo'),
      cpu?: float(name='Cpu', example='1.0'),
      environmentVar?: [ 
        {
          fieldRef: {
            fieldPath?: string(name='FieldPath'),
          }(name='FieldRef'),
          key?: string(name='Key', example='PATH'),
          value?: string(name='Value', example='/usr/bin/local/'),
        }
      ](name='EnvironmentVar'),
      gpu?: int32(name='Gpu', example='1'),
      image?: string(name='Image', example='jenkins'),
      imagePullPolicy?: string(name='ImagePullPolicy', example='Never'),
      lifecyclePostStartHandlerExec?: [ string ](name='LifecyclePostStartHandlerExec', example='hide'),
      lifecyclePostStartHandlerHttpGetHost?: string(name='LifecyclePostStartHandlerHttpGetHost', example='hide'),
      lifecyclePostStartHandlerHttpGetHttpHeaders?: [ 
        {
          name?: string(name='Name', example='testValue'),
          value?: string(name='Value', example='test'),
        }
      ](name='LifecyclePostStartHandlerHttpGetHttpHeaders'),
      lifecyclePostStartHandlerHttpGetPath?: string(name='LifecyclePostStartHandlerHttpGetPath', example='/healthyz'),
      lifecyclePostStartHandlerHttpGetPort?: int32(name='LifecyclePostStartHandlerHttpGetPort', example='1'),
      lifecyclePostStartHandlerHttpGetScheme?: string(name='LifecyclePostStartHandlerHttpGetScheme', example='/healthyz'),
      lifecyclePostStartHandlerTcpSocketHost?: string(name='LifecyclePostStartHandlerTcpSocketHost', example='10.0.XX.XX'),
      lifecyclePostStartHandlerTcpSocketPort?: int32(name='LifecyclePostStartHandlerTcpSocketPort', example='1'),
      lifecyclePreStopHandlerExec?: [ string ](name='LifecyclePreStopHandlerExec', example='hide'),
      lifecyclePreStopHandlerHttpGetHost?: string(name='LifecyclePreStopHandlerHttpGetHost', example='10.0.XX.XX'),
      lifecyclePreStopHandlerHttpGetHttpHeader?: [ 
        {
          name?: string(name='Name', example='test'),
          value?: string(name='Value', example='testValue'),
        }
      ](name='LifecyclePreStopHandlerHttpGetHttpHeader'),
      lifecyclePreStopHandlerHttpGetPath?: string(name='LifecyclePreStopHandlerHttpGetPath', example='/healthyz'),
      lifecyclePreStopHandlerHttpGetPort?: int32(name='LifecyclePreStopHandlerHttpGetPort', example='1'),
      lifecyclePreStopHandlerHttpGetScheme?: string(name='LifecyclePreStopHandlerHttpGetScheme', example='HTTP'),
      lifecyclePreStopHandlerTcpSocketHost?: string(name='LifecyclePreStopHandlerTcpSocketHost', example='10.0.XX.XX'),
      lifecyclePreStopHandlerTcpSocketPort?: int32(name='LifecyclePreStopHandlerTcpSocketPort', example='80'),
      memory?: float(name='Memory', example='2.0'),
      name?: string(name='Name', example='jenkins'),
      port?: [ 
        {
          port?: int32(name='Port', example='8080'),
          protocol?: string(name='Protocol', description='TCP/UDP。', example='TCP'),
        }
      ](name='Port'),
      stdin?: boolean(name='Stdin', example='false'),
      stdinOnce?: boolean(name='StdinOnce', example='true'),
      tty?: boolean(name='Tty', example='false'),
      volumeMount?: [ 
        {
          mountPath?: string(name='MountPath', example='/usr/share/'),
          mountPropagation?: string(name='MountPropagation', example='None'),
          name?: string(name='Name', example='test-empty'),
          readOnly?: boolean(name='ReadOnly', example='false'),
          subPath?: string(name='SubPath', example='/usr/share/sub/'),
        }
      ](name='VolumeMount'),
      workingDir?: string(name='WorkingDir', example='/usr/share/'),
    }
  ](name='Container'),
  containerGroupId?: string(name='ContainerGroupId', example='eci-2zelg8vwnlzdhf8hv****'),
  cpu?: float(name='Cpu', example='2.0'),
  imageRegistryCredential?: [ 
    {
      password?: string(name='Password', example='yourpassword'),
      server?: string(name='Server', example='registry.cn-shanghai.aliyuncs.com/ecitest/nginx:alpine'),
      userName?: string(name='UserName', example='yourname'),
    }
  ](name='ImageRegistryCredential'),
  initContainer?: [ 
    {
      securityContext: {
        capability: {
            add?: [ string ](name='Add'),
        }(name='Capability'),
        readOnlyRootFilesystem?: boolean(name='ReadOnlyRootFilesystem'),
        runAsUser?: long(name='RunAsUser'),
      }(name='SecurityContext'),
      arg?: [ string ](name='Arg', example='10'),
      command?: [ string ](name='Command', example='/bin/sh sleep'),
      cpu?: float(name='Cpu', example='2.0'),
      environmentVar?: [ 
        {
          fieldRef: {
            fieldPath?: string(name='FieldPath'),
          }(name='FieldRef'),
          key?: string(name='Key', example='PATH'),
          value?: string(name='Value', example='/usr/local/bin'),
        }
      ](name='EnvironmentVar'),
      gpu?: int32(name='Gpu', example='1'),
      image?: string(name='Image', example='nginx'),
      imagePullPolicy?: string(name='ImagePullPolicy', example='Onfailure'),
      memory?: float(name='Memory', example='4.0'),
      name?: string(name='Name', example='init-nginx'),
      port?: [ 
        {
          port?: int32(name='Port', example='9000'),
          protocol?: string(name='Protocol', description='TCP/UDP。', example='TCP'),
        }
      ](name='Port'),
      stdin?: boolean(name='Stdin', example='false'),
      stdinOnce?: boolean(name='StdinOnce', example='true'),
      tty?: boolean(name='Tty', example='true'),
      volumeMount?: [ 
        {
          mountPath?: string(name='MountPath', example='/pod/data'),
          mountPropagation?: string(name='MountPropagation', example='None'),
          name?: string(name='Name', example='default-volume1'),
          readOnly?: boolean(name='ReadOnly', example='false'),
          subPath?: string(name='SubPath', example='data2/'),
        }
      ](name='VolumeMount'),
      workingDir?: string(name='WorkingDir', example='/bin/local/'),
    }
  ](name='InitContainer'),
  memory?: float(name='Memory', example='4.0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-2df3isufhi38****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  restartPolicy?: string(name='RestartPolicy', example='Always'),
  tag?: [ 
    {
      key?: string(name='Key', example='name'),
      value?: string(name='Value', example='hxh'),
    }
  ](name='Tag'),
  updateType?: string(name='UpdateType', example='RenewUpdate'),
  volume?: [ 
    {
      configFileVolume: {
        configFileToPath?: [ 
          {
            content?: string(name='Content'),
            path?: string(name='Path'),
          }
        ](name='ConfigFileToPath'),
      }(name='ConfigFileVolume'),
      emptyDirVolume: {
        medium?: string(name='Medium'),
        sizeLimit?: string(name='SizeLimit'),
      }(name='EmptyDirVolume'),
      flexVolume: {
        driver?: string(name='Driver'),
        fsType?: string(name='FsType'),
        options?: string(name='Options'),
      }(name='FlexVolume'),
      hostPathVolume: {
        path?: string(name='Path'),
        type?: string(name='Type'),
      }(name='HostPathVolume'),
      NFSVolume: {
        path?: string(name='Path'),
        readOnly?: boolean(name='ReadOnly'),
        server?: string(name='Server'),
      }(name='NFSVolume'),
      name?: string(name='Name', example='test-empty'),
      type?: string(name='Type', example='EmptyDirVolume'),
    }
  ](name='Volume'),
}

model UpdateContainerGroupResponseBody = {
  requestId?: string(name='RequestId', example='CB8D2B22-D636-4182-****-1FC9DBDAD66F'),
}

model UpdateContainerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateContainerGroupResponseBody(name='body'),
}

async function updateContainerGroupWithOptions(request: UpdateContainerGroupRequest, runtime: Util.RuntimeOptions): UpdateContainerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acrRegistryInfo)) {
    query['AcrRegistryInfo'] = request.acrRegistryInfo;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.container)) {
    query['Container'] = request.container;
  }
  if (!Util.isUnset(request.containerGroupId)) {
    query['ContainerGroupId'] = request.containerGroupId;
  }
  if (!Util.isUnset(request.cpu)) {
    query['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.imageRegistryCredential)) {
    query['ImageRegistryCredential'] = request.imageRegistryCredential;
  }
  if (!Util.isUnset(request.initContainer)) {
    query['InitContainer'] = request.initContainer;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.restartPolicy)) {
    query['RestartPolicy'] = request.restartPolicy;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.updateType)) {
    query['UpdateType'] = request.updateType;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  if (!Util.isUnset(request.dnsConfig)) {
    query['DnsConfig'] = request.dnsConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateContainerGroup',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateContainerGroup(request: UpdateContainerGroupRequest): UpdateContainerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateContainerGroupWithOptions(request, runtime);
}

model UpdateImageCacheRequest {
  acrRegistryInfo?: [ 
    {
      domain?: [ string ](name='Domain', example='test****-registry.cn-hangzhou.cr.aliyuncs.com'),
      instanceId?: string(name='InstanceId', example='cri-nwj395hgf6f3****'),
      instanceName?: string(name='InstanceName', example='test****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='AcrRegistryInfo'),
  autoMatchImageCache?: boolean(name='AutoMatchImageCache', example='true'),
  clientToken?: string(name='ClientToken', example='123e4567-xxx-xxx-xxxx-42665544xxxx'),
  eipInstanceId?: string(name='EipInstanceId', example='eip-2zedsm5mfl3uhdj2d****'),
  eliminationStrategy?: string(name='EliminationStrategy', example='LRU'),
  flash?: boolean(name='Flash', example='true'),
  flashCopyCount?: int32(name='FlashCopyCount', example='7'),
  image?: [ string ](name='Image', example='registry-vpc.cn-hangzhou.aliyuncs.com/eci_open/nginx:1.15.10-perl'),
  imageCacheId?: string(name='ImageCacheId', example='imc-bp195erqe9o2pb09****'),
  imageCacheName?: string(name='ImageCacheName', example='testcache'),
  imageCacheSize?: int32(name='ImageCacheSize', example='20'),
  imageRegistryCredential?: [ 
    {
      password?: string(name='Password', example='registry-vpc.cn-hangzhou.aliyuncs.com'),
      server?: string(name='Server', example='username'),
      userName?: string(name='UserName', example='password'),
    }
  ](name='ImageRegistryCredential'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzh43v*****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retentionDays?: int32(name='RetentionDays', example='7'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  standardCopyCount?: int32(name='StandardCopyCount', example='7'),
  tag?: [ 
    {
      key?: string(name='Key', example='imc'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model UpdateImageCacheResponseBody = {
  requestId?: string(name='RequestId', example='0E234675-3465-4CC3-9D0F-9A864BC391DD'),
}

model UpdateImageCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateImageCacheResponseBody(name='body'),
}

async function updateImageCacheWithOptions(request: UpdateImageCacheRequest, runtime: Util.RuntimeOptions): UpdateImageCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acrRegistryInfo)) {
    query['AcrRegistryInfo'] = request.acrRegistryInfo;
  }
  if (!Util.isUnset(request.autoMatchImageCache)) {
    query['AutoMatchImageCache'] = request.autoMatchImageCache;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eipInstanceId)) {
    query['EipInstanceId'] = request.eipInstanceId;
  }
  if (!Util.isUnset(request.eliminationStrategy)) {
    query['EliminationStrategy'] = request.eliminationStrategy;
  }
  if (!Util.isUnset(request.flash)) {
    query['Flash'] = request.flash;
  }
  if (!Util.isUnset(request.flashCopyCount)) {
    query['FlashCopyCount'] = request.flashCopyCount;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageCacheId)) {
    query['ImageCacheId'] = request.imageCacheId;
  }
  if (!Util.isUnset(request.imageCacheName)) {
    query['ImageCacheName'] = request.imageCacheName;
  }
  if (!Util.isUnset(request.imageCacheSize)) {
    query['ImageCacheSize'] = request.imageCacheSize;
  }
  if (!Util.isUnset(request.imageRegistryCredential)) {
    query['ImageRegistryCredential'] = request.imageRegistryCredential;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.standardCopyCount)) {
    query['StandardCopyCount'] = request.standardCopyCount;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateImageCache',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateImageCache(request: UpdateImageCacheRequest): UpdateImageCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateImageCacheWithOptions(request, runtime);
}

model UpdateVirtualNodeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-uf66jeqopgqa9hdn****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-2ze81zoc3yl7a3we****'),
  tag?: [ 
    {
      key?: string(name='Key', example='name'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', example='vsw-2ze23nqzig8inprou****'),
  virtualNodeId?: string(name='VirtualNodeId', example='vnd-2ze960zkdqrldeaw****'),
  virtualNodeName?: string(name='VirtualNodeName', example='testNode'),
}

model UpdateVirtualNodeResponseBody = {
  requestId?: string(name='RequestId', example='89945DD3-9072-47D0-A318-353284CFC7B3'),
}

model UpdateVirtualNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVirtualNodeResponseBody(name='body'),
}

async function updateVirtualNodeWithOptions(request: UpdateVirtualNodeRequest, runtime: Util.RuntimeOptions): UpdateVirtualNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.virtualNodeId)) {
    query['VirtualNodeId'] = request.virtualNodeId;
  }
  if (!Util.isUnset(request.virtualNodeName)) {
    query['VirtualNodeName'] = request.virtualNodeName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVirtualNode',
    version = '2018-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVirtualNode(request: UpdateVirtualNodeRequest): UpdateVirtualNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVirtualNodeWithOptions(request, runtime);
}

