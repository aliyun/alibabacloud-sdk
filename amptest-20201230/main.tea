/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('amptest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateRulesRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model CreateRulesShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model CreateRulesResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model CreateRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRulesResponseBody(name='body'),
}

async function createRulesWithOptions(tmpReq: CreateRulesRequest, runtime: Util.RuntimeOptions): CreateRulesResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRules',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRules(request: CreateRulesRequest): CreateRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRulesWithOptions(request, runtime);
}

model HuichengTestGrayRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayResponseBody(name='body'),
}

async function huichengTestGrayWithOptions(tmpReq: HuichengTestGrayRequest, runtime: Util.RuntimeOptions): HuichengTestGrayResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGray',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGray(request: HuichengTestGrayRequest): HuichengTestGrayResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayWithOptions(request, runtime);
}

model HuichengTestGrayEightRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayEightShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayEightResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayEightResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayEightResponseBody(name='body'),
}

async function huichengTestGrayEightWithOptions(tmpReq: HuichengTestGrayEightRequest, runtime: Util.RuntimeOptions): HuichengTestGrayEightResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayEightShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGrayEight',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGrayEight(request: HuichengTestGrayEightRequest): HuichengTestGrayEightResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayEightWithOptions(request, runtime);
}

model HuichengTestGrayFifthRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayFifthShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayFifthResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayFifthResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayFifthResponseBody(name='body'),
}

async function huichengTestGrayFifthWithOptions(tmpReq: HuichengTestGrayFifthRequest, runtime: Util.RuntimeOptions): HuichengTestGrayFifthResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayFifthShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGrayFifth',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGrayFifth(request: HuichengTestGrayFifthRequest): HuichengTestGrayFifthResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayFifthWithOptions(request, runtime);
}

model HuichengTestGrayFourthRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayFourthShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayFourthResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayFourthResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayFourthResponseBody(name='body'),
}

async function huichengTestGrayFourthWithOptions(tmpReq: HuichengTestGrayFourthRequest, runtime: Util.RuntimeOptions): HuichengTestGrayFourthResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayFourthShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGrayFourth',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGrayFourth(request: HuichengTestGrayFourthRequest): HuichengTestGrayFourthResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayFourthWithOptions(request, runtime);
}

model HuichengTestGrayNineRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayNineShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayNineResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayNineResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayNineResponseBody(name='body'),
}

async function huichengTestGrayNineWithOptions(tmpReq: HuichengTestGrayNineRequest, runtime: Util.RuntimeOptions): HuichengTestGrayNineResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayNineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGrayNine',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGrayNine(request: HuichengTestGrayNineRequest): HuichengTestGrayNineResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayNineWithOptions(request, runtime);
}

model HuichengTestGraySecondRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGraySecondShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGraySecondResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGraySecondResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGraySecondResponseBody(name='body'),
}

async function huichengTestGraySecondWithOptions(tmpReq: HuichengTestGraySecondRequest, runtime: Util.RuntimeOptions): HuichengTestGraySecondResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGraySecondShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGraySecond',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGraySecond(request: HuichengTestGraySecondRequest): HuichengTestGraySecondResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGraySecondWithOptions(request, runtime);
}

model HuichengTestGraySevenRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGraySevenShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGraySevenResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGraySevenResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGraySevenResponseBody(name='body'),
}

async function huichengTestGraySevenWithOptions(tmpReq: HuichengTestGraySevenRequest, runtime: Util.RuntimeOptions): HuichengTestGraySevenResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGraySevenShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGraySeven',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGraySeven(request: HuichengTestGraySevenRequest): HuichengTestGraySevenResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGraySevenWithOptions(request, runtime);
}

model HuichengTestGraySixRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGraySixShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGraySixResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGraySixResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGraySixResponseBody(name='body'),
}

async function huichengTestGraySixWithOptions(tmpReq: HuichengTestGraySixRequest, runtime: Util.RuntimeOptions): HuichengTestGraySixResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGraySixShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGraySix',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGraySix(request: HuichengTestGraySixRequest): HuichengTestGraySixResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGraySixWithOptions(request, runtime);
}

model HuichengTestGrayTenRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayTenShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayTenResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayTenResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayTenResponseBody(name='body'),
}

async function huichengTestGrayTenWithOptions(tmpReq: HuichengTestGrayTenRequest, runtime: Util.RuntimeOptions): HuichengTestGrayTenResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayTenShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGrayTen',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGrayTen(request: HuichengTestGrayTenRequest): HuichengTestGrayTenResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayTenWithOptions(request, runtime);
}

model HuichengTestGrayThirdRequest {
  home?: {
    address?: {
      detail?: string(name='Detail', description='detail'),
      location?: {
        late?: long(name='Late', description='late'),
        lon?: long(name='Lon', description='lon'),
      }(name='Location', description='asdasd'),
      t?: {
        class?: string(name='Class', description='class'),
      }(name='T', description='t'),
    }(name='Address', description='asdasd'),
    DMap?: map[string]HomeDMapValue(name='DMap', description='dMap'),
    locations?: [ 
      {
        late?: long(name='Late', description='asdasd'),
        lon?: long(name='Lon', description='sadasd'),
      }
    ](name='Locations', description='asdasd'),
    nameToAge?: map[string]int32(name='NameToAge', description='NameToAge'),
    phoneNumbers?: [ string ](name='PhoneNumbers', description='asdasd'),
    t?: {
      class?: string(name='Class', description='class'),
    }(name='T', description='t'),
  }(name='Home', description='home'),
}

model HuichengTestGrayThirdShrinkRequest {
  homeShrink?: string(name='Home', description='home'),
}

model HuichengTestGrayThirdResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  size?: int32(name='Size', description='size'),
  value?: string(name='Value', description='value'),
}

model HuichengTestGrayThirdResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestGrayThirdResponseBody(name='body'),
}

async function huichengTestGrayThirdWithOptions(tmpReq: HuichengTestGrayThirdRequest, runtime: Util.RuntimeOptions): HuichengTestGrayThirdResponse {
  Util.validateModel(tmpReq);
  var request = new HuichengTestGrayThirdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.home)) {
    request.homeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.home, 'Home', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.homeShrink)) {
    query['Home'] = request.homeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HuichengTestGrayThird',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestGrayThird(request: HuichengTestGrayThirdRequest): HuichengTestGrayThirdResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestGrayThirdWithOptions(request, runtime);
}

model HuichengTestResourceOwnerIdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model HuichengTestResourceOwnerIdResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengTestResourceOwnerIdResponseBody(name='body'),
}

async function huichengTestResourceOwnerIdWithOptions(runtime: Util.RuntimeOptions): HuichengTestResourceOwnerIdResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'HuichengTestResourceOwnerId',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengTestResourceOwnerId(): HuichengTestResourceOwnerIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengTestResourceOwnerIdWithOptions(runtime);
}

model HuichengetResponseBody = {
  requestId?: string(name='RequestId'),
}

model HuichengetResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengetResponseBody(name='body'),
}

async function huichengetWithOptions(runtime: Util.RuntimeOptions): HuichengetResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'Huichenget',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichenget(): HuichengetResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengetWithOptions(runtime);
}

model HuichengetestResponseBody = {
  requestId?: string(name='RequestId'),
}

model HuichengetestResponse = {
  headers: map[string]string(name='headers'),
  body: HuichengetestResponseBody(name='body'),
}

async function huichengetestWithOptions(runtime: Util.RuntimeOptions): HuichengetestResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'Huichengetest',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function huichengetest(): HuichengetestResponse {
  var runtime = new Util.RuntimeOptions{};
  return huichengetestWithOptions(runtime);
}

model TsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model TsResponse = {
  headers: map[string]string(name='headers'),
  body: TsResponseBody(name='body'),
}

async function tsWithOptions(runtime: Util.RuntimeOptions): TsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'Ts',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ts(): TsResponse {
  var runtime = new Util.RuntimeOptions{};
  return tsWithOptions(runtime);
}

model HomeDMapValue = {
  detail?: string(name='Detail', description='detail'),
  location?: {
    late?: long(name='Late', description='late'),
    lon?: long(name='Lon', description='Lon'),
  }(name='Location', description='location'),
}

