/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'bailian';
  @version = '2023-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  jobId: string(name='JobId', example='ft-202307181110-146c93bf', position='Body'),
}

model CancelFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
}

model CancelFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelFineTuneJobResponseBody(name='body'),
}

async function cancelFineTuneJob(request: CancelFineTuneJobRequest): CancelFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateDocumentTagRequest {
  agentKey: string(name='AgentKey', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateDocumentTagResponseBody = {
  requestId?: string(name='RequestId'),
  tagId?: string(name='TagId'),
}

model CreateDocumentTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDocumentTagResponseBody(name='body'),
}

async function createDocumentTag(request: CreateDocumentTagRequest): CreateDocumentTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDocumentTag', 'POST', '/', 'json', false, 'json', request);
}

model CreateFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  baseModel: string(name='BaseModel', example='bailian-qwen-basic-v1', position='Body'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters', shrink='json', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  trainingFiles?: [ string ](name='TrainingFiles', shrink='json', position='Body'),
  trainingType?: string(name='TrainingType', position='Body'),
  validationFiles?: [ string ](name='ValidationFiles', shrink='json', position='Body'),
}

model CreateFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='7BA8ADD9-53D6-53F0-918F-A1E776AD230E'),
  status?: string(name='Status', example='- SUCCESSED
- PENDING
- RUNNING
- FAILED
- CANCELED'),
}

model CreateFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFineTuneJobResponseBody(name='body'),
}

async function createFineTuneJob(request: CreateFineTuneJobRequest): CreateFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  model: string(name='Model', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff', position='Body'),
}

model CreateServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='35A267BF-FBFA-54DB-8394-AA3B0742D833'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateService', 'POST', '/', 'json', true, 'form', request);
}

model CreateTextEmbeddingsRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  input?: [ string ](name='Input', shrink='json', position='Query'),
  textType?: string(name='TextType', position='Query'),
}

model CreateTextEmbeddingsResponseBody = {
  code?: string(name='Code'),
  data?: {
    embeddings?: [ 
      {
        embedding?: [ double ](name='Embedding'),
        textIndex?: int32(name='TextIndex'),
      }
    ](name='Embeddings'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTextEmbeddingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTextEmbeddingsResponseBody(name='body'),
}

async function createTextEmbeddings(request: CreateTextEmbeddingsRequest): CreateTextEmbeddingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTextEmbeddings', 'POST', '/', 'json', false, 'json', request);
}

model CreateTokenRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1664177985651'),
    token?: string(name='Token', example='89158587dfb7d85a335f98de4966d840'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDocRequest {
  agentKey: string(name='AgentKey', position='Query'),
  docId: string(name='DocId', position='Query'),
}

model DeleteDocResponseBody = {
  docId?: string(name='DocId'),
  requestId?: string(name='RequestId'),
}

model DeleteDocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDocResponseBody(name='body'),
}

async function deleteDoc(request: DeleteDocRequest): DeleteDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDoc', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDocumentTagRequest {
  agentKey: string(name='AgentKey', position='Query'),
  tagId: string(name='TagId', position='Query'),
}

model DeleteDocumentTagResponseBody = {
  requestId?: string(name='RequestId'),
  tagId?: string(name='TagId'),
}

model DeleteDocumentTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDocumentTagResponseBody(name='body'),
}

async function deleteDocumentTag(request: DeleteDocumentTagRequest): DeleteDocumentTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDocumentTag', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  jobId: string(name='JobId', example='ft-202307181110-146c93bf', position='Body'),
}

model DeleteFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='2C4E7A9B-C790-5FA7-9C00-F2661DDB5432'),
}

model DeleteFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFineTuneJobResponseBody(name='body'),
}

async function deleteFineTuneJob(request: DeleteFineTuneJobRequest): DeleteFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model DeleteServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  modelServiceId: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff', position='Body'),
}

model DeleteServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteService', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDocRequest {
  agentKey: string(name='AgentKey', position='Query'),
  docId: string(name='DocId', position='Query'),
}

model DescribeDocResponseBody = {
  docId?: string(name='DocId'),
  failReason?: string(name='FailReason'),
  name?: string(name='Name'),
  ownerId?: string(name='OwnerId'),
  requestId?: string(name='RequestId'),
  size?: string(name='Size'),
  status?: string(name='Status'),
  tags?: [ 
    {
      tagId?: string(name='TagId'),
      tagName?: string(name='TagName'),
    }
  ](name='Tags'),
  type?: string(name='Type'),
  uploadTime?: string(name='UploadTime'),
}

model DescribeDocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDocResponseBody(name='body'),
}

async function describeDoc(request: DescribeDocRequest): DescribeDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDocumentImportJobRequest {
  agentKey: string(name='AgentKey', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model DescribeDocumentImportJobResponseBody = {
  docs?: [ 
    {
      docId?: string(name='DocId'),
      failReason?: string(name='FailReason'),
      name?: string(name='Name'),
      status?: string(name='Status'),
    }
  ](name='Docs'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeDocumentImportJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDocumentImportJobResponseBody(name='body'),
}

async function describeDocumentImportJob(request: DescribeDocumentImportJobRequest): DescribeDocumentImportJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDocumentImportJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  jobId: string(name='JobId', example='ft-202307181110-146c93bf', position='Body'),
}

model DescribeFineTuneJobResponseBody = {
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  message?: string(name='Message'),
  modelName?: string(name='ModelName'),
  requestId?: string(name='RequestId', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
  trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
  trainingType?: string(name='TrainingType'),
  validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
}

model DescribeFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFineTuneJobResponseBody(name='body'),
}

async function describeFineTuneJob(request: DescribeFineTuneJobRequest): DescribeFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  modelServiceId: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff', position='Body'),
}

model DescribeServiceResponseBody = {
  appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='- RUNNING
- ARREARS_DOWN
- ARREARS_RECOVERING
- PENDING
- FAILED
- OFFLINING'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceResponseBody(name='body'),
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeService', 'POST', '/', 'json', true, 'form', request);
}

model GetFileStoreUploadPolicyRequest {
  agentKey: string(name='AgentKey', position='Query'),
  fileName: string(name='FileName', position='Query'),
  fileStoreId?: long(name='FileStoreId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model GetFileStoreUploadPolicyResponseBody = {
  data?: {
    accessId?: string(name='AccessId'),
    dir?: string(name='Dir'),
    expire?: string(name='Expire'),
    host?: string(name='Host'),
    key?: string(name='Key'),
    policy?: string(name='Policy'),
    securityToken?: string(name='SecurityToken'),
    signature?: string(name='Signature'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetFileStoreUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileStoreUploadPolicyResponseBody(name='body'),
}

async function getFileStoreUploadPolicy(request: GetFileStoreUploadPolicyRequest): GetFileStoreUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileStoreUploadPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPromptRequest {
  agentKey: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  promptId: string(name='PromptId', example='marketCopy', position='Query'),
  vars?: string(name='Vars', position='Query'),
}

model GetPromptResponseBody = {
  code?: string(name='Code', example='100004'),
  data?: {
    promptContent?: string(name='PromptContent'),
    promptId?: string(name='PromptId', example='marketCopy'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  success?: boolean(name='Success', example='True'),
}

model GetPromptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPromptResponseBody(name='body'),
}

async function getPrompt(request: GetPromptRequest): GetPromptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrompt', 'POST', '/', 'json', false, 'json', request);
}

model GetText2ImageJobRequest {
  agentKey: string(name='AgentKey', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model GetText2ImageJobResponseBody = {
  images?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      URL?: string(name='URL'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  taskMetrics?: {
    failed?: int32(name='Failed'),
    succeeded?: int32(name='Succeeded'),
    total?: int32(name='Total'),
  }(name='TaskMetrics'),
  taskStatus?: string(name='TaskStatus'),
  usage?: [ 
    {
      imageCount?: int32(name='ImageCount'),
    }
  ](name='Usage'),
}

model GetText2ImageJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetText2ImageJobResponseBody(name='body'),
}

async function getText2ImageJob(request: GetText2ImageJobRequest): GetText2ImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetText2ImageJob', 'GET', '/', 'json', false, 'json', request);
}

model ImportUserDocumentRequest {
  agentKey: string(name='AgentKey', position='Query'),
  fileName: string(name='FileName', position='Query'),
  fileStoreId: long(name='FileStoreId', position='Query'),
  ossPath: string(name='OssPath', position='Query'),
  storeId: long(name='StoreId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model ImportUserDocumentResponseBody = {
  data?: {
    dataId?: string(name='DataId'),
    dataStatus?: long(name='DataStatus'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ImportUserDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportUserDocumentResponseBody(name='body'),
}

async function importUserDocument(request: ImportUserDocumentRequest): ImportUserDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportUserDocument', 'POST', '/', 'json', false, 'json', request);
}

model ListDocsRequest {
  agentKey: string(name='AgentKey', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=20, position='Query'),
  storeId?: string(name='StoreId', position='Query'),
  tagIds?: [ string ](name='TagIds', shrink='json', position='Query'),
}

model ListDocsResponseBody = {
  docs?: [ 
    {
      docId?: string(name='DocId'),
      failReason?: string(name='FailReason'),
      name?: string(name='Name'),
      ownerId?: string(name='OwnerId'),
      size?: string(name='Size'),
      status?: string(name='Status'),
      tags?: [ 
        {
          tagId?: string(name='TagId'),
          tagName?: string(name='TagName'),
        }
      ](name='Tags'),
      type?: string(name='Type'),
      uploadTime?: string(name='UploadTime'),
    }
  ](name='Docs'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListDocsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDocsResponseBody(name='body'),
}

async function listDocs(request: ListDocsRequest): ListDocsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDocs', 'POST', '/', 'json', false, 'json', request);
}

model ListDocumentTagsRequest {
  agentKey: string(name='AgentKey', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, position='Query'),
  tagId?: string(name='TagId', position='Query'),
}

model ListDocumentTagsResponseBody = {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagList?: [ 
    {
      name?: string(name='Name'),
      tagId?: string(name='TagId'),
    }
  ](name='TagList'),
  total?: int32(name='Total'),
}

model ListDocumentTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDocumentTagsResponseBody(name='body'),
}

async function listDocumentTags(request: ListDocumentTagsRequest): ListDocumentTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDocumentTags', 'POST', '/', 'json', false, 'json', request);
}

model ListFineTuneJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListFineTuneJobsResponseBody = {
  jobs?: [ 
    {
      baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
      fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      hyperParameters?: {
        batchSize?: int32(name='BatchSize', example='32'),
        epochs?: int32(name='Epochs', example='10'),
        learningRate?: string(name='LearningRate', example='2e-5'),
        promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
      }(name='HyperParameters'),
      jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
      message?: string(name='Message'),
      modelName?: string(name='ModelName'),
      status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
      trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
      trainingType?: string(name='TrainingType'),
      validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
    }
  ](name='Jobs'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  total?: int32(name='Total', example='10'),
}

model ListFineTuneJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFineTuneJobsResponseBody(name='body'),
}

async function listFineTuneJobs(request: ListFineTuneJobsRequest): ListFineTuneJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFineTuneJobs', 'POST', '/', 'json', true, 'form', request);
}

model ListServicesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Body'),
  pageNo?: int32(name='PageNo', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListServicesResponseBody = {
  modelServices?: [ 
    {
      appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
      modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      status?: string(name='Status', example='- OFFLINING
- FAILED
- PENDING
- ARREARS_RECOVERING
- ARREARS_DOWN
- RUNNING'),
    }
  ](name='ModelServices'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E45491D5-7E0A-42C6-9B21-91D1066B1475'),
  total?: int32(name='Total', example='30'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServices', 'POST', '/', 'json', true, 'form', request);
}

model QueryUserDocumentRequest {
  agentKey: string(name='AgentKey', position='Query'),
  dataId: string(name='DataId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model QueryUserDocumentResponseBody = {
  data?: {
    dataId?: string(name='DataId'),
    dataStatus?: long(name='DataStatus'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserDocumentResponseBody(name='body'),
}

async function queryUserDocument(request: QueryUserDocumentRequest): QueryUserDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserDocument', 'POST', '/', 'json', false, 'json', request);
}

model SubmitDocumentImportJobRequest {
  agentKey: string(name='AgentKey', position='Query'),
  docs: [ 
    {
      name: string(name='Name'),
      ownerId?: string(name='OwnerId'),
      storeId: string(name='StoreId'),
      tagIds?: [ string ](name='TagIds'),
      type: string(name='Type'),
      URL: string(name='URL'),
    }
  ](name='Docs', position='Query'),
}

model SubmitDocumentImportJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitDocumentImportJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitDocumentImportJobResponseBody(name='body'),
}

async function submitDocumentImportJob(request: SubmitDocumentImportJobRequest): SubmitDocumentImportJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDocumentImportJob', 'POST', '/', 'json', false, 'json', request);
}

model SubmitText2ImageJobRequest {
  agentKey: string(name='AgentKey', position='Query'),
  appId: string(name='AppId', position='Query'),
  n?: int32(name='N', position='Query'),
  negativePrompt?: string(name='NegativePrompt', position='Query'),
  prompt: string(name='Prompt', position='Query'),
  seed?: int32(name='Seed', position='Query'),
  size?: string(name='Size', position='Query'),
  style?: string(name='Style', position='Query'),
}

model SubmitText2ImageJobResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  taskStatus?: string(name='TaskStatus'),
}

model SubmitText2ImageJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitText2ImageJobResponseBody(name='body'),
}

async function submitText2ImageJob(request: SubmitText2ImageJobRequest): SubmitText2ImageJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitText2ImageJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDocAttributeRequest {
  agentKey: string(name='AgentKey', position='Query'),
  delAllTags?: boolean(name='DelAllTags', position='Query'),
  docId: string(name='DocId', position='Query'),
  name?: string(name='Name', position='Query'),
  tagIds?: [ string ](name='TagIds', shrink='json', position='Query'),
}

model UpdateDocAttributeResponseBody = {
  docId?: string(name='DocId'),
  requestId?: string(name='RequestId'),
}

model UpdateDocAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDocAttributeResponseBody(name='body'),
}

async function updateDocAttribute(request: UpdateDocAttributeRequest): UpdateDocAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDocAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDocumentTagRequest {
  agentKey: string(name='AgentKey', position='Query'),
  name: string(name='Name', position='Query'),
  tagId: string(name='TagId', position='Query'),
}

model UpdateDocumentTagResponseBody = {
  requestId?: string(name='RequestId'),
  tagId?: string(name='TagId'),
}

model UpdateDocumentTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDocumentTagResponseBody(name='body'),
}

async function updateDocumentTag(request: UpdateDocumentTagRequest): UpdateDocumentTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDocumentTag', 'POST', '/', 'json', false, 'json', request);
}

