/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'bailian';
  @version = '2023-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  jobId: string(name='JobId', example='ft-202307181110-146c93bf', position='Body'),
}

model CancelFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
}

model CancelFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelFineTuneJobResponseBody(name='body'),
}

async function cancelFineTuneJob(request: CancelFineTuneJobRequest): CancelFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  baseModel: string(name='BaseModel', example='bailian-qwen-basic-v1', position='Body'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters', shrink='json', position='Body'),
  modelName?: string(name='ModelName', position='Body'),
  trainingFiles?: [ string ](name='TrainingFiles', shrink='json', position='Body'),
  trainingType?: string(name='TrainingType', position='Body'),
  validationFiles?: [ string ](name='ValidationFiles', shrink='json', position='Body'),
}

model CreateFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='7BA8ADD9-53D6-53F0-918F-A1E776AD230E'),
  status?: string(name='Status', example='- SUCCESSED
- PENDING
- RUNNING
- FAILED
- CANCELED'),
}

model CreateFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFineTuneJobResponseBody(name='body'),
}

async function createFineTuneJob(request: CreateFineTuneJobRequest): CreateFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  model: string(name='Model', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff', position='Body'),
}

model CreateServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='35A267BF-FBFA-54DB-8394-AA3B0742D833'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateService', 'POST', '/', 'json', true, 'form', request);
}

model CreateTextEmbeddingsRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  input?: [ string ](name='Input', shrink='json', position='Query'),
  textType?: string(name='TextType', position='Query'),
}

model CreateTextEmbeddingsResponseBody = {
  code?: string(name='Code'),
  data?: {
    embeddings?: [ 
      {
        embedding?: [ double ](name='Embedding'),
        textIndex?: int32(name='TextIndex'),
      }
    ](name='Embeddings'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTextEmbeddingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTextEmbeddingsResponseBody(name='body'),
}

async function createTextEmbeddings(request: CreateTextEmbeddingsRequest): CreateTextEmbeddingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTextEmbeddings', 'POST', '/', 'json', false, 'json', request);
}

model CreateTokenRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1664177985651'),
    token?: string(name='Token', example='89158587dfb7d85a335f98de4966d840'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnterpriseDataRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataId?: string(name='DataId', position='Query'),
}

model DeleteEnterpriseDataResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEnterpriseDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnterpriseDataResponseBody(name='body'),
}

async function deleteEnterpriseData(request: DeleteEnterpriseDataRequest): DeleteEnterpriseDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnterpriseData', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  jobId: string(name='JobId', example='ft-202307181110-146c93bf', position='Body'),
}

model DeleteFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='2C4E7A9B-C790-5FA7-9C00-F2661DDB5432'),
}

model DeleteFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFineTuneJobResponseBody(name='body'),
}

async function deleteFineTuneJob(request: DeleteFineTuneJobRequest): DeleteFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model DeleteServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  modelServiceId: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff', position='Body'),
}

model DeleteServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteService', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFineTuneJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  jobId: string(name='JobId', example='ft-202307181110-146c93bf', position='Body'),
}

model DescribeFineTuneJobResponseBody = {
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  message?: string(name='Message'),
  modelName?: string(name='ModelName'),
  requestId?: string(name='RequestId', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
  trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
  trainingType?: string(name='TrainingType'),
  validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
}

model DescribeFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFineTuneJobResponseBody(name='body'),
}

async function describeFineTuneJob(request: DescribeFineTuneJobRequest): DescribeFineTuneJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFineTuneJob', 'POST', '/', 'json', true, 'form', request);
}

model DescribeServiceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  modelServiceId: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff', position='Body'),
}

model DescribeServiceResponseBody = {
  appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='- RUNNING
- ARREARS_DOWN
- ARREARS_RECOVERING
- PENDING
- FAILED
- OFFLINING'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceResponseBody(name='body'),
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeService', 'POST', '/', 'json', true, 'form', request);
}

model GetEnterpriseDataByDataIdRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataId?: string(name='DataId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetEnterpriseDataByDataIdResponseBody = {
  data?: {
    dataId?: string(name='DataId'),
    dataName?: string(name='DataName'),
    dataSize?: string(name='DataSize'),
    dataStatus?: string(name='DataStatus'),
    dataStatusCode?: int32(name='DataStatusCode'),
    dataType?: string(name='DataType'),
    dataTypeCode?: int32(name='DataTypeCode'),
    downloadUrl?: string(name='DownloadUrl'),
    statusDetail?: string(name='StatusDetail'),
    storeType?: string(name='StoreType'),
    tags?: string(name='Tags'),
    uploadTime?: string(name='UploadTime'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEnterpriseDataByDataIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataByDataIdResponseBody(name='body'),
}

async function getEnterpriseDataByDataId(request: GetEnterpriseDataByDataIdRequest): GetEnterpriseDataByDataIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDataByDataId', 'POST', '/', 'json', false, 'json', request);
}

model GetEnterpriseDataChunkRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataId?: string(name='DataId', position='Query'),
}

model GetEnterpriseDataChunkResponseBody = {
  data?: [ 
    {
      text?: string(name='Text'),
      title?: string(name='Title'),
      titlePath?: string(name='TitlePath'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEnterpriseDataChunkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataChunkResponseBody(name='body'),
}

async function getEnterpriseDataChunk(request: GetEnterpriseDataChunkRequest): GetEnterpriseDataChunkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDataChunk', 'POST', '/', 'json', false, 'json', request);
}

model GetEnterpriseDataPageImageRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataId?: string(name='DataId', position='Query'),
}

model GetEnterpriseDataPageImageResponseBody = {
  data?: [ 
    {
      height?: int32(name='Height'),
      imageUrl?: string(name='ImageUrl'),
      pageId?: string(name='PageId'),
      width?: int32(name='Width'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEnterpriseDataPageImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataPageImageResponseBody(name='body'),
}

async function getEnterpriseDataPageImage(request: GetEnterpriseDataPageImageRequest): GetEnterpriseDataPageImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDataPageImage', 'POST', '/', 'json', false, 'json', request);
}

model GetEnterpriseDataParseResultRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataId?: string(name='DataId', position='Query'),
}

model GetEnterpriseDataParseResultResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEnterpriseDataParseResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataParseResultResponseBody(name='body'),
}

async function getEnterpriseDataParseResult(request: GetEnterpriseDataParseResultRequest): GetEnterpriseDataParseResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseDataParseResult', 'POST', '/', 'json', false, 'json', request);
}

model GetImportTaskResultRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model GetImportTaskResultResponseBody = {
  data?: {
    details?: [ 
      {
        dataId?: string(name='DataId'),
        dataName?: string(name='DataName'),
        errorMsg?: string(name='ErrorMsg'),
        success?: boolean(name='Success'),
      }
    ](name='Details'),
    taskId?: string(name='TaskId'),
    taskStatus?: int32(name='TaskStatus'),
    taskStatusText?: string(name='TaskStatusText'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetImportTaskResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImportTaskResultResponseBody(name='body'),
}

async function getImportTaskResult(request: GetImportTaskResultRequest): GetImportTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImportTaskResult', 'POST', '/', 'json', false, 'json', request);
}

model ImportEnterpriseDocumentRequest {
  agentKey?: string(name='AgentKey', example='5e88c37a5ef34eb8851556344099b626_p_efm', position='Query'),
  documentList?: [ 
    {
      bizId?: string(name='BizId', example='123456'),
      fileCanDownload?: boolean(name='FileCanDownload', example='false'),
      fileLink?: string(name='FileLink', example='xxx.com'),
      fileName?: string(name='FileName'),
      filePreviewLink?: string(name='FilePreviewLink', example='xxx.com'),
    }
  ](name='DocumentList', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  storeId?: long(name='StoreId', example='1L', position='Query'),
  tags?: [ string ](name='Tags', shrink='json', position='Query'),
}

model ImportEnterpriseDocumentResponseBody = {
  data?: string(name='Data', example='{\\"Token\\": \\"46cab0a8450c40f29a84e0ce8e983d22\\", \\"ExpiredTime\\": 1692842544}'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='ok'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  success?: boolean(name='Success', example='True'),
}

model ImportEnterpriseDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportEnterpriseDocumentResponseBody(name='body'),
}

async function importEnterpriseDocument(request: ImportEnterpriseDocumentRequest): ImportEnterpriseDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportEnterpriseDocument', 'POST', '/', 'json', false, 'json', request);
}

model ListFineTuneJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListFineTuneJobsResponseBody = {
  jobs?: [ 
    {
      baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
      fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      hyperParameters?: {
        batchSize?: int32(name='BatchSize', example='32'),
        epochs?: int32(name='Epochs', example='10'),
        learningRate?: string(name='LearningRate', example='2e-5'),
        promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
      }(name='HyperParameters'),
      jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
      message?: string(name='Message'),
      modelName?: string(name='ModelName'),
      status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
      trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
      trainingType?: string(name='TrainingType'),
      validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
    }
  ](name='Jobs'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  total?: int32(name='Total', example='10'),
}

model ListFineTuneJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFineTuneJobsResponseBody(name='body'),
}

async function listFineTuneJobs(request: ListFineTuneJobsRequest): ListFineTuneJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFineTuneJobs', 'POST', '/', 'json', true, 'form', request);
}

model ListServicesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm', position='Body'),
  pageNo?: int32(name='PageNo', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListServicesResponseBody = {
  modelServices?: [ 
    {
      appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
      modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      status?: string(name='Status', example='- OFFLINING
- FAILED
- PENDING
- ARREARS_RECOVERING
- ARREARS_DOWN
- RUNNING'),
    }
  ](name='ModelServices'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E45491D5-7E0A-42C6-9B21-91D1066B1475'),
  total?: int32(name='Total', example='30'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServices', 'POST', '/', 'json', true, 'form', request);
}

model QueryEnterpriseDataListRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataName?: string(name='DataName', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  storeType?: string(name='StoreType', position='Query'),
  tags?: [ string ](name='Tags', shrink='json', position='Query'),
}

model QueryEnterpriseDataListResponseBody = {
  data?: {
    list?: [ 
      {
        dataId?: string(name='DataId'),
        dataName?: string(name='DataName'),
        dataSize?: string(name='DataSize'),
        dataStatus?: string(name='DataStatus'),
        dataStatusCode?: int32(name='DataStatusCode'),
        dataType?: string(name='DataType'),
        dataTypeCode?: int32(name='DataTypeCode'),
        downloadUrl?: string(name='DownloadUrl'),
        statusDetail?: string(name='StatusDetail'),
        storeType?: string(name='StoreType'),
        tags?: string(name='Tags'),
        uploadTime?: string(name='UploadTime'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEnterpriseDataListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEnterpriseDataListResponseBody(name='body'),
}

async function queryEnterpriseDataList(request: QueryEnterpriseDataListRequest): QueryEnterpriseDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEnterpriseDataList', 'POST', '/', 'json', false, 'json', request);
}

model SearchEnterpriseDataRequest {
  agentKey?: string(name='AgentKey', position='Query'),
  dataIdList?: [ string ](name='DataIdList', shrink='json', position='Query'),
  enableRank?: boolean(name='EnableRank', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  query?: string(name='Query', position='Query'),
  storeId?: long(name='StoreId', position='Query'),
  tagIdList?: [ long ](name='TagIdList', shrink='json', position='Query'),
}

model SearchEnterpriseDataResponseBody = {
  data?: [ 
    {
      dataId?: string(name='DataId'),
      dataName?: string(name='DataName'),
      score?: string(name='Score'),
      source?: string(name='Source'),
      text?: string(name='Text'),
      title?: string(name='Title'),
      titlePath?: string(name='TitlePath'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchEnterpriseDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchEnterpriseDataResponseBody(name='body'),
}

async function searchEnterpriseData(request: SearchEnterpriseDataRequest): SearchEnterpriseDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchEnterpriseData', 'POST', '/', 'json', false, 'json', request);
}

