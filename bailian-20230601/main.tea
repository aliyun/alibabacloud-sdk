/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bailian', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
}

model CancelFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
}

model CancelFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelFineTuneJobResponseBody(name='body'),
}

async function cancelFineTuneJobWithOptions(request: CancelFineTuneJobRequest, runtime: Util.RuntimeOptions): CancelFineTuneJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelFineTuneJob(request: CancelFineTuneJobRequest): CancelFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelFineTuneJobWithOptions(request, runtime);
}

model CreateFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters'),
  modelName?: string(name='ModelName'),
  trainingFiles?: [ string ](name='TrainingFiles'),
  validationFiles?: [ string ](name='ValidationFiles'),
}

model CreateFineTuneJobShrinkRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  hyperParametersShrink?: string(name='HyperParameters'),
  modelName?: string(name='ModelName'),
  trainingFilesShrink?: string(name='TrainingFiles'),
  validationFilesShrink?: string(name='ValidationFiles'),
}

model CreateFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='7BA8ADD9-53D6-53F0-918F-A1E776AD230E'),
  status?: string(name='Status', example='- SUCCESSED
- PENDING
- RUNNING
- FAILED
- CANCELED'),
}

model CreateFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFineTuneJobResponseBody(name='body'),
}

async function createFineTuneJobWithOptions(tmpReq: CreateFineTuneJobRequest, runtime: Util.RuntimeOptions): CreateFineTuneJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFineTuneJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hyperParameters)) {
    request.hyperParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hyperParameters, 'HyperParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.trainingFiles)) {
    request.trainingFilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trainingFiles, 'TrainingFiles', 'json');
  }
  if (!Util.isUnset(tmpReq.validationFiles)) {
    request.validationFilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.validationFiles, 'ValidationFiles', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseModel)) {
    body['BaseModel'] = request.baseModel;
  }
  if (!Util.isUnset(request.hyperParametersShrink)) {
    body['HyperParameters'] = request.hyperParametersShrink;
  }
  if (!Util.isUnset(request.modelName)) {
    body['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.trainingFilesShrink)) {
    body['TrainingFiles'] = request.trainingFilesShrink;
  }
  if (!Util.isUnset(request.validationFilesShrink)) {
    body['ValidationFiles'] = request.validationFilesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFineTuneJob(request: CreateFineTuneJobRequest): CreateFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFineTuneJobWithOptions(request, runtime);
}

model CreateServiceRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  model?: string(name='Model', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
}

model CreateServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='35A267BF-FBFA-54DB-8394-AA3B0742D833'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createServiceWithOptions(request: CreateServiceRequest, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.model)) {
    body['Model'] = request.model;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateService',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWithOptions(request, runtime);
}

model CreateTokenRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1664177985651'),
    token?: string(name='Token', example='89158587dfb7d85a335f98de4966d840'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createTokenWithOptions(request: CreateTokenRequest, runtime: Util.RuntimeOptions): CreateTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateToken',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTokenWithOptions(request, runtime);
}

model DeleteFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
}

model DeleteFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='2C4E7A9B-C790-5FA7-9C00-F2661DDB5432'),
}

model DeleteFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFineTuneJobResponseBody(name='body'),
}

async function deleteFineTuneJobWithOptions(request: DeleteFineTuneJobRequest, runtime: Util.RuntimeOptions): DeleteFineTuneJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFineTuneJob(request: DeleteFineTuneJobRequest): DeleteFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFineTuneJobWithOptions(request, runtime);
}

model DeleteServiceRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
}

model DeleteServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.modelServiceId)) {
    body['ModelServiceId'] = request.modelServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteService',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceWithOptions(request, runtime);
}

model DescribeFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
}

model DescribeFineTuneJobResponseBody = {
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  message?: string(name='Message'),
  modelName?: string(name='ModelName'),
  requestId?: string(name='RequestId', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
  trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
  validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
}

model DescribeFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFineTuneJobResponseBody(name='body'),
}

async function describeFineTuneJobWithOptions(request: DescribeFineTuneJobRequest, runtime: Util.RuntimeOptions): DescribeFineTuneJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFineTuneJob(request: DescribeFineTuneJobRequest): DescribeFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFineTuneJobWithOptions(request, runtime);
}

model DescribeServiceRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
}

model DescribeServiceResponseBody = {
  appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='- RUNNING
- ARREARS_DOWN
- ARREARS_RECOVERING
- PENDING
- FAILED
- OFFLINING'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceResponseBody(name='body'),
}

async function describeServiceWithOptions(request: DescribeServiceRequest, runtime: Util.RuntimeOptions): DescribeServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.modelServiceId)) {
    body['ModelServiceId'] = request.modelServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeService',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceWithOptions(request, runtime);
}

model ListFineTuneJobsRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListFineTuneJobsResponseBody = {
  jobs?: [ 
    {
      baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
      fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      hyperParameters?: {
        batchSize?: int32(name='BatchSize', example='32'),
        epochs?: int32(name='Epochs', example='10'),
        learningRate?: string(name='LearningRate', example='2e-5'),
        promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
      }(name='HyperParameters'),
      jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
      message?: string(name='Message'),
      modelName?: string(name='ModelName'),
      status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
      trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
      validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
    }
  ](name='Jobs'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  total?: int32(name='Total', example='10'),
}

model ListFineTuneJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFineTuneJobsResponseBody(name='body'),
}

async function listFineTuneJobsWithOptions(request: ListFineTuneJobsRequest, runtime: Util.RuntimeOptions): ListFineTuneJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFineTuneJobs',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFineTuneJobs(request: ListFineTuneJobsRequest): ListFineTuneJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFineTuneJobsWithOptions(request, runtime);
}

model ListServicesRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListServicesResponseBody = {
  modelServices?: [ 
    {
      appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
      modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      status?: string(name='Status', example='- OFFLINING
- FAILED
- PENDING
- ARREARS_RECOVERING
- ARREARS_DOWN
- RUNNING'),
    }
  ](name='ModelServices'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E45491D5-7E0A-42C6-9B21-91D1066B1475'),
  total?: int32(name='Total', example='30'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServicesWithOptions(request: ListServicesRequest, runtime: Util.RuntimeOptions): ListServicesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.agentKey)) {
    body['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListServices',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServicesWithOptions(request, runtime);
}

