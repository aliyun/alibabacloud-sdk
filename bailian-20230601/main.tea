/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bailian', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddEnterpriseTagRequest {
  agentKey?: string(name='AgentKey'),
  tagName?: string(name='TagName'),
}

model AddEnterpriseTagResponseBody = {
  data?: {
    tagId?: long(name='TagId'),
    tagName?: string(name='TagName'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddEnterpriseTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddEnterpriseTagResponseBody(name='body'),
}

async function addEnterpriseTagWithOptions(request: AddEnterpriseTagRequest, runtime: Util.RuntimeOptions): AddEnterpriseTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddEnterpriseTag',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addEnterpriseTag(request: AddEnterpriseTagRequest): AddEnterpriseTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEnterpriseTagWithOptions(request, runtime);
}

model CancelFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
}

model CancelFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
}

model CancelFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelFineTuneJobResponseBody(name='body'),
}

async function cancelFineTuneJobWithOptions(request: CancelFineTuneJobRequest, runtime: Util.RuntimeOptions): CancelFineTuneJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelFineTuneJob(request: CancelFineTuneJobRequest): CancelFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelFineTuneJobWithOptions(request, runtime);
}

model CreateFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters'),
  modelName?: string(name='ModelName'),
  trainingFiles?: [ string ](name='TrainingFiles'),
  trainingType?: string(name='TrainingType'),
  validationFiles?: [ string ](name='ValidationFiles'),
}

model CreateFineTuneJobShrinkRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  hyperParametersShrink?: string(name='HyperParameters'),
  modelName?: string(name='ModelName'),
  trainingFilesShrink?: string(name='TrainingFiles'),
  trainingType?: string(name='TrainingType'),
  validationFilesShrink?: string(name='ValidationFiles'),
}

model CreateFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='7BA8ADD9-53D6-53F0-918F-A1E776AD230E'),
  status?: string(name='Status', example='- SUCCESSED
- PENDING
- RUNNING
- FAILED
- CANCELED'),
}

model CreateFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFineTuneJobResponseBody(name='body'),
}

async function createFineTuneJobWithOptions(tmpReq: CreateFineTuneJobRequest, runtime: Util.RuntimeOptions): CreateFineTuneJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFineTuneJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hyperParameters)) {
    request.hyperParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hyperParameters, 'HyperParameters', 'json');
  }
  if (!Util.isUnset(tmpReq.trainingFiles)) {
    request.trainingFilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trainingFiles, 'TrainingFiles', 'json');
  }
  if (!Util.isUnset(tmpReq.validationFiles)) {
    request.validationFilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.validationFiles, 'ValidationFiles', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseModel)) {
    body['BaseModel'] = request.baseModel;
  }
  if (!Util.isUnset(request.hyperParametersShrink)) {
    body['HyperParameters'] = request.hyperParametersShrink;
  }
  if (!Util.isUnset(request.modelName)) {
    body['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.trainingFilesShrink)) {
    body['TrainingFiles'] = request.trainingFilesShrink;
  }
  if (!Util.isUnset(request.trainingType)) {
    body['TrainingType'] = request.trainingType;
  }
  if (!Util.isUnset(request.validationFilesShrink)) {
    body['ValidationFiles'] = request.validationFilesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFineTuneJob(request: CreateFineTuneJobRequest): CreateFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFineTuneJobWithOptions(request, runtime);
}

model CreateServiceRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  model?: string(name='Model', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
}

model CreateServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='35A267BF-FBFA-54DB-8394-AA3B0742D833'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createServiceWithOptions(request: CreateServiceRequest, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.model)) {
    body['Model'] = request.model;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateService',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceWithOptions(request, runtime);
}

model CreateTextEmbeddingsRequest {
  agentKey?: string(name='AgentKey'),
  input?: [ string ](name='Input'),
  textType?: string(name='TextType'),
}

model CreateTextEmbeddingsShrinkRequest {
  agentKey?: string(name='AgentKey'),
  inputShrink?: string(name='Input'),
  textType?: string(name='TextType'),
}

model CreateTextEmbeddingsResponseBody = {
  code?: string(name='Code'),
  data?: {
    embeddings?: [ 
      {
        embedding?: [ double ](name='Embedding'),
        textIndex?: int32(name='TextIndex'),
      }
    ](name='Embeddings'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTextEmbeddingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTextEmbeddingsResponseBody(name='body'),
}

async function createTextEmbeddingsWithOptions(tmpReq: CreateTextEmbeddingsRequest, runtime: Util.RuntimeOptions): CreateTextEmbeddingsResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTextEmbeddingsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.input)) {
    request.inputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.input, 'Input', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.inputShrink)) {
    query['Input'] = request.inputShrink;
  }
  if (!Util.isUnset(request.textType)) {
    query['TextType'] = request.textType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTextEmbeddings',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTextEmbeddings(request: CreateTextEmbeddingsRequest): CreateTextEmbeddingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTextEmbeddingsWithOptions(request, runtime);
}

model CreateTokenRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='Forbidden'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1664177985651'),
    token?: string(name='Token', example='89158587dfb7d85a335f98de4966d840'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createTokenWithOptions(request: CreateTokenRequest, runtime: Util.RuntimeOptions): CreateTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateToken',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTokenWithOptions(request, runtime);
}

model DelEnterpriseTagRequest {
  agentKey?: string(name='AgentKey'),
  tagId?: long(name='TagId'),
}

model DelEnterpriseTagResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelEnterpriseTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DelEnterpriseTagResponseBody(name='body'),
}

async function delEnterpriseTagWithOptions(request: DelEnterpriseTagRequest, runtime: Util.RuntimeOptions): DelEnterpriseTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DelEnterpriseTag',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function delEnterpriseTag(request: DelEnterpriseTagRequest): DelEnterpriseTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return delEnterpriseTagWithOptions(request, runtime);
}

model DeleteEnterpriseDataRequest {
  agentKey?: string(name='AgentKey', example='b893e0167a3245f3b4a41fa08c0f37a0_p_efm'),
  dataId?: string(name='DataId', example='95CBEA84096E4FB08439E1E710E17923'),
}

model DeleteEnterpriseDataResponseBody = {
  data?: boolean(name='Data', example='True'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='error check permissions'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  success?: boolean(name='Success', example='True'),
}

model DeleteEnterpriseDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnterpriseDataResponseBody(name='body'),
}

async function deleteEnterpriseDataWithOptions(request: DeleteEnterpriseDataRequest, runtime: Util.RuntimeOptions): DeleteEnterpriseDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnterpriseData',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnterpriseData(request: DeleteEnterpriseDataRequest): DeleteEnterpriseDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnterpriseDataWithOptions(request, runtime);
}

model DeleteFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
}

model DeleteFineTuneJobResponseBody = {
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  requestId?: string(name='RequestId', example='2C4E7A9B-C790-5FA7-9C00-F2661DDB5432'),
}

model DeleteFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFineTuneJobResponseBody(name='body'),
}

async function deleteFineTuneJobWithOptions(request: DeleteFineTuneJobRequest, runtime: Util.RuntimeOptions): DeleteFineTuneJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFineTuneJob(request: DeleteFineTuneJobRequest): DeleteFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFineTuneJobWithOptions(request, runtime);
}

model DeleteServiceRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
}

model DeleteServiceResponseBody = {
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.modelServiceId)) {
    body['ModelServiceId'] = request.modelServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteService',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceWithOptions(request, runtime);
}

model DescribeFineTuneJobRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
}

model DescribeFineTuneJobResponseBody = {
  baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
  fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  hyperParameters?: {
    batchSize?: int32(name='BatchSize', example='32'),
    epochs?: int32(name='Epochs', example='10'),
    learningRate?: string(name='LearningRate', example='2e-5'),
    promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
  }(name='HyperParameters'),
  jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
  message?: string(name='Message'),
  modelName?: string(name='ModelName'),
  requestId?: string(name='RequestId', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
  trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
  trainingType?: string(name='TrainingType'),
  validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
}

model DescribeFineTuneJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFineTuneJobResponseBody(name='body'),
}

async function describeFineTuneJobWithOptions(request: DescribeFineTuneJobRequest, runtime: Util.RuntimeOptions): DescribeFineTuneJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFineTuneJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFineTuneJob(request: DescribeFineTuneJobRequest): DescribeFineTuneJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFineTuneJobWithOptions(request, runtime);
}

model DescribeServiceRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
}

model DescribeServiceResponseBody = {
  appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
  modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  status?: string(name='Status', example='- RUNNING
- ARREARS_DOWN
- ARREARS_RECOVERING
- PENDING
- FAILED
- OFFLINING'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceResponseBody(name='body'),
}

async function describeServiceWithOptions(request: DescribeServiceRequest, runtime: Util.RuntimeOptions): DescribeServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.modelServiceId)) {
    body['ModelServiceId'] = request.modelServiceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeService',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceWithOptions(request, runtime);
}

model GetEnterpriseDataByDataIdRequest {
  agentKey?: string(name='AgentKey'),
  dataId?: string(name='DataId'),
  ownerId?: long(name='OwnerId'),
}

model GetEnterpriseDataByDataIdResponseBody = {
  data?: {
    dataId?: string(name='DataId'),
    dataName?: string(name='DataName'),
    dataSize?: string(name='DataSize'),
    dataStatus?: string(name='DataStatus'),
    dataStatusCode?: int32(name='DataStatusCode'),
    dataType?: string(name='DataType'),
    dataTypeCode?: int32(name='DataTypeCode'),
    statusDetail?: string(name='StatusDetail'),
    storeType?: string(name='StoreType'),
    tags?: string(name='Tags'),
    uploadTime?: string(name='UploadTime'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEnterpriseDataByDataIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataByDataIdResponseBody(name='body'),
}

async function getEnterpriseDataByDataIdWithOptions(request: GetEnterpriseDataByDataIdRequest, runtime: Util.RuntimeOptions): GetEnterpriseDataByDataIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDataByDataId',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnterpriseDataByDataId(request: GetEnterpriseDataByDataIdRequest): GetEnterpriseDataByDataIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDataByDataIdWithOptions(request, runtime);
}

model GetEnterpriseDataChunkRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  dataId?: string(name='DataId', example='CB9D20BABFED4FB19BC9F9A6398F7E32'),
}

model GetEnterpriseDataChunkResponseBody = {
  data?: [ 
    {
      text?: string(name='Text'),
      title?: string(name='Title'),
      titlePath?: string(name='TitlePath', example='http://12'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='queryStsApiDimensionCallerListByTypeSingle failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model GetEnterpriseDataChunkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataChunkResponseBody(name='body'),
}

async function getEnterpriseDataChunkWithOptions(request: GetEnterpriseDataChunkRequest, runtime: Util.RuntimeOptions): GetEnterpriseDataChunkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDataChunk',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnterpriseDataChunk(request: GetEnterpriseDataChunkRequest): GetEnterpriseDataChunkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDataChunkWithOptions(request, runtime);
}

model GetEnterpriseDataPageImageRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  dataId?: string(name='DataId', example='F1E83CDC6CBC40358504F762D1AFED1B'),
}

model GetEnterpriseDataPageImageResponseBody = {
  data?: [ 
    {
      height?: int32(name='Height', example='720'),
      imageUrl?: string(name='ImageUrl', example='https://cadt-studio-publish.oss-cn-hangzhou.aliyuncs.com/1254528490571584/tsr-05FTI43JU8PHDEO9.png'),
      pageId?: string(name='PageId', example='1'),
      width?: int32(name='Width', example='1280'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='queryStsApiGlobalInfoByTypeAll failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model GetEnterpriseDataPageImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataPageImageResponseBody(name='body'),
}

async function getEnterpriseDataPageImageWithOptions(request: GetEnterpriseDataPageImageRequest, runtime: Util.RuntimeOptions): GetEnterpriseDataPageImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDataPageImage',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnterpriseDataPageImage(request: GetEnterpriseDataPageImageRequest): GetEnterpriseDataPageImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDataPageImageWithOptions(request, runtime);
}

model GetEnterpriseDataParseResultRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  dataId?: string(name='DataId', example='2DC1DD169C6342628D2F96CFB1D39B24'),
}

model GetEnterpriseDataParseResultResponseBody = {
  data?: string(name='Data', example='{\\"Token\\": \\"46cab0a8450c40f29a84e0ce8e983d22\\", \\"ExpiredTime\\": 1692842544}'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='queryStsApiDimensionCallerListByTypeSingle failed'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  success?: boolean(name='Success', example='True'),
}

model GetEnterpriseDataParseResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEnterpriseDataParseResultResponseBody(name='body'),
}

async function getEnterpriseDataParseResultWithOptions(request: GetEnterpriseDataParseResultRequest, runtime: Util.RuntimeOptions): GetEnterpriseDataParseResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEnterpriseDataParseResult',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEnterpriseDataParseResult(request: GetEnterpriseDataParseResultRequest): GetEnterpriseDataParseResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEnterpriseDataParseResultWithOptions(request, runtime);
}

model GetFileStoreUploadPolicyRequest {
  agentKey?: string(name='AgentKey'),
  fileName?: string(name='FileName'),
  fileStoreId?: long(name='FileStoreId'),
  userId?: string(name='UserId'),
}

model GetFileStoreUploadPolicyResponseBody = {
  data?: {
    accessId?: string(name='AccessId'),
    dir?: string(name='Dir'),
    expire?: string(name='Expire'),
    host?: string(name='Host'),
    key?: string(name='Key'),
    policy?: string(name='Policy'),
    securityToken?: string(name='SecurityToken'),
    signature?: string(name='Signature'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetFileStoreUploadPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileStoreUploadPolicyResponseBody(name='body'),
}

async function getFileStoreUploadPolicyWithOptions(request: GetFileStoreUploadPolicyRequest, runtime: Util.RuntimeOptions): GetFileStoreUploadPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileStoreId)) {
    query['FileStoreId'] = request.fileStoreId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileStoreUploadPolicy',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileStoreUploadPolicy(request: GetFileStoreUploadPolicyRequest): GetFileStoreUploadPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileStoreUploadPolicyWithOptions(request, runtime);
}

model GetImportTaskResultRequest {
  agentKey?: string(name='AgentKey'),
  taskId?: string(name='TaskId'),
}

model GetImportTaskResultResponseBody = {
  data?: {
    details?: [ 
      {
        dataId?: string(name='DataId'),
        dataName?: string(name='DataName'),
        errorMsg?: string(name='ErrorMsg'),
        success?: boolean(name='Success'),
      }
    ](name='Details'),
    taskId?: string(name='TaskId'),
    taskStatus?: int32(name='TaskStatus'),
    taskStatusText?: string(name='TaskStatusText'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetImportTaskResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImportTaskResultResponseBody(name='body'),
}

async function getImportTaskResultWithOptions(request: GetImportTaskResultRequest, runtime: Util.RuntimeOptions): GetImportTaskResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImportTaskResult',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getImportTaskResult(request: GetImportTaskResultRequest): GetImportTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImportTaskResultWithOptions(request, runtime);
}

model GetPromptRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  promptId?: string(name='PromptId', example='marketCopy'),
  vars?: string(name='Vars'),
}

model GetPromptResponseBody = {
  code?: string(name='Code', example='100004'),
  data?: {
    promptContent?: string(name='PromptContent'),
    promptId?: string(name='PromptId', example='marketCopy'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1C139002-0EC5-584C-A755-4B8B9FA080BE'),
  success?: boolean(name='Success', example='True'),
}

model GetPromptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPromptResponseBody(name='body'),
}

async function getPromptWithOptions(request: GetPromptRequest, runtime: Util.RuntimeOptions): GetPromptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.promptId)) {
    query['PromptId'] = request.promptId;
  }
  if (!Util.isUnset(request.vars)) {
    query['Vars'] = request.vars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrompt',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrompt(request: GetPromptRequest): GetPromptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPromptWithOptions(request, runtime);
}

model GetText2ImageJobRequest {
  agentKey?: string(name='AgentKey'),
  taskId?: string(name='TaskId'),
}

model GetText2ImageJobResponseBody = {
  images?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      URL?: string(name='URL'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  taskMetrics?: {
    failed?: int32(name='Failed'),
    succeeded?: int32(name='Succeeded'),
    total?: int32(name='Total'),
  }(name='TaskMetrics'),
  taskStatus?: string(name='TaskStatus'),
  usage?: [ 
    {
      imageCount?: int32(name='ImageCount'),
    }
  ](name='Usage'),
}

model GetText2ImageJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetText2ImageJobResponseBody(name='body'),
}

async function getText2ImageJobWithOptions(request: GetText2ImageJobRequest, runtime: Util.RuntimeOptions): GetText2ImageJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetText2ImageJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getText2ImageJob(request: GetText2ImageJobRequest): GetText2ImageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getText2ImageJobWithOptions(request, runtime);
}

model ImportEnterpriseDocumentRequest {
  agentKey?: string(name='AgentKey', example='5e88c37a5ef34eb8851556344099b626_p_efm'),
  dataType?: int32(name='DataType'),
  documentList?: [ 
    {
      bizId?: string(name='BizId', example='123456'),
      fileCanDownload?: boolean(name='FileCanDownload', example='false'),
      fileLink?: string(name='FileLink', example='xxx.com'),
      fileName?: string(name='FileName'),
      filePreviewLink?: string(name='FilePreviewLink', example='xxx.com'),
    }
  ](name='DocumentList'),
  ownerId?: long(name='OwnerId'),
  storeId?: long(name='StoreId', example='1L'),
  tags?: [ string ](name='Tags'),
}

model ImportEnterpriseDocumentShrinkRequest {
  agentKey?: string(name='AgentKey', example='5e88c37a5ef34eb8851556344099b626_p_efm'),
  dataType?: int32(name='DataType'),
  documentListShrink?: string(name='DocumentList'),
  ownerId?: long(name='OwnerId'),
  storeId?: long(name='StoreId', example='1L'),
  tagsShrink?: string(name='Tags'),
}

model ImportEnterpriseDocumentResponseBody = {
  data?: string(name='Data', example='{\\"Token\\": \\"46cab0a8450c40f29a84e0ce8e983d22\\", \\"ExpiredTime\\": 1692842544}'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='ok'),
  requestId?: string(name='RequestId', example='17204B98-7734-4F9A-8464-2446A84821CA'),
  success?: boolean(name='Success', example='True'),
}

model ImportEnterpriseDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportEnterpriseDocumentResponseBody(name='body'),
}

async function importEnterpriseDocumentWithOptions(tmpReq: ImportEnterpriseDocumentRequest, runtime: Util.RuntimeOptions): ImportEnterpriseDocumentResponse {
  Util.validateModel(tmpReq);
  var request = new ImportEnterpriseDocumentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.documentList)) {
    request.documentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.documentList, 'DocumentList', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.documentListShrink)) {
    query['DocumentList'] = request.documentListShrink;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.storeId)) {
    query['StoreId'] = request.storeId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportEnterpriseDocument',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importEnterpriseDocument(request: ImportEnterpriseDocumentRequest): ImportEnterpriseDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return importEnterpriseDocumentWithOptions(request, runtime);
}

model ImportUserDocumentRequest {
  agentKey?: string(name='AgentKey'),
  fileName?: string(name='FileName'),
  fileStoreId?: long(name='FileStoreId'),
  ossPath?: string(name='OssPath'),
  storeId?: long(name='StoreId'),
  userId?: string(name='UserId'),
}

model ImportUserDocumentResponseBody = {
  data?: {
    dataId?: string(name='DataId'),
    dataStatus?: long(name='DataStatus'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ImportUserDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportUserDocumentResponseBody(name='body'),
}

async function importUserDocumentWithOptions(request: ImportUserDocumentRequest, runtime: Util.RuntimeOptions): ImportUserDocumentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileStoreId)) {
    query['FileStoreId'] = request.fileStoreId;
  }
  if (!Util.isUnset(request.ossPath)) {
    query['OssPath'] = request.ossPath;
  }
  if (!Util.isUnset(request.storeId)) {
    query['StoreId'] = request.storeId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportUserDocument',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importUserDocument(request: ImportUserDocumentRequest): ImportUserDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return importUserDocumentWithOptions(request, runtime);
}

model ListFineTuneJobsRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListFineTuneJobsResponseBody = {
  jobs?: [ 
    {
      baseModel?: string(name='BaseModel', example='bailian-qwen-basic-v1'),
      fineTunedModel?: string(name='FineTunedModel', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      hyperParameters?: {
        batchSize?: int32(name='BatchSize', example='32'),
        epochs?: int32(name='Epochs', example='10'),
        learningRate?: string(name='LearningRate', example='2e-5'),
        promptLossWeight?: double(name='PromptLossWeight', example='1.0'),
      }(name='HyperParameters'),
      jobId?: string(name='JobId', example='ft-202307181110-146c93bf'),
      message?: string(name='Message'),
      modelName?: string(name='ModelName'),
      status?: string(name='Status', example='- FAILED
- RUNNING
- CANCELED
- PENDING
- SUCCESSED'),
      trainingFiles?: [ string ](name='TrainingFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
      trainingType?: string(name='TrainingType'),
      validationFiles?: [ string ](name='ValidationFiles', example='https://broadscope-train-pre.oss-cn-beijing.aliyuncs.com/copus-train1686040661321.xlsx'),
    }
  ](name='Jobs'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8F97A63B-55F1-527F-9D6E-467B6A7E8CF1'),
  total?: int32(name='Total', example='10'),
}

model ListFineTuneJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFineTuneJobsResponseBody(name='body'),
}

async function listFineTuneJobsWithOptions(request: ListFineTuneJobsRequest, runtime: Util.RuntimeOptions): ListFineTuneJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFineTuneJobs',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFineTuneJobs(request: ListFineTuneJobsRequest): ListFineTuneJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFineTuneJobsWithOptions(request, runtime);
}

model ListServicesRequest {
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098beee5_p_efm'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListServicesResponseBody = {
  modelServices?: [ 
    {
      appId?: string(name='AppId', example='3e45511d55b54392a40d7b47a16dad28'),
      modelServiceId?: string(name='ModelServiceId', example='bailian-qwen-basic-v1-ft-202307111653-d2d7dbff'),
      status?: string(name='Status', example='- OFFLINING
- FAILED
- PENDING
- ARREARS_RECOVERING
- ARREARS_DOWN
- RUNNING'),
    }
  ](name='ModelServices'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E45491D5-7E0A-42C6-9B21-91D1066B1475'),
  total?: int32(name='Total', example='30'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServicesWithOptions(request: ListServicesRequest, runtime: Util.RuntimeOptions): ListServicesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.agentKey)) {
    body['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListServices',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServicesWithOptions(request, runtime);
}

model QueryEnterpriseDataListRequest {
  agentKey?: string(name='AgentKey'),
  dataName?: string(name='DataName'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  storeType?: string(name='StoreType'),
  tags?: [ string ](name='Tags'),
}

model QueryEnterpriseDataListShrinkRequest {
  agentKey?: string(name='AgentKey'),
  dataName?: string(name='DataName'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  storeType?: string(name='StoreType'),
  tagsShrink?: string(name='Tags'),
}

model QueryEnterpriseDataListResponseBody = {
  data?: {
    list?: [ 
      {
        dataId?: string(name='DataId'),
        dataName?: string(name='DataName'),
        dataSize?: string(name='DataSize'),
        dataStatus?: string(name='DataStatus'),
        dataStatusCode?: int32(name='DataStatusCode'),
        dataType?: string(name='DataType'),
        dataTypeCode?: int32(name='DataTypeCode'),
        statusDetail?: string(name='StatusDetail'),
        storeType?: string(name='StoreType'),
        tags?: string(name='Tags'),
        uploadTime?: string(name='UploadTime'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEnterpriseDataListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEnterpriseDataListResponseBody(name='body'),
}

async function queryEnterpriseDataListWithOptions(tmpReq: QueryEnterpriseDataListRequest, runtime: Util.RuntimeOptions): QueryEnterpriseDataListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryEnterpriseDataListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataName)) {
    query['DataName'] = request.dataName;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.storeType)) {
    query['StoreType'] = request.storeType;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEnterpriseDataList',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEnterpriseDataList(request: QueryEnterpriseDataListRequest): QueryEnterpriseDataListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEnterpriseDataListWithOptions(request, runtime);
}

model QueryEnterpriseDataTagRequest {
  agentKey?: string(name='AgentKey'),
  dataId?: string(name='DataId'),
}

model QueryEnterpriseDataTagResponseBody = {
  data?: [ 
    {
      dataId?: string(name='DataId'),
      tagId?: long(name='TagId'),
      tagName?: string(name='TagName'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEnterpriseDataTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEnterpriseDataTagResponseBody(name='body'),
}

async function queryEnterpriseDataTagWithOptions(request: QueryEnterpriseDataTagRequest, runtime: Util.RuntimeOptions): QueryEnterpriseDataTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEnterpriseDataTag',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEnterpriseDataTag(request: QueryEnterpriseDataTagRequest): QueryEnterpriseDataTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEnterpriseDataTagWithOptions(request, runtime);
}

model QueryEnterpriseTagListRequest {
  agentKey?: string(name='AgentKey'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model QueryEnterpriseTagListResponseBody = {
  data?: {
    list?: [ 
      {
        tagId?: long(name='TagId'),
        tagName?: string(name='TagName'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEnterpriseTagListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEnterpriseTagListResponseBody(name='body'),
}

async function queryEnterpriseTagListWithOptions(request: QueryEnterpriseTagListRequest, runtime: Util.RuntimeOptions): QueryEnterpriseTagListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEnterpriseTagList',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEnterpriseTagList(request: QueryEnterpriseTagListRequest): QueryEnterpriseTagListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEnterpriseTagListWithOptions(request, runtime);
}

model QueryUserDocumentRequest {
  agentKey?: string(name='AgentKey'),
  dataId?: string(name='DataId'),
  userId?: string(name='UserId'),
}

model QueryUserDocumentResponseBody = {
  data?: {
    dataId?: string(name='DataId'),
    dataStatus?: long(name='DataStatus'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserDocumentResponseBody(name='body'),
}

async function queryUserDocumentWithOptions(request: QueryUserDocumentRequest, runtime: Util.RuntimeOptions): QueryUserDocumentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserDocument',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserDocument(request: QueryUserDocumentRequest): QueryUserDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserDocumentWithOptions(request, runtime);
}

model SearchEnterpriseDataRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  dataIdList?: [ string ](name='DataIdList'),
  enableRank?: boolean(name='EnableRank', example='true'),
  ownerId?: long(name='OwnerId'),
  query?: string(name='Query'),
  storeId?: long(name='StoreId', example='s-6feuw0nabn'),
  tagIdList?: [ long ](name='TagIdList'),
}

model SearchEnterpriseDataShrinkRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  dataIdListShrink?: string(name='DataIdList'),
  enableRank?: boolean(name='EnableRank', example='true'),
  ownerId?: long(name='OwnerId'),
  query?: string(name='Query'),
  storeId?: long(name='StoreId', example='s-6feuw0nabn'),
  tagIdListShrink?: string(name='TagIdList'),
}

model SearchEnterpriseDataResponseBody = {
  data?: [ 
    {
      dataId?: string(name='DataId', example='666A21E1FEFC4F80B84161E35C64CFD5'),
      dataName?: string(name='DataName', example='data-9e4d8148-d552-4338-9408-22eb395cd244'),
      score?: string(name='Score', example='7'),
      source?: string(name='Source', example='1'),
      text?: string(name='Text'),
      title?: string(name='Title'),
      titlePath?: string(name='TitlePath', example='http://123'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='ok'),
  requestId?: string(name='RequestId', description='Id of the request', example='778C0B3B-03C1-5FC1-A947-36EDD13606AB'),
  success?: boolean(name='Success', example='True'),
}

model SearchEnterpriseDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchEnterpriseDataResponseBody(name='body'),
}

async function searchEnterpriseDataWithOptions(tmpReq: SearchEnterpriseDataRequest, runtime: Util.RuntimeOptions): SearchEnterpriseDataResponse {
  Util.validateModel(tmpReq);
  var request = new SearchEnterpriseDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataIdList)) {
    request.dataIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataIdList, 'DataIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.tagIdList)) {
    request.tagIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIdList, 'TagIdList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataIdListShrink)) {
    query['DataIdList'] = request.dataIdListShrink;
  }
  if (!Util.isUnset(request.enableRank)) {
    query['EnableRank'] = request.enableRank;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.storeId)) {
    query['StoreId'] = request.storeId;
  }
  if (!Util.isUnset(request.tagIdListShrink)) {
    query['TagIdList'] = request.tagIdListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchEnterpriseData',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchEnterpriseData(request: SearchEnterpriseDataRequest): SearchEnterpriseDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEnterpriseDataWithOptions(request, runtime);
}

model SubmitText2ImageJobRequest {
  agentKey?: string(name='AgentKey'),
  appId?: string(name='AppId'),
  n?: int32(name='N'),
  negativePrompt?: string(name='NegativePrompt'),
  prompt?: string(name='Prompt'),
  seed?: int32(name='Seed'),
  size?: string(name='Size'),
  style?: string(name='Style'),
}

model SubmitText2ImageJobResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  taskStatus?: string(name='TaskStatus'),
}

model SubmitText2ImageJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitText2ImageJobResponseBody(name='body'),
}

async function submitText2ImageJobWithOptions(request: SubmitText2ImageJobRequest, runtime: Util.RuntimeOptions): SubmitText2ImageJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.n)) {
    query['N'] = request.n;
  }
  if (!Util.isUnset(request.negativePrompt)) {
    query['NegativePrompt'] = request.negativePrompt;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.seed)) {
    query['Seed'] = request.seed;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.style)) {
    query['Style'] = request.style;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitText2ImageJob',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitText2ImageJob(request: SubmitText2ImageJobRequest): SubmitText2ImageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitText2ImageJobWithOptions(request, runtime);
}

model UpdateEnterpriseDataInfoRequest {
  agentKey?: string(name='AgentKey'),
  bizId?: string(name='BizId'),
  dataId?: string(name='DataId'),
  dataName?: string(name='DataName'),
  filePreviewLink?: string(name='FilePreviewLink'),
}

model UpdateEnterpriseDataInfoResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEnterpriseDataInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnterpriseDataInfoResponseBody(name='body'),
}

async function updateEnterpriseDataInfoWithOptions(request: UpdateEnterpriseDataInfoRequest, runtime: Util.RuntimeOptions): UpdateEnterpriseDataInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.dataName)) {
    query['DataName'] = request.dataName;
  }
  if (!Util.isUnset(request.filePreviewLink)) {
    query['FilePreviewLink'] = request.filePreviewLink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnterpriseDataInfo',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnterpriseDataInfo(request: UpdateEnterpriseDataInfoRequest): UpdateEnterpriseDataInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnterpriseDataInfoWithOptions(request, runtime);
}

model UpdateEnterpriseDataTagRequest {
  agentKey?: string(name='AgentKey'),
  dataId?: string(name='DataId'),
  tags?: [ long ](name='Tags'),
}

model UpdateEnterpriseDataTagShrinkRequest {
  agentKey?: string(name='AgentKey'),
  dataId?: string(name='DataId'),
  tagsShrink?: string(name='Tags'),
}

model UpdateEnterpriseDataTagResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEnterpriseDataTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnterpriseDataTagResponseBody(name='body'),
}

async function updateEnterpriseDataTagWithOptions(tmpReq: UpdateEnterpriseDataTagRequest, runtime: Util.RuntimeOptions): UpdateEnterpriseDataTagResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEnterpriseDataTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnterpriseDataTag',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnterpriseDataTag(request: UpdateEnterpriseDataTagRequest): UpdateEnterpriseDataTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnterpriseDataTagWithOptions(request, runtime);
}

model UpdateEnterpriseTagRequest {
  agentKey?: string(name='AgentKey'),
  tagId?: long(name='TagId'),
  tagName?: string(name='TagName'),
}

model UpdateEnterpriseTagResponseBody = {
  data?: {
    tagId?: long(name='TagId'),
    tagName?: string(name='TagName'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEnterpriseTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnterpriseTagResponseBody(name='body'),
}

async function updateEnterpriseTagWithOptions(request: UpdateEnterpriseTagRequest, runtime: Util.RuntimeOptions): UpdateEnterpriseTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnterpriseTag',
    version = '2023-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnterpriseTag(request: UpdateEnterpriseTagRequest): UpdateEnterpriseTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnterpriseTagWithOptions(request, runtime);
}

