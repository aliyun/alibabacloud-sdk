/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('sysom', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AuthDiagnosisRequest {
  autoCreateRole?: boolean(name='autoCreateRole'),
  autoInstallAgent?: boolean(name='autoInstallAgent'),
  instances?: [ 
    {
      instance?: string(name='instance'),
      region?: string(name='region'),
    }
  ](name='instances'),
}

model AuthDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: any(name='data', example='{}'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='request_id'),
}

model AuthDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthDiagnosisResponseBody(name='body'),
}

/**
 * @summary 授权 SysOM 对某个机器进行诊断
 *
 * @param request AuthDiagnosisRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AuthDiagnosisResponse
 */
async function authDiagnosisWithOptions(request: AuthDiagnosisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthDiagnosisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoCreateRole)) {
    body['autoCreateRole'] = request.autoCreateRole;
  }
  if (!Util.isUnset(request.autoInstallAgent)) {
    body['autoInstallAgent'] = request.autoInstallAgent;
  }
  if (!Util.isUnset(request.instances)) {
    body['instances'] = request.instances;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AuthDiagnosis',
    version = '2023-12-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/openapi/diagnosis/auth`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 授权 SysOM 对某个机器进行诊断
 *
 * @param request AuthDiagnosisRequest
 * @return AuthDiagnosisResponse
 */
async function authDiagnosis(request: AuthDiagnosisRequest): AuthDiagnosisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return authDiagnosisWithOptions(request, headers, runtime);
}

model GenerateCopilotResponseRequest {
  llmParamString?: string(name='llmParamString'),
}

model GenerateCopilotResponseResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: string(name='data'),
  massage?: string(name='massage', example='Requests for llm service failed'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GenerateCopilotResponseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateCopilotResponseResponseBody(name='body'),
}

/**
 * @summary 获取copilot服务的返回结果
 *
 * @param request GenerateCopilotResponseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateCopilotResponseResponse
 */
async function generateCopilotResponseWithOptions(request: GenerateCopilotResponseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateCopilotResponseResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.llmParamString)) {
    body['llmParamString'] = request.llmParamString;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateCopilotResponse',
    version = '2023-12-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/copilot/generate_copilot_response`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取copilot服务的返回结果
 *
 * @param request GenerateCopilotResponseRequest
 * @return GenerateCopilotResponseResponse
 */
async function generateCopilotResponse(request: GenerateCopilotResponseRequest): GenerateCopilotResponseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateCopilotResponseWithOptions(request, headers, runtime);
}

model GetDiagnosisResultRequest {
  taskId?: string(name='task_id', description='This parameter is required.', example='quzuYl23'),
}

model GetDiagnosisResultResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    code?: int32(name='code', example='0'),
    command?: any(name='command', example='{
    "jobs":[
        {
            "cmd":"mkdir -p /var/log/sysak && sysak podmem -r 100  -a -j /var/log/sysak/podmem.json > /dev/null 2>&1 && cat /var/log/sysak/podmem.json",
            "instance":"172.20.12.174",
            "fetch_file_list":[

            ]
        }
    ],
    "in_order":true,
    "offline_mode":false,
    "offline_results":[

    ]
}'),
    createdAt?: string(name='created_at'),
    errMsg?: string(name='err_msg', example='Diagnosis failed'),
    params?: any(name='params', example='{
    "type":"all",
    "value":"",
    "channel":"ssh",
    "instance":"172.1.2.174",
    "service_name":"filecache"
}'),
    result?: any(name='result', example='{
    "summary":"  memory cgroup leak",
    "dataMemEvent":{
        "data":[
            {
                "key":"Util",
                "value":20
            },
            {
                "key":"MemLeak",
                "value":"OK"
            },
            {
                "key":"MemcgLeak",
                "value":"NG"
            },
            {
                "key":"MemFrag",
                "value":"OK"
            }
        ]
    },
    "dataMemOverView":{
        "data":[
            {
                "key":"app",
                "value":10937332
            },
            {
                "key":"free",
                "value":806800
            },
            {
                "key":"kernel",
                "value":4527660
            }
        ]
    },
    "dataKerMem":{
        "data":[
            {
                "key":"SReclaimable",
                "value":3411292
            },
            {
                "key":"VmallocUsed",
                "value":30980
            },
            {
                "key":"allocPage",
                "value":177732
            },
            {
                "key":"KernelStack",
                "value":9280
            },
            {
                "key":"PageTables",
                "value":38056
            },
            {
                "key":"SUnreclaim",
                "value":170248
            },
            {
                "key":"reserved",
                "value":690072
            }
        ]
    },
    "dataUserMem":{
        "data":[
            {
                "key":"filecache",
                "value":8010008
            },
            {
                "key":"anon",
                "value":2468608
            },
            {
                "key":"mlock",
                "value":0
            },
            {
                "key":"huge1G",
                "value":0
            },
            {
                "key":"huge2M",
                "value":0
            },
            {
                "key":"buffers",
                "value":458608
            },
            {
                "key":"shmem",
                "value":2284
            }
        ]
    },
    "dataCacheList":{
        "data":[
            {
                "key":0,
                "Name":"/var/lib/mysql/sysom/sys_handler_log.ibd",
                "cached":576764,
                "Task":"mysqld_78575 "
            },
            {
                "key":1,
                "Name":"/var/log/sysom/sysom-migration-access.log",
                "cached":276688,
                "Task":"gunicorn_33647 ,gunicorn_460836 ,gunicorn_559934 ,gunicorn_731758 ,gunicorn_2362682 "
            },
            {
                "key":2,
                "Name":"/var/log/sysom/sysom-rtdemo-access.log",
                "cached":229404,
                "Task":"gunicorn_60718 ,gunicorn_720734 ,gunicorn_722168 "
            },
            {
                "key":3,
                "Name":"/var/log/sysom/sysom-monitor-server-access.log",
                "cached":197368,
                "Task":"gunicorn_33682 ,gunicorn_671155 ,gunicorn_714998 "
            },
            {
                "key":4,
                "Name":"/var/log/sysom/sysom-channel-access.log",
                "cached":180276,
                "Task":"gunicorn_33233 ,gunicorn_499735 ,gunicorn_725497 "
            },
            {
                "key":5,
                "Name":"total cached of close file",
                "cached":3729668,
                "Task":""
            }
        ]
    },
    "dataProcMemList":{
        "data":[
            {
                "key":0,
                "task":"mysqld",
                "MemTotal":240856,
                "RssAnon":218248,
                "RssFile":22608
            },
            {
                "key":1,
                "task":"systemd-journal",
                "MemTotal":150248,
                "RssAnon":74300,
                "RssFile":75944
            },
            {
                "key":2,
                "task":"gunicorn",
                "MemTotal":144640,
                "RssAnon":114200,
                "RssFile":30440
            },
            {
                "key":3,
                "task":"gunicorn",
                "MemTotal":141480,
                "RssAnon":111040,
                "RssFile":30440
            },
            {
                "key":4,
                "task":"grafana-server",
                "MemTotal":103660,
                "RssAnon":42732,
                "RssFile":60928
            },
            {
                "key":5,
                "task":"gunicorn",
                "MemTotal":97444,
                "RssAnon":76256,
                "RssFile":21188
            },
            {
                "key":6,
                "task":"gunicorn",
                "MemTotal":97260,
                "RssAnon":76072,
                "RssFile":21188
            },
            {
                "key":7,
                "task":"prometheus",
                "MemTotal":95356,
                "RssAnon":45376,
                "RssFile":49980
            },
            {
                "key":8,
                "task":"gunicorn",
                "MemTotal":90144,
                "RssAnon":76456,
                "RssFile":13688
            },
            {
                "key":9,
                "task":"gunicorn",
                "MemTotal":89796,
                "RssAnon":76108,
                "RssFile":13688
            }
        ]
    }
}'),
    serviceName?: string(name='service_name', example='memgraph'),
    status?: string(name='status', example='Running'),
    taskId?: string(name='task_id', example='grcuU21a'),
    updatedAt?: string(name='updated_at'),
    url?: string(name='url', example='/diagnose/detail/qe3Z34sa'),
  }(name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='request_id', example='9515E5A0-8905-59B0-9BBF-5F0BE568C3A0'),
}

model GetDiagnosisResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDiagnosisResultResponseBody(name='body'),
}

/**
 * @summary 获取诊断结果
 *
 * @param request GetDiagnosisResultRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDiagnosisResultResponse
 */
async function getDiagnosisResultWithOptions(request: GetDiagnosisResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDiagnosisResultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    query['task_id'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiagnosisResult',
    version = '2023-12-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/openapi/diagnosis/get_diagnosis_results`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取诊断结果
 *
 * @param request GetDiagnosisResultRequest
 * @return GetDiagnosisResultResponse
 */
async function getDiagnosisResult(request: GetDiagnosisResultRequest): GetDiagnosisResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDiagnosisResultWithOptions(request, headers, runtime);
}

model InvokeDiagnosisRequest {
  channel?: string(name='channel', description='This parameter is required.', example='cloud_assist'),
  params?: string(name='params', description='This parameter is required.', example='{
    "instance": "i-wz9gdv7qmdhusamc4dl01",
    "uid": "xxxxxxxxxxxxxx",
    "region": "cn-shenzhen"
}'),
  serviceName?: string(name='service_name', description='This parameter is required.', example='memgraph'),
}

model InvokeDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id', example='ihqhAcrt'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='request_id'),
}

model InvokeDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeDiagnosisResponseBody(name='body'),
}

/**
 * @summary 发起诊断
 *
 * @param request InvokeDiagnosisRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvokeDiagnosisResponse
 */
async function invokeDiagnosisWithOptions(request: InvokeDiagnosisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InvokeDiagnosisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.channel)) {
    body['channel'] = request.channel;
  }
  if (!Util.isUnset(request.params)) {
    body['params'] = request.params;
  }
  if (!Util.isUnset(request.serviceName)) {
    body['service_name'] = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvokeDiagnosis',
    version = '2023-12-30',
    protocol = 'HTTPS',
    pathname = `/api/v1/openapi/diagnosis/invoke_diagnosis`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发起诊断
 *
 * @param request InvokeDiagnosisRequest
 * @return InvokeDiagnosisResponse
 */
async function invokeDiagnosis(request: InvokeDiagnosisRequest): InvokeDiagnosisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return invokeDiagnosisWithOptions(request, headers, runtime);
}

