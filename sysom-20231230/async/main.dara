/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SysOM';
  @version = '2023-12-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AuthDiagnosisRequest {
  autoCreateRole?: boolean(name='autoCreateRole', position='Body'),
  autoInstallAgent?: boolean(name='autoInstallAgent', position='Body'),
  instances?: [ 
    {
      instance?: string(name='instance'),
      region?: string(name='region'),
    }
  ](name='instances', position='Body'),
}

model AuthDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: any(name='data', example='{}'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='request_id'),
}

model AuthDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthDiagnosis  AuthDiagnosisRequest
  * @return AuthDiagnosisResponse
 */
async function authDiagnosis(request: AuthDiagnosisRequest): AuthDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuthDiagnosis', 'POST', '/api/v1/openapi/diagnosis/auth', 'json', false, 'json', request);
}

model CheckInstanceSupportRequest {
  instances?: [ string ](name='instances', example='["i-2zxxxxxx"]', position='Body'),
  region?: string(name='region', example='cn-hangzhou', position='Body'),
}

model CheckInstanceSupportResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j'),
      reason?: string(name='reason', example='instance not found in ecs'),
      support?: boolean(name='support', example='true'),
    }
  ](name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model CheckInstanceSupportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckInstanceSupportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckInstanceSupport  CheckInstanceSupportRequest
  * @return CheckInstanceSupportResponse
 */
async function checkInstanceSupport(request: CheckInstanceSupportRequest): CheckInstanceSupportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckInstanceSupport', 'POST', '/api/v1/am/supportInstanceList/checkInstanceSupport', 'json', false, 'json', request);
}

model GenerateCopilotResponseRequest {
  llmParamString?: string(name='llmParamString', position='Body'),
}

model GenerateCopilotResponseResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: string(name='data'),
  massage?: string(name='massage', example='Requests for llm service failed'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GenerateCopilotResponseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateCopilotResponseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateCopilotResponse  GenerateCopilotResponseRequest
  * @return GenerateCopilotResponseResponse
 */
async function generateCopilotResponse(request: GenerateCopilotResponseRequest): GenerateCopilotResponseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateCopilotResponse', 'POST', '/api/v1/copilot/generate_copilot_response', 'json', false, 'json', request);
}

model GenerateCopilotStreamResponseRequest {
  llmParamString?: string(name='llmParamString', position='Body'),
}

model GenerateCopilotStreamResponseResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: string(name='data'),
  message?: string(name='message', example='Requests for llm service failed'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GenerateCopilotStreamResponseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateCopilotStreamResponseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateCopilotStreamResponse  GenerateCopilotStreamResponseRequest
  * @return GenerateCopilotStreamResponseResponse
 */
async function generateCopilotStreamResponse(request: GenerateCopilotStreamResponseRequest): GenerateCopilotStreamResponseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateCopilotStreamResponse', 'POST', '/api/v1/copilot/generate_copilot_stream_response', 'json', false, 'json', request);
}

function generateCopilotStreamResponseWithResponseIterable(request: GenerateCopilotStreamResponseRequest): iterator[GenerateCopilotStreamResponseResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'GenerateCopilotStreamResponse', 'POST', '/api/v1/copilot/generate_copilot_stream_response', 'json', false, 'json', request);
}

model GetAIQueryResultRequest {
  analysisId?: string(name='analysisId', example='16896fa8-37f6-4c70-bb32-67fa9817d426', position='Body'),
}

model GetAIQueryResultResponseBody = {
  code?: string(name='code', example='Success'),
  data?: string(name='data', example='{\\"task_id\\": \\"y4ba8uRV\\"}'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetAIQueryResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAIQueryResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAIQueryResult  GetAIQueryResultRequest
  * @return GetAIQueryResultResponse
 */
async function getAIQueryResult(request: GetAIQueryResultRequest): GetAIQueryResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAIQueryResult', 'POST', '/api/v1/app_observ/aiAnalysis/query_result', 'json', false, 'json', request);
}

model GetAbnormalEventsCountRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end?: float(name='end', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  level?: string(name='level', position='Query'),
  namespace?: string(name='namespace', example='default', position='Query'),
  pod?: string(name='pod', example='test-pod', position='Query'),
  showPod?: int32(name='showPod', position='Query'),
  start?: float(name='start', example='1725797727754', position='Query'),
}

model GetAbnormalEventsCountResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      eventList?: [ string ](name='eventList'),
      type?: string(name='type', example='health'),
      value?: long(name='value', example='1'),
    }
  ](name='data'),
  message?: string(name='message', example='result: code=1 msg=(Request failed, status_code != 200)'),
}

model GetAbnormalEventsCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAbnormalEventsCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAbnormalEventsCount  GetAbnormalEventsCountRequest
  * @return GetAbnormalEventsCountResponse
 */
async function getAbnormalEventsCount(request: GetAbnormalEventsCountRequest): GetAbnormalEventsCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAbnormalEventsCount', 'GET', '/api/v1/openapi/cluster_health/range/abnormaly_events_count', 'json', false, 'json', request);
}

model GetAgentRequest {
  agentId?: string(name='agent_id', position='Query'),
}

model GetAgentResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: {
    createdAt?: string(name='created_at'),
    description?: string(name='description'),
    id?: string(name='id'),
    name?: string(name='name'),
    supportArch?: string(name='support_arch'),
    type?: string(name='type'),
    updatedAt?: string(name='updated_at'),
    versions?: [ 
      {
        createdAt?: string(name='created_at'),
        installScript?: string(name='install_script'),
        uninstallScript?: string(name='uninstall_script'),
        updatedAt?: string(name='updated_at'),
        upgradeScript?: string(name='upgrade_script'),
        version?: string(name='version'),
      }
    ](name='versions'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIException: SysomOpenAPI.InvalidParameter Invalid params, should be json string or dict'),
}

model GetAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAgent  GetAgentRequest
  * @return GetAgentResponse
 */
async function getAgent(request: GetAgentRequest): GetAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAgent', 'GET', '/api/v1/am/agent/get_agent', 'json', false, 'json', request);
}

model GetAgentTaskRequest {
  taskId?: string(name='task_id', position='Query'),
}

model GetAgentTaskResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: {
    jobs?: [ 
      {
        error?: string(name='error'),
        instance?: string(name='instance'),
        params?: any(name='params'),
        region?: string(name='region'),
        result?: string(name='result'),
        status?: string(name='status', example='Running'),
      }
    ](name='jobs'),
    taskId?: string(name='task_id'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIException: SysomOpenAPI.InvalidParameter Invalid params, should be json string or dict'),
}

model GetAgentTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAgentTask  GetAgentTaskRequest
  * @return GetAgentTaskResponse
 */
async function getAgentTask(request: GetAgentTaskRequest): GetAgentTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAgentTask', 'GET', '/api/v1/am/agent/get_agent_task', 'json', false, 'json', request);
}

model GetCopilotHistoryRequest {
  count: long(name='count', description='This parameter is required.', example='100', position='Body'),
}

model GetCopilotHistoryResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.InvalidParameter'),
  data?: [ 
    {
      content?: string(name='content'),
      time?: string(name='time', example='2024-09-02 10:02:39'),
      user?: string(name='user', example='user
copilot'),
    }
  ](name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetCopilotHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCopilotHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCopilotHistory  GetCopilotHistoryRequest
  * @return GetCopilotHistoryResponse
 */
async function getCopilotHistory(request: GetCopilotHistoryRequest): GetCopilotHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCopilotHistory', 'POST', '/api/v1/copilot/get_copilot_history', 'json', false, 'json', request);
}

model GetDiagnosisResultRequest {
  taskId: string(name='task_id', description='This parameter is required.', example='quzuYl23', position='Query'),
}

model GetDiagnosisResultResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    code?: int32(name='code', example='0'),
    command?: any(name='command', example='{
    "jobs":[
        {
            "cmd":"mkdir -p /var/log/sysak && sysak podmem -r 100  -a -j /var/log/sysak/podmem.json > /dev/null 2>&1 && cat /var/log/sysak/podmem.json",
            "instance":"172.20.12.174",
            "fetch_file_list":[

            ]
        }
    ],
    "in_order":true,
    "offline_mode":false,
    "offline_results":[

    ]
}'),
    createdAt?: string(name='created_at'),
    errMsg?: string(name='err_msg', example='Diagnosis failed'),
    params?: any(name='params', example='{
    "type":"all",
    "value":"",
    "channel":"ssh",
    "instance":"172.1.2.174",
    "service_name":"filecache"
}'),
    result?: any(name='result', example='{
    "summary":"  memory cgroup leak",
    "dataMemEvent":{
        "data":[
            {
                "key":"Util",
                "value":20
            },
            {
                "key":"MemLeak",
                "value":"OK"
            },
            {
                "key":"MemcgLeak",
                "value":"NG"
            },
            {
                "key":"MemFrag",
                "value":"OK"
            }
        ]
    },
    "dataMemOverView":{
        "data":[
            {
                "key":"app",
                "value":10937332
            },
            {
                "key":"free",
                "value":806800
            },
            {
                "key":"kernel",
                "value":4527660
            }
        ]
    },
    "dataKerMem":{
        "data":[
            {
                "key":"SReclaimable",
                "value":3411292
            },
            {
                "key":"VmallocUsed",
                "value":30980
            },
            {
                "key":"allocPage",
                "value":177732
            },
            {
                "key":"KernelStack",
                "value":9280
            },
            {
                "key":"PageTables",
                "value":38056
            },
            {
                "key":"SUnreclaim",
                "value":170248
            },
            {
                "key":"reserved",
                "value":690072
            }
        ]
    },
    "dataUserMem":{
        "data":[
            {
                "key":"filecache",
                "value":8010008
            },
            {
                "key":"anon",
                "value":2468608
            },
            {
                "key":"mlock",
                "value":0
            },
            {
                "key":"huge1G",
                "value":0
            },
            {
                "key":"huge2M",
                "value":0
            },
            {
                "key":"buffers",
                "value":458608
            },
            {
                "key":"shmem",
                "value":2284
            }
        ]
    },
    "dataCacheList":{
        "data":[
            {
                "key":0,
                "Name":"/var/lib/mysql/sysom/sys_handler_log.ibd",
                "cached":576764,
                "Task":"mysqld_78575 "
            },
            {
                "key":1,
                "Name":"/var/log/sysom/sysom-migration-access.log",
                "cached":276688,
                "Task":"gunicorn_33647 ,gunicorn_460836 ,gunicorn_559934 ,gunicorn_731758 ,gunicorn_2362682 "
            },
            {
                "key":2,
                "Name":"/var/log/sysom/sysom-rtdemo-access.log",
                "cached":229404,
                "Task":"gunicorn_60718 ,gunicorn_720734 ,gunicorn_722168 "
            },
            {
                "key":3,
                "Name":"/var/log/sysom/sysom-monitor-server-access.log",
                "cached":197368,
                "Task":"gunicorn_33682 ,gunicorn_671155 ,gunicorn_714998 "
            },
            {
                "key":4,
                "Name":"/var/log/sysom/sysom-channel-access.log",
                "cached":180276,
                "Task":"gunicorn_33233 ,gunicorn_499735 ,gunicorn_725497 "
            },
            {
                "key":5,
                "Name":"total cached of close file",
                "cached":3729668,
                "Task":""
            }
        ]
    },
    "dataProcMemList":{
        "data":[
            {
                "key":0,
                "task":"mysqld",
                "MemTotal":240856,
                "RssAnon":218248,
                "RssFile":22608
            },
            {
                "key":1,
                "task":"systemd-journal",
                "MemTotal":150248,
                "RssAnon":74300,
                "RssFile":75944
            },
            {
                "key":2,
                "task":"gunicorn",
                "MemTotal":144640,
                "RssAnon":114200,
                "RssFile":30440
            },
            {
                "key":3,
                "task":"gunicorn",
                "MemTotal":141480,
                "RssAnon":111040,
                "RssFile":30440
            },
            {
                "key":4,
                "task":"grafana-server",
                "MemTotal":103660,
                "RssAnon":42732,
                "RssFile":60928
            },
            {
                "key":5,
                "task":"gunicorn",
                "MemTotal":97444,
                "RssAnon":76256,
                "RssFile":21188
            },
            {
                "key":6,
                "task":"gunicorn",
                "MemTotal":97260,
                "RssAnon":76072,
                "RssFile":21188
            },
            {
                "key":7,
                "task":"prometheus",
                "MemTotal":95356,
                "RssAnon":45376,
                "RssFile":49980
            },
            {
                "key":8,
                "task":"gunicorn",
                "MemTotal":90144,
                "RssAnon":76456,
                "RssFile":13688
            },
            {
                "key":9,
                "task":"gunicorn",
                "MemTotal":89796,
                "RssAnon":76108,
                "RssFile":13688
            }
        ]
    }
}'),
    serviceName?: string(name='service_name', example='memgraph'),
    status?: string(name='status', example='Running'),
    taskId?: string(name='task_id', example='grcuU21a'),
    updatedAt?: string(name='updated_at'),
    url?: string(name='url', example='/diagnose/detail/qe3Z34sa'),
  }(name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='request_id', example='9515E5A0-8905-59B0-9BBF-5F0BE568C3A0'),
}

model GetDiagnosisResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDiagnosisResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDiagnosisResult  GetDiagnosisResultRequest
  * @return GetDiagnosisResultResponse
 */
async function getDiagnosisResult(request: GetDiagnosisResultRequest): GetDiagnosisResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDiagnosisResult', 'GET', '/api/v1/openapi/diagnosis/get_diagnosis_results', 'json', false, 'json', request);
}

model GetHealthPercentageRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end: float(name='end', description='This parameter is required.', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  start: float(name='start', description='This parameter is required.', example='1725797727754', position='Query'),
}

model GetHealthPercentageResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: [ 
    {
      type?: string(name='type', example='health'),
      value?: long(name='value', example='1'),
    }
  ](name='data'),
  message?: string(name='message', example='""'),
}

model GetHealthPercentageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHealthPercentageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHealthPercentage  GetHealthPercentageRequest
  * @return GetHealthPercentageResponse
 */
async function getHealthPercentage(request: GetHealthPercentageRequest): GetHealthPercentageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHealthPercentage', 'GET', '/api/v1/openapi/cluster_health/range/health_percentage', 'json', false, 'json', request);
}

model GetHostCountRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end?: float(name='end', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  start?: float(name='start', example='1725797727754', position='Query'),
}

model GetHostCountResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      time?: long(name='time', example='1725797727754'),
      value?: int32(name='value', example='5'),
    }
  ](name='data'),
  message?: string(name='message', example='“”'),
  requestId?: string(name='request_id', example='43A910E9-A739-525E-855D-A32C257F1826'),
  total?: long(name='total', example='3'),
}

model GetHostCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHostCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHostCount  GetHostCountRequest
  * @return GetHostCountResponse
 */
async function getHostCount(request: GetHostCountRequest): GetHostCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHostCount', 'GET', '/api/v1/openapi/cluster_health/range/host_count', 'json', false, 'json', request);
}

model GetHotSpotUniqListRequest {
  begEnd: long(name='beg_end', description='This parameter is required.', example='1735010351000', position='Body'),
  begStart: long(name='beg_start', description='This parameter is required.', example='1735008551000', position='Body'),
  instance: string(name='instance', description='This parameter is required.', example='i-bp1g2i0siirefgwnnnvy', position='Body'),
  pid?: long(name='pid', example='12345', position='Body'),
  table?: string(name='table', example='prof_on', position='Body'),
  uniq: string(name='uniq', description='This parameter is required.', position='Body'),
}

model GetHotSpotUniqListResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    columns?: [ string ](name='columns'),
    values?: [ string ](name='values'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='2D693121-C925-5154-8DF6-C09A8B369822'),
  success?: string(name='success', example='true'),
}

model GetHotSpotUniqListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotSpotUniqListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotSpotUniqList  GetHotSpotUniqListRequest
  * @return GetHotSpotUniqListResponse
 */
async function getHotSpotUniqList(request: GetHotSpotUniqListRequest): GetHotSpotUniqListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotSpotUniqList', 'POST', '/api/v1/livetrace_proxy/hotspot_uniq_list', 'json', false, 'json', request);
}

model GetHotspotAnalysisRequest {
  appType: string(name='appType', description='This parameter is required.', example='GR', position='Body'),
  begEnd: long(name='beg_end', description='This parameter is required.', example='1725413948000', position='Body'),
  begStart: long(name='beg_start', description='This parameter is required.', example='1725410348000', position='Body'),
  instance: string(name='instance', description='This parameter is required.', example='i-2ze5ru5rjurix7f71sxv', position='Body'),
  pid?: long(name='pid', example='1657494', position='Body'),
  table?: string(name='table', example='prof_on', position='Body'),
}

model GetHotspotAnalysisResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: string(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
  success?: boolean(name='success', example='True'),
}

model GetHotspotAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotAnalysis  GetHotspotAnalysisRequest
  * @return GetHotspotAnalysisResponse
 */
async function getHotspotAnalysis(request: GetHotspotAnalysisRequest): GetHotspotAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotspotAnalysis', 'POST', '/api/v1/openapi/proxy/post/livetrace_hotspot_analysis', 'json', false, 'json', request);
}

model GetHotspotCompareRequest {
  beg1End: long(name='beg1_end', description='This parameter is required.', example='1725415774000', position='Body'),
  beg1Start: long(name='beg1_start', description='This parameter is required.', example='1725415474000', position='Body'),
  beg2End: long(name='beg2_end', description='This parameter is required.', example='1725415774000', position='Body'),
  beg2Start: long(name='beg2_start', description='This parameter is required.', example='1725415474000', position='Body'),
  hotType?: string(name='hot_type', position='Body'),
  instance1: string(name='instance1', description='This parameter is required.', example='i-2zei55fwj8nnu31h3z46"', position='Body'),
  instance2: string(name='instance2', description='This parameter is required.', example='0', position='Body'),
  pid1?: long(name='pid1', example='0', position='Body'),
  pid2?: long(name='pid2', example='i-2zei55fwj8nnu31h3z46', position='Body'),
  table: string(name='table', description='This parameter is required.', example='prof_on', position='Body'),
}

model GetHotspotCompareResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: {
    flame?: {
      columns?: [ string ](name='columns'),
      values?: [[ string ]      ](name='values'),
    }(name='flame'),
    seriesInstance1?: {
      columns?: [ string ](name='columns'),
      values?: [[ string ]      ](name='values'),
    }(name='series_instance1'),
    seriesInstance2?: {
      columns?: [ string ](name='columns'),
      values?: [[ string ]      ](name='values'),
    }(name='series_instance2'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
  success?: boolean(name='success', example='true'),
}

model GetHotspotCompareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotCompareResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotCompare  GetHotspotCompareRequest
  * @return GetHotspotCompareResponse
 */
async function getHotspotCompare(request: GetHotspotCompareRequest): GetHotspotCompareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotspotCompare', 'POST', '/api/v1/openapi/proxy/post/livetrace_hotspot_compare', 'json', false, 'json', request);
}

model GetHotspotInstanceListRequest {
  begEnd: long(name='beg_end', description='This parameter is required.', example='1725413947000', position='Body'),
  begStart: long(name='beg_start', description='This parameter is required.', example='1725413647000', position='Body'),
  table: string(name='table', description='This parameter is required.', example='prof_on', position='Body'),
}

model GetHotspotInstanceListResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: {
    columns?: [ string ](name='columns'),
    values?: [ string ](name='values'),
  }(name='data'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetHotspotInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotInstanceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotInstanceList  GetHotspotInstanceListRequest
  * @return GetHotspotInstanceListResponse
 */
async function getHotspotInstanceList(request: GetHotspotInstanceListRequest): GetHotspotInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotspotInstanceList', 'POST', '/api/v1/openapi/proxy/post/livetrace_hotspot_instance_list', 'json', false, 'json', request);
}

model GetHotspotPidListRequest {
  begEnd: long(name='beg_end', description='This parameter is required.', example='1725413947000', position='Body'),
  begStart: long(name='beg_start', description='This parameter is required.', example='1725413647000', position='Body'),
  instance: string(name='instance', description='This parameter is required.', example='i-2ze5ru5rjurix7f71sxv', position='Body'),
  table: string(name='table', description='This parameter is required.', example='prof_on', position='Body'),
}

model GetHotspotPidListResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.InvalidParameter'),
  data?: {
    columns?: [ string ](name='columns'),
    values?: [[ string ]    ](name='values'),
  }(name='data'),
  message?: string(name='message', example='Success'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetHotspotPidListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotPidListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotPidList  GetHotspotPidListRequest
  * @return GetHotspotPidListResponse
 */
async function getHotspotPidList(request: GetHotspotPidListRequest): GetHotspotPidListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotspotPidList', 'POST', '/api/v1/openapi/proxy/post/livetrace_hotspot_pid_list', 'json', false, 'json', request);
}

model GetHotspotTrackingRequest {
  begEnd: long(name='beg_end', description='This parameter is required.', example='1725413948000', position='Body'),
  begStart: long(name='beg_start', description='This parameter is required.', example='1725410348000', position='Body'),
  hotType: string(name='hot_type', description='This parameter is required.', position='Body'),
  instance: string(name='instance', description='This parameter is required.', example='i-2ze5ru5rjurix7f71sxv', position='Body'),
  pid?: long(name='pid', example='1657494', position='Body'),
  table: string(name='table', description='This parameter is required.', example='prof_on', position='Body'),
}

model GetHotspotTrackingResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: {
    flame?: {
      columns?: [ string ](name='columns'),
      values?: [[ string ]      ](name='values'),
    }(name='flame'),
    series?: {
      columns?: [ string ](name='columns'),
      values?: [[ string ]      ](name='values'),
    }(name='series'),
  }(name='data'),
  message?: string(name='message', example='Success'),
  requestId?: string(name='requestId', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetHotspotTrackingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotspotTrackingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotspotTracking  GetHotspotTrackingRequest
  * @return GetHotspotTrackingResponse
 */
async function getHotspotTracking(request: GetHotspotTrackingRequest): GetHotspotTrackingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotspotTracking', 'POST', '/api/v1/openapi/proxy/post/livetrace_hotspot_tracking', 'json', false, 'json', request);
}

model GetInstantScoreRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
}

model GetInstantScoreResponseBody = {
  code?: string(name='code', description='集群ID', example='Success'),
  data?: {
    error?: float(name='error', example='100'),
    latency?: float(name='latency', example='100'),
    load?: float(name='load', example='100'),
    saturation?: float(name='saturation', example='100'),
    total?: float(name='total'),
  }(name='data'),
  message?: string(name='message', example='Query no data'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetInstantScoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstantScoreResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstantScore  GetInstantScoreRequest
  * @return GetInstantScoreResponse
 */
async function getInstantScore(request: GetInstantScoreRequest): GetInstantScoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstantScore', 'GET', '/api/v1/openapi/cluster_health/instant/score', 'json', false, 'json', request);
}

model GetListRecordRequest {
  current?: long(name='current', example='5', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  region?: string(name='region', position='Query'),
}

model GetListRecordResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      analysisId?: string(name='analysisId', example='16896fa8-37f6-4c70-bb32-67fa9817d426'),
      analysisTime?: string(name='analysisTime', example='2024-12-24 12:02:05'),
      arguments?: string(name='arguments', example='timeout=2000 ms'),
      failedLog?: string(name='failedLog'),
      status?: string(name='status'),
    }
  ](name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
  total?: long(name='total', example='19'),
}

model GetListRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetListRecord  GetListRecordRequest
  * @return GetListRecordResponse
 */
async function getListRecord(request: GetListRecordRequest): GetListRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetListRecord', 'GET', '/api/v1/app_observ/aiAnalysis/list_record', 'json', false, 'json', request);
}

model GetProblemPercentageRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end: float(name='end', description='This parameter is required.', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  start: float(name='start', description='This parameter is required.', example='1725797727754', position='Query'),
}

model GetProblemPercentageResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      type?: string(name='type', example='saturation'),
      value?: long(name='value', example='5'),
    }
  ](name='data'),
  message?: string(name='message', example='result: code=1 msg=(Request failed, status_code != 200)'),
  requestId?: string(name='request_id', example='35F91AAB-5FDF-5A22-B211-C7C6B00817D0'),
  total?: long(name='total', example='19'),
}

model GetProblemPercentageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProblemPercentageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProblemPercentage  GetProblemPercentageRequest
  * @return GetProblemPercentageResponse
 */
async function getProblemPercentage(request: GetProblemPercentageRequest): GetProblemPercentageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemPercentage', 'GET', '/api/v1/openapi/cluster_health/range/problem_percentage', 'json', false, 'json', request);
}

model GetRangeScoreRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end: float(name='end', description='This parameter is required.', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  start: float(name='start', description='This parameter is required.', example='1725797727754', position='Query'),
}

model GetRangeScoreResponseBody = {
  code?: string(name='code', description='代表资源一级ID的资源属性字段', example='Success'),
  data?: [ 
    {
      time?: long(name='time', example='1725797727754'),
      type?: string(name='type', example='saturation'),
      value?: long(name='value', example='100'),
    }
  ](name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='request_id', example='35F91AAB-5FDF-5A22-B211-C7C6B00817D0'),
  total?: float(name='total', example='2'),
}

model GetRangeScoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRangeScoreResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRangeScore  GetRangeScoreRequest
  * @return GetRangeScoreResponse
 */
async function getRangeScore(request: GetRangeScoreRequest): GetRangeScoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRangeScore', 'GET', '/api/v1/openapi/cluster_health/range/score', 'json', false, 'json', request);
}

model GetResourcesRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  type?: string(name='type', example='mem', position='Query'),
}

model GetResourcesResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    total?: float(name='total', example='2354'),
    unit?: string(name='unit', example='Kbytes'),
    usage?: float(name='usage', example='100'),
  }(name='data'),
  message?: string(name='message', example='result: code=1 msg=(Request failed, status_code != 200)'),
  requestId?: string(name='request_id', example='35F91AAB-5FDF-5A22-B211-C7C6B00817D0'),
}

model GetResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResources  GetResourcesRequest
  * @return GetResourcesResponse
 */
async function getResources(request: GetResourcesRequest): GetResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResources', 'GET', '/api/v1/openapi/cluster_health/instant/resource', 'json', false, 'json', request);
}

model GetServiceFuncStatusRequest {
  channel: string(name='channel', description='This parameter is required.', example='ecs', position='Query'),
  params: {
    functionName: string(name='function_name', description='This parameter is required.', example='mullprof'),
    instance?: string(name='instance', example='i-2zei55fwj8nnu31h3z46'),
    uid?: string(name='uid', example='1338904783509062'),
  }(name='params', description='This parameter is required.', shrink='json', position='Query'),
  serviceName: string(name='service_name', description='This parameter is required.', example='livetrace', position='Query'),
}

model GetServiceFuncStatusResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    args?: {
      addCmd?: string(name='add_cmd', example='java'),
      cpu?: string(name='cpu', example='true'),
      javaStorePath?: string(name='java_store_path', example='/tmp/sysom/java-profiler'),
      locks?: string(name='locks', example='true'),
      loop?: int32(name='loop', example='-1'),
      mem?: string(name='mem', example='true'),
      systemProfiling?: string(name='system_profiling', example='true'),
    }(name='args'),
  }(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GetServiceFuncStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceFuncStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceFuncStatus  GetServiceFuncStatusRequest
  * @return GetServiceFuncStatusResponse
 */
async function getServiceFuncStatus(request: GetServiceFuncStatusRequest): GetServiceFuncStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceFuncStatus', 'GET', '/api/v1/func-switch/get-service-func-status', 'json', false, 'json', request);
}

model InitialSysomRequest {
  checkOnly?: boolean(name='check_only', position='Body'),
  source?: string(name='source', position='Body'),
}

model InitialSysomResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: {
    roleExist?: boolean(name='role_exist'),
  }(name='data'),
  message?: string(name='message'),
}

model InitialSysomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitialSysomResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitialSysom  InitialSysomRequest
  * @return InitialSysomResponse
 */
async function initialSysom(request: InitialSysomRequest): InitialSysomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InitialSysom', 'POST', '/api/v1/openapi/initial', 'json', false, 'json', request);
}

model InstallAgentRequest {
  agentId: string(name='agent_id', description='This parameter is required.', position='Body'),
  agentVersion: string(name='agent_version', description='This parameter is required.', position='Body'),
  installType: string(name='install_type', description='This parameter is required.', example='InstallAndUpgrade', position='Body'),
  instances: [ 
    {
      instance: string(name='instance', description='This parameter is required.', example='i-wz9b9vucz1iubsz8sjqo'),
      region: string(name='region', description='This parameter is required.', example='cn-hangzhou'),
    }
  ](name='instances', description='This parameter is required.', position='Body'),
}

model InstallAgentResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id'),
  }(name='data'),
  message?: string(name='message', example='""'),
}

model InstallAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InstallAgent  InstallAgentRequest
  * @return InstallAgentResponse
 */
async function installAgent(request: InstallAgentRequest): InstallAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InstallAgent', 'POST', '/api/v1/am/agent/install_agent', 'json', false, 'json', request);
}

model InstallAgentForClusterRequest {
  agentId?: string(name='agent_id', example='74a86327-3170-412c-8e67-da3389ec56a9', position='Body'),
  agentVersion?: string(name='agent_version', example='3.4.0-1', position='Body'),
  clusterId?: string(name='cluster_id', example='c9d7f3fc3d42942afbcb65c1100ffb19d', position='Body'),
  configId?: string(name='config_id', position='Body'),
  grayscaleConfig?: string(name='grayscale_config', position='Body'),
}

model InstallAgentForClusterResponseBody = {
  requestId?: string(name='RequestId', example='B149FD9C-ED5C-5765-B3AD-05AA4A4D64D7'),
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: {
    taskId?: string(name='task_id', example='049ea0609515414b9e19c3389d7ba638'),
  }(name='data'),
  message?: string(name='message', example='success'),
}

model InstallAgentForClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAgentForClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InstallAgentForCluster  InstallAgentForClusterRequest
  * @return InstallAgentForClusterResponse
 */
async function installAgentForCluster(request: InstallAgentForClusterRequest): InstallAgentForClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InstallAgentForCluster', 'POST', '/api/v1/am/agent/install_agent_by_cluster', 'json', false, 'json', request);
}

model InvokeAnomalyDiagnosisRequest {
  uuid?: string(name='uuid', example='8047d763-5465-4a8c-b1cd-23f5a8ba2594', position='Query'),
}

model InvokeAnomalyDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model InvokeAnomalyDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeAnomalyDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InvokeAnomalyDiagnosis  InvokeAnomalyDiagnosisRequest
  * @return InvokeAnomalyDiagnosisResponse
 */
async function invokeAnomalyDiagnosis(request: InvokeAnomalyDiagnosisRequest): InvokeAnomalyDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokeAnomalyDiagnosis', 'POST', '/api/v1/openapi/cluster_health/diagnosis/invoke_anomaly_diagnose', 'json', false, 'json', request);
}

model InvokeDiagnosisRequest {
  channel: string(name='channel', description='This parameter is required.', example='cloud_assist', position='Body'),
  params: string(name='params', description='This parameter is required.', example='{
    "instance": "i-wz9gdv7qmdhusamc4dl01",
    "uid": "xxxxxxxxxxxxxx",
    "region": "cn-shenzhen"
}', position='Body'),
  serviceName: string(name='service_name', description='This parameter is required.', example='memgraph', position='Body'),
}

model InvokeDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id', example='ihqhAcrt'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='request_id'),
}

model InvokeDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InvokeDiagnosis  InvokeDiagnosisRequest
  * @return InvokeDiagnosisResponse
 */
async function invokeDiagnosis(request: InvokeDiagnosisRequest): InvokeDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokeDiagnosis', 'POST', '/api/v1/openapi/diagnosis/invoke_diagnosis', 'json', false, 'json', request);
}

model ListAbnormalyEventsRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  current?: int32(name='current', example='1', position='Query'),
  end?: float(name='end', example='1725801327754', position='Query'),
  event?: string(name='event', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  level?: string(name='level', example='potential', position='Query'),
  namespace?: string(name='namespace', example='default', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  pod?: string(name='pod', example='test-pod', position='Query'),
  showPod?: int32(name='showPod', example='1', position='Query'),
  start?: float(name='start', example='1725797727754', position='Query'),
}

model ListAbnormalyEventsResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      createdAt?: long(name='created_at', example='1725801090000'),
      description?: string(name='description'),
      diagStatus?: int32(name='diag_status'),
      endAt?: long(name='end_at'),
      instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j'),
      item?: string(name='item'),
      level?: string(name='level'),
      namespace?: string(name='namespace'),
      opts?: [ 
        {
          label?: string(name='label'),
          result?: {
            status?: string(name='status'),
            url?: string(name='url'),
          }(name='result'),
          type?: string(name='type'),
        }
      ](name='opts'),
      pod?: string(name='pod'),
      regionId?: string(name='region_id', example='cn-shanghai'),
      type?: string(name='type', example='saturation'),
      uuid?: string(name='uuid'),
    }
  ](name='data'),
  message?: string(name='message'),
  total?: int32(name='total'),
}

model ListAbnormalyEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAbnormalyEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAbnormalyEvents  ListAbnormalyEventsRequest
  * @return ListAbnormalyEventsResponse
 */
async function listAbnormalyEvents(request: ListAbnormalyEventsRequest): ListAbnormalyEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAbnormalyEvents', 'GET', '/api/v1/openapi/cluster_health/range/abnormaly_events', 'json', false, 'json', request);
}

model ListAgentInstallRecordsRequest {
  current?: long(name='current', position='Query'),
  instanceId?: string(name='instance_id', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  pluginId?: string(name='plugin_id', position='Query'),
  pluginVersion?: string(name='plugin_version', position='Query'),
  region?: string(name='region', position='Query'),
  status?: string(name='status', position='Query'),
}

model ListAgentInstallRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      createdAt?: string(name='created_at'),
      instanceId?: string(name='instance_id'),
      pluginId?: string(name='plugin_id'),
      pluginVersion?: string(name='plugin_version'),
      status?: string(name='status'),
      updatedAt?: string(name='updated_at'),
    }
  ](name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  total?: long(name='total', example='64'),
}

model ListAgentInstallRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentInstallRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAgentInstallRecords  ListAgentInstallRecordsRequest
  * @return ListAgentInstallRecordsResponse
 */
async function listAgentInstallRecords(request: ListAgentInstallRecordsRequest): ListAgentInstallRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgentInstallRecords', 'GET', '/api/v1/am/agent/list_agent_install_list', 'json', false, 'json', request);
}

model ListAgentsRequest {
  current?: long(name='current', position='Query'),
  name?: string(name='name', position='Query'),
  pageSize?: long(name='pageSize', position='Query'),
  type?: string(name='type', position='Query'),
}

model ListAgentsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      createdAt?: string(name='created_at'),
      description?: string(name='description'),
      id?: string(name='id'),
      name?: string(name='name', example='SysOM Agent'),
      supportArch?: string(name='support_arch', example='x86'),
      type?: string(name='type', example='Control'),
      updatedAt?: string(name='updated_at'),
      versions?: [ 
        {
          createdAt?: string(name='created_at'),
          installScript?: string(name='install_script'),
          uninstallScript?: string(name='uninstall_script'),
          updatedAt?: string(name='updated_at'),
          upgradeScript?: string(name='upgrade_script'),
          version?: string(name='version'),
        }
      ](name='versions'),
    }
  ](name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  total?: long(name='total'),
}

model ListAgentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAgents  ListAgentsRequest
  * @return ListAgentsResponse
 */
async function listAgents(request: ListAgentsRequest): ListAgentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgents', 'GET', '/api/v1/am/agent/list_agents', 'json', false, 'json', request);
}

model ListClusterAgentInstallRecordsRequest {
  agentConfigId?: string(name='agent_config_id', position='Query'),
  clusterId?: string(name='cluster_id', example='cbd80af02b9d6454ebdc579c5e022d0c8', position='Query'),
  current?: long(name='current', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  pluginId?: string(name='plugin_id', example='74a86327-3170-412c-8e67-da3389ec56a9', position='Query'),
  pluginVersion?: string(name='plugin_version', example='3.4.0-1', position='Query'),
}

model ListClusterAgentInstallRecordsResponseBody = {
  requestId?: string(name='RequestId', example='B149FD9C-ED5C-5765-B3AD-05AA4A4D64D7'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      agentConfigId?: string(name='agent_config_id'),
      agentConfigName?: string(name='agent_config_name'),
      clusterId?: string(name='cluster_id', example='cbf7a37bc905d4682a3338b3744810269'),
      createdAt?: string(name='created_at', example='2024-12-25T15:08:19'),
      grayscaleConfig?: string(name='grayscale_config'),
      pluginId?: string(name='plugin_id', example='74a86327-3170-412c-8e67-da3389ec56a9'),
      pluginVersion?: string(name='plugin_version', example='3.4.0-1'),
      updatedAt?: string(name='updated_at', example='2024-12-25T15:08:19'),
    }
  ](name='data'),
  message?: string(name='message', example='success'),
  total?: long(name='total', example='42'),
}

model ListClusterAgentInstallRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterAgentInstallRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusterAgentInstallRecords  ListClusterAgentInstallRecordsRequest
  * @return ListClusterAgentInstallRecordsResponse
 */
async function listClusterAgentInstallRecords(request: ListClusterAgentInstallRecordsRequest): ListClusterAgentInstallRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterAgentInstallRecords', 'GET', '/api/v1/am/agent/list_cluster_agent_install_list', 'json', false, 'json', request);
}

model ListClustersRequest {
  clusterId?: string(name='cluster_id', example='cb7d4cc26c8f845fb8a8255ffd394820e', position='Query'),
  clusterStatus?: string(name='cluster_status', example='Running', position='Query'),
  clusterType?: string(name='cluster_type', example='ACK', position='Query'),
  current?: long(name='current', example='1', position='Query'),
  id?: string(name='id', example='cb7d4cc26c8f845fb8a8255ffd394820e', position='Query'),
  name?: string(name='name', example='proxy-next-upstream', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListClustersResponseBody = {
  requestId?: string(name='RequestId', example='B149FD9C-ED5C-5765-B3AD-05AA4A4D64D7'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      clusterId?: string(name='cluster_id', example='c666d4774f0e2440b979bf917bf100e40'),
      clusterStatus?: string(name='cluster_status', example='Running'),
      clusterType?: string(name='cluster_type', example='ACK'),
      createdAt?: string(name='created_at', example='2024-12-25T15:08:19'),
      id?: string(name='id', example='5389fba5-92a1-4ff4-9b26-773b97828144'),
      name?: string(name='name', example='auto-name-sbvCT'),
      region?: string(name='region', example='cn-hangzhou'),
      updatedAt?: string(name='updated_at', example='2024-12-25T15:08:19'),
    }
  ](name='data'),
  message?: string(name='message', example='success'),
  total?: long(name='total', example='64'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusters  ListClustersRequest
  * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusters', 'GET', '/api/v1/am/cluster/list_clusters', 'json', false, 'json', request);
}

model ListDiagnosisRequest {
  current?: long(name='current', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  params?: string(name='params', position='Query'),
  serviceName?: string(name='service_name', position='Query'),
  status?: string(name='status', position='Query'),
}

model ListDiagnosisResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      code?: int32(name='code'),
      command?: any(name='command'),
      createdAt?: string(name='created_at'),
      errMsg?: string(name='err_msg'),
      params?: any(name='params'),
      result?: any(name='result'),
      serviceName?: string(name='service_name'),
      status?: string(name='status'),
      taskId?: string(name='task_id'),
      updatedAt?: string(name='updated_at'),
      url?: string(name='url'),
    }
  ](name='data'),
  message: string(name='message', description='This parameter is required.', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  total?: long(name='total'),
}

model ListDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDiagnosis  ListDiagnosisRequest
  * @return ListDiagnosisResponse
 */
async function listDiagnosis(request: ListDiagnosisRequest): ListDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDiagnosis', 'GET', '/api/v1/openapi/diagnosis/list_diagnosis', 'json', false, 'json', request);
}

model ListInstanceHealthRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  current?: int32(name='current', example='1', position='Query'),
  end: float(name='end', description='This parameter is required.', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  start: float(name='start', description='This parameter is required.', example='1725797727754', position='Query'),
}

model ListInstanceHealthResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: [ 
    {
      images?: [ string ](name='images'),
      instance?: string(name='instance'),
      namespace?: string(name='namespace'),
      pod?: string(name='pod'),
      regionId?: string(name='region_id'),
      score?: float(name='score'),
      status?: string(name='status'),
    }
  ](name='data'),
  message?: string(name='message', example='Query no data'),
  requestId?: string(name='request_id', example='35F91AAB-5FDF-5A22-B211-C7C6B00817D0'),
  total?: int32(name='total', example='42'),
}

model ListInstanceHealthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceHealthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceHealth  ListInstanceHealthRequest
  * @return ListInstanceHealthResponse
 */
async function listInstanceHealth(request: ListInstanceHealthRequest): ListInstanceHealthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceHealth', 'GET', '/api/v1/openapi/cluster_health/range/instance_health_list', 'json', false, 'json', request);
}

model ListInstanceStatusRequest {
  current?: long(name='current', example='1', position='Query'),
  instance?: string(name='instance', example='i-wz9b9vucz1iubsz355rh', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  region?: string(name='region', example='cn-shenzhen', position='Query'),
  status?: string(name='status', example='Running', position='Query'),
}

model ListInstanceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      instance?: string(name='instance'),
      region?: string(name='region'),
      status?: string(name='status', example='Running'),
    }
  ](name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  total?: long(name='total', example='218'),
}

model ListInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceStatus  ListInstanceStatusRequest
  * @return ListInstanceStatusResponse
 */
async function listInstanceStatus(request: ListInstanceStatusRequest): ListInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceStatus', 'GET', '/api/v1/am/instance/list_instance_status', 'json', false, 'json', request);
}

model ListInstancesRequest {
  clusterId?: string(name='cluster_id', example='xxxxx', position='Query'),
  current?: long(name='current', example='1', position='Query'),
  instance?: string(name='instance', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  region?: string(name='region', example='cn-shenzhen', position='Query'),
  status?: string(name='status', example='Running', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: [ 
    {
      clusterId?: string(name='cluster_id'),
      instance?: string(name='instance'),
      kernelVersion?: string(name='kernel_version'),
      meta?: any(name='meta'),
      osArch?: string(name='os_arch'),
      osHealthScore?: string(name='os_health_score'),
      osName?: string(name='os_name'),
      osNameId?: string(name='os_name_id'),
      osVersion?: string(name='os_version'),
      osVersionId?: string(name='os_version_id'),
      region?: string(name='region', example='cn-hangzhou'),
      status?: string(name='status', example='Running'),
    }
  ](name='data'),
  message?: string(name='message', example='Requests for llm service failed'),
  requestId?: string(name='request_id', example='9515E5A0-8905-59B0-9BBF-5F0BE568C3A0'),
  total?: long(name='total', example='623'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/api/v1/am/instance/list_instances', 'json', false, 'json', request);
}

model ListInstancesEcsInfoListRequest {
  infoType: string(name='info_type', description='This parameter is required.', example='ip', position='Query'),
  instanceId?: string(name='instance_id', example='i-bp118piqcio9tiwgh84b', position='Query'),
  managedType?: string(name='managed_type', example='managed', position='Query'),
  pluginId?: string(name='plugin_id', example='74a86327-3170-412c-8e67-da3389ec56a9', position='Query'),
  region: string(name='region', description='This parameter is required.', example='cn-shenzhen', position='Query'),
}

model ListInstancesEcsInfoListResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.InvalidParameter'),
  data?: [ 
    {
      ip?: string(name='ip', example='11.193.52.91'),
      tagKey?: string(name='tag_key', example='sysom'),
      tagValue?: string(name='tag_value', example='diagnosis'),
      type?: string(name='type', example='public'),
    }
  ](name='data'),
  message?: string(name='message', example='""'),
}

model ListInstancesEcsInfoListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesEcsInfoListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancesEcsInfoList  ListInstancesEcsInfoListRequest
  * @return ListInstancesEcsInfoListResponse
 */
async function listInstancesEcsInfoList(request: ListInstancesEcsInfoListRequest): ListInstancesEcsInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstancesEcsInfoList', 'GET', '/api/v1/am/instance/listInstancesEcsInfoList', 'json', false, 'json', request);
}

model ListInstancesWithEcsInfoRequest {
  current?: int32(name='current', example='1', position='Query'),
  healthStatus?: string(name='health_status', example='healthy', position='Query'),
  instanceId?: string(name='instance_id', example='i-bp118piqcio9tiwgh84b', position='Query'),
  instanceIdName?: string(name='instance_id_name', example='84b', position='Query'),
  instanceName?: string(name='instance_name', example='block-load-balancer-hjdm9', position='Query'),
  instanceTag?: {
    key?: string(name='key', example='feature_dim_radar_chart'),
    value?: string(name='value', example='test'),
  }(name='instance_tag', shrink='json', position='Query'),
  isManaged?: int32(name='is_managed', example='1', position='Query'),
  osName?: string(name='os_name', example='Alibaba Cloud Linux  3.2104 LTS 64bit', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  privateIp?: string(name='private_ip', example='1.1.1.1', position='Query'),
  publicIp?: string(name='public_ip', example='1.1.1.1', position='Query'),
  region: string(name='region', description='This parameter is required.', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='resource_group_id', example='rg-xxxxxxx', position='Query'),
  resourceGroupIdName?: string(name='resource_group_id_name', example='default', position='Query'),
  resourceGroupName?: string(name='resource_group_name', example='default resource group', position='Query'),
}

model ListInstancesWithEcsInfoResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      clusterId?: string(name='cluster_id', example='cbf7a37bc905d4682a3338b3744810269'),
      instanceId?: string(name='instance_id', example='i-bp118piqcio9tiwgh84b'),
      instanceName?: string(name='instance_name', example='allowed-repos-r2tzl'),
      instanceTag?: [ 
        {
          tagKey?: string(name='tag_key', example='test_tag_key'),
          tagValue?: string(name='tag_value', example='test_tag_value'),
        }
      ](name='instance_tag'),
      kernelVersion?: string(name='kernel_version'),
      osArch?: string(name='os_arch', example='x86'),
      osHealthScore?: string(name='os_health_score', example='100'),
      osName?: string(name='os_name', example='Alibaba Cloud Linux  3.2104 LTS 64bit'),
      privateIp?: string(name='private_ip', example='1.1.1.1'),
      publicIp?: string(name='public_ip', example='1.1.1.1'),
      resourceGroupId?: string(name='resource_group_id', example='rg-xxxxxx'),
      resourceGroupName?: string(name='resource_group_name', example='default resource group'),
      status?: string(name='status', example='Running'),
    }
  ](name='data'),
  message?: string(name='message', example='result: code=1 msg=(Request failed, status_code != 200)'),
  requestId?: string(name='request_id', example='35F91AAB-5FDF-5A22-B211-C7C6B00817D0'),
  total?: long(name='total', example='319'),
}

model ListInstancesWithEcsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesWithEcsInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancesWithEcsInfo  ListInstancesWithEcsInfoRequest
  * @return ListInstancesWithEcsInfoResponse
 */
async function listInstancesWithEcsInfo(request: ListInstancesWithEcsInfoRequest): ListInstancesWithEcsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstancesWithEcsInfo', 'GET', '/api/v1/am/instance/listInstancesWithEcsInfo', 'json', false, 'json', request);
}

model ListPluginsInstancesRequest {
  current?: long(name='current', example='5', position='Query'),
  instanceIdName?: string(name='instance_id_name', example='i-bpxx', position='Query'),
  instanceTag?: string(name='instance_tag', example='{"key":"app","value":"sysom-aliyun-com"}', position='Query'),
  operationType: string(name='operation_type', description='This parameter is required.', example='install', position='Query'),
  pageSize?: long(name='pageSize', example='20', position='Query'),
  pluginId: string(name='plugin_id', description='This parameter is required.', example='74a86327-3170-412c-8e67-da3389ec56a9', position='Query'),
  region: string(name='region', description='This parameter is required.', example='cn-shenzhen', position='Query'),
}

model ListPluginsInstancesResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      instanceId?: string(name='instance_id', example='i-bp118piqcio9tiwgh84b'),
      instanceName?: string(name='instance_name', example='allowed-repos-qmf8w'),
      instanceTag?: [ 
        {
          tagKey?: string(name='tag_key', example='test_tag_key'),
          tagValue?: string(name='tag_value', example='test_tag_value'),
        }
      ](name='instance_tag'),
      osName?: string(name='os_name', example='Alibaba Cloud Linux  3.2104 LTS 64 bit'),
      privateIp?: string(name='private_ip', example='1.1.1.1'),
      publicIp?: string(name='public_ip', example='1.1.1.1'),
      region?: string(name='region', example='cn-hangzhou'),
      resourceGroupId?: string(name='resource_group_id', example='rg-xxxx'),
      resourceGroupName?: string(name='resource_group_name', example='default resource group'),
    }
  ](name='data'),
  message?: string(name='message', example='SysomOpenAPIException: SysomOpenAPI.InvalidParameter Invalid params, should be json string or dict'),
  requestId?: string(name='request_id', example='35F91AAB-5FDF-5A22-B211-C7C6B00817D0'),
  total?: long(name='total', example='42'),
}

model ListPluginsInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPluginsInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPluginsInstances  ListPluginsInstancesRequest
  * @return ListPluginsInstancesResponse
 */
async function listPluginsInstances(request: ListPluginsInstancesRequest): ListPluginsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPluginsInstances', 'GET', '/api/v1/am/agent/listPluginsInstances', 'json', false, 'json', request);
}

model ListPodsOfInstanceRequest {
  clusterId?: string(name='cluster_id', example='c96e34d74eb6748f3b2a46552d5d653f6', position='Query'),
  current?: long(name='current', example='1', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListPodsOfInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='B149FD9C-ED5C-5765-B3AD-05AA4A4D64D7'),
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      namespace?: string(name='namespace', example='default'),
      pod?: string(name='pod', example='test-pod'),
    }
  ](name='data'),
  message: string(name='message', description='This parameter is required.', example='instance not exists'),
  total?: long(name='total', example='42'),
}

model ListPodsOfInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPodsOfInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPodsOfInstance  ListPodsOfInstanceRequest
  * @return ListPodsOfInstanceResponse
 */
async function listPodsOfInstance(request: ListPodsOfInstanceRequest): ListPodsOfInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPodsOfInstance', 'GET', '/api/v1/am/instance/list_pod_of_instance', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: [ string ](name='data', example='["cn-hangzhou", "cn-shengzhen"]'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegions', 'GET', '/api/v1/am/instance/list_regions', 'json', false, 'json', request);
}

model StartAIAnalysisRequest {
  analysisTool?: string(name='analysisTool', position='Body'),
  analysisParams?: [ string ](name='analysis_params', position='Body'),
  channel?: string(name='channel', example='ecs_sysom', position='Body'),
  comms?: string(name='comms', example='python_test', position='Body'),
  createdBy?: string(name='created_by', position='Body'),
  instance?: string(name='instance', example='i-wz9dej066kii4goqxxxx', position='Body'),
  instanceType?: string(name='instance_type', position='Body'),
  iterationFunc?: string(name='iteration_func', position='Body'),
  iterationMod?: string(name='iteration_mod', position='Body'),
  iterationRange?: [ int32 ](name='iteration_range', position='Body'),
  pids?: string(name='pids', example='2421,36547,10043', position='Body'),
  region?: string(name='region', example='cn-shenzhen', position='Body'),
  timeout?: int32(name='timeout', example='2000', position='Body'),
  uid?: string(name='uid', position='Body'),
}

model StartAIAnalysisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    analysisId?: string(name='analysis_id', example='16896fa8-37f6-4c70-bb32-67fa9817d426'),
  }(name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model StartAIAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAIAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartAIAnalysis  StartAIAnalysisRequest
  * @return StartAIAnalysisResponse
 */
async function startAIAnalysis(request: StartAIAnalysisRequest): StartAIAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartAIAnalysis', 'POST', '/api/v1/openapi/proxy/post/start_ai_analysis', 'json', false, 'json', request);
}

model StartAIDiffAnalysisRequest {
  task1: {
    analysisId?: string(name='analysisId', example='16896fa8-37f6-4c70-bb32-67fa9817d426'),
    pids?: [ string ](name='pids'),
    stepEnd?: float(name='step_end', example='4660551334179.955'),
    stepStart?: float(name='step_start', example='4660550379415.497'),
  }(name='task1', description='This parameter is required.', position='Body'),
  task2: {
    analysisId: string(name='analysisId', description='This parameter is required.', example='16896fa8-37f6-4c70-bb32-67fa9817d426'),
    pids: [ string ](name='pids', description='This parameter is required.', example='452651:python3 ./test.py'),
    stepEnd: float(name='step_end', description='This parameter is required.', example='4660551334179.955'),
    stepStart: float(name='step_start', description='This parameter is required.', example='4660550379415.497'),
  }(name='task2', description='This parameter is required.', position='Body'),
}

model StartAIDiffAnalysisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: string(name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model StartAIDiffAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAIDiffAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartAIDiffAnalysis  StartAIDiffAnalysisRequest
  * @return StartAIDiffAnalysisResponse
 */
async function startAIDiffAnalysis(request: StartAIDiffAnalysisRequest): StartAIDiffAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartAIDiffAnalysis', 'POST', '/api/v1/appObserv/aiAnalysis/diffAnalysis', 'json', false, 'json', request);
}

model UninstallAgentRequest {
  agentId: string(name='agent_id', description='This parameter is required.', position='Body'),
  agentVersion: string(name='agent_version', description='This parameter is required.', position='Body'),
  instances: [ 
    {
      instance: string(name='instance', description='This parameter is required.', example='i-wz9b9vucz1iubsz8sjqo'),
      region: string(name='region', description='This parameter is required.', example='cn-hangzhou'),
    }
  ](name='instances', description='This parameter is required.', position='Body'),
}

model UninstallAgentResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
}

model UninstallAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UninstallAgent  UninstallAgentRequest
  * @return UninstallAgentResponse
 */
async function uninstallAgent(request: UninstallAgentRequest): UninstallAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UninstallAgent', 'POST', '/api/v1/am/agent/uninstall_agent', 'json', false, 'json', request);
}

model UninstallAgentForClusterRequest {
  agentId?: string(name='agent_id', example='74a86327-3170-412c-8e67-da3389ec56a9', position='Body'),
  agentVersion?: string(name='agent_version', example='3.4.0-1', position='Body'),
  clusterId?: string(name='cluster_id', example='c822f83bb45994ddbac9326b4c2f04f35', position='Body'),
}

model UninstallAgentForClusterResponseBody = {
  requestId?: string(name='RequestId', example='44841312-7227-55C9-AE03-D59729BFAE38'),
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id', example='049ea0609515414b9e19c3389d7ba638'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIException: SysomOpenAPI.NotAuthorizedInstance Instance 21 is not authorized'),
}

model UninstallAgentForClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallAgentForClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UninstallAgentForCluster  UninstallAgentForClusterRequest
  * @return UninstallAgentForClusterResponse
 */
async function uninstallAgentForCluster(request: UninstallAgentForClusterRequest): UninstallAgentForClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UninstallAgentForCluster', 'POST', '/api/v1/am/agent/uninstall_agent_by_cluster', 'json', false, 'json', request);
}

model UpdateEventsAttentionRequest {
  mode?: int32(name='mode', position='Body'),
  range?: string(name='range', position='Body'),
  uuid: string(name='uuid', description='This parameter is required.', position='Body'),
}

model UpdateEventsAttentionResponseBody = {
  requestId?: string(name='RequestId', example='44841312-7227-55C9-AE03-D59729BFAE38'),
  code?: string(name='code', example='Success'),
  data?: {
    mode?: int32(name='mode', example='1'),
  }(name='data'),
  message?: string(name='message', example='Instance not belong to current user'),
}

model UpdateEventsAttentionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEventsAttentionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEventsAttention  UpdateEventsAttentionRequest
  * @return UpdateEventsAttentionResponse
 */
async function updateEventsAttention(request: UpdateEventsAttentionRequest): UpdateEventsAttentionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEventsAttention', 'POST', '/api/v1/openapi/proxy/post/cluster_update_events_attention', 'json', false, 'json', request);
}

model UpdateFuncSwitchRecordRequest {
  channel: string(name='channel', description='This parameter is required.', example='ecs', position='Query'),
  params: {
    args?: {
      addCmd?: string(name='add_cmd', example='java'),
      cpu?: string(name='cpu', example='true'),
      duration?: int32(name='duration'),
      javaStorePath?: string(name='java_store_path', example='/tmp/sysom/java-profiler'),
      locks?: string(name='locks', example='true'),
      loop?: int32(name='loop', example='-1'),
      mem?: string(name='mem', example='true'),
      pid?: int32(name='pid'),
      systemProfiling?: string(name='system_profiling', example='true'),
    }(name='args'),
    functionName: string(name='function_name', description='This parameter is required.', example='mullprof'),
    instance?: string(name='instance', example='i-2zei55fwj8nnu31h3z46'),
    op?: string(name='op', example='restart'),
    region?: string(name='region'),
    uid?: string(name='uid', example='1664516888213680'),
  }(name='params', description='This parameter is required.', shrink='json', position='Query'),
  serviceName: string(name='service_name', description='This parameter is required.', example='livetrace', position='Query'),
}

model UpdateFuncSwitchRecordResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id', example='63fc5acb99e642d793f42912612e8001'),
  }(name='data'),
  message?: string(name='message', example='result: code=1 msg=(Request failed, status_code != 200)'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model UpdateFuncSwitchRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFuncSwitchRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFuncSwitchRecord  UpdateFuncSwitchRecordRequest
  * @return UpdateFuncSwitchRecordResponse
 */
async function updateFuncSwitchRecord(request: UpdateFuncSwitchRecordRequest): UpdateFuncSwitchRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateFuncSwitchRecord', 'GET', '/api/v1/func-switch/update-service-func-switch', 'json', false, 'json', request);
}

model UpgradeAgentRequest {
  agentId: string(name='agent_id', description='This parameter is required.', position='Body'),
  agentVersion: string(name='agent_version', description='This parameter is required.', position='Body'),
  instances: [ 
    {
      instance: string(name='instance', description='This parameter is required.', example='i-wz9b9vucz1iubsz8sjqo'),
      region: string(name='region', description='This parameter is required.', example='cn-hangzhou'),
    }
  ](name='instances', description='This parameter is required.', position='Body'),
}

model UpgradeAgentResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIException: SysomOpenAPI.InvalidParameter Invalid params, should be json string or dict'),
}

model UpgradeAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAgentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeAgent  UpgradeAgentRequest
  * @return UpgradeAgentResponse
 */
async function upgradeAgent(request: UpgradeAgentRequest): UpgradeAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeAgent', 'POST', '/api/v1/am/agent/upgrade_agent', 'json', false, 'json', request);
}

model UpgradeAgentForClusterRequest {
  agentId?: string(name='agent_id', example='74a86327-3170-412c-8e67-da3389ec56a9', position='Body'),
  agentVersion?: string(name='agent_version', example='3.4.0-1', position='Body'),
  clusterId?: string(name='cluster_id', example='c1c187fd513cb41a19876bac0e6b05212', position='Body'),
}

model UpgradeAgentForClusterResponseBody = {
  requestId?: string(name='RequestId', example='B149FD9C-ED5C-5765-B3AD-05AA4A4D64D7'),
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id', example='7523e9e0ddc74d99a5236f4f4d5056e6'),
  }(name='data'),
  message?: string(name='message', example='success'),
}

model UpgradeAgentForClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAgentForClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeAgentForCluster  UpgradeAgentForClusterRequest
  * @return UpgradeAgentForClusterResponse
 */
async function upgradeAgentForCluster(request: UpgradeAgentForClusterRequest): UpgradeAgentForClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeAgentForCluster', 'POST', '/api/v1/am/agent/upgrade_agent_by_cluster', 'json', false, 'json', request);
}

