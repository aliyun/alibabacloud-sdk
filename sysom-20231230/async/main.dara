/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SysOM';
  @version = '2023-12-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AuthDiagnosisRequest {
  autoCreateRole?: boolean(name='autoCreateRole', position='Body'),
  autoInstallAgent?: boolean(name='autoInstallAgent', position='Body'),
  instances?: [ 
    {
      instance?: string(name='instance'),
      region?: string(name='region'),
    }
  ](name='instances', position='Body'),
}

model AuthDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: any(name='data', example='{}'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='request_id'),
}

model AuthDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthDiagnosis  AuthDiagnosisRequest
  * @return AuthDiagnosisResponse
 */
async function authDiagnosis(request: AuthDiagnosisRequest): AuthDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuthDiagnosis', 'POST', '/api/v1/openapi/diagnosis/auth', 'json', false, 'json', request);
}

model GenerateCopilotResponseRequest {
  llmParamString?: string(name='llmParamString', position='Body'),
}

model GenerateCopilotResponseResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: string(name='data'),
  massage?: string(name='massage', example='Requests for llm service failed'),
  requestId?: string(name='requestId', description='Id of the request', example='2D693121-C925-5154-8DF6-C09A8B369822'),
}

model GenerateCopilotResponseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateCopilotResponseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateCopilotResponse  GenerateCopilotResponseRequest
  * @return GenerateCopilotResponseResponse
 */
async function generateCopilotResponse(request: GenerateCopilotResponseRequest): GenerateCopilotResponseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateCopilotResponse', 'POST', '/api/v1/copilot/generate_copilot_response', 'json', false, 'json', request);
}

model GetAbnormalEventsCountRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end?: float(name='end', example='1725801327754', position='Query'),
  instance: string(name='instance', description='This parameter is required.', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  namespace?: string(name='namespace', example='default', position='Query'),
  pod?: string(name='pod', example='test-pod', position='Query'),
  showPod?: int32(name='showPod', position='Query'),
  start?: float(name='start', example='1725797727754', position='Query'),
}

model GetAbnormalEventsCountResponseBody = {
  code?: string(name='code', example='Success'),
  data?: [ 
    {
      type?: string(name='type', example='health'),
      value?: long(name='value', example='1'),
    }
  ](name='data'),
  message?: string(name='message', example='result: code=1 msg=(Request failed, status_code != 200)'),
}

model GetAbnormalEventsCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAbnormalEventsCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAbnormalEventsCount  GetAbnormalEventsCountRequest
  * @return GetAbnormalEventsCountResponse
 */
async function getAbnormalEventsCount(request: GetAbnormalEventsCountRequest): GetAbnormalEventsCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAbnormalEventsCount', 'GET', '/api/v1/openapi/cluster_health/range/abnormaly_events_count', 'json', false, 'json', request);
}

model GetDiagnosisResultRequest {
  taskId: string(name='task_id', description='This parameter is required.', example='quzuYl23', position='Query'),
}

model GetDiagnosisResultResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    code?: int32(name='code', example='0'),
    command?: any(name='command', example='{
    "jobs":[
        {
            "cmd":"mkdir -p /var/log/sysak && sysak podmem -r 100  -a -j /var/log/sysak/podmem.json > /dev/null 2>&1 && cat /var/log/sysak/podmem.json",
            "instance":"172.20.12.174",
            "fetch_file_list":[

            ]
        }
    ],
    "in_order":true,
    "offline_mode":false,
    "offline_results":[

    ]
}'),
    createdAt?: string(name='created_at'),
    errMsg?: string(name='err_msg', example='Diagnosis failed'),
    params?: any(name='params', example='{
    "type":"all",
    "value":"",
    "channel":"ssh",
    "instance":"172.1.2.174",
    "service_name":"filecache"
}'),
    result?: any(name='result', example='{
    "summary":"  memory cgroup leak",
    "dataMemEvent":{
        "data":[
            {
                "key":"Util",
                "value":20
            },
            {
                "key":"MemLeak",
                "value":"OK"
            },
            {
                "key":"MemcgLeak",
                "value":"NG"
            },
            {
                "key":"MemFrag",
                "value":"OK"
            }
        ]
    },
    "dataMemOverView":{
        "data":[
            {
                "key":"app",
                "value":10937332
            },
            {
                "key":"free",
                "value":806800
            },
            {
                "key":"kernel",
                "value":4527660
            }
        ]
    },
    "dataKerMem":{
        "data":[
            {
                "key":"SReclaimable",
                "value":3411292
            },
            {
                "key":"VmallocUsed",
                "value":30980
            },
            {
                "key":"allocPage",
                "value":177732
            },
            {
                "key":"KernelStack",
                "value":9280
            },
            {
                "key":"PageTables",
                "value":38056
            },
            {
                "key":"SUnreclaim",
                "value":170248
            },
            {
                "key":"reserved",
                "value":690072
            }
        ]
    },
    "dataUserMem":{
        "data":[
            {
                "key":"filecache",
                "value":8010008
            },
            {
                "key":"anon",
                "value":2468608
            },
            {
                "key":"mlock",
                "value":0
            },
            {
                "key":"huge1G",
                "value":0
            },
            {
                "key":"huge2M",
                "value":0
            },
            {
                "key":"buffers",
                "value":458608
            },
            {
                "key":"shmem",
                "value":2284
            }
        ]
    },
    "dataCacheList":{
        "data":[
            {
                "key":0,
                "Name":"/var/lib/mysql/sysom/sys_handler_log.ibd",
                "cached":576764,
                "Task":"mysqld_78575 "
            },
            {
                "key":1,
                "Name":"/var/log/sysom/sysom-migration-access.log",
                "cached":276688,
                "Task":"gunicorn_33647 ,gunicorn_460836 ,gunicorn_559934 ,gunicorn_731758 ,gunicorn_2362682 "
            },
            {
                "key":2,
                "Name":"/var/log/sysom/sysom-rtdemo-access.log",
                "cached":229404,
                "Task":"gunicorn_60718 ,gunicorn_720734 ,gunicorn_722168 "
            },
            {
                "key":3,
                "Name":"/var/log/sysom/sysom-monitor-server-access.log",
                "cached":197368,
                "Task":"gunicorn_33682 ,gunicorn_671155 ,gunicorn_714998 "
            },
            {
                "key":4,
                "Name":"/var/log/sysom/sysom-channel-access.log",
                "cached":180276,
                "Task":"gunicorn_33233 ,gunicorn_499735 ,gunicorn_725497 "
            },
            {
                "key":5,
                "Name":"total cached of close file",
                "cached":3729668,
                "Task":""
            }
        ]
    },
    "dataProcMemList":{
        "data":[
            {
                "key":0,
                "task":"mysqld",
                "MemTotal":240856,
                "RssAnon":218248,
                "RssFile":22608
            },
            {
                "key":1,
                "task":"systemd-journal",
                "MemTotal":150248,
                "RssAnon":74300,
                "RssFile":75944
            },
            {
                "key":2,
                "task":"gunicorn",
                "MemTotal":144640,
                "RssAnon":114200,
                "RssFile":30440
            },
            {
                "key":3,
                "task":"gunicorn",
                "MemTotal":141480,
                "RssAnon":111040,
                "RssFile":30440
            },
            {
                "key":4,
                "task":"grafana-server",
                "MemTotal":103660,
                "RssAnon":42732,
                "RssFile":60928
            },
            {
                "key":5,
                "task":"gunicorn",
                "MemTotal":97444,
                "RssAnon":76256,
                "RssFile":21188
            },
            {
                "key":6,
                "task":"gunicorn",
                "MemTotal":97260,
                "RssAnon":76072,
                "RssFile":21188
            },
            {
                "key":7,
                "task":"prometheus",
                "MemTotal":95356,
                "RssAnon":45376,
                "RssFile":49980
            },
            {
                "key":8,
                "task":"gunicorn",
                "MemTotal":90144,
                "RssAnon":76456,
                "RssFile":13688
            },
            {
                "key":9,
                "task":"gunicorn",
                "MemTotal":89796,
                "RssAnon":76108,
                "RssFile":13688
            }
        ]
    }
}'),
    serviceName?: string(name='service_name', example='memgraph'),
    status?: string(name='status', example='Running'),
    taskId?: string(name='task_id', example='grcuU21a'),
    updatedAt?: string(name='updated_at'),
    url?: string(name='url', example='/diagnose/detail/qe3Z34sa'),
  }(name='data'),
  message?: string(name='message', example='""'),
  requestId?: string(name='request_id', example='9515E5A0-8905-59B0-9BBF-5F0BE568C3A0'),
}

model GetDiagnosisResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDiagnosisResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDiagnosisResult  GetDiagnosisResultRequest
  * @return GetDiagnosisResultResponse
 */
async function getDiagnosisResult(request: GetDiagnosisResultRequest): GetDiagnosisResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDiagnosisResult', 'GET', '/api/v1/openapi/diagnosis/get_diagnosis_results', 'json', false, 'json', request);
}

model GetHealthPercentageRequest {
  cluster?: string(name='cluster', example='1808078950770264', position='Query'),
  end: float(name='end', description='This parameter is required.', example='1725801327754', position='Query'),
  instance?: string(name='instance', example='i-wz9d00ut2ska3mlyhn6j', position='Query'),
  start: float(name='start', description='This parameter is required.', example='1725797727754', position='Query'),
}

model GetHealthPercentageResponseBody = {
  code?: string(name='code', example='SysomOpenAPI.ServerError'),
  data?: [ 
    {
      type?: string(name='type', example='health'),
      value?: long(name='value', example='1'),
    }
  ](name='data'),
  message?: string(name='message', example='""'),
}

model GetHealthPercentageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHealthPercentageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHealthPercentage  GetHealthPercentageRequest
  * @return GetHealthPercentageResponse
 */
async function getHealthPercentage(request: GetHealthPercentageRequest): GetHealthPercentageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHealthPercentage', 'GET', '/api/v1/openapi/cluster_health/range/health_percentage', 'json', false, 'json', request);
}

model InvokeDiagnosisRequest {
  channel: string(name='channel', description='This parameter is required.', example='cloud_assist', position='Body'),
  params: string(name='params', description='This parameter is required.', example='{
    "instance": "i-wz9gdv7qmdhusamc4dl01",
    "uid": "xxxxxxxxxxxxxx",
    "region": "cn-shenzhen"
}', position='Body'),
  serviceName: string(name='service_name', description='This parameter is required.', example='memgraph', position='Body'),
}

model InvokeDiagnosisResponseBody = {
  code?: string(name='code', example='Success'),
  data?: {
    taskId?: string(name='task_id', example='ihqhAcrt'),
  }(name='data'),
  message?: string(name='message', example='SysomOpenAPIAssumeRoleException: EntityNotExist.Role The role not exists: acs:ram::xxxxx:role/aliyunserviceroleforsysom'),
  requestId?: string(name='request_id'),
}

model InvokeDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InvokeDiagnosis  InvokeDiagnosisRequest
  * @return InvokeDiagnosisResponse
 */
async function invokeDiagnosis(request: InvokeDiagnosisRequest): InvokeDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokeDiagnosis', 'POST', '/api/v1/openapi/diagnosis/invoke_diagnosis', 'json', false, 'json', request);
}

