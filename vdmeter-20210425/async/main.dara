/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'vdmeter';
  @version = '2021-04-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeHuYaRecordByDomainRequest {
  businessType?: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeHuYaRecordByDomainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultDesc?: [ 
    {
      businessType?: string(name='BusinessType'),
      domain?: string(name='Domain'),
      recordDuration?: long(name='RecordDuration'),
      recordNum?: long(name='RecordNum'),
      recordType?: string(name='RecordType'),
      time?: string(name='Time'),
    }
  ](name='ResultDesc'),
  status?: int32(name='Status'),
}

model DescribeHuYaRecordByDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHuYaRecordByDomainResponseBody(name='body'),
}

async function describeHuYaRecordByDomain(request: DescribeHuYaRecordByDomainRequest): DescribeHuYaRecordByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHuYaRecordByDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHuYaScreenshotByDomainRequest {
  businessType?: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeHuYaScreenshotByDomainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultDesc?: [ 
    {
      businessType?: string(name='BusinessType'),
      domain?: string(name='Domain'),
      screenshotNum?: long(name='ScreenshotNum'),
      time?: string(name='Time'),
    }
  ](name='ResultDesc'),
  status?: int32(name='Status'),
}

model DescribeHuYaScreenshotByDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHuYaScreenshotByDomainResponseBody(name='body'),
}

async function describeHuYaScreenshotByDomain(request: DescribeHuYaScreenshotByDomainRequest): DescribeHuYaScreenshotByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHuYaScreenshotByDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHuYaTranscodeByDomainRequest {
  businessType?: string(name='BusinessType', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeHuYaTranscodeByDomainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultDesc?: [ 
    {
      businessType?: string(name='BusinessType'),
      domain?: string(name='Domain'),
      time?: string(name='Time'),
      transcodeDuration?: long(name='TranscodeDuration'),
      transcodeNum?: long(name='TranscodeNum'),
      transcodeType?: string(name='TranscodeType'),
    }
  ](name='ResultDesc'),
  status?: int32(name='Status'),
}

model DescribeHuYaTranscodeByDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHuYaTranscodeByDomainResponseBody(name='body'),
}

async function describeHuYaTranscodeByDomain(request: DescribeHuYaTranscodeByDomainRequest): DescribeHuYaTranscodeByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHuYaTranscodeByDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterBypassRtUsageByTaskProfileRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterBypassRtUsageByTaskProfileResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration'),
      ratio?: string(name='Ratio'),
      serviceArea?: string(name='ServiceArea'),
      taskProfile?: string(name='TaskProfile'),
      timestamp?: long(name='Timestamp'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterBypassRtUsageByTaskProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterBypassRtUsageByTaskProfileResponseBody(name='body'),
}

async function describeMeterBypassRtUsageByTaskProfile(request: DescribeMeterBypassRtUsageByTaskProfileRequest): DescribeMeterBypassRtUsageByTaskProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterBypassRtUsageByTaskProfile', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterMpuTranscodeRtUsageByTaskProfileRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterMpuTranscodeRtUsageByTaskProfileResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration'),
      serviceArea?: string(name='ServiceArea'),
      taskProfile?: string(name='TaskProfile'),
      timeStamp?: long(name='TimeStamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterMpuTranscodeRtUsageByTaskProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterMpuTranscodeRtUsageByTaskProfileResponseBody(name='body'),
}

async function describeMeterMpuTranscodeRtUsageByTaskProfile(request: DescribeMeterMpuTranscodeRtUsageByTaskProfileRequest): DescribeMeterMpuTranscodeRtUsageByTaskProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterMpuTranscodeRtUsageByTaskProfile', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRecordRtUsageByTaskProfileRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRecordRtUsageByTaskProfileResponseBody = {
  data?: [ 
    {
      duration?: long(name='Duration'),
      ratio?: string(name='Ratio'),
      serviceArea?: string(name='ServiceArea'),
      taskProfile?: string(name='TaskProfile'),
      timestamp?: long(name='Timestamp'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRecordRtUsageByTaskProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRecordRtUsageByTaskProfileResponseBody(name='body'),
}

async function describeMeterRecordRtUsageByTaskProfile(request: DescribeMeterRecordRtUsageByTaskProfileRequest): DescribeMeterRecordRtUsageByTaskProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRecordRtUsageByTaskProfile', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcApproxPeakRateRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcApproxPeakRateResponseBody = {
  approxPeakRate?: float(name='ApproxPeakRate'),
  approxPeakTs?: long(name='ApproxPeakTs'),
  peakRateVoList?: [ 
    {
      peakRate?: float(name='PeakRate'),
      peakTs?: long(name='PeakTs'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='PeakRateVoList'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcApproxPeakRateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcApproxPeakRateResponseBody(name='body'),
}

async function describeMeterRtcApproxPeakRate(request: DescribeMeterRtcApproxPeakRateRequest): DescribeMeterRtcApproxPeakRateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcApproxPeakRate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcChannelCntDataRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcChannelCntDataResponseBody = {
  data?: [ 
    {
      channelCnt?: long(name='ChannelCnt'),
      timestamp?: string(name='Timestamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcChannelCntDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcChannelCntDataResponseBody(name='body'),
}

async function describeMeterRtcChannelCntData(request: DescribeMeterRtcChannelCntDataRequest): DescribeMeterRtcChannelCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcChannelCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcDurationRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcDurationResponseBody = {
  data?: [ 
    {
      audioDuration?: long(name='AudioDuration'),
      contentDuration?: long(name='ContentDuration'),
      timestamp?: long(name='Timestamp'),
      totalDuration?: long(name='TotalDuration'),
      v1080Duration?: long(name='V1080Duration'),
      v480Duration?: long(name='V480Duration'),
      v720Duration?: long(name='V720Duration'),
    }
  ](name='Data'),
  readyTs?: long(name='ReadyTs'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcDurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcDurationResponseBody(name='body'),
}

async function describeMeterRtcDuration(request: DescribeMeterRtcDurationRequest): DescribeMeterRtcDurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcDuration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcPeakChannelCntDataRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcPeakChannelCntDataResponseBody = {
  data?: [ 
    {
      activeChannelPeak?: long(name='ActiveChannelPeak'),
      activeChannelPeakTime?: long(name='ActiveChannelPeakTime'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcPeakChannelCntDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcPeakChannelCntDataResponseBody(name='body'),
}

async function describeMeterRtcPeakChannelCntData(request: DescribeMeterRtcPeakChannelCntDataRequest): DescribeMeterRtcPeakChannelCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcPeakChannelCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcPeakUserCntDataRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcPeakUserCntDataResponseBody = {
  data?: [ 
    {
      activeUserPeak?: long(name='ActiveUserPeak'),
      activeUserPeakTime?: long(name='ActiveUserPeakTime'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcPeakUserCntDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcPeakUserCntDataResponseBody(name='body'),
}

async function describeMeterRtcPeakUserCntData(request: DescribeMeterRtcPeakUserCntDataRequest): DescribeMeterRtcPeakUserCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcPeakUserCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcRtBandWidthUsageRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcRtBandWidthUsageResponseBody = {
  data?: [ 
    {
      anchorPeakRate?: float(name='AnchorPeakRate'),
      anchorPeakTs?: long(name='AnchorPeakTs'),
      audiencePeakRate?: float(name='AudiencePeakRate'),
      audiencePeakTs?: long(name='AudiencePeakTs'),
      peakRate?: float(name='PeakRate'),
      peakTs?: long(name='PeakTs'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcRtBandWidthUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcRtBandWidthUsageResponseBody(name='body'),
}

async function describeMeterRtcRtBandWidthUsage(request: DescribeMeterRtcRtBandWidthUsageRequest): DescribeMeterRtcRtBandWidthUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcRtBandWidthUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcRtFlowUsageRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcRtFlowUsageResponseBody = {
  data?: [ 
    {
      anchorFlowValue?: float(name='AnchorFlowValue'),
      audienceFlowValue?: float(name='AudienceFlowValue'),
      flowValue?: float(name='FlowValue'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcRtFlowUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcRtFlowUsageResponseBody(name='body'),
}

async function describeMeterRtcRtFlowUsage(request: DescribeMeterRtcRtFlowUsageRequest): DescribeMeterRtcRtFlowUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcRtFlowUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMeterRtcUserCntDataRequest {
  appId?: string(name='AppId', position='Query'),
  endTs?: long(name='EndTs', position='Query'),
  interval?: long(name='Interval', position='Query'),
  serviceArea?: string(name='ServiceArea', position='Query'),
  startTs?: long(name='StartTs', position='Query'),
}

model DescribeMeterRtcUserCntDataResponseBody = {
  data?: [ 
    {
      activeUserCnt?: long(name='ActiveUserCnt'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeMeterRtcUserCntDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeterRtcUserCntDataResponseBody(name='body'),
}

async function describeMeterRtcUserCntData(request: DescribeMeterRtcUserCntDataRequest): DescribeMeterRtcUserCntDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeterRtcUserCntData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNewPlayVideoPlaySessionEventDetailRequest {
  bizDate?: long(name='BizDate', position='Query'),
  inputStatus?: string(name='InputStatus', position='Query'),
  pageNum: int32(name='PageNum', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  VPS: string(name='VPS', position='Query'),
}

model DescribeNewPlayVideoPlaySessionEventDetailResponseBody = {
  data?: [ 
    {
      bizTime?: string(name='BizTime'),
      cost?: string(name='Cost'),
      details?: string(name='Details'),
      eventName?: string(name='EventName'),
      ip?: string(name='IP'),
      ISP?: string(name='ISP'),
      isNormal?: int32(name='IsNormal'),
      networkType?: string(name='NetworkType'),
      region?: string(name='Region'),
      subject?: string(name='Subject'),
    }
  ](name='Data'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  readyTs?: long(name='ReadyTs'),
  requestId?: string(name='RequestId'),
  totalNum?: long(name='TotalNum'),
}

model DescribeNewPlayVideoPlaySessionEventDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNewPlayVideoPlaySessionEventDetailResponseBody(name='body'),
}

async function describeNewPlayVideoPlaySessionEventDetail(request: DescribeNewPlayVideoPlaySessionEventDetailRequest): DescribeNewPlayVideoPlaySessionEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNewPlayVideoPlaySessionEventDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNewPlayVideoPlaySessionListRequest {
  endTimeStamp: string(name='EndTimeStamp', position='Query'),
  inputStatus?: string(name='InputStatus', position='Query'),
  order: string(name='Order', position='Query'),
  pageNum: int32(name='PageNum', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  startTimeStamp: string(name='StartTimeStamp', position='Query'),
  uniqueId?: string(name='UniqueId', position='Query'),
}

model DescribeNewPlayVideoPlaySessionListResponseBody = {
  data?: [ 
    {
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      status?: string(name='Status'),
      traceId?: string(name='TraceId'),
      UUID?: string(name='UUID'),
      VPS?: string(name='VPS'),
    }
  ](name='Data'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  readyTs?: long(name='ReadyTs'),
  requestId?: string(name='RequestId'),
  totalNum?: long(name='TotalNum'),
}

model DescribeNewPlayVideoPlaySessionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNewPlayVideoPlaySessionListResponseBody(name='body'),
}

async function describeNewPlayVideoPlaySessionList(request: DescribeNewPlayVideoPlaySessionListRequest): DescribeNewPlayVideoPlaySessionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNewPlayVideoPlaySessionList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNewPlayVideoPlaySessioninfoRequest {
  VPS?: string(name='VPS', position='Query'),
}

model DescribeNewPlayVideoPlaySessioninfoResponseBody = {
  data?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      appVersion?: string(name='AppVersion'),
      deviceBrand?: string(name='DeviceBrand'),
      deviceModel?: string(name='DeviceModel'),
      os?: string(name='OS'),
      ov?: string(name='OV'),
      terminalType?: string(name='TerminalType'),
      VPS?: string(name='VPS'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeNewPlayVideoPlaySessioninfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNewPlayVideoPlaySessioninfoResponseBody(name='body'),
}

async function describeNewPlayVideoPlaySessioninfo(request: DescribeNewPlayVideoPlaySessioninfoRequest): DescribeNewPlayVideoPlaySessioninfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNewPlayVideoPlaySessioninfo', 'POST', '/', 'json', false, 'json', request);
}

