/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('esa', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model WafBatchRuleShared {
  action?: string(name='Action'),
  actions?: {
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  crossSiteId?: long(name='CrossSiteId'),
  expression?: string(name='Expression'),
  match?: WafRuleMatch2(name='Match'),
  mode?: string(name='Mode'),
  name?: string(name='Name'),
  target?: string(name='Target'),
}

model WafQuotaInteger {
  equal?: int32(name='Equal'),
  greaterThan?: int32(name='GreaterThan'),
  greaterThanOrEqual?: int32(name='GreaterThanOrEqual'),
  lessThan?: int32(name='LessThan'),
  lessThanOrEqual?: int32(name='LessThanOrEqual'),
}

model WafQuotaString {
  regexp?: string(name='Regexp'),
}

model WafRuleConfig {
  action?: string(name='Action'),
  actions?: {
    bypass?: {
      customRules?: [ long ](name='CustomRules'),
      regularRules?: [ long ](name='RegularRules'),
      regularTypes?: [ string ](name='RegularTypes'),
      skip?: string(name='Skip'),
      tags?: [ string ](name='Tags'),
    }(name='Bypass'),
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  appPackage?: {
    packageSigns?: [ 
      {
        name?: string(name='Name'),
        sign?: string(name='Sign'),
      }
    ](name='PackageSigns'),
  }(name='AppPackage'),
  appSdk?: {
    customSign?: {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }(name='CustomSign'),
    customSignStatus?: string(name='CustomSignStatus'),
    featureAbnormal?: [ string ](name='FeatureAbnormal'),
  }(name='AppSdk'),
  expression?: string(name='Expression'),
  id?: long(name='Id'),
  managedGroupId?: long(name='ManagedGroupId'),
  managedList?: string(name='ManagedList'),
  managedRulesets?: [ 
    {
      action?: string(name='Action'),
      attackType?: int32(name='AttackType'),
      managedRules?: [ 
        {
          action?: string(name='Action'),
          id?: long(name='Id'),
          status?: string(name='Status'),
        }
      ](name='ManagedRules'),
      numberEnabled?: int32(name='NumberEnabled'),
      numberTotal?: int32(name='NumberTotal'),
      protectionLevel?: int32(name='ProtectionLevel'),
    }
  ](name='ManagedRulesets'),
  name?: string(name='Name'),
  notes?: string(name='Notes'),
  rateLimit?: {
    characteristics?: WafRuleMatch2(name='Characteristics'),
    interval?: int32(name='Interval'),
    onHit?: boolean(name='OnHit'),
    TTL?: int32(name='TTL'),
    threshold?: {
      distinctManagedRules?: int32(name='DistinctManagedRules'),
      managedRulesBlocked?: int32(name='ManagedRulesBlocked'),
      request?: int32(name='Request'),
      responseStatus?: {
        code?: int32(name='Code'),
        count?: int32(name='Count'),
        ratio?: int32(name='Ratio'),
      }(name='ResponseStatus'),
      traffic?: string(name='Traffic'),
    }(name='Threshold'),
  }(name='RateLimit'),
  securityLevel?: {
    value?: string(name='Value'),
  }(name='SecurityLevel'),
  sigchl?: [ string ](name='Sigchl'),
  status?: string(name='Status'),
  timer?: WafTimer(name='Timer'),
  type?: string(name='Type'),
  value?: string(name='Value'),
}

model WafRuleMatch {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [
    WafRuleMatch
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafRuleMatch2 {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [ 
    {
      convertToLower?: boolean(name='ConvertToLower'),
      criteria?: [ 
        {
          convertToLower?: boolean(name='ConvertToLower'),
          criteria?: [ 
            {
              convertToLower?: boolean(name='ConvertToLower'),
              matchOperator?: string(name='MatchOperator'),
              matchType?: string(name='MatchType'),
              matchValue?: any(name='MatchValue'),
              negate?: boolean(name='Negate'),
            }
          ](name='Criteria'),
          logic?: string(name='Logic'),
          matchOperator?: string(name='MatchOperator'),
          matchType?: string(name='MatchType'),
          matchValue?: any(name='MatchValue'),
          negate?: boolean(name='Negate'),
        }
      ](name='Criteria'),
      logic?: string(name='Logic'),
      matchOperator?: string(name='MatchOperator'),
      matchType?: string(name='MatchType'),
      matchValue?: any(name='MatchValue'),
      negate?: boolean(name='Negate'),
    }
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafSiteSettings {
  addBotProtectionHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddBotProtectionHeaders'),
  addSecurityHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddSecurityHeaders'),
  bandwidthAbuseProtection?: {
    action?: string(name='Action'),
    id?: long(name='Id'),
    status?: string(name='Status'),
  }(name='BandwidthAbuseProtection'),
  botManagement?: {
    definiteBots?: {
      action?: string(name='Action'),
      id?: long(name='Id'),
    }(name='DefiniteBots'),
    effectOnStatic?: {
      enable?: boolean(name='Enable'),
    }(name='EffectOnStatic'),
    JSDetection?: {
      enable?: boolean(name='Enable'),
    }(name='JSDetection'),
    likelyBots?: {
      action?: string(name='Action'),
      id?: long(name='Id'),
    }(name='LikelyBots'),
    verifiedBots?: {
      action?: string(name='Action'),
      id?: long(name='Id'),
    }(name='VerifiedBots'),
  }(name='BotManagement'),
  clientIpIdentifier?: {
    headers?: [ string ](name='Headers'),
    mode?: string(name='Mode'),
  }(name='ClientIpIdentifier'),
  disableSecurityModule?: {
    status?: string(name='Status'),
  }(name='DisableSecurityModule'),
  securityLevel?: {
    value?: string(name='Value'),
  }(name='SecurityLevel'),
}

model WafTimer {
  periods?: [ 
    {
      end?: string(name='End'),
      start?: string(name='Start'),
    }
  ](name='Periods'),
  scopes?: string(name='Scopes'),
  weeklyPeriods?: [ 
    {
      dailyPeriods?: [ 
        {
          end?: string(name='End'),
          start?: string(name='Start'),
        }
      ](name='DailyPeriods'),
      days?: string(name='Days'),
    }
  ](name='WeeklyPeriods'),
  zone?: int32(name='Zone'),
}

model HttpDeliveryHeaderParamValue = {
  staticValue?: string(name='StaticValue', description='The static variable.', example='alicdn'),
}

model HttpDeliveryQueryParamValue = {
  staticValue?: string(name='StaticValue', description='The static variable.', example='alicdn'),
}

model FieldContentValue = {
  sortOrder?: long(name='SortOrder', description='The sequence number of the fields.', example='1'),
  fieldList?: [ 
    {
      fieldName?: string(name='FieldName', description='The field name.', example='ClientIp'),
      description?: string(name='Description', description='The description of the field in English.', example='IP address of the client.'),
      descriptionCn?: string(name='DescriptionCn', description='The description of the field in Chinese.'),
      category?: string(name='Category', description='The category of the field.', example='Client'),
      dataType?: string(name='DataType', description='The data type of the field.', example='String'),
      sortOrder?: long(name='SortOrder', description='The sequence number of the field.', example='1'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the field is available by default.', example='true'),
    }
  ](name='FieldList', description='The fields.'),
}

model QuotaListItemsValue = {
  enable?: boolean(name='Enable', description='The switch for the type of item in the custom list.'),
  value?: WafQuotaString(name='Value', description='Format restrictions for the type of item in the custom list.'),
}

model QuotaPageContentTypesValue = {
  enable?: boolean(name='Enable', description='The switch for the Content-Type type in custom response pages.'),
  contentLength?: WafQuotaInteger(name='ContentLength', description='The content length quota for the Content-Type in custom response pages.'),
}

model ActivateClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID, which can be obtained by calling the [ListClientCertificates](https://help.aliyun.com/document_detail/2852848.html) operation.

This parameter is required.', example='babaded901474b9693acf530e0fb****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model ActivateClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaded901474b9693acf530e0fb****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model ActivateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateClientCertificateResponseBody(name='body'),
}

/**
 * @summary Activates the client based on the certificate ID.
 *
 * @param request ActivateClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActivateClientCertificateResponse
 */
@context("activateClientCertificateWithContext")
async function activateClientCertificateWithOptions(request: ActivateClientCertificateRequest, runtime: $RuntimeOptions): ActivateClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ActivateClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Activates the client based on the certificate ID.
 *
 * @param request ActivateClientCertificateRequest
 * @return ActivateClientCertificateResponse
 */
async function activateClientCertificate(request: ActivateClientCertificateRequest): ActivateClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return activateClientCertificateWithOptions(request, runtime);
}

model ActivateVersionManagementRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='11223***'),
}

model ActivateVersionManagementResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D2***'),
}

model ActivateVersionManagementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateVersionManagementResponseBody(name='body'),
}

/**
 * @summary Enable Version Management
 *
 * @param request ActivateVersionManagementRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActivateVersionManagementResponse
 */
@context("activateVersionManagementWithContext")
async function activateVersionManagementWithOptions(request: ActivateVersionManagementRequest, runtime: $RuntimeOptions): ActivateVersionManagementResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ActivateVersionManagement',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enable Version Management
 *
 * @param request ActivateVersionManagementRequest
 * @return ActivateVersionManagementResponse
 */
async function activateVersionManagement(request: ActivateVersionManagementRequest): ActivateVersionManagementResponse {
  var runtime = new $RuntimeOptions{};
  return activateVersionManagementWithOptions(request, runtime);
}

model ApplyCertificateRequest {
  domains?: string(name='Domains', description='List of domains, separated by commas.

This parameter is required.', example='www.example.com,blog.example.com'),
  siteId?: long(name='SiteId', description='Site ID.

This parameter is required.', example='1234567890123'),
  type?: string(name='Type', description='The certificate type. Valid values: lets_encrypt, digicert_single, and digicert_wildcard.', example='lets_encrypt'),
}

model ApplyCertificateResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  result?: [ 
    {
      domain?: string(name='Domain', description='Certificate domain.', example='*.example.com'),
      id?: string(name='Id', description='Certificate ID.', example='30000478'),
      status?: string(name='Status', description='Status of the certificate application.', example='Applying'),
    }
  ](name='Result', description='List of free certificate application details.'),
  siteName?: string(name='SiteName', description='Site name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='Number of certificates applied for, which is the same as the number of input domains.', example='2'),
}

model ApplyCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCertificateResponseBody(name='body'),
}

/**
 * @summary Applies for a free SSL certificate.
 *
 * @param request ApplyCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyCertificateResponse
 */
@context("applyCertificateWithContext")
async function applyCertificateWithOptions(request: ApplyCertificateRequest, runtime: $RuntimeOptions): ApplyCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ApplyCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Applies for a free SSL certificate.
 *
 * @param request ApplyCertificateRequest
 * @return ApplyCertificateResponse
 */
async function applyCertificate(request: ApplyCertificateRequest): ApplyCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return applyCertificateWithOptions(request, runtime);
}

model BatchCreateRecordsRequest {
  recordList?: [ 
    {
      authConf?: {
        accessKey?: string(name='AccessKey'),
        authType?: string(name='AuthType'),
        region?: string(name='Region'),
        secretKey?: string(name='SecretKey'),
        version?: string(name='Version'),
      }(name='AuthConf'),
      bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**
*   **api**
*   **web**', example='web'),
      data?: {
        algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Applicable to CERT and SSHFP records.', example='0'),
        certificate?: string(name='Certificate', description='The public key of the certificate. Applicable to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Applicable to SSHFP records.', example='abcdef1234567890'),
        flag?: int32(name='Flag', description='The Flag for a CAA record indicates its priority and how it is processed. Valid values: 0 to 255.', example='128'),
        keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Applicable to CERT records.', example='0'),
        matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Applicable to SMIMEA, and TLSA records.', example='0'),
        port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. Exclusive to SRV records.', example='0'),
        priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='2'),
        selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
        tag?: string(name='Tag', description='The tag of a CAA record, which indicates its specific type and purpose, such as issue, issuewild, and iodef.', example='issue'),
        type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
        usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
        value?: string(name='Value', description='The record value or part of the record content. A/AAAA: the IP address being pointed to. CNAME: the target domain name being pointed to. MX: valid target mail server domain name. TXT: valid text string. CAA: valid certificate authority domain name. SRV: valid target host domain name. URI: valid URI string.', example='example.com'),
        weight?: int32(name='Weight', description='The weight of the record. Valid values: 0 to 65,535. Applicable to SRV and URI records.', example='0'),
      }(name='Data', description='The DNS information of the record. Enter fields based on the record type.

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
      proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true'),
      recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='www.example.com'),
      sourceType?: string(name='SourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is used by default.', example='OSS'),
      ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.

This parameter is required.', example='60'),
      type?: string(name='Type', description='The DNS type of the record.

This parameter is required.', example='A/AAAA'),
    }
  ](name='RecordList', description='The list of DNS records to be created.

This parameter is required.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model BatchCreateRecordsShrinkRequest {
  recordListShrink?: string(name='RecordList', description='The list of DNS records to be created.

This parameter is required.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model BatchCreateRecordsResponseBody = {
  recordResultList?: {
    failed?: [ 
      {
        bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**
*   **api**
*   **web**', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Applicable to CERT and SSHFP records.', example='0'),
          certificate?: string(name='Certificate', description='The public key of the certificate. Applicable to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Applicable to SSHFP records.', example='abcdef1234567890'),
          flag?: int32(name='Flag', description='The flag bit of the record. Indicates its priority and handling method, used in CAA records.', example='128'),
          keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Applicable to CERT records.', example='0'),
          matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='RSA'),
          port?: int32(name='Port', description='The port number of the record, associated with the SRV record. Exclusive to SRV records.', example='0'),
          priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. Applicable to MX, SRV, and URI records.', example='10'),
          selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          tag?: string(name='Tag', description='Indicates its priority and handling method, used in CAA records.', example='issue'),
          type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
          usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          value?: string(name='Value', description='The record value or part of the record content. This value is returned when the record is A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, or URI. It has different meanings based on types of records:

*   **A/AAAA**: the IP addresses. IP addresses are separated by commas (,). There is at least one IPv4 address.
*   **CNAME**: the mapped domain name.
*   **NS**: the nameservers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
          weight?: int32(name='Weight', description='The weight of the record. Applicable to SRV and URI records.', example='0'),
        }(name='Data', description='The DNS information about the record, which contains various types of record values and their related attributes.', example='{"value":"2.2.2.2"}'),
        description?: string(name='Description', description='The result description.'),
        proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
        recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
        recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
        recordType?: string(name='RecordType', description='The DNS type of the record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
        sourceType?: string(name='SourceType', description='The origin type of the CNAME record. This field is left empty for other types of records. The type of the origin server. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.', example='OSS'),
        ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='60'),
      }
    ](name='Failed', description='The records that failed to be created.'),
    success?: [ 
      {
        bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**
*   **api**
*   **web**', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Applicable to CERT and SSHFP records.', example='0'),
          certificate?: string(name='Certificate', description='The public key of the certificate. Applicable to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Applicable to SSHFP records.', example='abcdef1234567890'),
          flag?: int32(name='Flag', description='The flag bit of the record. Indicates its priority and handling method, used in CAA records.', example='128'),
          keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Applicable to CERT records.', example='0'),
          matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. Exclusive to SRV records.', example='0'),
          priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. Applicable to MX, SRV, and URI records.', example='10'),
          selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          tag?: string(name='Tag', description='The label of a CAA record, which indicates its specific type and purpose, such as issue, issuewild, and iodef.', example='issue'),
          type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
          usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          value?: string(name='Value', description='The record value or part of the record content. This value is returned when the record is A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, or URI. It has different meanings based on types of records:

*   **A/AAAA**: the IP addresses. Multiple IPs are separated by commas (,). There is at least one IPv4 address.
*   **CNAME**: the mapped domain name.
*   **NS**: the nameservers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
          weight?: int32(name='Weight', description='The weight of the record. Valid values: 0 to 65535. Applicable to SRV and URI records.', example='0'),
        }(name='Data', description='The DNS record information.', example='{"value":"1.1.1.1"}'),
        description?: string(name='Description', description='The result description.', example='success'),
        proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
        recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
        recordName?: string(name='RecordName', description='The record name.', example='www.example.com'),
        recordType?: string(name='RecordType', description='The DNS type of the record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
        sourceType?: string(name='SourceType', description='The origin type of the CNAME record. This field is left empty for other types of records. The type of the origin server. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.', example='OSS'),
        ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='60'),
      }
    ](name='Success', description='The records that have been created.'),
    totalCount?: int32(name='TotalCount', description='The total number of returned records.', example='20'),
  }(name='RecordResultList', description='The records that have been created and failed to be created.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model BatchCreateRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateRecordsResponseBody(name='body'),
}

/**
 * @summary Adds DNS records of different record types at a time..
 *
 * @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
 * Successful and failed records along with error messages are listed in the response.
 *
 * @param tmpReq BatchCreateRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCreateRecordsResponse
 */
@context("batchCreateRecordsWithContext")
async function batchCreateRecordsWithOptions(tmpReq: BatchCreateRecordsRequest, runtime: $RuntimeOptions): BatchCreateRecordsResponse {
  tmpReq.validate();
  var request = new BatchCreateRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.recordList)) {
    request.recordListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordList, 'RecordList', 'json');
  }
  var query = {};
  if (!$isNull(request.recordListShrink)) {
    query['RecordList'] = request.recordListShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchCreateRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds DNS records of different record types at a time..
 *
 * @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
 * Successful and failed records along with error messages are listed in the response.
 *
 * @param request BatchCreateRecordsRequest
 * @return BatchCreateRecordsResponse
 */
async function batchCreateRecords(request: BatchCreateRecordsRequest): BatchCreateRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return batchCreateRecordsWithOptions(request, runtime);
}

model BatchCreateWafRulesRequest {
  configs?: [
    WafRuleConfig
  ](name='Configs', description='A list of configurations for each rule, specifying detailed configurations for each rule.'),
  phase?: string(name='Phase', description='WAF rule type, with values:

- **http_anti_scan**: Scan protection.
- **http_bot**: Bots.', example='http_anti_scan'),
  rulesetId?: long(name='RulesetId', description='Ruleset ID.', example='10000001'),
  shared?: WafBatchRuleShared(name='Shared', description='Shared configuration for multiple rules, specifying common attributes of multiple rules.'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model BatchCreateWafRulesShrinkRequest {
  configsShrink?: string(name='Configs', description='A list of configurations for each rule, specifying detailed configurations for each rule.'),
  phase?: string(name='Phase', description='WAF rule type, with values:

- **http_anti_scan**: Scan protection.
- **http_bot**: Bots.', example='http_anti_scan'),
  rulesetId?: long(name='RulesetId', description='Ruleset ID.', example='10000001'),
  sharedShrink?: string(name='Shared', description='Shared configuration for multiple rules, specifying common attributes of multiple rules.'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model BatchCreateWafRulesResponseBody = {
  ids?: [ long ](name='Ids', description='ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId', description='ID of the WAF ruleset, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2878359.html) interface.', example='10000001'),
}

model BatchCreateWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateWafRulesResponseBody(name='body'),
}

/**
 * @summary Batch Create WAF Rules
 *
 * @param tmpReq BatchCreateWafRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCreateWafRulesResponse
 */
@context("batchCreateWafRulesWithContext")
async function batchCreateWafRulesWithOptions(tmpReq: BatchCreateWafRulesRequest, runtime: $RuntimeOptions): BatchCreateWafRulesResponse {
  tmpReq.validate();
  var request = new BatchCreateWafRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.configs)) {
    request.configsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configs, 'Configs', 'json');
  }
  if (!$isNull(tmpReq.shared)) {
    request.sharedShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shared, 'Shared', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.configsShrink)) {
    body['Configs'] = request.configsShrink;
  }
  if (!$isNull(request.phase)) {
    body['Phase'] = request.phase;
  }
  if (!$isNull(request.rulesetId)) {
    body['RulesetId'] = request.rulesetId;
  }
  if (!$isNull(request.sharedShrink)) {
    body['Shared'] = request.sharedShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchCreateWafRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Create WAF Rules
 *
 * @param request BatchCreateWafRulesRequest
 * @return BatchCreateWafRulesResponse
 */
async function batchCreateWafRules(request: BatchCreateWafRulesRequest): BatchCreateWafRulesResponse {
  var runtime = new $RuntimeOptions{};
  return batchCreateWafRulesWithOptions(request, runtime);
}

model BatchDeleteKvRequest {
  keys?: [ string ](name='Keys', description='The keys that you want to delete. You can delete a maximum of 10,000 key-value pairs at a time.

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchDeleteKvShrinkRequest {
  keysShrink?: string(name='Keys', description='The keys that you want to delete. You can delete a maximum of 10,000 key-value pairs at a time.

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchDeleteKvResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that are deleted.'),
}

model BatchDeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvResponseBody(name='body'),
}

/**
 * @summary Deletes key-value pairs from a namespace at a time based on keys.
 *
 * @param tmpReq BatchDeleteKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteKvResponse
 */
@context("batchDeleteKvWithContext")
async function batchDeleteKvWithOptions(tmpReq: BatchDeleteKvRequest, runtime: $RuntimeOptions): BatchDeleteKvResponse {
  tmpReq.validate();
  var request = new BatchDeleteKvShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.keys)) {
    request.keysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keys, 'Keys', 'json');
  }
  var query = {};
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!$isNull(request.keysShrink)) {
    body['Keys'] = request.keysShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchDeleteKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes key-value pairs from a namespace at a time based on keys.
 *
 * @param request BatchDeleteKvRequest
 * @return BatchDeleteKvResponse
 */
async function batchDeleteKv(request: BatchDeleteKvRequest): BatchDeleteKvResponse {
  var runtime = new $RuntimeOptions{};
  return batchDeleteKvWithOptions(request, runtime);
}

model BatchDeleteKvWithHighCapacityRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  url?: string(name='Url', description='The download URL of the key-value pairs that you want to delete. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchDeleteKvWithHighCapacityAdvanceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  urlObject?: readable(name='Url', description='The download URL of the key-value pairs that you want to delete. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchDeleteKvWithHighCapacityResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that are deleted.'),
}

model BatchDeleteKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchDeleteWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for deleting key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	rawReq := BatchDeleteKvRequest{
 *     		Namespace: &namespace,
 *     	}
 *     	for i := 0; i < 10000; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		rawReq.Keys = append(rawReq.Keys, &key)
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
 *     	reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchDeleteKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteKvWithHighCapacityResponse
 */
@context("batchDeleteKvWithHighCapacityWithContext")
async function batchDeleteKvWithHighCapacityWithOptions(request: BatchDeleteKvWithHighCapacityRequest, runtime: $RuntimeOptions): BatchDeleteKvWithHighCapacityResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchDeleteKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchDeleteWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for deleting key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	rawReq := BatchDeleteKvRequest{
 *     		Namespace: &namespace,
 *     	}
 *     	for i := 0; i < 10000; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		rawReq.Keys = append(rawReq.Keys, &key)
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
 *     	reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchDeleteKvWithHighCapacityRequest
 * @return BatchDeleteKvWithHighCapacityResponse
 */
async function batchDeleteKvWithHighCapacity(request: BatchDeleteKvWithHighCapacityRequest): BatchDeleteKvWithHighCapacityResponse {
  var runtime = new $RuntimeOptions{};
  return batchDeleteKvWithHighCapacityWithOptions(request, runtime);
}

async function batchDeleteKvWithHighCapacityAdvance(request: BatchDeleteKvWithHighCapacityAdvanceRequest, runtime: $RuntimeOptions): BatchDeleteKvWithHighCapacityResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'ESA',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var batchDeleteKvWithHighCapacityReq = new BatchDeleteKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, batchDeleteKvWithHighCapacityReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    batchDeleteKvWithHighCapacityReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var batchDeleteKvWithHighCapacityResp = batchDeleteKvWithHighCapacityWithOptions(batchDeleteKvWithHighCapacityReq, runtime);
  return batchDeleteKvWithHighCapacityResp;
}

model BatchGetExpressionFieldsRequest {
  expressions?: [ 
    {
      expression?: string(name='Expression', description='Content of the expression.', example='ip.src eq 1.1.1.1'),
      id?: long(name='Id', description='The sequence number of the expression.', example='1'),
    }
  ](name='Expressions', description='List of expressions.', example='http_bot'),
  phase?: string(name='Phase', description='WAF Phase', example='http_bot'),
  siteId?: long(name='SiteId', description='Site ID', example='1'),
}

model BatchGetExpressionFieldsShrinkRequest {
  expressionsShrink?: string(name='Expressions', description='List of expressions.', example='http_bot'),
  phase?: string(name='Phase', description='WAF Phase', example='http_bot'),
  siteId?: long(name='SiteId', description='Site ID', example='1'),
}

model BatchGetExpressionFieldsResponseBody = {
  fields?: [ 
    {
      fields?: [ string ](name='Fields', description='List of match fields for a single expression.'),
      id?: string(name='Id', description='ID of the expression, corresponding to the ID in the input parameters.', example='1'),
    }
  ](name='Fields', description='List of match fields.'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchGetExpressionFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetExpressionFieldsResponseBody(name='body'),
}

/**
 * @summary Batch Get Expression Matches
 *
 * @param tmpReq BatchGetExpressionFieldsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGetExpressionFieldsResponse
 */
@context("batchGetExpressionFieldsWithContext")
async function batchGetExpressionFieldsWithOptions(tmpReq: BatchGetExpressionFieldsRequest, runtime: $RuntimeOptions): BatchGetExpressionFieldsResponse {
  tmpReq.validate();
  var request = new BatchGetExpressionFieldsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.expressions)) {
    request.expressionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.expressions, 'Expressions', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.expressionsShrink)) {
    body['Expressions'] = request.expressionsShrink;
  }
  if (!$isNull(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchGetExpressionFields',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch Get Expression Matches
 *
 * @param request BatchGetExpressionFieldsRequest
 * @return BatchGetExpressionFieldsResponse
 */
async function batchGetExpressionFields(request: BatchGetExpressionFieldsRequest): BatchGetExpressionFieldsResponse {
  var runtime = new $RuntimeOptions{};
  return batchGetExpressionFieldsWithOptions(request, runtime);
}

model BatchPutKvRequest {
  kvList?: [ 
    {
      expiration?: long(name='Expiration', description='The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='1690081381'),
      expirationTtl?: long(name='ExpirationTtl', description='The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='3600'),
      key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
      value?: string(name='Value', description='The key content.

This parameter is required.', example='test_value'),
    }
  ](name='KvList', description='The key-value pairs that you want to configure at a time. The total size can be up to 2 MB (2 × 1000 × 1000).

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchPutKvShrinkRequest {
  kvListShrink?: string(name='KvList', description='The key-value pairs that you want to configure at a time. The total size can be up to 2 MB (2 × 1000 × 1000).

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchPutKvResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be written.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that were written.'),
}

model BatchPutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvResponseBody(name='body'),
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys.
 *
 * @param tmpReq BatchPutKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchPutKvResponse
 */
@context("batchPutKvWithContext")
async function batchPutKvWithOptions(tmpReq: BatchPutKvRequest, runtime: $RuntimeOptions): BatchPutKvResponse {
  tmpReq.validate();
  var request = new BatchPutKvShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.kvList)) {
    request.kvListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kvList, 'KvList', 'json');
  }
  var query = {};
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!$isNull(request.kvListShrink)) {
    body['KvList'] = request.kvListShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchPutKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys.
 *
 * @param request BatchPutKvRequest
 * @return BatchPutKvResponse
 */
async function batchPutKv(request: BatchPutKvRequest): BatchPutKvResponse {
  var runtime = new $RuntimeOptions{};
  return batchPutKvWithOptions(request, runtime);
}

model BatchPutKvWithHighCapacityRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  url?: string(name='Url', description='The download URL of the key-value pairs that you want to configure. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchPutKvWithHighCapacityAdvanceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  urlObject?: readable(name='Url', description='The download URL of the key-value pairs that you want to configure. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchPutKvWithHighCapacityResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be written.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that were written.'),
}

model BatchPutKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchPutKvWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	numKv := 10000
 *     	kvList := make([]*BatchPutKvRequestKvList, numKv)
 *     	test_value := strings.Repeat("a", 10*1024)
 *     	for i := 0; i < numKv; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		value := test_value
 *     		kvList[i] = &BatchPutKvRequestKvList{
 *     			Key:   &key,
 *     			Value: &value,
 *     		}
 *     	}
 *     	rawReq := BatchPutKvRequest{
 *     		Namespace: &namespace,
 *     		KvList:    kvList,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchPutKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchPutKvWithHighCapacityResponse
 */
@context("batchPutKvWithHighCapacityWithContext")
async function batchPutKvWithHighCapacityWithOptions(request: BatchPutKvWithHighCapacityRequest, runtime: $RuntimeOptions): BatchPutKvWithHighCapacityResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchPutKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchPutKvWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	numKv := 10000
 *     	kvList := make([]*BatchPutKvRequestKvList, numKv)
 *     	test_value := strings.Repeat("a", 10*1024)
 *     	for i := 0; i < numKv; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		value := test_value
 *     		kvList[i] = &BatchPutKvRequestKvList{
 *     			Key:   &key,
 *     			Value: &value,
 *     		}
 *     	}
 *     	rawReq := BatchPutKvRequest{
 *     		Namespace: &namespace,
 *     		KvList:    kvList,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchPutKvWithHighCapacityRequest
 * @return BatchPutKvWithHighCapacityResponse
 */
async function batchPutKvWithHighCapacity(request: BatchPutKvWithHighCapacityRequest): BatchPutKvWithHighCapacityResponse {
  var runtime = new $RuntimeOptions{};
  return batchPutKvWithHighCapacityWithOptions(request, runtime);
}

async function batchPutKvWithHighCapacityAdvance(request: BatchPutKvWithHighCapacityAdvanceRequest, runtime: $RuntimeOptions): BatchPutKvWithHighCapacityResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'ESA',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var batchPutKvWithHighCapacityReq = new BatchPutKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, batchPutKvWithHighCapacityReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    batchPutKvWithHighCapacityReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var batchPutKvWithHighCapacityResp = batchPutKvWithHighCapacityWithOptions(batchPutKvWithHighCapacityReq, runtime);
  return batchPutKvWithHighCapacityResp;
}

model BatchUpdateWafRulesRequest {
  configs?: [
    WafRuleConfig
  ](name='Configs', description='The configurations of rules.'),
  phase?: string(name='Phase', description='The WAF rule category.', example='http_custom'),
  rulesetId?: long(name='RulesetId', description='The ID of the WAF ruleset, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2878359.html) operation.', example='10000001'),
  shared?: WafBatchRuleShared(name='Shared', description='The configurations shared by multiple rules.', example='10000001'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version of the website.', example='0'),
}

model BatchUpdateWafRulesShrinkRequest {
  configsShrink?: string(name='Configs', description='The configurations of rules.'),
  phase?: string(name='Phase', description='The WAF rule category.', example='http_custom'),
  rulesetId?: long(name='RulesetId', description='The ID of the WAF ruleset, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2878359.html) operation.', example='10000001'),
  sharedShrink?: string(name='Shared', description='The configurations shared by multiple rules.', example='10000001'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version of the website.', example='0'),
}

model BatchUpdateWafRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchUpdateWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateWafRulesResponseBody(name='body'),
}

/**
 * @summary Modifies multiple rules in a specific Web Application Firewall (WAF) ruleset at a time.
 *
 * @param tmpReq BatchUpdateWafRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchUpdateWafRulesResponse
 */
@context("batchUpdateWafRulesWithContext")
async function batchUpdateWafRulesWithOptions(tmpReq: BatchUpdateWafRulesRequest, runtime: $RuntimeOptions): BatchUpdateWafRulesResponse {
  tmpReq.validate();
  var request = new BatchUpdateWafRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.configs)) {
    request.configsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configs, 'Configs', 'json');
  }
  if (!$isNull(tmpReq.shared)) {
    request.sharedShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shared, 'Shared', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.configsShrink)) {
    body['Configs'] = request.configsShrink;
  }
  if (!$isNull(request.phase)) {
    body['Phase'] = request.phase;
  }
  if (!$isNull(request.rulesetId)) {
    body['RulesetId'] = request.rulesetId;
  }
  if (!$isNull(request.sharedShrink)) {
    body['Shared'] = request.sharedShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchUpdateWafRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies multiple rules in a specific Web Application Firewall (WAF) ruleset at a time.
 *
 * @param request BatchUpdateWafRulesRequest
 * @return BatchUpdateWafRulesResponse
 */
async function batchUpdateWafRules(request: BatchUpdateWafRulesRequest): BatchUpdateWafRulesResponse {
  var runtime = new $RuntimeOptions{};
  return batchUpdateWafRulesWithOptions(request, runtime);
}

model BlockObjectRequest {
  content?: [ string ](name='Content', description='The content to block.

This parameter is required.'),
  extension?: string(name='Extension', description='The blocking period that you can extend. Set the value to 2year.', example='2year'),
  maxage?: int32(name='Maxage', description='The period of time during which the URL is blocked. Unit: seconds. Specify this parameter if Type is set to block.', example='864000'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='BlockObject'),
  type?: string(name='Type', description='The type. Valid values:

*   **block**
*   **unblock**

This parameter is required.', example='block'),
}

model BlockObjectShrinkRequest {
  contentShrink?: string(name='Content', description='The content to block.

This parameter is required.'),
  extension?: string(name='Extension', description='The blocking period that you can extend. Set the value to 2year.', example='2year'),
  maxage?: int32(name='Maxage', description='The period of time during which the URL is blocked. Unit: seconds. Specify this parameter if Type is set to block.', example='864000'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='BlockObject'),
  type?: string(name='Type', description='The type. Valid values:

*   **block**
*   **unblock**

This parameter is required.', example='block'),
}

model BlockObjectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  taskId?: string(name='TaskId', description='The blocking task ID.', example='15940956620'),
}

model BlockObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlockObjectResponseBody(name='body'),
}

/**
 * @summary Blocks URLs.
 *
 * @param tmpReq BlockObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BlockObjectResponse
 */
@context("blockObjectWithContext")
async function blockObjectWithOptions(tmpReq: BlockObjectRequest, runtime: $RuntimeOptions): BlockObjectResponse {
  tmpReq.validate();
  var request = new BlockObjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!$isNull(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!$isNull(request.extension)) {
    query['Extension'] = request.extension;
  }
  if (!$isNull(request.maxage)) {
    query['Maxage'] = request.maxage;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BlockObject',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Blocks URLs.
 *
 * @param request BlockObjectRequest
 * @return BlockObjectResponse
 */
async function blockObject(request: BlockObjectRequest): BlockObjectResponse {
  var runtime = new $RuntimeOptions{};
  return blockObjectWithOptions(request, runtime);
}

model CheckAssumeSlrRoleResponseBody = {
  errorMsg?: string(name='ErrorMsg', example='aliuid:xxx assumeOssRole not exist,serviceName:realtimelogpush.dcdnservices.aliyuncs.com'),
  isExist?: string(name='IsExist', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckAssumeSlrRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAssumeSlrRoleResponseBody(name='body'),
}

/**
 * @summary 检查实时日志slr角色是否已创建
 *
 * @param request CheckAssumeSlrRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckAssumeSlrRoleResponse
 */
async function checkAssumeSlrRoleWithOptions(runtime: $RuntimeOptions): CheckAssumeSlrRoleResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'CheckAssumeSlrRole',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查实时日志slr角色是否已创建
 *
 * @return CheckAssumeSlrRoleResponse
 */
async function checkAssumeSlrRole(): CheckAssumeSlrRoleResponse {
  var runtime = new $RuntimeOptions{};
  return checkAssumeSlrRoleWithOptions(runtime);
}

model CheckSiteNameRequest {
  siteName?: string(name='SiteName', description='The website name.

This parameter is required.', example='example.com'),
}

model CheckSiteNameResponseBody = {
  description?: string(name='Description', description='The description of the verification result. Valid values:

*   **success**: The verification is successful.
*   **Site.AlreadyExist**: The website domain name has already been added.
*   **Site.InvalidName**: Invalid website domain name.
*   **Site.SubSiteUnavailable**: Subdomains are not allowed.
*   **Site.InternalError**: An internal error occurs.', example='success'),
  isSubSite?: boolean(name='IsSubSite', description='Indicates whether a subdomain is specified. Valid values:

*   **true**
*   **false**', example='false'),
  messeage?: string(name='Messeage', description='The verification message.'),
  passed?: boolean(name='Passed', description='Indicates whether the verification passed.

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CheckSiteNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteNameResponseBody(name='body'),
}

/**
 * @summary Checks whether a specified website name is available.
 *
 * @param request CheckSiteNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSiteNameResponse
 */
@context("checkSiteNameWithContext")
async function checkSiteNameWithOptions(request: CheckSiteNameRequest, runtime: $RuntimeOptions): CheckSiteNameResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckSiteName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks whether a specified website name is available.
 *
 * @param request CheckSiteNameRequest
 * @return CheckSiteNameResponse
 */
async function checkSiteName(request: CheckSiteNameRequest): CheckSiteNameResponse {
  var runtime = new $RuntimeOptions{};
  return checkSiteNameWithOptions(request, runtime);
}

model CheckSiteProjectNameRequest {
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.

This parameter is required.', example='user_log'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='12312312213212'),
}

model CheckSiteProjectNameResponseBody = {
  check?: boolean(name='Check', description='Indicates whether the task name is valid. Valid values:

*   **true**
*   **false**', example='true'),
  description?: string(name='Description', description='The result description.', example='project name pass the check'),
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.', example='dcdn_waf_userAccount_log'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckSiteProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteProjectNameResponseBody(name='body'),
}

/**
 * @summary Checks the name of a real-time log delivery task.
 *
 * @param request CheckSiteProjectNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSiteProjectNameResponse
 */
@context("checkSiteProjectNameWithContext")
async function checkSiteProjectNameWithOptions(request: CheckSiteProjectNameRequest, runtime: $RuntimeOptions): CheckSiteProjectNameResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckSiteProjectName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks the name of a real-time log delivery task.
 *
 * @param request CheckSiteProjectNameRequest
 * @return CheckSiteProjectNameResponse
 */
async function checkSiteProjectName(request: CheckSiteProjectNameRequest): CheckSiteProjectNameResponse {
  var runtime = new $RuntimeOptions{};
  return checkSiteProjectNameWithOptions(request, runtime);
}

model CheckUserProjectNameRequest {
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.

This parameter is required.', example='ali-dcdn-log-56'),
}

model CheckUserProjectNameResponseBody = {
  check?: boolean(name='Check', description='Indicates whether the name is valid. Valid values:

*   **true**
*   **false**', example='true'),
  description?: string(name='Description', description='The reason why the name passed or failed the check.', example='project name pass the check'),
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.', example='ali-dcdn-log-56'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckUserProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserProjectNameResponseBody(name='body'),
}

/**
 * @summary Checks the name of a real-time log delivery task by account.
 *
 * @param request CheckUserProjectNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckUserProjectNameResponse
 */
@context("checkUserProjectNameWithContext")
async function checkUserProjectNameWithOptions(request: CheckUserProjectNameRequest, runtime: $RuntimeOptions): CheckUserProjectNameResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckUserProjectName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks the name of a real-time log delivery task by account.
 *
 * @param request CheckUserProjectNameRequest
 * @return CheckUserProjectNameResponse
 */
async function checkUserProjectName(request: CheckUserProjectNameRequest): CheckUserProjectNameResponse {
  var runtime = new $RuntimeOptions{};
  return checkUserProjectNameWithOptions(request, runtime);
}

model CommitRoutineStagingCodeRequest {
  codeDescription?: string(name='CodeDescription', description='The description of the code version.', example='description of this code ver'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='CommitRoutineStagingCode'),
}

model CommitRoutineStagingCodeResponseBody = {
  codeVersion?: string(name='CodeVersion', description='The version number of the newly generated code.', example='1710120201067203242'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model CommitRoutineStagingCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommitRoutineStagingCodeResponseBody(name='body'),
}

/**
 * @summary Commits the unstable code in the staging environment to generate an official code version.
 *
 * @param request CommitRoutineStagingCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommitRoutineStagingCodeResponse
 */
@context("commitRoutineStagingCodeWithContext")
async function commitRoutineStagingCodeWithOptions(request: CommitRoutineStagingCodeRequest, runtime: $RuntimeOptions): CommitRoutineStagingCodeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CommitRoutineStagingCode',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Commits the unstable code in the staging environment to generate an official code version.
 *
 * @param request CommitRoutineStagingCodeRequest
 * @return CommitRoutineStagingCodeResponse
 */
async function commitRoutineStagingCode(request: CommitRoutineStagingCodeRequest): CommitRoutineStagingCodeResponse {
  var runtime = new $RuntimeOptions{};
  return commitRoutineStagingCodeWithOptions(request, runtime);
}

model CreateCacheRuleRequest {
  additionalCacheablePorts?: string(name='AdditionalCacheablePorts', description='Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096', example='8880'),
  browserCacheMode?: string(name='BrowserCacheMode', description='Browser cache mode. Possible values:
- no_cache: Do not cache.
- follow_origin: Follow the origin server\\\\"s cache policy.
- override_origin: Override the origin server\\\\"s cache policy.', example='follow_origin'),
  browserCacheTtl?: string(name='BrowserCacheTtl', description='Browser cache expiration time, in seconds.', example='300'),
  bypassCache?: string(name='BypassCache', description='Set the bypass cache mode. Possible values:
- cache_all: Cache all requests.
- bypass_all: Bypass cache for all requests.', example='cache_all'),
  cacheDeceptionArmor?: string(name='CacheDeceptionArmor', description='Cache deception defense. Used to defend against web cache deception attacks; only the verified cache content will be cached. Value range:
- on: Enable.
- off: Disable.', example='on'),
  cacheReserveEligibility?: string(name='CacheReserveEligibility', description='Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Possible values:
- bypass_cache_reserve: Requests bypass cache retention.
- eligible_for_cache_reserve: Eligible for cache retention.', example='bypass_cache_reserve'),
  checkPresenceCookie?: string(name='CheckPresenceCookie', description='When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.', example='cookiename'),
  checkPresenceHeader?: string(name='CheckPresenceHeader', description='When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.', example='headername'),
  edgeCacheMode?: string(name='EdgeCacheMode', description='Edge cache mode. Possible values:
- follow_origin: Follow the origin server\\\\"s cache policy (if it exists), otherwise use the default cache policy.
- no_cache: Do not cache.
- override_origin: Override the origin server\\\\"s cache policy.
- follow_origin_bypass: Follow the origin server\\\\"s cache policy (if it exists), otherwise do not cache.', example='follow_origin'),
  edgeCacheTtl?: string(name='EdgeCacheTtl', description='Edge cache expiration time, in seconds.', example='300'),
  edgeStatusCodeCacheTtl?: string(name='EdgeStatusCodeCacheTtl', description='Status code cache expiration time, in seconds.', example='300'),
  includeCookie?: string(name='IncludeCookie', description='When generating the cache key, add the specified cookie names and their values. Multiple values are supported, separated by spaces.', example='cookie_exapmle'),
  includeHeader?: string(name='IncludeHeader', description='When generating the cache key, add the specified header names and their values. Multiple values are supported, separated by spaces.', example='example'),
  queryString?: string(name='QueryString', description='Query strings to be reserved or excluded. Multiple values are supported, separated by spaces.', example='example'),
  queryStringMode?: string(name='QueryStringMode', description='The processing mode for query strings when generating the cache key. Possible values:
- ignore_all: Ignore all.
- exclude_query_string: Exclude specified query strings.
- reserve_all: Default, reserve all.
- include_query_string: Include specified query strings.', example='reserve_all'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  serveStale?: string(name='ServeStale', description='Serve stale cache. When enabled, the node can still use the expired cached files to respond to user requests even if the origin server is unavailable. Value range:
- on: Enable.
- off: Disable.', example='on'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='340035003106221'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the version for the configuration to take effect. The default is version 0.', example='1'),
  sortQueryStringForCache?: string(name='SortQueryStringForCache', description='Query string sorting, disabled by default. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  userDeviceType?: string(name='UserDeviceType', description='When generating the cache key, include the client device type. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  userGeo?: string(name='UserGeo', description='Include the client\\\\"s geographical location when generating the cache key. Value range:
- on: Enable.
- off: Disable.', example='on'),
  userLanguage?: string(name='UserLanguage', description='Include the client\\\\"s language type when generating the cache key. Value range:
- on: Enable.
- off: Disable.', example='on'),
}

model CreateCacheRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCacheRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCacheRuleResponseBody(name='body'),
}

/**
 * @summary Create a new site cache configuration
 *
 * @param request CreateCacheRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCacheRuleResponse
 */
@context("createCacheRuleWithContext")
async function createCacheRuleWithOptions(request: CreateCacheRuleRequest, runtime: $RuntimeOptions): CreateCacheRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.additionalCacheablePorts)) {
    query['AdditionalCacheablePorts'] = request.additionalCacheablePorts;
  }
  if (!$isNull(request.browserCacheMode)) {
    query['BrowserCacheMode'] = request.browserCacheMode;
  }
  if (!$isNull(request.browserCacheTtl)) {
    query['BrowserCacheTtl'] = request.browserCacheTtl;
  }
  if (!$isNull(request.bypassCache)) {
    query['BypassCache'] = request.bypassCache;
  }
  if (!$isNull(request.cacheDeceptionArmor)) {
    query['CacheDeceptionArmor'] = request.cacheDeceptionArmor;
  }
  if (!$isNull(request.cacheReserveEligibility)) {
    query['CacheReserveEligibility'] = request.cacheReserveEligibility;
  }
  if (!$isNull(request.checkPresenceCookie)) {
    query['CheckPresenceCookie'] = request.checkPresenceCookie;
  }
  if (!$isNull(request.checkPresenceHeader)) {
    query['CheckPresenceHeader'] = request.checkPresenceHeader;
  }
  if (!$isNull(request.edgeCacheMode)) {
    query['EdgeCacheMode'] = request.edgeCacheMode;
  }
  if (!$isNull(request.edgeCacheTtl)) {
    query['EdgeCacheTtl'] = request.edgeCacheTtl;
  }
  if (!$isNull(request.edgeStatusCodeCacheTtl)) {
    query['EdgeStatusCodeCacheTtl'] = request.edgeStatusCodeCacheTtl;
  }
  if (!$isNull(request.includeCookie)) {
    query['IncludeCookie'] = request.includeCookie;
  }
  if (!$isNull(request.includeHeader)) {
    query['IncludeHeader'] = request.includeHeader;
  }
  if (!$isNull(request.queryString)) {
    query['QueryString'] = request.queryString;
  }
  if (!$isNull(request.queryStringMode)) {
    query['QueryStringMode'] = request.queryStringMode;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.serveStale)) {
    query['ServeStale'] = request.serveStale;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.sortQueryStringForCache)) {
    query['SortQueryStringForCache'] = request.sortQueryStringForCache;
  }
  if (!$isNull(request.userDeviceType)) {
    query['UserDeviceType'] = request.userDeviceType;
  }
  if (!$isNull(request.userGeo)) {
    query['UserGeo'] = request.userGeo;
  }
  if (!$isNull(request.userLanguage)) {
    query['UserLanguage'] = request.userLanguage;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCacheRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a new site cache configuration
 *
 * @param request CreateCacheRuleRequest
 * @return CreateCacheRuleResponse
 */
async function createCacheRule(request: CreateCacheRuleRequest): CreateCacheRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createCacheRuleWithOptions(request, runtime);
}

model CreateClientCertificateRequest {
  CSR?: string(name='CSR', description='The certificate signing request (CSR).', example='-----BEGIN CERTIFICATE REQUEST-----'),
  pkeyType?: string(name='PkeyType', description='The type of the private key algorithm.', example='RSA'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
  validityDays?: long(name='ValidityDays', description='The validity period of the certificate. Unit: day.

This parameter is required.', example='365'),
}

model CreateClientCertificateResponseBody = {
  CACertificateId?: string(name='CACertificateId', description='The ID of the CA certificate.', example='babaded901474b9693acf530e0fb1dbb'),
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
  id?: string(name='Id', description='The certificate ID on ESA.', example='babaded901474b9693acf530e0fb1d95'),
  issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='DCDN CA'),
  notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-12-01T02:12:49Z'),
  notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-12-01T02:12:49Z'),
  privateKey?: string(name='PrivateKey', description='The private key of the certificate.', example='-----BEGIN PRIVATE KEY-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1daa'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
  status?: string(name='Status', description='The status of the certificate.', example='active'),
  validityDays?: string(name='ValidityDays', description='The validity period of the certificate. Unit: day.', example='365'),
}

model CreateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientCertificateResponseBody(name='body'),
}

/**
 * @summary Uses the ESA-managed certificate authority (CA) to issue client certificates.
 *
 * @param request CreateClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClientCertificateResponse
 */
@context("createClientCertificateWithContext")
async function createClientCertificateWithOptions(request: CreateClientCertificateRequest, runtime: $RuntimeOptions): CreateClientCertificateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.CSR)) {
    body['CSR'] = request.CSR;
  }
  if (!$isNull(request.pkeyType)) {
    body['PkeyType'] = request.pkeyType;
  }
  if (!$isNull(request.validityDays)) {
    body['ValidityDays'] = request.validityDays;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Uses the ESA-managed certificate authority (CA) to issue client certificates.
 *
 * @param request CreateClientCertificateRequest
 * @return CreateClientCertificateResponse
 */
async function createClientCertificate(request: CreateClientCertificateRequest): CreateClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return createClientCertificateWithOptions(request, runtime);
}

model CreateCompressionRuleRequest {
  brotli?: string(name='Brotli', description='Brotli compression. Value range:

- on: Enable.
- off: Disable.', example='on'),
  gzip?: string(name='Gzip', description='Gzip compression. Value range:

- on: Enable.
- off: Disable.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1231231221***'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='0'),
  zstd?: string(name='Zstd', description='Zstd compression. Value range:

- on: Enable.
- off: Disable.', example='on'),
}

model CreateCompressionRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  requestId?: string(name='RequestId', description='Request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model CreateCompressionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCompressionRuleResponseBody(name='body'),
}

/**
 * @summary Add a compression rule
 *
 * @param request CreateCompressionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCompressionRuleResponse
 */
@context("createCompressionRuleWithContext")
async function createCompressionRuleWithOptions(request: CreateCompressionRuleRequest, runtime: $RuntimeOptions): CreateCompressionRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.brotli)) {
    query['Brotli'] = request.brotli;
  }
  if (!$isNull(request.gzip)) {
    query['Gzip'] = request.gzip;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.zstd)) {
    query['Zstd'] = request.zstd;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCompressionRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add a compression rule
 *
 * @param request CreateCompressionRuleRequest
 * @return CreateCompressionRuleResponse
 */
async function createCompressionRule(request: CreateCompressionRuleRequest): CreateCompressionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createCompressionRuleWithOptions(request, runtime);
}

model CreateCustomScenePolicyRequest {
  endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.

This parameter is required.', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', description='The policy name.

This parameter is required.', example='test'),
  objects?: string(name='Objects', description='The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).', example='7096621098****'),
  siteIds?: string(name='SiteIds'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.

This parameter is required.', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.

This parameter is required.', example='promotion'),
}

model CreateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', description='The policy name.', example='test'),
  objects?: [ string ](name='Objects', description='The IDs of websites associated.'),
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteIds?: string(name='SiteIds'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', description='The name of the policy template.', example='promotion'),
}

model CreateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
 *
 * @param request CreateCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomScenePolicyResponse
 */
@context("createCustomScenePolicyWithContext")
async function createCustomScenePolicyWithOptions(request: CreateCustomScenePolicyRequest, runtime: $RuntimeOptions): CreateCustomScenePolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.objects)) {
    query['Objects'] = request.objects;
  }
  if (!$isNull(request.siteIds)) {
    query['SiteIds'] = request.siteIds;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
 *
 * @param request CreateCustomScenePolicyRequest
 * @return CreateCustomScenePolicyResponse
 */
async function createCustomScenePolicy(request: CreateCustomScenePolicyRequest): CreateCustomScenePolicyResponse {
  var runtime = new $RuntimeOptions{};
  return createCustomScenePolicyWithOptions(request, runtime);
}

model CreateEdgeContainerAppRequest {
  healthCheckFailTimes?: int32(name='HealthCheckFailTimes', description='The number of consecutive failed health checks required for an application to be considered as unhealthy. Valid values: 1 to 10. Default value: 5.', example='3'),
  healthCheckHost?: string(name='HealthCheckHost', description='The domain name that is used for health checks. This parameter is empty by default.', example='www.aliyun.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code returned for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval between two consecutive health checks. Unit: seconds. Valid values: **1** to **50**. Default value: **5**.', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The HTTP request method for health checks. Valid values:

*   **HEAD** (default): requests the headers of the resource.
*   **GET**: requests the specified resource and returns both the headers and entity body.', example='HEAD'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The port used for health checks. Valid values: 1 to 65535. Default value: 80.', example='80'),
  healthCheckSuccTimes?: int32(name='HealthCheckSuccTimes', description='The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.', example='2'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.\\\\
Valid values: **1** to **100**.\\\\
Default value: **3**.', example='5'),
  healthCheckType?: string(name='HealthCheckType', description='The health check type. By default, this parameter is left empty.

Valid values:

*   **l4**: Layer 4 health check.
*   **l7**: Layer 7 health check.', example='l7'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length. Default value: "/".', example='/health_check'),
  name?: string(name='Name', description='The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.

This parameter is required.', example='app-test'),
  remarks?: string(name='Remarks', description='The remarks. This parameter is empty by default.', example='test app'),
  servicePort?: int32(name='ServicePort', description='The server port. Valid values: 1 to 65535.

This parameter is required.', example='80'),
  targetPort?: int32(name='TargetPort', description='The backend port, which is also the service port of the application. Valid values: 1 to 65535.

This parameter is required.', example='80'),
}

model CreateEdgeContainerAppResponseBody = {
  appId?: string(name='AppId', description='The ID of the application that is created.', example='app-880688675783794688'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateEdgeContainerAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEdgeContainerAppResponseBody(name='body'),
}

/**
 * @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
 *
 * @param request CreateEdgeContainerAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEdgeContainerAppResponse
 */
@context("createEdgeContainerAppWithContext")
async function createEdgeContainerAppWithOptions(request: CreateEdgeContainerAppRequest, runtime: $RuntimeOptions): CreateEdgeContainerAppResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.healthCheckFailTimes)) {
    body['HealthCheckFailTimes'] = request.healthCheckFailTimes;
  }
  if (!$isNull(request.healthCheckHost)) {
    body['HealthCheckHost'] = request.healthCheckHost;
  }
  if (!$isNull(request.healthCheckHttpCode)) {
    body['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!$isNull(request.healthCheckInterval)) {
    body['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!$isNull(request.healthCheckMethod)) {
    body['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!$isNull(request.healthCheckPort)) {
    body['HealthCheckPort'] = request.healthCheckPort;
  }
  if (!$isNull(request.healthCheckSuccTimes)) {
    body['HealthCheckSuccTimes'] = request.healthCheckSuccTimes;
  }
  if (!$isNull(request.healthCheckTimeout)) {
    body['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!$isNull(request.healthCheckType)) {
    body['HealthCheckType'] = request.healthCheckType;
  }
  if (!$isNull(request.healthCheckURI)) {
    body['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  if (!$isNull(request.servicePort)) {
    body['ServicePort'] = request.servicePort;
  }
  if (!$isNull(request.targetPort)) {
    body['TargetPort'] = request.targetPort;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateEdgeContainerApp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
 *
 * @param request CreateEdgeContainerAppRequest
 * @return CreateEdgeContainerAppResponse
 */
async function createEdgeContainerApp(request: CreateEdgeContainerAppRequest): CreateEdgeContainerAppResponse {
  var runtime = new $RuntimeOptions{};
  return createEdgeContainerAppWithOptions(request, runtime);
}

model CreateEdgeContainerAppRecordRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  recordName?: string(name='RecordName', description='The associated domain name.

This parameter is required.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
}

model CreateEdgeContainerAppRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model CreateEdgeContainerAppRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEdgeContainerAppRecordResponseBody(name='body'),
}

/**
 * @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
 *
 * @param request CreateEdgeContainerAppRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEdgeContainerAppRecordResponse
 */
@context("createEdgeContainerAppRecordWithContext")
async function createEdgeContainerAppRecordWithOptions(request: CreateEdgeContainerAppRecordRequest, runtime: $RuntimeOptions): CreateEdgeContainerAppRecordResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateEdgeContainerAppRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
 *
 * @param request CreateEdgeContainerAppRecordRequest
 * @return CreateEdgeContainerAppRecordResponse
 */
async function createEdgeContainerAppRecord(request: CreateEdgeContainerAppRecordRequest): CreateEdgeContainerAppRecordResponse {
  var runtime = new $RuntimeOptions{};
  return createEdgeContainerAppRecordWithOptions(request, runtime);
}

model CreateEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  containers?: [ 
    {
      ACRImageInfo?: {
        domain?: string(name='Domain', description='The domain name of the Container Registry image.', example='1500.***.net'),
        instanceId?: string(name='InstanceId', description='The ID of the Container Registry instance.', example='xcdn-9axbo****'),
        isEnterpriseRegistry?: boolean(name='IsEnterpriseRegistry', description='Specifies whether the image is an enterprise-level Container Registry image.', example='false'),
        regionId?: string(name='RegionId', description='The regions in which the Container Registry instance resides.', example='cn-shanghai'),
        repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-h1ghghu60ct****'),
        repoName?: string(name='RepoName', description='The name of the image repository.', example='test_71'),
        repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='safeline'),
        tag?: string(name='Tag', description='The tag of the Container Registry image.', example='3.40.2'),
        tagUrl?: string(name='TagUrl', description='The URL of the Container Registry image tag.'),
      }(name='ACRImageInfo', description='The information about the Container Registry image.'),
      args?: string(name='Args', description='The arguments that are passed to the container startup command. Separate the parameters with spaces.', example='-a'),
      command?: string(name='Command', description='The command that is used to start the container. Separate the arguments with spaces.', example='nginx'),
      envVariables?: string(name='EnvVariables', description='The environment variables. Separate the environment variables with commas (,).', example='VITE_APP_TITLE=My App'),
      image?: string(name='Image', description='The address of the image.

This parameter is required.', example='registry-vpc.cn-shenzhen.aliyuncs.com/lihe****h/ea****ts_serv****am:3.**'),
      isACRImage?: boolean(name='IsACRImage', description='Specifies whether the image is a Container Registry image.

This parameter is required.', example='false'),
      name?: string(name='Name', description='The name of the container. The name must be unique in the same container group.

This parameter is required.', example='lxg-demo-er'),
      postStart?: string(name='PostStart', description='The command that is run before the container is started. Separate the arguments with spaces.', example='sh poststart.sh "echo hello world"'),
      preStop?: string(name='PreStop', description='The command that is run before the container is stopped. Separate the arguments with spaces.', example='sh prestop.sh "echo hello world"'),
      probeContent?: {
        command?: string(name='Command', description='The command of the exec type probe.', example='echo ok'),
        failureThreshold?: int32(name='FailureThreshold', description='The number of consecutive failed health checks required for a container to be considered as unhealthy.', example='3'),
        host?: string(name='Host', description='The domain name that is used for health checks.', example='www.rewrite.com'),
        httpHeaders?: string(name='HttpHeaders', description='The request headers that are included in the container health check request.', example='[{\\\\"Content-Type\\\\":\\\\"application/json\\\\"}]'),
        initialDelaySeconds?: int32(name='InitialDelaySeconds', description='The latency for container probe initialization.', example='1'),
        path?: string(name='Path', description='The health check path.', example='/'),
        periodSeconds?: int32(name='PeriodSeconds', description='The interval between container health checks.', example='1'),
        port?: int32(name='Port', description='The health check port.', example='9991'),
        scheme?: string(name='Scheme', description='The protocol that the container health check request uses.', example='http'),
        successThreshold?: int32(name='SuccessThreshold', description='The number of consecutive successful health checks required for a container to be considered as healthy.', example='1'),
        timeoutSeconds?: int32(name='TimeoutSeconds', description='The timeout period of the container health check.', example='1'),
      }(name='ProbeContent', description='The content of the container health probe.

This parameter is required.'),
      probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   exec: the command type.
*   tcpSocket: the TCP probe type.
*   httpGet: the HTTP access type.

This parameter is required.', example='exec'),
      spec?: string(name='Spec', description='The compute specification of the container. Valid values: 1C2G, 2C4G, 2C8G, 4C8G, 4C16G, 8C16G, and 8C32G.

This parameter is required.', example='1C2G'),
      storage?: string(name='Storage', description='The storage capacity. Valid values: 0.5G, 10G, 20G, and 30G.

This parameter is required.', example='0.5G'),
    }
  ](name='Containers', description='The container group to be deployed for this version, which contains information about images.\\\\
The image data contains the image address, startup command, parameters, environment variables, and probe rules. You can specify one or more images. The parameter value is a JSON string.

This parameter is required.', example='[
      {
            "Name": "container1",
            "Image": "image1",
            "Spec": "1C2G",
            "Command": "/bin/sh",
            "Args": "-c hello",
            "ProbeType": "tcpSocket",
            "ProbeContent": "{\\\\"Port\\\\":8080}"
      },
      {
            "Name": "container2",
            "Image": "image2",
            "Spec": "2C4G",
            "ProbeType": "httpGet",
            "ProbeContent": "{\\\\"Path\\\\":\\\\"/\\\\",\\\\"Port\\\\":80,\\\\"InitialDelaySeconds\\\\":10}"
      }
]'),
  name?: string(name='Name', description='The version name, which must be 6 to 128 characters in length.

This parameter is required.', example='verson1'),
  remarks?: string(name='Remarks', description='The description of the version.', example='test app'),
}

model CreateEdgeContainerAppVersionShrinkRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  containersShrink?: string(name='Containers', description='The container group to be deployed for this version, which contains information about images.\\\\
The image data contains the image address, startup command, parameters, environment variables, and probe rules. You can specify one or more images. The parameter value is a JSON string.

This parameter is required.', example='[
      {
            "Name": "container1",
            "Image": "image1",
            "Spec": "1C2G",
            "Command": "/bin/sh",
            "Args": "-c hello",
            "ProbeType": "tcpSocket",
            "ProbeContent": "{\\\\"Port\\\\":8080}"
      },
      {
            "Name": "container2",
            "Image": "image2",
            "Spec": "2C4G",
            "ProbeType": "httpGet",
            "ProbeContent": "{\\\\"Path\\\\":\\\\"/\\\\",\\\\"Port\\\\":80,\\\\"InitialDelaySeconds\\\\":10}"
      }
]'),
  name?: string(name='Name', description='The version name, which must be 6 to 128 characters in length.

This parameter is required.', example='verson1'),
  remarks?: string(name='Remarks', description='The description of the version.', example='test app'),
}

model CreateEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  versionId?: string(name='VersionId', description='The ID of the created version.', example='ver-87962637161651****'),
}

model CreateEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Creates a version for a containerized application. You can iterate the application based on the version.
 *
 * @param tmpReq CreateEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEdgeContainerAppVersionResponse
 */
@context("createEdgeContainerAppVersionWithContext")
async function createEdgeContainerAppVersionWithOptions(tmpReq: CreateEdgeContainerAppVersionRequest, runtime: $RuntimeOptions): CreateEdgeContainerAppVersionResponse {
  tmpReq.validate();
  var request = new CreateEdgeContainerAppVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.containers)) {
    request.containersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.containers, 'Containers', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.containersShrink)) {
    body['Containers'] = request.containersShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a version for a containerized application. You can iterate the application based on the version.
 *
 * @param request CreateEdgeContainerAppVersionRequest
 * @return CreateEdgeContainerAppVersionResponse
 */
async function createEdgeContainerAppVersion(request: CreateEdgeContainerAppVersionRequest): CreateEdgeContainerAppVersionResponse {
  var runtime = new $RuntimeOptions{};
  return createEdgeContainerAppVersionWithOptions(request, runtime);
}

model CreateHttpRequestHeaderModificationRuleRequest {
  requestHeaderModification?: [ 
    {
      name?: string(name='Name', description='Request header name.

This parameter is required.', example='headername'),
      operation?: string(name='Operation', description='Operation type. Possible values:

- add: Add.
- del: Delete
- modify: Modify.

This parameter is required.', example='add'),
      type?: string(name='Type'),
      value?: string(name='Value', description='Request header value.', example='headervalue'),
    }
  ](name='RequestHeaderModification', description='Modify request headers, supporting add, delete, and modify operations.

This parameter is required.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='5407498413****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, this parameter can specify the version to which the configuration applies, defaulting to version 0.', example='0'),
}

model CreateHttpRequestHeaderModificationRuleShrinkRequest {
  requestHeaderModificationShrink?: string(name='RequestHeaderModification', description='Modify request headers, supporting add, delete, and modify operations.

This parameter is required.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='5407498413****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, this parameter can specify the version to which the configuration applies, defaulting to version 0.', example='0'),
}

model CreateHttpRequestHeaderModificationRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CreateHttpRequestHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHttpRequestHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Add HTTP Request Header Rule
 *
 * @param tmpReq CreateHttpRequestHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHttpRequestHeaderModificationRuleResponse
 */
@context("createHttpRequestHeaderModificationRuleWithContext")
async function createHttpRequestHeaderModificationRuleWithOptions(tmpReq: CreateHttpRequestHeaderModificationRuleRequest, runtime: $RuntimeOptions): CreateHttpRequestHeaderModificationRuleResponse {
  tmpReq.validate();
  var request = new CreateHttpRequestHeaderModificationRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.requestHeaderModification)) {
    request.requestHeaderModificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaderModification, 'RequestHeaderModification', 'json');
  }
  var query = {};
  if (!$isNull(request.requestHeaderModificationShrink)) {
    query['RequestHeaderModification'] = request.requestHeaderModificationShrink;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateHttpRequestHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add HTTP Request Header Rule
 *
 * @param request CreateHttpRequestHeaderModificationRuleRequest
 * @return CreateHttpRequestHeaderModificationRuleResponse
 */
async function createHttpRequestHeaderModificationRule(request: CreateHttpRequestHeaderModificationRuleRequest): CreateHttpRequestHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createHttpRequestHeaderModificationRuleWithOptions(request, runtime);
}

model CreateHttpResponseHeaderModificationRuleRequest {
  responseHeaderModification?: [ 
    {
      name?: string(name='Name', description='Response header name.

This parameter is required.', example='headername'),
      operation?: string(name='Operation', description='Operation type. Possible values:

- add: Add.
- del: Delete
- modify: Modify.

This parameter is required.', example='add'),
      type?: string(name='Type'),
      value?: string(name='Value', description='Response header value.', example='headervalue'),
    }
  ](name='ResponseHeaderModification', description='Modify response headers, supporting add, delete, and modify operations.

This parameter is required.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID. You can obtain this by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456******'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the version of the site where the configuration will take effect. The default is version 0.', example='0'),
}

model CreateHttpResponseHeaderModificationRuleShrinkRequest {
  responseHeaderModificationShrink?: string(name='ResponseHeaderModification', description='Modify response headers, supporting add, delete, and modify operations.

This parameter is required.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID. You can obtain this by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456******'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the version of the site where the configuration will take effect. The default is version 0.', example='0'),
}

model CreateHttpResponseHeaderModificationRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  requestId?: string(name='RequestId', description='Request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateHttpResponseHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHttpResponseHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Add HTTP Response Header Rule
 *
 * @param tmpReq CreateHttpResponseHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHttpResponseHeaderModificationRuleResponse
 */
@context("createHttpResponseHeaderModificationRuleWithContext")
async function createHttpResponseHeaderModificationRuleWithOptions(tmpReq: CreateHttpResponseHeaderModificationRuleRequest, runtime: $RuntimeOptions): CreateHttpResponseHeaderModificationRuleResponse {
  tmpReq.validate();
  var request = new CreateHttpResponseHeaderModificationRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.responseHeaderModification)) {
    request.responseHeaderModificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaderModification, 'ResponseHeaderModification', 'json');
  }
  var query = {};
  if (!$isNull(request.responseHeaderModificationShrink)) {
    query['ResponseHeaderModification'] = request.responseHeaderModificationShrink;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateHttpResponseHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add HTTP Response Header Rule
 *
 * @param request CreateHttpResponseHeaderModificationRuleRequest
 * @return CreateHttpResponseHeaderModificationRuleResponse
 */
async function createHttpResponseHeaderModificationRule(request: CreateHttpResponseHeaderModificationRuleRequest): CreateHttpResponseHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createHttpResponseHeaderModificationRuleWithOptions(request, runtime);
}

model CreateHttpsApplicationConfigurationRequest {
  altSvc?: string(name='AltSvc', description='Alt-Svc feature switch, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  altSvcClear?: string(name='AltSvcClear', description='Whether the Alt-Svc header includes the clear parameter, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  altSvcMa?: string(name='AltSvcMa', description='Alt-Svc validity period in seconds, default is 86400 seconds.', example='86400'),
  altSvcPersist?: string(name='AltSvcPersist', description='Whether the Alt-Svc header includes the persist parameter, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  hsts?: string(name='Hsts', description='Whether to enable HSTS, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  hstsIncludeSubdomains?: string(name='HstsIncludeSubdomains', description='Whether to include subdomains in HSTS, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  hstsMaxAge?: string(name='HstsMaxAge', description='HSTS expiration time in seconds.', example='3600'),
  hstsPreload?: string(name='HstsPreload', description='Whether to enable HSTS preload, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  httpsForce?: string(name='HttpsForce', description='Whether to enable forced HTTPS, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  httpsForceCode?: string(name='HttpsForceCode', description='Forced HTTPS redirect status code. Possible values:
- 301
- 302
- 307
- 308', example='301'),
  httpsNoSniDeny?: string(name='HttpsNoSniDeny'),
  httpsSniVerify?: string(name='HttpsSniVerify'),
  httpsSniWhitelist?: string(name='HttpsSniWhitelist'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, this parameter can specify the version to which the configuration applies, defaulting to version 0.', example='1'),
}

model CreateHttpsApplicationConfigurationResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateHttpsApplicationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHttpsApplicationConfigurationResponseBody(name='body'),
}

/**
 * @summary Create a new site HTTPS application configuration
 *
 * @param request CreateHttpsApplicationConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHttpsApplicationConfigurationResponse
 */
@context("createHttpsApplicationConfigurationWithContext")
async function createHttpsApplicationConfigurationWithOptions(request: CreateHttpsApplicationConfigurationRequest, runtime: $RuntimeOptions): CreateHttpsApplicationConfigurationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.altSvc)) {
    query['AltSvc'] = request.altSvc;
  }
  if (!$isNull(request.altSvcClear)) {
    query['AltSvcClear'] = request.altSvcClear;
  }
  if (!$isNull(request.altSvcMa)) {
    query['AltSvcMa'] = request.altSvcMa;
  }
  if (!$isNull(request.altSvcPersist)) {
    query['AltSvcPersist'] = request.altSvcPersist;
  }
  if (!$isNull(request.hsts)) {
    query['Hsts'] = request.hsts;
  }
  if (!$isNull(request.hstsIncludeSubdomains)) {
    query['HstsIncludeSubdomains'] = request.hstsIncludeSubdomains;
  }
  if (!$isNull(request.hstsMaxAge)) {
    query['HstsMaxAge'] = request.hstsMaxAge;
  }
  if (!$isNull(request.hstsPreload)) {
    query['HstsPreload'] = request.hstsPreload;
  }
  if (!$isNull(request.httpsForce)) {
    query['HttpsForce'] = request.httpsForce;
  }
  if (!$isNull(request.httpsForceCode)) {
    query['HttpsForceCode'] = request.httpsForceCode;
  }
  if (!$isNull(request.httpsNoSniDeny)) {
    query['HttpsNoSniDeny'] = request.httpsNoSniDeny;
  }
  if (!$isNull(request.httpsSniVerify)) {
    query['HttpsSniVerify'] = request.httpsSniVerify;
  }
  if (!$isNull(request.httpsSniWhitelist)) {
    query['HttpsSniWhitelist'] = request.httpsSniWhitelist;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateHttpsApplicationConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a new site HTTPS application configuration
 *
 * @param request CreateHttpsApplicationConfigurationRequest
 * @return CreateHttpsApplicationConfigurationResponse
 */
async function createHttpsApplicationConfiguration(request: CreateHttpsApplicationConfigurationRequest): CreateHttpsApplicationConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return createHttpsApplicationConfigurationWithOptions(request, runtime);
}

model CreateHttpsBasicConfigurationRequest {
  ciphersuite?: string(name='Ciphersuite', description='Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.', example='TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256'),
  ciphersuiteGroup?: string(name='CiphersuiteGroup', description='Cipher suite group. Default uses all cipher suites. Value range:
- all: All cipher suites.
- strict: Strong cipher suites.
- custom: Custom cipher suites.', example='all'),
  http2?: string(name='Http2', description='Whether to enable HTTP2. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  http3?: string(name='Http3', description='Whether to enable HTTP3. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  https?: string(name='Https', description='Whether to enable HTTPS. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ocspStapling?: string(name='OcspStapling', description='Whether to enable OCSP. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='5407498413****'),
  tls10?: string(name='Tls10', description='Whether to enable TLS1.0. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls11?: string(name='Tls11', description='Whether to enable TLS1.1. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls12?: string(name='Tls12', description='Whether to enable TLS1.2. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls13?: string(name='Tls13', description='Whether to enable TLS1.3. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
}

model CreateHttpsBasicConfigurationResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateHttpsBasicConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHttpsBasicConfigurationResponseBody(name='body'),
}

/**
 * @summary Create a new site HTTPS basic configuration
 *
 * @param request CreateHttpsBasicConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHttpsBasicConfigurationResponse
 */
@context("createHttpsBasicConfigurationWithContext")
async function createHttpsBasicConfigurationWithOptions(request: CreateHttpsBasicConfigurationRequest, runtime: $RuntimeOptions): CreateHttpsBasicConfigurationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ciphersuite)) {
    query['Ciphersuite'] = request.ciphersuite;
  }
  if (!$isNull(request.ciphersuiteGroup)) {
    query['CiphersuiteGroup'] = request.ciphersuiteGroup;
  }
  if (!$isNull(request.http2)) {
    query['Http2'] = request.http2;
  }
  if (!$isNull(request.http3)) {
    query['Http3'] = request.http3;
  }
  if (!$isNull(request.https)) {
    query['Https'] = request.https;
  }
  if (!$isNull(request.ocspStapling)) {
    query['OcspStapling'] = request.ocspStapling;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.tls10)) {
    query['Tls10'] = request.tls10;
  }
  if (!$isNull(request.tls11)) {
    query['Tls11'] = request.tls11;
  }
  if (!$isNull(request.tls12)) {
    query['Tls12'] = request.tls12;
  }
  if (!$isNull(request.tls13)) {
    query['Tls13'] = request.tls13;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateHttpsBasicConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a new site HTTPS basic configuration
 *
 * @param request CreateHttpsBasicConfigurationRequest
 * @return CreateHttpsBasicConfigurationResponse
 */
async function createHttpsBasicConfiguration(request: CreateHttpsBasicConfigurationRequest): CreateHttpsBasicConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return createHttpsBasicConfigurationWithOptions(request, runtime);
}

model CreateImageTransformRequest {
  enable?: string(name='Enable', description='Indicates whether image transformation is enabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq "video.example.com")', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='test'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='0'),
}

model CreateImageTransformResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model CreateImageTransformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageTransformResponseBody(name='body'),
}

/**
 * @summary Add Site Image Transformation Configuration
 *
 * @param request CreateImageTransformRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateImageTransformResponse
 */
@context("createImageTransformWithContext")
async function createImageTransformWithOptions(request: CreateImageTransformRequest, runtime: $RuntimeOptions): CreateImageTransformResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateImageTransform',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add Site Image Transformation Configuration
 *
 * @param request CreateImageTransformRequest
 * @return CreateImageTransformResponse
 */
async function createImageTransform(request: CreateImageTransformRequest): CreateImageTransformResponse {
  var runtime = new $RuntimeOptions{};
  return createImageTransformWithOptions(request, runtime);
}

model CreateKvNamespaceRequest {
  description?: string(name='Description', description='The description of the namespace.', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='The name of the namespace.

This parameter is required.', example='test_namespace'),
}

model CreateKvNamespaceResponseBody = {
  description?: string(name='Description', description='The description of the namespace.', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='657717877171818496'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: working as expected.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
}

model CreateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Create a namespace in your Alibaba Cloud account.
 *
 * @param request CreateKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateKvNamespaceResponse
 */
@context("createKvNamespaceWithContext")
async function createKvNamespaceWithOptions(request: CreateKvNamespaceRequest, runtime: $RuntimeOptions): CreateKvNamespaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a namespace in your Alibaba Cloud account.
 *
 * @param request CreateKvNamespaceRequest
 * @return CreateKvNamespaceResponse
 */
async function createKvNamespace(request: CreateKvNamespaceRequest): CreateKvNamespaceResponse {
  var runtime = new $RuntimeOptions{};
  return createKvNamespaceWithOptions(request, runtime);
}

model CreateListRequest {
  description?: string(name='Description', description='The description of the list that you want to create.', example='a custom list'),
  items?: [ string ](name='Items', description='The items in the list that you want to create.', example='a custom list'),
  kind?: string(name='Kind', description='The type of the list that you want to create.', example='ip'),
  name?: string(name='Name', description='The name of the list that you want to create.

This parameter is required.', example='example'),
}

model CreateListShrinkRequest {
  description?: string(name='Description', description='The description of the list that you want to create.', example='a custom list'),
  itemsShrink?: string(name='Items', description='The items in the list that you want to create.', example='a custom list'),
  kind?: string(name='Kind', description='The type of the list that you want to create.', example='ip'),
  name?: string(name='Name', description='The name of the list that you want to create.

This parameter is required.', example='example'),
}

model CreateListResponseBody = {
  id?: long(name='Id', description='The ID of the custom list.[](~~2850217~~)', example='40000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListResponseBody(name='body'),
}

/**
 * @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
 *
 * @param tmpReq CreateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateListResponse
 */
@context("createListWithContext")
async function createListWithOptions(tmpReq: CreateListRequest, runtime: $RuntimeOptions): CreateListResponse {
  tmpReq.validate();
  var request = new CreateListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.items)) {
    request.itemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.items, 'Items', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.itemsShrink)) {
    body['Items'] = request.itemsShrink;
  }
  if (!$isNull(request.kind)) {
    body['Kind'] = request.kind;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
 *
 * @param request CreateListRequest
 * @return CreateListResponse
 */
async function createList(request: CreateListRequest): CreateListResponse {
  var runtime = new $RuntimeOptions{};
  return createListWithOptions(request, runtime);
}

model CreateLoadBalancerRequest {
  adaptiveRouting?: {
    failoverAcrossPools?: boolean(name='FailoverAcrossPools', description='Whether to failover across pools.

- true: Yes.
- false: No.', example='true'),
  }(name='AdaptiveRouting', description='Configuration for failover across pools.', example='true'),
  defaultPools?: [ long ](name='DefaultPools', description='List of default pools.

This parameter is required.', example='123'),
  description?: string(name='Description', description='Detailed description of the load balancer, for easier management and identification.', example='Load balancer description'),
  enabled?: boolean(name='Enabled', description='Whether the load balancer is enabled.

- true: Enabled.
- false: Not enabled.', example='true'),
  fallbackPool?: long(name='FallbackPool', description='Fallback pool ID, where traffic will be directed when all other pools are unavailable.

This parameter is required.', example='123'),
  monitor?: {
    consecutiveDown?: int32(name='ConsecutiveDown', description='Number of consecutive failed probes required to consider the target unhealthy, such as `5`.', example='5'),
    consecutiveUp?: int32(name='ConsecutiveUp', description='Number of consecutive successful probes required to consider the target healthy, such as `3`.', example='3'),
    expectedCodes?: string(name='ExpectedCodes', description='Expected status codes, such as `200,202`, which are successful HTTP responses.', example='200'),
    followRedirects?: boolean(name='FollowRedirects', description='Whether to follow redirects.

- true: Yes.
- false: No.', example='true'),
    header?: any(name='Header', description='Header information included in the probe, which is an HTTP header.', example='{
        "host": [
            "example1.com",
            "example2.com"
        ]
    }'),
    interval?: int32(name='Interval', description='Monitoring interval, such as `60` seconds, which is the frequency of checks.', example='60'),
    method?: string(name='Method', description='Monitor request method, such as `GET`, which is a method in the HTTP protocol.', example='GET'),
    monitoringRegion?: string(name='MonitoringRegion'),
    path?: string(name='Path', description='Monitor check path, such as `/healthcheck`, which is an HTTP request path.', example='/health'),
    port?: int32(name='Port', description='Origin server port.', example='1921'),
    timeout?: int32(name='Timeout', description='Application health check timeout, in seconds, with a value range of 1-10.', example='5'),
    type?: string(name='Type', description='Monitor protocol type, such as HTTP, used for health checks. When set to `off`, no check is performed.

- TCP
- UDP
- SMTP
- HTTPS
- HTTP
- ICMP Ping
- off', example='HTTP'),
  }(name='Monitor', description='Monitor configuration, used for health checks.

This parameter is required.', example='order'),
  name?: string(name='Name', description='The name of the load balancer, which must meet the domain name format validation and be a subdomain under the site.

This parameter is required.', example='lb.example.com'),
  randomSteering?: {
    defaultWeight?: int32(name='DefaultWeight', description='Default weight for all pools that do not have individual weights specified. The value range is an integer between 0 and 100.', example='50'),
    poolWeights?: map[string]int32(name='PoolWeights', description='Weight configuration for each backend server pool, with the key being the pool ID and the value being the weight coefficient. The weight coefficient represents the proportion of relative traffic distribution.'),
  }(name='RandomSteering', description='Weighted round-robin configuration, used to control the traffic distribution weights among different pools.', example='123'),
  regionPools?: any(name='RegionPools', description='Address pools corresponding to primary regions.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  rules?: [ 
    {
      fixedResponse?: {
        contentType?: string(name='ContentType', description='Content-Type field in the HTTP Header.', example='application/octet-stream'),
        location?: string(name='Location', description='Location field in the HTTP response.', example='http://www.example.com/index.html'),
        messageBody?: string(name='MessageBody', description='Response body value.', example='Hello World!'),
        statusCode?: int32(name='StatusCode', description='Response status code.', example='200'),
      }(name='FixedResponse', description='Execute a specified response after matching the rule.', example='{"content_type": "application/json", "location": "www.example.com", "message_body": "Testing Hello", "status_code": 0}'),
      overrides?: any(name='Overrides', description='Modify the corresponding load balancing configuration after matching the rule. The fields in the configuration will override the corresponding fields in the load balancer configuration.', example='{
            "adaptive_routing": {
                "failover_across_pools": true
            },
            "sub_region_pools": {
                "AL,AT": [
                    92298024898****,
                    92304347804****
                ],
                "BG,BY": [
                    92298024898****
                ]
            },
            "default_pools": [
                92298024898****,
                92304347804****
            ],
            "fallback_pool": 92298024898****,
            "location_strategy": {
                "mode": "resolver_ip",
                "prefer_ecs": "always"
            },
            "random_steering": {
                "default_weight": 0.3,
                "pool_weights": {
                    "92298024898****": 0.7,
                    "92304347804****": 0.8
                }
            },
            "region_pools": {
                "CN,SEAS": [
                    92298024898****,
                    92304347804****
                ],
                "SAF,SAS": [
                    92304347804****
                ]
            },
            "session_affinity": "ip",
            "steering_policy": "geo",
            "ttl": 30
        }'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding global configurations. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.request.method eq "GET" and http.request.version eq "HTTP/1.0") or (ip.geoip.country eq "CN") or (http.host eq "www.example.com")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding global configurations. Value range:
- on: Enable.
- off: Disable.', example='on'),
      ruleName?: string(name='RuleName', description='The name of the rule. This parameter does not need to be set when adding global configurations.', example='rule_1'),
      sequence?: int32(name='Sequence', description='The execution order of the rule. It can be left blank, in which case the rules will be executed in the order they appear in the list. If specified, it must be a positive integer, with higher values indicating higher priority.', example='1'),
      terminates?: boolean(name='Terminates', description='Whether to terminate the execution of subsequent rules.

- true: Yes.
- false: No, default value.', example='true'),
    }
  ](name='Rules', description='Rule information.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  sessionAffinity?: string(name='SessionAffinity', description='Session persistence, with possible values:
- off: Not enabled.
- ip: Session persistence by IP.
- cookie: Session persistence by cookie.', example='ip'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456789****'),
  steeringPolicy?: string(name='SteeringPolicy', description='Load balancing strategy.

- geo: Geographical strategy.
- random: Weighted round-robin.
- order: Primary and backup method.

This parameter is required.', example='order'),
  subRegionPools?: any(name='SubRegionPools', description='Address pools corresponding to secondary regions. When multiple secondary regions share the same set of address pools, the keys can be concatenated with commas.', example='{"AL,MO": [92298024898****],"CN-SH,CN-SX,CN-SC":[92304347804****,92843536908****]}'),
  ttl?: int32(name='Ttl', description='TTL value, the time-to-live for DNS records, with a default of 30 seconds. The value range is 10-600.', example='300'),
}

model CreateLoadBalancerShrinkRequest {
  adaptiveRoutingShrink?: string(name='AdaptiveRouting', description='Configuration for failover across pools.', example='true'),
  defaultPoolsShrink?: string(name='DefaultPools', description='List of default pools.

This parameter is required.', example='123'),
  description?: string(name='Description', description='Detailed description of the load balancer, for easier management and identification.', example='Load balancer description'),
  enabled?: boolean(name='Enabled', description='Whether the load balancer is enabled.

- true: Enabled.
- false: Not enabled.', example='true'),
  fallbackPool?: long(name='FallbackPool', description='Fallback pool ID, where traffic will be directed when all other pools are unavailable.

This parameter is required.', example='123'),
  monitorShrink?: string(name='Monitor', description='Monitor configuration, used for health checks.

This parameter is required.', example='order'),
  name?: string(name='Name', description='The name of the load balancer, which must meet the domain name format validation and be a subdomain under the site.

This parameter is required.', example='lb.example.com'),
  randomSteeringShrink?: string(name='RandomSteering', description='Weighted round-robin configuration, used to control the traffic distribution weights among different pools.', example='123'),
  regionPools?: any(name='RegionPools', description='Address pools corresponding to primary regions.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  rulesShrink?: string(name='Rules', description='Rule information.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  sessionAffinity?: string(name='SessionAffinity', description='Session persistence, with possible values:
- off: Not enabled.
- ip: Session persistence by IP.
- cookie: Session persistence by cookie.', example='ip'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456789****'),
  steeringPolicy?: string(name='SteeringPolicy', description='Load balancing strategy.

- geo: Geographical strategy.
- random: Weighted round-robin.
- order: Primary and backup method.

This parameter is required.', example='order'),
  subRegionPools?: any(name='SubRegionPools', description='Address pools corresponding to secondary regions. When multiple secondary regions share the same set of address pools, the keys can be concatenated with commas.', example='{"AL,MO": [92298024898****],"CN-SH,CN-SX,CN-SC":[92304347804****,92843536908****]}'),
  ttl?: int32(name='Ttl', description='TTL value, the time-to-live for DNS records, with a default of 30 seconds. The value range is 10-600.', example='300'),
}

model CreateLoadBalancerResponseBody = {
  id?: long(name='Id', description='Load balancer ID.', example='99867648760****'),
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model CreateLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerResponseBody(name='body'),
}

/**
 * @summary Add a New Load Balancer
 *
 * @description Through this API, users can configure load balancing services according to their business needs, including but not limited to adaptive routing, weighted round-robin, rule matching, health checks, and more, to achieve effective traffic management and optimization.
 *
 * @param tmpReq CreateLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerResponse
 */
@context("createLoadBalancerWithContext")
async function createLoadBalancerWithOptions(tmpReq: CreateLoadBalancerRequest, runtime: $RuntimeOptions): CreateLoadBalancerResponse {
  tmpReq.validate();
  var request = new CreateLoadBalancerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.adaptiveRouting)) {
    request.adaptiveRoutingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adaptiveRouting, 'AdaptiveRouting', 'json');
  }
  if (!$isNull(tmpReq.defaultPools)) {
    request.defaultPoolsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultPools, 'DefaultPools', 'json');
  }
  if (!$isNull(tmpReq.monitor)) {
    request.monitorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitor, 'Monitor', 'json');
  }
  if (!$isNull(tmpReq.randomSteering)) {
    request.randomSteeringShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.randomSteering, 'RandomSteering', 'json');
  }
  if (!$isNull(tmpReq.rules)) {
    request.rulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rules, 'Rules', 'json');
  }
  var query = {};
  if (!$isNull(request.adaptiveRoutingShrink)) {
    query['AdaptiveRouting'] = request.adaptiveRoutingShrink;
  }
  if (!$isNull(request.defaultPoolsShrink)) {
    query['DefaultPools'] = request.defaultPoolsShrink;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!$isNull(request.fallbackPool)) {
    query['FallbackPool'] = request.fallbackPool;
  }
  if (!$isNull(request.monitorShrink)) {
    query['Monitor'] = request.monitorShrink;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.randomSteeringShrink)) {
    query['RandomSteering'] = request.randomSteeringShrink;
  }
  if (!$isNull(request.regionPools)) {
    query['RegionPools'] = request.regionPools;
  }
  if (!$isNull(request.rulesShrink)) {
    query['Rules'] = request.rulesShrink;
  }
  if (!$isNull(request.sessionAffinity)) {
    query['SessionAffinity'] = request.sessionAffinity;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.steeringPolicy)) {
    query['SteeringPolicy'] = request.steeringPolicy;
  }
  if (!$isNull(request.subRegionPools)) {
    query['SubRegionPools'] = request.subRegionPools;
  }
  if (!$isNull(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateLoadBalancer',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add a New Load Balancer
 *
 * @description Through this API, users can configure load balancing services according to their business needs, including but not limited to adaptive routing, weighted round-robin, rule matching, health checks, and more, to achieve effective traffic management and optimization.
 *
 * @param request CreateLoadBalancerRequest
 * @return CreateLoadBalancerResponse
 */
async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  var runtime = new $RuntimeOptions{};
  return createLoadBalancerWithOptions(request, runtime);
}

model CreateNetworkOptimizationRequest {
  grpc?: string(name='Grpc', description='Whether to enable GRPC, disabled by default. Possible values:
- on: Enable
- off: Disable', example='on'),
  http2Origin?: string(name='Http2Origin', description='Whether to enable HTTP2 origin, disabled by default. Possible values:
- on: Enable
- off: Disable', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='340035003106221'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, this parameter can specify the effective version of the configuration, defaulting to version 0.', example='1'),
  smartRouting?: string(name='SmartRouting', description='Whether to enable smart routing service, disabled by default. Possible values:
- on: Enable
- off: Disable', example='on'),
  uploadMaxFilesize?: string(name='UploadMaxFilesize', description='Maximum upload file size in MB, range: 100～500.', example='100'),
  websocket?: string(name='Websocket', description='Whether to enable Websocket, enabled by default. Possible values:
- on: Enable
- off: Disable', example='on'),
}

model CreateNetworkOptimizationResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateNetworkOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkOptimizationResponseBody(name='body'),
}

/**
 * @summary Create a new site network optimization configuration
 *
 * @param request CreateNetworkOptimizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkOptimizationResponse
 */
@context("createNetworkOptimizationWithContext")
async function createNetworkOptimizationWithOptions(request: CreateNetworkOptimizationRequest, runtime: $RuntimeOptions): CreateNetworkOptimizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.grpc)) {
    query['Grpc'] = request.grpc;
  }
  if (!$isNull(request.http2Origin)) {
    query['Http2Origin'] = request.http2Origin;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.smartRouting)) {
    query['SmartRouting'] = request.smartRouting;
  }
  if (!$isNull(request.uploadMaxFilesize)) {
    query['UploadMaxFilesize'] = request.uploadMaxFilesize;
  }
  if (!$isNull(request.websocket)) {
    query['Websocket'] = request.websocket;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateNetworkOptimization',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a new site network optimization configuration
 *
 * @param request CreateNetworkOptimizationRequest
 * @return CreateNetworkOptimizationResponse
 */
async function createNetworkOptimization(request: CreateNetworkOptimizationRequest): CreateNetworkOptimizationResponse {
  var runtime = new $RuntimeOptions{};
  return createNetworkOptimizationWithOptions(request, runtime);
}

model CreateOriginPoolRequest {
  enabled?: boolean(name='Enabled', description='Whether the origin address pool is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
  name?: string(name='Name', description='The name of the origin address pool, which must be unique within a site.

This parameter is required.', example='pool1'),
  origins?: [ 
    {
      address?: string(name='Address', description='The address of the origin, e.g., www.example.com.', example='www.example.com'),
      authConf?: {
        accessKey?: string(name='AccessKey', description='The access key required for private authentication.', example='yourAccessKeyID'),
        authType?: string(name='AuthType', description='The type of authentication.

- public: Public read/write, used when the origin is OSS or S3 and is set to public read/write;
- private_same_account: Private same account, used when the origin is OSS and the authentication type is private within the same account;
- private_cross_account: Private cross-account, used when the origin is OSS and the authentication type is private across accounts;
- private: Used when the origin is S3 and the authentication type is private.', example='public'),
        region?: string(name='Region', description='The region of the origin required when the origin is AWS S3.', example='us-east-1'),
        secretKey?: string(name='SecretKey', description='The secret key required for private authentication.', example='yourAccessKeySecret'),
        version?: string(name='Version', description='The signature version required when the origin is AWS S3.', example='v2'),
      }(name='AuthConf', description='Authentication information, required when the origin is OSS or S3 and needs authentication, including related configuration details.'),
      enabled?: boolean(name='Enabled', description='Whether the origin is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
      header?: any(name='Header', description='The request header to be included when fetching from the origin, only Host is supported.', example='{
        "Host": [
          "example.com"
        ]
      }'),
      name?: string(name='Name', description='The name of the origin, which must be unique within an origin address.', example='origin1'),
      type?: string(name='Type', description='The type of the origin:

- ip_domain: IP or domain name type origin;
- OSS: OSS address origin;
- S3: AWS S3 origin.', example='ip_domain'),
      weight?: int32(name='Weight', description='The weight, an integer between 0 and 100.', example='50'),
    }
  ](name='Origins', description='Information about the origins added to the origin address pool, with multiple origins passed as an array.'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='21655860979****'),
}

model CreateOriginPoolShrinkRequest {
  enabled?: boolean(name='Enabled', description='Whether the origin address pool is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
  name?: string(name='Name', description='The name of the origin address pool, which must be unique within a site.

This parameter is required.', example='pool1'),
  originsShrink?: string(name='Origins', description='Information about the origins added to the origin address pool, with multiple origins passed as an array.'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='21655860979****'),
}

model CreateOriginPoolResponseBody = {
  id?: long(name='Id', description='The ID of the newly created origin address pool.', example='103852052519****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model CreateOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOriginPoolResponseBody(name='body'),
}

/**
 * @summary Add a new origin address pool
 *
 * @description Multiple origins can be added under the origin address, supporting domain names, IPs, OSS, S3, and other types of origins. It supports authentication for OSS and S3 type origins.
 *
 * @param tmpReq CreateOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOriginPoolResponse
 */
@context("createOriginPoolWithContext")
async function createOriginPoolWithOptions(tmpReq: CreateOriginPoolRequest, runtime: $RuntimeOptions): CreateOriginPoolResponse {
  tmpReq.validate();
  var request = new CreateOriginPoolShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.origins)) {
    request.originsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.origins, 'Origins', 'json');
  }
  var query = {};
  if (!$isNull(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.originsShrink)) {
    query['Origins'] = request.originsShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add a new origin address pool
 *
 * @description Multiple origins can be added under the origin address, supporting domain names, IPs, OSS, S3, and other types of origins. It supports authentication for OSS and S3 type origins.
 *
 * @param request CreateOriginPoolRequest
 * @return CreateOriginPoolResponse
 */
async function createOriginPool(request: CreateOriginPoolRequest): CreateOriginPoolResponse {
  var runtime = new $RuntimeOptions{};
  return createOriginPoolWithOptions(request, runtime);
}

model CreateOriginProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model CreateOriginProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model CreateOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Enables origin protection.
 *
 * @param request CreateOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOriginProtectionResponse
 */
@context("createOriginProtectionWithContext")
async function createOriginProtectionWithOptions(request: CreateOriginProtectionRequest, runtime: $RuntimeOptions): CreateOriginProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables origin protection.
 *
 * @param request CreateOriginProtectionRequest
 * @return CreateOriginProtectionResponse
 */
async function createOriginProtection(request: CreateOriginProtectionRequest): CreateOriginProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return createOriginProtectionWithOptions(request, runtime);
}

model CreateOriginRuleRequest {
  dnsRecord?: string(name='DnsRecord', description='Rewrite the DNS resolution record for the origin request.', example='test.example.com'),
  follow302Enable?: string(name='Follow302Enable'),
  follow302MaxTries?: string(name='Follow302MaxTries'),
  follow302RetainArgs?: string(name='Follow302RetainArgs'),
  follow302RetainHeader?: string(name='Follow302RetainHeader'),
  follow302TargetHost?: string(name='Follow302TargetHost'),
  originHost?: string(name='OriginHost', description='The HOST carried in the origin request.', example='origin.example.com'),
  originHttpPort?: string(name='OriginHttpPort', description='Port of the origin server when using the HTTP protocol for origin requests.', example='8080'),
  originHttpsPort?: string(name='OriginHttpsPort', description='Port of the origin server when using the HTTPS protocol for origin requests.', example='4433'),
  originMtls?: string(name='OriginMtls', description='mTLS switch. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  originReadTimeout?: string(name='OriginReadTimeout'),
  originScheme?: string(name='OriginScheme', description='Protocol used for the origin request. Possible values:
- http: Use HTTP protocol for origin requests.
- https: Use HTTPS protocol for origin requests.
- follow: Follow the client\\\\"s protocol for origin requests.', example='http'),
  originSni?: string(name='OriginSni', description='SNI carried in the origin request.', example='origin.example.com'),
  originVerify?: string(name='OriginVerify', description='Origin certificate verification switch. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  range?: string(name='Range', description='Use range chunking for origin downloads. Possible values:
- on: Enable
- off: Disable
- force: Force', example='on'),
  rangeChunkSize?: string(name='RangeChunkSize'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding global configurations. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding global configurations. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding global configurations.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='340035003106221'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the version of the site where the configuration takes effect. The default is version 0.', example='1'),
}

model CreateOriginRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateOriginRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOriginRuleResponseBody(name='body'),
}

/**
 * @summary Create a new origin rule configuration for the site
 *
 * @param request CreateOriginRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOriginRuleResponse
 */
@context("createOriginRuleWithContext")
async function createOriginRuleWithOptions(request: CreateOriginRuleRequest, runtime: $RuntimeOptions): CreateOriginRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dnsRecord)) {
    query['DnsRecord'] = request.dnsRecord;
  }
  if (!$isNull(request.follow302Enable)) {
    query['Follow302Enable'] = request.follow302Enable;
  }
  if (!$isNull(request.follow302MaxTries)) {
    query['Follow302MaxTries'] = request.follow302MaxTries;
  }
  if (!$isNull(request.follow302RetainArgs)) {
    query['Follow302RetainArgs'] = request.follow302RetainArgs;
  }
  if (!$isNull(request.follow302RetainHeader)) {
    query['Follow302RetainHeader'] = request.follow302RetainHeader;
  }
  if (!$isNull(request.follow302TargetHost)) {
    query['Follow302TargetHost'] = request.follow302TargetHost;
  }
  if (!$isNull(request.originHost)) {
    query['OriginHost'] = request.originHost;
  }
  if (!$isNull(request.originHttpPort)) {
    query['OriginHttpPort'] = request.originHttpPort;
  }
  if (!$isNull(request.originHttpsPort)) {
    query['OriginHttpsPort'] = request.originHttpsPort;
  }
  if (!$isNull(request.originMtls)) {
    query['OriginMtls'] = request.originMtls;
  }
  if (!$isNull(request.originReadTimeout)) {
    query['OriginReadTimeout'] = request.originReadTimeout;
  }
  if (!$isNull(request.originScheme)) {
    query['OriginScheme'] = request.originScheme;
  }
  if (!$isNull(request.originSni)) {
    query['OriginSni'] = request.originSni;
  }
  if (!$isNull(request.originVerify)) {
    query['OriginVerify'] = request.originVerify;
  }
  if (!$isNull(request.range)) {
    query['Range'] = request.range;
  }
  if (!$isNull(request.rangeChunkSize)) {
    query['RangeChunkSize'] = request.rangeChunkSize;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateOriginRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a new origin rule configuration for the site
 *
 * @param request CreateOriginRuleRequest
 * @return CreateOriginRuleResponse
 */
async function createOriginRule(request: CreateOriginRuleRequest): CreateOriginRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createOriginRuleWithOptions(request, runtime);
}

model CreatePageRequest {
  content?: string(name='Content', description='The Base64-encoded page content. Example: "PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4=", which indicates "hello page".', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header. Valid values:

*   text/html
*   application/json

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='The description of the page.', example='a custom deny page'),
  name?: string(name='Name', description='The name of the custom error page.

This parameter is required.', example='example'),
}

model CreatePageResponseBody = {
  id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePageResponseBody(name='body'),
}

/**
 * @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
 *
 * @param request CreatePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePageResponse
 */
@context("createPageWithContext")
async function createPageWithOptions(request: CreatePageRequest, runtime: $RuntimeOptions): CreatePageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.content)) {
    body['Content'] = request.content;
  }
  if (!$isNull(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
 *
 * @param request CreatePageRequest
 * @return CreatePageResponse
 */
async function createPage(request: CreatePageRequest): CreatePageResponse {
  var runtime = new $RuntimeOptions{};
  return createPageWithOptions(request, runtime);
}

model CreateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey', description='The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_cross_account, or when the SourceType is S3 and AuthType is private.', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
    authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:

*   **public**: public read. Select this value when the origin type is OSS or S3 and the origin access is public read.
*   **private**: private read. Select this value when the origin type is S3 and the origin access is private read.
*   **private_same_account**: private read under the same account. Select this value when the origin type is OSS, the origins belong to the same Alibaba Cloud account, and the origins have private read access.
*   **private_cross_account**: private read cross accounts. Select this value when the origin type is OSS, the origins belong to different Alibaba Cloud accounts, and the origins have private read access.', example='private'),
    region?: string(name='Region', description='The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.', example='us-east-1'),
    secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='VIxuvJSA2S03f******kp208dy5w7'),
    version?: string(name='Version', description='The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:

*   **v2**
*   **v4**

If you leave this parameter empty, the default value v4 is used.', example='v4'),
  }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comment of the record. The maximum length is 100 characters.', example='This is a remark.'),
  data?: {
    algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.', example='1'),
    certificate?: string(name='Certificate', description='The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.', example='dGVzdGFkYWxrcw=='),
    fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. This parameter is required when you add a SSHFP record.', example='abcdef1234567890'),
    flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.', example='128'),
    keyTag?: int32(name='KeyTag', description='The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.', example='0'),
    matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
    port?: int32(name='Port', description='The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.', example='0'),
    priority?: int32(name='Priority', description='The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='10'),
    selector?: int32(name='Selector', description='The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
    tag?: string(name='Tag', description='The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record. Valid values:

*   **issue**: indicates that a CA is authorized to issue a certificate for the domain name. This is usually followed by the domain name of the CA.
*   **issuewild**: indicates that a CA is authorized to issue a wildcard certificate (such as \\\\*.example.com) for the domain name.
*   **iodef**: specifies a URI to receive reports about CAA record violations.', example='issue'),
    type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.', example='RSA'),
    usage?: int32(name='Usage', description='The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
    value?: string(name='Value', description='Record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on types of records:

*   **A/AAAA**: the IP address(es). Separate IP addresses with commas (,). You must have at least one IPv4 address.
*   **CNAME**: the target domain name.
*   **NS**: the name servers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
    weight?: int32(name='Weight', description='The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.', example='0'),
  }(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [References](https://www.alibabacloud.com/help/doc-detail/2708761.html) .

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   follow_hostname: Follow the host record.
*   follow_origin_domain: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='www.example.com'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is used by default.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='30'),
  type?: string(name='Type', description='The type of the DNS record. For example, A/AAAA, TXT, MX, or CNAME.

This parameter is required.', example='A/AAAA'),
}

model CreateRecordShrinkRequest {
  authConfShrink?: string(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comment of the record. The maximum length is 100 characters.', example='This is a remark.'),
  dataShrink?: string(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [References](https://www.alibabacloud.com/help/doc-detail/2708761.html) .

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   follow_hostname: Follow the host record.
*   follow_origin_domain: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='www.example.com'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is used by default.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='30'),
  type?: string(name='Type', description='The type of the DNS record. For example, A/AAAA, TXT, MX, or CNAME.

This parameter is required.', example='A/AAAA'),
}

model CreateRecordResponseBody = {
  recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model CreateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecordResponseBody(name='body'),
}

/**
 * @summary Creates a DNS record for a specific website.
 *
 * @param tmpReq CreateRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRecordResponse
 */
@context("createRecordWithContext")
async function createRecordWithOptions(tmpReq: CreateRecordRequest, runtime: $RuntimeOptions): CreateRecordResponse {
  tmpReq.validate();
  var request = new CreateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.authConf)) {
    request.authConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authConf, 'AuthConf', 'json');
  }
  if (!$isNull(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!$isNull(request.authConfShrink)) {
    query['AuthConf'] = request.authConfShrink;
  }
  if (!$isNull(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!$isNull(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!$isNull(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!$isNull(request.hostPolicy)) {
    query['HostPolicy'] = request.hostPolicy;
  }
  if (!$isNull(request.proxied)) {
    query['Proxied'] = request.proxied;
  }
  if (!$isNull(request.recordName)) {
    query['RecordName'] = request.recordName;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a DNS record for a specific website.
 *
 * @param request CreateRecordRequest
 * @return CreateRecordResponse
 */
async function createRecord(request: CreateRecordRequest): CreateRecordResponse {
  var runtime = new $RuntimeOptions{};
  return createRecordWithOptions(request, runtime);
}

model CreateRedirectRuleRequest {
  reserveQueryString?: string(name='ReserveQueryString', description='Preserve query string. Value range:

- on: Enabled.
- off: Disabled.

This parameter is required.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the version of the site for which the configuration will take effect. The default is version 0.', example='0'),
  statusCode?: string(name='StatusCode', description='Response status code used by the node to respond to the client with the redirect address. Value range:

- 301
- 302
- 303
- 307
- 308

This parameter is required.', example='301'),
  targetUrl?: string(name='TargetUrl', description='Target URL after redirection.

This parameter is required.', example='http://www.exapmle.com/index.html'),
  type?: string(name='Type', description='Redirect type. Value range:

- static: Static mode.
- dynamic: Dynamic mode.

This parameter is required.', example='static'),
}

model CreateRedirectRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  requestId?: string(name='RequestId', description='Request ID.', example='1FCB0DA6-9B6D-509D-B91C-B9B9F0780D0E'),
}

model CreateRedirectRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRedirectRuleResponseBody(name='body'),
}

/**
 * @summary Add a Redirect Rule
 *
 * @param request CreateRedirectRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRedirectRuleResponse
 */
@context("createRedirectRuleWithContext")
async function createRedirectRuleWithOptions(request: CreateRedirectRuleRequest, runtime: $RuntimeOptions): CreateRedirectRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.reserveQueryString)) {
    query['ReserveQueryString'] = request.reserveQueryString;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.statusCode)) {
    query['StatusCode'] = request.statusCode;
  }
  if (!$isNull(request.targetUrl)) {
    query['TargetUrl'] = request.targetUrl;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRedirectRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add a Redirect Rule
 *
 * @param request CreateRedirectRuleRequest
 * @return CreateRedirectRuleResponse
 */
async function createRedirectRule(request: CreateRedirectRuleRequest): CreateRedirectRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createRedirectRuleWithOptions(request, runtime);
}

model CreateRewriteUrlRuleRequest {
  queryString?: string(name='QueryString', description='The query string after rewriting.', example='example=123'),
  rewriteQueryStringType?: string(name='RewriteQueryStringType', description='Query string rewrite type. Value range:

- static: static mode.
- dynamic: dynamic mode.', example='static', nullable=false),
  rewriteUriType?: string(name='RewriteUriType', description='URI rewrite type. Value range:

- static: static mode.
- dynamic: dynamic mode.', example='static', nullable=false),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: set the value to true
- Match specific requests: set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: enable.
- off: disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='0'),
  uri?: string(name='Uri', description='The target URI after rewriting.', example='/image/example.jpg'),
}

model CreateRewriteUrlRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='39237781679****'),
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CreateRewriteUrlRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRewriteUrlRuleResponseBody(name='body'),
}

/**
 * @summary Add Rewrite URL Rule
 *
 * @param request CreateRewriteUrlRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRewriteUrlRuleResponse
 */
@context("createRewriteUrlRuleWithContext")
async function createRewriteUrlRuleWithOptions(request: CreateRewriteUrlRuleRequest, runtime: $RuntimeOptions): CreateRewriteUrlRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.queryString)) {
    query['QueryString'] = request.queryString;
  }
  if (!$isNull(request.rewriteQueryStringType)) {
    query['RewriteQueryStringType'] = request.rewriteQueryStringType;
  }
  if (!$isNull(request.rewriteUriType)) {
    query['RewriteUriType'] = request.rewriteUriType;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.uri)) {
    query['Uri'] = request.uri;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRewriteUrlRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Add Rewrite URL Rule
 *
 * @param request CreateRewriteUrlRuleRequest
 * @return CreateRewriteUrlRuleResponse
 */
async function createRewriteUrlRule(request: CreateRewriteUrlRuleRequest): CreateRewriteUrlRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createRewriteUrlRuleWithOptions(request, runtime);
}

model CreateRoutineRequest {
  description?: string(name='Description', description='The routine description.', example='the description of this routine'),
  name?: string(name='Name', description='The routine name, which must be unique in the same account.

This parameter is required.', example='test-routine1'),
}

model CreateRoutineResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model CreateRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineResponseBody(name='body'),
}

/**
 * @summary Creates a routine.
 *
 * @param request CreateRoutineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoutineResponse
 */
@context("createRoutineWithContext")
async function createRoutineWithOptions(request: CreateRoutineRequest, runtime: $RuntimeOptions): CreateRoutineResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRoutine',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a routine.
 *
 * @param request CreateRoutineRequest
 * @return CreateRoutineResponse
 */
async function createRoutine(request: CreateRoutineRequest): CreateRoutineResponse {
  var runtime = new $RuntimeOptions{};
  return createRoutineWithOptions(request, runtime);
}

model CreateRoutineRelatedRecordRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='CreateRoutineRelatedRecord'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='test-record-1.example.com'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='54362329990032'),
}

model CreateRoutineRelatedRecordResponseBody = {
  recordId?: long(name='RecordId'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model CreateRoutineRelatedRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineRelatedRecordResponseBody(name='body'),
}

/**
 * @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
 *
 * @param request CreateRoutineRelatedRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoutineRelatedRecordResponse
 */
@context("createRoutineRelatedRecordWithContext")
async function createRoutineRelatedRecordWithOptions(request: CreateRoutineRelatedRecordRequest, runtime: $RuntimeOptions): CreateRoutineRelatedRecordResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRoutineRelatedRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
 *
 * @param request CreateRoutineRelatedRecordRequest
 * @return CreateRoutineRelatedRecordResponse
 */
async function createRoutineRelatedRecord(request: CreateRoutineRelatedRecordRequest): CreateRoutineRelatedRecordResponse {
  var runtime = new $RuntimeOptions{};
  return createRoutineRelatedRecordWithOptions(request, runtime);
}

model CreateRoutineRouteRequest {
  bypass?: string(name='Bypass', example='on'),
  fallback?: string(name='Fallback'),
  routeEnable?: string(name='RouteEnable', example='on'),
  routeName?: string(name='RouteName', example='test_route'),
  routineName?: string(name='RoutineName', description='This parameter is required.', example='test-routine1'),
  rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
  sequence?: int32(name='Sequence', example='1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model CreateRoutineRouteResponseBody = {
  configId?: long(name='ConfigId', example='35281609698****'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateRoutineRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineRouteResponseBody(name='body'),
}

/**
 * @summary 新增边缘函数路由配置
 *
 * @param request CreateRoutineRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoutineRouteResponse
 */
@context("createRoutineRouteWithContext")
async function createRoutineRouteWithOptions(request: CreateRoutineRouteRequest, runtime: $RuntimeOptions): CreateRoutineRouteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bypass)) {
    query['Bypass'] = request.bypass;
  }
  if (!$isNull(request.fallback)) {
    query['Fallback'] = request.fallback;
  }
  if (!$isNull(request.routeEnable)) {
    query['RouteEnable'] = request.routeEnable;
  }
  if (!$isNull(request.routeName)) {
    query['RouteName'] = request.routeName;
  }
  if (!$isNull(request.routineName)) {
    query['RoutineName'] = request.routineName;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRoutineRoute',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增边缘函数路由配置
 *
 * @param request CreateRoutineRouteRequest
 * @return CreateRoutineRouteResponse
 */
async function createRoutineRoute(request: CreateRoutineRouteRequest): CreateRoutineRouteResponse {
  var runtime = new $RuntimeOptions{};
  return createRoutineRouteWithOptions(request, runtime);
}

model CreateScheduledPreloadExecutionsRequest {
  executions?: [ 
    {
      endTime?: string(name='EndTime', description='The end time of the prefetch plans.', example='2024-06-04T02:02:09Z'),
      interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.

This parameter is required.', example='30'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.

This parameter is required.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plans.', example='2024-06-03T16:00:00Z'),
    }
  ](name='Executions', description='The scheduled prefetch plans to create.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the prefetch task, which is generated by calling the [CreateScheduledPreloadJob](https://help.aliyun.com/document_detail/2850459.html) operation.', example='CreateScheduledPreloadExecutions'),
}

model CreateScheduledPreloadExecutionsShrinkRequest {
  executionsShrink?: string(name='Executions', description='The scheduled prefetch plans to create.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the prefetch task, which is generated by calling the [CreateScheduledPreloadJob](https://help.aliyun.com/document_detail/2850459.html) operation.', example='CreateScheduledPreloadExecutions'),
}

model CreateScheduledPreloadExecutionsResponseBody = {
  failedExecutions?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      endTime?: string(name='EndTime', description='The end time of the prefetch plans.', example='2024-06-03T02:43:35Z'),
      id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
      interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
      jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plans.', example='2024-06-02T02:43:35Z'),
      status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='running'),
    }
  ](name='FailedExecutions', description='The information about prefetch plans that failed to be created.'),
  failedMessages?: [ string ](name='FailedMessages', description='The information about plan failures.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
  successCount?: int32(name='SuccessCount', description='The number of prefetch plans that are created.', example='12'),
  successExecutions?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      endTime?: string(name='EndTime', description='The end time of the prefetch plans.', example='2024-06-03T02:43:35Z'),
      id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
      interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
      jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plans.', example='2024-06-02T02:43:35Z'),
      status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='failed'),
    }
  ](name='SuccessExecutions', description='The information about created prefetch plans.'),
  totalCount?: int32(name='TotalCount', description='The total number of new plans requested.', example='2'),
}

model CreateScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
 * @summary Creates scheduled prefetch plans.
 *
 * @param tmpReq CreateScheduledPreloadExecutionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduledPreloadExecutionsResponse
 */
@context("createScheduledPreloadExecutionsWithContext")
async function createScheduledPreloadExecutionsWithOptions(tmpReq: CreateScheduledPreloadExecutionsRequest, runtime: $RuntimeOptions): CreateScheduledPreloadExecutionsResponse {
  tmpReq.validate();
  var request = new CreateScheduledPreloadExecutionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.executions)) {
    request.executionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executions, 'Executions', 'json');
  }
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!$isNull(request.executionsShrink)) {
    body['Executions'] = request.executionsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateScheduledPreloadExecutions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates scheduled prefetch plans.
 *
 * @param request CreateScheduledPreloadExecutionsRequest
 * @return CreateScheduledPreloadExecutionsResponse
 */
async function createScheduledPreloadExecutions(request: CreateScheduledPreloadExecutionsRequest): CreateScheduledPreloadExecutionsResponse {
  var runtime = new $RuntimeOptions{};
  return createScheduledPreloadExecutionsWithOptions(request, runtime);
}

model CreateScheduledPreloadJobRequest {
  insertWay?: string(name='InsertWay', description='The method to submit URLs to be prefetched.

Valid values:

*   **textBox**
*   **oss**

This parameter is required.', example='oss'),
  name?: string(name='Name', description='The name of the scheduled prefetch task.

This parameter is required.', example='example'),
  ossUrl?: string(name='OssUrl', description='The URL of the OSS object that stores the URLs to be prefetched.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='190007158391808'),
  urlList?: string(name='UrlList', description='The URLs to be prefetched. This parameter is required if you set InsertWay to textBox.', example='http://testurl.com/a.txt
http://testurl.com/b.txt'),
}

model CreateScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  createdAt?: string(name='CreatedAt', description='The time when the task was created.', example='2023-06-05T10:04:20+0800'),
  domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
  errorInfo?: string(name='ErrorInfo', description='The error message. Multiple error messages are separated by commas (,). Valid values:

*   **InvalidUrl**: The URL format is invalid.
*   **InvalidDomain**: The domain name fails the domain ownership verification.
*   **QuotaExcess**: the quota limit has been reached.
*   **OtherErrors**: other errors.', example='InvalidDomain'),
  failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
  id?: string(name='Id', description='The ID of the scheduled prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
  name?: string(name='Name', description='The task name.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
  siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
  taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
  taskType?: string(name='TaskType', description='The task type (refresh or preload).', example='preload'),
  urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
  urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
}

model CreateScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Adds a scheduled prefetch task.
 *
 * @param request CreateScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduledPreloadJobResponse
 */
@context("createScheduledPreloadJobWithContext")
async function createScheduledPreloadJobWithOptions(request: CreateScheduledPreloadJobRequest, runtime: $RuntimeOptions): CreateScheduledPreloadJobResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.insertWay)) {
    body['InsertWay'] = request.insertWay;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.ossUrl)) {
    body['OssUrl'] = request.ossUrl;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!$isNull(request.urlList)) {
    body['UrlList'] = request.urlList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a scheduled prefetch task.
 *
 * @param request CreateScheduledPreloadJobRequest
 * @return CreateScheduledPreloadJobResponse
 */
async function createScheduledPreloadJob(request: CreateScheduledPreloadJobRequest): CreateScheduledPreloadJobResponse {
  var runtime = new $RuntimeOptions{};
  return createScheduledPreloadJobWithOptions(request, runtime);
}

model CreateSiteRequest {
  accessType?: string(name='AccessType', description='The DNS setup. Valid values:

*   **NS**
*   **CNAME**

This parameter is required.', example='NS'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland

This parameter is required.', example='domestic'),
  instanceId?: string(name='InstanceId', description='The instance ID, which can be obtained by calling the [ListUserRatePlanInstances](https://help.aliyun.com/document_detail/2852398.html) operation. Specify at least one of the instance ID and website ID. If you specify both of them, the instance ID is used.

This parameter is required.', example='dbaudit-cn-nwy349jdb03'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If you leave this parameter empty, the system uses the default resource group ID.', example='rg-acfmw4znnok****'),
  siteName?: string(name='SiteName', description='The website name.

This parameter is required.', example='CreateSite'),
}

model CreateSiteResponseBody = {
  nameServerList?: string(name='NameServerList', description='The nameservers assigned by ESA. The values are separated by commas (,). This parameter is returned if you set AccessType to NS. In this case, you must change the nameservers of your domain to the assigned ones. Then, you can verify the domain ownership and activate your website.', example='ns1.example.com,ns2.example.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  verifyCode?: string(name='VerifyCode', description='The verification code for the website. If you set AccessType to CNAME, you need to add a TXT record whose hostname is **_esaauth.[websiteDomainName]** and record value is the value of VerifyCode to the DNS records of your domain. ****Then, you can verify the domain ownership and activate your website.', example='verify_aah9dioasmov****'),
}

model CreateSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteResponseBody(name='body'),
}

/**
 * @summary Adds a website.
 *
 * @description *   Make sure that you have an available plan before you add a website.
 * *   Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
 *
 * @param request CreateSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteResponse
 */
@context("createSiteWithContext")
async function createSiteWithOptions(request: CreateSiteRequest, runtime: $RuntimeOptions): CreateSiteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!$isNull(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a website.
 *
 * @description *   Make sure that you have an available plan before you add a website.
 * *   Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
 *
 * @param request CreateSiteRequest
 * @return CreateSiteResponse
 */
async function createSite(request: CreateSiteRequest): CreateSiteResponse {
  var runtime = new $RuntimeOptions{};
  return createSiteWithOptions(request, runtime);
}

model CreateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies', description='The cookie fields.'),
  requestHeaders?: [ string ](name='RequestHeaders', description='The request header fields.'),
  responseHeaders?: [ string ](name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='11223'),
}

model CreateSiteCustomLogShrinkRequest {
  cookiesShrink?: string(name='Cookies', description='The cookie fields.'),
  requestHeadersShrink?: string(name='RequestHeaders', description='The request header fields.'),
  responseHeadersShrink?: string(name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='11223'),
}

model CreateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='073bd613-6e72-4461-b6bc-19326dfc6a9c'),
}

model CreateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @description *   **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
 * *   **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
 * *   **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
 *
 * @param tmpReq CreateSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteCustomLogResponse
 */
@context("createSiteCustomLogWithContext")
async function createSiteCustomLogWithOptions(tmpReq: CreateSiteCustomLogRequest, runtime: $RuntimeOptions): CreateSiteCustomLogResponse {
  tmpReq.validate();
  var request = new CreateSiteCustomLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.cookies)) {
    request.cookiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cookies, 'Cookies', 'json');
  }
  if (!$isNull(tmpReq.requestHeaders)) {
    request.requestHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaders, 'RequestHeaders', 'json');
  }
  if (!$isNull(tmpReq.responseHeaders)) {
    request.responseHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaders, 'ResponseHeaders', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.cookiesShrink)) {
    body['Cookies'] = request.cookiesShrink;
  }
  if (!$isNull(request.requestHeadersShrink)) {
    body['RequestHeaders'] = request.requestHeadersShrink;
  }
  if (!$isNull(request.responseHeadersShrink)) {
    body['ResponseHeaders'] = request.responseHeadersShrink;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @description *   **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
 * *   **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
 * *   **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
 *
 * @param request CreateSiteCustomLogRequest
 * @return CreateSiteCustomLogResponse
 */
async function createSiteCustomLog(request: CreateSiteCustomLogRequest): CreateSiteCustomLogResponse {
  var runtime = new $RuntimeOptions{};
  return createSiteCustomLogWithOptions(request, runtime);
}

model CreateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   oversea: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

*   sls: Alibaba Cloud Simple Log Service (SLS).
*   http: HTTP server.
*   aws3: Amazon Simple Storage Service (S3).
*   oss: Alibaba Cloud Object Storage Service (OSS).
*   kafka: Kafka.
*   aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0.0'),
  fieldName?: string(name='FieldName', description='The log fields, which are separated by commas (,).

This parameter is required.', example='user_agent,ip_adress,ip_port'),
  filterVer?: string(name='FilterVer'),
  httpDelivery?: {
    compress?: string(name='Compress', description='The compression method. By default, data is not compressed.', example='gzip'),
    destUrl?: string(name='DestUrl', description='The address of the HTTP server.', example='http://xxx.aliyun.com/v1/log/upload'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam', description='The custom headers.'),
    lastLogSplit?: boolean(name='LastLogSplit'),
    logBodyPrefix?: string(name='LogBodyPrefix', description='The prefix of the log delivery package.', example='cdnVersion:1.0'),
    logBodySuffix?: string(name='LogBodySuffix', description='The suffix of the log delivery package.', example='cdnVersion:1.0'),
    logSplit?: boolean(name='LogSplit'),
    logSplitWords?: string(name='LogSplitWords'),
    maxBatchMB?: long(name='MaxBatchMB', description='The maximum size of data for each delivery. Unit: MB.', example='5'),
    maxBatchSize?: long(name='MaxBatchSize', description='The maximum number of entries for each delivery.', example='1000'),
    maxRetry?: long(name='MaxRetry', description='The maximum number of retries.', example='3'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam', description='The custom query parameters.'),
    standardAuthOn?: boolean(name='StandardAuthOn', description='Specifies whether to use server authentication.', example='true'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime', description='The validity period of the signature.

>  The value must be greater than 0. We recommend that you specify a value that is greater than 300.', example='300'),
      privateKey?: string(name='PrivateKey', description='The private key.', example='***'),
      urlPath?: string(name='UrlPath', description='The URI path for server authentication.', example='v1/log/upload'),
    }(name='StandardAuthParam', description='The authentication configurations.'),
    transformTimeout?: long(name='TransformTimeout', description='The timeout period. Unit: seconds.', example='10'),
  }(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer', description='The load balancing method.', example='kafka.LeastBytes'),
    brokers?: [ string ](name='Brokers', description='The brokers.'),
    compress?: string(name='Compress', description='The compression method.', example='gzip'),
    machanismType?: string(name='MachanismType', description='The encryption method.', example='plain'),
    password?: string(name='Password', description='The password.', example='***'),
    topic?: string(name='Topic', description='The topic.', example='dqc_test2'),
    userAuth?: boolean(name='UserAuth', description='Specifies whether to enable authentication.', example='true'),
    userName?: string(name='UserName', description='The username.', example='xxx'),
  }(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid', description='The ID of your Alibaba Cloud account.', example='1234***'),
    bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='test_rlog'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region in which the bucket is located.', example='cn-beijing'),
  }(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey', description='The access key ID of your Amazon S3 account.', example='yourAccessKeyID'),
    bucketPath?: string(name='BucketPath', description='The directory in the bucket.', example='logriver-test/log'),
    endpoint?: string(name='Endpoint', description='The endpoint. This parameter is required when the S3Cmpt parameter is set to true.', example='https://s3.oss-cn-hangzhou.aliyuncs.com'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region ID of the service.', example='cn-beijing'),
    s3Cmpt?: boolean(name='S3Cmpt', description='Specifies whether the service is compatible with Amazon S3.', example='true'),
    secretKey?: string(name='SecretKey', description='The secret access key of your Amazon S3 account.', example='LDSIKh***'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='12312312112***'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore', description='The name of the Logstore.', example='accesslog-test'),
    SLSProject?: string(name='SLSProject', description='The name of the SLS project.', example='dcdn-test20240417'),
    SLSRegion?: string(name='SLSRegion', description='The region in which the SLS project resides.', example='cn-hangzhou'),
  }(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='dcdn-test-task'),
}

model CreateSiteDeliveryTaskShrinkRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   oversea: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

*   sls: Alibaba Cloud Simple Log Service (SLS).
*   http: HTTP server.
*   aws3: Amazon Simple Storage Service (S3).
*   oss: Alibaba Cloud Object Storage Service (OSS).
*   kafka: Kafka.
*   aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0.0'),
  fieldName?: string(name='FieldName', description='The log fields, which are separated by commas (,).

This parameter is required.', example='user_agent,ip_adress,ip_port'),
  filterVer?: string(name='FilterVer'),
  httpDeliveryShrink?: string(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDeliveryShrink?: string(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDeliveryShrink?: string(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3DeliveryShrink?: string(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='12312312112***'),
  slsDeliveryShrink?: string(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='dcdn-test-task'),
}

model CreateSiteDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   oversea: outside the Chinese mainland.', example='cn'),
  requestId?: string(name='RequestId', description='The request ID.', example='9358E852-992D-5BC7-8BD7-975CA02773A8'),
  siteId?: long(name='SiteId', description='The website ID.[](~~2850189~~)', example='123456****'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='er-oss'),
}

model CreateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Creates a real-time log delivery task.
 *
 * @param tmpReq CreateSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteDeliveryTaskResponse
 */
@context("createSiteDeliveryTaskWithContext")
async function createSiteDeliveryTaskWithOptions(tmpReq: CreateSiteDeliveryTaskRequest, runtime: $RuntimeOptions): CreateSiteDeliveryTaskResponse {
  tmpReq.validate();
  var request = new CreateSiteDeliveryTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.httpDelivery)) {
    request.httpDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpDelivery, 'HttpDelivery', 'json');
  }
  if (!$isNull(tmpReq.kafkaDelivery)) {
    request.kafkaDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kafkaDelivery, 'KafkaDelivery', 'json');
  }
  if (!$isNull(tmpReq.ossDelivery)) {
    request.ossDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ossDelivery, 'OssDelivery', 'json');
  }
  if (!$isNull(tmpReq.s3Delivery)) {
    request.s3DeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.s3Delivery, 'S3Delivery', 'json');
  }
  if (!$isNull(tmpReq.slsDelivery)) {
    request.slsDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slsDelivery, 'SlsDelivery', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!$isNull(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!$isNull(request.deliveryType)) {
    body['DeliveryType'] = request.deliveryType;
  }
  if (!$isNull(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!$isNull(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!$isNull(request.filterVer)) {
    body['FilterVer'] = request.filterVer;
  }
  if (!$isNull(request.httpDeliveryShrink)) {
    body['HttpDelivery'] = request.httpDeliveryShrink;
  }
  if (!$isNull(request.kafkaDeliveryShrink)) {
    body['KafkaDelivery'] = request.kafkaDeliveryShrink;
  }
  if (!$isNull(request.ossDeliveryShrink)) {
    body['OssDelivery'] = request.ossDeliveryShrink;
  }
  if (!$isNull(request.s3DeliveryShrink)) {
    body['S3Delivery'] = request.s3DeliveryShrink;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!$isNull(request.slsDeliveryShrink)) {
    body['SlsDelivery'] = request.slsDeliveryShrink;
  }
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a real-time log delivery task.
 *
 * @param request CreateSiteDeliveryTaskRequest
 * @return CreateSiteDeliveryTaskResponse
 */
async function createSiteDeliveryTask(request: CreateSiteDeliveryTaskRequest): CreateSiteDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createSiteDeliveryTaskWithOptions(request, runtime);
}

model CreateSlrRoleForRealtimeLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model CreateSlrRoleForRealtimeLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSlrRoleForRealtimeLogResponseBody(name='body'),
}

/**
 * @summary 创建一个实时日志slr角色
 *
 * @param request CreateSlrRoleForRealtimeLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSlrRoleForRealtimeLogResponse
 */
async function createSlrRoleForRealtimeLogWithOptions(runtime: $RuntimeOptions): CreateSlrRoleForRealtimeLogResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'CreateSlrRoleForRealtimeLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建一个实时日志slr角色
 *
 * @return CreateSlrRoleForRealtimeLogResponse
 */
async function createSlrRoleForRealtimeLog(): CreateSlrRoleForRealtimeLogResponse {
  var runtime = new $RuntimeOptions{};
  return createSlrRoleForRealtimeLogWithOptions(runtime);
}

model CreateUrlObservationRequest {
  sdkType?: string(name='SdkType', description='This parameter is required.', example='automatic'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456******'),
  url?: string(name='Url', description='This parameter is required.', example='example.com/test'),
}

model CreateUrlObservationResponseBody = {
  configId?: long(name='ConfigId', example='35281609698****'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model CreateUrlObservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUrlObservationResponseBody(name='body'),
}

/**
 * @summary 创建网页监测配置
 *
 * @param request CreateUrlObservationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUrlObservationResponse
 */
@context("createUrlObservationWithContext")
async function createUrlObservationWithOptions(request: CreateUrlObservationRequest, runtime: $RuntimeOptions): CreateUrlObservationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.sdkType)) {
    query['SdkType'] = request.sdkType;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateUrlObservation',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网页监测配置
 *
 * @param request CreateUrlObservationRequest
 * @return CreateUrlObservationResponse
 */
async function createUrlObservation(request: CreateUrlObservationRequest): CreateUrlObservationResponse {
  var runtime = new $RuntimeOptions{};
  return createUrlObservationWithOptions(request, runtime);
}

model CreateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud SLS.
2.  http: HTTP server.
3.  aws3: Amazon S3.
4.  oss: Alibaba Cloud OSS.
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0'),
  fieldName?: string(name='FieldName', description='The log field. If you specify multiple fields, separate them with commas (,).

This parameter is required.', example='user_agent,ip_address,ip_port'),
  filterVer?: string(name='FilterVer'),
  httpDelivery?: {
    compress?: string(name='Compress', description='The compression method.', example='gzip'),
    destUrl?: string(name='DestUrl', description='The address of the HTTP server.', example='http://xxx.aliyun.com/v1/log/upload'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam', description='The custom headers.'),
    lastLogSplit?: boolean(name='LastLogSplit', description='The ending separator.', example='\\\\n'),
    logBodyPrefix?: string(name='LogBodyPrefix', description='The prefix of the log delivery package.', example='cdnVersion:1.0'),
    logBodySuffix?: string(name='LogBodySuffix', description='The suffix of the log delivery package.', example='cdnVersion:1.0'),
    logSplit?: boolean(name='LogSplit', description='Specifies whether to enable log splitting. Default value: true.', example='true'),
    logSplitWords?: string(name='LogSplitWords', description='The log separator.', example='\\\\n'),
    maxBatchMB?: long(name='MaxBatchMB', description='The maximum size of data for each delivery. Unit: MB.', example='5'),
    maxBatchSize?: long(name='MaxBatchSize', description='The maximum number of entries for each delivery.', example='1000'),
    maxRetry?: long(name='MaxRetry', description='The maximum number of retries.', example='3'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam', description='The custom query parameters.'),
    standardAuthOn?: boolean(name='StandardAuthOn', description='Specifies whether to use server authentication.', example='true'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime', description='The validity period of the signature.', example='300'),
      privateKey?: string(name='PrivateKey', description='The private key.', example='xxxx'),
      urlPath?: string(name='UrlPath', description='The URL path.', example='v1/log/upload'),
    }(name='StandardAuthParam', description='The authentication configurations.'),
    transformTimeout?: long(name='TransformTimeout', description='The timeout period. Unit: seconds.', example='10'),
  }(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer', description='The load balancing method.', example='kafka.LeastBytes'),
    brokers?: [ string ](name='Brokers', description='The brokers.'),
    compress?: string(name='Compress', description='The compression method. By default, data is not compressed.', example='gzip'),
    machanismType?: string(name='MachanismType', description='The encryption method.', example='plain'),
    password?: string(name='Password', description='The password.', example='xxx'),
    topic?: string(name='Topic', description='The topic.', example='dqc_test2'),
    userAuth?: boolean(name='UserAuth', description='Specifies whether to enable authentication.', example='true'),
    userName?: string(name='UserName', description='The username.', example='xxx'),
  }(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid', description='The ID of your Alibaba Cloud account.', example='1234***'),
    bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='test_rlog'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region in which the bucket is located.', example='cn-shanghai'),
  }(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey', description='The access key ID of your Amazon S3 account.', example='g0f46623ll0g0'),
    bucketPath?: string(name='BucketPath', description='The directory in the bucket.', example='logriver-test/log'),
    endpoint?: string(name='Endpoint', description='The endpoint.', example='https://s3.oss-cn-hangzhou.aliyuncs.com'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region ID of the service.', example='cn-shanghai'),
    s3Cmpt?: boolean(name='S3Cmpt', description='Specifies whether the service is compatible with Amazon S3.', example='true'),
    secretKey?: string(name='SecretKey', description='The secret access key of your Amazon S3 account.', example='***'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore', description='The name of the SLS Logstore.', example='accesslog-test'),
    SLSProject?: string(name='SLSProject', description='The name of the SLS project.', example='dcdn-test20240417'),
    SLSRegion?: string(name='SLSRegion', description='The region in which the SLS project resides.', example='cn-hangzhou'),
  }(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The task name.

This parameter is required.', example='test_project'),
}

model CreateUserDeliveryTaskShrinkRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud SLS.
2.  http: HTTP server.
3.  aws3: Amazon S3.
4.  oss: Alibaba Cloud OSS.
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0'),
  fieldName?: string(name='FieldName', description='The log field. If you specify multiple fields, separate them with commas (,).

This parameter is required.', example='user_agent,ip_address,ip_port'),
  filterVer?: string(name='FilterVer'),
  httpDeliveryShrink?: string(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDeliveryShrink?: string(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDeliveryShrink?: string(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3DeliveryShrink?: string(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  slsDeliveryShrink?: string(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The task name.

This parameter is required.', example='test_project'),
}

model CreateUserDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
  requestId?: string(name='RequestId', description='The request ID.', example='2CCD40B1-3F20-5FF0-8A67-E3F34B87744F'),
  status?: string(name='Status', description='The status of the delivery task.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='er-http'),
}

model CreateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Creates a log delivery task to ship logs to the specified destination.
 *
 * @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
 * *   **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
 * *   **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
 * *   **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
 * ## [](#)Precautions
 * *   Make sure that you have sufficient permissions to perform delivery tasks.
 * *   If you enable encryption or authentication, properly configure corresponding parameters.
 * *   Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
 * *   Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
 *
 * @param tmpReq CreateUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUserDeliveryTaskResponse
 */
@context("createUserDeliveryTaskWithContext")
async function createUserDeliveryTaskWithOptions(tmpReq: CreateUserDeliveryTaskRequest, runtime: $RuntimeOptions): CreateUserDeliveryTaskResponse {
  tmpReq.validate();
  var request = new CreateUserDeliveryTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.httpDelivery)) {
    request.httpDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpDelivery, 'HttpDelivery', 'json');
  }
  if (!$isNull(tmpReq.kafkaDelivery)) {
    request.kafkaDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kafkaDelivery, 'KafkaDelivery', 'json');
  }
  if (!$isNull(tmpReq.ossDelivery)) {
    request.ossDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ossDelivery, 'OssDelivery', 'json');
  }
  if (!$isNull(tmpReq.s3Delivery)) {
    request.s3DeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.s3Delivery, 'S3Delivery', 'json');
  }
  if (!$isNull(tmpReq.slsDelivery)) {
    request.slsDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slsDelivery, 'SlsDelivery', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!$isNull(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!$isNull(request.deliveryType)) {
    body['DeliveryType'] = request.deliveryType;
  }
  if (!$isNull(request.details)) {
    body['Details'] = request.details;
  }
  if (!$isNull(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!$isNull(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!$isNull(request.filterVer)) {
    body['FilterVer'] = request.filterVer;
  }
  if (!$isNull(request.httpDeliveryShrink)) {
    body['HttpDelivery'] = request.httpDeliveryShrink;
  }
  if (!$isNull(request.kafkaDeliveryShrink)) {
    body['KafkaDelivery'] = request.kafkaDeliveryShrink;
  }
  if (!$isNull(request.ossDeliveryShrink)) {
    body['OssDelivery'] = request.ossDeliveryShrink;
  }
  if (!$isNull(request.s3DeliveryShrink)) {
    body['S3Delivery'] = request.s3DeliveryShrink;
  }
  if (!$isNull(request.slsDeliveryShrink)) {
    body['SlsDelivery'] = request.slsDeliveryShrink;
  }
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a log delivery task to ship logs to the specified destination.
 *
 * @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
 * *   **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
 * *   **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
 * *   **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
 * ## [](#)Precautions
 * *   Make sure that you have sufficient permissions to perform delivery tasks.
 * *   If you enable encryption or authentication, properly configure corresponding parameters.
 * *   Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
 * *   Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
 *
 * @param request CreateUserDeliveryTaskRequest
 * @return CreateUserDeliveryTaskResponse
 */
async function createUserDeliveryTask(request: CreateUserDeliveryTaskRequest): CreateUserDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createUserDeliveryTaskWithOptions(request, runtime);
}

model CreateVideoProcessingRequest {
  flvSeekEnd?: string(name='FlvSeekEnd', example='end'),
  flvSeekStart?: string(name='FlvSeekStart', example='start'),
  flvVideoSeekMode?: string(name='FlvVideoSeekMode', example='by_byte'),
  mp4SeekEnd?: string(name='Mp4SeekEnd', example='end'),
  mp4SeekStart?: string(name='Mp4SeekStart', example='start'),
  rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', example='on'),
  ruleName?: string(name='RuleName', example='rule_example'),
  sequence?: int32(name='Sequence', example='1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', example='1'),
  videoSeekEnable?: string(name='VideoSeekEnable', example='on'),
}

model CreateVideoProcessingResponseBody = {
  configId?: long(name='ConfigId', example='352816**********'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CreateVideoProcessingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVideoProcessingResponseBody(name='body'),
}

/**
 * @summary 新增站点视频处理配置
 *
 * @param request CreateVideoProcessingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVideoProcessingResponse
 */
@context("createVideoProcessingWithContext")
async function createVideoProcessingWithOptions(request: CreateVideoProcessingRequest, runtime: $RuntimeOptions): CreateVideoProcessingResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.flvSeekEnd)) {
    query['FlvSeekEnd'] = request.flvSeekEnd;
  }
  if (!$isNull(request.flvSeekStart)) {
    query['FlvSeekStart'] = request.flvSeekStart;
  }
  if (!$isNull(request.flvVideoSeekMode)) {
    query['FlvVideoSeekMode'] = request.flvVideoSeekMode;
  }
  if (!$isNull(request.mp4SeekEnd)) {
    query['Mp4SeekEnd'] = request.mp4SeekEnd;
  }
  if (!$isNull(request.mp4SeekStart)) {
    query['Mp4SeekStart'] = request.mp4SeekStart;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.videoSeekEnable)) {
    query['VideoSeekEnable'] = request.videoSeekEnable;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateVideoProcessing',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增站点视频处理配置
 *
 * @param request CreateVideoProcessingRequest
 * @return CreateVideoProcessingResponse
 */
async function createVideoProcessing(request: CreateVideoProcessingRequest): CreateVideoProcessingResponse {
  var runtime = new $RuntimeOptions{};
  return createVideoProcessingWithOptions(request, runtime);
}

model CreateWafRuleRequest {
  config?: WafRuleConfig(name='Config', description='Rule configuration, specifying the detailed configuration for creating a rule.'),
  phase?: string(name='Phase', description='WAF operation phase.

This parameter is required.', example='http_custom'),
  rulesetId?: long(name='RulesetId', description='Ruleset ID.', example='10000001'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model CreateWafRuleShrinkRequest {
  configShrink?: string(name='Config', description='Rule configuration, specifying the detailed configuration for creating a rule.'),
  phase?: string(name='Phase', description='WAF operation phase.

This parameter is required.', example='http_custom'),
  rulesetId?: long(name='RulesetId', description='Ruleset ID.', example='10000001'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model CreateWafRuleResponseBody = {
  id?: long(name='Id', description='The ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) API.', example='20000001'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId', description='ID of the WAF ruleset, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2878359.html) interface.', example='10000001'),
}

model CreateWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWafRuleResponseBody(name='body'),
}

/**
 * @summary Create WAF Rule
 *
 * @param tmpReq CreateWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWafRuleResponse
 */
@context("createWafRuleWithContext")
async function createWafRuleWithOptions(tmpReq: CreateWafRuleRequest, runtime: $RuntimeOptions): CreateWafRuleResponse {
  tmpReq.validate();
  var request = new CreateWafRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.configShrink)) {
    body['Config'] = request.configShrink;
  }
  if (!$isNull(request.phase)) {
    body['Phase'] = request.phase;
  }
  if (!$isNull(request.rulesetId)) {
    body['RulesetId'] = request.rulesetId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create WAF Rule
 *
 * @param request CreateWafRuleRequest
 * @return CreateWafRuleResponse
 */
async function createWafRule(request: CreateWafRuleRequest): CreateWafRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createWafRuleWithOptions(request, runtime);
}

model CreateWafRulesetRequest {
  name?: string(name='Name', description='Ruleset name.', example='example'),
  phase?: string(name='Phase', description='WAF operation phase.

This parameter is required.', example='http_custom'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model CreateWafRulesetResponseBody = {
  id?: long(name='Id', description='Ruleset ID.', example='10000001'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreateWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWafRulesetResponseBody(name='body'),
}

/**
 * @summary Create WAF Ruleset
 *
 * @param request CreateWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWafRulesetResponse
 */
@context("createWafRulesetWithContext")
async function createWafRulesetWithOptions(request: CreateWafRulesetRequest, runtime: $RuntimeOptions): CreateWafRulesetResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create WAF Ruleset
 *
 * @param request CreateWafRulesetRequest
 * @return CreateWafRulesetResponse
 */
async function createWafRuleset(request: CreateWafRulesetRequest): CreateWafRulesetResponse {
  var runtime = new $RuntimeOptions{};
  return createWafRulesetWithOptions(request, runtime);
}

model CreateWaitingRoomRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.

This parameter is required.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', description='The domain name.

This parameter is required.', example='example.com'),
      path?: string(name='Path', description='The path.

This parameter is required.', example='/test'),
      subdomain?: string(name='Subdomain', description='The subdomain.

This parameter is required.', example='test.'),
    }
  ](name='HostNameAndPath', description='The hostname and path.

This parameter is required.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='enus'),
  name?: string(name='Name', description='The name of the waiting room.

This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.

This parameter is required.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.

This parameter is required.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429

This parameter is required.', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.

This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.

This parameter is required.', example='300'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom

This parameter is required.', example='default'),
}

model CreateWaitingRoomShrinkRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.

This parameter is required.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  hostNameAndPathShrink?: string(name='HostNameAndPath', description='The hostname and path.

This parameter is required.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='enus'),
  name?: string(name='Name', description='The name of the waiting room.

This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.

This parameter is required.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.

This parameter is required.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429

This parameter is required.', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.

This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.

This parameter is required.', example='300'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom

This parameter is required.', example='default'),
}

model CreateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  waitingRoomId?: string(name='WaitingRoomId'),
}

model CreateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomResponseBody(name='body'),
}

/**
 * @summary Creates a waiting room for a website.
 *
 * @param tmpReq CreateWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomResponse
 */
@context("createWaitingRoomWithContext")
async function createWaitingRoomWithOptions(tmpReq: CreateWaitingRoomRequest, runtime: $RuntimeOptions): CreateWaitingRoomResponse {
  tmpReq.validate();
  var request = new CreateWaitingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.hostNameAndPath)) {
    request.hostNameAndPathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostNameAndPath, 'HostNameAndPath', 'json');
  }
  var query = {};
  if (!$isNull(request.cookieName)) {
    query['CookieName'] = request.cookieName;
  }
  if (!$isNull(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.hostNameAndPathShrink)) {
    query['HostNameAndPath'] = request.hostNameAndPathShrink;
  }
  if (!$isNull(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!$isNull(request.language)) {
    query['Language'] = request.language;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!$isNull(request.queueAllEnable)) {
    query['QueueAllEnable'] = request.queueAllEnable;
  }
  if (!$isNull(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!$isNull(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!$isNull(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!$isNull(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a waiting room for a website.
 *
 * @param request CreateWaitingRoomRequest
 * @return CreateWaitingRoomResponse
 */
async function createWaitingRoom(request: CreateWaitingRoomRequest): CreateWaitingRoomResponse {
  var runtime = new $RuntimeOptions{};
  return createWaitingRoomWithOptions(request, runtime);
}

model CreateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  endTime?: string(name='EndTime', description='The end time of the event. This value is a UNIX timestamp.

This parameter is required.', example='1719849600'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
  name?: string(name='Name', description='The name of the waiting room event.

This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.

This parameter is required.', example='10'),
  preQueueEnable?: string(name='PreQueueEnable', description='Specifies whether to enable pre-queuing.

*   on
*   off', example='on'),
  preQueueStartTime?: string(name='PreQueueStartTime', description='The start time for pre-queuing.', example='1719763200'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.

This parameter is required.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429

This parameter is required.', example='202'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', description='Specifies whether to enable random queuing.

*   on
*   off', example='on'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.

This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='The start time of the event. This value is a UNIX timestamp.

This parameter is required.', example='1719763200'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.

This parameter is required.', example='100'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.', example='6a51d5bc6460887abd1291dc7d4db28b'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom

This parameter is required.', example='default'),
}

model CreateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  waitingRoomEventId?: long(name='WaitingRoomEventId'),
}

model CreateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary Creates a waiting room event.
 *
 * @param request CreateWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomEventResponse
 */
@context("createWaitingRoomEventWithContext")
async function createWaitingRoomEventWithOptions(request: CreateWaitingRoomEventRequest, runtime: $RuntimeOptions): CreateWaitingRoomEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!$isNull(request.language)) {
    query['Language'] = request.language;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!$isNull(request.preQueueEnable)) {
    query['PreQueueEnable'] = request.preQueueEnable;
  }
  if (!$isNull(request.preQueueStartTime)) {
    query['PreQueueStartTime'] = request.preQueueStartTime;
  }
  if (!$isNull(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!$isNull(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!$isNull(request.randomPreQueueEnable)) {
    query['RandomPreQueueEnable'] = request.randomPreQueueEnable;
  }
  if (!$isNull(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!$isNull(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  if (!$isNull(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a waiting room event.
 *
 * @param request CreateWaitingRoomEventRequest
 * @return CreateWaitingRoomEventResponse
 */
async function createWaitingRoomEvent(request: CreateWaitingRoomEventRequest): CreateWaitingRoomEventResponse {
  var runtime = new $RuntimeOptions{};
  return createWaitingRoomEventWithOptions(request, runtime);
}

model CreateWaitingRoomRuleRequest {
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq "video.example.com")

This parameter is required.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.

This parameter is required.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.

This parameter is required.', example='waitingroom_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room to bypass.

This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4'),
}

model CreateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='Waiting room bypass rule ID.', example='420072638347264'),
}

model CreateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary Create Waiting Room Rule
 *
 * @param request CreateWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomRuleResponse
 */
@context("createWaitingRoomRuleWithContext")
async function createWaitingRoomRuleWithOptions(request: CreateWaitingRoomRuleRequest, runtime: $RuntimeOptions): CreateWaitingRoomRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Waiting Room Rule
 *
 * @param request CreateWaitingRoomRuleRequest
 * @return CreateWaitingRoomRuleResponse
 */
async function createWaitingRoomRule(request: CreateWaitingRoomRuleRequest): CreateWaitingRoomRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createWaitingRoomRuleWithOptions(request, runtime);
}

model DeactivateVersionManagementRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890***'),
}

model DeactivateVersionManagementResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D61E4801-EAFF-4A63-AAE1-FBF6CE1CFD1C'),
}

model DeactivateVersionManagementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeactivateVersionManagementResponseBody(name='body'),
}

/**
 * @summary Disables version management for a website.
 *
 * @description You can disable version management only when the default environment and version 0 exist.
 *
 * @param request DeactivateVersionManagementRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeactivateVersionManagementResponse
 */
@context("deactivateVersionManagementWithContext")
async function deactivateVersionManagementWithOptions(request: DeactivateVersionManagementRequest, runtime: $RuntimeOptions): DeactivateVersionManagementResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeactivateVersionManagement',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables version management for a website.
 *
 * @description You can disable version management only when the default environment and version 0 exist.
 *
 * @param request DeactivateVersionManagementRequest
 * @return DeactivateVersionManagementResponse
 */
async function deactivateVersionManagement(request: DeactivateVersionManagementRequest): DeactivateVersionManagementResponse {
  var runtime = new $RuntimeOptions{};
  return deactivateVersionManagementWithOptions(request, runtime);
}

model DeleteCacheRuleRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [ListCacheRules](https://help.aliyun.com/document_detail/2866985.html) interface.

This parameter is required.', example='3528160*********'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='3500241*********'),
}

model DeleteCacheRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCacheRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCacheRuleResponseBody(name='body'),
}

/**
 * @summary Delete Cache Configuration
 *
 * @param request DeleteCacheRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCacheRuleResponse
 */
@context("deleteCacheRuleWithContext")
async function deleteCacheRuleWithOptions(request: DeleteCacheRuleRequest, runtime: $RuntimeOptions): DeleteCacheRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCacheRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Cache Configuration
 *
 * @param request DeleteCacheRuleRequest
 * @return DeleteCacheRuleResponse
 */
async function deleteCacheRule(request: DeleteCacheRuleRequest): DeleteCacheRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCacheRuleWithOptions(request, runtime);
}

model DeleteCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaded901474b9693acf530e0fb1d95'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890123'),
}

model DeleteCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaded901474b9693acf530e0fb1d95'),
  requestId?: string(name='RequestId', description='The request ID.', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCertificateResponseBody(name='body'),
}

/**
 * @summary Deletes a certificate for a website.
 *
 * @param request DeleteCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCertificateResponse
 */
@context("deleteCertificateWithContext")
async function deleteCertificateWithOptions(request: DeleteCertificateRequest, runtime: $RuntimeOptions): DeleteCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a certificate for a website.
 *
 * @param request DeleteCertificateRequest
 * @return DeleteCertificateResponse
 */
async function deleteCertificate(request: DeleteCertificateRequest): DeleteCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCertificateWithOptions(request, runtime);
}

model DeleteClientCaCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model DeleteClientCaCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteClientCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientCaCertificateResponseBody(name='body'),
}

/**
 * @summary Deletes a client CA certificate.
 *
 * @param request DeleteClientCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteClientCaCertificateResponse
 */
@context("deleteClientCaCertificateWithContext")
async function deleteClientCaCertificateWithOptions(request: DeleteClientCaCertificateRequest, runtime: $RuntimeOptions): DeleteClientCaCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteClientCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a client CA certificate.
 *
 * @param request DeleteClientCaCertificateRequest
 * @return DeleteClientCaCertificateResponse
 */
async function deleteClientCaCertificate(request: DeleteClientCaCertificateRequest): DeleteClientCaCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteClientCaCertificateWithOptions(request, runtime);
}

model DeleteClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model DeleteClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientCertificateResponseBody(name='body'),
}

/**
 * @summary Deletes a revoked client certificate.
 *
 * @param request DeleteClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteClientCertificateResponse
 */
@context("deleteClientCertificateWithContext")
async function deleteClientCertificateWithOptions(request: DeleteClientCertificateRequest, runtime: $RuntimeOptions): DeleteClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a revoked client certificate.
 *
 * @param request DeleteClientCertificateRequest
 * @return DeleteClientCertificateResponse
 */
async function deleteClientCertificate(request: DeleteClientCertificateRequest): DeleteClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteClientCertificateWithOptions(request, runtime);
}

model DeleteCompressionRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListCompressionRules](https://help.aliyun.com/document_detail/2867498.html) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model DeleteCompressionRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteCompressionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCompressionRuleResponseBody(name='body'),
}

/**
 * @summary Delete compression rule
 *
 * @param request DeleteCompressionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCompressionRuleResponse
 */
@context("deleteCompressionRuleWithContext")
async function deleteCompressionRuleWithOptions(request: DeleteCompressionRuleRequest, runtime: $RuntimeOptions): DeleteCompressionRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCompressionRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete compression rule
 *
 * @param request DeleteCompressionRuleRequest
 * @return DeleteCompressionRuleResponse
 */
async function deleteCompressionRule(request: DeleteCompressionRuleRequest): DeleteCompressionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCompressionRuleWithOptions(request, runtime);
}

model DeleteCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='1'),
}

model DeleteCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='5CC228B4-7A67-4016-9C9F-4A4133494A91'),
}

model DeleteCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Deletes a scenario-specific custom policy.
 *
 * @param request DeleteCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomScenePolicyResponse
 */
@context("deleteCustomScenePolicyWithContext")
async function deleteCustomScenePolicyWithOptions(request: DeleteCustomScenePolicyRequest, runtime: $RuntimeOptions): DeleteCustomScenePolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a scenario-specific custom policy.
 *
 * @param request DeleteCustomScenePolicyRequest
 * @return DeleteCustomScenePolicyResponse
 */
async function deleteCustomScenePolicy(request: DeleteCustomScenePolicyRequest): DeleteCustomScenePolicyResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCustomScenePolicyWithOptions(request, runtime);
}

model DeleteEdgeContainerAppRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-1232321454***'),
}

model DeleteEdgeContainerAppResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='Specifies whether the deletion is successful.', example='ok'),
}

model DeleteEdgeContainerAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEdgeContainerAppResponseBody(name='body'),
}

/**
 * @summary Deletes a containerized application.
 *
 * @param request DeleteEdgeContainerAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEdgeContainerAppResponse
 */
@context("deleteEdgeContainerAppWithContext")
async function deleteEdgeContainerAppWithOptions(request: DeleteEdgeContainerAppRequest, runtime: $RuntimeOptions): DeleteEdgeContainerAppResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteEdgeContainerApp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a containerized application.
 *
 * @param request DeleteEdgeContainerAppRequest
 * @return DeleteEdgeContainerAppResponse
 */
async function deleteEdgeContainerApp(request: DeleteEdgeContainerAppRequest): DeleteEdgeContainerAppResponse {
  var runtime = new $RuntimeOptions{};
  return deleteEdgeContainerAppWithOptions(request, runtime);
}

model DeleteEdgeContainerAppRecordRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  recordName?: string(name='RecordName', description='The associated domain name.

This parameter is required.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
}

model DeleteEdgeContainerAppRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteEdgeContainerAppRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEdgeContainerAppRecordResponseBody(name='body'),
}

/**
 * @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
 *
 * @param request DeleteEdgeContainerAppRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEdgeContainerAppRecordResponse
 */
@context("deleteEdgeContainerAppRecordWithContext")
async function deleteEdgeContainerAppRecordWithOptions(request: DeleteEdgeContainerAppRecordRequest, runtime: $RuntimeOptions): DeleteEdgeContainerAppRecordResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteEdgeContainerAppRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
 *
 * @param request DeleteEdgeContainerAppRecordRequest
 * @return DeleteEdgeContainerAppRecordResponse
 */
async function deleteEdgeContainerAppRecord(request: DeleteEdgeContainerAppRecordRequest): DeleteEdgeContainerAppRecordResponse {
  var runtime = new $RuntimeOptions{};
  return deleteEdgeContainerAppRecordWithOptions(request, runtime);
}

model DeleteEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-96253477062511****'),
  versionId?: string(name='VersionId', description='The ID of the version that you want to delete. To obtain the version ID, call the [ListEdgeContainerAppVersions](~~ListEdgeContainerAppVersions~~) operation.

This parameter is required.', example='ver-89884764010378****'),
}

model DeleteEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='b021e538-9dde-46ed-a1f2-9469da8f3e77'),
}

model DeleteEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Deletes a version of a containerized application.
 *
 * @param request DeleteEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEdgeContainerAppVersionResponse
 */
@context("deleteEdgeContainerAppVersionWithContext")
async function deleteEdgeContainerAppVersionWithOptions(request: DeleteEdgeContainerAppVersionRequest, runtime: $RuntimeOptions): DeleteEdgeContainerAppVersionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a version of a containerized application.
 *
 * @param request DeleteEdgeContainerAppVersionRequest
 * @return DeleteEdgeContainerAppVersionResponse
 */
async function deleteEdgeContainerAppVersion(request: DeleteEdgeContainerAppVersionRequest): DeleteEdgeContainerAppVersionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteEdgeContainerAppVersionWithOptions(request, runtime);
}

model DeleteHttpRequestHeaderModificationRuleRequest {
  configId?: long(name='ConfigId', description='The configuration ID, which can be obtained by calling the [ListHttpRequestHeaderModificationRules](~~ListHttpRequestHeaderModificationRules~~) operation.

This parameter is required.', example='3528160969****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='123456****'),
}

model DeleteHttpRequestHeaderModificationRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
}

model DeleteHttpRequestHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHttpRequestHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Deletes the configuration of modifying HTTP request headers for a website.
 *
 * @param request DeleteHttpRequestHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHttpRequestHeaderModificationRuleResponse
 */
@context("deleteHttpRequestHeaderModificationRuleWithContext")
async function deleteHttpRequestHeaderModificationRuleWithOptions(request: DeleteHttpRequestHeaderModificationRuleRequest, runtime: $RuntimeOptions): DeleteHttpRequestHeaderModificationRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteHttpRequestHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes the configuration of modifying HTTP request headers for a website.
 *
 * @param request DeleteHttpRequestHeaderModificationRuleRequest
 * @return DeleteHttpRequestHeaderModificationRuleResponse
 */
async function deleteHttpRequestHeaderModificationRule(request: DeleteHttpRequestHeaderModificationRuleRequest): DeleteHttpRequestHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteHttpRequestHeaderModificationRuleWithOptions(request, runtime);
}

model DeleteHttpResponseHeaderModificationRuleRequest {
  configId?: long(name='ConfigId', description='The configuration ID, which can be obtained by calling the [ListHttpResponseHeaderModificationRules](~~ListHttpResponseHeaderModificationRules~~) operation.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model DeleteHttpResponseHeaderModificationRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteHttpResponseHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHttpResponseHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Deletes the configuration of modifying HTTP response headers for a website.
 *
 * @param request DeleteHttpResponseHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHttpResponseHeaderModificationRuleResponse
 */
@context("deleteHttpResponseHeaderModificationRuleWithContext")
async function deleteHttpResponseHeaderModificationRuleWithOptions(request: DeleteHttpResponseHeaderModificationRuleRequest, runtime: $RuntimeOptions): DeleteHttpResponseHeaderModificationRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteHttpResponseHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes the configuration of modifying HTTP response headers for a website.
 *
 * @param request DeleteHttpResponseHeaderModificationRuleRequest
 * @return DeleteHttpResponseHeaderModificationRuleResponse
 */
async function deleteHttpResponseHeaderModificationRule(request: DeleteHttpResponseHeaderModificationRuleRequest): DeleteHttpResponseHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteHttpResponseHeaderModificationRuleWithOptions(request, runtime);
}

model DeleteHttpsApplicationConfigurationRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [listHttpsApplicationConfigurations](https://help.aliyun.com/document_detail/2869087.html) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
}

model DeleteHttpsApplicationConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
}

model DeleteHttpsApplicationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHttpsApplicationConfigurationResponseBody(name='body'),
}

/**
 * @summary Delete HTTPS Application Configuration
 *
 * @param request DeleteHttpsApplicationConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHttpsApplicationConfigurationResponse
 */
@context("deleteHttpsApplicationConfigurationWithContext")
async function deleteHttpsApplicationConfigurationWithOptions(request: DeleteHttpsApplicationConfigurationRequest, runtime: $RuntimeOptions): DeleteHttpsApplicationConfigurationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteHttpsApplicationConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete HTTPS Application Configuration
 *
 * @param request DeleteHttpsApplicationConfigurationRequest
 * @return DeleteHttpsApplicationConfigurationResponse
 */
async function deleteHttpsApplicationConfiguration(request: DeleteHttpsApplicationConfigurationRequest): DeleteHttpsApplicationConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return deleteHttpsApplicationConfigurationWithOptions(request, runtime);
}

model DeleteHttpsBasicConfigurationRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [ListHttpsBasicConfigurations](~~ListHttpsBasicConfigurations~~) interface.

This parameter is required.', example='3528160969****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1234567890123'),
}

model DeleteHttpsBasicConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteHttpsBasicConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHttpsBasicConfigurationResponseBody(name='body'),
}

/**
 * @summary Delete HTTPS Basic Configuration
 *
 * @param request DeleteHttpsBasicConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHttpsBasicConfigurationResponse
 */
@context("deleteHttpsBasicConfigurationWithContext")
async function deleteHttpsBasicConfigurationWithOptions(request: DeleteHttpsBasicConfigurationRequest, runtime: $RuntimeOptions): DeleteHttpsBasicConfigurationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteHttpsBasicConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete HTTPS Basic Configuration
 *
 * @param request DeleteHttpsBasicConfigurationRequest
 * @return DeleteHttpsBasicConfigurationResponse
 */
async function deleteHttpsBasicConfiguration(request: DeleteHttpsBasicConfigurationRequest): DeleteHttpsBasicConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return deleteHttpsBasicConfigurationWithOptions(request, runtime);
}

model DeleteImageTransformRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListImageTransforms](https://help.aliyun.com/document_detail/2869056.html) interface.

This parameter is required.', example='352816096987136'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model DeleteImageTransformResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteImageTransformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageTransformResponseBody(name='body'),
}

/**
 * @summary Delete Site Image Transformation Configuration
 *
 * @param request DeleteImageTransformRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteImageTransformResponse
 */
@context("deleteImageTransformWithContext")
async function deleteImageTransformWithOptions(request: DeleteImageTransformRequest, runtime: $RuntimeOptions): DeleteImageTransformResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteImageTransform',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Site Image Transformation Configuration
 *
 * @param request DeleteImageTransformRequest
 * @return DeleteImageTransformResponse
 */
async function deleteImageTransform(request: DeleteImageTransformRequest): DeleteImageTransformResponse {
  var runtime = new $RuntimeOptions{};
  return deleteImageTransformWithOptions(request, runtime);
}

model DeleteKvRequest {
  key?: string(name='Key', description='The name of the key that you want to delete.

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model DeleteKvResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvResponseBody(name='body'),
}

/**
 * @summary Deletes a key-value pair from a namespace.
 *
 * @param request DeleteKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKvResponse
 */
@context("deleteKvWithContext")
async function deleteKvWithOptions(request: DeleteKvRequest, runtime: $RuntimeOptions): DeleteKvResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a key-value pair from a namespace.
 *
 * @param request DeleteKvRequest
 * @return DeleteKvResponse
 */
async function deleteKv(request: DeleteKvRequest): DeleteKvResponse {
  var runtime = new $RuntimeOptions{};
  return deleteKvWithOptions(request, runtime);
}

model DeleteKvNamespaceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model DeleteKvNamespaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Deletes a namespace from an Alibaba Cloud account.
 *
 * @param request DeleteKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKvNamespaceResponse
 */
@context("deleteKvNamespaceWithContext")
async function deleteKvNamespaceWithOptions(request: DeleteKvNamespaceRequest, runtime: $RuntimeOptions): DeleteKvNamespaceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a namespace from an Alibaba Cloud account.
 *
 * @param request DeleteKvNamespaceRequest
 * @return DeleteKvNamespaceResponse
 */
async function deleteKvNamespace(request: DeleteKvNamespaceRequest): DeleteKvNamespaceResponse {
  var runtime = new $RuntimeOptions{};
  return deleteKvNamespaceWithOptions(request, runtime);
}

model DeleteListRequest {
  id?: long(name='Id', description='The ID of the custom list, which can be obtained by calling the [ListLists](https://help.aliyun.com/document_detail/2850217.html) operation.

This parameter is required.', example='40000001'),
}

model DeleteListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListResponseBody(name='body'),
}

/**
 * @summary Deletes a custom list that is no longer needed.
 *
 * @param request DeleteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteListResponse
 */
@context("deleteListWithContext")
async function deleteListWithOptions(request: DeleteListRequest, runtime: $RuntimeOptions): DeleteListResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom list that is no longer needed.
 *
 * @param request DeleteListRequest
 * @return DeleteListResponse
 */
async function deleteList(request: DeleteListRequest): DeleteListResponse {
  var runtime = new $RuntimeOptions{};
  return deleteListWithOptions(request, runtime);
}

model DeleteLoadBalancerRequest {
  id?: long(name='Id', description='The ID of the load balancer, used to uniquely identify the load balancer to be queried. This ID is returned directly upon creation of the load balancer and can also be obtained through the [ListLoadBalancers](https://help.aliyun.com/document_detail/2868897.html) interface for querying all load balancers under a site.

This parameter is required.', example='99867648760****'),
  siteId?: long(name='SiteId', description='The ID of the site, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1159101787****'),
}

model DeleteLoadBalancerResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLoadBalancerResponseBody(name='body'),
}

/**
 * @summary Delete Load Balancer
 *
 * @description Delete a load balancer by its ID, only one can be deleted at a time.
 *
 * @param request DeleteLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLoadBalancerResponse
 */
@context("deleteLoadBalancerWithContext")
async function deleteLoadBalancerWithOptions(request: DeleteLoadBalancerRequest, runtime: $RuntimeOptions): DeleteLoadBalancerResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteLoadBalancer',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Load Balancer
 *
 * @description Delete a load balancer by its ID, only one can be deleted at a time.
 *
 * @param request DeleteLoadBalancerRequest
 * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  var runtime = new $RuntimeOptions{};
  return deleteLoadBalancerWithOptions(request, runtime);
}

model DeleteNetworkOptimizationRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the ListNetworkOptimizations.

This parameter is required.', example='352816**********'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
}

model DeleteNetworkOptimizationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteNetworkOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkOptimizationResponseBody(name='body'),
}

/**
 * @summary Delete Network Optimization Configuration
 *
 * @param request DeleteNetworkOptimizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkOptimizationResponse
 */
@context("deleteNetworkOptimizationWithContext")
async function deleteNetworkOptimizationWithOptions(request: DeleteNetworkOptimizationRequest, runtime: $RuntimeOptions): DeleteNetworkOptimizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNetworkOptimization',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Network Optimization Configuration
 *
 * @param request DeleteNetworkOptimizationRequest
 * @return DeleteNetworkOptimizationResponse
 */
async function deleteNetworkOptimization(request: DeleteNetworkOptimizationRequest): DeleteNetworkOptimizationResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNetworkOptimizationWithOptions(request, runtime);
}

model DeleteOriginCaCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model DeleteOriginCaCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteOriginCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginCaCertificateResponseBody(name='body'),
}

/**
 * @summary 删除源服务器CA证书
 *
 * @param request DeleteOriginCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginCaCertificateResponse
 */
@context("deleteOriginCaCertificateWithContext")
async function deleteOriginCaCertificateWithOptions(request: DeleteOriginCaCertificateRequest, runtime: $RuntimeOptions): DeleteOriginCaCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOriginCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除源服务器CA证书
 *
 * @param request DeleteOriginCaCertificateRequest
 * @return DeleteOriginCaCertificateResponse
 */
async function deleteOriginCaCertificate(request: DeleteOriginCaCertificateRequest): DeleteOriginCaCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOriginCaCertificateWithOptions(request, runtime);
}

model DeleteOriginClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456789****'),
}

model DeleteOriginClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteOriginClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginClientCertificateResponseBody(name='body'),
}

/**
 * @summary 删除域名回源客户端证书
 *
 * @param request DeleteOriginClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginClientCertificateResponse
 */
@context("deleteOriginClientCertificateWithContext")
async function deleteOriginClientCertificateWithOptions(request: DeleteOriginClientCertificateRequest, runtime: $RuntimeOptions): DeleteOriginClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOriginClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除域名回源客户端证书
 *
 * @param request DeleteOriginClientCertificateRequest
 * @return DeleteOriginClientCertificateResponse
 */
async function deleteOriginClientCertificate(request: DeleteOriginClientCertificateRequest): DeleteOriginClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOriginClientCertificateWithOptions(request, runtime);
}

model DeleteOriginPoolRequest {
  id?: long(name='Id', description='The ID of the origin address pool, which can be obtained by calling the [ListOriginPools](https://help.aliyun.com/document_detail/2863947.html) API.

This parameter is required.', example='103852052519****'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='21655860979****'),
}

model DeleteOriginPoolResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginPoolResponseBody(name='body'),
}

/**
 * @summary Delete Origin Address Pool
 *
 * @param request DeleteOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginPoolResponse
 */
@context("deleteOriginPoolWithContext")
async function deleteOriginPoolWithOptions(request: DeleteOriginPoolRequest, runtime: $RuntimeOptions): DeleteOriginPoolResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Origin Address Pool
 *
 * @param request DeleteOriginPoolRequest
 * @return DeleteOriginPoolResponse
 */
async function deleteOriginPool(request: DeleteOriginPoolRequest): DeleteOriginPoolResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOriginPoolWithOptions(request, runtime);
}

model DeleteOriginProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DeleteOriginProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model DeleteOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Disables origin protection.
 *
 * @param request DeleteOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginProtectionResponse
 */
@context("deleteOriginProtectionWithContext")
async function deleteOriginProtectionWithOptions(request: DeleteOriginProtectionRequest, runtime: $RuntimeOptions): DeleteOriginProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables origin protection.
 *
 * @param request DeleteOriginProtectionRequest
 * @return DeleteOriginProtectionResponse
 */
async function deleteOriginProtection(request: DeleteOriginProtectionRequest): DeleteOriginProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOriginProtectionWithOptions(request, runtime);
}

model DeleteOriginRuleRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [ListOriginRules](https://help.aliyun.com/document_detail/2866989.html) interface.

This parameter is required.', example='33793140540****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='3400350********'),
}

model DeleteOriginRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteOriginRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginRuleResponseBody(name='body'),
}

/**
 * @summary Delete Origin Rule Configuration
 *
 * @param request DeleteOriginRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginRuleResponse
 */
@context("deleteOriginRuleWithContext")
async function deleteOriginRuleWithOptions(request: DeleteOriginRuleRequest, runtime: $RuntimeOptions): DeleteOriginRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOriginRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Origin Rule Configuration
 *
 * @param request DeleteOriginRuleRequest
 * @return DeleteOriginRuleResponse
 */
async function deleteOriginRule(request: DeleteOriginRuleRequest): DeleteOriginRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOriginRuleWithOptions(request, runtime);
}

model DeletePageRequest {
  id?: long(name='Id', description='The ID of the custom error page, which can be obtained by calling the [ListPages](https://help.aliyun.com/document_detail/2850223.html) operation.

This parameter is required.', example='50000001'),
}

model DeletePageResponseBody = {
  id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeletePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePageResponseBody(name='body'),
}

/**
 * @summary Deletes a custom error page that is no longer needed.
 *
 * @param request DeletePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePageResponse
 */
@context("deletePageWithContext")
async function deletePageWithOptions(request: DeletePageRequest, runtime: $RuntimeOptions): DeletePageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeletePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom error page that is no longer needed.
 *
 * @param request DeletePageRequest
 * @return DeletePageResponse
 */
async function deletePage(request: DeletePageRequest): DeletePageResponse {
  var runtime = new $RuntimeOptions{};
  return deletePageWithOptions(request, runtime);
}

model DeleteRecordRequest {
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
}

model DeleteRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRecordResponseBody(name='body'),
}

/**
 * @summary Deletes a DNS record of a website based on the specified RecordId.
 *
 * @param request DeleteRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRecordResponse
 */
@context("deleteRecordWithContext")
async function deleteRecordWithOptions(request: DeleteRecordRequest, runtime: $RuntimeOptions): DeleteRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a DNS record of a website based on the specified RecordId.
 *
 * @param request DeleteRecordRequest
 * @return DeleteRecordResponse
 */
async function deleteRecord(request: DeleteRecordRequest): DeleteRecordResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRecordWithOptions(request, runtime);
}

model DeleteRedirectRuleRequest {
  configId?: long(name='ConfigId', description='The configuration ID, which can be obtained by calling the [ListRedirectRules](~~ListRedirectRules~~) operation.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DeleteRedirectRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BF9B849D-D847-5B16-9371-8ECB557A5921'),
}

model DeleteRedirectRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRedirectRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a URL redirect rule for a website.
 *
 * @param request DeleteRedirectRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRedirectRuleResponse
 */
@context("deleteRedirectRuleWithContext")
async function deleteRedirectRuleWithOptions(request: DeleteRedirectRuleRequest, runtime: $RuntimeOptions): DeleteRedirectRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRedirectRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a URL redirect rule for a website.
 *
 * @param request DeleteRedirectRuleRequest
 * @return DeleteRedirectRuleResponse
 */
async function deleteRedirectRule(request: DeleteRedirectRuleRequest): DeleteRedirectRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRedirectRuleWithOptions(request, runtime);
}

model DeleteRewriteUrlRuleRequest {
  configId?: long(name='ConfigId', description='The configuration ID, which can be obtained by calling the [ListRewriteUrlRules](~~ListRewriteUrlRules~~) operation.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DeleteRewriteUrlRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
}

model DeleteRewriteUrlRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRewriteUrlRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a URL rewrite rule for a website.
 *
 * @param request DeleteRewriteUrlRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRewriteUrlRuleResponse
 */
@context("deleteRewriteUrlRuleWithContext")
async function deleteRewriteUrlRuleWithOptions(request: DeleteRewriteUrlRuleRequest, runtime: $RuntimeOptions): DeleteRewriteUrlRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRewriteUrlRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a URL rewrite rule for a website.
 *
 * @param request DeleteRewriteUrlRuleRequest
 * @return DeleteRewriteUrlRuleResponse
 */
async function deleteRewriteUrlRule(request: DeleteRewriteUrlRuleRequest): DeleteRewriteUrlRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRewriteUrlRuleWithOptions(request, runtime);
}

model DeleteRoutineRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='test-routine1'),
}

model DeleteRoutineResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model DeleteRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineResponseBody(name='body'),
}

/**
 * @summary Deletes a routine in Edge Routine.
 *
 * @param request DeleteRoutineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineResponse
 */
@context("deleteRoutineWithContext")
async function deleteRoutineWithOptions(request: DeleteRoutineRequest, runtime: $RuntimeOptions): DeleteRoutineResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRoutine',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a routine in Edge Routine.
 *
 * @param request DeleteRoutineRequest
 * @return DeleteRoutineResponse
 */
async function deleteRoutine(request: DeleteRoutineRequest): DeleteRoutineResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRoutineWithOptions(request, runtime);
}

model DeleteRoutineCodeVersionRequest {
  codeVersion?: string(name='CodeVersion', description='The code version.

This parameter is required.', example='1710120201067203242'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='test-routine1'),
}

model DeleteRoutineCodeVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model DeleteRoutineCodeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineCodeVersionResponseBody(name='body'),
}

/**
 * @summary Deletes a code version of a routine.
 *
 * @param request DeleteRoutineCodeVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineCodeVersionResponse
 */
@context("deleteRoutineCodeVersionWithContext")
async function deleteRoutineCodeVersionWithOptions(request: DeleteRoutineCodeVersionRequest, runtime: $RuntimeOptions): DeleteRoutineCodeVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.codeVersion)) {
    body['CodeVersion'] = request.codeVersion;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRoutineCodeVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a code version of a routine.
 *
 * @param request DeleteRoutineCodeVersionRequest
 * @return DeleteRoutineCodeVersionResponse
 */
async function deleteRoutineCodeVersion(request: DeleteRoutineCodeVersionRequest): DeleteRoutineCodeVersionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRoutineCodeVersionWithOptions(request, runtime);
}

model DeleteRoutineRelatedRecordRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='DeleteRoutineRelatedRecord'),
  recordId?: long(name='RecordId', description='The record ID.

This parameter is required.', example='12345'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='test-xxx.example.com'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='12345'),
}

model DeleteRoutineRelatedRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.

*   OK
*   Fail', example='OK'),
}

model DeleteRoutineRelatedRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineRelatedRecordResponseBody(name='body'),
}

/**
 * @summary Deletes a record that is associated with a routine.
 *
 * @param request DeleteRoutineRelatedRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineRelatedRecordResponse
 */
@context("deleteRoutineRelatedRecordWithContext")
async function deleteRoutineRelatedRecordWithOptions(request: DeleteRoutineRelatedRecordRequest, runtime: $RuntimeOptions): DeleteRoutineRelatedRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.recordId)) {
    body['RecordId'] = request.recordId;
  }
  if (!$isNull(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRoutineRelatedRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a record that is associated with a routine.
 *
 * @param request DeleteRoutineRelatedRecordRequest
 * @return DeleteRoutineRelatedRecordResponse
 */
async function deleteRoutineRelatedRecord(request: DeleteRoutineRelatedRecordRequest): DeleteRoutineRelatedRecordResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRoutineRelatedRecordWithOptions(request, runtime);
}

model DeleteRoutineRouteRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='3528160969****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='11223***'),
}

model DeleteRoutineRouteResponseBody = {
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteRoutineRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineRouteResponseBody(name='body'),
}

/**
 * @summary 删除边缘函数路由配置
 *
 * @param request DeleteRoutineRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineRouteResponse
 */
@context("deleteRoutineRouteWithContext")
async function deleteRoutineRouteWithOptions(request: DeleteRoutineRouteRequest, runtime: $RuntimeOptions): DeleteRoutineRouteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRoutineRoute',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除边缘函数路由配置
 *
 * @param request DeleteRoutineRouteRequest
 * @return DeleteRoutineRouteResponse
 */
async function deleteRoutineRoute(request: DeleteRoutineRouteRequest): DeleteRoutineRouteResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRoutineRouteWithOptions(request, runtime);
}

model DeleteScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='DeleteScheduledPreloadExecution'),
}

model DeleteScheduledPreloadExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Deletes a scheduled prefetch plan based on the plan ID.
 *
 * @param request DeleteScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScheduledPreloadExecutionResponse
 */
@context("deleteScheduledPreloadExecutionWithContext")
async function deleteScheduledPreloadExecutionWithOptions(request: DeleteScheduledPreloadExecutionRequest, runtime: $RuntimeOptions): DeleteScheduledPreloadExecutionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a scheduled prefetch plan based on the plan ID.
 *
 * @param request DeleteScheduledPreloadExecutionRequest
 * @return DeleteScheduledPreloadExecutionResponse
 */
async function deleteScheduledPreloadExecution(request: DeleteScheduledPreloadExecutionRequest): DeleteScheduledPreloadExecutionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteScheduledPreloadExecutionWithOptions(request, runtime);
}

model DeleteScheduledPreloadJobRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.

This parameter is required.', example='DeleteScheduledPreloadJob'),
}

model DeleteScheduledPreloadJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model DeleteScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Deletes a specified scheduled prefetch task based on the task ID.
 *
 * @param request DeleteScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScheduledPreloadJobResponse
 */
@context("deleteScheduledPreloadJobWithContext")
async function deleteScheduledPreloadJobWithOptions(request: DeleteScheduledPreloadJobRequest, runtime: $RuntimeOptions): DeleteScheduledPreloadJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a specified scheduled prefetch task based on the task ID.
 *
 * @param request DeleteScheduledPreloadJobRequest
 * @return DeleteScheduledPreloadJobResponse
 */
async function deleteScheduledPreloadJob(request: DeleteScheduledPreloadJobRequest): DeleteScheduledPreloadJobResponse {
  var runtime = new $RuntimeOptions{};
  return deleteScheduledPreloadJobWithOptions(request, runtime);
}

model DeleteSiteRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1234567890123'),
}

model DeleteSiteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model DeleteSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteResponseBody(name='body'),
}

/**
 * @summary Deletes a website based on the specified website ID.
 *
 * @param request DeleteSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteResponse
 */
@context("deleteSiteWithContext")
async function deleteSiteWithOptions(request: DeleteSiteRequest, runtime: $RuntimeOptions): DeleteSiteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a website based on the specified website ID.
 *
 * @param request DeleteSiteRequest
 * @return DeleteSiteResponse
 */
async function deleteSite(request: DeleteSiteRequest): DeleteSiteResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSiteWithOptions(request, runtime);
}

model DeleteSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456******'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model DeleteSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a real-time log delivery task.
 *
 * @param request DeleteSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteDeliveryTaskResponse
 */
@context("deleteSiteDeliveryTaskWithContext")
async function deleteSiteDeliveryTaskWithOptions(request: DeleteSiteDeliveryTaskRequest, runtime: $RuntimeOptions): DeleteSiteDeliveryTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a real-time log delivery task.
 *
 * @param request DeleteSiteDeliveryTaskRequest
 * @return DeleteSiteDeliveryTaskResponse
 */
async function deleteSiteDeliveryTask(request: DeleteSiteDeliveryTaskRequest): DeleteSiteDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSiteDeliveryTaskWithOptions(request, runtime);
}

model DeleteSiteOriginClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID on ESA.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='123456789****'),
}

model DeleteSiteOriginClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID on ESA.', example='babaabcd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteSiteOriginClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteOriginClientCertificateResponseBody(name='body'),
}

/**
 * @summary 删除站点回源客户端证书
 *
 * @param request DeleteSiteOriginClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteOriginClientCertificateResponse
 */
@context("deleteSiteOriginClientCertificateWithContext")
async function deleteSiteOriginClientCertificateWithOptions(request: DeleteSiteOriginClientCertificateRequest, runtime: $RuntimeOptions): DeleteSiteOriginClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSiteOriginClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除站点回源客户端证书
 *
 * @param request DeleteSiteOriginClientCertificateRequest
 * @return DeleteSiteOriginClientCertificateResponse
 */
async function deleteSiteOriginClientCertificate(request: DeleteSiteOriginClientCertificateRequest): DeleteSiteOriginClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSiteOriginClientCertificateWithOptions(request, runtime);
}

model DeleteUrlObservationRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456789****'),
}

model DeleteUrlObservationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteUrlObservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUrlObservationResponseBody(name='body'),
}

/**
 * @summary 删除网页监测配置
 *
 * @param request DeleteUrlObservationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUrlObservationResponse
 */
@context("deleteUrlObservationWithContext")
async function deleteUrlObservationWithOptions(request: DeleteUrlObservationRequest, runtime: $RuntimeOptions): DeleteUrlObservationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteUrlObservation',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除网页监测配置
 *
 * @param request DeleteUrlObservationRequest
 * @return DeleteUrlObservationResponse
 */
async function deleteUrlObservation(request: DeleteUrlObservationRequest): DeleteUrlObservationResponse {
  var runtime = new $RuntimeOptions{};
  return deleteUrlObservationWithOptions(request, runtime);
}

model DeleteUserDeliveryTaskRequest {
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test-project'),
}

model DeleteUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='952ea16b-1f05-4a76-bb32-420282d8aeb9'),
}

model DeleteUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a log delivery task from your Alibaba Cloud account.
 *
 * @description ******> 
 * *   Deleted tasks cannot be restored. Proceed with caution.
 * *   To call this operation, you must have an account that has the required permissions.
 * *   The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
 *
 * @param request DeleteUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUserDeliveryTaskResponse
 */
@context("deleteUserDeliveryTaskWithContext")
async function deleteUserDeliveryTaskWithOptions(request: DeleteUserDeliveryTaskRequest, runtime: $RuntimeOptions): DeleteUserDeliveryTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a log delivery task from your Alibaba Cloud account.
 *
 * @description ******> 
 * *   Deleted tasks cannot be restored. Proceed with caution.
 * *   To call this operation, you must have an account that has the required permissions.
 * *   The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
 *
 * @param request DeleteUserDeliveryTaskRequest
 * @return DeleteUserDeliveryTaskResponse
 */
async function deleteUserDeliveryTask(request: DeleteUserDeliveryTaskRequest): DeleteUserDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return deleteUserDeliveryTaskWithOptions(request, runtime);
}

model DeleteVideoProcessingRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model DeleteVideoProcessingResponseBody = {
  requestId?: string(name='RequestId', example='6abd807e-ed2a-44de-ac54-ac38a62472e6'),
}

model DeleteVideoProcessingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVideoProcessingResponseBody(name='body'),
}

/**
 * @summary 删除站点视频处理配置
 *
 * @param request DeleteVideoProcessingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVideoProcessingResponse
 */
@context("deleteVideoProcessingWithContext")
async function deleteVideoProcessingWithOptions(request: DeleteVideoProcessingRequest, runtime: $RuntimeOptions): DeleteVideoProcessingResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteVideoProcessing',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除站点视频处理配置
 *
 * @param request DeleteVideoProcessingRequest
 * @return DeleteVideoProcessingResponse
 */
async function deleteVideoProcessing(request: DeleteVideoProcessingRequest): DeleteVideoProcessingResponse {
  var runtime = new $RuntimeOptions{};
  return deleteVideoProcessingWithOptions(request, runtime);
}

model DeleteWafRuleRequest {
  id?: long(name='Id', description='ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.

This parameter is required.', example='20000001'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model DeleteWafRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWafRuleResponseBody(name='body'),
}

/**
 * @summary Delete WAF Rule
 *
 * @param request DeleteWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWafRuleResponse
 */
@context("deleteWafRuleWithContext")
async function deleteWafRuleWithOptions(request: DeleteWafRuleRequest, runtime: $RuntimeOptions): DeleteWafRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete WAF Rule
 *
 * @param request DeleteWafRuleRequest
 * @return DeleteWafRuleResponse
 */
async function deleteWafRule(request: DeleteWafRuleRequest): DeleteWafRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWafRuleWithOptions(request, runtime);
}

model DeleteWafRulesetRequest {
  id?: long(name='Id', description='ID of the WAF ruleset, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2878359.html) interface.

This parameter is required.', example='10000001'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model DeleteWafRulesetResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWafRulesetResponseBody(name='body'),
}

/**
 * @summary Delete WAF Ruleset
 *
 * @param request DeleteWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWafRulesetResponse
 */
@context("deleteWafRulesetWithContext")
async function deleteWafRulesetWithOptions(request: DeleteWafRulesetRequest, runtime: $RuntimeOptions): DeleteWafRulesetResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete WAF Ruleset
 *
 * @param request DeleteWafRulesetRequest
 * @return DeleteWafRulesetResponse
 */
async function deleteWafRuleset(request: DeleteWafRulesetRequest): DeleteWafRulesetResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWafRulesetWithOptions(request, runtime);
}

model DeleteWaitingRoomRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The waiting room ID.

This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4'),
}

model DeleteWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model DeleteWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomResponseBody(name='body'),
}

/**
 * @summary Deletes a waiting room.
 *
 * @param request DeleteWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomResponse
 */
@context("deleteWaitingRoomWithContext")
async function deleteWaitingRoomWithOptions(request: DeleteWaitingRoomRequest, runtime: $RuntimeOptions): DeleteWaitingRoomResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a waiting room.
 *
 * @param request DeleteWaitingRoomRequest
 * @return DeleteWaitingRoomResponse
 */
async function deleteWaitingRoom(request: DeleteWaitingRoomRequest): DeleteWaitingRoomResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWaitingRoomWithOptions(request, runtime);
}

model DeleteWaitingRoomEventRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', description='The ID of the waiting room event.

This parameter is required.', example='302909890***'),
}

model DeleteWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary Deletes a waiting room event.
 *
 * @param request DeleteWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomEventResponse
 */
@context("deleteWaitingRoomEventWithContext")
async function deleteWaitingRoomEventWithOptions(request: DeleteWaitingRoomEventRequest, runtime: $RuntimeOptions): DeleteWaitingRoomEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.waitingRoomEventId)) {
    query['WaitingRoomEventId'] = request.waitingRoomEventId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a waiting room event.
 *
 * @param request DeleteWaitingRoomEventRequest
 * @return DeleteWaitingRoomEventResponse
 */
async function deleteWaitingRoomEvent(request: DeleteWaitingRoomEventRequest): DeleteWaitingRoomEventResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWaitingRoomEventWithOptions(request, runtime);
}

model DeleteWaitingRoomRuleRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='The ID of the waiting room bypass rule.

This parameter is required.', example='3672886****'),
}

model DeleteWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a waiting room bypass rule.
 *
 * @param request DeleteWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomRuleResponse
 */
@context("deleteWaitingRoomRuleWithContext")
async function deleteWaitingRoomRuleWithOptions(request: DeleteWaitingRoomRuleRequest, runtime: $RuntimeOptions): DeleteWaitingRoomRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.waitingRoomRuleId)) {
    query['WaitingRoomRuleId'] = request.waitingRoomRuleId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a waiting room bypass rule.
 *
 * @param request DeleteWaitingRoomRuleRequest
 * @return DeleteWaitingRoomRuleResponse
 */
async function deleteWaitingRoomRule(request: DeleteWaitingRoomRuleRequest): DeleteWaitingRoomRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWaitingRoomRuleWithOptions(request, runtime);
}

model DescribeCustomScenePoliciesRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1 to 100000**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: **5**, **10**, or **20**.', example='10'),
  policyId?: long(name='PolicyId', description='The rule ID.', example='1234****'),
}

model DescribeCustomScenePoliciesResponseBody = {
  dataModule?: [ 
    {
      endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-06T16:00:00Z'),
      name?: string(name='Name', description='The name of the scenario-specific policy.', example='test'),
      objects?: [ string ](name='Objects', description='The IDs of websites that are associated with the policy.'),
      policyId?: long(name='PolicyId', description='The policy ID.', example='1234****'),
      siteIds?: string(name='SiteIds'),
      startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-04T16:00:00Z'),
      status?: string(name='Status', description='The status of the policy. Valid values:

*   **Disabled**
*   **Pending**
*   **Running**
*   **Expired**', example='Expired'),
      template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.', example='promotion'),
    }
  ](name='DataModule', description='The scenario-specific policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  quota?: int32(name='Quota', description='The policy quota.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCustomScenePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomScenePoliciesResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a scenario-specific policy.
 *
 * @param request DescribeCustomScenePoliciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCustomScenePoliciesResponse
 */
@context("describeCustomScenePoliciesWithContext")
async function describeCustomScenePoliciesWithOptions(request: DescribeCustomScenePoliciesRequest, runtime: $RuntimeOptions): DescribeCustomScenePoliciesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeCustomScenePolicies',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a scenario-specific policy.
 *
 * @param request DescribeCustomScenePoliciesRequest
 * @return DescribeCustomScenePoliciesResponse
 */
async function describeCustomScenePolicies(request: DescribeCustomScenePoliciesRequest): DescribeCustomScenePoliciesResponse {
  var runtime = new $RuntimeOptions{};
  return describeCustomScenePoliciesWithOptions(request, runtime);
}

model DescribeDDoSAllEventListRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. The maximum time range is 31 days.

If you do not configure this parameter, the current time is used as the end of the time range to query.', example='2023-02-22T15:59:59Z'),
  eventType?: string(name='EventType', description='The type of DDoS attacks to query. Valid values:

*   **web-cc**: web resource exhaustion attacks.
*   **cc**: connection flood attacks.
*   **traffic**: volumetric attacks.

Default value: web-cc.', example='web-cc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: 5, 10, and 20.', example='10'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2023-02-12T15:00:00Z'),
}

model DescribeDDoSAllEventListResponseBody = {
  dataList?: [ 
    {
      bps?: long(name='Bps', description='The peak of volumetric attacks. Unit: bit/s.', example='800'),
      coverage?: string(name='Coverage'),
      cps?: long(name='Cps', description='The peak of connection flood attacks. Unit: connections per seconds (CPS).', example='50'),
      endTime?: string(name='EndTime', description='The time when the DDoS attack ends.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-02-12T15:59:59Z'),
      eventId?: string(name='EventId', description='The attack event ID.', example='web-cc_1'),
      eventResult?: string(name='EventResult'),
      eventType?: string(name='EventType', description='The type of DDoS attacks that was queried. Valid values:

*   **web-cc**: web resource exhaustion attacks.
*   **cc**: connection flood attacks.
*   **traffic**: volumetric attacks.', example='web-cc'),
      pps?: long(name='Pps', description='The peak of volumetric attacks. Unit: packets per second (PPS).', example='12000'),
      qps?: long(name='Qps', description='The peak QPS of web resource exhaustion attacks.', example='7692'),
      startTime?: string(name='StartTime', description='The time when the DDoS attack starts.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-02-12T15:00:00Z'),
      target?: string(name='Target', description='The attack target.', example='example.com'),
      targetId?: string(name='TargetId', description='The ID of the web resource exhaustion attack target.', example='000000000155****'),
    }
  ](name='DataList', description='The DDoS attack events.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='D73A4243-CFBD-5110-876F-09237E77ECBD'),
  siteId?: long(name='SiteId', description='The website ID.', example='7096621098****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDDoSAllEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSAllEventListResponseBody(name='body'),
}

/**
 * @summary Queries DDoS attack events.
 *
 * @param request DescribeDDoSAllEventListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSAllEventListResponse
 */
@context("describeDDoSAllEventListWithContext")
async function describeDDoSAllEventListWithOptions(request: DescribeDDoSAllEventListRequest, runtime: $RuntimeOptions): DescribeDDoSAllEventListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDDoSAllEventList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries DDoS attack events.
 *
 * @param request DescribeDDoSAllEventListRequest
 * @return DescribeDDoSAllEventListResponse
 */
async function describeDDoSAllEventList(request: DescribeDDoSAllEventListRequest): DescribeDDoSAllEventListResponse {
  var runtime = new $RuntimeOptions{};
  return describeDDoSAllEventListWithOptions(request, runtime);
}

model DescribeDDoSBpsListRequest {
  coverage?: string(name='Coverage', description='Protection area, defaulting to global if not filled. When specified, the values are as follows:

- domestic: Mainland China.

- overseas: Global (excluding Mainland China).

- global: Global.', example='global'),
  endTime?: string(name='EndTime', description='The end time for fetching data. In ISO8601 format, using UTC+0, formatted as: yyyy-MM-ddTHH:mm:ssZ.

The end time must be later than the start time, and the span between start and end times should not exceed 31 days.', example='2023-05-18T06:19:42Z'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='70966210986912'),
  startTime?: string(name='StartTime', description='The start time for fetching data, in ISO8601 format, using UTC+0, formatted as: yyyy-MM-ddTHH:mm:ssZ.

This parameter is required.', example='2023-05-14T17:00:00Z'),
}

model DescribeDDoSBpsListResponseBody = {
  dataInterval?: int32(name='DataInterval', description='The interval between each piece of data, in seconds.

Generated based on the interval between StartTime and EndTime: less than 1 hour, 60s; 1 hour or more but less than 1 day, 300s; 1 day or more but less than a week, 1800s; 1 week or more, 3600s.', example='300'),
  dataModule?: [ 
    {
      attackBps?: long(name='AttackBps', description='Attack bandwidth, in bps.', example='9000000000'),
      attackPps?: long(name='AttackPps', description='Attack PPS.', example='9000000'),
      normalBps?: long(name='NormalBps', description='Normal business bandwidth, in bps.', example='1000000000'),
      normalPps?: long(name='NormalPps', description='Normal business PPS.', example='1000000'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of this data, in ISO8601 format, using UTC+0, formatted as: yyyy-MM-ddTHH:mm:ssZ.', example='2023-05-14T17:00:00Z'),
      totalBps?: long(name='TotalBps', description='Total bandwidth, in bps.', example='10000000000'),
      totalPps?: long(name='TotalPps', description='Total PPS.', example='100000000'),
    }
  ](name='DataModule', description='A list of network bandwidth data for each time interval.'),
  endTime?: string(name='EndTime', description='The end time for fetching data. In ISO8601 format, using UTC+0, formatted as: yyyy-MM-ddTHH:mm:ssZ.

The end time must be later than the start time, and the span between start and end times should not exceed 31 days.', example='2023-05-18T06:19:42Z'),
  requestId?: string(name='RequestId', description='Request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  startTime?: string(name='StartTime', description='The start time for fetching data. In ISO8601 format, using UTC, formatted as: YYYY-MM-DDThh:mm:ssZ.', example='2023-05-14T17:00:00Z'),
}

model DescribeDDoSBpsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSBpsListResponseBody(name='body'),
}

/**
 * @summary Query DCDN DDoS user bps and pps data
 *
 * @param request DescribeDDoSBpsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSBpsListResponse
 */
@context("describeDDoSBpsListWithContext")
async function describeDDoSBpsListWithOptions(request: DescribeDDoSBpsListRequest, runtime: $RuntimeOptions): DescribeDDoSBpsListResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDDoSBpsList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query DCDN DDoS user bps and pps data
 *
 * @param request DescribeDDoSBpsListRequest
 * @return DescribeDDoSBpsListResponse
 */
async function describeDDoSBpsList(request: DescribeDDoSBpsListRequest): DescribeDDoSBpsListResponse {
  var runtime = new $RuntimeOptions{};
  return describeDDoSBpsListWithOptions(request, runtime);
}

model DescribeDDoSL7QpsListRequest {
  endTime?: string(name='EndTime', description='The end time of the query.

The date format follows ISO8601 notation and uses UTC+0, formatted as yyyy-MM-ddTHH:mm:ssZ. The maximum span between the start and end times is 31 days.

If this parameter is not set, the current time will be used as the end time of the query.', example='2023-04-19T19:00:00Z'),
  interval?: int32(name='Interval', description='The time granularity of the queried data, in seconds.

Depending on the maximum time span of a single query, this parameter supports values of 60 (1 minute), 300 (5 minutes), 1800 (half an hour), and 3600 (1 hour).

This parameter is required.', example='300'),
  recordId?: long(name='RecordId', description='Record ID, which can be obtained by calling the [ListRecords](~~ListRecords~~) interface.', example='86510927836942****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='The start time of the query.

The date format follows ISO8601 notation and uses UTC+0, formatted as yyyy-MM-ddTHH:mm:ssZ.

This parameter is required.', example='2023-04-19T16:00:00Z'),
}

model DescribeDDoSL7QpsListResponseBody = {
  dataInterval?: int32(name='DataInterval', description='The time granularity of the queried data, in seconds.', example='300'),
  dataModule?: [ 
    {
      attack?: long(name='Attack', description='Attack QPS.', example='5'),
      normal?: long(name='Normal', description='Normal QPS.', example='4'),
      timeStamp?: string(name='TimeStamp', description='Data time, following ISO8601 notation and using UTC+0, formatted as yyyy-MM-ddTHH:mm:ssZ.', example='2023-04-19T16:00:00Z'),
      total?: long(name='Total', description='Total QPS.', example='9'),
    }
  ](name='DataModule', description='Application layer time trend data list.'),
  endTime?: string(name='EndTime', description='The end time of the query.

The date format follows ISO8601 notation and uses UTC+0, formatted as yyyy-MM-ddTHH:mm:ssZ.', example='2023-04-19T19:00:00Z'),
  recordId?: long(name='RecordId', description='Record ID.', example='86510927836942****'),
  requestId?: string(name='RequestId', description='Request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteId?: long(name='SiteId', description='Site ID.', example='123456****'),
  startTime?: string(name='StartTime', description='The start time of the query.

The date format follows ISO8601 notation and uses UTC+0, formatted as yyyy-MM-ddTHH:mm:ssZ.', example='2023-04-19T16:00:00Z'),
}

model DescribeDDoSL7QpsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSL7QpsListResponseBody(name='body'),
}

/**
 * @summary DDoS Analysis Layer 7 QPS Trend Chart API
 *
 * @param request DescribeDDoSL7QpsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSL7QpsListResponse
 */
@context("describeDDoSL7QpsListWithContext")
async function describeDDoSL7QpsListWithOptions(request: DescribeDDoSL7QpsListRequest, runtime: $RuntimeOptions): DescribeDDoSL7QpsListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!$isNull(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeDDoSL7QpsList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DDoS Analysis Layer 7 QPS Trend Chart API
 *
 * @param request DescribeDDoSL7QpsListRequest
 * @return DescribeDDoSL7QpsListResponse
 */
async function describeDDoSL7QpsList(request: DescribeDDoSL7QpsListRequest): DescribeDDoSL7QpsListResponse {
  var runtime = new $RuntimeOptions{};
  return describeDDoSL7QpsListWithOptions(request, runtime);
}

model DescribeEdgeContainerAppStatsRequest {
  app?: string(name='App', description='This parameter is required.', example='app-xxxx'),
  endTime?: string(name='EndTime', example='2024-09-02T16:04:05Z'),
  fields?: string(name='Fields', description='This parameter is required.', example='pod_ready_rate'),
  isp?: string(name='Isp', example='telecom,unicom,cmcc'),
  locate?: string(name='Locate', example='huizhou'),
  startTime?: string(name='StartTime', example='2024-09-02T15:04:05Z'),
  tenant?: string(name='Tenant', example='t-xxxx'),
}

model DescribeEdgeContainerAppStatsResponseBody = {
  cpuUsageSecondsQuotaRateAvg?: double(name='CpuUsageSecondsQuotaRateAvg'),
  cpuUsageSecondsTotalAvg?: double(name='CpuUsageSecondsTotalAvg'),
  fsReadsBytesAvgAvg?: double(name='FsReadsBytesAvgAvg'),
  fsWritesBytesAvgAvg?: double(name='FsWritesBytesAvgAvg'),
  memoryRssAvg?: double(name='MemoryRssAvg'),
  memoryRssQuotaRateAvg?: double(name='MemoryRssQuotaRateAvg'),
  podReadyRateAvg?: double(name='PodReadyRateAvg'),
  points?: [ 
    {
      containerCpuUsageSecondsQuotaRate?: double(name='ContainerCpuUsageSecondsQuotaRate', example='0.1'),
      containerCpuUsageSecondsTotal?: double(name='ContainerCpuUsageSecondsTotal', example='2'),
      containerFsReadsBytesAvg?: double(name='ContainerFsReadsBytesAvg', example='0'),
      containerFsWritesBytesAvg?: double(name='ContainerFsWritesBytesAvg', example='0'),
      containerMemoryRss?: double(name='ContainerMemoryRss', example='0.1'),
      containerMemoryRssQuotaRate?: double(name='ContainerMemoryRssQuotaRate', example='1'),
      podReadyRate?: double(name='PodReadyRate', example='100'),
      time?: string(name='Time', example='2024-01-18T15:04:05Z'),
    }
  ](name='Points'),
  requestId?: string(name='RequestId', description='Id of the request', example='35C66C7B-671H-4297-9187-2C4477247A78'),
}

model DescribeEdgeContainerAppStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEdgeContainerAppStatsResponseBody(name='body'),
}

/**
 * @summary 将天眼提供给XCDN边缘容器的监控OpenAPI适配成青蓝的OpenAPI
 *
 * @param request DescribeEdgeContainerAppStatsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEdgeContainerAppStatsResponse
 */
@context("describeEdgeContainerAppStatsWithContext")
async function describeEdgeContainerAppStatsWithOptions(request: DescribeEdgeContainerAppStatsRequest, runtime: $RuntimeOptions): DescribeEdgeContainerAppStatsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeEdgeContainerAppStats',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将天眼提供给XCDN边缘容器的监控OpenAPI适配成青蓝的OpenAPI
 *
 * @param request DescribeEdgeContainerAppStatsRequest
 * @return DescribeEdgeContainerAppStatsResponse
 */
async function describeEdgeContainerAppStats(request: DescribeEdgeContainerAppStatsRequest): DescribeEdgeContainerAppStatsResponse {
  var runtime = new $RuntimeOptions{};
  return describeEdgeContainerAppStatsWithOptions(request, runtime);
}

model DescribeHttpDDoSAttackIntelligentProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', description='The mode of smart HTTP DDoS protection. Valid values:

*   **observe**: alert.
*   **defense**: block.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='The level of smart HTTP DDoS protection. Valid values:

*   **level0**: very loose.
*   **level30**: loose.
*   **level60**: normal.
*   **level90**: strict.', example='level60'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of smart HTTP DDoS protection for a website.
 *
 * @param request DescribeHttpDDoSAttackIntelligentProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
@context("describeHttpDDoSAttackIntelligentProtectionWithContext")
async function describeHttpDDoSAttackIntelligentProtectionWithOptions(request: DescribeHttpDDoSAttackIntelligentProtectionRequest, runtime: $RuntimeOptions): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHttpDDoSAttackIntelligentProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of smart HTTP DDoS protection for a website.
 *
 * @param request DescribeHttpDDoSAttackIntelligentProtectionRequest
 * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
async function describeHttpDDoSAttackIntelligentProtection(request: DescribeHttpDDoSAttackIntelligentProtectionRequest): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return describeHttpDDoSAttackIntelligentProtectionWithOptions(request, runtime);
}

model DescribeHttpDDoSAttackProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', description='The level of HTTP DDoS attack protection. Valid values:

*   **very weak**: very loose.
*   **weak**: loose.
*   **default**: normal.
*   **hard**: strict.', example='default'),
  requestId?: string(name='RequestId', description='The request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of HTTP DDoS attack protection.
 *
 * @param request DescribeHttpDDoSAttackProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHttpDDoSAttackProtectionResponse
 */
@context("describeHttpDDoSAttackProtectionWithContext")
async function describeHttpDDoSAttackProtectionWithOptions(request: DescribeHttpDDoSAttackProtectionRequest, runtime: $RuntimeOptions): DescribeHttpDDoSAttackProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeHttpDDoSAttackProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of HTTP DDoS attack protection.
 *
 * @param request DescribeHttpDDoSAttackProtectionRequest
 * @return DescribeHttpDDoSAttackProtectionResponse
 */
async function describeHttpDDoSAttackProtection(request: DescribeHttpDDoSAttackProtectionRequest): DescribeHttpDDoSAttackProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return describeHttpDDoSAttackProtectionWithOptions(request, runtime);
}

model DescribeKvAccountStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='Indicates whether Edge KV is activated for the Alibaba Cloud account.

*   **online**
*   **offline**', example='online'),
}

model DescribeKvAccountStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKvAccountStatusResponseBody(name='body'),
}

/**
 * @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
 *
 * @param request DescribeKvAccountStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatusWithOptions(runtime: $RuntimeOptions): DescribeKvAccountStatusResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'DescribeKvAccountStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
 *
 * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatus(): DescribeKvAccountStatusResponse {
  var runtime = new $RuntimeOptions{};
  return describeKvAccountStatusWithOptions(runtime);
}

model DescribePreloadTasksRequest {
  content?: string(name='Content', description='The content to prefetch. Exact match is supported.', example='http://a.com/1.jpg?b=2'),
  endTime?: string(name='EndTime', description='The end time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2023-03-23T06:23:00Z'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 50.', example='20'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
  startTime?: string(name='StartTime', description='The start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2023-03-22T17:00:00Z'),
  status?: string(name='Status', description='The task status. Valid values:

*   **Complete**: The task is complete.
*   **Refreshing**: The task is running.
*   **Failed**: The task failed.', example='Complete'),
}

model DescribePreloadTasksResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  tasks?: [ 
    {
      content?: string(name='Content', description='The prefetched content.', example='http://a.com/1.jpg?b=2'),
      createTime?: string(name='CreateTime', description='The time when the task was created.', example='2023-03-28 14:28:57'),
      description?: string(name='Description', description='The error message returned upon a prefetch task failure. Valid values:

*   **Internal Error**
*   **Origin Timeout**
*   **Origin Return StatusCode 5XX**', example='Internal Error'),
      process?: string(name='Process', description='The progress of the task, in percentage.', example='100%'),
      status?: string(name='Status', description='The task status.

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
      taskId?: string(name='TaskId', description='The ID of the queried task.', example='1597854579687428'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='83'),
}

model DescribePreloadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreloadTasksResponseBody(name='body'),
}

/**
 * @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
 *
 * @param request DescribePreloadTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePreloadTasksResponse
 */
@context("describePreloadTasksWithContext")
async function describePreloadTasksWithOptions(request: DescribePreloadTasksRequest, runtime: $RuntimeOptions): DescribePreloadTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribePreloadTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
 *
 * @param request DescribePreloadTasksRequest
 * @return DescribePreloadTasksResponse
 */
async function describePreloadTasks(request: DescribePreloadTasksRequest): DescribePreloadTasksResponse {
  var runtime = new $RuntimeOptions{};
  return describePreloadTasksWithOptions(request, runtime);
}

model DescribePurgeTasksRequest {
  content?: string(name='Content', description='The content to purge. Exact match is supported.', example='http://a.com/1.jpg?b=1'),
  endTime?: string(name='EndTime', description='The end time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2022-11-18T15:59:59Z'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100000.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 50.', example='20'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
  startTime?: string(name='StartTime', description='The start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-11-16T05:33:00Z'),
  status?: string(name='Status', description='The task status. Valid values:

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
  type?: string(name='Type', description='The task type. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.', example='file'),
}

model DescribePurgeTasksResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  tasks?: [ 
    {
      content?: string(name='Content', description='The purged content.', example='http://a.com/1.jpg?b=1'),
      createTime?: string(name='CreateTime', description='The time when the task was created.', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', description='The error description returned when the purge task failed.', example='Internal Error'),
      process?: string(name='Process', description='The progress of the task, in percentage.', example='100%'),
      status?: string(name='Status', description='The task status.

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
      taskId?: string(name='TaskId', description='The task ID.', example='16346513304'),
      type?: string(name='Type', description='The type of the purge task. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.', example='file'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model DescribePurgeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurgeTasksResponseBody(name='body'),
}

/**
 * @summary Queries the details of purge tasks.
 *
 * @param request DescribePurgeTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePurgeTasksResponse
 */
@context("describePurgeTasksWithContext")
async function describePurgeTasksWithOptions(request: DescribePurgeTasksRequest, runtime: $RuntimeOptions): DescribePurgeTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribePurgeTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of purge tasks.
 *
 * @param request DescribePurgeTasksRequest
 * @return DescribePurgeTasksResponse
 */
async function describePurgeTasks(request: DescribePurgeTasksRequest): DescribePurgeTasksResponse {
  var runtime = new $RuntimeOptions{};
  return describePurgeTasksWithOptions(request, runtime);
}

model DescribeRatePlanInstanceStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID, which can be obtained by calling the [ListUserRatePlanInstances](~~ListUserRatePlanInstances~~) operation.', example='xcdn-91fknmb80f0g***'),
}

model DescribeRatePlanInstanceStatusResponseBody = {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='xcdn-91fknmb80f0g***'),
  instanceStatus?: string(name='InstanceStatus', description='The instance status. Valid values:

*   running: The instance is running.
*   renewing: The instance is being renewed.
*   upgrading: The configuration of the instance is being upgraded.
*   releasePrepaidService: The instance is released due to expiration.
*   creating: The instance is being created.
*   downgrading: The configuration of the instance is being downgraded.
*   ceasePrepaidService: The instance has expired.', example='running'),
  requestId?: string(name='RequestId', description='The request ID.', example='60423A7F-A83D-1E24-B80E-86DD25790759'),
}

model DescribeRatePlanInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRatePlanInstanceStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status of an instance that uses a plan.
 *
 * @description You can query the status of an instance after you purchase a plan for the instance.
 *
 * @param request DescribeRatePlanInstanceStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRatePlanInstanceStatusResponse
 */
@context("describeRatePlanInstanceStatusWithContext")
async function describeRatePlanInstanceStatusWithOptions(request: DescribeRatePlanInstanceStatusRequest, runtime: $RuntimeOptions): DescribeRatePlanInstanceStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRatePlanInstanceStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status of an instance that uses a plan.
 *
 * @description You can query the status of an instance after you purchase a plan for the instance.
 *
 * @param request DescribeRatePlanInstanceStatusRequest
 * @return DescribeRatePlanInstanceStatusResponse
 */
async function describeRatePlanInstanceStatus(request: DescribeRatePlanInstanceStatusRequest): DescribeRatePlanInstanceStatusResponse {
  var runtime = new $RuntimeOptions{};
  return describeRatePlanInstanceStatusWithOptions(request, runtime);
}

model DescribeSiteLogsRequest {
  endTime?: string(name='EndTime', example='2022-11-06T17:00:00Z'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456***'),
  startTime?: string(name='StartTime', example='2022-11-06T16:00:00Z'),
}

model DescribeSiteLogsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteLogDetails?: [ 
    {
      logCount?: int32(name='LogCount', example='300'),
      logInfos?: [ 
        {
          endTime?: string(name='EndTime', example='2022-11-06T17:00:00Z'),
          logName?: string(name='LogName', example='example.com_2022_11_07_000000_020000.gz.xxxxxx'),
          logPath?: string(name='LogPath', example='example.aliyundoc.com /v1.l1cache/105252530/example.com/2022_11_07/example.com_2022_11_07_000000_020000.gz.xxxxxx?Expires=1636963354&OSSAccessKeyId=LTAIviCc6zy8****&Signature=u0V6foRfZniHE8i%2BHUdxGOhZsK****'),
          logSize?: int32(name='LogSize', example='438304768'),
          startTime?: string(name='StartTime', example='2022-11-06T16:00:00Z'),
        }
      ](name='LogInfos'),
      pageInfos?: {
        pageIndex?: int32(name='PageIndex', example='1'),
        pageSize?: int32(name='PageSize', example='10'),
        totalCount?: int32(name='TotalCount', example='47'),
      }(name='PageInfos'),
      siteId?: long(name='SiteId', example='123456***'),
      siteName?: string(name='SiteName', example='example.com'),
    }
  ](name='SiteLogDetails'),
}

model DescribeSiteLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSiteLogsResponseBody(name='body'),
}

/**
 * @summary 查询站点离线日志
 *
 * @param request DescribeSiteLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSiteLogsResponse
 */
@context("describeSiteLogsWithContext")
async function describeSiteLogsWithOptions(request: DescribeSiteLogsRequest, runtime: $RuntimeOptions): DescribeSiteLogsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSiteLogs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点离线日志
 *
 * @param request DescribeSiteLogsRequest
 * @return DescribeSiteLogsResponse
 */
async function describeSiteLogs(request: DescribeSiteLogsRequest): DescribeSiteLogsResponse {
  var runtime = new $RuntimeOptions{};
  return describeSiteLogsWithOptions(request, runtime);
}

model DescribeSiteTimeSeriesDataRequest {
  endTime?: string(name='EndTime', example='2023-04-09T16:00:00Z'),
  fields?: [ 
    {
      dimension?: [ string ](name='Dimension'),
      fieldName?: string(name='FieldName', example='Traffic'),
    }
  ](name='Fields', description='This parameter is required.'),
  interval?: string(name='Interval', example='300'),
  siteId?: string(name='SiteId', example='1150376036*****'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
}

model DescribeSiteTimeSeriesDataShrinkRequest {
  endTime?: string(name='EndTime', example='2023-04-09T16:00:00Z'),
  fieldsShrink?: string(name='Fields', description='This parameter is required.'),
  interval?: string(name='Interval', example='300'),
  siteId?: string(name='SiteId', example='1150376036*****'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
}

model DescribeSiteTimeSeriesDataResponseBody = {
  data?: [ 
    {
      detailData?: [ 
        {
          timeStamp?: string(name='TimeStamp', example='2023-04-08T16:00:00Z'),
          value?: any(name='Value', example='123'),
        }
      ](name='DetailData'),
      dimensionName?: string(name='DimensionName', example='ALL'),
      dimensionValue?: string(name='DimensionValue', example='ALL'),
      fieldName?: string(name='FieldName', example='Traffic'),
    }
  ](name='Data'),
  endTime?: string(name='EndTime', example='2023-04-09T16:00:00Z'),
  interval?: long(name='Interval', example='300'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  samplingRate?: float(name='SamplingRate', example='100'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
  summarizedData?: [ 
    {
      aggMethod?: string(name='AggMethod', example='sum'),
      dimensionName?: string(name='DimensionName', example='ALL'),
      dimensionValue?: string(name='DimensionValue', example='ALL'),
      fieldName?: string(name='FieldName', example='Traffic'),
      value?: any(name='Value', example='12345'),
    }
  ](name='SummarizedData'),
}

model DescribeSiteTimeSeriesDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSiteTimeSeriesDataResponseBody(name='body'),
}

/**
 * @summary 获取时序数据
 *
 * @param tmpReq DescribeSiteTimeSeriesDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSiteTimeSeriesDataResponse
 */
@context("describeSiteTimeSeriesDataWithContext")
async function describeSiteTimeSeriesDataWithOptions(tmpReq: DescribeSiteTimeSeriesDataRequest, runtime: $RuntimeOptions): DescribeSiteTimeSeriesDataResponse {
  tmpReq.validate();
  var request = new DescribeSiteTimeSeriesDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.fields)) {
    request.fieldsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fields, 'Fields', 'json');
  }
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.fieldsShrink)) {
    query['Fields'] = request.fieldsShrink;
  }
  if (!$isNull(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSiteTimeSeriesData',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取时序数据
 *
 * @param request DescribeSiteTimeSeriesDataRequest
 * @return DescribeSiteTimeSeriesDataResponse
 */
async function describeSiteTimeSeriesData(request: DescribeSiteTimeSeriesDataRequest): DescribeSiteTimeSeriesDataResponse {
  var runtime = new $RuntimeOptions{};
  return describeSiteTimeSeriesDataWithOptions(request, runtime);
}

model DescribeSiteTopDataRequest {
  endTime?: string(name='EndTime', example='2023-04-09T16:00:00Z'),
  fields?: [ 
    {
      dimension?: [ string ](name='Dimension'),
      fieldName?: string(name='FieldName', example='Traffic'),
    }
  ](name='Fields', description='This parameter is required.'),
  interval?: string(name='Interval', example='300'),
  limit?: string(name='Limit'),
  siteId?: string(name='SiteId', example='1150376036*****'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
}

model DescribeSiteTopDataShrinkRequest {
  endTime?: string(name='EndTime', example='2023-04-09T16:00:00Z'),
  fieldsShrink?: string(name='Fields', description='This parameter is required.'),
  interval?: string(name='Interval', example='300'),
  limit?: string(name='Limit'),
  siteId?: string(name='SiteId', example='1150376036*****'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
}

model DescribeSiteTopDataResponseBody = {
  data?: [ 
    {
      detailData?: [ 
        {
          dimensionValue?: string(name='DimensionValue', example='ALL'),
          value?: any(name='Value', example='123'),
        }
      ](name='DetailData'),
      dimensionName?: string(name='DimensionName', example='ALL'),
      fieldName?: string(name='FieldName', example='Traffic'),
    }
  ](name='Data'),
  endTime?: string(name='EndTime', example='2023-04-09T16:00:00Z'),
  requestId?: string(name='RequestId', example='35C66C7B-671H-4297-9187-2C447724****'),
  samplingRate?: float(name='SamplingRate', example='100'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
}

model DescribeSiteTopDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSiteTopDataResponseBody(name='body'),
}

/**
 * @summary 获取Top数据
 *
 * @param tmpReq DescribeSiteTopDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSiteTopDataResponse
 */
@context("describeSiteTopDataWithContext")
async function describeSiteTopDataWithOptions(tmpReq: DescribeSiteTopDataRequest, runtime: $RuntimeOptions): DescribeSiteTopDataResponse {
  tmpReq.validate();
  var request = new DescribeSiteTopDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.fields)) {
    request.fieldsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fields, 'Fields', 'json');
  }
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.fieldsShrink)) {
    query['Fields'] = request.fieldsShrink;
  }
  if (!$isNull(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!$isNull(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSiteTopData',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Top数据
 *
 * @param request DescribeSiteTopDataRequest
 * @return DescribeSiteTopDataResponse
 */
async function describeSiteTopData(request: DescribeSiteTopDataRequest): DescribeSiteTopDataResponse {
  var runtime = new $RuntimeOptions{};
  return describeSiteTopDataWithOptions(request, runtime);
}

model DescribeUrlObservationDataRequest {
  clientPlatform?: string(name='ClientPlatform', example='PC'),
  endTime?: string(name='EndTime', example='2023-04-19T15:59:59Z'),
  metric?: string(name='Metric', example='TTFB'),
  siteId?: string(name='SiteId', description='This parameter is required.', example='54362329990032'),
  startTime?: string(name='StartTime', example='2023-04-08T16:00:00Z'),
  url?: string(name='Url', example='example.com/test'),
}

model DescribeUrlObservationDataResponseBody = {
  endTime?: string(name='EndTime', example='2023-04-19T15:59:59Z'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  startTime?: string(name='StartTime', example='2022-11-06T16:00:00Z'),
  urlDetailData?: [ 
    {
      CLS?: float(name='CLS', example='0.5'),
      clientPlatform?: string(name='ClientPlatform', example='PC'),
      country?: string(name='Country', example='CN'),
      FCP?: float(name='FCP', example='123'),
      FID?: float(name='FID', example='123'),
      INP?: float(name='INP', example='123'),
      LCP?: float(name='LCP', example='123'),
      TTFB?: float(name='TTFB', example='123'),
      url?: string(name='Url', example='example.com/test'),
    }
  ](name='UrlDetailData'),
}

model DescribeUrlObservationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUrlObservationDataResponseBody(name='body'),
}

/**
 * @summary 查询网页观测质量数据
 *
 * @param request DescribeUrlObservationDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUrlObservationDataResponse
 */
@context("describeUrlObservationDataWithContext")
async function describeUrlObservationDataWithOptions(request: DescribeUrlObservationDataRequest, runtime: $RuntimeOptions): DescribeUrlObservationDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.clientPlatform)) {
    query['ClientPlatform'] = request.clientPlatform;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.metric)) {
    query['Metric'] = request.metric;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeUrlObservationData',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询网页观测质量数据
 *
 * @param request DescribeUrlObservationDataRequest
 * @return DescribeUrlObservationDataResponse
 */
async function describeUrlObservationData(request: DescribeUrlObservationDataRequest): DescribeUrlObservationDataResponse {
  var runtime = new $RuntimeOptions{};
  return describeUrlObservationDataWithOptions(request, runtime);
}

model DisableCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='100001'),
}

model DisableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', description='The ID of the disabled policy.', example='100001'),
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DisableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Disables a scenario-specific policy.
 *
 * @param request DisableCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableCustomScenePolicyResponse
 */
@context("disableCustomScenePolicyWithContext")
async function disableCustomScenePolicyWithOptions(request: DisableCustomScenePolicyRequest, runtime: $RuntimeOptions): DisableCustomScenePolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DisableCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables a scenario-specific policy.
 *
 * @param request DisableCustomScenePolicyRequest
 * @return DisableCustomScenePolicyResponse
 */
async function disableCustomScenePolicy(request: DisableCustomScenePolicyRequest): DisableCustomScenePolicyResponse {
  var runtime = new $RuntimeOptions{};
  return disableCustomScenePolicyWithOptions(request, runtime);
}

model EditSiteWafSettingsRequest {
  settings?: WafSiteSettings(name='Settings', description='WAF configuration information for the site, passed in JSON format.'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model EditSiteWafSettingsShrinkRequest {
  settingsShrink?: string(name='Settings', description='WAF configuration information for the site, passed in JSON format.'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model EditSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model EditSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditSiteWafSettingsResponseBody(name='body'),
}

/**
 * @summary Edit WAF Configuration for a Site
 *
 * @param tmpReq EditSiteWafSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EditSiteWafSettingsResponse
 */
@context("editSiteWafSettingsWithContext")
async function editSiteWafSettingsWithOptions(tmpReq: EditSiteWafSettingsRequest, runtime: $RuntimeOptions): EditSiteWafSettingsResponse {
  tmpReq.validate();
  var request = new EditSiteWafSettingsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.settings)) {
    request.settingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.settings, 'Settings', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.settingsShrink)) {
    body['Settings'] = request.settingsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EditSiteWafSettings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Edit WAF Configuration for a Site
 *
 * @param request EditSiteWafSettingsRequest
 * @return EditSiteWafSettingsResponse
 */
async function editSiteWafSettings(request: EditSiteWafSettingsRequest): EditSiteWafSettingsResponse {
  var runtime = new $RuntimeOptions{};
  return editSiteWafSettingsWithOptions(request, runtime);
}

model EnableCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='1'),
}

model EnableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model EnableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Enables a scenario-specific policy.
 *
 * @param request EnableCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableCustomScenePolicyResponse
 */
@context("enableCustomScenePolicyWithContext")
async function enableCustomScenePolicyWithOptions(request: EnableCustomScenePolicyRequest, runtime: $RuntimeOptions): EnableCustomScenePolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnableCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables a scenario-specific policy.
 *
 * @param request EnableCustomScenePolicyRequest
 * @return EnableCustomScenePolicyResponse
 */
async function enableCustomScenePolicy(request: EnableCustomScenePolicyRequest): EnableCustomScenePolicyResponse {
  var runtime = new $RuntimeOptions{};
  return enableCustomScenePolicyWithOptions(request, runtime);
}

model ExportRecordsRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='1234567890123'),
}

model ExportRecordsResponseBody = {
  content?: string(name='Content', description='The exported DNS records.', example=';; site:example.com.\\\\n;; Exported:2024-01-24 15:54:35\\\\n\\\\n;; A Records\\\\na1.example.com. 30 IN A 1.1.1.1 direct\\\\na2.example.com. 30 IN A 1.1.1.1 direct\\\\na3.example.com. 30 IN A 1.1.1.1 direct\\\\n'),
  requestId?: string(name='RequestId', description='The request ID.', example='C69B5894-D1BA-592C-95D0-DADBE7AEAC63'),
}

model ExportRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportRecordsResponseBody(name='body'),
}

/**
 * @summary Exports all DNS records of a website domain as a TXT file.
 *
 * @param request ExportRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportRecordsResponse
 */
@context("exportRecordsWithContext")
async function exportRecordsWithOptions(request: ExportRecordsRequest, runtime: $RuntimeOptions): ExportRecordsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Exports all DNS records of a website domain as a TXT file.
 *
 * @param request ExportRecordsRequest
 * @return ExportRecordsResponse
 */
async function exportRecords(request: ExportRecordsRequest): ExportRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return exportRecordsWithOptions(request, runtime);
}

model GetCacheReserveSpecificationResponseBody = {
  cacheReserveCapacity?: [ string ](name='CacheReserveCapacity', description='List of cache retention capacity specifications.'),
  cacheReserveRegion?: [ string ](name='CacheReserveRegion', description='List of cache retention region specifications.'),
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model GetCacheReserveSpecificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCacheReserveSpecificationResponseBody(name='body'),
}

/**
 * @summary Queries the available specifications of cache reserve instances.
 *
 * @param request GetCacheReserveSpecificationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecificationWithOptions(runtime: $RuntimeOptions): GetCacheReserveSpecificationResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'GetCacheReserveSpecification',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the available specifications of cache reserve instances.
 *
 * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecification(): GetCacheReserveSpecificationResponse {
  var runtime = new $RuntimeOptions{};
  return getCacheReserveSpecificationWithOptions(runtime);
}

model GetCacheRuleRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [ListCacheRules](https://help.aliyun.com/document_detail/2866985.html) interface.

This parameter is required.', example='352816096987136'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model GetCacheRuleResponseBody = {
  additionalCacheablePorts?: string(name='AdditionalCacheablePorts', description='Enable caching on the specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.', example='2095'),
  browserCacheMode?: string(name='BrowserCacheMode', description='Browser cache mode. Value range:
- no_cache: Do not cache.
- follow_origin: Follow origin cache policy.
- override_origin: Override origin cache policy.', example='follow_origin'),
  browserCacheTtl?: string(name='BrowserCacheTtl', description='Browser cache expiration time, in seconds.', example='300'),
  bypassCache?: string(name='BypassCache', description='Set bypass cache mode. Value range:

- cache_all: Cache all requests.
- bypass_all: Bypass cache for all requests.', example='cache_all'),
  cacheDeceptionArmor?: string(name='CacheDeceptionArmor', description='Cache deception defense. Used to defend against web cache deception attacks. Only the verified cache content will be cached. Value range:

- on: Enabled.
- off: Disabled.', example='on'),
  cacheReserveEligibility?: string(name='CacheReserveEligibility', description='Cache reserve eligibility. Used to control whether user requests bypass the cache reserve node when returning to the origin. Value range:

- bypass_cache_reserve: Requests bypass the cache reserve.
- eligible_for_cache_reserve: Eligible for cache reserve.', example='bypass_cache_reserve'),
  checkPresenceCookie?: string(name='CheckPresenceCookie', description='When generating the cache key, check if the cookie exists. If it does, add the cookie name (cookie names are case-insensitive) to the cache key. Supports multiple cookie names, separated by spaces.', example='cookiename'),
  checkPresenceHeader?: string(name='CheckPresenceHeader', description='When generating the cache key, check if the header exists. If it does, add the header name (header names are case-insensitive) to the cache key. Supports multiple header names, separated by spaces.', example='headername'),
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration;
- rule: Query rule configuration;', example='global'),
  edgeCacheMode?: string(name='EdgeCacheMode', description='Edge cache mode. Value range:
- follow_origin: Follow origin cache policy (if exists), otherwise use the default cache policy.
- no_cache: Do not cache.
- override_origin: Override origin cache policy.
- follow_origin_bypass: Follow origin cache policy (if exists), otherwise do not cache.', example='follow_origin'),
  edgeCacheTtl?: string(name='EdgeCacheTtl', description='Edge cache expiration time, in seconds.', example='300'),
  edgeStatusCodeCacheTtl?: string(name='EdgeStatusCodeCacheTtl', description='Status code cache expiration time, in seconds.', example='300'),
  includeCookie?: string(name='IncludeCookie', description='When generating the cache key, include the specified cookie names and their values. Supports multiple values, separated by spaces.', example='cookie_exapmle'),
  includeHeader?: string(name='IncludeHeader', description='When generating the cache key, include the specified header names and their values. Supports multiple values, separated by spaces.', example='example'),
  queryString?: string(name='QueryString', description='The query strings to be retained or deleted, supporting multiple values separated by spaces.', example='example'),
  queryStringMode?: string(name='QueryStringMode', description='The processing mode for query strings when generating cache keys. Value range:

- ignore_all: Ignore all.
- exclude_query_string: Exclude specified query strings.
- reserve_all: Default, reserve all.
- include_query_string: Include specified query strings.', example='reserve_all'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  serveStale?: string(name='ServeStale', description='Serve stale cache. When enabled, the node can still use the cached expired files to respond to user requests even if the origin server is unavailable. Value range:

- on: Enabled.
- off: Disabled.', example='on'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, defaulting to version 0.', example='1'),
  sortQueryStringForCache?: string(name='SortQueryStringForCache', description='Query string sorting. Value range:
- on: Enable.
- off: Disable.', example='on'),
  userDeviceType?: string(name='UserDeviceType', description='When generating the cache key, include the client device type. Value range:

- on: Enabled.
- off: Disabled.', example='on'),
  userGeo?: string(name='UserGeo', description='When generating the cache key, include the client\\\\"s geographic location. Value range:

- on: Enabled.
- off: Disabled.', example='on'),
  userLanguage?: string(name='UserLanguage', description='When generating the cache key, include the client\\\\"s language type. Value range:

- on: Enabled.
- off: Disabled.', example='on'),
}

model GetCacheRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCacheRuleResponseBody(name='body'),
}

/**
 * @summary Query a single cache configuration
 *
 * @param request GetCacheRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCacheRuleResponse
 */
@context("getCacheRuleWithContext")
async function getCacheRuleWithOptions(request: GetCacheRuleRequest, runtime: $RuntimeOptions): GetCacheRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCacheRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a single cache configuration
 *
 * @param request GetCacheRuleRequest
 * @return GetCacheRuleResponse
 */
async function getCacheRule(request: GetCacheRuleRequest): GetCacheRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getCacheRuleWithOptions(request, runtime);
}

model GetCacheTagRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site.', example='1'),
}

model GetCacheTagResponseBody = {
  caseInsensitive?: string(name='CaseInsensitive', description='Whether to ignore case. Possible values:
- on: Enabled, ignores case.
- off: Disabled, does not ignore case.', example='on'),
  requestId?: string(name='RequestId', description='Request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site.', example='1'),
  tagName?: string(name='TagName', description='Custom CacheTag name.', example='example'),
}

model GetCacheTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCacheTagResponseBody(name='body'),
}

/**
 * @summary Query Site Cache Tag Configuration
 *
 * @param request GetCacheTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCacheTagResponse
 */
@context("getCacheTagWithContext")
async function getCacheTagWithOptions(request: GetCacheTagRequest, runtime: $RuntimeOptions): GetCacheTagResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCacheTag',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Site Cache Tag Configuration
 *
 * @param request GetCacheTagRequest
 * @return GetCacheTagResponse
 */
async function getCacheTag(request: GetCacheTagRequest): GetCacheTagResponse {
  var runtime = new $RuntimeOptions{};
  return getCacheTagWithOptions(request, runtime);
}

model GetCertificateRequest {
  id?: string(name='Id', description='Certificate ID.

This parameter is required.', example='babaded901474b9693acf530e0fb1d95'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1234567890123'),
}

model GetCertificateResponseBody = {
  certificate?: string(name='Certificate', description='Certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  result?: {
    applyCode?: long(name='ApplyCode', description='The error code returned for certificate application.', example='2'),
    applyMessage?: string(name='ApplyMessage', description='The error message returned for certificate application.', example='canceled'),
    casId?: string(name='CasId', description='Cloud certificate ID.', example='30000478'),
    commonName?: string(name='CommonName', description='Common Name (CN) field of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='Creation time.', example='2020-05-12 02:00:53'),
    DCV?: [ 
      {
        id?: string(name='Id', description='The DCV ID.', example='bababf7cdd1546a2ad04c0def1f4c980'),
        key?: string(name='Key', description='The DCV name. It is a TXT record name if Type is DNS or URL if Type is HTTP.', example='http://www.example.com/.well-known/acme-challenge/pH20CqwS5L3ZnvkhI436DCzadKFuG7QcUcvB_4KsAow'),
        status?: string(name='Status', description='The verification status.', example='pending'),
        type?: string(name='Type', description='The DCV type. Valid values: DNS and HTTP.', example='HTTP'),
        value?: string(name='Value', description='The DCV content.', example='pH20CqwS5L3ZnvkhI436DCzadKFuG7QcUcvB_4KsAow.KfzYo4LH3EgOt7a73G-RqZkbR0eYtLfEUmtmqGmr4FQ'),
      }
    ](name='DCV', description='The Domain Control Validation (DCV) information.'),
    fingerprintSha256?: string(name='FingerprintSha256', description='SHA256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
    id?: string(name='Id', description='Certificate ID.', example='babaded901474b9693acf530e0fb1d95'),
    issuer?: string(name='Issuer', description='Certificate issuer.', example='DigiCert'),
    issuerCN?: string(name='IssuerCN', description='Certificate issuing authority.', example='DigiCert Global Root CA'),
    name?: string(name='Name', description='Certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='End time of the certificate validity period.', example='2023-11-26T16:00:00Z'),
    notBefore?: string(name='NotBefore', description='Start time of the certificate validity period.', example='2023-11-26T16:00:00Z'),
    pubAlg?: string(name='PubAlg', description='Certificate public key algorithm.', example='ECDSA'),
    region?: string(name='Region', description='Region.', example='cn-hangzhou'),
    SAN?: string(name='SAN', description='Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber', description='Serial number of the certificate.', example='babaded901474b9693acf530e0fb1daa'),
    sigAlg?: string(name='SigAlg', description='Certificate signature algorithm.', example='ECDSA-SHA1'),
    status?: string(name='Status', description='Certificate status.', example='OK'),
    type?: string(name='Type', description='Certificate type.', example='free'),
    updateTime?: string(name='UpdateTime', description='Update time.', example='2022-09-22 05:33:13'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='Site ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='Site name.', example='example.com'),
  status?: string(name='Status', description='Certificate status.', example='OK'),
}

model GetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCertificateResponseBody(name='body'),
}

/**
 * @summary Retrieve the certificate, private key, and certificate information
 *
 * @param request GetCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCertificateResponse
 */
@context("getCertificateWithContext")
async function getCertificateWithOptions(request: GetCertificateRequest, runtime: $RuntimeOptions): GetCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Retrieve the certificate, private key, and certificate information
 *
 * @param request GetCertificateRequest
 * @return GetCertificateResponse
 */
async function getCertificate(request: GetCertificateRequest): GetCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return getCertificateWithOptions(request, runtime);
}

model GetCertificateQuotaRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1234567890123'),
  type?: string(name='Type', description='Certificate Quota type.

This parameter is required.', example='free'),
}

model GetCertificateQuotaResponseBody = {
  quota?: long(name='Quota', description='Free certificate quota.', example='10'),
  quotaUsage?: long(name='QuotaUsage', description='Usage of free certificate quota.', example='5'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteCount?: long(name='SiteCount', description='Number of sites.', example='2'),
  siteUsage?: [ 
    {
      siteId?: string(name='SiteId', description='Site ID.', example='165929521496928'),
      siteName?: string(name='SiteName', description='Site name.', example='example.com'),
      siteUsage?: long(name='SiteUsage', description='Site usage.', example='5'),
    }
  ](name='SiteUsage', description='List of site usage details.'),
  type?: string(name='Type', description='Certificate Quota type.', example='free'),
}

model GetCertificateQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCertificateQuotaResponseBody(name='body'),
}

/**
 * @summary Query certificate quota and usage
 *
 * @param request GetCertificateQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCertificateQuotaResponse
 */
@context("getCertificateQuotaWithContext")
async function getCertificateQuotaWithOptions(request: GetCertificateQuotaRequest, runtime: $RuntimeOptions): GetCertificateQuotaResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCertificateQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query certificate quota and usage
 *
 * @param request GetCertificateQuotaRequest
 * @return GetCertificateQuotaResponse
 */
async function getCertificateQuota(request: GetCertificateQuotaRequest): GetCertificateQuotaResponse {
  var runtime = new $RuntimeOptions{};
  return getCertificateQuotaWithOptions(request, runtime);
}

model GetClientCaCertificateRequest {
  id?: string(name='Id', description='The certificate ID, which can be obtained by calling the [ListClientCaCertificates](https://help.aliyun.com/document_detail/2860651.html) operation.

This parameter is required.', example='babab9db65ee5efcca9f3d41d4b5****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model GetClientCaCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  result?: {
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-03-05 18:24:04'),
    fingerprintSha256?: string(name='FingerprintSha256'),
    id?: string(name='Id', description='The certificate ID.', example='babab9db65ee5efcca9f3d41d4b5****'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
    status?: string(name='Status', description='The certificate status.', example='OK'),
    type?: string(name='Type', description='The certificate type.', example='upload'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-03-05 18:24:04'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The certificate status.', example='OK'),
}

model GetClientCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientCaCertificateResponseBody(name='body'),
}

/**
 * @summary Queries a client CA certificate.
 *
 * @param request GetClientCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClientCaCertificateResponse
 */
@context("getClientCaCertificateWithContext")
async function getClientCaCertificateWithOptions(request: GetClientCaCertificateRequest, runtime: $RuntimeOptions): GetClientCaCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetClientCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a client CA certificate.
 *
 * @param request GetClientCaCertificateRequest
 * @return GetClientCaCertificateResponse
 */
async function getClientCaCertificate(request: GetClientCaCertificateRequest): GetClientCaCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return getClientCaCertificateWithOptions(request, runtime);
}

model GetClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model GetClientCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  result?: {
    CACertificateId?: string(name='CACertificateId', description='The ID of the CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
    fingerprintSha256?: string(name='FingerprintSha256'),
    id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
    status?: string(name='Status', description='The certificate status.', example='active'),
    type?: string(name='Type', description='The certificate type.', example='dcdn'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-09-22 05:33:13'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The certificate status.', example='active'),
}

model GetClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientCertificateResponseBody(name='body'),
}

/**
 * @summary Queries information about a client certificate.
 *
 * @param request GetClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClientCertificateResponse
 */
@context("getClientCertificateWithContext")
async function getClientCertificateWithOptions(request: GetClientCertificateRequest, runtime: $RuntimeOptions): GetClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about a client certificate.
 *
 * @param request GetClientCertificateRequest
 * @return GetClientCertificateResponse
 */
async function getClientCertificate(request: GetClientCertificateRequest): GetClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return getClientCertificateWithOptions(request, runtime);
}

model GetClientCertificateHostnamesRequest {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model GetClientCertificateHostnamesResponseBody = {
  hostnames?: [ string ](name='Hostnames', description='The domain names with which the certificate is associated.'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model GetClientCertificateHostnamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientCertificateHostnamesResponseBody(name='body'),
}

/**
 * @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
 *
 * @param request GetClientCertificateHostnamesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClientCertificateHostnamesResponse
 */
@context("getClientCertificateHostnamesWithContext")
async function getClientCertificateHostnamesWithOptions(request: GetClientCertificateHostnamesRequest, runtime: $RuntimeOptions): GetClientCertificateHostnamesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetClientCertificateHostnames',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
 *
 * @param request GetClientCertificateHostnamesRequest
 * @return GetClientCertificateHostnamesResponse
 */
async function getClientCertificateHostnames(request: GetClientCertificateHostnamesRequest): GetClientCertificateHostnamesResponse {
  var runtime = new $RuntimeOptions{};
  return getClientCertificateHostnamesWithOptions(request, runtime);
}

model GetCnameFlatteningRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model GetCnameFlatteningResponseBody = {
  flattenMode?: string(name='FlattenMode', description='The CNAME flattening mode. Valid values:

*   flatten_all: flattens all CNAMEs.
*   flatten_all (default): flattens only the root domain.', example='flatten_all'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model GetCnameFlatteningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCnameFlatteningResponseBody(name='body'),
}

/**
 * @summary Queries the CNAME flattening configuration of a website
 *
 * @param request GetCnameFlatteningRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCnameFlatteningResponse
 */
@context("getCnameFlatteningWithContext")
async function getCnameFlatteningWithOptions(request: GetCnameFlatteningRequest, runtime: $RuntimeOptions): GetCnameFlatteningResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCnameFlattening',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the CNAME flattening configuration of a website
 *
 * @param request GetCnameFlatteningRequest
 * @return GetCnameFlatteningResponse
 */
async function getCnameFlattening(request: GetCnameFlatteningRequest): GetCnameFlatteningResponse {
  var runtime = new $RuntimeOptions{};
  return getCnameFlatteningWithOptions(request, runtime);
}

model GetCompressionRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID, which can be obtained by calling the [ListCompressionRules](https://help.aliyun.com/document_detail/2867498.html) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='34003500310****'),
}

model GetCompressionRuleResponseBody = {
  brotli?: string(name='Brotli', description='Brotli compression. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule-based configuration.', example='rule'),
  gzip?: string(name='Gzip', description='Gzip compression. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  requestId?: string(name='RequestId', description='Request ID.', example='186C6DF2-D96A-5102-B04E-FB92C16C9867'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, this parameter can specify the effective version of the configuration, defaulting to version 0.', example='0'),
  zstd?: string(name='Zstd', description='Zstd compression. Value range: 
- on: enabled. 
- off: disabled.', example='on'),
}

model GetCompressionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCompressionRuleResponseBody(name='body'),
}

/**
 * @summary Query Compression Rule Details
 *
 * @param request GetCompressionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCompressionRuleResponse
 */
@context("getCompressionRuleWithContext")
async function getCompressionRuleWithOptions(request: GetCompressionRuleRequest, runtime: $RuntimeOptions): GetCompressionRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCompressionRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Compression Rule Details
 *
 * @param request GetCompressionRuleRequest
 * @return GetCompressionRuleResponse
 */
async function getCompressionRule(request: GetCompressionRuleRequest): GetCompressionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getCompressionRuleWithOptions(request, runtime);
}

model GetCrossBorderOptimizationRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='340035003106221'),
}

model GetCrossBorderOptimizationResponseBody = {
  enable?: string(name='Enable', example='on'),
  requestId?: string(name='RequestId', example='CF521A24-633F-5350-A6A5-42AD503D0D20'),
}

model GetCrossBorderOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCrossBorderOptimizationResponseBody(name='body'),
}

/**
 * @summary 查询站点中国大陆网络接入优化配置
 *
 * @param request GetCrossBorderOptimizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCrossBorderOptimizationResponse
 */
@context("getCrossBorderOptimizationWithContext")
async function getCrossBorderOptimizationWithOptions(request: GetCrossBorderOptimizationRequest, runtime: $RuntimeOptions): GetCrossBorderOptimizationResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCrossBorderOptimization',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点中国大陆网络接入优化配置
 *
 * @param request GetCrossBorderOptimizationRequest
 * @return GetCrossBorderOptimizationResponse
 */
async function getCrossBorderOptimization(request: GetCrossBorderOptimizationRequest): GetCrossBorderOptimizationResponse {
  var runtime = new $RuntimeOptions{};
  return getCrossBorderOptimizationWithOptions(request, runtime);
}

model GetDevelopmentModeRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='5407498413****'),
}

model GetDevelopmentModeResponseBody = {
  enable?: string(name='Enable', description='Switch. Values:

- **on**: Enabled.
- **off**: Disabled.', example='on'),
  requestId?: string(name='RequestId', description='Request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model GetDevelopmentModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDevelopmentModeResponseBody(name='body'),
}

/**
 * @summary Query Site Developer Mode Configuration
 *
 * @param request GetDevelopmentModeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDevelopmentModeResponse
 */
@context("getDevelopmentModeWithContext")
async function getDevelopmentModeWithOptions(request: GetDevelopmentModeRequest, runtime: $RuntimeOptions): GetDevelopmentModeResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDevelopmentMode',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Site Developer Mode Configuration
 *
 * @param request GetDevelopmentModeRequest
 * @return GetDevelopmentModeResponse
 */
async function getDevelopmentMode(request: GetDevelopmentModeRequest): GetDevelopmentModeResponse {
  var runtime = new $RuntimeOptions{};
  return getDevelopmentModeWithOptions(request, runtime);
}

model GetEdgeContainerAppRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
}

model GetEdgeContainerAppResponseBody = {
  app?: {
    appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
    createTime?: string(name='CreateTime', description='The time when the application was created.', example='2023-07-25T05:58:05Z'),
    domainName?: string(name='DomainName', description='The domain name that is associated with the application. If no domain name is associated with the application, the value is an empty string.', example='www.1feel.cn'),
    gatewayType?: string(name='GatewayType', description='The type of the gateway. Valid values:

*   l7: Layer 7 gateway.
*   l4: Layer 4 gateway.', example='l7'),
    healthCheck?: {
      failTimes?: int32(name='FailTimes', description='The number of consecutive failed health checks required for an application to be considered as unhealthy.', example='5'),
      host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
      httpCode?: string(name='HttpCode', description='The range of health check status codes that indicate successful health checks.', example='http_2xx'),
      interval?: int32(name='Interval', description='The interval between health checks. Unit: seconds.', example='5'),
      method?: string(name='Method', description='The HTTP method that the health check request uses.', example='HEAD'),
      port?: int32(name='Port', description='The health check port.', example='80'),
      succTimes?: int32(name='SuccTimes', description='The number of consecutive successful health checks required for an application to be considered as healthy.', example='3'),
      timeout?: int32(name='Timeout', description='The timeout period of the health check. Unit: seconds.', example='60'),
      type?: string(name='Type', description='The health check type. Valid values:

*   l7
*   l4', example='l7'),
      uri?: string(name='Uri', description='The health check URL.', example='/health_check'),
    }(name='HealthCheck', description='The information about health checks.'),
    name?: string(name='Name', description='The application name.', example='test-app1'),
    quicCid?: string(name='QuicCid', description='Indicates whether QUIC is enabled.', example='false'),
    remarks?: string(name='Remarks', description='The remarks about the application.', example='test app'),
    servicePort?: int32(name='ServicePort', description='The server port. Valid values: 1 to 65535.', example='80'),
    status?: string(name='Status', description='The status of the application. Valid values:

*   creating: The application is being created.
*   failed: The application failed to be created.
*   created: The application is created.', example='created'),
    targetPort?: int32(name='TargetPort', description='The backend port, which is also the service port of the application. Valid values: 1 to 65535.', example='80'),
    updateTime?: string(name='UpdateTime', description='The time when the application was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-03-26T02:35:58Z'),
    versionCount?: int32(name='VersionCount', description='The number of versions of the application.', example='1'),
  }(name='App', description='The basic information about the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model GetEdgeContainerAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppResponseBody(name='body'),
}

/**
 * @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
 *
 * @param request GetEdgeContainerAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppResponse
 */
@context("getEdgeContainerAppWithContext")
async function getEdgeContainerAppWithOptions(request: GetEdgeContainerAppRequest, runtime: $RuntimeOptions): GetEdgeContainerAppResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerApp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
 *
 * @param request GetEdgeContainerAppRequest
 * @return GetEdgeContainerAppResponse
 */
async function getEdgeContainerApp(request: GetEdgeContainerAppRequest): GetEdgeContainerAppResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerAppWithOptions(request, runtime);
}

model GetEdgeContainerAppLogRiverRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-880688675****88'),
}

model GetEdgeContainerAppLogRiverResponseBody = {
  path?: string(name='Path', description='The log path of the container. It must be an absolute path that starts with a forward slash (/). You can use asterisks (\\\\*) and question marks (?) as wildcards.', example='/root/hello.log'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  stdout?: boolean(name='Stdout', description='Indicates whether the standard output of the container is collected.'),
}

model GetEdgeContainerAppLogRiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppLogRiverResponseBody(name='body'),
}

/**
 * @summary Queries the log collection configuration of a containerized application.
 *
 * @param request GetEdgeContainerAppLogRiverRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppLogRiverResponse
 */
@context("getEdgeContainerAppLogRiverWithContext")
async function getEdgeContainerAppLogRiverWithOptions(request: GetEdgeContainerAppLogRiverRequest, runtime: $RuntimeOptions): GetEdgeContainerAppLogRiverResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerAppLogRiver',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the log collection configuration of a containerized application.
 *
 * @param request GetEdgeContainerAppLogRiverRequest
 * @return GetEdgeContainerAppLogRiverResponse
 */
async function getEdgeContainerAppLogRiver(request: GetEdgeContainerAppLogRiverRequest): GetEdgeContainerAppLogRiverResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerAppLogRiverWithOptions(request, runtime);
}

model GetEdgeContainerAppResourceReserveRequest {
  appId?: string(name='AppId', example='app-88068867578379****'),
}

model GetEdgeContainerAppResourceReserveResponseBody = {
  durationTime?: string(name='DurationTime', example='2006-01-02T15:04:05Z'),
  enable?: boolean(name='Enable', example='true'),
  forever?: boolean(name='Forever', example='true'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  reserveSet?: [ 
    {
      isp?: string(name='Isp', example='cmcc'),
      region?: string(name='Region', example='huazhong'),
      replicas?: int32(name='Replicas', example='1'),
    }
  ](name='ReserveSet'),
}

model GetEdgeContainerAppResourceReserveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppResourceReserveResponseBody(name='body'),
}

/**
 * @summary 获取边缘容器资源预留配置
 *
 * @param request GetEdgeContainerAppResourceReserveRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppResourceReserveResponse
 */
@context("getEdgeContainerAppResourceReserveWithContext")
async function getEdgeContainerAppResourceReserveWithOptions(request: GetEdgeContainerAppResourceReserveRequest, runtime: $RuntimeOptions): GetEdgeContainerAppResourceReserveResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerAppResourceReserve',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取边缘容器资源预留配置
 *
 * @param request GetEdgeContainerAppResourceReserveRequest
 * @return GetEdgeContainerAppResourceReserveResponse
 */
async function getEdgeContainerAppResourceReserve(request: GetEdgeContainerAppResourceReserveRequest): GetEdgeContainerAppResourceReserveResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerAppResourceReserveWithOptions(request, runtime);
}

model GetEdgeContainerAppResourceStatusRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='app-96253477062511****'),
}

model GetEdgeContainerAppResourceStatusResponseBody = {
  regions?: [ 
    {
      isOffline?: boolean(name='IsOffline'),
      isStaging?: boolean(name='IsStaging'),
      isp?: string(name='Isp', example='unicom'),
      ready?: int32(name='Ready', example='1'),
      region?: string(name='Region', example='huadong'),
      total?: int32(name='Total', example='1'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model GetEdgeContainerAppResourceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppResourceStatusResponseBody(name='body'),
}

/**
 * @summary 获取边缘容器应用资源分布
 *
 * @param request GetEdgeContainerAppResourceStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppResourceStatusResponse
 */
@context("getEdgeContainerAppResourceStatusWithContext")
async function getEdgeContainerAppResourceStatusWithOptions(request: GetEdgeContainerAppResourceStatusRequest, runtime: $RuntimeOptions): GetEdgeContainerAppResourceStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerAppResourceStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取边缘容器应用资源分布
 *
 * @param request GetEdgeContainerAppResourceStatusRequest
 * @return GetEdgeContainerAppResourceStatusResponse
 */
async function getEdgeContainerAppResourceStatus(request: GetEdgeContainerAppResourceStatusRequest): GetEdgeContainerAppResourceStatusResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerAppResourceStatusWithOptions(request, runtime);
}

model GetEdgeContainerAppStatusRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  publishEnv?: string(name='PublishEnv', description='The release environment. Valid values: prod and staging.', example='staging'),
}

model GetEdgeContainerAppStatusResponseBody = {
  appStatus?: {
    baseLineVersion?: string(name='BaseLineVersion', description='The base version of the application.', example='ver-123123123123****'),
    deployStatus?: string(name='DeployStatus', description='The deployment status of the application.

*   **undeploy**: The application is not deployed.
*   **deploying**: The application is being deployed.
*   **deployed**: The application is deployed.
*   **undeploying**: The deployment is being canceled.', example='undeploy'),
    deployTime?: string(name='DeployTime', description='The time when the application was deployed. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2024-07-25T05:58:05Z'),
    deployedVersion?: string(name='DeployedVersion', description='The release version of the application.', example='ver-123123123123****'),
    expectPercentage?: int32(name='ExpectPercentage', description='The expected release percentage of the application.', example='50%'),
    fullRelease?: boolean(name='FullRelease', description='Specifies whether to fully release the version. This parameter takes effect only when PublishType is set to region.', example='true'),
    publishEnv?: string(name='PublishEnv', description='The environment to which the application was released. Valid values:

*   **prod**: the production environment.
*   **staging**: the staging environment.', example='prod'),
    publishPercentage?: int32(name='PublishPercentage', description='The release percentage of the application.', example='50%'),
    publishStatus?: string(name='PublishStatus', description='The release status of the application. Valid values:

*   **publishing**
*   **published**
*   **rollbacking**
*   **rollbacked**', example='pubishing'),
    publishTime?: string(name='PublishTime', description='The time when the application was released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2024-07-25T05:58:05Z'),
    publishType?: string(name='PublishType', description='Specifies how the version is released. Valid values:

*   percentage: releases the version by percentage.
*   region: releases the version by region.

If you do not specify this parameter, the version is released by percentage by default.', example='percentage'),
    publishingVersion?: string(name='PublishingVersion', description='The release version of the application.', example='ver-123123123123****'),
    regions?: {
      region?: [ string ](name='Region')
    }(name='Regions', description='The regions to which the version is released.'),
    rollbackTime?: string(name='RollbackTime', description='The time when the last rollback was performed.', example='2024-07-25T05:58:05Z'),
    unDeployTime?: string(name='UnDeployTime', description='The time when the application deployment was canceled. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2024-07-25T05:58:05Z'),
  }(name='AppStatus', description='The status of the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetEdgeContainerAppStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
 *
 * @param request GetEdgeContainerAppStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppStatusResponse
 */
@context("getEdgeContainerAppStatusWithContext")
async function getEdgeContainerAppStatusWithOptions(request: GetEdgeContainerAppStatusRequest, runtime: $RuntimeOptions): GetEdgeContainerAppStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.publishEnv)) {
    query['PublishEnv'] = request.publishEnv;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerAppStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
 *
 * @param request GetEdgeContainerAppStatusRequest
 * @return GetEdgeContainerAppStatusResponse
 */
async function getEdgeContainerAppStatus(request: GetEdgeContainerAppStatusRequest): GetEdgeContainerAppStatusResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerAppStatusWithOptions(request, runtime);
}

model GetEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  versionId?: string(name='VersionId', description='The version ID, which can be obtained by calling the [ListEdgeContainerAppVersions](~~ListEdgeContainerAppVersions~~) operation.

This parameter is required.', example='ver-87962637161651****'),
}

model GetEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  version?: {
    appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
    containers?: [ 
      {
        ACRImageInfo?: {
          domain?: string(name='Domain', description='The domain name of the Container Registry image.', example='*.mooc.seewo.com'),
          instanceId?: string(name='InstanceId', description='The ID of the Container Registry instance.', example='xcdn-9ak2thl14z5s'),
          isEnterpriseRegistry?: boolean(name='IsEnterpriseRegistry', description='Indicates whether the image is an enterprise-level image.', example='false'),
          regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
          repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-zeu0xyk28alyxozh'),
          repoName?: string(name='RepoName', description='The name of the image repository.', example='test_1'),
          repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='wpy1'),
          tag?: string(name='Tag', description='The tag value.', example='test-healthy-100-soa-1710987653'),
          tagUrl?: string(name='TagUrl', description='The URL of the Container Registry image tag.', example='registry-vpc.cn-shenzhen.aliyuncs.com/lihetech/easywits_server_exam:3.40.2'),
        }(name='ACRImageInfo', description='The information about the Container Registry image.'),
        args?: string(name='Args', description='The arguments that are passed to the container startup command.', example='-c /path/config.toml'),
        command?: string(name='Command', description='The command that is used to start the container.', example='sh abc.sh 1 2 3'),
        envVariables?: string(name='EnvVariables', description='The environment variables.', example='ENV=prod'),
        image?: string(name='Image', description='The image address.', example='nginx:1.14.0'),
        isACRImage?: boolean(name='IsACRImage', description='Indicates whether the image is a Container Registry image.', example='false'),
        name?: string(name='Name', description='The version name.', example='version01'),
        postStart?: string(name='PostStart', description='The command that is run before the container is started. Format: `{"exec":{"command":["cat","/etc/group"\\\\]}}`. If you want to cancel this configuration, set the parameter value to `""` or `{}`. If you do not specify this parameter, this configuration is ignored.', example='{\\\\"exec\\\\":{\\\\"command\\\\":[\\\\"touch\\\\",\\\\"/home/admin/checkpoststartV1\\\\"]}}'),
        preStop?: string(name='PreStop', description='The command that is run before the container is stopped.', example='sh prestop.sh "echo hello world"'),
        probeContent?: {
          command?: string(name='Command', description='The probe command.', example='sh test.sh'),
          failureThreshold?: int32(name='FailureThreshold', description='The number of consecutive failed health checks required for a container to be considered as unhealthy.', example='3'),
          host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
          httpHeaders?: string(name='HttpHeaders', description='The request headers that are included in the container health check request.', example='[{\\\\"Content-Type\\\\":\\\\"application/json'),
          initialDelaySeconds?: int32(name='InitialDelaySeconds', description='The latency for container probe initialization.', example='20'),
          path?: string(name='Path', description='The path of the container health check.', example='/health_check'),
          periodSeconds?: int32(name='PeriodSeconds', description='The interval between container health checks.', example='5'),
          port?: int32(name='Port', description='The port of the container health check. Valid values: **1** to **65535**.', example='80'),
          scheme?: string(name='Scheme', description='The protocol that the container health check request uses.', example='http'),
          successThreshold?: int32(name='SuccessThreshold', description='The number of consecutive successful health checks required for a container to be considered as healthy.', example='1'),
          timeoutSeconds?: int32(name='TimeoutSeconds', description='The timeout period of the container health check.', example='5'),
        }(name='ProbeContent', description='The probe content.'),
        probeType?: string(name='ProbeType', description='The probe type.', example='httpGet'),
        spec?: string(name='Spec', description='The compute specification.', example='1C2G'),
        storage?: string(name='Storage', description='The storage capacity of the container. Valid values: 0.5G, 10G, 20G, and 30G.'),
      }
    ](name='Containers', description='The container images deployed for this version.'),
    createTime?: string(name='CreateTime', description='The time when the version was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-07-01T09:32:33Z'),
    lastPublishTime?: string(name='LastPublishTime', description='The time when the version was last released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-07-25T04:58:05Z'),
    name?: string(name='Name', description='The version name.', example='test'),
    publishTime?: string(name='PublishTime', description='The time when the version was released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2022-11-14T02:04:03Z'),
    remarks?: string(name='Remarks', description='The remarks.', example='aaa'),
    status?: string(name='Status', description='The status of the current version. Valid values:

*   created: The version is created.
*   failed: The version failed to be created.
*   creating: The version is being created.', example='created'),
    updateTime?: string(name='UpdateTime', description='The time when the version was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2021-12-03T10:52:52Z'),
    versionId?: string(name='VersionId', description='The ID of the created version.', example='ver-87962637161651****'),
  }(name='Version', description='The information about the version.'),
}

model GetEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
 *
 * @param request GetEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppVersionResponse
 */
@context("getEdgeContainerAppVersionWithContext")
async function getEdgeContainerAppVersionWithOptions(request: GetEdgeContainerAppVersionRequest, runtime: $RuntimeOptions): GetEdgeContainerAppVersionResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
 *
 * @param request GetEdgeContainerAppVersionRequest
 * @return GetEdgeContainerAppVersionResponse
 */
async function getEdgeContainerAppVersion(request: GetEdgeContainerAppVersionRequest): GetEdgeContainerAppVersionResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerAppVersionWithOptions(request, runtime);
}

model GetEdgeContainerDeployRegionsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='GetEdgeContainerDeployRegions'),
}

model GetEdgeContainerDeployRegionsResponseBody = {
  regions?: [ string ](name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetEdgeContainerDeployRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerDeployRegionsResponseBody(name='body'),
}

/**
 * @summary Queries regions where a containerized application is deployed based on the application ID.
 *
 * @param request GetEdgeContainerDeployRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerDeployRegionsResponse
 */
@context("getEdgeContainerDeployRegionsWithContext")
async function getEdgeContainerDeployRegionsWithOptions(request: GetEdgeContainerDeployRegionsRequest, runtime: $RuntimeOptions): GetEdgeContainerDeployRegionsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerDeployRegions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries regions where a containerized application is deployed based on the application ID.
 *
 * @param request GetEdgeContainerDeployRegionsRequest
 * @return GetEdgeContainerDeployRegionsResponse
 */
async function getEdgeContainerDeployRegions(request: GetEdgeContainerDeployRegionsRequest): GetEdgeContainerDeployRegionsResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerDeployRegionsWithOptions(request, runtime);
}

model GetEdgeContainerLogsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  lines?: int32(name='Lines', description='The number of log entries to output.

This parameter is required.', example='500'),
}

model GetEdgeContainerLogsResponseBody = {
  items?: [ string ](name='Items', description='The logs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetEdgeContainerLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerLogsResponseBody(name='body'),
}

/**
 * @summary Queries Edge Container logs.
 *
 * @param request GetEdgeContainerLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerLogsResponse
 */
@context("getEdgeContainerLogsWithContext")
async function getEdgeContainerLogsWithOptions(request: GetEdgeContainerLogsRequest, runtime: $RuntimeOptions): GetEdgeContainerLogsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerLogs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Edge Container logs.
 *
 * @param request GetEdgeContainerLogsRequest
 * @return GetEdgeContainerLogsResponse
 */
async function getEdgeContainerLogs(request: GetEdgeContainerLogsRequest): GetEdgeContainerLogsResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerLogsWithOptions(request, runtime);
}

model GetEdgeContainerStagingDeployStatusRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='GetEdgeContainerStagingDeployStatus'),
}

model GetEdgeContainerStagingDeployStatusResponseBody = {
  containersReady?: string(name='ContainersReady', description='Indicates whether the container is ready.

*   ok
*   unready', example='ok'),
  creationTimestamp?: string(name='CreationTimestamp', description='The time when the container was created. The value is a timestamp.', example='2024-09-24T06:46:35Z'),
  initialized?: string(name='Initialized', description='The initialization status of the container.

*   ok
*   unready', example='ok'),
  phase?: string(name='Phase', description='The status of the container in the staging environment.

*   NoContainer: created.
*   Running: running.
*   Failed: abnormal.', example='Running'),
  podRestartState?: {
    lastTerminatedReason?: string(name='LastTerminatedReason', description='The reason for the last restart.', example='OOMKilled'),
    restartCount?: int32(name='RestartCount', description='The number of times that the container restarted.', example='1'),
  }(name='PodRestartState', description='The details of container restart.'),
  ready?: string(name='Ready', description='Indicates whether domain names are associated with the container.

*   ok
*   unready', example='ok'),
  requestId?: string(name='RequestId', description='The request ID.', example='2F2C992B-3FE2-5EBB-A61F-F9DD4EB257DA'),
  scheduled?: string(name='Scheduled', description='The scheduling status of the container.

*   ok
*   unready', example='ok'),
  VIPs?: [ string ](name='VIPs', description='The virtual IP addresses.'),
}

model GetEdgeContainerStagingDeployStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerStagingDeployStatusResponseBody(name='body'),
}

/**
 * @summary Queries the deployment status of an application in the staging environment by using the application ID.
 *
 * @param request GetEdgeContainerStagingDeployStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerStagingDeployStatusResponse
 */
@context("getEdgeContainerStagingDeployStatusWithContext")
async function getEdgeContainerStagingDeployStatusWithOptions(request: GetEdgeContainerStagingDeployStatusRequest, runtime: $RuntimeOptions): GetEdgeContainerStagingDeployStatusResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerStagingDeployStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the deployment status of an application in the staging environment by using the application ID.
 *
 * @param request GetEdgeContainerStagingDeployStatusRequest
 * @return GetEdgeContainerStagingDeployStatusResponse
 */
async function getEdgeContainerStagingDeployStatus(request: GetEdgeContainerStagingDeployStatusRequest): GetEdgeContainerStagingDeployStatusResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerStagingDeployStatusWithOptions(request, runtime);
}

model GetEdgeContainerTerminalRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-88068867578379****'),
}

model GetEdgeContainerTerminalResponseBody = {
  cluster?: string(name='Cluster', description='The cluster name.', example='c497b44c2a59f4ae0bd2826edc40a2c6e'),
  container?: string(name='Container', description='The container name.', example='worker0'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='ns1'),
  pod?: string(name='Pod', description='The name of the container group.', example='1775b9e0-8463-457e-89e8-fb7b6d125b2e'),
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  sessionId?: string(name='SessionId', description='The session ID.', example='af22f4xxxxxxxxxxxxxxxxxx'),
  token?: string(name='Token', description='The information about the shared token.', example='af22f4-xxxxx-xxxx-xxxx-xxxx'),
}

model GetEdgeContainerTerminalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerTerminalResponseBody(name='body'),
}

/**
 * @summary Queries the terminal information of a containerized application.
 *
 * @param request GetEdgeContainerTerminalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerTerminalResponse
 */
@context("getEdgeContainerTerminalWithContext")
async function getEdgeContainerTerminalWithOptions(request: GetEdgeContainerTerminalRequest, runtime: $RuntimeOptions): GetEdgeContainerTerminalResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEdgeContainerTerminal',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the terminal information of a containerized application.
 *
 * @param request GetEdgeContainerTerminalRequest
 * @return GetEdgeContainerTerminalResponse
 */
async function getEdgeContainerTerminal(request: GetEdgeContainerTerminalRequest): GetEdgeContainerTerminalResponse {
  var runtime = new $RuntimeOptions{};
  return getEdgeContainerTerminalWithOptions(request, runtime);
}

model GetErServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetErServiceResponseBody = {
  planName?: string(name='PlanName', description='The billing mode. Valid values:

*   er_paymode: billed for customers on the China site.
*   er_freemode: free for customers on the China site.
*   er_paymodeintl: billed for customers on the International site.
*   err_freemodeintl: free for customers on the International site', example='er_paymode'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  status?: string(name='Status', description='The service status. Valid values:

*   Creating
*   Running
*   NotOpened', example='Running'),
}

model GetErServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErServiceResponseBody(name='body'),
}

/**
 * @summary Checks the status of Edge Routine.
 *
 * @param request GetErServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetErServiceResponse
 */
@context("getErServiceWithContext")
async function getErServiceWithOptions(request: GetErServiceRequest, runtime: $RuntimeOptions): GetErServiceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetErService',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks the status of Edge Routine.
 *
 * @param request GetErServiceRequest
 * @return GetErServiceResponse
 */
async function getErService(request: GetErServiceRequest): GetErServiceResponse {
  var runtime = new $RuntimeOptions{};
  return getErServiceWithOptions(request, runtime);
}

model GetHttpRequestHeaderModificationRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListHttpRequestHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) interface.

This parameter is required.', example='3528160969****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model GetHttpRequestHeaderModificationRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='3528160969****'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule-based configuration.', example='global'),
  requestHeaderModification?: [ 
    {
      name?: string(name='Name', description='Request header name.', example='headerName'),
      operation?: string(name='Operation', description='Operation method. Possible values:

- add: Add.
- del: Delete
- modify: Modify.', example='add'),
      type?: string(name='Type'),
      value?: string(name='Value', description='Request header value.', example='headValue'),
    }
  ](name='RequestHeaderModification', description='Modify request headers, supporting add, delete, and modify operations.'),
  requestId?: string(name='RequestId', description='Request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq "video.example.com")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site, defaulting to version 0.', example='0'),
}

model GetHttpRequestHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHttpRequestHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Query HTTP Request Header Rule Details
 *
 * @param request GetHttpRequestHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHttpRequestHeaderModificationRuleResponse
 */
@context("getHttpRequestHeaderModificationRuleWithContext")
async function getHttpRequestHeaderModificationRuleWithOptions(request: GetHttpRequestHeaderModificationRuleRequest, runtime: $RuntimeOptions): GetHttpRequestHeaderModificationRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetHttpRequestHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query HTTP Request Header Rule Details
 *
 * @param request GetHttpRequestHeaderModificationRuleRequest
 * @return GetHttpRequestHeaderModificationRuleResponse
 */
async function getHttpRequestHeaderModificationRule(request: GetHttpRequestHeaderModificationRuleRequest): GetHttpRequestHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getHttpRequestHeaderModificationRuleWithOptions(request, runtime);
}

model GetHttpResponseHeaderModificationRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID, which can be obtained by calling the [ListHttpResponseHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model GetHttpResponseHeaderModificationRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, with the following values:
- global: Global configuration.
- rule: Rule-based configuration.', example='rule'),
  requestId?: string(name='RequestId', description='Request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  responseHeaderModification?: [ 
    {
      name?: string(name='Name', description='Response header name.', example='headerName'),
      operation?: string(name='Operation', description='Operation method. Possible values are:

- add: Add.
- del: Delete
- modify: Modify.', example='add'),
      type?: string(name='Type'),
      value?: string(name='Value', description='Response header value.', example='headerValue'),
    }
  ](name='ResponseHeaderModification', description='Modify response headers, supporting add, delete, and modify operations.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values are:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites that have enabled configuration version management, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='0'),
}

model GetHttpResponseHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHttpResponseHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Query HTTP Response Header Rules
 *
 * @param request GetHttpResponseHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHttpResponseHeaderModificationRuleResponse
 */
@context("getHttpResponseHeaderModificationRuleWithContext")
async function getHttpResponseHeaderModificationRuleWithOptions(request: GetHttpResponseHeaderModificationRuleRequest, runtime: $RuntimeOptions): GetHttpResponseHeaderModificationRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetHttpResponseHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query HTTP Response Header Rules
 *
 * @param request GetHttpResponseHeaderModificationRuleRequest
 * @return GetHttpResponseHeaderModificationRuleResponse
 */
async function getHttpResponseHeaderModificationRule(request: GetHttpResponseHeaderModificationRuleRequest): GetHttpResponseHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getHttpResponseHeaderModificationRuleWithOptions(request, runtime);
}

model GetHttpsApplicationConfigurationRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [listHttpsApplicationConfigurations](https://help.aliyun.com/document_detail/2869087.html) interface.

This parameter is required.', example='352816096987136'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1234567890123'),
}

model GetHttpsApplicationConfigurationResponseBody = {
  altSvc?: string(name='AltSvc', description='Alt-Svc feature switch. Default is disabled. Possible values:

- on: Enable.
- off: Disable.', example='on'),
  altSvcClear?: string(name='AltSvcClear', description='Whether the Alt-Svc header includes the clear parameter. Default is disabled. Possible values:

- on: Enable.
- off: Disable.', example='on'),
  altSvcMa?: string(name='AltSvcMa', description='Alt-Svc validity period in seconds. The default is 86400 seconds.', example='86400'),
  altSvcPersist?: string(name='AltSvcPersist', description='Whether the Alt-Svc header includes the persist parameter. Default is disabled. Possible values:

- on: Enable.
- off: Disable.', example='on'),
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Possible values:

- global: Query global configuration.
- rule: Query rule configuration.', example='global'),
  hsts?: string(name='Hsts', description='Whether to enable HSTS. Default is disabled. Possible values:

- on: Enable.
- off: Disable.', example='on'),
  hstsIncludeSubdomains?: string(name='HstsIncludeSubdomains', description='Whether to include subdomains in HSTS, default is off. Value range:
- on: enabled. 
- off: disabled.', example='on'),
  hstsMaxAge?: string(name='HstsMaxAge', description='HSTS expiration time in seconds.', example='3600'),
  hstsPreload?: string(name='HstsPreload', description='Whether to enable HSTS preload, default is off. Value range:

- on: enabled.
- off: disabled.', example='on'),
  httpsForce?: string(name='HttpsForce', description='Whether to enable forced HTTPS. Default is disabled. Possible values:

- on: Enable.
- off: Disable.', example='on'),
  httpsForceCode?: string(name='HttpsForceCode', description='Status code for forced HTTPS redirection. Possible values:

- 301
- 302
- 307
- 308', example='301'),
  httpsNoSniDeny?: string(name='HttpsNoSniDeny'),
  httpsSniVerify?: string(name='HttpsSniVerify'),
  httpsSniWhitelist?: string(name='HttpsSniWhitelist'),
  requestId?: string(name='RequestId', description='Request ID.', example='A3790430-3A06-535F-A424-0998BD9A6C9F'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true.
- Match specific requests: Set the value to a custom expression, for example: (http.host eq "video.example.com")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the version of the site for which the configuration takes effect. The default is version 0.', example='1'),
}

model GetHttpsApplicationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHttpsApplicationConfigurationResponseBody(name='body'),
}

/**
 * @summary Query a Single HTTPS Application Configuration
 *
 * @param request GetHttpsApplicationConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHttpsApplicationConfigurationResponse
 */
@context("getHttpsApplicationConfigurationWithContext")
async function getHttpsApplicationConfigurationWithOptions(request: GetHttpsApplicationConfigurationRequest, runtime: $RuntimeOptions): GetHttpsApplicationConfigurationResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetHttpsApplicationConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a Single HTTPS Application Configuration
 *
 * @param request GetHttpsApplicationConfigurationRequest
 * @return GetHttpsApplicationConfigurationResponse
 */
async function getHttpsApplicationConfiguration(request: GetHttpsApplicationConfigurationRequest): GetHttpsApplicationConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return getHttpsApplicationConfigurationWithOptions(request, runtime);
}

model GetHttpsBasicConfigurationRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [ListHttpsBasicConfigurations](https://help.aliyun.com/document_detail/2867470.html) interface.

This parameter is required.', example='352816096987136'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
}

model GetHttpsBasicConfigurationResponseBody = {
  ciphersuite?: string(name='Ciphersuite', description='Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.', example='TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256'),
  ciphersuiteGroup?: string(name='CiphersuiteGroup', description='Cipher suite group, default is all cipher suites. Value range:

- all: All cipher suites.
- strict: Strong cipher suites.
- custom: Custom cipher suites.', example='all'),
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration;
- rule: Query rule configuration;', example='global'),
  http2?: string(name='Http2', description='Whether to enable HTTP2, default is enabled. Value range:

- on: Enable.
- off: Disable.', example='on'),
  http3?: string(name='Http3', description='Whether to enable HTTP3, which is enabled by default. The value can be:
- on: Enabled. 
- off: Disabled.', example='on'),
  https?: string(name='Https', description='Whether to enable HTTPS, default is enabled. Value range:

- on: Enable.
- off: Disable.', example='on'),
  ocspStapling?: string(name='OcspStapling', description='Whether to enable OCSP, default is disabled. Value range:

- on: Enable.
- off: Disable.', example='on'),
  requestId?: string(name='RequestId', description='Request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D2***'),
  rule?: string(name='Rule', description='Matching rule content.', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. Value range:

- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution sequence.', example='1'),
  tls10?: string(name='Tls10', description='Whether to enable TLS1.0, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls11?: string(name='Tls11', description='Whether to enable TLS1.1, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls12?: string(name='Tls12', description='Whether to enable TLS1.2, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls13?: string(name='Tls13', description='Whether to enable TLS1.3, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
}

model GetHttpsBasicConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHttpsBasicConfigurationResponseBody(name='body'),
}

/**
 * @summary Query a Single HTTPS Basic Configuration
 *
 * @param request GetHttpsBasicConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHttpsBasicConfigurationResponse
 */
@context("getHttpsBasicConfigurationWithContext")
async function getHttpsBasicConfigurationWithOptions(request: GetHttpsBasicConfigurationRequest, runtime: $RuntimeOptions): GetHttpsBasicConfigurationResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetHttpsBasicConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a Single HTTPS Basic Configuration
 *
 * @param request GetHttpsBasicConfigurationRequest
 * @return GetHttpsBasicConfigurationResponse
 */
async function getHttpsBasicConfiguration(request: GetHttpsBasicConfigurationRequest): GetHttpsBasicConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return getHttpsBasicConfigurationWithOptions(request, runtime);
}

model GetIPv6Request {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model GetIPv6ResponseBody = {
  enable?: string(name='Enable', description='Indicates whether IPv6 is enabled. Valid values:

*   **on**
*   **off**', example='on'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId', description='The request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model GetIPv6Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIPv6ResponseBody(name='body'),
}

/**
 * @summary Queries the IPv6 configuration of a website.
 *
 * @param request GetIPv6Request
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIPv6Response
 */
@context("getIPv6WithContext")
async function getIPv6WithOptions(request: GetIPv6Request, runtime: $RuntimeOptions): GetIPv6Response {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIPv6',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the IPv6 configuration of a website.
 *
 * @param request GetIPv6Request
 * @return GetIPv6Response
 */
async function getIPv6(request: GetIPv6Request): GetIPv6Response {
  var runtime = new $RuntimeOptions{};
  return getIPv6WithOptions(request, runtime);
}

model GetImageTransformRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListImageTransforms](https://help.aliyun.com/document_detail/2869056.html) interface.

This parameter is required.', example='352816096987136'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model GetImageTransformResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration;
- rule: Rule-based configuration;', example='global'),
  enable?: string(name='Enable', description='Whether to enable image transformation. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding global configuration.', example='test'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='2'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, this parameter can specify the effective version of the site, defaulting to version 0.', example='0'),
}

model GetImageTransformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageTransformResponseBody(name='body'),
}

/**
 * @summary Query Single Site Image Transformation Configuration
 *
 * @param request GetImageTransformRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetImageTransformResponse
 */
@context("getImageTransformWithContext")
async function getImageTransformWithOptions(request: GetImageTransformRequest, runtime: $RuntimeOptions): GetImageTransformResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetImageTransform',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Single Site Image Transformation Configuration
 *
 * @param request GetImageTransformRequest
 * @return GetImageTransformResponse
 */
async function getImageTransform(request: GetImageTransformRequest): GetImageTransformResponse {
  var runtime = new $RuntimeOptions{};
  return getImageTransformWithOptions(request, runtime);
}

model GetKvRequest {
  base64?: boolean(name='Base64', description='Specifies whether to decode the value by using Base 64. If you call the [PutKv](https://help.aliyun.com/document_detail/2850482.html) operation and set the Base64 parameter to true, set this parameter to true to read the original content.', example='true'),
  key?: string(name='Key', description='The key name for the query.

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model GetKvResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', description='The value of the key.', example='test_value'),
}

model GetKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvResponseBody(name='body'),
}

/**
 * @summary Queries the value of a key in a key-value pair.
 *
 * @param request GetKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvResponse
 */
@context("getKvWithContext")
async function getKvWithOptions(request: GetKvRequest, runtime: $RuntimeOptions): GetKvResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the value of a key in a key-value pair.
 *
 * @param request GetKvRequest
 * @return GetKvResponse
 */
async function getKv(request: GetKvRequest): GetKvResponse {
  var runtime = new $RuntimeOptions{};
  return getKvWithOptions(request, runtime);
}

model GetKvAccountResponseBody = {
  capacity?: long(name='Capacity', description='The available capacity of all namespaces in the account. Unit: bytes.', example='1073741824'),
  capacityString?: string(name='CapacityString', description='The available capacity of all namespaces in the account.', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', description='The used capacity of all namespaces in the account. Unit: bytes.', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', description='The used capacity of all namespaces in the account.', example='100 MB'),
  namespaceList?: [ 
    {
      capacity?: long(name='Capacity', description='The available capacity of the namespace. Unit: bytes.', example='1073741824'),
      capacityString?: string(name='CapacityString', description='The available capacity of the namespace.', example='1 GB'),
      capacityUsed?: long(name='CapacityUsed', description='The used capacity of the namespace. Unit: bytes.', example='100048576'),
      capacityUsedString?: string(name='CapacityUsedString', description='The used capacity of the namespace.', example='100 MB'),
      description?: string(name='Description', description='The description of the namespace.', example='the first namespace'),
      namespace?: string(name='Namespace', description='The name of the namespace.', example='test_namespace'),
      namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='643355322374688768'),
      status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: normal.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
    }
  ](name='NamespaceList', description='The namespaces in the account.'),
  namespaceQuota?: int32(name='NamespaceQuota', description='The maximum number of namespaces that can be created in the account.', example='10'),
  namespaceUsed?: int32(name='NamespaceUsed', description='The number of created namespaces that store key-value data in the account.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='Indicates whether Edge KV is activated for the Alibaba Cloud account.

*   **online**
*   **offline**', example='online'),
}

model GetKvAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvAccountResponseBody(name='body'),
}

/**
 * @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
 *
 * @param request GetKvAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvAccountResponse
 */
async function getKvAccountWithOptions(runtime: $RuntimeOptions): GetKvAccountResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'GetKvAccount',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
 *
 * @return GetKvAccountResponse
 */
async function getKvAccount(): GetKvAccountResponse {
  var runtime = new $RuntimeOptions{};
  return getKvAccountWithOptions(runtime);
}

model GetKvNamespaceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model GetKvNamespaceResponseBody = {
  capacity?: long(name='Capacity', description='The available capacity of the namespace. Unit: bytes.', example='1073741824'),
  capacityString?: string(name='CapacityString', description='The available capacity of the namespace.', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', description='The used capacity of the namespace. Unit: bytes.', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', description='The used capacity of the namespace.', example='100 MB'),
  description?: string(name='Description', description='The description of the namespace.', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='643355322374688768'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: working as expected.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
}

model GetKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a namespace in your Alibaba Cloud account.
 *
 * @param request GetKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvNamespaceResponse
 */
@context("getKvNamespaceWithContext")
async function getKvNamespaceWithOptions(request: GetKvNamespaceRequest, runtime: $RuntimeOptions): GetKvNamespaceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a namespace in your Alibaba Cloud account.
 *
 * @param request GetKvNamespaceRequest
 * @return GetKvNamespaceResponse
 */
async function getKvNamespace(request: GetKvNamespaceRequest): GetKvNamespaceResponse {
  var runtime = new $RuntimeOptions{};
  return getKvNamespaceWithOptions(request, runtime);
}

model GetListRequest {
  id?: long(name='Id', description='The ID of the custom list, which can be obtained by calling the [ListLists](https://help.aliyun.com/document_detail/2850217.html) operation.', example='40000001'),
}

model GetListResponseBody = {
  description?: string(name='Description', description='The description of the custom list.', example='a custom list'),
  id?: long(name='Id', description='The ID of the custom list.[](~~2850217~~)', example='40000001'),
  items?: [ string ](name='Items', description='The items in the custom list, which are displayed as an array.'),
  kind?: string(name='Kind', description='The type of the custom list.', example='ip'),
  name?: string(name='Name', description='The name of the custom list.

This parameter is required.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', description='The time when the custom list was last modified.', example='2024-01-01T00:00:00Z'),
}

model GetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListResponseBody(name='body'),
}

/**
 * @summary Queries the details of a custom list, such as the name, description, type, and content.
 *
 * @param request GetListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetListResponse
 */
@context("getListWithContext")
async function getListWithOptions(request: GetListRequest, runtime: $RuntimeOptions): GetListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a custom list, such as the name, description, type, and content.
 *
 * @param request GetListRequest
 * @return GetListResponse
 */
async function getList(request: GetListRequest): GetListResponse {
  var runtime = new $RuntimeOptions{};
  return getListWithOptions(request, runtime);
}

model GetLoadBalancerRequest {
  id?: long(name='Id', description='The ID of the load balancer, used to uniquely identify the load balancer to be queried. This ID is returned directly when the load balancer is created, or it can be obtained through the [ListLoadBalancers](https://help.aliyun.com/document_detail/2868897.html) interface for querying all load balancers under a site.

This parameter is required.', example='99867648760****'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1159101787****'),
}

model GetLoadBalancerResponseBody = {
  adaptiveRouting?: {
    failoverAcrossPools?: boolean(name='FailoverAcrossPools', description='Whether to fail over across pools.

- true: Yes.
- false: No.', example='true'),
  }(name='AdaptiveRouting', description='Cross-pool failover configuration.'),
  defaultPools?: [ long ](name='DefaultPools', description='List of default pool IDs.'),
  description?: string(name='Description', description='Description of the load balancer.', example='test'),
  enabled?: boolean(name='Enabled', description='Whether the load balancer is enabled.

- true: Enabled.
- false: Not enabled.', example='true'),
  fallbackPool?: long(name='FallbackPool', description='The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.', example='96228666776****'),
  id?: long(name='Id', description='The unique identifier ID of the load balancer.', example='99867648760****'),
  monitor?: {
    consecutiveDown?: int32(name='ConsecutiveDown', description='The number of consecutive failed probes required to consider the target as unhealthy, for example, `5`.', example='5'),
    consecutiveUp?: int32(name='ConsecutiveUp', description='The number of consecutive successful probes required to consider the target as healthy, for example, `3`.', example='3'),
    expectedCodes?: string(name='ExpectedCodes', description='Expected status codes, such as 200, 202, for successful HTTP responses.', example='200,202'),
    followRedirects?: boolean(name='FollowRedirects', description='Whether to follow redirects.

- true: Yes.
- false: No.', example='true'),
    header?: any(name='Header', description='The HTTP headers to be included in the probe request.', example='{
        "host": [
            "example1.com",
            "example2.com"
        ]
    }'),
    interval?: int32(name='Interval', description='Health check interval, in seconds.', example='60'),
    method?: string(name='Method', description='Health check method.', example='GET'),
    monitoringRegion?: string(name='MonitoringRegion'),
    path?: string(name='Path', description='Path.', example='/'),
    port?: int32(name='Port', description='Target port.', example='80'),
    timeout?: int32(name='Timeout', description='The timeout for the health check, in seconds.', example='5'),
    type?: string(name='Type', description='Monitor protocol type, such as HTTP, used for health checks. When the value is `off`, it indicates that no check is performed.', example='HTTP'),
  }(name='Monitor', description='Monitor configuration.'),
  name?: string(name='Name', description='The name of the load balancer.', example='lb.example.com'),
  randomSteering?: {
    defaultWeight?: int32(name='DefaultWeight', description='The default round-robin weight, used for all pools that do not have individually specified weights. The value range is 0-100.', example='50'),
    poolWeights?: map[string]int32(name='PoolWeights', description='Weight configurations for each backend server pool, where the key is the pool ID and the value is the weight coefficient. The weight coefficient represents the relative traffic distribution ratio.'),
  }(name='RandomSteering', description='Weighted round-robin configuration, used to control the traffic distribution weights among different pools.'),
  regionPools?: any(name='RegionPools', description='Address pools corresponding to primary regions.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  rules?: [ 
    {
      fixedResponse?: {
        contentType?: string(name='ContentType', description='The Content-Type field in the HTTP Header.', example='application/json'),
        location?: string(name='Location', description='The location field in the HTTP response.', example='http://www.example.com/index.html'),
        messageBody?: string(name='MessageBody', description='The body value of the response.', example='Hello World.'),
        statusCode?: int32(name='StatusCode', description='Status code.', example='200'),
      }(name='FixedResponse', description='Executes a specified response after matching the rule.'),
      overrides?: any(name='Overrides', description='Modifies the load balancer configuration for the corresponding request after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer\\\\"s configuration.', example='{
            "adaptive_routing": {
                "failover_across_pools": true
            },
            "sub_region_pools": {
                "GB": [
                    96228666776****
                ],
                "US": [
                    96228666776****
                ]
            },
            "default_pools": [
                96228666776****,
                96228666776****
            ],
            "fallback_pool": 96228666776****,
            "location_strategy": {
                "mode": "resolver_ip",
                "prefer_ecs": "always"
            },
            "random_steering": {
                "default_weight": 30,
                "pool_weights": {
                    "96228666776****": 70,
                    "96228666776****": 80
                }
            },
            "region_pools": {
                "ENAM": [
                    96228666776****,
                    92843536908****
                ],
                "WNAM": [
                    92843536908****
                ]
            },
            "session_affinity": "cookie",
            "session_affinity_attributes": {
                "drain_duration": 100,
                "headers": ["none"],
                "require_all_headers": false,
                "samesite": "Auto",
                "secure": "Auto",
                "zero_downtime_failover": "sticky"
            },
            "session_affinity_ttl": 1800,
            "steering_policy": "dynamic_latency",
            "ttl": 30
        }'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding global configurations. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='http.request.uri.path contains "/testing"'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding global configurations. Possible values:
- on: Enabled.
- off: Disabled.', example='off'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding global configurations.', example='r2'),
      sequence?: int32(name='Sequence', description='Rule execution order. The higher the number, the higher the priority.', example='1'),
      terminates?: boolean(name='Terminates', description='Whether to terminate the execution of subsequent rules.

- true: Yes.
- false: No, default value.', example='true'),
    }
  ](name='Rules', description='A list of rule configurations, used to define behavior under specific conditions.'),
  sessionAffinity?: string(name='SessionAffinity', description='Session persistence, with values:
- off: Not enabled.
- ip: Session persistence by IP.
- cookie: Session persistence by cookie.', example='ip'),
  siteId?: long(name='SiteId', description='The site ID to which the load balancer belongs.', example='11591017874****'),
  status?: string(name='Status', description='The status of the load balancer.', example='healthy'),
  steeringPolicy?: string(name='SteeringPolicy', description='Load balancing policy.', example='order'),
  subRegionPools?: any(name='SubRegionPools', description='Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.', example='{"AL,MO": [92298024898****],"CN-SH,CN-SX,CN-SC":[92304347804****,92843536908****]}'),
  ttl?: int32(name='Ttl', description='TTL value, the time-to-live for DNS records, with a default of 30 seconds.', example='60'),
}

model GetLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoadBalancerResponseBody(name='body'),
}

/**
 * @summary Query a Specific Load Balancer
 *
 * @description This API allows users to query the configuration details of a specific load balancer by providing necessary authentication information and resource identifiers, including but not limited to name, session persistence strategy, routing policy, etc.
 *
 * @param request GetLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLoadBalancerResponse
 */
@context("getLoadBalancerWithContext")
async function getLoadBalancerWithOptions(request: GetLoadBalancerRequest, runtime: $RuntimeOptions): GetLoadBalancerResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetLoadBalancer',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a Specific Load Balancer
 *
 * @description This API allows users to query the configuration details of a specific load balancer by providing necessary authentication information and resource identifiers, including but not limited to name, session persistence strategy, routing policy, etc.
 *
 * @param request GetLoadBalancerRequest
 * @return GetLoadBalancerResponse
 */
async function getLoadBalancer(request: GetLoadBalancerRequest): GetLoadBalancerResponse {
  var runtime = new $RuntimeOptions{};
  return getLoadBalancerWithOptions(request, runtime);
}

model GetManagedTransformRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling [ListSites](https://help.aliyun.com/document_detail/2850189.html).

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, defaulting to version 0.', example='0'),
}

model GetManagedTransformResponseBody = {
  addClientGeolocationHeader?: string(name='AddClientGeolocationHeader', description='Add visitor geolocation header. Value range:
- on: Enable.
- off: Disable.', example='on'),
  addRealClientIpHeader?: string(name='AddRealClientIpHeader', description='Add the "ali-real-client-ip" header containing the real client IP. Value range:
- on: Enable.
- off: Disable.', example='on'),
  realClientIpHeaderName?: string(name='RealClientIpHeaderName'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site. For sites with version management enabled, this parameter can be used to specify the site version for which the configuration takes effect, defaulting to version 0.', example='0'),
}

model GetManagedTransformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetManagedTransformResponseBody(name='body'),
}

/**
 * @summary Query Managed Transform Configuration
 *
 * @param request GetManagedTransformRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetManagedTransformResponse
 */
@context("getManagedTransformWithContext")
async function getManagedTransformWithOptions(request: GetManagedTransformRequest, runtime: $RuntimeOptions): GetManagedTransformResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetManagedTransform',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Managed Transform Configuration
 *
 * @param request GetManagedTransformRequest
 * @return GetManagedTransformResponse
 */
async function getManagedTransform(request: GetManagedTransformRequest): GetManagedTransformResponse {
  var runtime = new $RuntimeOptions{};
  return getManagedTransformWithOptions(request, runtime);
}

model GetNetworkOptimizationRequest {
  configId?: long(name='ConfigId', description='Configuration ConfigId, which can be obtained by calling the [ListNetworkOptimizations](https://help.aliyun.com/document_detail/2869051.html) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='12312312213212'),
}

model GetNetworkOptimizationResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:

- global: Query global configuration.
- rule: Query rule configuration.', example='global'),
  grpc?: string(name='Grpc', description='Whether to enable GRPC, default is disabled. Value range:
- on: Enable
- off: Disable', example='on'),
  http2Origin?: string(name='Http2Origin', description='Whether to enable HTTP2 origin, default is disabled. Value range:

- on: Enable
- off: Disable', example='on'),
  requestId?: string(name='RequestId', description='Request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='2'),
  siteVersion?: int32(name='SiteVersion', description='Site configuration version number. For sites with version management enabled, this parameter can specify the effective site version, defaulting to version 0.', example='1'),
  smartRouting?: string(name='SmartRouting', description='Whether to enable smart routing service, default is disabled. Value range:
- on: Enable
- off: Disable', example='on'),
  uploadMaxFilesize?: string(name='UploadMaxFilesize', description='Maximum upload file size in MB, with a range from 100 to 500.', example='500'),
  websocket?: string(name='Websocket', description='Whether to enable Websocket, default is enabled. Value range:
- on: Enable
- off: Disable', example='on'),
}

model GetNetworkOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkOptimizationResponseBody(name='body'),
}

/**
 * @summary Query a single network optimization configuration
 *
 * @param request GetNetworkOptimizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNetworkOptimizationResponse
 */
@context("getNetworkOptimizationWithContext")
async function getNetworkOptimizationWithOptions(request: GetNetworkOptimizationRequest, runtime: $RuntimeOptions): GetNetworkOptimizationResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNetworkOptimization',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a single network optimization configuration
 *
 * @param request GetNetworkOptimizationRequest
 * @return GetNetworkOptimizationResponse
 */
async function getNetworkOptimization(request: GetNetworkOptimizationRequest): GetNetworkOptimizationResponse {
  var runtime = new $RuntimeOptions{};
  return getNetworkOptimizationWithOptions(request, runtime);
}

model GetOriginCaCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model GetOriginCaCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='3558df77-8a7a-4060-a900-2d7949403836'),
  result?: {
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-03-05 18:24:04'),
    fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
    id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1d**'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
    status?: string(name='Status', description='The status of the certificate.', example='OK'),
    type?: string(name='Type', description='The certificate type.', example='upload'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-03-05 18:24:04'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The status of the certificate.', example='OK'),
}

model GetOriginCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginCaCertificateResponseBody(name='body'),
}

/**
 * @summary 获取源服务器CA证书信息
 *
 * @param request GetOriginCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginCaCertificateResponse
 */
@context("getOriginCaCertificateWithContext")
async function getOriginCaCertificateWithOptions(request: GetOriginCaCertificateRequest, runtime: $RuntimeOptions): GetOriginCaCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOriginCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取源服务器CA证书信息
 *
 * @param request GetOriginCaCertificateRequest
 * @return GetOriginCaCertificateResponse
 */
async function getOriginCaCertificate(request: GetOriginCaCertificateRequest): GetOriginCaCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return getOriginCaCertificateWithOptions(request, runtime);
}

model GetOriginClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model GetOriginClientCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  result?: {
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2020-05-12 02:00:53'),
    fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
    hostnames?: [ string ](name='Hostnames', description='The domain names to associate.'),
    id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='DigiCert'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1d**'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
    status?: string(name='Status', description='The status of the certificate.', example='OK'),
    type?: string(name='Type', description='The certificate type.', example='upload'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-03-05 18:24:04'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The status of the certificate.', example='OK'),
}

model GetOriginClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginClientCertificateResponseBody(name='body'),
}

/**
 * @summary 获取域名回源客户端证书信息
 *
 * @param request GetOriginClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginClientCertificateResponse
 */
@context("getOriginClientCertificateWithContext")
async function getOriginClientCertificateWithOptions(request: GetOriginClientCertificateRequest, runtime: $RuntimeOptions): GetOriginClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOriginClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取域名回源客户端证书信息
 *
 * @param request GetOriginClientCertificateRequest
 * @return GetOriginClientCertificateResponse
 */
async function getOriginClientCertificate(request: GetOriginClientCertificateRequest): GetOriginClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return getOriginClientCertificateWithOptions(request, runtime);
}

model GetOriginClientCertificateHostnamesRequest {
  id?: string(name='Id', description='The ID of the certificate.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model GetOriginClientCertificateHostnamesResponseBody = {
  hostnames?: [ string ](name='Hostnames', description='The domain names to associate.'),
  id?: string(name='Id', description='The ID of the client certificate.', example='babaabcd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model GetOriginClientCertificateHostnamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginClientCertificateHostnamesResponseBody(name='body'),
}

/**
 * @summary 获取域名回源客户端证书绑定的域名列表
 *
 * @param request GetOriginClientCertificateHostnamesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginClientCertificateHostnamesResponse
 */
@context("getOriginClientCertificateHostnamesWithContext")
async function getOriginClientCertificateHostnamesWithOptions(request: GetOriginClientCertificateHostnamesRequest, runtime: $RuntimeOptions): GetOriginClientCertificateHostnamesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOriginClientCertificateHostnames',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取域名回源客户端证书绑定的域名列表
 *
 * @param request GetOriginClientCertificateHostnamesRequest
 * @return GetOriginClientCertificateHostnamesResponse
 */
async function getOriginClientCertificateHostnames(request: GetOriginClientCertificateHostnamesRequest): GetOriginClientCertificateHostnamesResponse {
  var runtime = new $RuntimeOptions{};
  return getOriginClientCertificateHostnamesWithOptions(request, runtime);
}

model GetOriginPoolRequest {
  id?: long(name='Id', description='The ID of the origin pool, which can be obtained by calling the [ListOriginPools](https://help.aliyun.com/document_detail/2863947.html) interface.

This parameter is required.', example='1038520525196928'),
  siteId?: long(name='SiteId', description='The ID of the site, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='216558609793952'),
}

model GetOriginPoolResponseBody = {
  enabled?: boolean(name='Enabled', description='Whether the origin pool is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
  id?: long(name='Id', description='Origin pool ID.', example='103852052519****'),
  name?: string(name='Name', description='Name of the origin pool. The name is unique under a single site.', example='pool1'),
  origins?: [ 
    {
      address?: string(name='Address', description='The address of the origin, e.g., www.example.com.', example='www.example.com'),
      authConf?: {
        accessKey?: string(name='AccessKey', description='The AccessKey required when AuthType is set to private_cross_account or private.', example='yourAccessKeyID'),
        authType?: string(name='AuthType', description='The type of authentication:

- public: Public read/write, used when the origin is OSS or S3 and is publicly readable/writable;
- private_same_account: Private same account, used when the origin is OSS and the authentication type is private within the same account;
- private_cross_account: Private cross account, used when the origin is OSS and the authentication type is private across accounts;
- private: Used when the origin is S3 and the authentication type is private.', example='public'),
        region?: string(name='Region', description='The source Region to be passed when the origin is AWS S3.', example='us-east-1'),
        secretKey?: string(name='SecretKey', description='The SecretKey required when AuthType is set to private_cross_account or private.', example='yourAccessKeySecret'),
        version?: string(name='Version', description='The signature version required when the origin is an AWS S3.', example='v4'),
      }(name='AuthConf', description='Authentication information. When the origin is an OSS or S3, and authentication is required, you need to provide the relevant configuration information.'),
      enabled?: boolean(name='Enabled', description='Whether the origin is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
      header?: any(name='Header', description='The request header to be included when fetching from the origin, only supports Host.', example='{
        "Host": [
          "example.com"
        ]
      }'),
      id?: long(name='Id', description='The ID of the origin.', example='99750209487****'),
      name?: string(name='Name', description='The name of the origin.', example='origin1'),
      type?: string(name='Type', description='The type of the origin:

- ip_domain: IP or domain type origin;
- OSS: OSS address origin;
- S3: AWS S3 origin.', example='ip_domain'),
      weight?: int32(name='Weight', description='The weight, an integer between 0 and 100.', example='50'),
    }
  ](name='Origins', description='Information about the origins added to the origin pool.'),
  recordName?: string(name='RecordName', description='The domain name assigned to the origin pool, which can be used as the origin address for records under the site.', example='pool1.example.com'),
  referenceLBCount?: int32(name='ReferenceLBCount', description='The number of load balancers that reference this origin pool.', example='5'),
  references?: {
    dnsRecords?: [ 
      {
        id?: long(name='Id', description='Record ID.', example='104285288635****'),
        name?: string(name='Name', description='Record name.', example='www.example.com'),
      }
    ](name='DnsRecords', description='List of layer 7 records using this origin pool as the origin.'),
    IPARecords?: [ 
      {
        id?: long(name='Id', description='记录ID。', example='104285288635****'),
        name?: string(name='Name', description='Record name.', example='ipa.example.com'),
      }
    ](name='IPARecords', description='List of layer 4 records using this origin pool as the origin.'),
    loadBalancers?: [ 
      {
        id?: long(name='Id', description='ID of the load balancer.', example='99874066052****'),
        name?: string(name='Name', description='Name of the load balancer.', example='lb1.example.com'),
      }
    ](name='LoadBalancers', description='List of load balancers using this origin pool.'),
  }(name='References', description='Reference information for the origin pool. The origin pool is considered referenced when it is configured in a load balancer or set as the origin for a record.'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  siteId?: long(name='SiteId', description='ID of the site to which the origin pool belongs.', example='21655860979****'),
}

model GetOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginPoolResponseBody(name='body'),
}

/**
 * @summary Query a specific origin pool
 *
 * @param request GetOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginPoolResponse
 */
@context("getOriginPoolWithContext")
async function getOriginPoolWithOptions(request: GetOriginPoolRequest, runtime: $RuntimeOptions): GetOriginPoolResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a specific origin pool
 *
 * @param request GetOriginPoolRequest
 * @return GetOriginPoolResponse
 */
async function getOriginPool(request: GetOriginPoolRequest): GetOriginPoolResponse {
  var runtime = new $RuntimeOptions{};
  return getOriginPoolWithOptions(request, runtime);
}

model GetOriginProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
}

model GetOriginProtectionResponseBody = {
  currentIPWhitelist?: {
    IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection used by the website, specified as IPv4 addresses or CIDR blocks.'),
    IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection used by the website, specified as IPv6 addresses or CIDR blocks.'),
  }(name='CurrentIPWhitelist', description='The IP whitelist for origin protection used by the website.'),
  diffIPWhitelist?: {
    addedIPWhitelist?: {
      IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
      IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
    }(name='AddedIPWhitelist', description='The new IP whitelist for origin protection.'),
    noChangeIpWhitelist?: {
      IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
      IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
    }(name='NoChangeIpWhitelist', description='The IP whitelist for origin protection that remains unchanged.'),
    removedIPWhitelist?: {
      IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
      IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
    }(name='RemovedIPWhitelist', description='The IP whitelist for origin protection that has been deleted.'),
  }(name='DiffIPWhitelist', description='The IP whitelist for origin protection that has been updated.'),
  latestIPWhitelist?: {
    IPv4?: [ string ](name='IPv4', description='The latest IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
    IPv6?: [ string ](name='IPv6', description='The latest IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
  }(name='LatestIPWhitelist', description='The latest IP whitelist for origin protection.'),
  needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the IP whitelist for origin protection needs to be updated. If the currently used IP whitelist is different from the latest IP whitelist, it needs to be updated, and the value is true.

*   true: The update is required.
*   false: No update is required.', example='true'),
  originConverge?: string(name='OriginConverge', description='Indicates whether IP convergence is enabled.

*   on
*   off', example='on'),
  originProtection?: string(name='OriginProtection', description='Indicates whether origin protection is enabled.

*   on
*   off', example='on'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model GetOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
 *
 * @param request GetOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginProtectionResponse
 */
@context("getOriginProtectionWithContext")
async function getOriginProtectionWithOptions(request: GetOriginProtectionRequest, runtime: $RuntimeOptions): GetOriginProtectionResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
 *
 * @param request GetOriginProtectionRequest
 * @return GetOriginProtectionResponse
 */
async function getOriginProtection(request: GetOriginProtectionRequest): GetOriginProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return getOriginProtectionWithOptions(request, runtime);
}

model GetOriginRuleRequest {
  configId?: long(name='ConfigId', description='ConfigId of the configuration, which can be obtained by calling the [ListOriginRules](https://help.aliyun.com/document_detail/2866989.html) interface.

This parameter is required.', example='33793140540****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='3400350********'),
}

model GetOriginRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='352816096987136'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:

- global: Query global configuration.
- rule: Query rule configuration.', example='rule'),
  dnsRecord?: string(name='DnsRecord', description='Rewrite the DNS resolution record for the origin request.', example='test.example.com'),
  follow302Enable?: string(name='Follow302Enable'),
  follow302MaxTries?: string(name='Follow302MaxTries'),
  follow302RetainArgs?: string(name='Follow302RetainArgs'),
  follow302RetainHeader?: string(name='Follow302RetainHeader'),
  follow302TargetHost?: string(name='Follow302TargetHost'),
  originHost?: string(name='OriginHost', description='HOST carried in the origin request.', example='origin.example.com'),
  originHttpPort?: string(name='OriginHttpPort', description='Port of the origin server accessed when using the HTTP protocol for origin.', example='8080'),
  originHttpsPort?: string(name='OriginHttpsPort', description='Port of the origin server accessed when using the HTTPS protocol for origin.', example='4433'),
  originMtls?: string(name='OriginMtls', description='mTLS switch. Value range:
- on: Enable.
- off: Disable.', example='on'),
  originReadTimeout?: string(name='OriginReadTimeout'),
  originScheme?: string(name='OriginScheme', description='Protocol used for the origin request. Value range:

- http: Use HTTP protocol for origin.
- https: Use HTTPS protocol for origin.
- follow: Follow the client\\\\"s protocol for origin.', example='http'),
  originSni?: string(name='OriginSni', description='SNI carried in the origin request.', example='origin.example.com'),
  originVerify?: string(name='OriginVerify', description='Origin certificate verification switch. Value range: 
- on: Enable. 
- off: Disable.', example='on'),
  range?: string(name='Range', description='Use the range chunk method for origin file download. Value range:

- on: Enable.
- off: Disable.
- force: Force.', example='on'),
  rangeChunkSize?: string(name='RangeChunkSize'),
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='1'),
}

model GetOriginRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginRuleResponseBody(name='body'),
}

/**
 * @summary Query a Single Origin Rule Configuration
 *
 * @param request GetOriginRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginRuleResponse
 */
@context("getOriginRuleWithContext")
async function getOriginRuleWithOptions(request: GetOriginRuleRequest, runtime: $RuntimeOptions): GetOriginRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOriginRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query a Single Origin Rule Configuration
 *
 * @param request GetOriginRuleRequest
 * @return GetOriginRuleResponse
 */
async function getOriginRule(request: GetOriginRuleRequest): GetOriginRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getOriginRuleWithOptions(request, runtime);
}

model GetPageRequest {
  id?: long(name='Id', description='The ID of the custom error page, which can be obtained by calling the [ListPages](https://help.aliyun.com/document_detail/2850223.html) operation.', example='50000001'),
}

model GetPageResponseBody = {
  content?: string(name='Content', description='The Base64-encoded content of the error page. The content type is specified by the Content-Type field.

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header.

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='The description of the custom error page.', example='a custom deny page'),
  id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
  kind?: string(name='Kind', description='The type of the custom response page.', example='custom'),
  name?: string(name='Name', description='The name of the custom response page.

This parameter is required.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', description='The time when the custom error page was last modified.', example='2024-01-01T00:00:00Z'),
}

model GetPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPageResponseBody(name='body'),
}

/**
 * @summary Queries the details of a custom error page based on the error page ID.
 *
 * @param request GetPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPageResponse
 */
@context("getPageWithContext")
async function getPageWithOptions(request: GetPageRequest, runtime: $RuntimeOptions): GetPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a custom error page based on the error page ID.
 *
 * @param request GetPageRequest
 * @return GetPageResponse
 */
async function getPage(request: GetPageRequest): GetPageResponse {
  var runtime = new $RuntimeOptions{};
  return getPageWithOptions(request, runtime);
}

model GetPurgeQuotaRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge task. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specific parameters ignored.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.', example='file'),
}

model GetPurgeQuotaResponseBody = {
  quota?: string(name='Quota', description='The total quota.', example='100000'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  usage?: string(name='Usage', description='The quota usage.', example='10'),
}

model GetPurgeQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPurgeQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the quotas and quota usage for different cache purge options.
 *
 * @param request GetPurgeQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPurgeQuotaResponse
 */
@context("getPurgeQuotaWithContext")
async function getPurgeQuotaWithOptions(request: GetPurgeQuotaRequest, runtime: $RuntimeOptions): GetPurgeQuotaResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPurgeQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the quotas and quota usage for different cache purge options.
 *
 * @param request GetPurgeQuotaRequest
 * @return GetPurgeQuotaResponse
 */
async function getPurgeQuota(request: GetPurgeQuotaRequest): GetPurgeQuotaResponse {
  var runtime = new $RuntimeOptions{};
  return getPurgeQuotaWithOptions(request, runtime);
}

model GetRealtimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_er'),
}

model GetRealtimeDeliveryFieldResponseBody = {
  fieldContent?: map[string]FieldContentValue(name='FieldContent', description='The fields returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetRealtimeDeliveryFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealtimeDeliveryFieldResponseBody(name='body'),
}

/**
 * @summary Queries the fields in real-time logs based on the log category.
 *
 * @param request GetRealtimeDeliveryFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRealtimeDeliveryFieldResponse
 */
@context("getRealtimeDeliveryFieldWithContext")
async function getRealtimeDeliveryFieldWithOptions(request: GetRealtimeDeliveryFieldRequest, runtime: $RuntimeOptions): GetRealtimeDeliveryFieldResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRealtimeDeliveryField',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the fields in real-time logs based on the log category.
 *
 * @param request GetRealtimeDeliveryFieldRequest
 * @return GetRealtimeDeliveryFieldResponse
 */
async function getRealtimeDeliveryField(request: GetRealtimeDeliveryFieldRequest): GetRealtimeDeliveryFieldResponse {
  var runtime = new $RuntimeOptions{};
  return getRealtimeDeliveryFieldWithOptions(request, runtime);
}

model GetRecordRequest {
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
}

model GetRecordResponseBody = {
  recordModel?: {
    authConf?: {
      accessKey?: string(name='AccessKey', description='The access key ID of the account to which the origin server belongs. This parameter is returned if the origin type is OSS and AuthType is set to private_cross_account, or the origin type is S3 and AuthType is set to private.', example='VIxuvJSA2S03f******kp208dy5w7'),
      authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The origin type refers to the SourceType parameter in this operation. This parameter is returned if the origin type is OSS or S3Valid values:

*   **public**: public read. This value is returned when the origin is a public OSS or S3 bucket.
*   **private**: private read. This value is returned when the origin is a private S3 bucket.
*   **private_same_account**: private read in the same account. This value is returned when the origin is a private OSS bucket in your account.
*   **private_cross_account**: private read across accounts. This value is returned when the origin is a private OSS bucket in a different Alibaba Cloud account.', example='public'),
      region?: string(name='Region', description='The region of the origin. If the origin type is S3, you must specify this value. You can obtain the region information from the official website of S3.', example='us-east-1'),
      secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This parameter is returned if the origin type is OSS and AuthType is set to private_cross_account, or the origin type is S3 and AuthType is set to private.SecretKey', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
      version?: string(name='Version', description='The version of the signature algorithm. This parameter is returned when the origin type is S3 and AuthType is private. The following two types are supported:

*   **v2**
*   **v4**

If this parameter is left empty, the default value v4 is used.', example='v2'),
    }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
    bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave this parameter empty if your record is not proxied. Valid values:

*   **image_video**
*   **api**
*   **web**', example='image_video'),
    comment?: string(name='Comment', description='The comments of the record.', example='This is a comment.'),
    createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-10T13:30:39Z'),
    data?: {
      algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.', example='1'),
      certificate?: string(name='Certificate', description='The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.', example='dGVzdGFkYWxrcw=='),
      fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. This parameter is required when you add a SSHFP record.', example='abcdef1234567890'),
      flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.', example='128'),
      keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. This parameter is required when you add a CAA record.', example='1'),
      matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
      port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. This parameter is required when you add an SRV record.', example='8707'),
      priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='10'),
      selector?: int32(name='Selector', description='The type of the certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
      tag?: string(name='Tag', description='The tag of the record. The Tag of a CAA record indicate its specific type and usage.', example='issue'),
      tags?: map[string]any(name='Tags'),
      type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.', example='RSA'),
      usage?: int32(name='Usage', description='The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
      value?: string(name='Value', description='The record value or part of the record content. This parameter is returned when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on types of records.

*   **A/AAAA**: the IP address. Multiple IP addresses are separated with commas (,). There is at least one IPv4 address.
*   **CNAME**: the target domain name.
*   **NS**: the nameserver for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
      weight?: int32(name='Weight', description='The weight of the record, specified within the range of 0 to 65535. This parameter is required when you add SRV or URI records.', example='0'),
    }(name='Data', description='The DNS record information. The content returned by this parameter varies based on the record type.', example='{"value":"1.1.1.1"}'),
    hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. Valid values:

*   follow_hostname: matches the requested domain name.
*   follow_origin_domain: matches the origin\\\\"s domain name.', example='follow_origin_domain'),
    proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
    recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='a.example.com.cnamezone.com'),
    recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
    recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
    recordSourceType?: string(name='RecordSourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is returned by default.', example='OSS'),
    recordType?: string(name='RecordType', description='The type of the DNS record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
    siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
    siteName?: string(name='SiteName', description='The website name.', example='example.com'),
    ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='20'),
    updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-01-27T02:26:22Z'),
  }(name='RecordModel', description='The information about the queried record.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
}

model GetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
 *
 * @param request GetRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRecordResponse
 */
@context("getRecordWithContext")
async function getRecordWithOptions(request: GetRecordRequest, runtime: $RuntimeOptions): GetRecordResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
 *
 * @param request GetRecordRequest
 * @return GetRecordResponse
 */
async function getRecord(request: GetRecordRequest): GetRecordResponse {
  var runtime = new $RuntimeOptions{};
  return getRecordWithOptions(request, runtime);
}

model GetRedirectRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListRedirectRules](~~ListRedirectRules~~) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='34003500310****'),
}

model GetRedirectRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule-based configuration.', example='rule'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  reserveQueryString?: string(name='ReserveQueryString', description='Preserve query string. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, this parameter can specify the effective version of the site, defaulting to version 0.', example='0'),
  statusCode?: string(name='StatusCode', description='Response status code used by the node to respond to the client with the redirect address. Possible values:
- 301
- 302
- 303
- 307
- 308', example='301'),
  targetUrl?: string(name='TargetUrl', description='Target URL after redirection.', example='http://www.exapmle.com/index.html'),
  type?: string(name='Type', description='Redirect type. Possible values:
- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
}

model GetRedirectRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRedirectRuleResponseBody(name='body'),
}

/**
 * @summary Query Redirect Rule Details
 *
 * @param request GetRedirectRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRedirectRuleResponse
 */
@context("getRedirectRuleWithContext")
async function getRedirectRuleWithOptions(request: GetRedirectRuleRequest, runtime: $RuntimeOptions): GetRedirectRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRedirectRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Redirect Rule Details
 *
 * @param request GetRedirectRuleRequest
 * @return GetRedirectRuleResponse
 */
async function getRedirectRule(request: GetRedirectRuleRequest): GetRedirectRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getRedirectRuleWithOptions(request, runtime);
}

model GetRewriteUrlRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID, which can be obtained by calling the [ListRewriteUrlRules](https://help.aliyun.com/document_detail/2867480.html) interface.

This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
}

model GetRewriteUrlRuleResponseBody = {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration;
- rule: Rule-based configuration;', example='global'),
  queryString?: string(name='QueryString', description='The rewritten query string.', example='example=123'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  rewriteQueryStringType?: string(name='RewriteQueryStringType', description='Query string rewrite type. Possible values:

- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
  rewriteUriType?: string(name='RewriteUriType', description='URI rewrite type. Possible values:

- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority for execution.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site, defaulting to version 0.', example='0'),
  uri?: string(name='Uri', description='The target URI after rewriting.', example='/image/example.jpg'),
}

model GetRewriteUrlRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRewriteUrlRuleResponseBody(name='body'),
}

/**
 * @summary Query details of the rewrite URL rule
 *
 * @param request GetRewriteUrlRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRewriteUrlRuleResponse
 */
@context("getRewriteUrlRuleWithContext")
async function getRewriteUrlRuleWithOptions(request: GetRewriteUrlRuleRequest, runtime: $RuntimeOptions): GetRewriteUrlRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRewriteUrlRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query details of the rewrite URL rule
 *
 * @param request GetRewriteUrlRuleRequest
 * @return GetRewriteUrlRuleResponse
 */
async function getRewriteUrlRule(request: GetRewriteUrlRuleRequest): GetRewriteUrlRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getRewriteUrlRuleWithOptions(request, runtime);
}

model GetRoutineRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='GetRoutine'),
}

model GetRoutineResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the routine was created.', example='2024-03-11T01:23:21Z'),
  defaultRelatedRecord?: string(name='DefaultRelatedRecord', description='The default record name to access.', example='routine1.example.com'),
  description?: string(name='Description', description='The description of the routine.', example='ZWRpdCByb3V0aW5lIGNvbmZpZyBkZXNjcmlwdGlvbg'),
  envs?: [ 
    {
      canaryAreaList?: [ string ](name='CanaryAreaList', description='The regions for canary release.'),
      canaryCodeVersion?: string(name='CanaryCodeVersion', description='The version number for canary release.', example='1710120201067577628'),
      codeVersion?: string(name='CodeVersion', description='The version number of the code in the environment.', example='1710120201067577628'),
      env?: string(name='Env', description='The environment type.', example='production'),
    }
  ](name='Envs', description='The information about the environments.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
 *
 * @param request GetRoutineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineResponse
 */
@context("getRoutineWithContext")
async function getRoutineWithOptions(request: GetRoutineRequest, runtime: $RuntimeOptions): GetRoutineResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRoutine',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
 *
 * @param request GetRoutineRequest
 * @return GetRoutineResponse
 */
async function getRoutine(request: GetRoutineRequest): GetRoutineResponse {
  var runtime = new $RuntimeOptions{};
  return getRoutineWithOptions(request, runtime);
}

model GetRoutineRouteRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='35281609698****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model GetRoutineRouteResponseBody = {
  bypass?: string(name='Bypass', example='on'),
  configId?: long(name='ConfigId', example='352816******'),
  configType?: string(name='ConfigType', example='global'),
  fallback?: string(name='Fallback'),
  mode?: string(name='Mode', example='simple'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  routeEnable?: string(name='RouteEnable', example='on'),
  routeName?: string(name='RouteName', example='test_route'),
  routineName?: string(name='RoutineName', example='test-routine1'),
  rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
  sequence?: int32(name='Sequence', example='1'),
  siteVersion?: int32(name='SiteVersion', example='0'),
}

model GetRoutineRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineRouteResponseBody(name='body'),
}

/**
 * @summary 查询单条边缘函数路由配置
 *
 * @param request GetRoutineRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineRouteResponse
 */
@context("getRoutineRouteWithContext")
async function getRoutineRouteWithOptions(request: GetRoutineRouteRequest, runtime: $RuntimeOptions): GetRoutineRouteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRoutineRoute',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单条边缘函数路由配置
 *
 * @param request GetRoutineRouteRequest
 * @return GetRoutineRouteResponse
 */
async function getRoutineRoute(request: GetRoutineRouteRequest): GetRoutineRouteResponse {
  var runtime = new $RuntimeOptions{};
  return getRoutineRouteWithOptions(request, runtime);
}

model GetRoutineStagingCodeUploadInfoRequest {
  codeDescription?: string(name='CodeDescription', description='The code description.', example='the description of code'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='GetRoutineStagingCodeUploadInfo'),
}

model GetRoutineStagingCodeUploadInfoResponseBody = {
  codeVersion?: string(name='CodeVersion', description='The code version.', example='1710120201067203242'),
  ossPostConfig?: map[string]any(name='OssPostConfig', description='The configuration information that can be used to upload to OSS.', example='{
            "Url": "http://oss_fake_bucket_url",
            "OSSAccessKeyId": "xxx",
            "key": "site_er_js/hello.1418586423220543.unstable.js",
            "callback": "xxx==",
            "x:codeDescription": "xxx=",
            "policy": "xxx",
            "Signature": "xxx="
}'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetRoutineStagingCodeUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineStagingCodeUploadInfoResponseBody(name='body'),
}

/**
 * @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
 *
 * @description *   Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
 * *   A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
 *
 * @param request GetRoutineStagingCodeUploadInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineStagingCodeUploadInfoResponse
 */
@context("getRoutineStagingCodeUploadInfoWithContext")
async function getRoutineStagingCodeUploadInfoWithOptions(request: GetRoutineStagingCodeUploadInfoRequest, runtime: $RuntimeOptions): GetRoutineStagingCodeUploadInfoResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRoutineStagingCodeUploadInfo',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
 *
 * @description *   Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
 * *   A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
 *
 * @param request GetRoutineStagingCodeUploadInfoRequest
 * @return GetRoutineStagingCodeUploadInfoResponse
 */
async function getRoutineStagingCodeUploadInfo(request: GetRoutineStagingCodeUploadInfoRequest): GetRoutineStagingCodeUploadInfoResponse {
  var runtime = new $RuntimeOptions{};
  return getRoutineStagingCodeUploadInfoWithOptions(request, runtime);
}

model GetRoutineStagingEnvIpResponseBody = {
  IPV4?: [ string ](name='IPV4', description='The IPv4 addresses.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetRoutineStagingEnvIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineStagingEnvIpResponseBody(name='body'),
}

/**
 * @summary Queries the IP addresses of staging environments for Edge Routine.
 *
 * @param request GetRoutineStagingEnvIpRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineStagingEnvIpResponse
 */
async function getRoutineStagingEnvIpWithOptions(runtime: $RuntimeOptions): GetRoutineStagingEnvIpResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'GetRoutineStagingEnvIp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the IP addresses of staging environments for Edge Routine.
 *
 * @return GetRoutineStagingEnvIpResponse
 */
async function getRoutineStagingEnvIp(): GetRoutineStagingEnvIpResponse {
  var runtime = new $RuntimeOptions{};
  return getRoutineStagingEnvIpWithOptions(runtime);
}

model GetRoutineUserInfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  routines?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the routine was created.', example='2024-03-11T01:23:02.883361712Z'),
      description?: string(name='Description', description='The routine description, which is Base64-encoded.', example='ZWRpdCByb3V0aW5lIGNvbmZpZyBkZXNjcmlwdGlvbg'),
      routineName?: string(name='RoutineName', description='The routine name.', example='test-routine1'),
    }
  ](name='Routines', description='The routines.'),
  subdomains?: [ string ](name='Subdomains', description='The subdomains.'),
}

model GetRoutineUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineUserInfoResponseBody(name='body'),
}

/**
 * @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
 *
 * @param request GetRoutineUserInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineUserInfoResponse
 */
async function getRoutineUserInfoWithOptions(runtime: $RuntimeOptions): GetRoutineUserInfoResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'GetRoutineUserInfo',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
 *
 * @return GetRoutineUserInfoResponse
 */
async function getRoutineUserInfo(): GetRoutineUserInfoResponse {
  var runtime = new $RuntimeOptions{};
  return getRoutineUserInfoWithOptions(runtime);
}

model GetScheduledPreloadJobRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.

This parameter is required.', example='GetScheduledPreloadJob'),
}

model GetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  createdAt?: string(name='CreatedAt', description='The time when the task was created.', example='2024-06-02T02:23:26Z'),
  domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
  errorInfo?: string(name='ErrorInfo', description='The error message that is returned.', example='invalid domain:test.com'),
  failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
  id?: string(name='Id', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
  name?: string(name='Name', description='The task name.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
  taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
  taskType?: string(name='TaskType', description='The task type. Valid values: refresh and preload.', example='preload'),
  urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
  urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
}

model GetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Queries a specified scheduled prefetch task based on the task ID.
 *
 * @param request GetScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetScheduledPreloadJobResponse
 */
@context("getScheduledPreloadJobWithContext")
async function getScheduledPreloadJobWithOptions(request: GetScheduledPreloadJobRequest, runtime: $RuntimeOptions): GetScheduledPreloadJobResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a specified scheduled prefetch task based on the task ID.
 *
 * @param request GetScheduledPreloadJobRequest
 * @return GetScheduledPreloadJobResponse
 */
async function getScheduledPreloadJob(request: GetScheduledPreloadJobRequest): GetScheduledPreloadJobResponse {
  var runtime = new $RuntimeOptions{};
  return getScheduledPreloadJobWithOptions(request, runtime);
}

model GetSeoBypassRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model GetSeoBypassResponseBody = {
  enable?: string(name='Enable', description='The status of the feature. Valid values:

*   **on**
*   **off**', example='on'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetSeoBypassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSeoBypassResponseBody(name='body'),
}

/**
 * @summary Queries the configuration for search engine crawler of a website.
 *
 * @param request GetSeoBypassRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSeoBypassResponse
 */
@context("getSeoBypassWithContext")
async function getSeoBypassWithOptions(request: GetSeoBypassRequest, runtime: $RuntimeOptions): GetSeoBypassResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSeoBypass',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration for search engine crawler of a website.
 *
 * @param request GetSeoBypassRequest
 * @return GetSeoBypassResponse
 */
async function getSeoBypass(request: GetSeoBypassRequest): GetSeoBypassResponse {
  var runtime = new $RuntimeOptions{};
  return getSeoBypassWithOptions(request, runtime);
}

model GetSiteRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model GetSiteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  siteModel?: {
    accessType?: string(name='AccessType', description='The DNS setup option for the website. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
    cnameZone?: string(name='CnameZone', description='The CNAME of the website domain. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='example.cname.com'),
    coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland.
*   **global**: global.
*   **overseas**: outside the Chinese mainland.', example='domestic'),
    createTime?: string(name='CreateTime', description='The time when the WEBsite was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format and is displayed in UTC.', example='2023-12-24T02:01:11Z'),
    instanceId?: string(name='InstanceId', description='The plan ID.', example='cas-merge-q6h0bv'),
    nameServerList?: string(name='NameServerList', description='The nameservers assigned to the website domain. They are separated by commas (,).', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
    offlineReason?: string(name='OfflineReason'),
    planName?: string(name='PlanName', description='The plan name.', example='plan-168777532****'),
    planSpecName?: string(name='PlanSpecName', description='The specification of the plan associated with the website.', example='normal'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.', example='rg-aek26g6i6se****'),
    siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
    siteName?: string(name='SiteName', description='The website name.', example='example.com'),
    status?: string(name='Status', description='The website status. Valid values:

*   **pending**: The website is to be configured.
*   **active**: The website is active.
*   **offline**: The website is suspended.
*   **moved**: The website has been added and verified by another Alibaba Cloud account.', example='pending'),
    tags?: map[string]any(name='Tags', description='The tags of the website.', example='{"tag1":"value1"}'),
    updateTime?: string(name='UpdateTime', description='The time when the WEBsite was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format and is displayed in UTC.', example='2023-12-24T02:01:11Z'),
    vanityNSList?: map[string]string(name='VanityNSList', description='The information about custom nameservers of the website domain. The key is a custom nameserver name, and the value is the IP address of the custom nameserver. Multiple IP addresses are separated by commas (,).'),
    verifyCode?: string(name='VerifyCode', description='The code that is used to verify the website domain ownership. As part of the verification TXT record, this parameter is returned for websites that use CNAME setup.', example='verify_d516cb3740f81f0cef77d162edd1****'),
    versionManagement?: boolean(name='VersionManagement', description='The status of version management. If true is returned, version management is enabled for the website.', example='true'),
  }(name='SiteModel', description='The queried website information.'),
}

model GetSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteResponseBody(name='body'),
}

/**
 * @summary Queries information about a website based on the website ID.
 *
 * @param request GetSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteResponse
 */
@context("getSiteWithContext")
async function getSiteWithOptions(request: GetSiteRequest, runtime: $RuntimeOptions): GetSiteResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about a website based on the website ID.
 *
 * @param request GetSiteRequest
 * @return GetSiteResponse
 */
async function getSite(request: GetSiteRequest): GetSiteResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteWithOptions(request, runtime);
}

model GetSiteCurrentNSRequest {
  siteId?: long(name='SiteId', description='The website ID. It can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model GetSiteCurrentNSResponseBody = {
  NSList?: [ string ](name='NSList', description='The nameservers of the website.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model GetSiteCurrentNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCurrentNSResponseBody(name='body'),
}

/**
 * @summary Queries the nameservers configured for a website.
 *
 * @param request GetSiteCurrentNSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteCurrentNSResponse
 */
@context("getSiteCurrentNSWithContext")
async function getSiteCurrentNSWithOptions(request: GetSiteCurrentNSRequest, runtime: $RuntimeOptions): GetSiteCurrentNSResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteCurrentNS',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the nameservers configured for a website.
 *
 * @param request GetSiteCurrentNSRequest
 * @return GetSiteCurrentNSResponse
 */
async function getSiteCurrentNS(request: GetSiteCurrentNSRequest): GetSiteCurrentNSResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteCurrentNSWithOptions(request, runtime);
}

model GetSiteCustomLogRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='11223***'),
}

model GetSiteCustomLogResponseBody = {
  configId?: long(name='ConfigId', description='The ID of the custom log field configuration.', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  isExist?: boolean(name='IsExist', description='Indicates whether the custom configuration exists.', example='true'),
  logCustomField?: {
    cookies?: [ string ](name='Cookies', description='The cookie fields.'),
    requestHeaders?: [ string ](name='RequestHeaders', description='The request header fields.'),
    responseHeaders?: [ string ](name='ResponseHeaders', description='The response header fields.'),
  }(name='LogCustomField', description='The custom fields.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  siteId?: long(name='SiteId', description='The website ID.', example='167026711***'),
}

model GetSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of custom log fields for a website.
 *
 * @description *   **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
 * *   **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
 * *   ****
 *
 * @param request GetSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteCustomLogResponse
 */
@context("getSiteCustomLogWithContext")
async function getSiteCustomLogWithOptions(request: GetSiteCustomLogRequest, runtime: $RuntimeOptions): GetSiteCustomLogResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of custom log fields for a website.
 *
 * @description *   **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
 * *   **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
 * *   ****
 *
 * @param request GetSiteCustomLogRequest
 * @return GetSiteCustomLogResponse
 */
async function getSiteCustomLog(request: GetSiteCustomLogRequest): GetSiteCustomLogResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteCustomLogWithOptions(request, runtime);
}

model GetSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456***'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

1.  cn: the Chinese mainland.
2.  sg: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud Simple Log Service (SLS).
2.  http: HTTP server.
3.  aws3: Amazon Simple Storage Service (S3).
4.  oss: Alibaba Cloud Object Storage Service (OSS).
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.', example='sls'),
  discardRate?: float(name='DiscardRate', description='The discard rate.', example='0.0'),
  fieldList?: string(name='FieldList', description='The log fields.', example='Client,UserAgent'),
  filterRules?: string(name='FilterRules', description='The filtering rules.', example='[]'),
  filterVer?: string(name='FilterVer'),
  rawRule?: string(name='RawRule'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  sinkConfig?: any(name='SinkConfig', description='The delivery configuration.', example='{\\\\"Region\\\\": \\\\"cn-hangzhou\\\\", \\\\"Endpoint\\\\": \\\\"https://***.oss-cn-hangzhou.aliyuncs.com\\\\", \\\\"BucketPath\\\\": \\\\"hjy-test002/online-logs\\\\"}'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
  siteName?: string(name='SiteName', description='The website name.', example='test.***.com'),
  status?: string(name='Status', description='The status of the delivery task.

*   **online**
*   **offline**', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Queries a real-time log delivery task.
 *
 * @param request GetSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteDeliveryTaskResponse
 */
@context("getSiteDeliveryTaskWithContext")
async function getSiteDeliveryTaskWithOptions(request: GetSiteDeliveryTaskRequest, runtime: $RuntimeOptions): GetSiteDeliveryTaskResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a real-time log delivery task.
 *
 * @param request GetSiteDeliveryTaskRequest
 * @return GetSiteDeliveryTaskResponse
 */
async function getSiteDeliveryTask(request: GetSiteDeliveryTaskRequest): GetSiteDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteDeliveryTaskWithOptions(request, runtime);
}

model GetSiteLogDeliveryQuotaRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

1.  dcdn_log_access_l1 (default): access logs.
2.  dcdn_log_er: Edge Routine logs.
3.  dcdn_log_waf: firewall logs.
4.  dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

1.  dcdn_log_access_l1 (default): access logs.
2.  dcdn_log_er: Edge Routine logs.
3.  dcdn_log_waf: firewall logs.
4.  dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', description='The remaining quota.', example='3'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C14840EF0EAAB6D97CDE0C5F6554ACE'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteLogDeliveryQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
 *
 * @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
 * **Take note of the following parameters:**
 * *   ``
 * *   `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
 * *   `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
 * **Response:**
 * *   If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
 *
 * @param request GetSiteLogDeliveryQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteLogDeliveryQuotaResponse
 */
@context("getSiteLogDeliveryQuotaWithContext")
async function getSiteLogDeliveryQuotaWithOptions(request: GetSiteLogDeliveryQuotaRequest, runtime: $RuntimeOptions): GetSiteLogDeliveryQuotaResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteLogDeliveryQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
 *
 * @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
 * **Take note of the following parameters:**
 * *   ``
 * *   `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
 * *   `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
 * **Response:**
 * *   If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
 *
 * @param request GetSiteLogDeliveryQuotaRequest
 * @return GetSiteLogDeliveryQuotaResponse
 */
async function getSiteLogDeliveryQuota(request: GetSiteLogDeliveryQuotaRequest): GetSiteLogDeliveryQuotaResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteLogDeliveryQuotaWithOptions(request, runtime);
}

model GetSiteNameExclusiveRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model GetSiteNameExclusiveResponseBody = {
  enable?: string(name='Enable', description='Indicates whether site hold is enabled. Valid values:

*   on
*   off', example='on'),
  requestId?: string(name='RequestId', description='The request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
}

model GetSiteNameExclusiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteNameExclusiveResponseBody(name='body'),
}

/**
 * @summary Queries the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
 *
 * @param request GetSiteNameExclusiveRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteNameExclusiveResponse
 */
@context("getSiteNameExclusiveWithContext")
async function getSiteNameExclusiveWithOptions(request: GetSiteNameExclusiveRequest, runtime: $RuntimeOptions): GetSiteNameExclusiveResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteNameExclusive',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
 *
 * @param request GetSiteNameExclusiveRequest
 * @return GetSiteNameExclusiveResponse
 */
async function getSiteNameExclusive(request: GetSiteNameExclusiveRequest): GetSiteNameExclusiveResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteNameExclusiveWithOptions(request, runtime);
}

model GetSiteOriginClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model GetSiteOriginClientCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='Request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  result?: {
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
    fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
    id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='DigiCert'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babab022c5e9b27bf9c64d7f4b16****'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
    status?: string(name='Status', description='The status of the certificate.', example='OK'),
    type?: string(name='Type', description='The certificate type.', example='upload'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The status of the certificate.', example='OK'),
}

model GetSiteOriginClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteOriginClientCertificateResponseBody(name='body'),
}

/**
 * @summary 获取站点回源客户端证书信息
 *
 * @param request GetSiteOriginClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteOriginClientCertificateResponse
 */
@context("getSiteOriginClientCertificateWithContext")
async function getSiteOriginClientCertificateWithOptions(request: GetSiteOriginClientCertificateRequest, runtime: $RuntimeOptions): GetSiteOriginClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteOriginClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取站点回源客户端证书信息
 *
 * @param request GetSiteOriginClientCertificateRequest
 * @return GetSiteOriginClientCertificateResponse
 */
async function getSiteOriginClientCertificate(request: GetSiteOriginClientCertificateRequest): GetSiteOriginClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteOriginClientCertificateWithOptions(request, runtime);
}

model GetSitePauseRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='123456****'),
}

model GetSitePauseResponseBody = {
  paused?: boolean(name='Paused', description='Indicates whether ESA is paused on the website. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model GetSitePauseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSitePauseResponseBody(name='body'),
}

/**
 * @summary Queries the ESA proxy configuration of a website.
 *
 * @param request GetSitePauseRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSitePauseResponse
 */
@context("getSitePauseWithContext")
async function getSitePauseWithOptions(request: GetSitePauseRequest, runtime: $RuntimeOptions): GetSitePauseResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSitePause',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the ESA proxy configuration of a website.
 *
 * @param request GetSitePauseRequest
 * @return GetSitePauseResponse
 */
async function getSitePause(request: GetSitePauseRequest): GetSitePauseResponse {
  var runtime = new $RuntimeOptions{};
  return getSitePauseWithOptions(request, runtime);
}

model GetSiteWafSettingsRequest {
  path?: string(name='Path', description='Specifies the configuration path. If not provided, all configurations will be retrieved.', example='bot_management'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model GetSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  settings?: WafSiteSettings(name='Settings', description='Details of site WAF configuration.'),
}

model GetSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteWafSettingsResponseBody(name='body'),
}

/**
 * @summary Get WAF Configuration for a Site
 *
 * @param request GetSiteWafSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteWafSettingsResponse
 */
@context("getSiteWafSettingsWithContext")
async function getSiteWafSettingsWithOptions(request: GetSiteWafSettingsRequest, runtime: $RuntimeOptions): GetSiteWafSettingsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.path)) {
    query['Path'] = request.path;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetSiteWafSettings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get WAF Configuration for a Site
 *
 * @param request GetSiteWafSettingsRequest
 * @return GetSiteWafSettingsResponse
 */
async function getSiteWafSettings(request: GetSiteWafSettingsRequest): GetSiteWafSettingsResponse {
  var runtime = new $RuntimeOptions{};
  return getSiteWafSettingsWithOptions(request, runtime);
}

model GetTieredCacheRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
}

model GetTieredCacheResponseBody = {
  cacheArchitectureMode?: string(name='CacheArchitectureMode', description='Multi-level cache architecture mode. Possible values:
- edge: Edge cache layer.
- edge_smart: Edge cache layer + intelligent cache layer.
- edge_regional: Edge cache layer + regional cache layer.
- edge_regional_smart: Edge cache layer + regional cache layer + intelligent cache layer.', example='edge'),
  requestId?: string(name='RequestId', description='Request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model GetTieredCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTieredCacheResponseBody(name='body'),
}

/**
 * @summary Query Multi-level Cache Configuration for Site
 *
 * @param request GetTieredCacheRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTieredCacheResponse
 */
@context("getTieredCacheWithContext")
async function getTieredCacheWithOptions(request: GetTieredCacheRequest, runtime: $RuntimeOptions): GetTieredCacheResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTieredCache',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Multi-level Cache Configuration for Site
 *
 * @param request GetTieredCacheRequest
 * @return GetTieredCacheResponse
 */
async function getTieredCache(request: GetTieredCacheRequest): GetTieredCacheResponse {
  var runtime = new $RuntimeOptions{};
  return getTieredCacheWithOptions(request, runtime);
}

model GetUploadTaskRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456****'),
  uploadId?: long(name='UploadId', description='The ID of the file upload task. This field is assigned after you call the [UploadFile](https://help.aliyun.com/document_detail/2850466.html) operation.', example='159253299357****'),
}

model GetUploadTaskResponseBody = {
  description?: string(name='Description', description='The error message returned when the file upload task failed.', example='invalid url'),
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A52****'),
  status?: string(name='Status', description='The task status.

*   **INIT**: The task is being initialized.
*   **activacted**: The task is activated.
*   **running**: The task is running.
*   **success**: The task is successful.
*   **partial**: The task is partially successful.
*   **fail**: The task failed.', example='running'),
}

model GetUploadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadTaskResponseBody(name='body'),
}

/**
 * @summary Queries the execution status and running information of a file upload task based on the task ID.
 *
 * @param request GetUploadTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUploadTaskResponse
 */
@context("getUploadTaskWithContext")
async function getUploadTaskWithOptions(request: GetUploadTaskRequest, runtime: $RuntimeOptions): GetUploadTaskResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUploadTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the execution status and running information of a file upload task based on the task ID.
 *
 * @param request GetUploadTaskRequest
 * @return GetUploadTaskResponse
 */
async function getUploadTask(request: GetUploadTaskRequest): GetUploadTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getUploadTaskWithOptions(request, runtime);
}

model GetUserDeliveryTaskRequest {
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test_project'),
}

model GetUserDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.', example='dcdn_log_er'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

*   sls: Alibaba Cloud Simple Log Service (SLS).
*   http: HTTP server.
*   aws3: Amazon Simple Storage Service (S3).
*   oss: Alibaba Cloud Object Storage Service (OSS).
*   kafka: Kafka.
*   aws3cmpt: S3-compatible storage service.', example='oss'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate.', example='0'),
  fieldList?: string(name='FieldList', description='The fields.', example='ClientRequestID,ClientRequestHost'),
  filterRules?: string(name='FilterRules', description='The filtering rules.', example='[{"ClientSSLProtocol": {"equals": ["TLSv1.3"]}}]'),
  filterVer?: string(name='FilterVer'),
  rawRule?: string(name='RawRule'),
  requestId?: string(name='RequestId', description='The request ID.', example='7072132a-bd3c-46a6-9e81-aba3e0e3f861'),
  sinkConfig?: any(name='SinkConfig', description='The delivery configuration.', example='{\\\\"Project\\\\": \\\\"er-online-hjy-pro\\\\", \\\\"Logstore\\\\": \\\\"er-online-hjy-log\\\\", \\\\"Region\\\\": \\\\"cn-hangzhou\\\\", \\\\"Endpoint\\\\": \\\\"cn-hangzhou.log.aliyuncs.com\\\\", \\\\"Aliuid\\\\": \\\\"1077912128805410\\\\"}'),
  status?: string(name='Status', description='The status of the delivery task.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='testoss11'),
}

model GetUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Queries the information about a log delivery task by account.
 *
 * @description *   This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****
 * *   You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****
 * *   ****````
 *
 * @param request GetUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserDeliveryTaskResponse
 */
@context("getUserDeliveryTaskWithContext")
async function getUserDeliveryTaskWithOptions(request: GetUserDeliveryTaskRequest, runtime: $RuntimeOptions): GetUserDeliveryTaskResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a log delivery task by account.
 *
 * @description *   This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****
 * *   You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****
 * *   ****````
 *
 * @param request GetUserDeliveryTaskRequest
 * @return GetUserDeliveryTaskResponse
 */
async function getUserDeliveryTask(request: GetUserDeliveryTaskRequest): GetUserDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getUserDeliveryTaskWithOptions(request, runtime);
}

model GetUserLogDeliveryQuotaRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
}

model GetUserLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', description='The remaining quota.', example='3'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model GetUserLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLogDeliveryQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the remaining log delivery quota of each log category in your account.
 *
 * @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
 *
 * @param request GetUserLogDeliveryQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserLogDeliveryQuotaResponse
 */
@context("getUserLogDeliveryQuotaWithContext")
async function getUserLogDeliveryQuotaWithOptions(request: GetUserLogDeliveryQuotaRequest, runtime: $RuntimeOptions): GetUserLogDeliveryQuotaResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUserLogDeliveryQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the remaining log delivery quota of each log category in your account.
 *
 * @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
 *
 * @param request GetUserLogDeliveryQuotaRequest
 * @return GetUserLogDeliveryQuotaResponse
 */
async function getUserLogDeliveryQuota(request: GetUserLogDeliveryQuotaRequest): GetUserLogDeliveryQuotaResponse {
  var runtime = new $RuntimeOptions{};
  return getUserLogDeliveryQuotaWithOptions(request, runtime);
}

model GetVideoProcessingRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='23321557***'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='23282348***'),
}

model GetVideoProcessingResponseBody = {
  configId?: long(name='ConfigId', example='35281609698****'),
  configType?: string(name='ConfigType', example='global'),
  flvSeekEnd?: string(name='FlvSeekEnd', example='end'),
  flvSeekStart?: string(name='FlvSeekStart', example='start'),
  flvVideoSeekMode?: string(name='FlvVideoSeekMode', example='by_byte'),
  mp4SeekEnd?: string(name='Mp4SeekEnd', example='end'),
  mp4SeekStart?: string(name='Mp4SeekStart', example='start'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', example='on'),
  ruleName?: string(name='RuleName', example='rule_example'),
  sequence?: int32(name='Sequence', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
  videoSeekEnable?: string(name='VideoSeekEnable', example='on'),
}

model GetVideoProcessingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoProcessingResponseBody(name='body'),
}

/**
 * @summary 查询站点视频处理配置详情
 *
 * @param request GetVideoProcessingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVideoProcessingResponse
 */
@context("getVideoProcessingWithContext")
async function getVideoProcessingWithOptions(request: GetVideoProcessingRequest, runtime: $RuntimeOptions): GetVideoProcessingResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetVideoProcessing',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点视频处理配置详情
 *
 * @param request GetVideoProcessingRequest
 * @return GetVideoProcessingResponse
 */
async function getVideoProcessing(request: GetVideoProcessingRequest): GetVideoProcessingResponse {
  var runtime = new $RuntimeOptions{};
  return getVideoProcessingWithOptions(request, runtime);
}

model GetWafBotAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='Application key.', example='example_appkey'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafBotAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafBotAppKeyResponseBody(name='body'),
}

/**
 * @summary This interface is used to obtain the application key (AppKey) for the BOT behavior detection feature in the site\\"s Web Application Firewall (WAF). The key is typically used for authentication and data exchange with the WAF service.
 *
 * @param request GetWafBotAppKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKeyWithOptions(runtime: $RuntimeOptions): GetWafBotAppKeyResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'GetWafBotAppKey',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary This interface is used to obtain the application key (AppKey) for the BOT behavior detection feature in the site\\"s Web Application Firewall (WAF). The key is typically used for authentication and data exchange with the WAF service.
 *
 * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKey(): GetWafBotAppKeyResponse {
  var runtime = new $RuntimeOptions{};
  return getWafBotAppKeyWithOptions(runtime);
}

model GetWafFilterRequest {
  phase?: string(name='Phase', description='The WAF rule category to which the filter conditions to query belong.', example='http_bot'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1'),
  target?: string(name='Target', description='The condition for matching incoming requests.', example='characteristics'),
  type?: string(name='Type', description='The rule type.', example='http_custom_cc'),
}

model GetWafFilterResponseBody = {
  filter?: {
    fields?: [ 
      {
        enable?: boolean(name='Enable'),
        key?: string(name='Key', description='The field for matched objects in the system.', example='http.request.headers'),
        label?: string(name='Label', description='The label of the matched object.', example='Header'),
        logics?: [ 
          {
            attributes?: int32(name='Attributes', description='A custom attribute. For example, this parameter can specify whether the value is case-sensitive.', example='1'),
            enable?: boolean(name='Enable'),
            kind?: string(name='Kind', description='The type of the value input box. Valid values:

*   select:single
*   select:multi
*   input:single
*   input:multi', example='input:single'),
            minPlan?: string(name='MinPlan'),
            negative?: boolean(name='Negative', description='Indicates whether the match result is inverted.'),
            operator?: string(name='Operator', description='The displayed matching characters.', example='Does not equal'),
            symbol?: string(name='Symbol', description='The matching characters in the system.', example='eq'),
            tip?: string(name='Tip', description='The tip on how to enter a valid value that is required by the rules.', example='e.g. image/jpeg'),
            type?: string(name='Type', description='The type of the value. Valid values:

*   integer
*   integer_slice
*   string
*   string_slice', example='string'),
            validator?: {
              errMsg?: string(name='ErrMsg', description='The error message when the validation fails.', example='Enter a valid expression'),
              length?: WafQuotaInteger(name='Length', description='The length of the value.'),
              pattern?: string(name='Pattern', description='The regular expression pattern of the value, which is used to validate strings.', example='^example$'),
              range?: WafQuotaInteger(name='Range', description='The range of the value, which is used to validate numbers.'),
            }(name='Validator', description='The validator, which defines the validation rules for a value.'),
          }
        ](name='Logics', description='The logical conditions.'),
        minPlan?: string(name='MinPlan'),
        selector?: {
          data?: [ 
            {
              label?: string(name='Label', description='The label of the data.', example='China'),
              value?: string(name='Value', description='The value of the data.', example='CN'),
            }
          ](name='Data', description='The data. This parameter is available only when the value of the Kind parameter is data.'),
          kind?: string(name='Kind', description='The type of selector. Valid values: data and others.', example='data'),
        }(name='Selector', description='The selector, which defines how to select a matched object.'),
        sub?: boolean(name='Sub', description='Indicates whether the matched object contains a subfield.', example='true'),
        subTip?: string(name='SubTip', description='The tip on how to enter a subfield.', example='e.g. Content-Type'),
      }
    ](name='Fields', description='The matched objects and related properties.'),
    phase?: string(name='Phase', description='The WAF rule category.', example='http_bot'),
    target?: string(name='Target', description='The condition for matching incoming requests.', example='characteristics'),
    type?: string(name='Type', description='The rule type.', example='http_custom_cc'),
  }(name='Filter', description='The returned match conditions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafFilterResponseBody(name='body'),
}

/**
 * @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
 *
 * @param request GetWafFilterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafFilterResponse
 */
@context("getWafFilterWithContext")
async function getWafFilterWithOptions(request: GetWafFilterRequest, runtime: $RuntimeOptions): GetWafFilterResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWafFilter',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
 *
 * @param request GetWafFilterRequest
 * @return GetWafFilterResponse
 */
async function getWafFilter(request: GetWafFilterRequest): GetWafFilterResponse {
  var runtime = new $RuntimeOptions{};
  return getWafFilterWithOptions(request, runtime);
}

model GetWafQuotaRequest {
  paths?: string(name='Paths', description='The path of the WAF quota, for example:
* managed_rules_group: represents the quota for the WAF managed rules group
* list: represents the quota for custom lists
* page: represents the quota for custom response pages
* scene_policy: represents the quota for scenario protection', example='page'),
}

model GetWafQuotaResponseBody = {
  quota?: {
    list?: {
      enable?: boolean(name='Enable', description='Indicates whether the custom list is enabled.'),
      items?: map[string]QuotaListItemsValue(name='Items', description='An object containing quota information for each type of item in the custom list.'),
      numberItemsPerList?: WafQuotaInteger(name='NumberItemsPerList', description='The number quota allowed per custom list.'),
      numberItemsTotal?: WafQuotaInteger(name='NumberItemsTotal', description='The total number quota allowed for items in all custom lists.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The total number quota allowed for custom lists.'),
    }(name='List', description='Quota information related to custom lists.'),
    managedRulesGroup?: {
      enable?: boolean(name='Enable', description='Indicates whether the WAF managed rules group is enabled.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The total number quota allowed for the WAF managed rules group.'),
    }(name='ManagedRulesGroup', description='Quota information related to the WAF managed rules group.'),
    page?: {
      contentTypes?: map[string]QuotaPageContentTypesValue(name='ContentTypes', description='An object containing quota information for each Content-Type in custom response pages.'),
      enable?: boolean(name='Enable', description='Indicates whether the custom response page is enabled.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The total number quota allowed for custom response pages.'),
    }(name='Page', description='Quota information related to custom response pages.'),
    scenePolicy?: {
      enable?: boolean(name='Enable', description='Indicates whether the scene protection feature is enabled.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The total number quota for scene protection rules.'),
    }(name='ScenePolicy', description='Quota information related to scene protection.'),
  }(name='Quota', description='Returned quota information.'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafQuotaResponseBody(name='body'),
}

/**
 * @summary Get WAF Quota Details
 *
 * @param request GetWafQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafQuotaResponse
 */
@context("getWafQuotaWithContext")
async function getWafQuotaWithOptions(request: GetWafQuotaRequest, runtime: $RuntimeOptions): GetWafQuotaResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.paths)) {
    query['Paths'] = request.paths;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWafQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get WAF Quota Details
 *
 * @param request GetWafQuotaRequest
 * @return GetWafQuotaResponse
 */
async function getWafQuota(request: GetWafQuotaRequest): GetWafQuotaResponse {
  var runtime = new $RuntimeOptions{};
  return getWafQuotaWithOptions(request, runtime);
}

model GetWafRuleRequest {
  id?: long(name='Id', description='The ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.

This parameter is required.', example='20000001'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
}

model GetWafRuleResponseBody = {
  config?: WafRuleConfig(name='Config', description='Rule configuration.'),
  id?: long(name='Id', description='The ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.', example='2000001'),
  name?: string(name='Name', description='Rule name.

This parameter is required.', example='example'),
  phase?: string(name='Phase', description='WAF operation phase.

This parameter is required.', example='http_custom'),
  position?: long(name='Position', description='The position of the rule in the rule set.', example='1'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId'),
  status?: string(name='Status', description='Rule status.', example='on'),
  updateTime?: string(name='UpdateTime', description='The last modified time of the rule.', example='2024-01-01T00:00:00Z'),
}

model GetWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafRuleResponseBody(name='body'),
}

/**
 * @summary Get Details of a Single WAF Rule
 *
 * @param request GetWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafRuleResponse
 */
@context("getWafRuleWithContext")
async function getWafRuleWithOptions(request: GetWafRuleRequest, runtime: $RuntimeOptions): GetWafRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Details of a Single WAF Rule
 *
 * @param request GetWafRuleRequest
 * @return GetWafRuleResponse
 */
async function getWafRule(request: GetWafRuleRequest): GetWafRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getWafRuleWithOptions(request, runtime);
}

model GetWafRulesetRequest {
  id?: long(name='Id', description='The ID of the WAF ruleset, which can be obtained by calling the ListWafRulesets interface.', example='10000001'),
  phase?: string(name='Phase', description='The WAF operation phase, specifying the phase of the ruleset to query.', example='http_bot'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.', example='1'),
}

model GetWafRulesetResponseBody = {
  id?: long(name='Id', description='Ruleset ID.', example='10000001'),
  name?: string(name='Name', description='Ruleset name.

This parameter is required.', example='example'),
  phase?: string(name='Phase', description='The WAF operation phase applicable to the ruleset.

This parameter is required.', example='http_bot'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [
    WafRuleConfig
  ](name='Rules', description='List of rule configurations in the ruleset.'),
  shared?: WafBatchRuleShared(name='Shared', description='Shared configurations for the rules in the ruleset.'),
  status?: string(name='Status', description='Ruleset status.', example='on'),
  updateTime?: string(name='UpdateTime', description='The last modified time of the ruleset.', example='2024-01-01T00:00:00Z'),
}

model GetWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafRulesetResponseBody(name='body'),
}

/**
 * @summary Get WAF Ruleset Details
 *
 * @param request GetWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafRulesetResponse
 */
@context("getWafRulesetWithContext")
async function getWafRulesetWithOptions(request: GetWafRulesetRequest, runtime: $RuntimeOptions): GetWafRulesetResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get WAF Ruleset Details
 *
 * @param request GetWafRulesetRequest
 * @return GetWafRulesetResponse
 */
async function getWafRuleset(request: GetWafRulesetRequest): GetWafRulesetResponse {
  var runtime = new $RuntimeOptions{};
  return getWafRulesetWithOptions(request, runtime);
}

model ListCacheReserveInstancesRequest {
  instanceId?: string(name='InstanceId', description='Instance ID.', example='sp-xcdn-96wblslz****'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size. Range: **1~500**, default is **500**.', example='20'),
  sortBy?: string(name='SortBy', description='The criterion by which you want to sort the queried instances. Valid values:

*   **ExpireTime**
*   **CreateTime**', example='ExpireTime'),
  sortOrder?: string(name='SortOrder', description='The order by which you want to sort the queried instances. Valid values:

*   **asc**
*   **desc**', example='desc'),
  status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **online**: The instance is in service.
*   **offline**: The instance has expired within an allowable period. In this state, it is unavailable.
*   **disable**: The instance has been released.
*   **overdue**: The instance has been stopped due to overdue payments.', example='online', nullable=false),
}

model ListCacheReserveInstancesResponseBody = {
  instanceInfo?: [ 
    {
      cacheReserveCapacity?: long(name='CacheReserveCapacity', description='Cache reserve capacity. Unit: GB.', example='512000'),
      cacheReserveRegion?: string(name='CacheReserveRegion', description='Cache reserve usage region.', example='HK'),
      chargeType?: string(name='ChargeType'),
      createTime?: string(name='CreateTime', description='Instance purchase time.', example='2024-04-12T05:41:51Z'),
      duration?: int32(name='Duration', description='Duration of the instance purchase, unit: months.', example='3'),
      expireTime?: string(name='ExpireTime', description='Instance expiration time.', example='2024-10-05T16:00:00Z'),
      instanceId?: string(name='InstanceId', description='Instance ID.', example='sp-xcdn-96wblslz****'),
      status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   **online**: The instance is in service.
*   **offline**: The instance has expired within an allowable period. In this state, it is unavailable.
*   **disable**: The instance has been released.
*   **overdue**: The instance has been stopped due to overdue payments.', example='online'),
    }
  ](name='InstanceInfo', description='The cache reserve instances.'),
  pageNumber?: int32(name='PageNumber', description='Page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, default **500**, range: **1~500**.', example='500'),
  requestId?: string(name='RequestId', description='Request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='16'),
  totalPage?: int32(name='TotalPage', description='Total pages.', example='1'),
}

model ListCacheReserveInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCacheReserveInstancesResponseBody(name='body'),
}

/**
 * @summary Query Cache Reserve Instance List
 *
 * @param request ListCacheReserveInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCacheReserveInstancesResponse
 */
@context("listCacheReserveInstancesWithContext")
async function listCacheReserveInstancesWithOptions(request: ListCacheReserveInstancesRequest, runtime: $RuntimeOptions): ListCacheReserveInstancesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCacheReserveInstances',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Cache Reserve Instance List
 *
 * @param request ListCacheReserveInstancesRequest
 * @return ListCacheReserveInstancesResponse
 */
async function listCacheReserveInstances(request: ListCacheReserveInstancesRequest): ListCacheReserveInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listCacheReserveInstancesWithOptions(request, runtime);
}

model ListCacheRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule-based configurations. Possible values:
- global: Query global configuration.
- rule: Query rule-based configuration.

This parameter is optional; if not provided, it will not distinguish between global and rule-based configurations.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number, defaulting to 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page, with a maximum of 500. Defaults to 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='test'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Site version number. For sites with version management enabled, this parameter can specify the site version for which the configuration takes effect, defaulting to version 0.', example='1'),
}

model ListCacheRulesResponseBody = {
  configs?: [ 
    {
      additionalCacheablePorts?: string(name='AdditionalCacheablePorts', description='Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.', example='2082'),
      browserCacheMode?: string(name='BrowserCacheMode', description='Browser cache mode. Possible values:
- no_cache: Do not cache.
- follow_origin: Follow origin cache policy.
- override_origin: Override origin cache policy.', example='no_cache'),
      browserCacheTtl?: string(name='BrowserCacheTtl', description='Browser cache expiration time, in seconds.', example='300'),
      bypassCache?: string(name='BypassCache', description='Set bypass cache mode. Possible values:
- cache_all: Cache all requests.
- bypass_all: Bypass cache for all requests.', example='cache_all'),
      cacheDeceptionArmor?: string(name='CacheDeceptionArmor', description='Cache deception defense. Used to defend against web cache deception attacks; only verified cache content will be cached. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      cacheReserveEligibility?: string(name='CacheReserveEligibility', description='Cache reserve eligibility. This is used to control whether user requests bypass the cache reserve node when returning to the origin. The value range is as follows:
- bypass_cache_reserve: Requests bypass the cache reserve.
- eligible_for_cache_reserve: Eligible for cache reserve.', example='bypass_cache_reserve'),
      checkPresenceCookie?: string(name='CheckPresenceCookie', description='When generating the cache key, check if the cookie exists. If it does, add the cookie name (case-insensitive) to the cache key. Multiple cookie names are supported, separated by spaces.', example='cookiename'),
      checkPresenceHeader?: string(name='CheckPresenceHeader', description='When generating the cache key, check if the header exists. If it does, add the header name (case-insensitive) to the cache key. Multiple header names are supported, separated by spaces.', example='headername'),
      configId?: long(name='ConfigId', description='Configuration ID.', example='395386449776640'),
      configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule-based configurations. Possible values:
- global: Query global configuration.
- rule: Query rule-based configuration.', example='global'),
      edgeCacheMode?: string(name='EdgeCacheMode', description='Edge cache mode. The value range is as follows:
- follow_origin: Follow the origin server\\\\"s cache policy (if it exists), otherwise use the default cache policy.
- no_cache: Do not cache.
- override_origin: Override the origin server\\\\"s cache policy.
- follow_origin_bypass: Follow the origin server\\\\"s cache policy (if it exists), otherwise do not cache.', example='follow_origin'),
      edgeCacheTtl?: string(name='EdgeCacheTtl', description='Edge cache expiration time, in seconds.', example='300'),
      edgeStatusCodeCacheTtl?: string(name='EdgeStatusCodeCacheTtl', description='Edge cache expiration time, in seconds.', example='300'),
      includeCookie?: string(name='IncludeCookie', description='Include the specified cookie names and their values when generating the cache key. Multiple values are supported, separated by spaces.', example='cookie_exapmle'),
      includeHeader?: string(name='IncludeHeader', description='Include the specified header names and their values when generating the cache key. Multiple values are supported, separated by spaces.', example='example'),
      queryString?: string(name='QueryString', description='The query strings to be reserved or excluded. Multiple values are supported, separated by spaces.', example='example'),
      queryStringMode?: string(name='QueryStringMode', description='The processing mode for query strings when generating the cache key. The value range is as follows:
- ignore_all: Ignore all query strings.
- exclude_query_string: Exclude specified query strings.
- reserve_all: Default, reserve all query strings.
- include_query_string: Include specified query strings.', example='ignore_all'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      serveStale?: string(name='ServeStale', description='Serve stale cache. When enabled, the node can still respond to user requests with expired cached files even when the origin server is unavailable. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      siteVersion?: int32(name='SiteVersion', description='Site configuration version number. For sites with version management enabled, this parameter can specify the site version for which the configuration takes effect, defaulting to version 0.', example='1'),
      sortQueryStringForCache?: string(name='SortQueryStringForCache', description='Query string sorting. The value range is as follows:
- on: Enable.
- off: Disable.', example='on'),
      userDeviceType?: string(name='UserDeviceType', description='Include the client device type when generating the cache key. The value range is as follows:
- on: Enable.
- off: Disable.', example='on'),
      userGeo?: string(name='UserGeo', description='Include the client\\\\"s geographic location when generating the cache key. The value range is as follows:
- on: Enable.
- off: Disable.', example='on'),
      userLanguage?: string(name='UserLanguage', description='Include the client\\\\"s language type when generating the cache key. The value range is as follows:
- on: Enable.
- off: Disable.', example='on'),
    }
  ](name='Configs', description='Response body configuration.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='Total number of records.', example='20'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='2'),
}

model ListCacheRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCacheRulesResponseBody(name='body'),
}

/**
 * @summary Query multiple cache configurations
 *
 * @param request ListCacheRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCacheRulesResponse
 */
@context("listCacheRulesWithContext")
async function listCacheRulesWithOptions(request: ListCacheRulesRequest, runtime: $RuntimeOptions): ListCacheRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCacheRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query multiple cache configurations
 *
 * @param request ListCacheRulesRequest
 * @return ListCacheRulesResponse
 */
async function listCacheRules(request: ListCacheRulesRequest): ListCacheRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listCacheRulesWithOptions(request, runtime);
}

model ListCertificatesRequest {
  keyword?: string(name='Keyword', description='The keyword that is used for the search.', example='example'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='3'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890123'),
  validOnly?: boolean(name='ValidOnly', description='Specifies whether to return only valid certificates.', example='1'),
}

model ListCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  result?: [ 
    {
      applyCode?: long(name='ApplyCode', description='The error code returned for certificate application.', example='2'),
      applyMessage?: string(name='ApplyMessage', description='The error message returned for certificate application.', example='canceled'),
      casId?: string(name='CasId', description='The certificate ID on Certificate Management Service.', example='30000569'),
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2022-06-24 07:48:51'),
      DCV?: [ 
        {
          id?: string(name='Id', description='The DCV ID.', example='bababf7cdd1546a2ad04c0def1f4****'),
          key?: string(name='Key', description='The DCV name. It is a TXT record name if Type is DNS or URL if Type is HTTP.', example='http://www.example.com/.well-known/acme-challenge/pH20CqwS5L3ZnvkhI436DCzadKFuG7QcUcvB_4KsAow'),
          status?: string(name='Status', description='The verification status.', example='pending'),
          type?: string(name='Type', description='The DCV type. Valid values: DNS and HTTP.', example='HTTP'),
          value?: string(name='Value', description='The DCV content.', example='pH20CqwS5L3ZnvkhI436DCzadKFuG7QcUcvB_4KsAow.KfzYo4LH3EgOt7a73G-RqZkbR0eYtLfEUmtmqGmr4FQ'),
        }
      ](name='DCV', description='The Domain Control Validation (DCV) information.'),
      fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
      id?: string(name='Id', description='The certificate ID on ESA.', example='baba39055622c008b90285a8838e****'),
      issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
      issuerCN?: string(name='IssuerCN', description='The Common Name of the certificate issuer.', example='GlobalSign Organization Validation CA - SHA256 - G3'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
      pubAlg?: string(name='PubAlg', description='The public key algorithm of the certificate.', example='RSA'),
      region?: string(name='Region', description='The region where the certificate is stored.', example='cn-hangzhou'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babab022c5e9b27bf9c64d7f4b16****'),
      sigAlg?: string(name='SigAlg', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.

*   OK
*   Expired
*   Expiring
*   Issued
*   Applying
*   ApplyFailed
*   Canceled', example='OK'),
      type?: string(name='Type', description='The certificate type.

*   cas: certificate that is purchased by using Certificate Management Service
*   upload: custom certificate that you upload
*   free: free certificate', example='free'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2023-04-20 06:18:42'),
    }
  ](name='Result', description='The queried certificates.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCertificatesResponseBody(name='body'),
}

/**
 * @summary Lists certificates of a website.
 *
 * @param request ListCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCertificatesResponse
 */
@context("listCertificatesWithContext")
async function listCertificatesWithOptions(request: ListCertificatesRequest, runtime: $RuntimeOptions): ListCertificatesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists certificates of a website.
 *
 * @param request ListCertificatesRequest
 * @return ListCertificatesResponse
 */
async function listCertificates(request: ListCertificatesRequest): ListCertificatesResponse {
  var runtime = new $RuntimeOptions{};
  return listCertificatesWithOptions(request, runtime);
}

model ListCertificatesByRecordRequest {
  detail?: boolean(name='Detail'),
  recordName?: string(name='RecordName', description='This parameter is required.'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  validOnly?: boolean(name='ValidOnly'),
}

model ListCertificatesByRecordResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applylingCount?: long(name='ApplylingCount'),
      certificates?: [ 
        {
          casId?: string(name='CasId', example='30000137'),
          commonName?: string(name='CommonName', example='www.example.com'),
          createTime?: string(name='CreateTime', example='2023-02-28 06:17:11'),
          fingerprintSha256?: string(name='FingerprintSha256', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
          id?: string(name='Id'),
          issuer?: string(name='Issuer', example='GlobalSign nv-sa'),
          issuerCN?: string(name='IssuerCN', example='GlobalSign Organization Validation CA - SHA256 - G3'),
          name?: string(name='Name'),
          notAfter?: string(name='NotAfter', example='2024-02-28 06:17:11'),
          notBefore?: string(name='NotBefore', example='2023-02-28 06:17:11'),
          pubAlg?: string(name='PubAlg', example='RSA'),
          region?: string(name='Region'),
          SAN?: string(name='SAN', example='www.example.com,*.example.com'),
          serialNumber?: string(name='SerialNumber', example='baba39055622c008b90285a8838ed09a'),
          sigAlg?: string(name='SigAlg', example='SHA256-RSA'),
          status?: string(name='Status'),
          type?: string(name='Type', example='free'),
          updateTime?: string(name='UpdateTime', example='2023-02-28 06:17:11'),
        }
      ](name='Certificates'),
      count?: long(name='Count'),
      recordName?: string(name='RecordName'),
      status?: string(name='Status'),
    }
  ](name='Result'),
  siteId?: long(name='SiteId'),
  siteName?: string(name='SiteName'),
  totalCount?: long(name='TotalCount'),
}

model ListCertificatesByRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCertificatesByRecordResponseBody(name='body'),
}

/**
 * @summary 查询匹配记录名的站点证书列表
 *
 * @param request ListCertificatesByRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCertificatesByRecordResponse
 */
@context("listCertificatesByRecordWithContext")
async function listCertificatesByRecordWithOptions(request: ListCertificatesByRecordRequest, runtime: $RuntimeOptions): ListCertificatesByRecordResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCertificatesByRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询匹配记录名的站点证书列表
 *
 * @param request ListCertificatesByRecordRequest
 * @return ListCertificatesByRecordResponse
 */
async function listCertificatesByRecord(request: ListCertificatesByRecordRequest): ListCertificatesByRecordResponse {
  var runtime = new $RuntimeOptions{};
  return listCertificatesByRecordWithOptions(request, runtime);
}

model ListCiphersRequest {
  ciphersGroup?: string(name='CiphersGroup', description='The name of the cipher suite group, which can be: all, strict, custom.

This parameter is required.', example='strict'),
}

model ListCiphersResponseBody = {
  ciphersGroup?: string(name='CiphersGroup', description='Name of the cipher suite group.', example='all'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  result?: [ string ](name='Result', description='Returned result.'),
  totalCount?: long(name='TotalCount', description='Total number of cipher suites.', example='16'),
}

model ListCiphersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCiphersResponseBody(name='body'),
}

/**
 * @summary Query TLS Cipher Suite List
 *
 * @param request ListCiphersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCiphersResponse
 */
@context("listCiphersWithContext")
async function listCiphersWithOptions(request: ListCiphersRequest, runtime: $RuntimeOptions): ListCiphersResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCiphers',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query TLS Cipher Suite List
 *
 * @param request ListCiphersRequest
 * @return ListCiphersResponse
 */
async function listCiphers(request: ListCiphersRequest): ListCiphersResponse {
  var runtime = new $RuntimeOptions{};
  return listCiphersWithOptions(request, runtime);
}

model ListClientCaCertificatesRequest {
  pageNumber?: long(name='PageNumber', description='The page number. Valid values: 1 to 500.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 100.', example='20'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890123'),
}

model ListClientCaCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
  result?: [ 
    {
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
      fingerprintSha256?: string(name='FingerprintSha256'),
      id?: string(name='Id', description='The certificate ID.', example='babab9db65ee5efcca9f3d41d4b5****'),
      issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='GlobalSign nv-sa'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      serialNumber?: string(name='SerialNumber'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.', example='OK'),
      type?: string(name='Type', description='The certificate type.', example='upload'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
    }
  ](name='Result', description='The queried client CA certificates.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='16'),
}

model ListClientCaCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCaCertificatesResponseBody(name='body'),
}

/**
 * @summary Queries a list of client certificate authority (CA) certificates for a website.
 *
 * @param request ListClientCaCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClientCaCertificatesResponse
 */
@context("listClientCaCertificatesWithContext")
async function listClientCaCertificatesWithOptions(request: ListClientCaCertificatesRequest, runtime: $RuntimeOptions): ListClientCaCertificatesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListClientCaCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of client certificate authority (CA) certificates for a website.
 *
 * @param request ListClientCaCertificatesRequest
 * @return ListClientCaCertificatesResponse
 */
async function listClientCaCertificates(request: ListClientCaCertificatesRequest): ListClientCaCertificatesResponse {
  var runtime = new $RuntimeOptions{};
  return listClientCaCertificatesWithOptions(request, runtime);
}

model ListClientCertificatesRequest {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model ListClientCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  result?: [ 
    {
      CACertificateId?: string(name='CACertificateId', description='The ID of the CA certificate.', example='baba39055622c008b90285a8838ed09a'),
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
      fingerprintSha256?: string(name='FingerprintSha256'),
      id?: string(name='Id', description='The certificate ID.', example='babab9db65ee5efcca9f3d41d4b50d66'),
      issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public key algorithm of the certificate.', example='RSA'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      serialNumber?: string(name='SerialNumber'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.', example='active'),
      type?: string(name='Type', description='The certificate type.', example='dcdn'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
    }
  ](name='Result', description='The client certificates.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='5'),
}

model ListClientCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCertificatesResponseBody(name='body'),
}

/**
 * @summary Queries client certificates configured for a website.
 *
 * @param request ListClientCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClientCertificatesResponse
 */
@context("listClientCertificatesWithContext")
async function listClientCertificatesWithOptions(request: ListClientCertificatesRequest, runtime: $RuntimeOptions): ListClientCertificatesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListClientCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries client certificates configured for a website.
 *
 * @param request ListClientCertificatesRequest
 * @return ListClientCertificatesResponse
 */
async function listClientCertificates(request: ListClientCertificatesRequest): ListClientCertificatesResponse {
  var runtime = new $RuntimeOptions{};
  return listClientCertificatesWithOptions(request, runtime);
}

model ListCompressionRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID, which can be obtained by calling the [ListRedirectRules](https://help.aliyun.com/document_detail/2867474.html) interface.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule-based configuration.', example='rule'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='34003500310****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='0'),
}

model ListCompressionRulesResponseBody = {
  configs?: [ 
    {
      brotli?: string(name='Brotli', description='Brotli compression. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
      configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule-based configuration.', example='rule'),
      gzip?: string(name='Gzip', description='Gzip compression. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, defaulting to version 0.', example='1'),
      zstd?: string(name='Zstd', description='Zstd compression. Value range: - on: Enable. - off: Disable.', example='on'),
    }
  ](name='Configs', description='List of compression rule configurations.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', description='Total number of items.', example='16'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='1'),
}

model ListCompressionRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCompressionRulesResponseBody(name='body'),
}

/**
 * @summary Query the list of compression rules
 *
 * @param request ListCompressionRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCompressionRulesResponse
 */
@context("listCompressionRulesWithContext")
async function listCompressionRulesWithOptions(request: ListCompressionRulesRequest, runtime: $RuntimeOptions): ListCompressionRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCompressionRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the list of compression rules
 *
 * @param request ListCompressionRulesRequest
 * @return ListCompressionRulesResponse
 */
async function listCompressionRules(request: ListCompressionRulesRequest): ListCompressionRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listCompressionRulesWithOptions(request, runtime);
}

model ListESAIPInfoRequest {
  vipInfo?: string(name='VipInfo', description='This parameter is required.', example='192.0.0.24,2408:8740:41FF:2:23::7FE,0.0.0.0,abcd'),
}

model ListESAIPInfoResponseBody = {
  content?: [ 
    {
      cdnIp?: string(name='CdnIp', example='true'),
      ip?: string(name='Ip', example='27.129.167.239'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model ListESAIPInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListESAIPInfoResponseBody(name='body'),
}

/**
 * @summary 批量查询IP是否为VIP
 *
 * @param request ListESAIPInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListESAIPInfoResponse
 */
@context("listESAIPInfoWithContext")
async function listESAIPInfoWithOptions(request: ListESAIPInfoRequest, runtime: $RuntimeOptions): ListESAIPInfoResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListESAIPInfo',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询IP是否为VIP
 *
 * @param request ListESAIPInfoRequest
 * @return ListESAIPInfoResponse
 */
async function listESAIPInfo(request: ListESAIPInfoRequest): ListESAIPInfoResponse {
  var runtime = new $RuntimeOptions{};
  return listESAIPInfoWithOptions(request, runtime);
}

model ListEdgeContainerAppRecordsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  orderKey?: string(name='OrderKey', description='The sorting field. Valid values:

*   CreateTime: the time when the domain name was associated.
*   CreateTime: the time when the domain name was last modified.', example='CreateTime'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='DESC'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 500.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword that is used for the search.', example='ver-1006157458290860032'),
}

model ListEdgeContainerAppRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  records?: [ 
    {
      appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
      cname?: string(name='Cname', description='The CNAME of the associated domain name.', example='kdxceo****.yun****.com'),
      configId?: long(name='ConfigId', description='The configuration ID of the associated domain name.', example='27522948436****'),
      createTime?: string(name='CreateTime', description='The time when the domain name was added. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      recordId?: long(name='RecordId', description='The record ID of the associated domain name.', example='266****'),
      recordName?: string(name='RecordName', description='The associated domain name.', example='a.example.com'),
      schemdId?: int32(name='SchemdId', description='The scheduling domain ID of the associated domain name.', example='123456'),
      siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
      updateTime?: string(name='UpdateTime', description='The time when the scheduling domain ID or CNAME was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records', description='The details about the associated domain names.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The number of domain names that are associated with the specified application.', example='2'),
}

model ListEdgeContainerAppRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppRecordsResponseBody(name='body'),
}

/**
 * @summary Lists domain names that are associated with a containerized application.
 *
 * @param request ListEdgeContainerAppRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppRecordsResponse
 */
@context("listEdgeContainerAppRecordsWithContext")
async function listEdgeContainerAppRecordsWithOptions(request: ListEdgeContainerAppRecordsRequest, runtime: $RuntimeOptions): ListEdgeContainerAppRecordsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListEdgeContainerAppRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists domain names that are associated with a containerized application.
 *
 * @param request ListEdgeContainerAppRecordsRequest
 * @return ListEdgeContainerAppRecordsResponse
 */
async function listEdgeContainerAppRecords(request: ListEdgeContainerAppRecordsRequest): ListEdgeContainerAppRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return listEdgeContainerAppRecordsWithOptions(request, runtime);
}

model ListEdgeContainerAppVersionsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  orderKey?: string(name='OrderKey', description='The sorting field. Valid values:

*   Name: the version name.
*   CreateTime: the time when the version was created.
*   UpdateTime: the time when the version was last modified.', example='Name'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='DESC'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 65535.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword used for the search.', example='ver-100568263967926****'),
  searchType?: string(name='SearchType', description='The parameter used for fuzzy search. Valid values: VersionId and Name.', example='VersionId'),
}

model ListEdgeContainerAppVersionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='20'),
  versions?: [ 
    {
      appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
      containers?: [ 
        {
          args?: string(name='Args', description='The arguments that are passed to the container startup command.', example='-c a=1'),
          command?: string(name='Command', description='The command that is used to start the container.', example='openresty -g \\\\"daemon off;\\\\"'),
          envVariables?: string(name='EnvVariables', description='The environment variables of the container.', example='ENV=prod'),
          image?: string(name='Image', description='The address of the container image.', example='nginx'),
          name?: string(name='Name', description='The container name.', example='container1'),
          postStart?: string(name='PostStart', description='The command that is run before the container is started. Format: `{"exec":{"command":["cat","/etc/group"\\\\]}}`.

If you want to cancel this configuration, set the parameter value to `""` or `{}`. If you do not specify this parameter, this configuration is ignored.', example='{\\\\"exec\\\\":{\\\\"command\\\\":[\\\\"bash\\\\",\\\\"-c\\\\",\\\\"cd /home/admin/'),
          preStop?: string(name='PreStop', description='The command that is run before the container is stopped.', example='sh stop.sh'),
          probeContent?: {
            command?: string(name='Command', description='The probe command.', example='openresty -g  "daemon off;'),
            failureThreshold?: int32(name='FailureThreshold', description='The number of consecutive failed health checks required for a container to be considered as unhealthy.', example='3'),
            host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
            httpHeaders?: string(name='HttpHeaders', description='The request headers that are included in the container health check request.', example='{\\\\"Content-Type\\\\":\\\\"application/json\\\\"}'),
            initialDelaySeconds?: int32(name='InitialDelaySeconds', description='The latency for container probe initialization.', example='10'),
            path?: string(name='Path', description='The path of the container health check.', example='/health_check'),
            periodSeconds?: int32(name='PeriodSeconds', description='The interval between container health checks.', example='5'),
            port?: int32(name='Port', description='The port of the container health check.', example='80'),
            scheme?: string(name='Scheme', description='The protocol that the container health check request uses.', example='http'),
            successThreshold?: int32(name='SuccessThreshold', description='The number of consecutive successful health checks required for a container to be considered as healthy.', example='1'),
            timeoutSeconds?: int32(name='TimeoutSeconds', description='The timeout period of the container health check.', example='30'),
          }(name='ProbeContent', description='The container probe content.'),
          probeType?: string(name='ProbeType', description='The probe type of the container.', example='httpGet'),
          spec?: string(name='Spec', description='The compute specification of the container.', example='1C2G'),
        }
      ](name='Containers', description='The containers in the version.'),
      createTime?: string(name='CreateTime', description='The time when the version was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2022-11-10T02:53:16Z'),
      lastPublishTime?: string(name='LastPublishTime', description='The time when the version was last released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-02-10T02:48:36Z'),
      name?: string(name='Name', description='The version name.', example='version01'),
      publishTime?: string(name='PublishTime', description='The time when the version was released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-02-10T02:48:36Z'),
      remarks?: string(name='Remarks', description='The remarks.', example='test version'),
      status?: string(name='Status', description='The status of the current version. Valid values:

*   **created**
*   **failed**
*   **creating**', example='created'),
      updateTime?: string(name='UpdateTime', description='The time when the version was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-04-16 10:51:00'),
      versionId?: string(name='VersionId', description='The version ID.', example='ver-87962637161651****'),
    }
  ](name='Versions', description='The versions.'),
}

model ListEdgeContainerAppVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppVersionsResponseBody(name='body'),
}

/**
 * @summary Lists versions of all containerized applications.
 *
 * @param request ListEdgeContainerAppVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppVersionsResponse
 */
@context("listEdgeContainerAppVersionsWithContext")
async function listEdgeContainerAppVersionsWithOptions(request: ListEdgeContainerAppVersionsRequest, runtime: $RuntimeOptions): ListEdgeContainerAppVersionsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListEdgeContainerAppVersions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists versions of all containerized applications.
 *
 * @param request ListEdgeContainerAppVersionsRequest
 * @return ListEdgeContainerAppVersionsResponse
 */
async function listEdgeContainerAppVersions(request: ListEdgeContainerAppVersionsRequest): ListEdgeContainerAppVersionsResponse {
  var runtime = new $RuntimeOptions{};
  return listEdgeContainerAppVersionsWithOptions(request, runtime);
}

model ListEdgeContainerAppsRequest {
  orderKey?: string(name='OrderKey', description='The sorting field. This parameter is left empty by default. Valid values:

*   Name: the version name.
*   CreateTime: the time when the version was created.
*   UpdateTime: the time when the version was last modified.', example='CreateTime'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. This parameter is left empty by default. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**. Valid values: 1 to 65535.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**. Valid values: 1 to 500.', example='20'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='ver-1005682639679266816'),
  searchType?: string(name='SearchType', description='The search criterion based on which you want to perform fuzzy search. Valid values:

*   Appid: the application ID.
*   Name: the application name.', example='Appid'),
}

model ListEdgeContainerAppsResponseBody = {
  apps?: [ 
    {
      appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
      createTime?: string(name='CreateTime', description='The time when the version was created.', example='2022-12-01T16:16:27.418298794+08:00'),
      domainName?: string(name='DomainName', description='The domain name associated with the application.', example='test.com'),
      gatewayType?: string(name='GatewayType', description='The type of the gateway. Valid values:

*   l7: Layer 7 gateway.
*   l4: Layer 4 gateway.', example='l7'),
      healthCheck?: {
        failTimes?: int32(name='FailTimes', description='The number of consecutive failed health checks for an application to be considered unhealthy.', example='5'),
        host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
        httpCode?: string(name='HttpCode', description='The range of health check status codes that indicate successful health checks.', example='http_2XX'),
        interval?: int32(name='Interval', description='The interval between health checks. Unit: seconds.', example='5'),
        method?: string(name='Method', description='The HTTP method used for health checks.', example='GET'),
        port?: int32(name='Port', description='The health check port.', example='8080'),
        succTimes?: int32(name='SuccTimes', description='The number of consecutive successful health checks for an application to be considered healthy.', example='1'),
        timeout?: int32(name='Timeout', description='The timeout period of health checks. Unit: seconds.', example='60'),
        type?: string(name='Type', description='The type of health checks. Valid values:

*   l7
*   l4', example='l7'),
        uri?: string(name='Uri', description='The health check URL.', example='/health_check'),
      }(name='HealthCheck', description='The information about health checks.'),
      name?: string(name='Name', description='The application name.', example='app-test'),
      percentage?: int32(name='Percentage', description='The progress of the application creation task in percentage.', example='100'),
      quicCid?: string(name='QuicCid', description='Indicates whether QUIC is enabled.', example='false'),
      remarks?: string(name='Remarks', description='The remarks.', example='test app'),
      servicePort?: int32(name='ServicePort', description='The server port. Valid values: 1 to 65535.', example='80'),
      status?: string(name='Status', description='The status of the application. Valid values:

*   creating: The application is being created.
*   failed: The application failed to be created.
*   created: The application is created.', example='created'),
      targetPort?: int32(name='TargetPort', description='The backend port, which is also the service port of the application. Valid values: 1 to 65535.', example='80'),
      updateTime?: string(name='UpdateTime', description='The time when the application was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-11-15T12:11:02Z'),
      versionCount?: int32(name='VersionCount', description='The number of versions of the application.', example='10'),
    }
  ](name='Apps', description='The queried applications.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**. Valid values: 1 to 65535.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='10'),
}

model ListEdgeContainerAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppsResponseBody(name='body'),
}

/**
 * @summary Queries all containerized applications in your Alibaba Cloud account.
 *
 * @param request ListEdgeContainerAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppsResponse
 */
@context("listEdgeContainerAppsWithContext")
async function listEdgeContainerAppsWithOptions(request: ListEdgeContainerAppsRequest, runtime: $RuntimeOptions): ListEdgeContainerAppsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orderKey)) {
    query['OrderKey'] = request.orderKey;
  }
  if (!$isNull(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!$isNull(request.searchType)) {
    query['SearchType'] = request.searchType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListEdgeContainerApps',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all containerized applications in your Alibaba Cloud account.
 *
 * @param request ListEdgeContainerAppsRequest
 * @return ListEdgeContainerAppsResponse
 */
async function listEdgeContainerApps(request: ListEdgeContainerAppsRequest): ListEdgeContainerAppsResponse {
  var runtime = new $RuntimeOptions{};
  return listEdgeContainerAppsWithOptions(request, runtime);
}

model ListEdgeContainerRecordsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='20'),
  recordMatchType?: string(name='RecordMatchType', description='The match mode to filter the record names:

*   **fuzzy**
*   **prefix**
*   **suffix**
*   **exact** (default)', example='fuzzy'),
  recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='1234567890123'),
}

model ListEdgeContainerRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured.', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
      siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records', description='The records.'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='50'),
}

model ListEdgeContainerRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerRecordsResponseBody(name='body'),
}

/**
 * @summary Queries the records that are associated with Edge Container for a website.
 *
 * @param request ListEdgeContainerRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerRecordsResponse
 */
@context("listEdgeContainerRecordsWithContext")
async function listEdgeContainerRecordsWithOptions(request: ListEdgeContainerRecordsRequest, runtime: $RuntimeOptions): ListEdgeContainerRecordsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListEdgeContainerRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the records that are associated with Edge Container for a website.
 *
 * @param request ListEdgeContainerRecordsRequest
 * @return ListEdgeContainerRecordsResponse
 */
async function listEdgeContainerRecords(request: ListEdgeContainerRecordsRequest): ListEdgeContainerRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return listEdgeContainerRecordsWithOptions(request, runtime);
}

model ListEdgeRoutinePlansResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='20'),
  planInfo?: [ 
    {
      billingMode?: string(name='BillingMode', description='The billing method. Valid values:

*   PREPAY: subscription.
*   POSTPAY: pay-as-you-go.', example='POSTPAY'),
      erRoutineCodeVersionQuota?: string(name='ErRoutineCodeVersionQuota', description='The maximum number of versions that each routine supports.', example='20'),
      erRoutineQuota?: string(name='ErRoutineQuota', description='The maximum of routines that can be created.', example='100'),
      erRoutineRouteSiteCountQuota?: string(name='ErRoutineRouteSiteCountQuota', description='The maximum number of websites with which each routine can be associated.', example='100'),
      paymentMethod?: string(name='PaymentMethod', description='The payment method. Valid values:

*   er_free
*   er_pay', example='er_free'),
      planName?: string(name='PlanName', description='The plan name.', example='test_plan'),
    }
  ](name='PlanInfo', description='The plans.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  totalPage?: int32(name='TotalPage', description='The total number of pages returned.', example='1'),
}

model ListEdgeRoutinePlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutinePlansResponseBody(name='body'),
}

/**
 * @summary Queries Edge Routine plans.
 *
 * @param request ListEdgeRoutinePlansRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlansWithOptions(runtime: $RuntimeOptions): ListEdgeRoutinePlansResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListEdgeRoutinePlans',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Edge Routine plans.
 *
 * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlans(): ListEdgeRoutinePlansResponse {
  var runtime = new $RuntimeOptions{};
  return listEdgeRoutinePlansWithOptions(runtime);
}

model ListEdgeRoutineRecordsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='20'),
  recordMatchType?: string(name='RecordMatchType', description='The match mode to filter the record names.

*   **fuzzy**: fuzzy match.
*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **exact** (default): exact match .', example='fuzzy'),
  recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456****'),
}

model ListEdgeRoutineRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The total number of pages returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
      siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-22T08:32:02Z'),
    }
  ](name='Records', description='The list of records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='121'),
}

model ListEdgeRoutineRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutineRecordsResponseBody(name='body'),
}

/**
 * @summary Queries the records that are associated with Edge Routine routes for a website.
 *
 * @description >  You can call this operation 100 times per second.
 *
 * @param request ListEdgeRoutineRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeRoutineRecordsResponse
 */
@context("listEdgeRoutineRecordsWithContext")
async function listEdgeRoutineRecordsWithOptions(request: ListEdgeRoutineRecordsRequest, runtime: $RuntimeOptions): ListEdgeRoutineRecordsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListEdgeRoutineRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the records that are associated with Edge Routine routes for a website.
 *
 * @description >  You can call this operation 100 times per second.
 *
 * @param request ListEdgeRoutineRecordsRequest
 * @return ListEdgeRoutineRecordsResponse
 */
async function listEdgeRoutineRecords(request: ListEdgeRoutineRecordsRequest): ListEdgeRoutineRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return listEdgeRoutineRecordsWithOptions(request, runtime);
}

model ListHttpRequestHeaderModificationRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID, which can be obtained by calling the [ListHttpRequestHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) API.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Possible values:
- global: Query global configuration;
- rule: Query rule configuration;', example='rule'),
  pageNumber?: int32(name='PageNumber', description='Page number, defaulting to 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page, with a maximum of 500. Defaults to 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, defaulting to version 0.', example='0'),
}

model ListHttpRequestHeaderModificationRulesResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
      configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration;
- rule: Rule configuration;', example='global'),
      requestHeaderModification?: [ 
        {
          name?: string(name='Name', description='The name of the request header.', example='headerName'),
          operation?: string(name='Operation', description='The operation type. The value range is as follows:

- add: Add.
- del: Delete.
- modify: Modify.', example='add'),
          type?: string(name='Type'),
          value?: string(name='Value', description='The value of the request header.', example='headerValue'),
        }
      ](name='RequestHeaderModification', description='Modify request headers, supporting add, delete, and modify operations.'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, defaulting to version 0.', example='1'),
    }
  ](name='Configs', description='List of HTTP request header modification configurations.'),
  pageNumber?: int32(name='PageNumber', description='Page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, default **500**, with a range of **1~500**.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
  totalCount?: int32(name='TotalCount', description='Total number of items.', example='10'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='1'),
}

model ListHttpRequestHeaderModificationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHttpRequestHeaderModificationRulesResponseBody(name='body'),
}

/**
 * @summary List of HTTP Request Header Rules
 *
 * @param request ListHttpRequestHeaderModificationRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHttpRequestHeaderModificationRulesResponse
 */
@context("listHttpRequestHeaderModificationRulesWithContext")
async function listHttpRequestHeaderModificationRulesWithOptions(request: ListHttpRequestHeaderModificationRulesRequest, runtime: $RuntimeOptions): ListHttpRequestHeaderModificationRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListHttpRequestHeaderModificationRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List of HTTP Request Header Rules
 *
 * @param request ListHttpRequestHeaderModificationRulesRequest
 * @return ListHttpRequestHeaderModificationRulesResponse
 */
async function listHttpRequestHeaderModificationRules(request: ListHttpRequestHeaderModificationRulesRequest): ListHttpRequestHeaderModificationRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listHttpRequestHeaderModificationRulesWithOptions(request, runtime);
}

model ListHttpResponseHeaderModificationRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Possible values:
- global: Query global configuration.
- rule: Query rule configuration.

This parameter is optional. If not provided, it does not distinguish between global and rule configurations.', example='rule'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, default is 500. The value range is any integer from 1 to 500.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, with the default being version 0.', example='0'),
}

model ListHttpResponseHeaderModificationRulesResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
      configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule configuration.', example='rule'),
      responseHeaderModification?: [ 
        {
          name?: string(name='Name', description='Name of the response header.', example='headerName'),
          operation?: string(name='Operation', description='Operation type. The value range is as follows:
- add: Add.
- del: Delete
- modify: Modify.', example='add'),
          type?: string(name='Type'),
          value?: string(name='Value', description='Response header value.', example='headerValue'),
        }
      ](name='ResponseHeaderModification', description='Modify response headers, supporting add, delete, and modify operations.'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, with the default being version 0.', example='0'),
    }
  ](name='Configs', description='List of modified HTTP response headers.'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='14'),
  totalPage?: int32(name='TotalPage', description='Total pages.', example='1'),
}

model ListHttpResponseHeaderModificationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHttpResponseHeaderModificationRulesResponseBody(name='body'),
}

/**
 * @summary List of HTTP Response Header Rules
 *
 * @param request ListHttpResponseHeaderModificationRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHttpResponseHeaderModificationRulesResponse
 */
@context("listHttpResponseHeaderModificationRulesWithContext")
async function listHttpResponseHeaderModificationRulesWithOptions(request: ListHttpResponseHeaderModificationRulesRequest, runtime: $RuntimeOptions): ListHttpResponseHeaderModificationRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListHttpResponseHeaderModificationRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List of HTTP Response Header Rules
 *
 * @param request ListHttpResponseHeaderModificationRulesRequest
 * @return ListHttpResponseHeaderModificationRulesResponse
 */
async function listHttpResponseHeaderModificationRules(request: ListHttpResponseHeaderModificationRulesRequest): ListHttpResponseHeaderModificationRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listHttpResponseHeaderModificationRulesWithOptions(request, runtime);
}

model ListHttpsApplicationConfigurationsRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='3528160969****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule-based configurations. Possible values:
- global: Query global configuration.
- rule: Query rule-based configuration.

This parameter is optional. If not provided, it will not distinguish between global and rule-based configurations.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number, default is 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page, maximum is 500, default is 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name, which can be used to find the rule with the specified name.', example='rule_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Site version number. For sites with version management enabled, this parameter can specify the site version for which the configuration is effective, default is version 0.', example='1'),
}

model ListHttpsApplicationConfigurationsResponseBody = {
  configs?: [ 
    {
      altSvc?: string(name='AltSvc', description='Alt-Svc feature switch, default is off. Value range: 
- on: enabled. 
- off: disabled.', example='on'),
      altSvcClear?: string(name='AltSvcClear', description='Whether the Alt-Svc header includes the clear parameter, default is off. Values:
- on: Enabled.
- off: Disabled.', example='on'),
      altSvcMa?: string(name='AltSvcMa', description='The validity period of Alt-Svc in seconds, default is 86400 seconds.', example='86400'),
      altSvcPersist?: string(name='AltSvcPersist', description='Whether the Alt-Svc header includes the persist parameter, default is off. Values:
- on: Enabled.
- off: Disabled.', example='on'),
      configId?: long(name='ConfigId', description='Configuration ID.', example='395386449776640'),
      configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule-based configurations. Possible values:
- global: Query global configuration.
- rule: Query rule-based configuration.', example='global'),
      hsts?: string(name='Hsts', description='Whether HSTS is enabled, default is off. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      hstsIncludeSubdomains?: string(name='HstsIncludeSubdomains', description='Whether to include subdomains in HSTS, default is off. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      hstsMaxAge?: string(name='HstsMaxAge', description='The expiration time of HSTS in seconds.', example='3600'),
      hstsPreload?: string(name='HstsPreload', description='Whether HSTS preloading is enabled, default is off. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      httpsForce?: string(name='HttpsForce', description='Whether to enable forced HTTPS, default is disabled. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      httpsForceCode?: string(name='HttpsForceCode', description='Forced HTTPS redirect status code. Possible values:
- 301
- 302
- 307
- 308', example='301'),
      httpsNoSniDeny?: string(name='HttpsNoSniDeny'),
      httpsSniVerify?: string(name='HttpsSniVerify'),
      httpsSniWhitelist?: string(name='HttpsSniWhitelist'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true.
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Site configuration version number. For sites with version management enabled, this parameter can specify the site version for which the configuration is effective, default is version 0.', example='1'),
    }
  ](name='Configs', description='Response body configurations.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', description='Total number of records.', example='16'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='2'),
}

model ListHttpsApplicationConfigurationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHttpsApplicationConfigurationsResponseBody(name='body'),
}

/**
 * @summary Query multiple HTTPS application configurations
 *
 * @param request ListHttpsApplicationConfigurationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHttpsApplicationConfigurationsResponse
 */
@context("listHttpsApplicationConfigurationsWithContext")
async function listHttpsApplicationConfigurationsWithOptions(request: ListHttpsApplicationConfigurationsRequest, runtime: $RuntimeOptions): ListHttpsApplicationConfigurationsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListHttpsApplicationConfigurations',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query multiple HTTPS application configurations
 *
 * @param request ListHttpsApplicationConfigurationsRequest
 * @return ListHttpsApplicationConfigurationsResponse
 */
async function listHttpsApplicationConfigurations(request: ListHttpsApplicationConfigurationsRequest): ListHttpsApplicationConfigurationsResponse {
  var runtime = new $RuntimeOptions{};
  return listHttpsApplicationConfigurationsWithOptions(request, runtime);
}

model ListHttpsBasicConfigurationsRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration.
- rule: Query rule configuration.

This parameter is optional. If not provided, it does not distinguish between global and rule configurations.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number, default is 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page, maximum is 500, default is 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name, which can be used to find the rule with the specified name.', example='test'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
}

model ListHttpsBasicConfigurationsResponseBody = {
  configs?: [ 
    {
      ciphersuite?: string(name='Ciphersuite', description='Custom ciphersuite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.', example='TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256'),
      ciphersuiteGroup?: string(name='CiphersuiteGroup', description='Ciphersuite group, defaults to enabling all ciphersuites. Value range:
- all: all ciphersuites.
- strict: strong ciphersuites.
- custom: custom ciphersuites.', example='strict'),
      configId?: long(name='ConfigId', description='Configuration ID.', example='395386449776640'),
      configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration.
- rule: Query rule configuration.', example='global'),
      http2?: string(name='Http2', description='Whether to enable HTTP2, default is on. Value range:
- on: enabled.
- off: disabled.', example='on'),
      http3?: string(name='Http3', description='Whether to enable HTTP3, default is on. Value range:
- on: enabled.
- off: disabled.', example='on'),
      https?: string(name='Https', description='Whether to enable HTTPS, default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
      ocspStapling?: string(name='OcspStapling', description='Whether to enable OCSP, default is off. Value range:
- on: enabled.
- off: disabled.', example='on'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true.
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      tls10?: string(name='Tls10', description='Whether to enable TLS1.0, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
      tls11?: string(name='Tls11', description='Whether to enable TLS1.1, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
      tls12?: string(name='Tls12', description='Whether to enable TLS1.2, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
      tls13?: string(name='Tls13', description='Whether to enable TLS1.3, default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
    }
  ](name='Configs', description='Response body configuration.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  totalCount?: int32(name='TotalCount', description='Total number of records.', example='20'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='2'),
}

model ListHttpsBasicConfigurationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHttpsBasicConfigurationsResponseBody(name='body'),
}

/**
 * @summary Query multiple HTTPS basic configurations
 *
 * @param request ListHttpsBasicConfigurationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHttpsBasicConfigurationsResponse
 */
@context("listHttpsBasicConfigurationsWithContext")
async function listHttpsBasicConfigurationsWithOptions(request: ListHttpsBasicConfigurationsRequest, runtime: $RuntimeOptions): ListHttpsBasicConfigurationsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListHttpsBasicConfigurations',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query multiple HTTPS basic configurations
 *
 * @param request ListHttpsBasicConfigurationsRequest
 * @return ListHttpsBasicConfigurationsResponse
 */
async function listHttpsBasicConfigurations(request: ListHttpsBasicConfigurationsRequest): ListHttpsBasicConfigurationsResponse {
  var runtime = new $RuntimeOptions{};
  return listHttpsBasicConfigurationsWithOptions(request, runtime);
}

model ListImageTransformsRequest {
  configId?: long(name='ConfigId', description='Configuration ID. Can be obtained by calling the [ListImageTransforms](https://help.aliyun.com/document_detail/2869056.html) interface.', example='352816096987136'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Possible values:
- global: Query global configuration;
- rule: Query rule configuration;

This parameter is optional. If not provided, it will not distinguish between global and rule configurations.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number. The default value is 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page. The maximum value is 500, and the default value is 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='test1'),
  siteId?: long(name='SiteId', description='Site ID. Can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='Site version number. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration takes effect. The default value is version 0.', example='1'),
}

model ListImageTransformsResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='395386449776640'),
      configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration;
- rule: Rule configuration;', example='global'),
      enable?: string(name='Enable', description='Switch. Possible values:

- **on**: Enabled.
- **off**: Disabled.', example='on'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='test'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Site configuration version number. For sites with version management enabled, you can use this parameter to specify the site version for which the configuration takes effect. The default value is version 0.', example='1'),
    }
  ](name='Configs', description='Configuration list.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size. Range: **1~500**, default is **500**.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='Total number of records.', example='16'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='2'),
}

model ListImageTransformsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageTransformsResponseBody(name='body'),
}

/**
 * @summary Query Multiple Site Image Transformation Configurations
 *
 * @param request ListImageTransformsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListImageTransformsResponse
 */
@context("listImageTransformsWithContext")
async function listImageTransformsWithOptions(request: ListImageTransformsRequest, runtime: $RuntimeOptions): ListImageTransformsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListImageTransforms',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Multiple Site Image Transformation Configurations
 *
 * @param request ListImageTransformsRequest
 * @return ListImageTransformsResponse
 */
async function listImageTransforms(request: ListImageTransformsRequest): ListImageTransformsResponse {
  var runtime = new $RuntimeOptions{};
  return listImageTransformsWithOptions(request, runtime);
}

model ListInstanceQuotasRequest {
  instanceId?: string(name='InstanceId', description='The plan ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='sp-xcdn-96wblslz****'),
  quotaNames?: string(name='QuotaNames', description='The quota names in the plan. Separate multiple names with commas (,). Valid values:

*   **waf:phase:http_anti_scan:actions**: the actions in WAF scan protection rules.
*   **waf:phase:http_bot:actions**: all actions in WAF bot management rules.
*   **waf:phase:http_bot:http_custom_cc_dev:characteristic:fields**: the statistical objects for the custom device-based throttling in WAF bot management rules.
*   **waf:phase:http_bot:http_custom_cc_ip:characteristic:fields**: the statistical objects for the custom IP address-based throttling in WAF bot management rules.
*   ****waf:phase:http_bot:match:symbols****: the match operators in WAF bot management rules.
*   **waf:phase:http_bot:http_custom_cc:characteristic:fields**: the statistical objects for the custom session-based throttling in WAF bot management rules.
*   **waf:phase:http_bot:match:fields**: the match fields in WAF bot management rules.
*   **waf:phase:http_whitelist:match:symbols**: the match operators in WAF whitelist rules.
*   **waf:phase:http_whitelist:match:fields**: the match fields in WAF whitelist rules.
*   **waf:phase:http_anti_scan:http_directory_traversal:characteristic:fields**: the statistical objects for directory traversal blocking in WAF scan protection rules.
*   **waf:phase:http_anti_scan:http_high_frequency:characteristic:fields**: the statistical objects for high-frequency scanning blocking in WAF scan protection rules.
*   **waf:phase:http_anti_scan:match:symbols**: the match operators in WAF scan protection rules.
*   **waf:phase:http_anti_scan:match:fields**: the match fields in WAF scan protection rules.
*   **waf:phase:http_managed:actions**: the actions in WAF managed rules.
*   **waf:phase:http_managed:group:reference:ids**: the referenced rule groups in WAF managed rules.
*   **waf:phase:http_ratelimit:actions**: the actions in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:ttls**: the action durations in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:intervals**: the statistical durations in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:http_ratelimit:characteristic:fields**: the match characteristics in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:match:symbols**: the match operators in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:match:fields**: the match fields in WAF rate limiting rules.
*   **waf:phase:http_custom:actions**: the actions in custom WAF rules.
*   **waf:phase:http_custom:match:symbols**: the match operators in custom WAF rules.
*   **waf:phase:http_custom:match:fields**: the match fields in custom WAF rules.
*   **waiting_room|queuing_method**: the queuing method in Waiting Room.
*   **origin_rules|origin_scheme**: the origin protocol in origin rules.
*   **origin_rules|origin_sni**: the origin Server Name Indication (SNI) in origin rules.
*   **origin_rules|origin_host**: the origin host in origin rules.
*   **fourlayeracceleration**: TCP/UDP proxy.
*   **rtlog_service**: the availability to collect real-time logs.
*   **dashboard_traffic**: the value-added capability of traffic analytics.
*   **custom_name_server**: the availability to configure custom nameservers.
*   **waf:phase:http_bot:enable**: the availability to enable WAF bot management.
*   **waf:phase:http_whitelist:enable**: the availability to configure WAF whitelist rules.
*   **instantlog**: the availability to collect instant logs.
*   **waf:phase:http_anti_scan:enable**: the availability to enable WAF scan protection.
*   **waf:phase:http_managed:group:reference:enable**: the availability to configure reference rule groups in WAF managed rules.
*   **waf:phase:http_managed:enable**: the availability to configure WAF managed rules.
*   **waf:phase:http_ratelimit:on_hit:enable**: the availability to configure whether to apply rate limiting to all requests that hit the cache.
*   **ddos**: DDoS mitigation.
*   **waf:phase:http_ratelimit:enable**: the availability to configure WAF rate limiting.
*   **waf:phase:http_custom:enable**: the availability to configure custom WAF rules.
*   **waf:phase:all:page:reference:enable**: the availability to configure custom error pages.
*   **rules_support_regex**: the support for regular expressions in rules engine.
*   **waiting_room_event**: scheduled events in Waiting Room.
*   **waiting_room_rule**: the availability to allow requests to bypass the waiting room.
*   **waiting_room|json_response**: the availability to enable JSON response in Waiting Room.
*   **waiting_room|disable_session_renewal**: the availability to disable session renewal in Waiting Room.
*   **origin_rules|dns_record**: DNS records in origin rules.
*   **managed_transforms|add_client_geolocation_headers**: the availability to configure whether to add geolocation headers in transform rules.
*   **tiered_cache|regional_enable**: regional tiered cache.
*   **real_client_ip_header**: the availability to configure whether to add the real IP address of a client to the request header.
*   **data_timerange**: minute-level time range for data query.
*   **cache_rules|edge_cache_ttl**: POP cache TTL.
*   **cache_rules|browser_cache_ttl**: browser cache TTL.
*   **fourLayerRecordCount**: the maximum number of records of websites for which TCP/UDP acceleration is enabled.
*   **waitingroomRuleCount**: the maximum number of rules per waiting room.
*   **waitingroomEventCount**: the maximum number of events per waiting room.
*   **waitingroom_custom_pathhost**: the availability to configure the hostname and path in Waiting Room.
*   **er_routers**: Edge Routine routes.
*   **cache_rules|rule_quota**: the maximum number of cache rules.
*   **configuration_rules|rule_quota**: the maximum number of configuration rules.
*   **redirect_rules|rule_quota**: the redirect rules.
*   **compression_rules|rule_quota**: the maximum number of compression rules.
*   **origin_rules|rule_quota**: the maximum number of origin rules.
*   **waf:phase:http_bot:rulesets_per_instance:less_than_or_equal**: the maximum number of rulesets in WAF bot management per plan.
*   **waf:phase:http_whitelist:rules_per_instance:less_than_or_equal**: the maximum number of WAF whitelist rules per plan.
*   **rtlog_quota**: the maximum number of real-time log delivery tasks.
*   **waf:phase:http_anti_scan:rulesets_per_instance:less_than_or_equal**: the maximum number of rulesets in WAF scan protection per plan.
*   **ddos_instance**: the number of Anti-DDoS Proxy instances.
*   **waf:phase:http_ratelimit:rules_per_instance:less_than_or_equal**: the maximum number of WAF rate limiting rules.
*   **waf:phase:http_custom:rules_per_instance:less_than_or_equal**: the maximum number of custom WAF rules per plan.
*   **ruleNestedConditionalCount**: the number of nested layers in a rule.
*   **waiting_room_rule**: Waiting Room.
*   **transition_rule**: the maximum number of transform rules.
*   **customHttpCert**: the maximum number of custom certificates.
*   **free_cert**: the maximum number of free certificates.
*   **preload**: prefetch.
*   **refresh_cache_tag**: purge by cache tag.
*   **refresh_ignore_param**: purge by URL with specified parameters ignored.
*   **refresh_directory**: purge by directory.
*   **refresh_hostname**: purge by hostname.
*   **refresh_all**: purge all cache.
*   **refresh_file**: purge by URL.
*   **wildcard**: the maximum number of wildcard domains.
*   **recordCount**: the maximum number of Layer 7 records.
*   **siteCount**: the maximum number of websites that can be associated with the plan.
*   **https|rule_quota**: the maximum number of SSL/TLS rules.

This parameter is required.', example='preload, free_cert'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='2882900****', nullable=false),
}

model ListInstanceQuotasResponseBody = {
  instanceId?: string(name='InstanceId', description='The plan ID.', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', description='The quota name.', example='customHttpCert'),
      quotaValue?: string(name='QuotaValue', description='The quota value.', example='10'),
      quotaValueType?: string(name='QuotaValueType', description='The threshold type of the quota. Valid values:

*   value: enumerates the values of the quota.
*   bool: specifies whether the quota is available.
*   num: the upper limit of the quota.
*   range: the value range for the quota.
*   custom: other types than the preceding four quota threshold types.', example='bool'),
    }
  ](name='Quotas', description='The quotas in the plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
  status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.', example='online'),
}

model ListInstanceQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasResponseBody(name='body'),
}

/**
 * @summary Queries the quota details in a subscription plan.
 *
 * @param request ListInstanceQuotasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceQuotasResponse
 */
@context("listInstanceQuotasWithContext")
async function listInstanceQuotasWithOptions(request: ListInstanceQuotasRequest, runtime: $RuntimeOptions): ListInstanceQuotasResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListInstanceQuotas',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the quota details in a subscription plan.
 *
 * @param request ListInstanceQuotasRequest
 * @return ListInstanceQuotasResponse
 */
async function listInstanceQuotas(request: ListInstanceQuotasRequest): ListInstanceQuotasResponse {
  var runtime = new $RuntimeOptions{};
  return listInstanceQuotasWithOptions(request, runtime);
}

model ListInstanceQuotasWithUsageRequest {
  instanceId?: string(name='InstanceId', description='The plan ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='sp-xcdn-96wblslz****'),
  quotaNames?: string(name='QuotaNames', description='The quota names in the plan. Separate the quota names with commas (,). You can query up to 10 quota names at a time. Valid values:

*   **customHttpCert**: the custom certificates.
*   **transition_rule**: the transform rules.
*   **waiting_room**: the waiting rooms.
*   **https|rule_quota**: the SSL/TLS rules.
*   **cache_rules|rule_quota**: the cache rules.
*   **configuration_rules|rule_quota**: the configuration rules.
*   **redirect_rules|rule_quota**: the redirect rules.
*   **compression_rules|rule_quota**: the compression rules.
*   **origin_rules|rule_quota**: the origin rules.

This parameter is required.', example='customHttpCert'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1232223****', nullable=false),
}

model ListInstanceQuotasWithUsageResponseBody = {
  instanceId?: string(name='InstanceId', description='The plan ID.[](~~2850189~~)', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', description='The quota name.', example='redirect_rules|rule_quota'),
      quotaValue?: string(name='QuotaValue', description='The quota value.', example='10'),
      siteUsage?: [ 
        {
          siteId?: long(name='SiteId', description='The website ID.', example='34818329392****'),
          siteName?: string(name='SiteName', description='The website name.', example='test.top'),
          siteUsage?: string(name='SiteUsage', description='The quota usage of the website.', example='1'),
        }
      ](name='SiteUsage', description='The usage of the quota in each website associated with the plan.'),
      usage?: string(name='Usage', description='The quota usage.', example='3'),
    }
  ](name='Quotas', description='The quotas and their actual usage in the plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.', example='online'),
}

model ListInstanceQuotasWithUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasWithUsageResponseBody(name='body'),
}

/**
 * @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
 *
 * @param request ListInstanceQuotasWithUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceQuotasWithUsageResponse
 */
@context("listInstanceQuotasWithUsageWithContext")
async function listInstanceQuotasWithUsageWithOptions(request: ListInstanceQuotasWithUsageRequest, runtime: $RuntimeOptions): ListInstanceQuotasWithUsageResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListInstanceQuotasWithUsage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
 *
 * @param request ListInstanceQuotasWithUsageRequest
 * @return ListInstanceQuotasWithUsageResponse
 */
async function listInstanceQuotasWithUsage(request: ListInstanceQuotasWithUsageRequest): ListInstanceQuotasWithUsageResponse {
  var runtime = new $RuntimeOptions{};
  return listInstanceQuotasWithUsageWithOptions(request, runtime);
}

model ListKvsRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreatevNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  pageNumber?: int32(name='PageNumber', description='The page number. The product of PageNumber and PageSize cannot exceed 50,000.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 50. Maximum value: 100.', example='50'),
  prefix?: string(name='Prefix', description='The prefix to query.', example='prefix-'),
}

model ListKvsResponseBody = {
  keys?: [ 
    {
      name?: string(name='Name', description='The key name.', example='Key1'),
      updateTime?: string(name='UpdateTime', description='The time when the key was last updated.', example='2021-12-13T07:46:03Z'),
    }
  ](name='Keys', description='The key-value pairs.'),
  pageNumber?: int32(name='PageNumber', description='The total number of pages returned.', example='100'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1024'),
}

model ListKvsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListKvsResponseBody(name='body'),
}

/**
 * @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
 *
 * @param request ListKvsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListKvsResponse
 */
@context("listKvsWithContext")
async function listKvsWithOptions(request: ListKvsRequest, runtime: $RuntimeOptions): ListKvsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListKvs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
 *
 * @param request ListKvsRequest
 * @return ListKvsResponse
 */
async function listKvs(request: ListKvsRequest): ListKvsResponse {
  var runtime = new $RuntimeOptions{};
  return listKvsWithOptions(request, runtime);
}

model ListListsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  queryArgs?: {
    desc?: boolean(name='Desc', description='Specifies whether to sort the returned data in descending order.', example='true'),
    descriptionLike?: string(name='DescriptionLike', description='The list description for fuzzy search.', example='a custom list'),
    idLike?: string(name='IdLike', description='The list ID for fuzzy search.', example='40000001'),
    itemLike?: string(name='ItemLike', description='The list content for fuzzy search.', example='10.1.1.1'),
    kind?: string(name='Kind', description='The type of the custom list.', example='ip'),
    nameItemLike?: string(name='NameItemLike', description='The list name and content for fuzzy search.', example='10.1.1.1'),
    nameLike?: string(name='NameLike', description='The list name for fuzzy search.', example='example'),
    orderBy?: string(name='OrderBy', description='The column by which you want to sort the returned data.', example='id'),
  }(name='QueryArgs', description='The query arguments in the JSON format, which contain filter conditions.', example='ListLists'),
}

model ListListsShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  queryArgsShrink?: string(name='QueryArgs', description='The query arguments in the JSON format, which contain filter conditions.', example='ListLists'),
}

model ListListsResponseBody = {
  lists?: [ 
    {
      description?: string(name='Description', description='The list description.', example='a custom list'),
      id?: long(name='Id', description='The ID of the custom list.[](~~2850217~~)', example='40000001'),
      kind?: string(name='Kind', description='The list type.', example='ip'),
      length?: long(name='Length', description='The length of the list information array, which indicates how many items the list contains.', example='100'),
      name?: string(name='Name', description='The list name.', example='example'),
      updateTime?: string(name='UpdateTime', description='The time when the list was last modified.', example='2024-01-01T00:00:00Z'),
    }
  ](name='Lists', description='The array that contains list information, including list data after paging.'),
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='The total number of filtered lists.', example='5'),
  usage?: long(name='Usage', description='The number of created lists.', example='10'),
}

model ListListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListsResponseBody(name='body'),
}

/**
 * @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
 *
 * @param tmpReq ListListsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListListsResponse
 */
@context("listListsWithContext")
async function listListsWithOptions(tmpReq: ListListsRequest, runtime: $RuntimeOptions): ListListsResponse {
  tmpReq.validate();
  var request = new ListListsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLists',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
 *
 * @param request ListListsRequest
 * @return ListListsResponse
 */
async function listLists(request: ListListsRequest): ListListsResponse {
  var runtime = new $RuntimeOptions{};
  return listListsWithOptions(request, runtime);
}

model ListLoadBalancerOriginStatusRequest {
  loadBalancerIds?: string(name='LoadBalancerIds', description='Load balancer ID. When querying multiple load balancers, separate the IDs with commas. A maximum of 100 load balancer IDs can be passed at once. Load balancer IDs can be obtained by calling the [ListLoadBalancers](https://help.aliyun.com/document_detail/2868897.html) interface.

This parameter is required.', example='99874066052****,100892832360****'),
  poolType?: string(name='PoolType', description='Source address pool type. Various source address pools are configured under the load balancer, including default pools, fallback pools, and primary region pools. Only the status of origins in the default pool affects the status of the load balancer itself. Passing `default_pool` means only querying the status of origins in the default source address pool under the load balancer.', example='default_pool'),
  siteId?: long(name='SiteId', description='Site ID.

This parameter is required.', example='1159101787****'),
}

model ListLoadBalancerOriginStatusResponseBody = {
  originStatus?: [ 
    {
      loadBalancerId?: long(name='LoadBalancerId', description='ID of the load balancer.', example='99874066052****'),
      originId?: long(name='OriginId', description='ID of the origin.', example='99750209487****'),
      poolId?: long(name='PoolId', description='ID of the source address pool.', example='99750209487****'),
      poolType?: string(name='PoolType', description='The origin pool to which the source belongs, under this load balancer. Only \\\\"default_pool\\\\" (default address pool) will be displayed; other types will return an empty string.', example='default_pool'),
      reason?: string(name='Reason', description='Reason for the probe failure.', example='TCP connection error'),
      status?: string(name='Status', description='Status of the origin:
- Healthy(healthy): The probe result is available.
- Unhealthy(unhealthy): The probe result is unavailable.
- Unknown(unknown): Unknown, the monitor has not yet probed.
- Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.', example='healthy'),
    }
  ](name='OriginStatus', description='List of origin statuses under the load balancer.'),
  requestId?: string(name='RequestId', description='Request ID, used for tracking the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model ListLoadBalancerOriginStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancerOriginStatusResponseBody(name='body'),
}

/**
 * @summary Query the status of origins in load balancers
 *
 * @description Query the status of origins under load balancers. You can pass multiple load balancer IDs at once, separated by commas. This is for load balancers that have monitors configured. It will probe the origins in the source address pools used by the load balancers and record the current status of each origin.
 * - Healthy(healthy): The probe result is available.
 * - Unhealthy(unhealthy): The probe result is unavailable.
 * - Unknown(unknown): Unknown, the monitor has not yet probed.
 * - Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.
 *
 * @param request ListLoadBalancerOriginStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLoadBalancerOriginStatusResponse
 */
@context("listLoadBalancerOriginStatusWithContext")
async function listLoadBalancerOriginStatusWithOptions(request: ListLoadBalancerOriginStatusRequest, runtime: $RuntimeOptions): ListLoadBalancerOriginStatusResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLoadBalancerOriginStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the status of origins in load balancers
 *
 * @description Query the status of origins under load balancers. You can pass multiple load balancer IDs at once, separated by commas. This is for load balancers that have monitors configured. It will probe the origins in the source address pools used by the load balancers and record the current status of each origin.
 * - Healthy(healthy): The probe result is available.
 * - Unhealthy(unhealthy): The probe result is unavailable.
 * - Unknown(unknown): Unknown, the monitor has not yet probed.
 * - Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.
 *
 * @param request ListLoadBalancerOriginStatusRequest
 * @return ListLoadBalancerOriginStatusResponse
 */
async function listLoadBalancerOriginStatus(request: ListLoadBalancerOriginStatusRequest): ListLoadBalancerOriginStatusResponse {
  var runtime = new $RuntimeOptions{};
  return listLoadBalancerOriginStatusWithOptions(request, runtime);
}

model ListLoadBalancerRegionsRequest {
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='1024'),
}

model ListLoadBalancerRegionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='Page number', example='1'),
  pageSize?: int32(name='PageSize', description='Number of records per page', example='1024'),
  regions?: [ 
    {
      regionCnName?: string(name='RegionCnName', description='Primary region Chinese full name', example='东南亚'),
      regionCode?: string(name='RegionCode', description='Primary region code', example='SEAS'),
      regionEnName?: string(name='RegionEnName', description='Primary region English full name', example='South East Asia'),
      subRegions?: [ 
        {
          subRegionCnName?: string(name='SubRegionCnName', description='Secondary region Chinese full name', example='印度尼西亚'),
          subRegionCode?: string(name='SubRegionCode', description='Secondary region code', example='ID'),
          subRegionEnName?: string(name='SubRegionEnName', description='Secondary region English full name', example='Indonesia'),
        }
      ](name='SubRegions', description='List of secondary region information'),
    }
  ](name='Regions', description='List of region information'),
  requestId?: string(name='RequestId', description='Request ID', example='81A5E222-24BF-17EF-9E80-A68D9B8F363D'),
  totalCount?: int32(name='TotalCount', description='Total number of records', example='12'),
  totalPage?: int32(name='TotalPage', description='Total number of pages', example='1'),
}

model ListLoadBalancerRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancerRegionsResponseBody(name='body'),
}

/**
 * @summary Query Load Balancer Region List
 *
 * @description When creating a load balancer \\"based on country/region scheduling\\" strategy through OpenAPI, use the code of primary or secondary regions to represent traffic from this geographical area.
 *
 * @param request ListLoadBalancerRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLoadBalancerRegionsResponse
 */
@context("listLoadBalancerRegionsWithContext")
async function listLoadBalancerRegionsWithOptions(request: ListLoadBalancerRegionsRequest, runtime: $RuntimeOptions): ListLoadBalancerRegionsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLoadBalancerRegions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Load Balancer Region List
 *
 * @description When creating a load balancer \\"based on country/region scheduling\\" strategy through OpenAPI, use the code of primary or secondary regions to represent traffic from this geographical area.
 *
 * @param request ListLoadBalancerRegionsRequest
 * @return ListLoadBalancerRegionsResponse
 */
async function listLoadBalancerRegions(request: ListLoadBalancerRegionsRequest): ListLoadBalancerRegionsResponse {
  var runtime = new $RuntimeOptions{};
  return listLoadBalancerRegionsWithOptions(request, runtime);
}

model ListLoadBalancersRequest {
  matchType?: string(name='MatchType', description='The name matching strategy when querying by name:

- fuzzy: Fuzzy match;
- exact: Exact match, equivalent to an equality query.', example='fuzzy'),
  name?: string(name='Name', description='The name of the load balancer, which can be used to query by name.', example='lb.example.com'),
  orderBy?: string(name='OrderBy', description='The sorting field. Currently, only sorting by id is supported. \\\\"id\\\\" indicates ascending order by id, and \\\\"-id\\\\" indicates descending order by id. The id size is positively correlated with the creation time. If not provided, it defaults to descending order by id.', example='id'),
  pageNumber?: int32(name='PageNumber', description='The page number for paginated queries.', example='2'),
  pageSize?: int32(name='PageSize', description='The page size for paginated queries, with a value range of 1-500.', example='20'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='21655860979****'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      adaptiveRouting?: {
        failoverAcrossPools?: boolean(name='FailoverAcrossPools', description='Whether to fail over across pools.

- true: Yes.
- false: No.', example='true'),
      }(name='AdaptiveRouting', description='Cross-pool failover configuration.'),
      defaultPools?: [ long ](name='DefaultPools', description='List of default address pool IDs.'),
      description?: string(name='Description', description='The description of the load balancer.', example='test'),
      enabled?: boolean(name='Enabled', description='Whether the load balancer is enabled.

- true: Enabled.
- false: Not enabled.', example='false'),
      fallbackPool?: long(name='FallbackPool', description='The fallback pool ID, to which traffic will be redirected if all other pools are unavailable.', example='96228666776****'),
      id?: long(name='Id', description='The unique identifier ID of the load balancer.', example='998676487607104'),
      monitor?: {
        consecutiveDown?: int32(name='ConsecutiveDown', description='The number of consecutive failed probes required to consider the target unhealthy, such as 5.', example='5'),
        consecutiveUp?: int32(name='ConsecutiveUp', description='The number of consecutive successful probes required to consider the target healthy, such as 3.', example='3'),
        expectedCodes?: string(name='ExpectedCodes', description='The expected status codes, such as 200,202, indicating successful HTTP responses.', example='200,202'),
        followRedirects?: boolean(name='FollowRedirects', description='Whether to follow redirects.

- true: Yes.
- false: No.', example='true'),
        header?: any(name='Header', description='The header information included in the probe, such as HTTP headers.', example='{
        "host": [
            "example1.com",
            "example2.com"
        ]
    }'),
        interval?: int32(name='Interval', description='The interval for the health check, in seconds.', example='60'),
        method?: string(name='Method', description='The method for the health check.', example='GET'),
        monitoringRegion?: string(name='MonitoringRegion'),
        path?: string(name='Path', description='The path.', example='/'),
        port?: int32(name='Port', description='The target port.', example='80'),
        timeout?: int32(name='Timeout', description='Application health check timeout, in seconds.', example='5'),
        type?: string(name='Type', description='The type of monitor protocol, such as HTTP, used for health checks. When the value is `off`, it indicates that no check will be performed.', example='HTTP'),
      }(name='Monitor', description='Monitor configuration.'),
      name?: string(name='Name', description='The name of the load balancer.', example='lb.example.com'),
      randomSteering?: {
        defaultWeight?: int32(name='DefaultWeight', description='Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight coefficient. The weight coefficient represents the proportion of relative traffic distribution.', example='50'),
        poolWeights?: map[string]int32(name='PoolWeights', description='Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight coefficient.'),
      }(name='RandomSteering', description='Weighted round-robin configuration, used to control the traffic distribution weights among different pools.'),
      regionPools?: any(name='RegionPools', description='Address pools corresponding to primary regions.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
      rules?: [ 
        {
          fixedResponse?: {
            contentType?: string(name='ContentType', description='The Content-Type field in the HTTP Header.', example='application/json'),
            location?: string(name='Location', description='The location field in the HTTP response.', example='http://www.example.com/index.html'),
            messageBody?: string(name='MessageBody', description='The response body value.', example='Hello World.'),
            statusCode?: int32(name='StatusCode', description='Status code.', example='200'),
          }(name='FixedResponse', description='Executes a specified response after matching the rule.'),
          overrides?: any(name='Overrides', description='Modifies the corresponding load balancer configuration after matching the rule. The fields in this configuration will override the corresponding fields in the load balancer configuration.', example='{
            "adaptive_routing": {
                "failover_across_pools": true
            },
            "sub_region_pools": {
                "GB": [
                    96228666776****
                ],
                "US": [
                    96228666776****
                ]
            },
            "default_pools": [
                96228666776****,
                96228666776****
            ],
            "fallback_pool": 96228666776****,
            "location_strategy": {
                "mode": "resolver_ip",
                "prefer_ecs": "always"
            },
            "random_steering": {
                "default_weight": 30,
                "pool_weights": {
                    "96228666776****": 70,
                    "96228666776****": 80
                }
            },
            "region_pools": {
                "ENAM": [
                    96228666776****,
                    92843536908****
                ],
                "WNAM": [
                    92843536908****
                ]
            },
            "session_affinity": "cookie",
            "session_affinity_attributes": {
                "drain_duration": 100,
                "headers": ["none"],
                "require_all_headers": false,
                "samesite": "Auto",
                "secure": "Auto",
                "zero_downtime_failover": "sticky"
            },
            "session_affinity_ttl": 1800,
            "steering_policy": "dynamic_latency",
            "ttl": 30
        }'),
          rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding global configurations. There are two usage scenarios: 
- Match all incoming requests: set the value to true 
- Match specific requests: set the value to a custom expression, for example: (http.host eq "video.example.com")', example='http.request.uri.path contains "/testing"'),
          ruleEnable?: string(name='RuleEnable', description='The switch for the rule. This parameter is not required when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
          ruleName?: string(name='RuleName', description='The name of the rule. This parameter is not required when adding a global configuration.', example='r2'),
          sequence?: int32(name='Sequence', description='The execution order of the rule. The higher the value, the higher the priority.', example='1'),
          terminates?: boolean(name='Terminates', description='Whether to terminate the execution of subsequent rules.

- true: Yes.
- false: No, which is the default value.', example='true'),
        }
      ](name='Rules', description='List of rule configurations, used to define behaviors under specific conditions.'),
      sessionAffinity?: string(name='SessionAffinity', description='Session persistence, with possible values:
- off: Not enabled.
- ip: Session persistence by IP.
- cookie: Session persistence by cookie.', example='ip'),
      siteId?: long(name='SiteId', description='The site ID to which the load balancer belongs.', example='1159101787****'),
      status?: string(name='Status', description='The status of the load balancer.', example='healthy'),
      steeringPolicy?: string(name='SteeringPolicy', description='The load balancing policy.', example='order'),
      subRegionPools?: any(name='SubRegionPools', description='Address pools corresponding to secondary regions. When multiple secondary regions share a set of address pools, the keys can be concatenated with commas.', example='{"AL,MO": [92298024898****],"CN-SH,CN-SX,CN-SC":[92304347804****,92843536908****]}'),
      ttl?: int32(name='Ttl', description='The TTL value, which is the DNS record\\\\"s time to live, with a default value of 30.', example='30'),
    }
  ](name='LoadBalancers', description='An array format that returns the list of load balancers.'),
  pageNumber?: int32(name='PageNumber', description='Page number, same as the PageNumber in the request parameters.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='Total number of items.', example='100'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='10'),
}

model ListLoadBalancersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancersResponseBody(name='body'),
}

/**
 * @summary Query the list of load balancers
 *
 * @param request ListLoadBalancersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLoadBalancersResponse
 */
@context("listLoadBalancersWithContext")
async function listLoadBalancersWithOptions(request: ListLoadBalancersRequest, runtime: $RuntimeOptions): ListLoadBalancersResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLoadBalancers',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the list of load balancers
 *
 * @param request ListLoadBalancersRequest
 * @return ListLoadBalancersResponse
 */
async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  var runtime = new $RuntimeOptions{};
  return listLoadBalancersWithOptions(request, runtime);
}

model ListManagedRulesGroupsRequest {
  pageNumber?: int32(name='PageNumber', description='Page number, used to specify the page number for pagination queries.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, used to specify the number of items per page for pagination queries.', example='20'),
}

model ListManagedRulesGroupsResponseBody = {
  managedRulesGroups?: [ 
    {
      name?: string(name='Name', description='Name of the managed rule group.', example='example'),
      ruleCount?: long(name='RuleCount', description='Number of rules within the managed rule group.', example='1000'),
    }
  ](name='ManagedRulesGroups', description='List of managed rule group information.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='Total number of records after filtering.', example='5'),
}

model ListManagedRulesGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManagedRulesGroupsResponseBody(name='body'),
}

/**
 * @summary List Custom Managed Rule Groups
 *
 * @param request ListManagedRulesGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListManagedRulesGroupsResponse
 */
@context("listManagedRulesGroupsWithContext")
async function listManagedRulesGroupsWithOptions(request: ListManagedRulesGroupsRequest, runtime: $RuntimeOptions): ListManagedRulesGroupsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListManagedRulesGroups',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List Custom Managed Rule Groups
 *
 * @param request ListManagedRulesGroupsRequest
 * @return ListManagedRulesGroupsResponse
 */
async function listManagedRulesGroups(request: ListManagedRulesGroupsRequest): ListManagedRulesGroupsResponse {
  var runtime = new $RuntimeOptions{};
  return listManagedRulesGroupsWithOptions(request, runtime);
}

model ListNetworkOptimizationsRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='3528160969****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule-based configurations. The value range is as follows:

- global: Query global configuration.
- rule: Query rule-based configuration.

This parameter is optional; if not provided, it does not distinguish between global and rule-based configurations.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number, defaulting to 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page, with a maximum of 500. Defaults to 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name, which can be used to find the rule with the specified name.', example='test'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1231231221****'),
  siteVersion?: int32(name='SiteVersion', description='Site version number. For sites with version management enabled, this parameter can specify the site version for which the configuration takes effect, defaulting to version 0.', example='1'),
}

model ListNetworkOptimizationsResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='395386449776640'),
      configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule-based configurations. The value range is as follows:

- global: Query global configuration.
- rule: Query rule-based configuration.', example='global'),
      grpc?: string(name='Grpc', description='Whether to enable GRPC, default is off. The value range is:
- on: enabled.
- off: disabled.', example='on'),
      http2Origin?: string(name='Http2Origin', description='Whether to enable HTTP2 origin, defaulting to off. The value range is as follows:

- on: Enabled.
- off: Disabled.', example='on'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. The value range is as follows:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Site configuration version number. For sites with version management enabled, this parameter can specify the site version for which the configuration takes effect, defaulting to version 0.', example='1'),
      smartRouting?: string(name='SmartRouting', description='Whether to enable smart routing service, defaulting to off. The value range is as follows:
- on: Enabled.
- off: Disabled.', example='on'),
      uploadMaxFilesize?: string(name='UploadMaxFilesize', description='Maximum file size for upload, in MB. The value range is 100 to 500.', example='500'),
      websocket?: string(name='Websocket', description='Whether to enable Websocket, enabled by default. Value range: 
- on: Enabled. 
- off: Disabled.', example='on'),
    }
  ](name='Configs', description='Response body configurations.'),
  pageNumber?: int32(name='PageNumber', description='The current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The size of the page.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', description='Total number of records.', example='100'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='2'),
}

model ListNetworkOptimizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkOptimizationsResponseBody(name='body'),
}

/**
 * @summary Query multiple network optimization configurations
 *
 * @param request ListNetworkOptimizationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNetworkOptimizationsResponse
 */
@context("listNetworkOptimizationsWithContext")
async function listNetworkOptimizationsWithOptions(request: ListNetworkOptimizationsRequest, runtime: $RuntimeOptions): ListNetworkOptimizationsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNetworkOptimizations',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query multiple network optimization configurations
 *
 * @param request ListNetworkOptimizationsRequest
 * @return ListNetworkOptimizationsResponse
 */
async function listNetworkOptimizations(request: ListNetworkOptimizationsRequest): ListNetworkOptimizationsResponse {
  var runtime = new $RuntimeOptions{};
  return listNetworkOptimizationsWithOptions(request, runtime);
}

model ListOriginCaCertificatesRequest {
  pageNumber?: long(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: **20**. Valid values: 1 to 500.', example='10'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model ListOriginCaCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='Page number, default is 1 if not provided.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  result?: [ 
    {
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
      fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
      id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
      issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-11-26T16:00:00Z'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1d**'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.', example='OK'),
      type?: string(name='Type', description='The certificate type.
*   upload: custom certificate that you upload', example='upload'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
    }
  ](name='Result', description='Details of the certificates.'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='20'),
}

model ListOriginCaCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOriginCaCertificatesResponseBody(name='body'),
}

/**
 * @summary 查询源服务器CA证书列表
 *
 * @param request ListOriginCaCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOriginCaCertificatesResponse
 */
@context("listOriginCaCertificatesWithContext")
async function listOriginCaCertificatesWithOptions(request: ListOriginCaCertificatesRequest, runtime: $RuntimeOptions): ListOriginCaCertificatesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOriginCaCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询源服务器CA证书列表
 *
 * @param request ListOriginCaCertificatesRequest
 * @return ListOriginCaCertificatesResponse
 */
async function listOriginCaCertificates(request: ListOriginCaCertificatesRequest): ListOriginCaCertificatesResponse {
  var runtime = new $RuntimeOptions{};
  return listOriginCaCertificatesWithOptions(request, runtime);
}

model ListOriginClientCertificatesRequest {
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456789****'),
}

model ListOriginClientCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='3558df77-8a7a-4060-a900-2d7949403836'),
  result?: [ 
    {
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
      fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
      hostnames?: [ string ](name='Hostnames', description='The domain names to associate.'),
      id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
      issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='DigiCert'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1d**'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.', example='OK'),
      type?: string(name='Type', description='The certificate type.
*   upload: custom certificate that you upload', example='upload'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
    }
  ](name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='20'),
}

model ListOriginClientCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOriginClientCertificatesResponseBody(name='body'),
}

/**
 * @summary 查询域名回源客户端证书列表
 *
 * @param request ListOriginClientCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOriginClientCertificatesResponse
 */
@context("listOriginClientCertificatesWithContext")
async function listOriginClientCertificatesWithOptions(request: ListOriginClientCertificatesRequest, runtime: $RuntimeOptions): ListOriginClientCertificatesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOriginClientCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询域名回源客户端证书列表
 *
 * @param request ListOriginClientCertificatesRequest
 * @return ListOriginClientCertificatesResponse
 */
async function listOriginClientCertificates(request: ListOriginClientCertificatesRequest): ListOriginClientCertificatesResponse {
  var runtime = new $RuntimeOptions{};
  return listOriginClientCertificatesWithOptions(request, runtime);
}

model ListOriginPoolsRequest {
  matchType?: string(name='MatchType', description='Type of name match query, supporting the following two types, with exact match as the default.

- fuzzy: Fuzzy query.
- exact: Exact query.', example='exact'),
  name?: string(name='Name', description='Name of the origin pool.', example='pool1'),
  orderBy?: string(name='OrderBy', description='Sorting, supports ascending and descending order by ID, default is descending by ID, which is positively correlated with creation time.

- -id: Sort by ID in descending order.
- id: Sort by ID in ascending order.', example='id'),
  pageNumber?: int32(name='PageNumber', description='Page number, default value is 1.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, an integer greater than 0, with a maximum of 500. If the value exceeds 500, it will be set to 500.', example='20'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='151538882642832'),
}

model ListOriginPoolsResponseBody = {
  originPools?: [ 
    {
      enabled?: boolean(name='Enabled', description='Whether the origin pool is enabled:

- true: Enabled;
- false: Disabled.', example='false'),
      id?: long(name='Id', description='ID of the origin pool.', example='1038520525196928'),
      name?: string(name='Name', description='Name of the origin pool, unique within a site.', example='pool1'),
      origins?: [ 
        {
          address?: string(name='Address', description='Origin address, e.g., www.example.com.', example='www.example.com'),
          authConf?: {
            accessKey?: string(name='AccessKey', description='The AccessKey required for private authentication.', example='yourAccessKeyID'),
            authType?: string(name='AuthType', description='Authentication type.

- public: Public read/write, used when the origin is OSS or S3 and it is set to public read/write;
- private_same_account: Private same account, used when the origin is OSS and the authentication type is private within the same account;
- private_cross_account: Private cross-account, used when the origin is OSS and the authentication type is private across accounts;
- private: Used when the origin is S3 and the authentication type is private.', example='public'),
            region?: string(name='Region', description='The Region of the origin required when the origin is AWS S3.', example='us-east-1'),
            secretKey?: string(name='SecretKey', description='The SecretKey required for private authentication.', example='yourAccessKeySecret'),
            version?: string(name='Version', description='The signature version required when the origin is AWS S3.', example='v2'),
          }(name='AuthConf', description='Authentication information. When the origin is OSS or S3 and requires authentication, you need to provide related configuration information for authentication.'),
          enabled?: boolean(name='Enabled', description='Whether the origin is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
          header?: any(name='Header', description='The request header to be carried during back-to-origin, only supports Host.', example='{
        "Host": [
          "example.com"
        ]
      }'),
          id?: long(name='Id', description='Origin ID.', example='997502094872132'),
          name?: string(name='Name', description='Origin name.', example='origin1'),
          type?: string(name='Type', description='Origin type:
- ip_domain: IP or domain type origin; 
- OSS: OSS address origin; 
- S3: AWS S3 origin.', example='S3'),
          weight?: int32(name='Weight', description='Weight, an integer between 0 and 100.', example='50'),
        }
      ](name='Origins', description='Information about the origins added to the origin pool.'),
      recordName?: string(name='RecordName', description='Domain name assigned to the origin pool, which can be used as the origin address for records under the site.', example='pool1.example.com'),
      referenceLBCount?: int32(name='ReferenceLBCount', description='Number of load balancers that reference this origin pool.', example='5'),
      references?: {
        dnsRecords?: [ 
          {
            id?: long(name='Id', description='Record ID.', example='1042852886352704'),
            name?: string(name='Name', description='Record name.', example='www.example.com'),
          }
        ](name='DnsRecords', description='使用此源地址池为源站的七层记录列表。'),
        IPARecords?: [ 
          {
            id?: long(name='Id', description='Record ID.', example='1042852886352704'),
            name?: string(name='Name', description='Record name.', example='ipa.example.com'),
          }
        ](name='IPARecords', description='List of layer 4 records that use this origin pool as the origin.'),
        loadBalancers?: [ 
          {
            id?: long(name='Id', description='ID of the load balancer.', example='998740660522624'),
            name?: string(name='Name', description='Name of the load balancer.', example='lb1.example.com'),
          }
        ](name='LoadBalancers', description='List of load balancers using this origin pool.'),
      }(name='References', description='Reference information for the origin pool. The origin pool is considered referenced when it is configured in a load balancer or set as the origin for a record.'),
      siteId?: long(name='SiteId', description='ID of the site to which the origin pool belongs.', example='216558609793952'),
    }
  ](name='OriginPools', description='List of origin pools.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', description='Total count.', example='16'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='10'),
}

model ListOriginPoolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOriginPoolsResponseBody(name='body'),
}

/**
 * @summary List Origin Pools
 *
 * @param request ListOriginPoolsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOriginPoolsResponse
 */
@context("listOriginPoolsWithContext")
async function listOriginPoolsWithOptions(request: ListOriginPoolsRequest, runtime: $RuntimeOptions): ListOriginPoolsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOriginPools',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List Origin Pools
 *
 * @param request ListOriginPoolsRequest
 * @return ListOriginPoolsResponse
 */
async function listOriginPools(request: ListOriginPoolsRequest): ListOriginPoolsResponse {
  var runtime = new $RuntimeOptions{};
  return listOriginPoolsWithOptions(request, runtime);
}

model ListOriginRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration.
- rule: Query rule configuration.

This parameter is optional; if not provided, it does not distinguish between global and rule configurations.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number, defaulting to 1 if not provided.', example='1'),
  pageSize?: int32(name='PageSize', description='Number of items per page, with a maximum of 500. Defaults to 500 if not provided.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='test'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1234567890123'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site. For sites with version management enabled, this parameter can specify the version of the site for which the configuration is effective, defaulting to version 0.', example='1'),
}

model ListOriginRulesResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='395386449776640'),
      configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration.
- rule: Query rule configuration.', example='global'),
      dnsRecord?: string(name='DnsRecord', description='Rewrite the DNS resolution record for the origin request.', example='test.example.com'),
      follow302Enable?: string(name='Follow302Enable'),
      follow302MaxTries?: string(name='Follow302MaxTries'),
      follow302RetainArgs?: string(name='Follow302RetainArgs'),
      follow302RetainHeader?: string(name='Follow302RetainHeader'),
      follow302TargetHost?: string(name='Follow302TargetHost'),
      originHost?: string(name='OriginHost', description='HOST carried in the origin request.', example='origin.example.com'),
      originHttpPort?: string(name='OriginHttpPort', description='The port of the origin server to access when using the HTTP protocol for origin requests.', example='8080'),
      originHttpsPort?: string(name='OriginHttpsPort', description='The port of the origin server to access when using the HTTPS protocol for origin requests.', example='4433'),
      originMtls?: string(name='OriginMtls', description='mTLS switch. Value range:
- on: Enable.
- off: Disable.', example='on'),
      originReadTimeout?: string(name='OriginReadTimeout'),
      originScheme?: string(name='OriginScheme', description='Protocol used for the origin request. Value range:
- http: Use HTTP protocol for origin.
- https: Use HTTPS protocol for origin.
- follow: Follow the client\\\\"s protocol for origin.', example='http'),
      originSni?: string(name='OriginSni', description='SNI carried in the back-to-origin request.', example='origin.example.com'),
      originVerify?: string(name='OriginVerify', description='Origin certificate verification switch. Value range:
- on: Enable.
- off: Disable.', example='on'),
      range?: string(name='Range', description='Use range slicing to download files from the origin. Value range:
- on: Enable
- off: Disable
- force: Force', example='on'),
      rangeChunkSize?: string(name='RangeChunkSize'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, this parameter can specify the version of the site for which the configuration is effective, defaulting to version 0.', example='1'),
    }
  ](name='Configs', description='Response body configuration.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', description='Total number of records.', example='100'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='2'),
}

model ListOriginRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOriginRulesResponseBody(name='body'),
}

/**
 * @summary Query multiple origin rule configurations
 *
 * @param request ListOriginRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOriginRulesResponse
 */
@context("listOriginRulesWithContext")
async function listOriginRulesWithOptions(request: ListOriginRulesRequest, runtime: $RuntimeOptions): ListOriginRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOriginRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query multiple origin rule configurations
 *
 * @param request ListOriginRulesRequest
 * @return ListOriginRulesResponse
 */
async function listOriginRules(request: ListOriginRulesRequest): ListOriginRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listOriginRulesWithOptions(request, runtime);
}

model ListPagesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1 to 100000**. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
  queryArgs?: {
    nameDescriptionLike?: string(name='NameDescriptionLike'),
  }(name='QueryArgs'),
}

model ListPagesShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1 to 100000**. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
  queryArgsShrink?: string(name='QueryArgs'),
}

model ListPagesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  pages?: [ 
    {
      content?: string(name='Content', description='The Base64-encoded content of the error page. The content type is specified by the Content-Type field.

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
      contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header.

This parameter is required.', example='text/html'),
      description?: string(name='Description', description='The description of the custom error page.', example='a custom deny page'),
      id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
      kind?: string(name='Kind', description='The type of the custom error page.', example='custom'),
      name?: string(name='Name', description='The name of the custom error page.', example='example'),
      updateTime?: string(name='UpdateTime', description='The time when the custom error page was last modified.', example='2024-01-01T00:00:00Z'),
    }
  ](name='Pages', description='The custom error pages. Each element in the array contains error page-specific information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='The number of custom error pages after filtering.', example='10'),
  usage?: long(name='Usage', description='The number of custom error pages that you created.', example='10'),
}

model ListPagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPagesResponseBody(name='body'),
}

/**
 * @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
 *
 * @param tmpReq ListPagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPagesResponse
 */
@context("listPagesWithContext")
async function listPagesWithOptions(tmpReq: ListPagesRequest, runtime: $RuntimeOptions): ListPagesResponse {
  tmpReq.validate();
  var request = new ListPagesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPages',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
 *
 * @param request ListPagesRequest
 * @return ListPagesResponse
 */
async function listPages(request: ListPagesRequest): ListPagesResponse {
  var runtime = new $RuntimeOptions{};
  return listPagesWithOptions(request, runtime);
}

model ListRecordsRequest {
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='10'),
  proxied?: boolean(name='Proxied', description='Filters by whether the record is proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordMatchType?: string(name='RecordMatchType', description='The match mode to search for the record name. Default value: exact. Valid values:

*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **exact**: exact match.
*   **fuzzy**: fuzzy match.', example='fuzzy'),
  recordName?: string(name='RecordName', description='The record name. This parameter specifies a filter condition for the query.', example='www.example.com'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The origin type of the record. Only CNAME records can be filtered by using this field. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.', example='OSS'),
  type?: string(name='Type', description='The DNS record type.', example='CNAME'),
}

model ListRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  records?: [ 
    {
      authConf?: {
        accessKey?: string(name='AccessKey', description='The access key of the account to which the origin server belongs. This value is returned when the SourceType is OSS, and AuthType is private_cross_account, or when the SourceType is S3 and AuthType is private.', example='u0Nkg5gBK***QF5wvKMM504JUHt'),
        authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, the authentication type of the origin must be specified. Valid values:

*   **public**: public read. This value is returned when the origin is a public OSS or S3 bucket.
*   **private**: private read. This value is returned when the origin is a private S3 bucket.
*   **private_same_account**: private read under the same account. This value is returned when the origin is a private OSS bucket in your Alibaba Cloud account.
*   **private_cross_account**: private read across accounts. This value is returned when the origin is a private OSS bucket in a different Alibaba Cloud account.', example='private'),
        region?: string(name='Region', description='The region of the origin. This parameter is returned if the origin type is S3. You can get the region information from the official website of Amazon S3.', example='us-east-1'),
        secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This value is returned when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='VIxuvJSA2S03f***kp208dy5w7'),
        version?: string(name='Version', description='The version of the signature algorithm. This value is returned when the origin type is S3 and AuthType is private. Valid values:

*   **v2**
*   **v4**

If this parameter is left empty, the default value v4 is used.', example='v4'),
      }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
      bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
      comment?: string(name='Comment', description='The comments of the record.', example='this is a remark.'),
      createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      data?: {
        algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Exclusive to CERT and SSHFP records.', example='0'),
        certificate?: string(name='Certificate', description='The public key of the certificate. Exclusive to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Exclusive to SSHFP records.', example='abcdef1234567890'),
        flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed. Valid values: 0 to 255. Exclusive to CAA records.', example='128'),
        keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Exclusive to CERT records.', example='0'),
        matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Exclusive to SMIMEA and TLSA records.', example='0'),
        port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. Exclusive to SRV records.', example='80'),
        priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. Exclusive to MX, SRV, and URI records.', example='0'),
        selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Exclusive to SMIMEA, and TLSA records.', example='0'),
        tag?: string(name='Tag', description='The tag of the record. The Tag of a CAA record indicate its specific type and usage. Exclusive to CAA records.', example='issue'),
        tags?: map[string]any(name='Tags'),
        type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
        usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Exclusive to SMIMEA, and TLSA records.', example='0'),
        value?: string(name='Value', description='Record value or part of the record content. This value is returned when the record is A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, or URI. It has different meanings based on types of records:

*   **A/AAAA**: the IP addresses. IP addresses are separated by commas (,). There is at least one IPv4 address.
*   **CNAME**: the pointed/mapped domain name.
*   **NS**: the nameservers for the domain name.
*   **MX**: a valid domain name of the mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='CNAME'),
        weight?: int32(name='Weight', description='The weight of the record. Valid values: 0 to 65535. Exclusive to SRV and URI records.', example='0'),
      }(name='Data', description='The DNS record information. Different types of records contain different information.', example='{"value":"1.1.1.1"}'),
      hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. Valid values:

*   follow_hostname: matches the requested domain name.
*   follow_origin_domain: matches the origin\\\\"s domain name.', example='follow_origin_domain'),
      proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Valid values:

*   **true**
*   **false**', example='true'),
      recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='a.example.com.cnamezone.com'),
      recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
      recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
      recordSourceType?: string(name='RecordSourceType', description='The origin type for the CNAME record. This parameter is returned when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is returned by default.', example='OSS'),
      recordType?: string(name='RecordType', description='The DNS type of the record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
      siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      ttl?: long(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='30'),
      updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-06-07T10:02:59Z'),
    }
  ](name='Records', description='The DNS record information. The format of this field varies based on the record type. For more information, see Add DNS records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='20'),
}

model ListRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecordsResponseBody(name='body'),
}

/**
 * @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
 *
 * @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
 *
 * @param request ListRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRecordsResponse
 */
@context("listRecordsWithContext")
async function listRecordsWithOptions(request: ListRecordsRequest, runtime: $RuntimeOptions): ListRecordsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
 *
 * @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
 *
 * @param request ListRecordsRequest
 * @return ListRecordsResponse
 */
async function listRecords(request: ListRecordsRequest): ListRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return listRecordsWithOptions(request, runtime);
}

model ListRedirectRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule configuration.', example='rule'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, default is **500**, and the value range is **1~500**.', example='20'),
  ruleName?: string(name='RuleName', description='Rule name, which can be used to find the rule with the specified name.', example='rule_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456******'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, with the default being version 0.', example='0'),
}

model ListRedirectRulesResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
      configType?: string(name='ConfigType', description='Configuration type. Possible values:
- global: Global configuration.
- rule: Rule configuration.', example='rule'),
      reserveQueryString?: string(name='ReserveQueryString', description='Preserve query string. Value range:
- on: enabled.
- off: disabled.', example='on'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding a global configuration. Possible values:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the site configuration, with the default being version 0.', example='1'),
      statusCode?: string(name='StatusCode', description='Response status code used by the node to respond to the client with the redirect address. Possible values:
- 301
- 302
- 303
- 307
- 308', example='301'),
      targetUrl?: string(name='TargetUrl', description='Target URL after redirection.', example='http://www.exapmle.com/index.html'),
      type?: string(name='Type', description='Redirect type. Possible values:
- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
    }
  ](name='Configs', description='List of redirect configurations.'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  totalCount?: int32(name='TotalCount', description='Total number of items.', example='10'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='1'),
}

model ListRedirectRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRedirectRulesResponseBody(name='body'),
}

/**
 * @summary Query Redirect Rule List
 *
 * @param request ListRedirectRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRedirectRulesResponse
 */
@context("listRedirectRulesWithContext")
async function listRedirectRulesWithOptions(request: ListRedirectRulesRequest, runtime: $RuntimeOptions): ListRedirectRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRedirectRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Redirect Rule List
 *
 * @param request ListRedirectRulesRequest
 * @return ListRedirectRulesResponse
 */
async function listRedirectRules(request: ListRedirectRulesRequest): ListRedirectRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listRedirectRulesWithOptions(request, runtime);
}

model ListRewriteUrlRulesRequest {
  configId?: long(name='ConfigId', description='Configuration ID.', example='35281609698****'),
  configType?: string(name='ConfigType', description='Configuration type, which can be used to query global or rule configurations. Value range:
- global: Query global configuration;
- rule: Query rule configuration;

This parameter is optional. If not provided, it does not distinguish between global and rule configurations. This parameter only takes effect when the functionName parameter is provided.', example='global'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size. Range: **1~500**, default is **500**.', example='10'),
  ruleName?: string(name='RuleName', description='Rule name. Not required when adding a global configuration.', example='rule_example'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456789****'),
  siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, defaulting to version 0.', example='0'),
}

model ListRewriteUrlRulesResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', description='Configuration ID.', example='39538644977****'),
      configType?: string(name='ConfigType', description='Configuration type. Value range:
- global: Global configuration;
- rule: Rule configuration;', example='global'),
      queryString?: string(name='QueryString', description='The rewritten query string.', example='example=123'),
      rewriteQueryStringType?: string(name='RewriteQueryStringType', description='Query string rewrite type. Value range:
- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
      rewriteUriType?: string(name='RewriteUriType', description='URI rewrite type. Value range:
- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. Not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. Not required when adding a global configuration. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. Not required when adding a global configuration.', example='rule_example'),
      sequence?: int32(name='Sequence', description='Rule execution order. The smaller the value, the higher the priority.', example='1'),
      siteVersion?: int32(name='SiteVersion', description='Version number of the site configuration. For sites with version management enabled, you can use this parameter to specify the effective version of the configuration, defaulting to version 0.', example='0'),
      uri?: string(name='Uri', description='Target URI after rewriting.', example='/image.example.com/index.html'),
    }
  ](name='Configs', description='List of rewrite URL configurations.'),
  pageNumber?: int32(name='PageNumber', description='The current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The size of the page.', example='10'),
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The total number of items.', example='8'),
  totalPage?: int32(name='TotalPage', description='Total number of pages.', example='1'),
}

model ListRewriteUrlRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRewriteUrlRulesResponseBody(name='body'),
}

/**
 * @summary List of Rewrite URL Rules
 *
 * @param request ListRewriteUrlRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRewriteUrlRulesResponse
 */
@context("listRewriteUrlRulesWithContext")
async function listRewriteUrlRulesWithOptions(request: ListRewriteUrlRulesRequest, runtime: $RuntimeOptions): ListRewriteUrlRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRewriteUrlRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List of Rewrite URL Rules
 *
 * @param request ListRewriteUrlRulesRequest
 * @return ListRewriteUrlRulesResponse
 */
async function listRewriteUrlRules(request: ListRewriteUrlRulesRequest): ListRewriteUrlRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listRewriteUrlRulesWithOptions(request, runtime);
}

model ListRoutineCanaryAreasResponseBody = {
  canaryAreas?: [ string ](name='CanaryAreas', description='The regions for canary release.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model ListRoutineCanaryAreasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineCanaryAreasResponseBody(name='body'),
}

/**
 * @summary Lists the regions to which Edge Routine code can be released for canary deployment.
 *
 * @param request ListRoutineCanaryAreasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutineCanaryAreasResponse
 */
async function listRoutineCanaryAreasWithOptions(runtime: $RuntimeOptions): ListRoutineCanaryAreasResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListRoutineCanaryAreas',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists the regions to which Edge Routine code can be released for canary deployment.
 *
 * @return ListRoutineCanaryAreasResponse
 */
async function listRoutineCanaryAreas(): ListRoutineCanaryAreasResponse {
  var runtime = new $RuntimeOptions{};
  return listRoutineCanaryAreasWithOptions(runtime);
}

model ListRoutineCodeVersionsRequest {
  name?: string(name='Name', description='This parameter is required.', example='ListRoutineCodeVersions'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  searchKeyWord?: string(name='SearchKeyWord'),
}

model ListRoutineCodeVersionsResponseBody = {
  codeVersions?: [ 
    {
      codeDescription?: string(name='CodeDescription'),
      codeVersion?: string(name='CodeVersion'),
      createTime?: string(name='CreateTime'),
    }
  ](name='CodeVersions'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model ListRoutineCodeVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineCodeVersionsResponseBody(name='body'),
}

/**
 * @summary 查询Routine的代码版本列表
 *
 * @param request ListRoutineCodeVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutineCodeVersionsResponse
 */
@context("listRoutineCodeVersionsWithContext")
async function listRoutineCodeVersionsWithOptions(request: ListRoutineCodeVersionsRequest, runtime: $RuntimeOptions): ListRoutineCodeVersionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.searchKeyWord)) {
    body['SearchKeyWord'] = request.searchKeyWord;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoutineCodeVersions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Routine的代码版本列表
 *
 * @param request ListRoutineCodeVersionsRequest
 * @return ListRoutineCodeVersionsResponse
 */
async function listRoutineCodeVersions(request: ListRoutineCodeVersionsRequest): ListRoutineCodeVersionsResponse {
  var runtime = new $RuntimeOptions{};
  return listRoutineCodeVersionsWithOptions(request, runtime);
}

model ListRoutineRelatedRecordsRequest {
  name?: string(name='Name', description='This parameter is required.', example='test'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  searchKeyWord?: string(name='SearchKeyWord', example='hello'),
}

model ListRoutineRelatedRecordsResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  relatedRecords?: [ 
    {
      recordId?: long(name='RecordId', example='509348423011904'),
      recordName?: string(name='RecordName', example='test-record-1.example.com'),
      siteId?: long(name='SiteId', example='54362329990032'),
      siteName?: string(name='SiteName', example='example.com'),
    }
  ](name='RelatedRecords'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: long(name='TotalCount', example='16'),
}

model ListRoutineRelatedRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineRelatedRecordsResponseBody(name='body'),
}

/**
 * @summary 查询函数关联域名列表
 *
 * @param request ListRoutineRelatedRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutineRelatedRecordsResponse
 */
@context("listRoutineRelatedRecordsWithContext")
async function listRoutineRelatedRecordsWithOptions(request: ListRoutineRelatedRecordsRequest, runtime: $RuntimeOptions): ListRoutineRelatedRecordsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.searchKeyWord)) {
    body['SearchKeyWord'] = request.searchKeyWord;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoutineRelatedRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询函数关联域名列表
 *
 * @param request ListRoutineRelatedRecordsRequest
 * @return ListRoutineRelatedRecordsResponse
 */
async function listRoutineRelatedRecords(request: ListRoutineRelatedRecordsRequest): ListRoutineRelatedRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return listRoutineRelatedRecordsWithOptions(request, runtime);
}

model ListRoutineRoutesRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  routineName?: string(name='RoutineName', description='This parameter is required.', example='test-routine1'),
}

model ListRoutineRoutesResponseBody = {
  configs?: [ 
    {
      bypass?: string(name='Bypass', example='on'),
      configId?: long(name='ConfigId', example='35281609698****'),
      configType?: string(name='ConfigType', example='global'),
      fallback?: string(name='Fallback'),
      mode?: string(name='Mode', example='simple'),
      routeEnable?: string(name='RouteEnable', example='on'),
      routeName?: string(name='RouteName', example='test_route'),
      routineName?: string(name='RoutineName', example='test-routine1'),
      rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
      sequence?: int32(name='Sequence', example='1'),
      siteId?: long(name='SiteId', example='554889455535696'),
      siteName?: string(name='SiteName', example='test.com'),
      siteVersion?: int32(name='SiteVersion', example='1'),
    }
  ](name='Configs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', example='83'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model ListRoutineRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineRoutesResponseBody(name='body'),
}

/**
 * @summary 查询边缘程序的函数路由列表
 *
 * @param request ListRoutineRoutesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutineRoutesResponse
 */
@context("listRoutineRoutesWithContext")
async function listRoutineRoutesWithOptions(request: ListRoutineRoutesRequest, runtime: $RuntimeOptions): ListRoutineRoutesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.routineName)) {
    query['RoutineName'] = request.routineName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoutineRoutes',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询边缘程序的函数路由列表
 *
 * @param request ListRoutineRoutesRequest
 * @return ListRoutineRoutesResponse
 */
async function listRoutineRoutes(request: ListRoutineRoutesRequest): ListRoutineRoutesResponse {
  var runtime = new $RuntimeOptions{};
  return listRoutineRoutesWithOptions(request, runtime);
}

model ListScheduledPreloadExecutionsRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.

This parameter is required.', example='ListScheduledPreloadExecutions'),
}

model ListScheduledPreloadExecutionsResponseBody = {
  executions?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
      id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
      interval?: int32(name='Interval', description='The time interval between each batch execution in the plan. Unit: seconds.', example='60'),
      jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
      status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='running'),
    }
  ](name='Executions', description='The information about prefetch plans returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
 * @summary Lists the plans in a scheduled prefetch task by task ID.
 *
 * @param request ListScheduledPreloadExecutionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListScheduledPreloadExecutionsResponse
 */
@context("listScheduledPreloadExecutionsWithContext")
async function listScheduledPreloadExecutionsWithOptions(request: ListScheduledPreloadExecutionsRequest, runtime: $RuntimeOptions): ListScheduledPreloadExecutionsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListScheduledPreloadExecutions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists the plans in a scheduled prefetch task by task ID.
 *
 * @param request ListScheduledPreloadExecutionsRequest
 * @return ListScheduledPreloadExecutionsResponse
 */
async function listScheduledPreloadExecutions(request: ListScheduledPreloadExecutionsRequest): ListScheduledPreloadExecutionsResponse {
  var runtime = new $RuntimeOptions{};
  return listScheduledPreloadExecutionsWithOptions(request, runtime);
}

model ListScheduledPreloadJobsRequest {
  endTime?: long(name='EndTime', description='The end time for querying the task creation time range. Specify the timestamp in milliseconds.', example='1717225277000'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='ListScheduledPreloadJobs'),
  startTime?: long(name='StartTime', description='The beginning of the task creation time range to query. Specify the timestamp in milliseconds.', example='1717225276000'),
}

model ListScheduledPreloadJobsResponseBody = {
  jobs?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      createdAt?: string(name='CreatedAt', description='The time when the task was created.', example='2024-06-01T08:53:13Z'),
      domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
      errorInfo?: string(name='ErrorInfo', description='The error message that is returned.', example='invalid domain:test.com'),
      executionCount?: int32(name='ExecutionCount'),
      failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
      fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
      id?: string(name='Id', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
      name?: string(name='Name', description='The task name.', example='example'),
      siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
      taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
      taskType?: string(name='TaskType', description='The task type. Valid values: refresh and preload.', example='preload'),
      urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
      urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
    }
  ](name='Jobs', description='The list of the prefetch tasks.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: string(name='TotalCount', description='The total number of tasks returned.', example='5'),
}

model ListScheduledPreloadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadJobsResponseBody(name='body'),
}

/**
 * @summary Queries the scheduled prefetch tasks for a website.
 *
 * @param request ListScheduledPreloadJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListScheduledPreloadJobsResponse
 */
@context("listScheduledPreloadJobsWithContext")
async function listScheduledPreloadJobsWithOptions(request: ListScheduledPreloadJobsRequest, runtime: $RuntimeOptions): ListScheduledPreloadJobsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListScheduledPreloadJobs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the scheduled prefetch tasks for a website.
 *
 * @param request ListScheduledPreloadJobsRequest
 * @return ListScheduledPreloadJobsResponse
 */
async function listScheduledPreloadJobs(request: ListScheduledPreloadJobsRequest): ListScheduledPreloadJobsResponse {
  var runtime = new $RuntimeOptions{};
  return listScheduledPreloadJobsWithOptions(request, runtime);
}

model ListSiteDeliveryTasksRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456***'),
}

model ListSiteDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 0.', example='0'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 500**. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
      dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
      deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud Simple Log Service (SLS).
2.  http: HTTP server.
3.  aws3: Amazon Simple Storage Service (S3).
4.  oss: Alibaba Cloud Object Storage Service (OSS).
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.', example='sls'),
      status?: string(name='Status', description='The status of the delivery task.

*   **online**
*   **offline**', example='online'),
      taskName?: string(name='TaskName', description='The name of the delivery task.', example='cdn-test-task'),
    }
  ](name='Tasks', description='The delivery tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of log delivery tasks.', example='20'),
}

model ListSiteDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSiteDeliveryTasksResponseBody(name='body'),
}

/**
 * @summary Lists all log delivery tasks that are in progress.
 *
 * @param request ListSiteDeliveryTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSiteDeliveryTasksResponse
 */
@context("listSiteDeliveryTasksWithContext")
async function listSiteDeliveryTasksWithOptions(request: ListSiteDeliveryTasksRequest, runtime: $RuntimeOptions): ListSiteDeliveryTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSiteDeliveryTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all log delivery tasks that are in progress.
 *
 * @param request ListSiteDeliveryTasksRequest
 * @return ListSiteDeliveryTasksResponse
 */
async function listSiteDeliveryTasks(request: ListSiteDeliveryTasksRequest): ListSiteDeliveryTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listSiteDeliveryTasksWithOptions(request, runtime);
}

model ListSiteRoutesRequest {
  configId?: long(name='ConfigId', example='35281609698****'),
  configType?: string(name='ConfigType', example='global'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  routeName?: string(name='RouteName', example='test_route'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model ListSiteRoutesResponseBody = {
  configs?: [ 
    {
      bypass?: string(name='Bypass', example='on'),
      configId?: long(name='ConfigId', example='35281609698****'),
      configType?: string(name='ConfigType', example='global'),
      fallback?: string(name='Fallback'),
      mode?: string(name='Mode', example='simple'),
      routeEnable?: string(name='RouteEnable', example='on'),
      routeName?: string(name='RouteName', example='test_route'),
      routineName?: string(name='RoutineName', example='test-routine1'),
      rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
      sequence?: int32(name='Sequence', example='1'),
      siteVersion?: int32(name='SiteVersion', example='1'),
    }
  ](name='Configs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', example='16'),
  totalPage?: int32(name='TotalPage', example='10'),
}

model ListSiteRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSiteRoutesResponseBody(name='body'),
}

/**
 * @summary 查询站点的函数路由列表
 *
 * @param request ListSiteRoutesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSiteRoutesResponse
 */
@context("listSiteRoutesWithContext")
async function listSiteRoutesWithOptions(request: ListSiteRoutesRequest, runtime: $RuntimeOptions): ListSiteRoutesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.configType)) {
    query['ConfigType'] = request.configType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.routeName)) {
    query['RouteName'] = request.routeName;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSiteRoutes',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点的函数路由列表
 *
 * @param request ListSiteRoutesRequest
 * @return ListSiteRoutesResponse
 */
async function listSiteRoutes(request: ListSiteRoutesRequest): ListSiteRoutesResponse {
  var runtime = new $RuntimeOptions{};
  return listSiteRoutesWithOptions(request, runtime);
}

model ListSitesRequest {
  accessType?: string(name='AccessType', description='The DNS setup. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='global'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', description='Specifies whether to query only websites on Enterprise plans. Valid values: **true and false**.', example='false'),
  orderBy?: string(name='OrderBy', description='Sorting field. By default, it sorts by creation time, supporting the following options:
- gmtCreate: website creation time
- visitTime: website visit time', example='visitTime'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='20'),
  planSubscribeType?: string(name='PlanSubscribeType', description='The plan type. Valid values:

*   **basicplan**: Entrance
*   **standardplan**: Pro
*   **advancedplan**: Premium
*   **enterpriseplan**: Enterprise', example='basicplan'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter specifies a filter condition for the query.', example='rg-aekzd3styujvyei'),
  siteName?: string(name='SiteName', description='The website name. This parameter specifies a filter condition for the query.', example='example.com'),
  siteSearchType?: string(name='SiteSearchType', description='The match mode to search for the website name. Default value: exact. Valid values:

*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **exact**: exact match.
*   **fuzzy**: fuzzy match.', example='fuzzy'),
  status?: string(name='Status', description='The website status. This parameter specifies a filter condition for the query.', example='pending'),
  tagFilter?: [ 
    {
      key?: string(name='Key', description='The tag key. This parameter specifies a filter condition for the query.', example='tag1'),
      value?: string(name='Value', description='The tag value. This parameter specifies a filter condition for the query.', example='aaa'),
    }
  ](name='TagFilter', description='The tag filtering rule.'),
}

model ListSitesShrinkRequest {
  accessType?: string(name='AccessType', description='The DNS setup. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='global'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', description='Specifies whether to query only websites on Enterprise plans. Valid values: **true and false**.', example='false'),
  orderBy?: string(name='OrderBy', description='Sorting field. By default, it sorts by creation time, supporting the following options:
- gmtCreate: website creation time
- visitTime: website visit time', example='visitTime'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='20'),
  planSubscribeType?: string(name='PlanSubscribeType', description='The plan type. Valid values:

*   **basicplan**: Entrance
*   **standardplan**: Pro
*   **advancedplan**: Premium
*   **enterpriseplan**: Enterprise', example='basicplan'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter specifies a filter condition for the query.', example='rg-aekzd3styujvyei'),
  siteName?: string(name='SiteName', description='The website name. This parameter specifies a filter condition for the query.', example='example.com'),
  siteSearchType?: string(name='SiteSearchType', description='The match mode to search for the website name. Default value: exact. Valid values:

*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **exact**: exact match.
*   **fuzzy**: fuzzy match.', example='fuzzy'),
  status?: string(name='Status', description='The website status. This parameter specifies a filter condition for the query.', example='pending'),
  tagFilterShrink?: string(name='TagFilter', description='The tag filtering rule.'),
}

model ListSitesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of websites per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  sites?: [ 
    {
      accessType?: string(name='AccessType', description='The DNS setup for the website. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
      cnameZone?: string(name='CnameZone', description='The CNAME of the website domain. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='example.cname.com'),
      coverage?: string(name='Coverage', description='The service location for the website. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='domestic'),
      createTime?: string(name='CreateTime', description='The time when the website was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      instanceId?: string(name='InstanceId', description='The ID of the plan associated with the website.', example='onBvtlmIyeXLbiDw81F9'),
      nameServerList?: string(name='NameServerList', description='The nameservers assigned to the website domain, which are separated by commas (,).', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
      offlineReason?: string(name='OfflineReason'),
      planName?: string(name='PlanName', description='The plan name.', example='plan-168656498****'),
      planSpecName?: string(name='PlanSpecName', description='The plan associated with the website.', example='normal'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek26g6i6se6pna'),
      siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      status?: string(name='Status', description='The website status. Valid values:

*   **pending**: The website is to be configured.
*   **active**: The website is active.
*   **offline**: The website is suspended.
*   **moved**: The website has been added and verified by another Alibaba Cloud account.', example='pending'),
      tags?: map[string]any(name='Tags', description='The tags of the website.', example='{"tag1":"value1"}'),
      updateTime?: string(name='UpdateTime', description='The time when the website was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      verifyCode?: string(name='VerifyCode', description='The code that is used to verify the website domain ownership. As part of the verification TXT record, this parameter is returned for websites that use CNAME setup.', example='verify_d516cb3740f81f0cef77d162edd1****'),
      visitTime?: string(name='VisitTime', description='The website visit time is represented in the ISO 8601 date format using UTC time, formatted as yyyy-MM-ddTHH:mm:ssZ.', example='2023-12-24T02:01:11Z'),
    }
  ](name='Sites', description='The queried websites.'),
  totalCount?: int32(name='TotalCount', description='The total number of websites.', example='40'),
}

model ListSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSitesResponseBody(name='body'),
}

/**
 * @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
 *
 * @param tmpReq ListSitesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSitesResponse
 */
@context("listSitesWithContext")
async function listSitesWithOptions(tmpReq: ListSitesRequest, runtime: $RuntimeOptions): ListSitesResponse {
  tmpReq.validate();
  var request = new ListSitesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tagFilter)) {
    request.tagFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagFilter, 'TagFilter', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSites',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
 *
 * @param request ListSitesRequest
 * @return ListSitesResponse
 */
async function listSites(request: ListSitesRequest): ListSitesResponse {
  var runtime = new $RuntimeOptions{};
  return listSitesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxItem?: int32(name='MaxItem', description='The maximum number of tags to return.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

>  This parameter is not required for the first request. If not all results are returned in one query, you can specify the token that is obtained from the previous query as the value of **NextToken**.', example='AAAAAZjtYxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the resources reside.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The website ID.'),
  resourceType?: string(name='ResourceType', description='The resource type.

This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='env'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tag', description='A list of tags. You can enter up to 20 tags.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAYwsxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='example.com'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='site'),
      tagKey?: string(name='TagKey', description='The tag key.', example='env'),
      tagValue?: string(name='TagValue', description='The tag value.', example='value'),
    }
  ](name='TagResources', description='The tags of the resource.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @summary Queries tags based on the region ID and resource type.
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
@context("listTagResourcesWithContext")
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $RuntimeOptions): ListTagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.maxItem)) {
    query['MaxItem'] = request.maxItem;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries tags based on the region ID and resource type.
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUploadTasksRequest {
  endTime?: string(name='EndTime', description='The time when the task ends. Specify the time in the YYYY-MM-DDThh:mm:ssZ format.', example='2019-12-06T12:00:00Z'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456****'),
  startTime?: string(name='StartTime', description='The time when the task starts. Specify the time in the YYYY-MM-DDThh:mm:ssZ format.', example='2018-11-29T00:00:00Z'),
  type?: string(name='Type', description='The task type. Valid values:

*   **file**: purges the cache by file URL.
*   **preload**: prefetches files.
*   **directory**: purges the cache by directory.
*   **ignoreparams**: purges the cache by URL with specified parameters ignored.', example='file'),
}

model ListUploadTasksResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB1A380B-09F0-41BB-A198-72F8FD6D****'),
  tasks?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the task was created.', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', description='The error message returned when the file upload task failed.', example='invalid url'),
      errorCode?: string(name='ErrorCode', description='The error code. Multiple error codes are separated by commas (,).

*   **InvalidUrl**: The URL format is incorrect.
*   **InvalidDomain**: The domain ownership fails to be verified.
*   **QuotaExcess**: The quota limit has been reached.
*   **OtherErrors**: Other errors.', example='InvalidUrl,InvalidDomain'),
      status?: string(name='Status', description='The task status.

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
      type?: string(name='Type', description='The task type. Valid values:

*   **file**: purges the cache by file URL.
*   **preload**: prefetches files.
*   **directory**: purges the cache by directory.
*   **ignoreparams**: purges the cache by URL with specified parameters ignored.', example='file'),
      uploadId?: string(name='UploadId', description='The ID of the file upload task.', example='159253299357****'),
      uploadTaskName?: string(name='UploadTaskName', description='The name of the file upload task.', example='purge_file_task'),
    }
  ](name='Tasks', description='The file upload tasks.'),
}

model ListUploadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUploadTasksResponseBody(name='body'),
}

/**
 * @summary Queries the execution status and running information of file upload tasks based on the task time and type.
 *
 * @param request ListUploadTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUploadTasksResponse
 */
@context("listUploadTasksWithContext")
async function listUploadTasksWithOptions(request: ListUploadTasksRequest, runtime: $RuntimeOptions): ListUploadTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUploadTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the execution status and running information of file upload tasks based on the task time and type.
 *
 * @param request ListUploadTasksRequest
 * @return ListUploadTasksResponse
 */
async function listUploadTasks(request: ListUploadTasksRequest): ListUploadTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listUploadTasksWithOptions(request, runtime);
}

model ListUrlObservationsRequest {
  configId?: long(name='ConfigId', example='35281609698****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='34003500310****'),
}

model ListUrlObservationsResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', example='35281609698****'),
      sdkType?: string(name='SdkType', example='manual'),
      url?: string(name='Url', example='example.com/test'),
    }
  ](name='Configs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', example='1'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListUrlObservationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUrlObservationsResponseBody(name='body'),
}

/**
 * @summary 查询网页观测配置列表
 *
 * @param request ListUrlObservationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUrlObservationsResponse
 */
@context("listUrlObservationsWithContext")
async function listUrlObservationsWithOptions(request: ListUrlObservationsRequest, runtime: $RuntimeOptions): ListUrlObservationsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUrlObservations',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询网页观测配置列表
 *
 * @param request ListUrlObservationsRequest
 * @return ListUrlObservationsResponse
 */
async function listUrlObservations(request: ListUrlObservationsRequest): ListUrlObservationsResponse {
  var runtime = new $RuntimeOptions{};
  return listUrlObservationsWithOptions(request, runtime);
}

model ListUserDeliveryTasksRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

1.  dcdn_log_access_l1 (default): access logs.
2.  dcdn_log_er: Edge Routine logs.
3.  dcdn_log_waf: firewall logs.
4.  dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
}

model ListUserDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='1f94c47f-3a1a-4f69-8d6c-bfeee1b49aab'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', description='The log category.', example='dcdn_log_er'),
      dataCenter?: string(name='DataCenter', description='The data center. Valid values:

1.  cn: the Chinese mainland.
2.  sg: outside the Chinese mainland.', example='cn'),
      deliveryType?: string(name='DeliveryType', description='The delivery destination.', example='oss'),
      status?: string(name='Status', description='The status of the delivery task.', example='online'),
      taskName?: string(name='TaskName', description='The name of the delivery task.', example='testoss11'),
    }
  ](name='Tasks', description='The delivery tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of delivery tasks.', example='68'),
}

model ListUserDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDeliveryTasksResponseBody(name='body'),
}

/**
 * @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
 *
 * @param request ListUserDeliveryTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserDeliveryTasksResponse
 */
@context("listUserDeliveryTasksWithContext")
async function listUserDeliveryTasksWithOptions(request: ListUserDeliveryTasksRequest, runtime: $RuntimeOptions): ListUserDeliveryTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUserDeliveryTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
 *
 * @param request ListUserDeliveryTasksRequest
 * @return ListUserDeliveryTasksResponse
 */
async function listUserDeliveryTasks(request: ListUserDeliveryTasksRequest): ListUserDeliveryTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listUserDeliveryTasksWithOptions(request, runtime);
}

model ListUserRatePlanInstancesRequest {
  checkRemainingSiteQuota?: string(name='CheckRemainingSiteQuota', description='Specifies whether to query only the plans that have remaining quota for associating websites. Valid values:

*   true: queries only the plans that have remaining quota for associating websites.
*   false: queries all plans in your account.', example='true'),
  instanceId?: string(name='InstanceId', description='The plan ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='sp-xcdn-96wblslz****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='500'),
  remainingExpireDays?: int32(name='RemainingExpireDays'),
  sortBy?: string(name='SortBy', description='The sorting field. By default, the queried plans are sorted by purchase time. Valid values:

*   CreateTime: the time when the plans were purchased.
*   ExpireTime: the time when the plans expire.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the query results. Default value: desc. Valid values:

*   asc: in ascending order.
*   desc: in descending order.', example='asc'),
  status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.
*   overdue: The plan is stopped due to overdue payments.', example='online', nullable=false),
  subscribeType?: string(name='SubscribeType'),
}

model ListUserRatePlanInstancesResponseBody = {
  instanceInfo?: [ 
    {
      billingMode?: string(name='BillingMode', description='The billing method. Valid values:

*   PREPAY: subscription.
*   POSTPAY: pay-as-you-go.', example='PREPAY'),
      botInstanceLevel?: string(name='BotInstanceLevel'),
      botRequest?: string(name='BotRequest'),
      coverages?: string(name='Coverages', description='The service locations for the websites that can be associated with the plan. Multiple values are separated by commas (,). Valid values:

*   domestic: the Chinese mainland.
*   overseas: outside the Chinese mainland.
*   global: global.', example='domestic,overseas'),
      createTime?: string(name='CreateTime', description='The time when the plan was purchased.', example='YYYY-MM-DDThh:mm:ssZ'),
      crossborderTraffic?: string(name='CrossborderTraffic'),
      ddosBurstableDomesticProtection?: string(name='DdosBurstableDomesticProtection'),
      ddosBurstableOverseasProtection?: string(name='DdosBurstableOverseasProtection'),
      ddosInstanceLevel?: string(name='DdosInstanceLevel'),
      duration?: int32(name='Duration', description='The subscription duration of the plan. Unit: month.', example='3'),
      edgeRoutineRquest?: string(name='EdgeRoutineRquest'),
      edgeWafRequest?: string(name='EdgeWafRequest'),
      expireTime?: string(name='ExpireTime', description='The time when the plan expires.', example='YYYY-MM-DDThh:mm:ssZ'),
      instanceId?: string(name='InstanceId', description='The plan ID.', example='sp-xcdn-96wblslz****'),
      layer4Traffic?: string(name='Layer4Traffic'),
      layer4TrafficIntl?: string(name='Layer4TrafficIntl'),
      planName?: string(name='PlanName', description='The plan name.', example='basic'),
      planTraffic?: string(name='PlanTraffic'),
      planType?: string(name='PlanType', description='The plan type. Valid values:

*   normal
*   enterprise', example='normal'),
      siteQuota?: string(name='SiteQuota', description='The maximum number of websites that can be associated with the plan.', example='1'),
      sites?: [ 
        {
          siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
          siteName?: string(name='SiteName', description='The website name.', example='example.com'),
          siteStatus?: string(name='SiteStatus', description='The website status. Valid values:

*   pending: The website is to be configured.
*   active: The website is active.
*   offline: The website is suspended.
*   moved: The website has been added and verified by another Alibaba Cloud account.', example='pending'),
        }
      ](name='Sites', description='The websites that have been associated with the plan.'),
      smartRoutingRequest?: string(name='SmartRoutingRequest'),
      staticRequest?: string(name='StaticRequest'),
      status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.', example='online'),
      subscribeType?: string(name='SubscribeType'),
    }
  ](name='InstanceInfo', description='The queried plans.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='68'),
  totalPage?: int32(name='TotalPage', description='The total number of pages returned.', example='1'),
}

model ListUserRatePlanInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRatePlanInstancesResponseBody(name='body'),
}

/**
 * @summary Queries the plans that you purchased and the details of the plans.
 *
 * @param request ListUserRatePlanInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserRatePlanInstancesResponse
 */
@context("listUserRatePlanInstancesWithContext")
async function listUserRatePlanInstancesWithOptions(request: ListUserRatePlanInstancesRequest, runtime: $RuntimeOptions): ListUserRatePlanInstancesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUserRatePlanInstances',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the plans that you purchased and the details of the plans.
 *
 * @param request ListUserRatePlanInstancesRequest
 * @return ListUserRatePlanInstancesResponse
 */
async function listUserRatePlanInstances(request: ListUserRatePlanInstancesRequest): ListUserRatePlanInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listUserRatePlanInstancesWithOptions(request, runtime);
}

model ListUserRoutinesRequest {
  pageNumber?: long(name='PageNumber', example='ListUserRoutines'),
  pageSize?: long(name='PageSize'),
  searchKeyWord?: string(name='SearchKeyWord'),
}

model ListUserRoutinesResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  quotaRoutineNumber?: long(name='QuotaRoutineNumber'),
  requestId?: string(name='RequestId', description='Id of the request'),
  routines?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      routineName?: string(name='RoutineName'),
    }
  ](name='Routines'),
  totalCount?: long(name='TotalCount'),
  usedRoutineNumber?: long(name='UsedRoutineNumber'),
}

model ListUserRoutinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRoutinesResponseBody(name='body'),
}

/**
 * @summary 查询用户的Routine列表
 *
 * @param request ListUserRoutinesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserRoutinesResponse
 */
@context("listUserRoutinesWithContext")
async function listUserRoutinesWithOptions(request: ListUserRoutinesRequest, runtime: $RuntimeOptions): ListUserRoutinesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.searchKeyWord)) {
    query['SearchKeyWord'] = request.searchKeyWord;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUserRoutines',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户的Routine列表
 *
 * @param request ListUserRoutinesRequest
 * @return ListUserRoutinesResponse
 */
async function listUserRoutines(request: ListUserRoutinesRequest): ListUserRoutinesResponse {
  var runtime = new $RuntimeOptions{};
  return listUserRoutinesWithOptions(request, runtime);
}

model ListVideoProcessingsRequest {
  configId?: long(name='ConfigId', example='35281609698****'),
  configType?: string(name='ConfigType', example='global'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  ruleName?: string(name='RuleName', example='rule_example'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='12345'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model ListVideoProcessingsResponseBody = {
  configs?: [ 
    {
      configId?: long(name='ConfigId', example='234123**'),
      configType?: string(name='ConfigType', example='global'),
      flvSeekEnd?: string(name='FlvSeekEnd', example='end'),
      flvSeekStart?: string(name='FlvSeekStart', example='start'),
      flvVideoSeekMode?: string(name='FlvVideoSeekMode', example='by_byte'),
      mp4SeekEnd?: string(name='Mp4SeekEnd', example='end'),
      mp4SeekStart?: string(name='Mp4SeekStart', example='start'),
      rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
      ruleEnable?: string(name='RuleEnable', example='on'),
      ruleName?: string(name='RuleName', example='rule_example'),
      sequence?: int32(name='Sequence', example='1'),
      siteVersion?: int32(name='SiteVersion', example='1'),
      videoSeekEnable?: string(name='VideoSeekEnable', example='on'),
    }
  ](name='Configs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', example='55'),
  totalPage?: int32(name='TotalPage', example='3'),
}

model ListVideoProcessingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVideoProcessingsResponseBody(name='body'),
}

/**
 * @summary 查询站点视频处理配置列表
 *
 * @param request ListVideoProcessingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListVideoProcessingsResponse
 */
@context("listVideoProcessingsWithContext")
async function listVideoProcessingsWithOptions(request: ListVideoProcessingsRequest, runtime: $RuntimeOptions): ListVideoProcessingsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.configType)) {
    query['ConfigType'] = request.configType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListVideoProcessings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点视频处理配置列表
 *
 * @param request ListVideoProcessingsRequest
 * @return ListVideoProcessingsResponse
 */
async function listVideoProcessings(request: ListVideoProcessingsRequest): ListVideoProcessingsResponse {
  var runtime = new $RuntimeOptions{};
  return listVideoProcessingsWithOptions(request, runtime);
}

model ListWafManagedRulesRequest {
  attackType?: int32(name='AttackType', description='Attack type of the vulnerability protection event. Values:
- SQL injection
- Cross-site scripting
- Code execution
- CRLF
- Local file inclusion
- Remote file inclusion
- Webshell
- Cross-site request forgery
- Other
- SEMA

This parameter is required.', example='11'),
  id?: long(name='Id', description='ID of the WAF rule.

This parameter is required.', example='10000001'),
  language?: string(name='Language', description='Language type, which will be used to return the response. Value range:

- **en**: English.
- **zh**: Chinese.', example='zh'),
  pageNumber?: int32(name='PageNumber', description='Query page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Query page size.', example='20'),
  protectionLevel?: int32(name='ProtectionLevel'),
  queryArgs?: {
    action?: string(name='Action', description='Action.', example='deny'),
    idNameLike?: string(name='IdNameLike', description='Fuzzy search for rule ID or rule name.', example='example'),
    protectionLevels?: [ int32 ](name='ProtectionLevels', description='List of rule protection levels.'),
    status?: string(name='Status', description='Status.', example='on'),
  }(name='QueryArgs', description='Query conditions.'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
}

model ListWafManagedRulesShrinkRequest {
  attackType?: int32(name='AttackType', description='Attack type of the vulnerability protection event. Values:
- SQL injection
- Cross-site scripting
- Code execution
- CRLF
- Local file inclusion
- Remote file inclusion
- Webshell
- Cross-site request forgery
- Other
- SEMA

This parameter is required.', example='11'),
  id?: long(name='Id', description='ID of the WAF rule.

This parameter is required.', example='10000001'),
  language?: string(name='Language', description='Language type, which will be used to return the response. Value range:

- **en**: English.
- **zh**: Chinese.', example='zh'),
  pageNumber?: int32(name='PageNumber', description='Query page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Query page size.', example='20'),
  protectionLevel?: int32(name='ProtectionLevel'),
  queryArgsShrink?: string(name='QueryArgs', description='Query conditions.'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
}

model ListWafManagedRulesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', description='Protection action of the managed rule.', example='deny'),
      id?: long(name='Id', description='ID of the managed rule.', example='100001'),
      name?: string(name='Name', description='Name of the managed rule.', example='SQL injection'),
      protectionLevel?: int32(name='ProtectionLevel', description='Protection level of the managed rule.', example='1'),
      status?: string(name='Status', description='Protection status of the managed rule.', example='on'),
    }
  ](name='Rules', description='List of managed rules.'),
  totalCount?: long(name='TotalCount', description='Total number of rules after filtering.', example='20'),
}

model ListWafManagedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafManagedRulesResponseBody(name='body'),
}

/**
 * @summary List WAF Managed Rules
 *
 * @param tmpReq ListWafManagedRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafManagedRulesResponse
 */
@context("listWafManagedRulesWithContext")
async function listWafManagedRulesWithOptions(tmpReq: ListWafManagedRulesRequest, runtime: $RuntimeOptions): ListWafManagedRulesResponse {
  tmpReq.validate();
  var request = new ListWafManagedRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!$isNull(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.language)) {
    query['Language'] = request.language;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.protectionLevel)) {
    query['ProtectionLevel'] = request.protectionLevel;
  }
  if (!$isNull(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWafManagedRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List WAF Managed Rules
 *
 * @param request ListWafManagedRulesRequest
 * @return ListWafManagedRulesResponse
 */
async function listWafManagedRules(request: ListWafManagedRulesRequest): ListWafManagedRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listWafManagedRulesWithOptions(request, runtime);
}

model ListWafPhasesRequest {
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model ListWafPhasesResponseBody = {
  phases?: [ 
    {
      phase?: string(name='Phase', description='Name of the WAF operation phase.', example='http_custom'),
      rulesets?: [ 
        {
          id?: long(name='Id', description='ID of the WAF ruleset.', example='10000001'),
          name?: string(name='Name', description='Name of the WAF ruleset.', example='example'),
          rules?: [
            WafRuleConfig
          ](name='Rules', description='List of rule configurations in the WAF ruleset.'),
          shared?: WafBatchRuleShared(name='Shared', description='Shared configuration for rules in the WAF ruleset.'),
        }
      ](name='Rulesets', description='List of WAF rulesets.'),
    }
  ](name='Phases', description='List of WAF operation phases.'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model ListWafPhasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafPhasesResponseBody(name='body'),
}

/**
 * @summary List WAF Phases
 *
 * @param request ListWafPhasesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafPhasesResponse
 */
@context("listWafPhasesWithContext")
async function listWafPhasesWithOptions(request: ListWafPhasesRequest, runtime: $RuntimeOptions): ListWafPhasesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWafPhases',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List WAF Phases
 *
 * @param request ListWafPhasesRequest
 * @return ListWafPhasesResponse
 */
async function listWafPhases(request: ListWafPhasesRequest): ListWafPhasesResponse {
  var runtime = new $RuntimeOptions{};
  return listWafPhasesWithOptions(request, runtime);
}

model ListWafRulesRequest {
  pageNumber?: int32(name='PageNumber', description='Query page number, used for pagination.', example='1'),
  pageSize?: int32(name='PageSize', description='Query page size, used for pagination.', example='20'),
  phase?: string(name='Phase', description='WAF rule type. Values:

- http_anti_scan: Scan protection
- http_bot: Bots', example='http_custom'),
  queryArgs?: {
    configValueLike?: string(name='ConfigValueLike', description='Fuzzy search for values in IP access control.', example='10.0.0.1'),
    desc?: boolean(name='Desc', description='Whether to reverse the sorting result.', example='true'),
    id?: long(name='Id', description='Exact query for WAF rule ID.', example='20000001'),
    idNameLike?: string(name='IdNameLike', description='Fuzzy query for WAF rule ID or name.', example='example'),
    nameLike?: string(name='NameLike', description='Fuzzy query for WAF rule name.', example='example'),
    orderBy?: string(name='OrderBy', description='Sort the returned list by the specified column.', example='position'),
    status?: string(name='Status', description='Exact query for WAF rule status.', example='on'),
  }(name='QueryArgs', description='Query filter conditions.', example='http_custom'),
  rulesetId?: long(name='RulesetId'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model ListWafRulesShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='Query page number, used for pagination.', example='1'),
  pageSize?: int32(name='PageSize', description='Query page size, used for pagination.', example='20'),
  phase?: string(name='Phase', description='WAF rule type. Values:

- http_anti_scan: Scan protection
- http_bot: Bots', example='http_custom'),
  queryArgsShrink?: string(name='QueryArgs', description='Query filter conditions.', example='http_custom'),
  rulesetId?: long(name='RulesetId'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model ListWafRulesResponseBody = {
  instanceUsage?: long(name='InstanceUsage', description='Number of rules used in this WAF phase for the corresponding instance of the site.', example='10'),
  pageNumber?: int32(name='PageNumber', description='Page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', description='The action corresponding to the rule.', example='deny'),
      characteristicsFields?: [ string ](name='CharacteristicsFields', description='List of statistical objects for frequency control rules.'),
      config?: WafRuleConfig(name='Config', description='Rule configuration.'),
      fields?: [ string ](name='Fields', description='List of fields for rule matching'),
      id?: long(name='Id', description='Rule ID.', example='20000001'),
      name?: string(name='Name', description='Rule name.', example='example'),
      phase?: string(name='Phase', description='WAF phase.', example='http_custom'),
      position?: long(name='Position', description='Position order of the rule in the corresponding ruleset.', example='1'),
      rulesetId?: long(name='RulesetId', description='Ruleset ID.', example='10000001'),
      skip?: string(name='Skip', description='Skip attribute for whitelist rules.', example='part'),
      status?: string(name='Status', description='Rule status.', example='on'),
      tags?: [ string ](name='Tags', description='List of WAF phases to be skipped by whitelist rules.'),
      timer?: WafTimer(name='Timer', description='Configuration for the effective time of the rule.'),
      type?: string(name='Type', description='Rule type.', example='http_custom'),
      updateTime?: string(name='UpdateTime', description='Modification time.', example='2024-01-01T00:00:00Z'),
    }
  ](name='Rules', description='Returned list of rules.'),
  siteUsage?: long(name='SiteUsage', description='Site usage.', example='5'),
  totalCount?: long(name='TotalCount', description='Total number of rules after filtering.', example='20'),
}

model ListWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafRulesResponseBody(name='body'),
}

/**
 * @summary List WAF Rules
 *
 * @param tmpReq ListWafRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafRulesResponse
 */
@context("listWafRulesWithContext")
async function listWafRulesWithOptions(tmpReq: ListWafRulesRequest, runtime: $RuntimeOptions): ListWafRulesResponse {
  tmpReq.validate();
  var request = new ListWafRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!$isNull(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!$isNull(request.rulesetId)) {
    query['RulesetId'] = request.rulesetId;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWafRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List WAF Rules
 *
 * @param request ListWafRulesRequest
 * @return ListWafRulesResponse
 */
async function listWafRules(request: ListWafRulesRequest): ListWafRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listWafRulesWithOptions(request, runtime);
}

model ListWafRulesetsRequest {
  pageNumber?: int32(name='PageNumber', description='Page number, specifying the current page number for paginated queries.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, specifying the number of records per page for paginated queries.', example='20'),
  phase?: string(name='Phase', description='WAF operation phase, specifying the rule set phase to query.', example='http_bot'),
  queryArgs?: {
    anyLike?: string(name='AnyLike', description='Fuzzy search for rule set ID, rule set name, rule ID, and rule name.', example='example'),
    desc?: boolean(name='Desc', description='Whether to sort in descending order.'),
    nameLike?: string(name='NameLike', description='Fuzzy search for rule set name.', example='example'),
    orderBy?: string(name='OrderBy', description='Specify the column to sort by.', example='id'),
  }(name='QueryArgs', description='Query parameters, passed in JSON format, containing various filtering conditions.', example='http_bot'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model ListWafRulesetsShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='Page number, specifying the current page number for paginated queries.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size, specifying the number of records per page for paginated queries.', example='20'),
  phase?: string(name='Phase', description='WAF operation phase, specifying the rule set phase to query.', example='http_bot'),
  queryArgsShrink?: string(name='QueryArgs', description='Query parameters, passed in JSON format, containing various filtering conditions.', example='http_bot'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
}

model ListWafRulesetsResponseBody = {
  instanceUsage?: long(name='InstanceUsage', description='Number of WAF rule sets used by the instance in this WAF operation phase.', example='10'),
  pageNumber?: int32(name='PageNumber', description='Current page number.', example='1'),
  pageSize?: int32(name='PageSize', description='Page size.', example='20'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesets?: [ 
    {
      fields?: [ string ](name='Fields', description='List of match objects.'),
      id?: long(name='Id', description='ID of the WAF rule set.', example='10000001'),
      name?: string(name='Name', description='Name of the rule set.', example='example'),
      phase?: string(name='Phase', description='WAF operation phase.', example='http_bot'),
      status?: string(name='Status', description='Status of the rule set.', example='on'),
      target?: string(name='Target', description='Protection target type in http_bot.', example='web'),
      types?: [ string ](name='Types', description='List of rule types.'),
      updateTime?: string(name='UpdateTime', description='Last modification time of the rule set.', example='2024-01-01T00:00:00Z'),
    }
  ](name='Rulesets', description='List of rule set information, containing detailed information about the rule sets.'),
  siteUsage?: long(name='SiteUsage', description='Number of WAF rule sets used by the site in this WAF operation phase.', example='5'),
  totalCount?: long(name='TotalCount', description='Total number of filtered records.', example='5'),
}

model ListWafRulesetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafRulesetsResponseBody(name='body'),
}

/**
 * @summary List WAF Rule Sets
 *
 * @param tmpReq ListWafRulesetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafRulesetsResponse
 */
@context("listWafRulesetsWithContext")
async function listWafRulesetsWithOptions(tmpReq: ListWafRulesetsRequest, runtime: $RuntimeOptions): ListWafRulesetsResponse {
  tmpReq.validate();
  var request = new ListWafRulesetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!$isNull(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWafRulesets',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List WAF Rule Sets
 *
 * @param request ListWafRulesetsRequest
 * @return ListWafRulesetsResponse
 */
async function listWafRulesets(request: ListWafRulesetsRequest): ListWafRulesetsResponse {
  var runtime = new $RuntimeOptions{};
  return listWafRulesetsWithOptions(request, runtime);
}

model ListWafTemplateRulesRequest {
  phase?: string(name='Phase', description='WAF operation phase, used to filter template rules for a specific phase.', example='http_anti_scan'),
  queryArgs?: {
    kinds?: [ string ](name='Kinds'),
    type?: string(name='Type', description='Rule type.', example='http_directory_traversal'),
  }(name='QueryArgs', description='Query parameters, used to filter template rules based on conditions such as rule type.', example='http_anti_scan'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.', example='1'),
}

model ListWafTemplateRulesShrinkRequest {
  phase?: string(name='Phase', description='WAF operation phase, used to filter template rules for a specific phase.', example='http_anti_scan'),
  queryArgsShrink?: string(name='QueryArgs', description='Query parameters, used to filter template rules based on conditions such as rule type.', example='http_anti_scan'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.', example='1'),
}

model ListWafTemplateRulesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      config?: WafRuleConfig(name='Config', description='Rule configuration.'),
      name?: string(name='Name', description='Rule name.', example='HTTP Directory Traversal Rule [Template]'),
      phase?: string(name='Phase', description='WAF operation phase.', example='http_anti_scan'),
      status?: string(name='Status', description='Rule status.', example='on'),
      type?: string(name='Type', description='Rule type.', example='http_directory_traversal'),
    }
  ](name='Rules', description='The list of returned template rules.'),
}

model ListWafTemplateRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafTemplateRulesResponseBody(name='body'),
}

/**
 * @summary List WAF Template Rules
 *
 * @param tmpReq ListWafTemplateRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafTemplateRulesResponse
 */
@context("listWafTemplateRulesWithContext")
async function listWafTemplateRulesWithOptions(tmpReq: ListWafTemplateRulesRequest, runtime: $RuntimeOptions): ListWafTemplateRulesResponse {
  tmpReq.validate();
  var request = new ListWafTemplateRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!$isNull(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!$isNull(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWafTemplateRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List WAF Template Rules
 *
 * @param request ListWafTemplateRulesRequest
 * @return ListWafTemplateRulesResponse
 */
async function listWafTemplateRules(request: ListWafTemplateRulesRequest): ListWafTemplateRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listWafTemplateRulesWithOptions(request, runtime);
}

model ListWafUsageOfRulesRequest {
  phase?: string(name='Phase', description='Name of the WAF operation phase.', example='http_custom'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.', example='1'),
}

model ListWafUsageOfRulesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  sites?: [ 
    {
      id?: long(name='Id', description='Site ID.', example='1'),
      name?: string(name='Name', description='Site name.', example='example.com'),
      usage?: long(name='Usage', description='Usage of WAF rules/WAF rule sets.', example='1'),
    }
  ](name='Sites', description='List of site usage.'),
}

model ListWafUsageOfRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafUsageOfRulesResponseBody(name='body'),
}

/**
 * @summary List WAF Rule Usage
 *
 * @param request ListWafUsageOfRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafUsageOfRulesResponse
 */
@context("listWafUsageOfRulesWithContext")
async function listWafUsageOfRulesWithOptions(request: ListWafUsageOfRulesRequest, runtime: $RuntimeOptions): ListWafUsageOfRulesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWafUsageOfRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List WAF Rule Usage
 *
 * @param request ListWafUsageOfRulesRequest
 * @return ListWafUsageOfRulesResponse
 */
async function listWafUsageOfRules(request: ListWafUsageOfRulesRequest): ListWafUsageOfRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listWafUsageOfRulesWithOptions(request, runtime);
}

model ListWaitingRoomEventsRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', description='The ID of the waiting room event. This parameter is optional. You can specify this parameter to query a specific waiting room event.', example='89677721098****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The unique ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
}

model ListWaitingRoomEventsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to trace a call.', example='f3c3700a-4c0f-4a24-b576-fd7dbf9e7c55'),
  waitingRoomEvents?: [ 
    {
      customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. This parameter is returned when the waiting room type is set to custom. The content is URL-encoded.', example='html-yets-maqi1111'),
      description?: string(name='Description', description='The event description.', example='terraform-example'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Indicates whether session renewal is disabled. Valid values:

*   on
*   off', example='off'),
      enable?: string(name='Enable', description='The event status. Valid values:

*   on
*   off', example='on'),
      endTime?: string(name='EndTime', description='The end time of the event. This value is a UNIX timestamp.', example='1719814497'),
      jsonResponseEnable?: string(name='JsonResponseEnable', description='Indicates whether JOSN response is enabled. If JSON response is enabled, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='off'),
      language?: string(name='Language', description='The language of the waiting room page. This parameter is returned when the waiting room type is set to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
      name?: string(name='Name', description='The custom event name.'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='11'),
      preQueueEnable?: string(name='PreQueueEnable', description='Indicates whether pre-queuing is enabled. Valid values:

*   on
*   off', example='on'),
      preQueueStartTime?: string(name='PreQueueStartTime', description='The start time for pre-queuing. This value is a UNIX timestamp. This parameter is valid only when pre-queuing is enabled.', example='1719814097'),
      queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='fifo'),
      queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
      randomPreQueueEnable?: string(name='RandomPreQueueEnable', description='Indicates whether random queuing is enabled. Valid values:

*   on
*   off', example='on'),
      sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='3'),
      startTime?: string(name='StartTime', description='The start time of the event. This value is a UNIX timestamp.', example='1719814398'),
      totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='22'),
      waitingRoomEventId?: long(name='WaitingRoomEventId', description='The unique ID of the waiting room event.', example='89677721098****'),
      waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room associated with the event.', example='5c938a045c9ca46607163d34966****'),
      waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='custom'),
    }
  ](name='WaitingRoomEvents', description='The details of the waiting room events.'),
}

model ListWaitingRoomEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomEventsResponseBody(name='body'),
}

/**
 * @summary Queries the information about waiting room events for a waiting room.
 *
 * @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
 *
 * @param request ListWaitingRoomEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomEventsResponse
 */
@context("listWaitingRoomEventsWithContext")
async function listWaitingRoomEventsWithOptions(request: ListWaitingRoomEventsRequest, runtime: $RuntimeOptions): ListWaitingRoomEventsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWaitingRoomEvents',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about waiting room events for a waiting room.
 *
 * @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
 *
 * @param request ListWaitingRoomEventsRequest
 * @return ListWaitingRoomEventsResponse
 */
async function listWaitingRoomEvents(request: ListWaitingRoomEventsRequest): ListWaitingRoomEventsResponse {
  var runtime = new $RuntimeOptions{};
  return listWaitingRoomEventsWithOptions(request, runtime);
}

model ListWaitingRoomRulesRequest {
  ruleName?: string(name='RuleName', description='Rule name, optional, used for querying by the name of the waiting room bypass rule.', example='test'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room to bypass, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) interface.

This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='The ID of the waiting room bypass rule to update, which can be obtained by calling the [ListWaitingRoomRules](https://help.aliyun.com/document_detail/2850279.html) interface.', example='37286782688****'),
}

model ListWaitingRoomRulesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID, used for tracking the call status.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  waitingRoomRules?: [ 
    {
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding global configuration. There are two usage scenarios:
- Match all incoming requests: set the value to true
- Match specific requests: set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding global configuration. Value range:
- on: enabled.
- off: disabled.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding global configuration.', example='ip'),
      waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='Rule ID.', example='37286782688****'),
    }
  ](name='WaitingRoomRules', description='List of waiting room bypass rules.'),
}

model ListWaitingRoomRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomRulesResponseBody(name='body'),
}

/**
 * @summary Query Waiting Room Bypass Rules
 *
 * @description This API allows users to query the list of waiting room bypass rules associated with a specific site.
 *
 * @param request ListWaitingRoomRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomRulesResponse
 */
@context("listWaitingRoomRulesWithContext")
async function listWaitingRoomRulesWithOptions(request: ListWaitingRoomRulesRequest, runtime: $RuntimeOptions): ListWaitingRoomRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWaitingRoomRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Waiting Room Bypass Rules
 *
 * @description This API allows users to query the list of waiting room bypass rules associated with a specific site.
 *
 * @param request ListWaitingRoomRulesRequest
 * @return ListWaitingRoomRulesResponse
 */
async function listWaitingRoomRules(request: ListWaitingRoomRulesRequest): ListWaitingRoomRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listWaitingRoomRulesWithOptions(request, runtime);
}

model ListWaitingRoomsRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='120876698010528'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room. Specify this parameter to query the information about a specific waiting room.', example='6a51d5bc6460887abd1291dc7d4d****'),
}

model ListWaitingRoomsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to trace a call.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  waitingRooms?: [ 
    {
      cookieName?: string(name='CookieName', description='The name of the custom cookie.', example='__aliwaitingroom_example'),
      customPageHtml?: string(name='CustomPageHtml', description='The HTML content or identifier of the custom queuing page. This parameter is valid only when `WaitingRoomType` is set to `custom`. The content must be URL-encoded.'),
      description?: string(name='Description', description='The description of the waiting room.'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Indicates whether session renewal is disabled. Valid values:

*   on
*   off', example='on'),
      enable?: string(name='Enable', description='Indicates whether the waiting room is enabled. Valid values:

*   on
*   off', example='on'),
      hostNameAndPath?: [ 
        {
          domain?: string(name='Domain', description='The domain name.', example='example.com'),
          path?: string(name='Path', description='The path.', example='/test'),
          subdomain?: string(name='Subdomain', description='The subdomain.', example='test.'),
        }
      ](name='HostNameAndPath', description='The hostname and path.'),
      jsonResponseEnable?: string(name='JsonResponseEnable', description='Indicates whether JSON response is enabled. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
      language?: string(name='Language', description='The language of the waiting room page. This parameter is returned when the waiting room type is set to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
      name?: string(name='Name', description='The name of the waiting room.'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='200'),
      queueAllEnable?: string(name='QueueAllEnable', description='Indicates whether all requests must be queued. Valid values:

*   on
*   off', example='on'),
      queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='random'),
      queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
      sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='3600'),
      totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='300'),
      waitingRoomId?: string(name='WaitingRoomId', description='The unique ID of the waiting room.', example='6a51d5bc6460887abd1291dc7d4d****'),
      waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='default'),
    }
  ](name='WaitingRooms', description='The waiting rooms.'),
}

model ListWaitingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomsResponseBody(name='body'),
}

/**
 * @summary Queries the information about all waiting rooms in a website.
 *
 * @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
 *
 * @param request ListWaitingRoomsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomsResponse
 */
@context("listWaitingRoomsWithContext")
async function listWaitingRoomsWithOptions(request: ListWaitingRoomsRequest, runtime: $RuntimeOptions): ListWaitingRoomsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWaitingRooms',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about all waiting rooms in a website.
 *
 * @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
 *
 * @param request ListWaitingRoomsRequest
 * @return ListWaitingRoomsResponse
 */
async function listWaitingRooms(request: ListWaitingRoomsRequest): ListWaitingRoomsResponse {
  var runtime = new $RuntimeOptions{};
  return listWaitingRoomsWithOptions(request, runtime);
}

model OpenErServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model OpenErServiceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='5CC228B4-7A67-4016-9C9F-4A4133494A91'),
}

model OpenErServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenErServiceResponseBody(name='body'),
}

/**
 * @summary OpenErService
 *
 * @param request OpenErServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OpenErServiceResponse
 */
@context("openErServiceWithContext")
async function openErServiceWithOptions(request: OpenErServiceRequest, runtime: $RuntimeOptions): OpenErServiceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OpenErService',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary OpenErService
 *
 * @param request OpenErServiceRequest
 * @return OpenErServiceResponse
 */
async function openErService(request: OpenErServiceRequest): OpenErServiceResponse {
  var runtime = new $RuntimeOptions{};
  return openErServiceWithOptions(request, runtime);
}

model PreloadCachesRequest {
  content?: [ string ](name='Content', description='The files to be prefetched.'),
  headers?: map[string]string(name='Headers', description='By default, prefetch requests include the Accept-Encoding:gzip header. If you want a prefetch request to include other headers or implement multi-replica prefetch, you can specify a custom prefetch header by configuring the Headers parameter.'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
}

model PreloadCachesShrinkRequest {
  contentShrink?: string(name='Content', description='The files to be prefetched.'),
  headersShrink?: string(name='Headers', description='By default, prefetch requests include the Accept-Encoding:gzip header. If you want a prefetch request to include other headers or implement multi-replica prefetch, you can specify a custom prefetch header by configuring the Headers parameter.'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
}

model PreloadCachesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  taskId?: string(name='TaskId', description='The prefetch task ID.', example='16401427840'),
}

model PreloadCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreloadCachesResponseBody(name='body'),
}

/**
 * @summary Prefetches cache.
 *
 * @param tmpReq PreloadCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PreloadCachesResponse
 */
@context("preloadCachesWithContext")
async function preloadCachesWithOptions(tmpReq: PreloadCachesRequest, runtime: $RuntimeOptions): PreloadCachesResponse {
  tmpReq.validate();
  var request = new PreloadCachesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!$isNull(tmpReq.headers)) {
    request.headersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.headers, 'Headers', 'json');
  }
  var query = {};
  if (!$isNull(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!$isNull(request.headersShrink)) {
    query['Headers'] = request.headersShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PreloadCaches',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Prefetches cache.
 *
 * @param request PreloadCachesRequest
 * @return PreloadCachesResponse
 */
async function preloadCaches(request: PreloadCachesRequest): PreloadCachesResponse {
  var runtime = new $RuntimeOptions{};
  return preloadCachesWithOptions(request, runtime);
}

model PublishEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  fullRelease?: boolean(name='FullRelease', description='Specifies whether to fully release the version. This parameter takes effect only when PublishType is set to region.', example='true'),
  percentage?: int32(name='Percentage', description='The release percentage. Valid values: 1 to 100. Default value: 100.', example='100'),
  publishEnv?: string(name='PublishEnv', description='The environment to which you want to release the version. Valid values:

*   prod: the production environment.
*   staging: the staging environment.

This parameter is required.', example='prod'),
  publishType?: string(name='PublishType', description='Specifies how the version is released. Valid values:

*   percentage: releases the version by percentage.
*   region: releases the version by region.

If you do not specify this parameter, the version is released by percentage by default.', example='percentage'),
  regions?: [ string ](name='Regions', description='The regions to which the version is released.'),
  remarks?: string(name='Remarks', description='The remarks. This parameter is empty by default.', example='test publish app'),
  startTime?: string(name='StartTime', description='The time when the application version starts to be released. If you do not specify this parameter, the current time is used by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2023-06-05T16:00:00Z'),
  versionId?: string(name='VersionId', description='The version ID.

This parameter is required.', example='ver-87962637161651****'),
}

model PublishEdgeContainerAppVersionShrinkRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  fullRelease?: boolean(name='FullRelease', description='Specifies whether to fully release the version. This parameter takes effect only when PublishType is set to region.', example='true'),
  percentage?: int32(name='Percentage', description='The release percentage. Valid values: 1 to 100. Default value: 100.', example='100'),
  publishEnv?: string(name='PublishEnv', description='The environment to which you want to release the version. Valid values:

*   prod: the production environment.
*   staging: the staging environment.

This parameter is required.', example='prod'),
  publishType?: string(name='PublishType', description='Specifies how the version is released. Valid values:

*   percentage: releases the version by percentage.
*   region: releases the version by region.

If you do not specify this parameter, the version is released by percentage by default.', example='percentage'),
  regionsShrink?: string(name='Regions', description='The regions to which the version is released.'),
  remarks?: string(name='Remarks', description='The remarks. This parameter is empty by default.', example='test publish app'),
  startTime?: string(name='StartTime', description='The time when the application version starts to be released. If you do not specify this parameter, the current time is used by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2023-06-05T16:00:00Z'),
  versionId?: string(name='VersionId', description='The version ID.

This parameter is required.', example='ver-87962637161651****'),
}

model PublishEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model PublishEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
 *
 * @param tmpReq PublishEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishEdgeContainerAppVersionResponse
 */
@context("publishEdgeContainerAppVersionWithContext")
async function publishEdgeContainerAppVersionWithOptions(tmpReq: PublishEdgeContainerAppVersionRequest, runtime: $RuntimeOptions): PublishEdgeContainerAppVersionResponse {
  tmpReq.validate();
  var request = new PublishEdgeContainerAppVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.regions)) {
    request.regionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regions, 'Regions', 'json');
  }
  var query = {};
  if (!$isNull(request.fullRelease)) {
    query['FullRelease'] = request.fullRelease;
  }
  if (!$isNull(request.publishType)) {
    query['PublishType'] = request.publishType;
  }
  if (!$isNull(request.regionsShrink)) {
    query['Regions'] = request.regionsShrink;
  }
  if (!$isNull(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.percentage)) {
    body['Percentage'] = request.percentage;
  }
  if (!$isNull(request.publishEnv)) {
    body['PublishEnv'] = request.publishEnv;
  }
  if (!$isNull(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  if (!$isNull(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PublishEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
 *
 * @param request PublishEdgeContainerAppVersionRequest
 * @return PublishEdgeContainerAppVersionResponse
 */
async function publishEdgeContainerAppVersion(request: PublishEdgeContainerAppVersionRequest): PublishEdgeContainerAppVersionResponse {
  var runtime = new $RuntimeOptions{};
  return publishEdgeContainerAppVersionWithOptions(request, runtime);
}

model PublishRoutineCodeVersionRequest {
  codeVersion?: string(name='CodeVersion', description='The code version to be released.', example='1710120201067203242'),
  env?: string(name='Env', description='The environment name.

This parameter is required.', example='production'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='PublishRoutineCodeVersion'),
}

model PublishRoutineCodeVersionResponseBody = {
  codeVersion?: string(name='CodeVersion', description='The code version.', example='1710120201067203242'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model PublishRoutineCodeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishRoutineCodeVersionResponseBody(name='body'),
}

/**
 * @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
 *
 * @param request PublishRoutineCodeVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishRoutineCodeVersionResponse
 */
@context("publishRoutineCodeVersionWithContext")
async function publishRoutineCodeVersionWithOptions(request: PublishRoutineCodeVersionRequest, runtime: $RuntimeOptions): PublishRoutineCodeVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.codeVersion)) {
    body['CodeVersion'] = request.codeVersion;
  }
  if (!$isNull(request.env)) {
    body['Env'] = request.env;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PublishRoutineCodeVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
 *
 * @param request PublishRoutineCodeVersionRequest
 * @return PublishRoutineCodeVersionResponse
 */
async function publishRoutineCodeVersion(request: PublishRoutineCodeVersionRequest): PublishRoutineCodeVersionResponse {
  var runtime = new $RuntimeOptions{};
  return publishRoutineCodeVersionWithOptions(request, runtime);
}

model PurchaseCacheReserveRequest {
  autoPay?: boolean(name='AutoPay', description='Whether to automatically pay. The default value is false.
- true: Automatically pay.
- false: Do not automatically pay.', example='true'),
  autoRenew?: boolean(name='AutoRenew', description='Whether to auto-renew:
- true: Auto-renew.
- false: Do not auto-renew.', example='true'),
  chargeType?: string(name='ChargeType', description='Billing type
- PREPAY: Prepaid.
- POSTPAY: Postpaid.', example='PREPAY'),
  crRegion?: string(name='CrRegion', description='Cache retention region
- HK: Hong Kong, China
- CN-beijing: Mainland China - Beijing', example='HK'),
  period?: int32(name='Period', description='Purchase period (unit: month).', example='3'),
  quotaGb?: long(name='QuotaGb', description='Cache retention specification (unit: GB).', example='512000'),
}

model PurchaseCacheReserveResponseBody = {
  instanceId?: string(name='InstanceId', description='Instance ID.', example='xcdn-ad*****s11w'),
  orderId?: string(name='OrderId', description='Order ID.', example='31223****11'),
  requestId?: string(name='RequestId', description='Request ID.', example='30423A7F-A83D-1E24-B80E-86DD25790758'),
}

model PurchaseCacheReserveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurchaseCacheReserveResponseBody(name='body'),
}

/**
 * @summary New Purchase of Cache Retention
 *
 * @param request PurchaseCacheReserveRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PurchaseCacheReserveResponse
 */
@context("purchaseCacheReserveWithContext")
async function purchaseCacheReserveWithOptions(request: PurchaseCacheReserveRequest, runtime: $RuntimeOptions): PurchaseCacheReserveResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.crRegion)) {
    query['CrRegion'] = request.crRegion;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.quotaGb)) {
    query['QuotaGb'] = request.quotaGb;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PurchaseCacheReserve',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary New Purchase of Cache Retention
 *
 * @param request PurchaseCacheReserveRequest
 * @return PurchaseCacheReserveResponse
 */
async function purchaseCacheReserve(request: PurchaseCacheReserveRequest): PurchaseCacheReserveResponse {
  var runtime = new $RuntimeOptions{};
  return purchaseCacheReserveWithOptions(request, runtime);
}

model PurchaseRatePlanRequest {
  amount?: int32(name='Amount'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto payment.', example='true'),
  autoRenew?: boolean(name='AutoRenew', description='Auto-renewal:
- true: Enable auto-renewal.
- false: Disable auto-renewal.', example='true'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   PREPAY: subscription.
*   POSTPAY: pay-as-you-go.', example='PREPAY'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   domestic: the Chinese mainland.
*   global: global.
*   overseas: outside the Chinese mainland.', example='domestic'),
  period?: int32(name='Period', description='Subscription period (in months).', example='1'),
  planCode?: string(name='PlanCode', description='Package code.', example='entranceplan'),
  planName?: string(name='PlanName', description='Package name.', example='basic'),
  siteName?: string(name='SiteName', description='Site name.', example='test.com'),
  type?: string(name='Type', description='The DNS setup option for the website. Valid values:

*   NS
*   CNAME', example='CNAME'),
}

model PurchaseRatePlanResponseBody = {
  instanceId?: string(name='InstanceId', description='Instance ID.', example='esa-site-ads11w'),
  orderId?: string(name='OrderId', description='Order ID.', example='123123'),
  requestId?: string(name='RequestId', description='Request ID.', example='30423A7F-A83D-1E24-B80E-86DD25790758'),
}

model PurchaseRatePlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurchaseRatePlanResponseBody(name='body'),
}

/**
 * @summary Purchase New Package
 *
 * @description 1. The package name and code can be obtained from the DescribeRatePlanPrice interface.
 * 2. If the acceleration area is not overseas, the site must have successfully completed the filing process.
 *
 * @param request PurchaseRatePlanRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PurchaseRatePlanResponse
 */
@context("purchaseRatePlanWithContext")
async function purchaseRatePlanWithOptions(request: PurchaseRatePlanRequest, runtime: $RuntimeOptions): PurchaseRatePlanResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!$isNull(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.planCode)) {
    query['PlanCode'] = request.planCode;
  }
  if (!$isNull(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!$isNull(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PurchaseRatePlan',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Purchase New Package
 *
 * @description 1. The package name and code can be obtained from the DescribeRatePlanPrice interface.
 * 2. If the acceleration area is not overseas, the site must have successfully completed the filing process.
 *
 * @param request PurchaseRatePlanRequest
 * @return PurchaseRatePlanResponse
 */
async function purchaseRatePlan(request: PurchaseRatePlanRequest): PurchaseRatePlanResponse {
  var runtime = new $RuntimeOptions{};
  return purchaseRatePlanWithOptions(request, runtime);
}

model PurgeCachesRequest {
  content?: {
    cacheKeys?: [ 
      {
        headers?: map[string]string(name='Headers', description='When refreshing, specify the header information corresponding to the cache key. When the custom cache key feature switch is enabled, the cache key will be generated based on the specified header for refreshing.

**UserGeo: Country/Region**
- Country/region codes follow the ISO 3166-2 standard.

**UserDeviceType: Device Type, currently there are three enum values**
- desktop
 - tablet
 - mobile

**UserLanguage: Language**
- Language codes follow the ISO 639-1 or BCP47 standards. For example, input \\\\"zh\\\\" to refresh content in Chinese.'),
        url?: string(name='Url', description='URL address to be refreshed.', example='http://a.com/1.jpg?b=1'),
      }
    ](name='CacheKeys', description='List of cachekeys to be refreshed, required when the type is cachekey.'),
    cacheTags?: [ string ](name='CacheTags', description='List of cachetags to be refreshed, required when the type is cachetag.'),
    directories?: [ string ](name='Directories', description='List of directories to be refreshed, required when the type is directory.'),
    files?: [ any ](name='Files', description='List of files to be refreshed, required when the type is file.'),
    hostnames?: [ string ](name='Hostnames', description='List of hostnames to be refreshed, required when the type is hostname.'),
    ignoreParams?: [ string ](name='IgnoreParams', description='List of files with ignored parameters, required when the type is ignoreParams.'),
    purgeAll?: boolean(name='PurgeAll', description='Flag for purging all content. Default is false, set to true when the type is purgeall.', example='true'),
  }(name='Content', description='Content to be refreshed.'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', description='Used for refreshing cached resources in edge computing, such as allowing the refresh of content cached using the CacheAPI interface of an edge function.', example='true'),
  force?: boolean(name='Force', description='Indicates whether to refresh all resources under the directory when the content from the origin and the source resource are inconsistent. The default is false.
- **true**: Refreshes all resources under the specified directory.
- **false**: Refreshes only the changed resources under the specified directory.

> 
>  Applies to: Directory refresh, cachetag refresh, ignoreParams refresh, hostname refresh, and purge all cache of the site.', example='true'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of refresh task. Possible values:
- **file** (default): File refresh.
- **cachekey**: Cachekey refresh.
- **cachetag**: Cachetag refresh.
- **directory**: Directory refresh.
- **ignoreParams**: Ignore parameters refresh. Ignoring parameters means removing the ? and everything after it in the request URL. When performing an ignore parameters refresh, the user first submits the URL without parameters through the interface. The submitted URLs to be refreshed will then be matched against the cached resource URLs with the parameters removed. If the cached resource URL, after removing the parameters, matches the URL to be refreshed, the CDN node will refresh the cached resources.
- **hostname**: Hostname refresh.
- **purgeall**: Purge all cache under the site.

This parameter is required.', example='file'),
}

model PurgeCachesShrinkRequest {
  contentShrink?: string(name='Content', description='Content to be refreshed.'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', description='Used for refreshing cached resources in edge computing, such as allowing the refresh of content cached using the CacheAPI interface of an edge function.', example='true'),
  force?: boolean(name='Force', description='Indicates whether to refresh all resources under the directory when the content from the origin and the source resource are inconsistent. The default is false.
- **true**: Refreshes all resources under the specified directory.
- **false**: Refreshes only the changed resources under the specified directory.

> 
>  Applies to: Directory refresh, cachetag refresh, ignoreParams refresh, hostname refresh, and purge all cache of the site.', example='true'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of refresh task. Possible values:
- **file** (default): File refresh.
- **cachekey**: Cachekey refresh.
- **cachetag**: Cachetag refresh.
- **directory**: Directory refresh.
- **ignoreParams**: Ignore parameters refresh. Ignoring parameters means removing the ? and everything after it in the request URL. When performing an ignore parameters refresh, the user first submits the URL without parameters through the interface. The submitted URLs to be refreshed will then be matched against the cached resource URLs with the parameters removed. If the cached resource URL, after removing the parameters, matches the URL to be refreshed, the CDN node will refresh the cached resources.
- **hostname**: Hostname refresh.
- **purgeall**: Purge all cache under the site.

This parameter is required.', example='file'),
}

model PurgeCachesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  taskId?: string(name='TaskId', description='Task ID, which is returned when you create a refresh or preheat task.', example='15940956620'),
}

model PurgeCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurgeCachesResponseBody(name='body'),
}

/**
 * @summary Cache Refresh
 *
 * @param tmpReq PurgeCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PurgeCachesResponse
 */
@context("purgeCachesWithContext")
async function purgeCachesWithOptions(tmpReq: PurgeCachesRequest, runtime: $RuntimeOptions): PurgeCachesResponse {
  tmpReq.validate();
  var request = new PurgeCachesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!$isNull(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!$isNull(request.edgeComputePurge)) {
    query['EdgeComputePurge'] = request.edgeComputePurge;
  }
  if (!$isNull(request.force)) {
    query['Force'] = request.force;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PurgeCaches',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Cache Refresh
 *
 * @param request PurgeCachesRequest
 * @return PurgeCachesResponse
 */
async function purgeCaches(request: PurgeCachesRequest): PurgeCachesResponse {
  var runtime = new $RuntimeOptions{};
  return purgeCachesWithOptions(request, runtime);
}

model PutKvRequest {
  base64?: boolean(name='Base64', description='Specifies whether the content of the key is Base64-encoded. Set this parameter to true if you want to store the key content in binary format. When this parameter is set to true, the Value parameter must be Base64-encoded.', example='true'),
  expiration?: long(name='Expiration', description='The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='1690081381'),
  expirationTtl?: long(name='ExpirationTtl', description='The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='3600'),
  key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  value?: string(name='Value', description='The content of the key, which can be up to 2 MB (2 × 1000 × 1000). If the content is larger than 2 MB, call [PutKvWithHighCapacity](https://help.aliyun.com/document_detail/2850486.html).

This parameter is required.', example='test_value'),
}

model PutKvResponseBody = {
  length?: string(name='Length', description='The length of the value in the key-value pair.', example='4'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', description='The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.', example='test'),
}

model PutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvResponseBody(name='body'),
}

/**
 * @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
 *
 * @param request PutKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutKvResponse
 */
@context("putKvWithContext")
async function putKvWithOptions(request: PutKvRequest, runtime: $RuntimeOptions): PutKvResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.base64)) {
    query['Base64'] = request.base64;
  }
  if (!$isNull(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!$isNull(request.expirationTtl)) {
    query['ExpirationTtl'] = request.expirationTtl;
  }
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!$isNull(request.value)) {
    body['Value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
 *
 * @param request PutKvRequest
 * @return PutKvResponse
 */
async function putKv(request: PutKvRequest): PutKvResponse {
  var runtime = new $RuntimeOptions{};
  return putKvWithOptions(request, runtime);
}

model PutKvWithHighCapacityRequest {
  key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namesapce'),
  url?: string(name='Url', description='The download URL of the key-value pair that you want to upload. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model PutKvWithHighCapacityAdvanceRequest {
  key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namesapce'),
  urlObject?: readable(name='Url', description='The download URL of the key-value pair that you want to upload. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model PutKvWithHighCapacityResponseBody = {
  length?: string(name='Length', description='The length of the value in the key-value pair.', example='4'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', description='The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.', example='test'),
}

model PutKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
 *     func TestPutKvWithHighCapacity() {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs.
 *     	namespace := "test-put-kv"
 *     	key := "test_PutKvWithHighCapacity_0"
 *     	value := strings.Repeat("t", 10*1024*1024)
 *     	rawReq := &PutKvRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		Value:     &value,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		UrlObject: bytes.NewReader([]byte(payload)),
 *     	}
 *     	resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request PutKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutKvWithHighCapacityResponse
 */
@context("putKvWithHighCapacityWithContext")
async function putKvWithHighCapacityWithOptions(request: PutKvWithHighCapacityRequest, runtime: $RuntimeOptions): PutKvWithHighCapacityResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
 *     func TestPutKvWithHighCapacity() {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs.
 *     	namespace := "test-put-kv"
 *     	key := "test_PutKvWithHighCapacity_0"
 *     	value := strings.Repeat("t", 10*1024*1024)
 *     	rawReq := &PutKvRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		Value:     &value,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		UrlObject: bytes.NewReader([]byte(payload)),
 *     	}
 *     	resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request PutKvWithHighCapacityRequest
 * @return PutKvWithHighCapacityResponse
 */
async function putKvWithHighCapacity(request: PutKvWithHighCapacityRequest): PutKvWithHighCapacityResponse {
  var runtime = new $RuntimeOptions{};
  return putKvWithHighCapacityWithOptions(request, runtime);
}

async function putKvWithHighCapacityAdvance(request: PutKvWithHighCapacityAdvanceRequest, runtime: $RuntimeOptions): PutKvWithHighCapacityResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'ESA',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var putKvWithHighCapacityReq = new PutKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, putKvWithHighCapacityReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    putKvWithHighCapacityReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var putKvWithHighCapacityResp = putKvWithHighCapacityWithOptions(putKvWithHighCapacityReq, runtime);
  return putKvWithHighCapacityResp;
}

model RebuildEdgeContainerAppStagingEnvRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-88068867578379****'),
}

model RebuildEdgeContainerAppStagingEnvResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
}

model RebuildEdgeContainerAppStagingEnvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebuildEdgeContainerAppStagingEnvResponseBody(name='body'),
}

/**
 * @summary Rebuilds the staging environment for containerized applications.
 *
 * @param request RebuildEdgeContainerAppStagingEnvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebuildEdgeContainerAppStagingEnvResponse
 */
@context("rebuildEdgeContainerAppStagingEnvWithContext")
async function rebuildEdgeContainerAppStagingEnvWithOptions(request: RebuildEdgeContainerAppStagingEnvRequest, runtime: $RuntimeOptions): RebuildEdgeContainerAppStagingEnvResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RebuildEdgeContainerAppStagingEnv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rebuilds the staging environment for containerized applications.
 *
 * @param request RebuildEdgeContainerAppStagingEnvRequest
 * @return RebuildEdgeContainerAppStagingEnvResponse
 */
async function rebuildEdgeContainerAppStagingEnv(request: RebuildEdgeContainerAppStagingEnvRequest): RebuildEdgeContainerAppStagingEnvResponse {
  var runtime = new $RuntimeOptions{};
  return rebuildEdgeContainerAppStagingEnvWithOptions(request, runtime);
}

model ResetScheduledPreloadJobRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.', example='ResetScheduledPreloadJob'),
}

model ResetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  createdAt?: string(name='CreatedAt', description='The time when the SQL task was created.', example='2024-06-02T02:23:26Z'),
  domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
  errorInfo?: string(name='ErrorInfo', description='The error message that is returned.', example='invalid domain:test.com'),
  failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
  id?: string(name='Id', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
  name?: string(name='Name', description='The delivery project name.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
  taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
  taskType?: string(name='TaskType', description='The task type. Valid values: refresh and preload.', example='preload'),
  urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
  urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
}

model ResetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
 *
 * @param request ResetScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetScheduledPreloadJobResponse
 */
@context("resetScheduledPreloadJobWithContext")
async function resetScheduledPreloadJobWithOptions(request: ResetScheduledPreloadJobRequest, runtime: $RuntimeOptions): ResetScheduledPreloadJobResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ResetScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
 *
 * @param request ResetScheduledPreloadJobRequest
 * @return ResetScheduledPreloadJobResponse
 */
async function resetScheduledPreloadJob(request: ResetScheduledPreloadJobRequest): ResetScheduledPreloadJobResponse {
  var runtime = new $RuntimeOptions{};
  return resetScheduledPreloadJobWithOptions(request, runtime);
}

model RevokeClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model RevokeClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model RevokeClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeClientCertificateResponseBody(name='body'),
}

/**
 * @summary Revokes an activated client certificate.
 *
 * @param request RevokeClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeClientCertificateResponse
 */
@context("revokeClientCertificateWithContext")
async function revokeClientCertificateWithOptions(request: RevokeClientCertificateRequest, runtime: $RuntimeOptions): RevokeClientCertificateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RevokeClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Revokes an activated client certificate.
 *
 * @param request RevokeClientCertificateRequest
 * @return RevokeClientCertificateResponse
 */
async function revokeClientCertificate(request: RevokeClientCertificateRequest): RevokeClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return revokeClientCertificateWithOptions(request, runtime);
}

model RollbackEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  percentage?: int32(name='Percentage'),
  remarks?: string(name='Remarks', description='The remarks.', example='test rollback app'),
  usedPercent?: boolean(name='UsedPercent'),
  versionId?: string(name='VersionId', description='The ID of version that you want to roll back.

This parameter is required.', example='ver-87962637161651****'),
}

model RollbackEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model RollbackEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RollbackEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Rolls back a version of a containerized application.
 *
 * @param request RollbackEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RollbackEdgeContainerAppVersionResponse
 */
@context("rollbackEdgeContainerAppVersionWithContext")
async function rollbackEdgeContainerAppVersionWithOptions(request: RollbackEdgeContainerAppVersionRequest, runtime: $RuntimeOptions): RollbackEdgeContainerAppVersionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.percentage)) {
    query['Percentage'] = request.percentage;
  }
  if (!$isNull(request.usedPercent)) {
    query['UsedPercent'] = request.usedPercent;
  }
  if (!$isNull(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RollbackEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rolls back a version of a containerized application.
 *
 * @param request RollbackEdgeContainerAppVersionRequest
 * @return RollbackEdgeContainerAppVersionResponse
 */
async function rollbackEdgeContainerAppVersion(request: RollbackEdgeContainerAppVersionRequest): RollbackEdgeContainerAppVersionResponse {
  var runtime = new $RuntimeOptions{};
  return rollbackEdgeContainerAppVersionWithOptions(request, runtime);
}

model SetCertificateRequest {
  casId?: long(name='CasId', description='The certificate ID on Certificate Management Service.', example='30000478'),
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  id?: string(name='Id', description='The certificate ID on ESA.', example='30001303'),
  name?: string(name='Name', description='The certificate name.', example='yourCertName'),
  ownerId?: long(name='OwnerId'),
  privateKey?: string(name='PrivateKey', description='The private key of the certificate.', example='-----BEGIN PRIVATE KEY-----'),
  region?: string(name='Region', description='The region.', example='cn-hangzhou'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  type?: string(name='Type', description='The certificate type. Valid values:

*   cas: a certificate purchased by using Certificate Management Service.
*   upload: a custom certificate that you upload.

This parameter is required.', example='cas'),
}

model SetCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaffe176ae44e2ad16d3e309b9e506'),
  requestId?: string(name='RequestId', description='The request ID.', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
}

model SetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetCertificateResponseBody(name='body'),
}

/**
 * @summary Configures whether to enable certificates and update certificate information for a website.
 *
 * @param request SetCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetCertificateResponse
 */
@context("setCertificateWithContext")
async function setCertificateWithOptions(request: SetCertificateRequest, runtime: $RuntimeOptions): SetCertificateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var body : map[string]any = {};
  if (!$isNull(request.casId)) {
    body['CasId'] = request.casId;
  }
  if (!$isNull(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.privateKey)) {
    body['PrivateKey'] = request.privateKey;
  }
  if (!$isNull(request.region)) {
    body['Region'] = request.region;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures whether to enable certificates and update certificate information for a website.
 *
 * @param request SetCertificateRequest
 * @return SetCertificateResponse
 */
async function setCertificate(request: SetCertificateRequest): SetCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return setCertificateWithOptions(request, runtime);
}

model SetClientCertificateHostnamesRequest {
  hostnames?: [ string ](name='Hostnames', description='The domain names to associate.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model SetClientCertificateHostnamesShrinkRequest {
  hostnamesShrink?: string(name='Hostnames', description='The domain names to associate.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model SetClientCertificateHostnamesResponseBody = {
  hostnames?: [ string ](name='Hostnames'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model SetClientCertificateHostnamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetClientCertificateHostnamesResponseBody(name='body'),
}

/**
 * @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
 *
 * @param tmpReq SetClientCertificateHostnamesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetClientCertificateHostnamesResponse
 */
@context("setClientCertificateHostnamesWithContext")
async function setClientCertificateHostnamesWithOptions(tmpReq: SetClientCertificateHostnamesRequest, runtime: $RuntimeOptions): SetClientCertificateHostnamesResponse {
  tmpReq.validate();
  var request = new SetClientCertificateHostnamesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.hostnames)) {
    request.hostnamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostnames, 'Hostnames', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.hostnamesShrink)) {
    body['Hostnames'] = request.hostnamesShrink;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetClientCertificateHostnames',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
 *
 * @param request SetClientCertificateHostnamesRequest
 * @return SetClientCertificateHostnamesResponse
 */
async function setClientCertificateHostnames(request: SetClientCertificateHostnamesRequest): SetClientCertificateHostnamesResponse {
  var runtime = new $RuntimeOptions{};
  return setClientCertificateHostnamesWithOptions(request, runtime);
}

model SetHttpDDoSAttackIntelligentProtectionRequest {
  aiMode?: string(name='AiMode', description='The mode of smart HTTP DDoS protection. Valid values:

*   **observe**: alert.
*   **defense**: block.

This parameter is required.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='The level of smart HTTP DDoS protection. Valid values:

*   **level0**: very loose.
*   **level30**: loose.
*   **level60**: normal.
*   **level90**: strict.

This parameter is required.', example='level60'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', description='The mode of smart HTTP DDoS protection. Valid values:

*   **observe**: alert.
*   **defense**: block.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='The level of smart HTTP DDoS protection. Valid values:

*   **level0**: very loose.
*   **level30**: loose.
*   **level60**: normal.
*   **level90**: strict.', example='level60'),
  requestId?: string(name='RequestId', description='The request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
 * @summary Configures smart HTTP DDoS protection.
 *
 * @param request SetHttpDDoSAttackIntelligentProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
@context("setHttpDDoSAttackIntelligentProtectionWithContext")
async function setHttpDDoSAttackIntelligentProtectionWithOptions(request: SetHttpDDoSAttackIntelligentProtectionRequest, runtime: $RuntimeOptions): SetHttpDDoSAttackIntelligentProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aiMode)) {
    query['AiMode'] = request.aiMode;
  }
  if (!$isNull(request.aiTemplate)) {
    query['AiTemplate'] = request.aiTemplate;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetHttpDDoSAttackIntelligentProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures smart HTTP DDoS protection.
 *
 * @param request SetHttpDDoSAttackIntelligentProtectionRequest
 * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
async function setHttpDDoSAttackIntelligentProtection(request: SetHttpDDoSAttackIntelligentProtectionRequest): SetHttpDDoSAttackIntelligentProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return setHttpDDoSAttackIntelligentProtectionWithOptions(request, runtime);
}

model SetHttpDDoSAttackProtectionRequest {
  globalMode?: string(name='GlobalMode', description='The level of HTTP DDoS attack protection. Valid values:

*   **very weak**: very loose.
*   **weak**: loose.
*   **default**: normal.
*   **hard**: strict.

This parameter is required.', example='default'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', description='The level of HTTP DDoS attack protection.', example='default'),
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
 * @summary Configures HTTP DDoS attack protection for a website.
 *
 * @param request SetHttpDDoSAttackProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetHttpDDoSAttackProtectionResponse
 */
@context("setHttpDDoSAttackProtectionWithContext")
async function setHttpDDoSAttackProtectionWithOptions(request: SetHttpDDoSAttackProtectionRequest, runtime: $RuntimeOptions): SetHttpDDoSAttackProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.globalMode)) {
    query['GlobalMode'] = request.globalMode;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetHttpDDoSAttackProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures HTTP DDoS attack protection for a website.
 *
 * @param request SetHttpDDoSAttackProtectionRequest
 * @return SetHttpDDoSAttackProtectionResponse
 */
async function setHttpDDoSAttackProtection(request: SetHttpDDoSAttackProtectionRequest): SetHttpDDoSAttackProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return setHttpDDoSAttackProtectionWithOptions(request, runtime);
}

model SetOriginClientCertificateHostnamesRequest {
  hostnames?: [ string ](name='Hostnames', description='The domain names to associate.

This parameter is required.'),
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model SetOriginClientCertificateHostnamesShrinkRequest {
  hostnamesShrink?: string(name='Hostnames', description='The domain names to associate.

This parameter is required.'),
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaabcd****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model SetOriginClientCertificateHostnamesResponseBody = {
  hostnames?: [ string ](name='Hostnames', description='The domain name.'),
  id?: string(name='Id', description='The ID of the client certificate.', example='babaabcd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model SetOriginClientCertificateHostnamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetOriginClientCertificateHostnamesResponseBody(name='body'),
}

/**
 * @summary 为域名回源客户端证书绑定域名
 *
 * @param tmpReq SetOriginClientCertificateHostnamesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetOriginClientCertificateHostnamesResponse
 */
@context("setOriginClientCertificateHostnamesWithContext")
async function setOriginClientCertificateHostnamesWithOptions(tmpReq: SetOriginClientCertificateHostnamesRequest, runtime: $RuntimeOptions): SetOriginClientCertificateHostnamesResponse {
  tmpReq.validate();
  var request = new SetOriginClientCertificateHostnamesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.hostnames)) {
    request.hostnamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostnames, 'Hostnames', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.hostnamesShrink)) {
    body['Hostnames'] = request.hostnamesShrink;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetOriginClientCertificateHostnames',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 为域名回源客户端证书绑定域名
 *
 * @param request SetOriginClientCertificateHostnamesRequest
 * @return SetOriginClientCertificateHostnamesResponse
 */
async function setOriginClientCertificateHostnames(request: SetOriginClientCertificateHostnamesRequest): SetOriginClientCertificateHostnamesResponse {
  var runtime = new $RuntimeOptions{};
  return setOriginClientCertificateHostnamesWithOptions(request, runtime);
}

model StartScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='StartScheduledPreloadExecution'),
}

model StartScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.', example='665d3b48621bccf3fe29e1a7'),
  interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
  jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
  status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='waiting'),
}

model StartScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Starts a scheduled prefetch plan based on the plan ID.
 *
 * @param request StartScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartScheduledPreloadExecutionResponse
 */
@context("startScheduledPreloadExecutionWithContext")
async function startScheduledPreloadExecutionWithOptions(request: StartScheduledPreloadExecutionRequest, runtime: $RuntimeOptions): StartScheduledPreloadExecutionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts a scheduled prefetch plan based on the plan ID.
 *
 * @param request StartScheduledPreloadExecutionRequest
 * @return StartScheduledPreloadExecutionResponse
 */
async function startScheduledPreloadExecution(request: StartScheduledPreloadExecutionRequest): StartScheduledPreloadExecutionResponse {
  var runtime = new $RuntimeOptions{};
  return startScheduledPreloadExecutionWithOptions(request, runtime);
}

model StopScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='StopScheduledPreloadExecution'),
}

model StopScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
  interval?: int32(name='Interval', description='The time interval between each batch execution in the plan. Unit: seconds.', example='60'),
  jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
  status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='stopped'),
}

model StopScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Stops a scheduled prefetch plan based on the plan ID.
 *
 * @param request StopScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopScheduledPreloadExecutionResponse
 */
@context("stopScheduledPreloadExecutionWithContext")
async function stopScheduledPreloadExecutionWithOptions(request: StopScheduledPreloadExecutionRequest, runtime: $RuntimeOptions): StopScheduledPreloadExecutionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops a scheduled prefetch plan based on the plan ID.
 *
 * @param request StopScheduledPreloadExecutionRequest
 * @return StopScheduledPreloadExecutionResponse
 */
async function stopScheduledPreloadExecution(request: StopScheduledPreloadExecutionRequest): StopScheduledPreloadExecutionResponse {
  var runtime = new $RuntimeOptions{};
  return stopScheduledPreloadExecutionWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource. Valid values of N: **1** to **50**.

This parameter is required.'),
  resourceType?: string(name='ResourceType', description='The resource type, which can only be **site**.

This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys.

This parameter is required.', example='env'),
      value?: string(name='Value', description='The tag value.

This parameter is required.', example='value'),
    }
  ](name='Tag', description='The tags that you want to add to the resource. You can enter up to 20 tags.

This parameter is required.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
 * @summary Adds one or more tags to resources.
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
@context("tagResourcesWithContext")
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: $RuntimeOptions): TagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds one or more tags to resources.
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags. Valid values:

*   **true**
*   **false**

Default value: **false**.', example='false'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the resources reside. Set the value to **cn-hangzhou**.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N. Valid values of N: **1** to **50**.

This parameter is required.'),
  resourceType?: string(name='ResourceType', description='The resource type.

This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tagKey?: [ string ](name='TagKey', description='The key of tag N to remove from the resource. Valid values of N: **1** to **20**.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @summary Deletes a resource tag based on a specified resource ID.
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
@context("untagResourcesWithContext")
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $RuntimeOptions): UntagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.all)) {
    query['All'] = request.all;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!$isNull(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UntagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a resource tag based on a specified resource ID.
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCacheReserveSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto payment.', example='true'),
  chargeType?: string(name='ChargeType', example='PREPAY'),
  instanceId?: string(name='InstanceId', example='esa-cr-9tuv*********'),
  targetQuotaGb?: long(name='TargetQuotaGb', example='1000'),
}

model UpdateCacheReserveSpecResponseBody = {
  instanceId?: string(name='InstanceId', example='esa-cr-9tuv*********'),
  orderId?: string(name='OrderId', example='2223332122***'),
  requestId?: string(name='RequestId', example='40423A7F-A83D-1E24-B80E-86DD25790759'),
}

model UpdateCacheReserveSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCacheReserveSpecResponseBody(name='body'),
}

/**
 * @summary 缓存保持变配
 *
 * @param request UpdateCacheReserveSpecRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCacheReserveSpecResponse
 */
@context("updateCacheReserveSpecWithContext")
async function updateCacheReserveSpecWithOptions(request: UpdateCacheReserveSpecRequest, runtime: $RuntimeOptions): UpdateCacheReserveSpecResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.targetQuotaGb)) {
    query['TargetQuotaGb'] = request.targetQuotaGb;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCacheReserveSpec',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 缓存保持变配
 *
 * @param request UpdateCacheReserveSpecRequest
 * @return UpdateCacheReserveSpecResponse
 */
async function updateCacheReserveSpec(request: UpdateCacheReserveSpecRequest): UpdateCacheReserveSpecResponse {
  var runtime = new $RuntimeOptions{};
  return updateCacheReserveSpecWithOptions(request, runtime);
}

model UpdateCacheRuleRequest {
  additionalCacheablePorts?: string(name='AdditionalCacheablePorts', description='Enable caching on specified ports. Value range: 8880, 2052, 2082, 2086, 2095, 2053, 2083, 2087, 2096.', example='8880'),
  browserCacheMode?: string(name='BrowserCacheMode', description='Browser cache mode. Value range:
- no_cache: Do not cache.
- follow_origin: Follow origin cache policy.
- override_origin: Override origin cache policy.', example='no_cache'),
  browserCacheTtl?: string(name='BrowserCacheTtl', description='Browser cache expiration time, in seconds.', example='300'),
  bypassCache?: string(name='BypassCache', description='Set bypass cache mode. Value range:
- cache_all: Cache all requests.
- bypass_all: Bypass cache for all requests.', example='cache_all'),
  cacheDeceptionArmor?: string(name='CacheDeceptionArmor', description='Cache deception defense. Used to defend against web cache deception attacks; only the cache content that passes the validation will be cached. Value range:
- on: Enable.
- off: Disable.', example='on'),
  cacheReserveEligibility?: string(name='CacheReserveEligibility', description='Cache retention eligibility. Used to control whether user requests bypass the cache retention node when returning to the origin. Value range:
- bypass_cache_reserve: Requests bypass cache retention.
- eligible_for_cache_reserve: Eligible for cache retention.', example='bypass_cache_reserve'),
  checkPresenceCookie?: string(name='CheckPresenceCookie', description='Check if the cookie exists when generating cache keys, and if it does, add the cookie name (case-insensitive) to the cache key. Supports multiple cookie names, separated by spaces.', example='cookiename'),
  checkPresenceHeader?: string(name='CheckPresenceHeader', description='Check if the header exists when generating cache keys, and if it does, add the header name (case-insensitive) to the cache key. Supports multiple header names, separated by spaces.', example='headername'),
  configId?: long(name='ConfigId', description='Configuration ID.

This parameter is required.', example='35281609698****'),
  edgeCacheMode?: string(name='EdgeCacheMode', description='Edge cache mode. Value range:
- follow_origin: Follow origin cache policy (if exists), otherwise use the default cache policy.
- no_cache: Do not cache.
- override_origin: Override origin cache policy.
- follow_origin_bypass: Follow origin cache policy (if exists), otherwise do not cache.', example='follow_origin'),
  edgeCacheTtl?: string(name='EdgeCacheTtl', description='Edge cache expiration time, in seconds.', example='300'),
  edgeStatusCodeCacheTtl?: string(name='EdgeStatusCodeCacheTtl', description='Status code cache expiration time, in seconds.', example='300'),
  includeCookie?: string(name='IncludeCookie', description='Include the specified cookie names and their values when generating cache keys, supporting multiple values separated by spaces.', example='cookiename'),
  includeHeader?: string(name='IncludeHeader', description='Include the specified header names and their values when generating cache keys, supporting multiple values separated by spaces.', example='headername'),
  queryString?: string(name='QueryString', description='Query strings to be retained or excluded, supporting multiple values separated by spaces.', example='example'),
  queryStringMode?: string(name='QueryStringMode', description='The processing mode of query strings when generating cache keys. Values:
- ignore_all: Ignore all.
- exclude_query_string: Exclude specified query strings.
- reserve_all: Default, reserve all.
- include_query_string: Include specified query strings.', example='ignore_all'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  serveStale?: string(name='ServeStale', description='Serve stale cache. When enabled, the node can still use the expired cached files to respond to user requests even if the origin server is unavailable. Value range:
- on: Enable.
- off: Disable.', example='on'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
  sortQueryStringForCache?: string(name='SortQueryStringForCache', description='Query string sorting. Value range:
- on: Enable.
- off: Disable.', example='on'),
  userDeviceType?: string(name='UserDeviceType', description='When generating cache keys, include the client device type. Value range: 
- on: enabled. 
- off: disabled.', example='on'),
  userGeo?: string(name='UserGeo', description='Include the client\\\\"s geographical location when generating the cache key. Value range:
- on: Enable.
- off: Disable.', example='on'),
  userLanguage?: string(name='UserLanguage', description='Include the client\\\\"s language type when generating the cache key. Value range:
- on: Enable.
- off: Disable.', example='on'),
}

model UpdateCacheRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateCacheRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCacheRuleResponseBody(name='body'),
}

/**
 * @summary Modify cache configuration
 *
 * @param request UpdateCacheRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCacheRuleResponse
 */
@context("updateCacheRuleWithContext")
async function updateCacheRuleWithOptions(request: UpdateCacheRuleRequest, runtime: $RuntimeOptions): UpdateCacheRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.additionalCacheablePorts)) {
    query['AdditionalCacheablePorts'] = request.additionalCacheablePorts;
  }
  if (!$isNull(request.browserCacheMode)) {
    query['BrowserCacheMode'] = request.browserCacheMode;
  }
  if (!$isNull(request.browserCacheTtl)) {
    query['BrowserCacheTtl'] = request.browserCacheTtl;
  }
  if (!$isNull(request.bypassCache)) {
    query['BypassCache'] = request.bypassCache;
  }
  if (!$isNull(request.cacheDeceptionArmor)) {
    query['CacheDeceptionArmor'] = request.cacheDeceptionArmor;
  }
  if (!$isNull(request.cacheReserveEligibility)) {
    query['CacheReserveEligibility'] = request.cacheReserveEligibility;
  }
  if (!$isNull(request.checkPresenceCookie)) {
    query['CheckPresenceCookie'] = request.checkPresenceCookie;
  }
  if (!$isNull(request.checkPresenceHeader)) {
    query['CheckPresenceHeader'] = request.checkPresenceHeader;
  }
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.edgeCacheMode)) {
    query['EdgeCacheMode'] = request.edgeCacheMode;
  }
  if (!$isNull(request.edgeCacheTtl)) {
    query['EdgeCacheTtl'] = request.edgeCacheTtl;
  }
  if (!$isNull(request.edgeStatusCodeCacheTtl)) {
    query['EdgeStatusCodeCacheTtl'] = request.edgeStatusCodeCacheTtl;
  }
  if (!$isNull(request.includeCookie)) {
    query['IncludeCookie'] = request.includeCookie;
  }
  if (!$isNull(request.includeHeader)) {
    query['IncludeHeader'] = request.includeHeader;
  }
  if (!$isNull(request.queryString)) {
    query['QueryString'] = request.queryString;
  }
  if (!$isNull(request.queryStringMode)) {
    query['QueryStringMode'] = request.queryStringMode;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.serveStale)) {
    query['ServeStale'] = request.serveStale;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.sortQueryStringForCache)) {
    query['SortQueryStringForCache'] = request.sortQueryStringForCache;
  }
  if (!$isNull(request.userDeviceType)) {
    query['UserDeviceType'] = request.userDeviceType;
  }
  if (!$isNull(request.userGeo)) {
    query['UserGeo'] = request.userGeo;
  }
  if (!$isNull(request.userLanguage)) {
    query['UserLanguage'] = request.userLanguage;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCacheRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify cache configuration
 *
 * @param request UpdateCacheRuleRequest
 * @return UpdateCacheRuleResponse
 */
async function updateCacheRule(request: UpdateCacheRuleRequest): UpdateCacheRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateCacheRuleWithOptions(request, runtime);
}

model UpdateCacheTagRequest {
  caseInsensitive?: string(name='CaseInsensitive', description='Specifies whether to ignore case sensitivity. Valid values:

*   on
*   off', example='on'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='5407498413****'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the website configurations. You can use this parameter to specify a version of your website to apply the feature settings. By default, version 0 is used.', example='1'),
  tagName?: string(name='TagName', description='The name of the custom cache tag.', example='example'),
}

model UpdateCacheTagResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model UpdateCacheTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCacheTagResponseBody(name='body'),
}

/**
 * @summary Modifies the cache tag configuration of your website. You can call this operation when you need to specify tags in the Cache-Tag response header to use the purge by cache tag feature.
 *
 * @param request UpdateCacheTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCacheTagResponse
 */
@context("updateCacheTagWithContext")
async function updateCacheTagWithOptions(request: UpdateCacheTagRequest, runtime: $RuntimeOptions): UpdateCacheTagResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.caseInsensitive)) {
    query['CaseInsensitive'] = request.caseInsensitive;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  if (!$isNull(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCacheTag',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the cache tag configuration of your website. You can call this operation when you need to specify tags in the Cache-Tag response header to use the purge by cache tag feature.
 *
 * @param request UpdateCacheTagRequest
 * @return UpdateCacheTagResponse
 */
async function updateCacheTag(request: UpdateCacheTagRequest): UpdateCacheTagResponse {
  var runtime = new $RuntimeOptions{};
  return updateCacheTagWithOptions(request, runtime);
}

model UpdateCnameFlatteningRequest {
  flattenMode?: string(name='FlattenMode', description='The CNAME flattening mode. Valid values:

*   flatten_all: flattens all CNAMEs.
*   flatten_at_root: flattens only the root domain. Default: flatten_at_root

This parameter is required.', example='flatten_all'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateCnameFlatteningResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model UpdateCnameFlatteningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCnameFlatteningResponseBody(name='body'),
}

/**
 * @summary Modifies the CNAME flattening configuration of a website.
 *
 * @param request UpdateCnameFlatteningRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCnameFlatteningResponse
 */
@context("updateCnameFlatteningWithContext")
async function updateCnameFlatteningWithOptions(request: UpdateCnameFlatteningRequest, runtime: $RuntimeOptions): UpdateCnameFlatteningResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.flattenMode)) {
    query['FlattenMode'] = request.flattenMode;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCnameFlattening',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the CNAME flattening configuration of a website.
 *
 * @param request UpdateCnameFlatteningRequest
 * @return UpdateCnameFlatteningResponse
 */
async function updateCnameFlattening(request: UpdateCnameFlatteningRequest): UpdateCnameFlatteningResponse {
  var runtime = new $RuntimeOptions{};
  return updateCnameFlatteningWithOptions(request, runtime);
}

model UpdateCompressionRuleRequest {
  brotli?: string(name='Brotli', description='Brotli compression. Value range:
- on: Enable.
- off: Disable.', example='on'),
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListCompressionRules](~~ListCompressionRules~~) interface.

This parameter is required.', example='35281609698****'),
  gzip?: string(name='Gzip', description='Gzip compression. Value range:
- on: Enable.
- off: Disable.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='5407498413****'),
  zstd?: string(name='Zstd', description='Zstd compression. Value range:
- on: Enable.
- off: Disable.', example='on'),
}

model UpdateCompressionRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='CE8EB0DE-3267-53D1-AB83-F36377D63FD0'),
}

model UpdateCompressionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCompressionRuleResponseBody(name='body'),
}

/**
 * @summary Modify compression rule
 *
 * @param request UpdateCompressionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCompressionRuleResponse
 */
@context("updateCompressionRuleWithContext")
async function updateCompressionRuleWithOptions(request: UpdateCompressionRuleRequest, runtime: $RuntimeOptions): UpdateCompressionRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.brotli)) {
    query['Brotli'] = request.brotli;
  }
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.gzip)) {
    query['Gzip'] = request.gzip;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.zstd)) {
    query['Zstd'] = request.zstd;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCompressionRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify compression rule
 *
 * @param request UpdateCompressionRuleRequest
 * @return UpdateCompressionRuleResponse
 */
async function updateCompressionRule(request: UpdateCompressionRuleRequest): UpdateCompressionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateCompressionRuleWithOptions(request, runtime);
}

model UpdateCrossBorderOptimizationRequest {
  enable?: string(name='Enable', description='This parameter is required.', example='on'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model UpdateCrossBorderOptimizationResponseBody = {
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model UpdateCrossBorderOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCrossBorderOptimizationResponseBody(name='body'),
}

/**
 * @summary 修改站点中国大陆网络接入优化配置
 *
 * @param request UpdateCrossBorderOptimizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCrossBorderOptimizationResponse
 */
@context("updateCrossBorderOptimizationWithContext")
async function updateCrossBorderOptimizationWithOptions(request: UpdateCrossBorderOptimizationRequest, runtime: $RuntimeOptions): UpdateCrossBorderOptimizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCrossBorderOptimization',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改站点中国大陆网络接入优化配置
 *
 * @param request UpdateCrossBorderOptimizationRequest
 * @return UpdateCrossBorderOptimizationResponse
 */
async function updateCrossBorderOptimization(request: UpdateCrossBorderOptimizationRequest): UpdateCrossBorderOptimizationResponse {
  var runtime = new $RuntimeOptions{};
  return updateCrossBorderOptimizationWithOptions(request, runtime);
}

model UpdateCustomScenePolicyRequest {
  endTime?: string(name='EndTime', description='The time when the policy expires.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', description='The policy name.

This parameter is required.', example='test'),
  objects?: string(name='Objects', description='The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).', example='123456****'),
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='1'),
  siteIds?: string(name='SiteIds'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.

This parameter is required.', example='promotion'),
}

model UpdateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', description='The policy name.', example='test'),
  objects?: [ string ](name='Objects', description='The IDs of websites associated.'),
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  siteIds?: string(name='SiteIds'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.', example='promotion'),
}

model UpdateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a custom scenario-specific policy.
 *
 * @param request UpdateCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomScenePolicyResponse
 */
@context("updateCustomScenePolicyWithContext")
async function updateCustomScenePolicyWithOptions(request: UpdateCustomScenePolicyRequest, runtime: $RuntimeOptions): UpdateCustomScenePolicyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.objects)) {
    query['Objects'] = request.objects;
  }
  if (!$isNull(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!$isNull(request.siteIds)) {
    query['SiteIds'] = request.siteIds;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a custom scenario-specific policy.
 *
 * @param request UpdateCustomScenePolicyRequest
 * @return UpdateCustomScenePolicyResponse
 */
async function updateCustomScenePolicy(request: UpdateCustomScenePolicyRequest): UpdateCustomScenePolicyResponse {
  var runtime = new $RuntimeOptions{};
  return updateCustomScenePolicyWithOptions(request, runtime);
}

model UpdateDevelopmentModeRequest {
  enable?: string(name='Enable', description='Specifies whether to enable Development Mode. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateDevelopmentModeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model UpdateDevelopmentModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDevelopmentModeResponseBody(name='body'),
}

/**
 * @summary Modifies the development mode configuration of your website. If you enable Development Mode, all requests bypass caching components on POPs and are redirected to the origin server. This allows clients to retrieve the most recent resources on the origin server.
 *
 * @param request UpdateDevelopmentModeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDevelopmentModeResponse
 */
@context("updateDevelopmentModeWithContext")
async function updateDevelopmentModeWithOptions(request: UpdateDevelopmentModeRequest, runtime: $RuntimeOptions): UpdateDevelopmentModeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDevelopmentMode',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the development mode configuration of your website. If you enable Development Mode, all requests bypass caching components on POPs and are redirected to the origin server. This allows clients to retrieve the most recent resources on the origin server.
 *
 * @param request UpdateDevelopmentModeRequest
 * @return UpdateDevelopmentModeResponse
 */
async function updateDevelopmentMode(request: UpdateDevelopmentModeRequest): UpdateDevelopmentModeResponse {
  var runtime = new $RuntimeOptions{};
  return updateDevelopmentModeWithOptions(request, runtime);
}

model UpdateEdgeContainerAppLogRiverRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](https://help.aliyun.com/document_detail/2852396.html) operation.', example='app-88068867578379****'),
  path?: string(name='Path', description='The log path of the container.', example='/root/hello.log'),
  stdout?: boolean(name='Stdout', description='Specifies whether to collect the standard output of the container.', example='true'),
}

model UpdateEdgeContainerAppLogRiverResponseBody = {
  path?: string(name='Path', description='The log path of the container.', example='/root/hello.log'),
  requestId?: string(name='RequestId', description='The request ID.', example='42DE97FA-45D2-5615-9A31-55D9EC0D7563'),
  stdout?: boolean(name='Stdout', description='Indicates whether the standard output of the container is collected.', example='true'),
}

model UpdateEdgeContainerAppLogRiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEdgeContainerAppLogRiverResponseBody(name='body'),
}

/**
 * @summary Updates the log collection configuration of a containerized application.
 *
 * @param request UpdateEdgeContainerAppLogRiverRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEdgeContainerAppLogRiverResponse
 */
@context("updateEdgeContainerAppLogRiverWithContext")
async function updateEdgeContainerAppLogRiverWithOptions(request: UpdateEdgeContainerAppLogRiverRequest, runtime: $RuntimeOptions): UpdateEdgeContainerAppLogRiverResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.path)) {
    query['Path'] = request.path;
  }
  if (!$isNull(request.stdout)) {
    query['Stdout'] = request.stdout;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateEdgeContainerAppLogRiver',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the log collection configuration of a containerized application.
 *
 * @param request UpdateEdgeContainerAppLogRiverRequest
 * @return UpdateEdgeContainerAppLogRiverResponse
 */
async function updateEdgeContainerAppLogRiver(request: UpdateEdgeContainerAppLogRiverRequest): UpdateEdgeContainerAppLogRiverResponse {
  var runtime = new $RuntimeOptions{};
  return updateEdgeContainerAppLogRiverWithOptions(request, runtime);
}

model UpdateEdgeContainerAppResourceReserveRequest {
  appId?: string(name='AppId', example='app-88068867578379****'),
  durationTime?: string(name='DurationTime', example='2006-01-02T15:04:05Z'),
  enable?: boolean(name='Enable', example='true'),
  forever?: boolean(name='Forever', example='true'),
  reserveSet?: [ 
    {
      isp?: string(name='Isp', example='cmcc'),
      region?: string(name='Region', example='huazhong'),
      replicas?: int32(name='Replicas', example='1'),
    }
  ](name='ReserveSet'),
}

model UpdateEdgeContainerAppResourceReserveShrinkRequest {
  appId?: string(name='AppId', example='app-88068867578379****'),
  durationTime?: string(name='DurationTime', example='2006-01-02T15:04:05Z'),
  enable?: boolean(name='Enable', example='true'),
  forever?: boolean(name='Forever', example='true'),
  reserveSetShrink?: string(name='ReserveSet'),
}

model UpdateEdgeContainerAppResourceReserveResponseBody = {
  durationTime?: string(name='DurationTime', example='2006-01-02T15:04:05Z'),
  enable?: boolean(name='Enable', example='true'),
  forever?: boolean(name='Forever', example='true'),
  requestId?: string(name='RequestId', example='1AB799CF-562A-5CAF-A99E-4354053D814F'),
  reserveSet?: [ 
    {
      isp?: string(name='Isp', example='cmcc'),
      region?: string(name='Region', example='huazhong'),
      replicas?: int32(name='Replicas', example='1'),
    }
  ](name='ReserveSet'),
}

model UpdateEdgeContainerAppResourceReserveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEdgeContainerAppResourceReserveResponseBody(name='body'),
}

/**
 * @summary 更新边缘容器资源预留配置
 *
 * @param tmpReq UpdateEdgeContainerAppResourceReserveRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEdgeContainerAppResourceReserveResponse
 */
@context("updateEdgeContainerAppResourceReserveWithContext")
async function updateEdgeContainerAppResourceReserveWithOptions(tmpReq: UpdateEdgeContainerAppResourceReserveRequest, runtime: $RuntimeOptions): UpdateEdgeContainerAppResourceReserveResponse {
  tmpReq.validate();
  var request = new UpdateEdgeContainerAppResourceReserveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.reserveSet)) {
    request.reserveSetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.reserveSet, 'ReserveSet', 'json');
  }
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.durationTime)) {
    query['DurationTime'] = request.durationTime;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.forever)) {
    query['Forever'] = request.forever;
  }
  if (!$isNull(request.reserveSetShrink)) {
    query['ReserveSet'] = request.reserveSetShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateEdgeContainerAppResourceReserve',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新边缘容器资源预留配置
 *
 * @param request UpdateEdgeContainerAppResourceReserveRequest
 * @return UpdateEdgeContainerAppResourceReserveResponse
 */
async function updateEdgeContainerAppResourceReserve(request: UpdateEdgeContainerAppResourceReserveRequest): UpdateEdgeContainerAppResourceReserveResponse {
  var runtime = new $RuntimeOptions{};
  return updateEdgeContainerAppResourceReserveWithOptions(request, runtime);
}

model UpdateHttpRequestHeaderModificationRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListHttpRequestHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) API.

This parameter is required.', example='35281609698****'),
  requestHeaderModification?: [ 
    {
      name?: string(name='Name', description='Request header name.

This parameter is required.', example='headerName'),
      operation?: string(name='Operation', description='Operation method. Possible values:

- add: Add.
- del: Delete
- modify: Modify.

This parameter is required.', example='add'),
      type?: string(name='Type'),
      value?: string(name='Value', description='Request header value.', example='headerValue'),
    }
  ](name='RequestHeaderModification', description='Modify request headers, supporting add, delete, and modify operations.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456****'),
}

model UpdateHttpRequestHeaderModificationRuleShrinkRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListHttpRequestHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) API.

This parameter is required.', example='35281609698****'),
  requestHeaderModificationShrink?: string(name='RequestHeaderModification', description='Modify request headers, supporting add, delete, and modify operations.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true
- To match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) API.

This parameter is required.', example='123456****'),
}

model UpdateHttpRequestHeaderModificationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model UpdateHttpRequestHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHttpRequestHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Modify HTTP Request Header Rules
 *
 * @param tmpReq UpdateHttpRequestHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHttpRequestHeaderModificationRuleResponse
 */
@context("updateHttpRequestHeaderModificationRuleWithContext")
async function updateHttpRequestHeaderModificationRuleWithOptions(tmpReq: UpdateHttpRequestHeaderModificationRuleRequest, runtime: $RuntimeOptions): UpdateHttpRequestHeaderModificationRuleResponse {
  tmpReq.validate();
  var request = new UpdateHttpRequestHeaderModificationRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.requestHeaderModification)) {
    request.requestHeaderModificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaderModification, 'RequestHeaderModification', 'json');
  }
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.requestHeaderModificationShrink)) {
    query['RequestHeaderModification'] = request.requestHeaderModificationShrink;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateHttpRequestHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify HTTP Request Header Rules
 *
 * @param request UpdateHttpRequestHeaderModificationRuleRequest
 * @return UpdateHttpRequestHeaderModificationRuleResponse
 */
async function updateHttpRequestHeaderModificationRule(request: UpdateHttpRequestHeaderModificationRuleRequest): UpdateHttpRequestHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateHttpRequestHeaderModificationRuleWithOptions(request, runtime);
}

model UpdateHttpResponseHeaderModificationRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListHttpResponseHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) interface.

This parameter is required.', example='35281609698****'),
  responseHeaderModification?: [ 
    {
      name?: string(name='Name', description='Response header name.

This parameter is required.', example='headerName'),
      operation?: string(name='Operation', description='Operation method. Value range:
- add: Add.
- del: Delete
- modify: Modify.

This parameter is required.', example='add'),
      type?: string(name='Type'),
      value?: string(name='Value', description='Response header value.', example='headerValue'),
    }
  ](name='ResponseHeaderModification', description='Modify response headers, supporting three operation methods: add, delete, and modify.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456******'),
}

model UpdateHttpResponseHeaderModificationRuleShrinkRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListHttpResponseHeaderModificationRules](https://help.aliyun.com/document_detail/2867483.html) interface.

This parameter is required.', example='35281609698****'),
  responseHeaderModificationShrink?: string(name='ResponseHeaderModification', description='Modify response headers, supporting three operation methods: add, delete, and modify.'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456******'),
}

model UpdateHttpResponseHeaderModificationRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model UpdateHttpResponseHeaderModificationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHttpResponseHeaderModificationRuleResponseBody(name='body'),
}

/**
 * @summary Modify HTTP response header rules
 *
 * @param tmpReq UpdateHttpResponseHeaderModificationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHttpResponseHeaderModificationRuleResponse
 */
@context("updateHttpResponseHeaderModificationRuleWithContext")
async function updateHttpResponseHeaderModificationRuleWithOptions(tmpReq: UpdateHttpResponseHeaderModificationRuleRequest, runtime: $RuntimeOptions): UpdateHttpResponseHeaderModificationRuleResponse {
  tmpReq.validate();
  var request = new UpdateHttpResponseHeaderModificationRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.responseHeaderModification)) {
    request.responseHeaderModificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaderModification, 'ResponseHeaderModification', 'json');
  }
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.responseHeaderModificationShrink)) {
    query['ResponseHeaderModification'] = request.responseHeaderModificationShrink;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateHttpResponseHeaderModificationRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify HTTP response header rules
 *
 * @param request UpdateHttpResponseHeaderModificationRuleRequest
 * @return UpdateHttpResponseHeaderModificationRuleResponse
 */
async function updateHttpResponseHeaderModificationRule(request: UpdateHttpResponseHeaderModificationRuleRequest): UpdateHttpResponseHeaderModificationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateHttpResponseHeaderModificationRuleWithOptions(request, runtime);
}

model UpdateHttpsApplicationConfigurationRequest {
  altSvc?: string(name='AltSvc', description='Feature switch, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  altSvcClear?: string(name='AltSvcClear', description='Whether the Alt-Svc header includes the clear parameter, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  altSvcMa?: string(name='AltSvcMa', description='Alt-Svc validity period, in seconds, default is 86400 seconds.', example='86400'),
  altSvcPersist?: string(name='AltSvcPersist', description='Whether the Alt-Svc header includes the persist parameter, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  configId?: long(name='ConfigId', description='Configuration ID.

This parameter is required.', example='35281609698****'),
  hsts?: string(name='Hsts', description='Whether to enable HSTS, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  hstsIncludeSubdomains?: string(name='HstsIncludeSubdomains', description='Whether to include subdomains in HSTS, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  hstsMaxAge?: string(name='HstsMaxAge', description='HSTS expiration time, in seconds.', example='3600'),
  hstsPreload?: string(name='HstsPreload', description='Whether to enable HSTS preload, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  httpsForce?: string(name='HttpsForce', description='Whether to enable forced HTTPS, default is disabled. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  httpsForceCode?: string(name='HttpsForceCode', description='Forced HTTPS redirect status code, value range:
- 301
- 302
- 307
- 308', example='301'),
  httpsNoSniDeny?: string(name='HttpsNoSniDeny'),
  httpsSniVerify?: string(name='HttpsSniVerify'),
  httpsSniWhitelist?: string(name='HttpsSniWhitelist'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enabled.
- off: Disabled.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='123456****'),
}

model UpdateHttpsApplicationConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
}

model UpdateHttpsApplicationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHttpsApplicationConfigurationResponseBody(name='body'),
}

/**
 * @summary Modify HTTPS Application Configuration
 *
 * @param request UpdateHttpsApplicationConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHttpsApplicationConfigurationResponse
 */
@context("updateHttpsApplicationConfigurationWithContext")
async function updateHttpsApplicationConfigurationWithOptions(request: UpdateHttpsApplicationConfigurationRequest, runtime: $RuntimeOptions): UpdateHttpsApplicationConfigurationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.altSvc)) {
    query['AltSvc'] = request.altSvc;
  }
  if (!$isNull(request.altSvcClear)) {
    query['AltSvcClear'] = request.altSvcClear;
  }
  if (!$isNull(request.altSvcMa)) {
    query['AltSvcMa'] = request.altSvcMa;
  }
  if (!$isNull(request.altSvcPersist)) {
    query['AltSvcPersist'] = request.altSvcPersist;
  }
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.hsts)) {
    query['Hsts'] = request.hsts;
  }
  if (!$isNull(request.hstsIncludeSubdomains)) {
    query['HstsIncludeSubdomains'] = request.hstsIncludeSubdomains;
  }
  if (!$isNull(request.hstsMaxAge)) {
    query['HstsMaxAge'] = request.hstsMaxAge;
  }
  if (!$isNull(request.hstsPreload)) {
    query['HstsPreload'] = request.hstsPreload;
  }
  if (!$isNull(request.httpsForce)) {
    query['HttpsForce'] = request.httpsForce;
  }
  if (!$isNull(request.httpsForceCode)) {
    query['HttpsForceCode'] = request.httpsForceCode;
  }
  if (!$isNull(request.httpsNoSniDeny)) {
    query['HttpsNoSniDeny'] = request.httpsNoSniDeny;
  }
  if (!$isNull(request.httpsSniVerify)) {
    query['HttpsSniVerify'] = request.httpsSniVerify;
  }
  if (!$isNull(request.httpsSniWhitelist)) {
    query['HttpsSniWhitelist'] = request.httpsSniWhitelist;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateHttpsApplicationConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify HTTPS Application Configuration
 *
 * @param request UpdateHttpsApplicationConfigurationRequest
 * @return UpdateHttpsApplicationConfigurationResponse
 */
async function updateHttpsApplicationConfiguration(request: UpdateHttpsApplicationConfigurationRequest): UpdateHttpsApplicationConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return updateHttpsApplicationConfigurationWithOptions(request, runtime);
}

model UpdateHttpsBasicConfigurationRequest {
  ciphersuite?: string(name='Ciphersuite', description='Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.', example='TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256'),
  ciphersuiteGroup?: string(name='CiphersuiteGroup', description='Cipher suite group. Default is all cipher suites. Value range:
- all: All cipher suites.
- strict: Strong cipher suites.
- custom: Custom cipher suites.', example='all'),
  configId?: long(name='ConfigId', description='Configuration ID.

This parameter is required.', example='3528160969****'),
  http2?: string(name='Http2', description='Whether to enable HTTP2. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  http3?: string(name='Http3', description='Whether to enable HTTP3. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  https?: string(name='Https', description='Whether to enable HTTPS. Default is enabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ocspStapling?: string(name='OcspStapling', description='Whether to enable OCSP. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1231231221****'),
  tls10?: string(name='Tls10', description='Whether to enable TLS1.0. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls11?: string(name='Tls11', description='Whether to enable TLS1.1. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls12?: string(name='Tls12', description='Whether to enable TLS1.2. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
  tls13?: string(name='Tls13', description='Whether to enable TLS1.3. Default is disabled. Value range:
- on: Enable.
- off: Disable.', example='on'),
}

model UpdateHttpsBasicConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateHttpsBasicConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHttpsBasicConfigurationResponseBody(name='body'),
}

/**
 * @summary Modify HTTPS Basic Configuration
 *
 * @param request UpdateHttpsBasicConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHttpsBasicConfigurationResponse
 */
@context("updateHttpsBasicConfigurationWithContext")
async function updateHttpsBasicConfigurationWithOptions(request: UpdateHttpsBasicConfigurationRequest, runtime: $RuntimeOptions): UpdateHttpsBasicConfigurationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ciphersuite)) {
    query['Ciphersuite'] = request.ciphersuite;
  }
  if (!$isNull(request.ciphersuiteGroup)) {
    query['CiphersuiteGroup'] = request.ciphersuiteGroup;
  }
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.http2)) {
    query['Http2'] = request.http2;
  }
  if (!$isNull(request.http3)) {
    query['Http3'] = request.http3;
  }
  if (!$isNull(request.https)) {
    query['Https'] = request.https;
  }
  if (!$isNull(request.ocspStapling)) {
    query['OcspStapling'] = request.ocspStapling;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.tls10)) {
    query['Tls10'] = request.tls10;
  }
  if (!$isNull(request.tls11)) {
    query['Tls11'] = request.tls11;
  }
  if (!$isNull(request.tls12)) {
    query['Tls12'] = request.tls12;
  }
  if (!$isNull(request.tls13)) {
    query['Tls13'] = request.tls13;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateHttpsBasicConfiguration',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify HTTPS Basic Configuration
 *
 * @param request UpdateHttpsBasicConfigurationRequest
 * @return UpdateHttpsBasicConfigurationResponse
 */
async function updateHttpsBasicConfiguration(request: UpdateHttpsBasicConfigurationRequest): UpdateHttpsBasicConfigurationResponse {
  var runtime = new $RuntimeOptions{};
  return updateHttpsBasicConfigurationWithOptions(request, runtime);
}

model UpdateIPv6Request {
  enable?: string(name='Enable', description='Specifies whether to enable IPv6. Valid values:

*   **on**
*   **off**

This parameter is required.', example='on'),
  region?: string(name='Region'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='5407498413****'),
}

model UpdateIPv6ResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateIPv6Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIPv6ResponseBody(name='body'),
}

/**
 * @summary Modifies the IPv6 configuration of a website.
 *
 * @param request UpdateIPv6Request
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIPv6Response
 */
@context("updateIPv6WithContext")
async function updateIPv6WithOptions(request: UpdateIPv6Request, runtime: $RuntimeOptions): UpdateIPv6Response {
  request.validate();
  var query = {};
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.region)) {
    query['Region'] = request.region;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateIPv6',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the IPv6 configuration of a website.
 *
 * @param request UpdateIPv6Request
 * @return UpdateIPv6Response
 */
async function updateIPv6(request: UpdateIPv6Request): UpdateIPv6Response {
  var runtime = new $RuntimeOptions{};
  return updateIPv6WithOptions(request, runtime);
}

model UpdateImageTransformRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListImageTransforms](https://help.aliyun.com/document_detail/2869056.html) interface.

This parameter is required.', example='352816096987136'),
  enable?: string(name='Enable', description='Indicates whether to enable image transformation. Possible values:

- on: Enable.
- off: Disable.', example='on'),
  rule?: string(name='Rule', description='Rule content, used to match user requests with conditional expressions. This parameter is not required when adding a global configuration. There are two usage scenarios:
- To match all incoming requests: Set the value to true.
- To match specific requests: Set the value to a custom expression, for example: (http.host eq "video.example.com")', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='test'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1234567890123'),
}

model UpdateImageTransformResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateImageTransformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageTransformResponseBody(name='body'),
}

/**
 * @summary Modify Site Image Transformation Configuration
 *
 * @param request UpdateImageTransformRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateImageTransformResponse
 */
@context("updateImageTransformWithContext")
async function updateImageTransformWithOptions(request: UpdateImageTransformRequest, runtime: $RuntimeOptions): UpdateImageTransformResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateImageTransform',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Site Image Transformation Configuration
 *
 * @param request UpdateImageTransformRequest
 * @return UpdateImageTransformResponse
 */
async function updateImageTransform(request: UpdateImageTransformRequest): UpdateImageTransformResponse {
  var runtime = new $RuntimeOptions{};
  return updateImageTransformWithOptions(request, runtime);
}

model UpdateListRequest {
  description?: string(name='Description', description='The new description of the list.

This parameter is required.', example='a custom list'),
  id?: long(name='Id', description='The ID of the custom list, which can be obtained by calling the [ListLists](https://help.aliyun.com/document_detail/2850217.html) operation.

This parameter is required.', example='40000001'),
  items?: [ string ](name='Items', description='The items in the updated list. The value is a JSON array.

This parameter is required.', example='a custom list'),
  name?: string(name='Name', description='The new name of the list.

This parameter is required.', example='example'),
}

model UpdateListShrinkRequest {
  description?: string(name='Description', description='The new description of the list.

This parameter is required.', example='a custom list'),
  id?: long(name='Id', description='The ID of the custom list, which can be obtained by calling the [ListLists](https://help.aliyun.com/document_detail/2850217.html) operation.

This parameter is required.', example='40000001'),
  itemsShrink?: string(name='Items', description='The items in the updated list. The value is a JSON array.

This parameter is required.', example='a custom list'),
  name?: string(name='Name', description='The new name of the list.

This parameter is required.', example='example'),
}

model UpdateListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateListResponseBody(name='body'),
}

/**
 * @summary Updates a custom list.
 *
 * @param tmpReq UpdateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateListResponse
 */
@context("updateListWithContext")
async function updateListWithOptions(tmpReq: UpdateListRequest, runtime: $RuntimeOptions): UpdateListResponse {
  tmpReq.validate();
  var request = new UpdateListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.items)) {
    request.itemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.items, 'Items', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.itemsShrink)) {
    body['Items'] = request.itemsShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a custom list.
 *
 * @param request UpdateListRequest
 * @return UpdateListResponse
 */
async function updateList(request: UpdateListRequest): UpdateListResponse {
  var runtime = new $RuntimeOptions{};
  return updateListWithOptions(request, runtime);
}

model UpdateLoadBalancerRequest {
  adaptiveRouting?: {
    failoverAcrossPools?: boolean(name='FailoverAcrossPools', description='Whether to fallback across pools.

- true: Yes.
- false: No.', example='false'),
  }(name='AdaptiveRouting', description='Configuration for fallback across pools.'),
  defaultPools?: [ long ](name='DefaultPools', description='List of default pool IDs.'),
  description?: string(name='Description', description='Detailed description of the load balancer, for easier management and identification.', example='Load balancer description'),
  enabled?: boolean(name='Enabled', description='Whether the load balancer is enabled.

- true: Enabled.
- false: Not enabled.', example='true'),
  fallbackPool?: long(name='FallbackPool', description='Fallback pool ID, where traffic will be directed when all other pools are unavailable.', example='96228666776****'),
  id?: long(name='Id', description='Load balancer ID, which can be obtained by calling the [ListLoadBalancers](https://help.aliyun.com/document_detail/2868897.html) API.

This parameter is required.', example='95913670174****'),
  monitor?: {
    consecutiveDown?: int32(name='ConsecutiveDown', description='Number of consecutive failed probes required to consider the target unhealthy, such as 5.', example='5'),
    consecutiveUp?: int32(name='ConsecutiveUp', description='Number of consecutive successful probes required to consider the target healthy, such as 3.', example='3'),
    expectedCodes?: string(name='ExpectedCodes', description='Expected status codes, such as 200,202, which indicate successful HTTP responses.', example='200,202'),
    followRedirects?: boolean(name='FollowRedirects', description='Whether to follow redirects.

- true: Yes.
- false: No.', example='true'),
    header?: any(name='Header', description='Monitor request header configuration.', example='{
        "host": [
            "example1.com",
            "example2.com"
        ]
    }'),
    interval?: int32(name='Interval', description='Monitor interval, such as 60 seconds, which is the frequency of checks.', example='100'),
    method?: string(name='Method', description='Monitor request method, such as GET, which is a method in the HTTP protocol.', example='GET'),
    monitoringRegion?: string(name='MonitoringRegion'),
    path?: string(name='Path', description='Monitor check path, such as /healthcheck, which is the HTTP request path.', example='/health'),
    port?: int32(name='Port', description='Origin server port.', example='80'),
    timeout?: int32(name='Timeout', description='Application health check timeout, in seconds, with a range of 1-10.', example='5'),
    type?: string(name='Type', description='Monitor protocol type, such as HTTP, used for health checks. When set to \\\\"off\\\\", no checks are performed.', example='HTTP'),
  }(name='Monitor', description='Monitor configuration for health checks.'),
  randomSteering?: {
    defaultWeight?: int32(name='DefaultWeight', description='Default round-robin weight, used for all pools that do not have a separately specified weight. Value range: integers between 0-100.', example='50'),
    poolWeights?: map[string]int32(name='PoolWeights', description='Weight configuration for each backend server pool, where the key is the pool ID and the value is the weight factor. The weight factor represents the proportion of relative traffic distribution.'),
  }(name='RandomSteering', description='Weighted round-robin configuration, used to control the traffic distribution weights among different pools.'),
  regionPools?: any(name='RegionPools', description='Address pool corresponding to the primary region.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  rules?: [ 
    {
      fixedResponse?: {
        contentType?: string(name='ContentType', description='Content-Type field in the HTTP Header.', example='application/json'),
        location?: string(name='Location', description='Location field in the HTTP response.', example='http://www.example.com/index.html'),
        messageBody?: string(name='MessageBody', description='Response body value.', example='Hello World!'),
        statusCode?: int32(name='StatusCode', description='Response status code.', example='200'),
      }(name='FixedResponse', description='Execute a specified response after matching the rule.'),
      overrides?: any(name='Overrides', description='Modify the corresponding load balancing configuration after matching the rule. The fields in the configuration will override the corresponding fields in the load balancer configuration.', example='{
            "adaptive_routing": {
                "failover_across_pools": true
            },
            "sub_region_pools": {
                "AL,AT": [
                    92298024898****,
                    92304347804****
                ],
                "BG,BY": [
                    92298024898****
                ]
            },
            "default_pools": [
                92298024898****,
                92304347804****
            ],
            "fallback_pool": 92298024898****,
            "location_strategy": {
                "mode": "resolver_ip",
                "prefer_ecs": "always"
            },
            "random_steering": {
                "default_weight": 0.3,
                "pool_weights": {
                    "92298024898****": 0.7,
                    "92304347804****": 0.8
                }
            },
            "region_pools": {
                "CN,SEAS": [
                    92298024898****,
                    92304347804****
                ],
                "SAF,SAS": [
                    92304347804****
                ]
            },
            "session_affinity": "ip",
            "steering_policy": "geo",
            "ttl": 30
        }'),
      rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter does not need to be set when adding global configurations. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, e.g., (http.host eq \\\\"video.example.com\\\\")', example='http.request.method eq "GET"'),
      ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter does not need to be set when adding global configurations. Value range:
- on: Enable.
- off: Disable.', example='on'),
      ruleName?: string(name='RuleName', description='Rule name. This parameter does not need to be set when adding global configurations.', example='rule_1'),
      sequence?: int32(name='Sequence', description='The execution order of the rule. It can be left blank, in which case the rules will be executed in the order they appear in the list. If specified, it must be a positive integer, with higher values indicating higher priority.', example='1'),
      terminates?: boolean(name='Terminates', description='Whether to terminate the execution of subsequent rules.
- true: Yes.
- false: No, default value.', example='true'),
    }
  ](name='Rules', description='Rule configuration list, used to define behavior overrides under specific conditions.', nullable=false),
  sessionAffinity?: string(name='SessionAffinity', description='Session persistence, with possible values:
- off: Not enabled.
- ip: Session persistence by IP.
- cookie: Session persistence by cookie.', example='ip'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1159101787****'),
  steeringPolicy?: string(name='SteeringPolicy', description='Load balancing policy.', example='order'),
  subRegionPools?: any(name='SubRegionPools', description='Address pool corresponding to the secondary region. When multiple secondary regions share the same address pool, the regions can be concatenated with commas as the key.', example='{"AL,MO": [92298024898****],"CN-SH,CN-SX,CN-SC":[92304347804****,92843536908****]}'),
  ttl?: int32(name='Ttl', description='TTL value, the time-to-live for DNS records, with a default of 30 and a range of 10-600.', example='300'),
}

model UpdateLoadBalancerShrinkRequest {
  adaptiveRoutingShrink?: string(name='AdaptiveRouting', description='Configuration for fallback across pools.'),
  defaultPoolsShrink?: string(name='DefaultPools', description='List of default pool IDs.'),
  description?: string(name='Description', description='Detailed description of the load balancer, for easier management and identification.', example='Load balancer description'),
  enabled?: boolean(name='Enabled', description='Whether the load balancer is enabled.

- true: Enabled.
- false: Not enabled.', example='true'),
  fallbackPool?: long(name='FallbackPool', description='Fallback pool ID, where traffic will be directed when all other pools are unavailable.', example='96228666776****'),
  id?: long(name='Id', description='Load balancer ID, which can be obtained by calling the [ListLoadBalancers](https://help.aliyun.com/document_detail/2868897.html) API.

This parameter is required.', example='95913670174****'),
  monitorShrink?: string(name='Monitor', description='Monitor configuration for health checks.'),
  randomSteeringShrink?: string(name='RandomSteering', description='Weighted round-robin configuration, used to control the traffic distribution weights among different pools.'),
  regionPools?: any(name='RegionPools', description='Address pool corresponding to the primary region.', example='{
  "ENAM": [
    12345678****
  ],
  "WNAM": [
    23456789****,
    23456789****
  ]
}'),
  rulesShrink?: string(name='Rules', description='Rule configuration list, used to define behavior overrides under specific conditions.', nullable=false),
  sessionAffinity?: string(name='SessionAffinity', description='Session persistence, with possible values:
- off: Not enabled.
- ip: Session persistence by IP.
- cookie: Session persistence by cookie.', example='ip'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='1159101787****'),
  steeringPolicy?: string(name='SteeringPolicy', description='Load balancing policy.', example='order'),
  subRegionPools?: any(name='SubRegionPools', description='Address pool corresponding to the secondary region. When multiple secondary regions share the same address pool, the regions can be concatenated with commas as the key.', example='{"AL,MO": [92298024898****],"CN-SH,CN-SX,CN-SC":[92304347804****,92843536908****]}'),
  ttl?: int32(name='Ttl', description='TTL value, the time-to-live for DNS records, with a default of 30 and a range of 10-600.', example='300'),
}

model UpdateLoadBalancerResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model UpdateLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerResponseBody(name='body'),
}

/**
 * @summary Modify Load Balancer
 *
 * @description Through this interface, you can modify multiple configurations of the load balancer, including but not limited to the name of the load balancer, whether to enable acceleration, session persistence strategy, and various advanced settings related to traffic routing.>Notice: Changes to certain parameters may affect the stability of existing services, please operate with caution.
 *
 * @param tmpReq UpdateLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLoadBalancerResponse
 */
@context("updateLoadBalancerWithContext")
async function updateLoadBalancerWithOptions(tmpReq: UpdateLoadBalancerRequest, runtime: $RuntimeOptions): UpdateLoadBalancerResponse {
  tmpReq.validate();
  var request = new UpdateLoadBalancerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.adaptiveRouting)) {
    request.adaptiveRoutingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adaptiveRouting, 'AdaptiveRouting', 'json');
  }
  if (!$isNull(tmpReq.defaultPools)) {
    request.defaultPoolsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultPools, 'DefaultPools', 'json');
  }
  if (!$isNull(tmpReq.monitor)) {
    request.monitorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitor, 'Monitor', 'json');
  }
  if (!$isNull(tmpReq.randomSteering)) {
    request.randomSteeringShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.randomSteering, 'RandomSteering', 'json');
  }
  if (!$isNull(tmpReq.rules)) {
    request.rulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rules, 'Rules', 'json');
  }
  var query = {};
  if (!$isNull(request.adaptiveRoutingShrink)) {
    query['AdaptiveRouting'] = request.adaptiveRoutingShrink;
  }
  if (!$isNull(request.defaultPoolsShrink)) {
    query['DefaultPools'] = request.defaultPoolsShrink;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!$isNull(request.fallbackPool)) {
    query['FallbackPool'] = request.fallbackPool;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.monitorShrink)) {
    query['Monitor'] = request.monitorShrink;
  }
  if (!$isNull(request.randomSteeringShrink)) {
    query['RandomSteering'] = request.randomSteeringShrink;
  }
  if (!$isNull(request.regionPools)) {
    query['RegionPools'] = request.regionPools;
  }
  if (!$isNull(request.rulesShrink)) {
    query['Rules'] = request.rulesShrink;
  }
  if (!$isNull(request.sessionAffinity)) {
    query['SessionAffinity'] = request.sessionAffinity;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.steeringPolicy)) {
    query['SteeringPolicy'] = request.steeringPolicy;
  }
  if (!$isNull(request.subRegionPools)) {
    query['SubRegionPools'] = request.subRegionPools;
  }
  if (!$isNull(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateLoadBalancer',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Load Balancer
 *
 * @description Through this interface, you can modify multiple configurations of the load balancer, including but not limited to the name of the load balancer, whether to enable acceleration, session persistence strategy, and various advanced settings related to traffic routing.>Notice: Changes to certain parameters may affect the stability of existing services, please operate with caution.
 *
 * @param request UpdateLoadBalancerRequest
 * @return UpdateLoadBalancerResponse
 */
async function updateLoadBalancer(request: UpdateLoadBalancerRequest): UpdateLoadBalancerResponse {
  var runtime = new $RuntimeOptions{};
  return updateLoadBalancerWithOptions(request, runtime);
}

model UpdateManagedTransformRequest {
  addClientGeolocationHeader?: string(name='AddClientGeolocationHeader', description='Specifies whether to include the header that indicates the geographical location of a client in an origin request. Valid values:

*   on
*   off', example='on'),
  addRealClientIpHeader?: string(name='AddRealClientIpHeader', description='Specifies whether to include the "ali-real-client-ip" header that indicates the client\\\\"s real IP address in an origin request. Valid values:

*   on
*   off', example='on'),
  realClientIpHeaderName?: string(name='RealClientIpHeaderName'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  siteVersion?: int32(name='SiteVersion', description='The version number of the website. You can use this parameter to specify a version of your website to apply the feature settings. By default, version 0 is used.', example='0'),
}

model UpdateManagedTransformResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model UpdateManagedTransformResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateManagedTransformResponseBody(name='body'),
}

/**
 * @summary Modifies the configuration of managed transforms for your website.
 *
 * @param request UpdateManagedTransformRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateManagedTransformResponse
 */
@context("updateManagedTransformWithContext")
async function updateManagedTransformWithOptions(request: UpdateManagedTransformRequest, runtime: $RuntimeOptions): UpdateManagedTransformResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.addClientGeolocationHeader)) {
    query['AddClientGeolocationHeader'] = request.addClientGeolocationHeader;
  }
  if (!$isNull(request.addRealClientIpHeader)) {
    query['AddRealClientIpHeader'] = request.addRealClientIpHeader;
  }
  if (!$isNull(request.realClientIpHeaderName)) {
    query['RealClientIpHeaderName'] = request.realClientIpHeaderName;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateManagedTransform',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configuration of managed transforms for your website.
 *
 * @param request UpdateManagedTransformRequest
 * @return UpdateManagedTransformResponse
 */
async function updateManagedTransform(request: UpdateManagedTransformRequest): UpdateManagedTransformResponse {
  var runtime = new $RuntimeOptions{};
  return updateManagedTransformWithOptions(request, runtime);
}

model UpdateNetworkOptimizationRequest {
  configId?: long(name='ConfigId', description='Configuration ID.

This parameter is required.', example='352816096987136'),
  grpc?: string(name='Grpc', description='Whether to enable GRPC, default is disabled. Possible values:
- on: Enable
- off: Disable', example='on'),
  http2Origin?: string(name='Http2Origin', description='Whether to enable HTTP2 origin, default is disabled. Possible values:
- on: Enable
- off: Disable', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Possible values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) API.

This parameter is required.', example='123456****'),
  smartRouting?: string(name='SmartRouting', description='Whether to enable the smart routing service, default is disabled. Possible values:
- on: Enable
- off: Disable', example='on'),
  uploadMaxFilesize?: string(name='UploadMaxFilesize', description='Maximum upload file size, in MB, with a range of 100 to 500.', example='100'),
  websocket?: string(name='Websocket', description='Whether to enable Websocket, default is enabled. Possible values:
- on: Enable
- off: Disable', example='on'),
}

model UpdateNetworkOptimizationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model UpdateNetworkOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNetworkOptimizationResponseBody(name='body'),
}

/**
 * @summary Modify network optimization configuration
 *
 * @param request UpdateNetworkOptimizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNetworkOptimizationResponse
 */
@context("updateNetworkOptimizationWithContext")
async function updateNetworkOptimizationWithOptions(request: UpdateNetworkOptimizationRequest, runtime: $RuntimeOptions): UpdateNetworkOptimizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.grpc)) {
    query['Grpc'] = request.grpc;
  }
  if (!$isNull(request.http2Origin)) {
    query['Http2Origin'] = request.http2Origin;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.smartRouting)) {
    query['SmartRouting'] = request.smartRouting;
  }
  if (!$isNull(request.uploadMaxFilesize)) {
    query['UploadMaxFilesize'] = request.uploadMaxFilesize;
  }
  if (!$isNull(request.websocket)) {
    query['Websocket'] = request.websocket;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateNetworkOptimization',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify network optimization configuration
 *
 * @param request UpdateNetworkOptimizationRequest
 * @return UpdateNetworkOptimizationResponse
 */
async function updateNetworkOptimization(request: UpdateNetworkOptimizationRequest): UpdateNetworkOptimizationResponse {
  var runtime = new $RuntimeOptions{};
  return updateNetworkOptimizationWithOptions(request, runtime);
}

model UpdateOriginPoolRequest {
  enabled?: boolean(name='Enabled', description='Whether the origin pool is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
  id?: long(name='Id', description='The ID of the origin pool, which can be obtained by calling the [ListOriginPools](https://help.aliyun.com/document_detail/2863947.html) interface.

This parameter is required.', example='1038520525196928'),
  origins?: [ 
    {
      address?: string(name='Address', description='The address of the origin, e.g., www.example.com.', example='www.example.com'),
      authConf?: {
        accessKey?: string(name='AccessKey', description='The AccessKey required for private authentication.', example='yourAccessKeyID'),
        authType?: string(name='AuthType', description='The type of authentication.

- public: Public read/write, used when the origin is OSS or S3 and is set to public read/write;
- private_same_account: Private same account, used when the origin is OSS and the authentication type is private within the same account;
- private_cross_account: Private cross-account, used when the origin is OSS and the authentication type is private across accounts;
- private: Used when the origin is S3 and the authentication type is private.', example='public'),
        region?: string(name='Region', description='The region of the origin required when the origin is AWS S3.', example='us-east-1'),
        secretKey?: string(name='SecretKey', description='The SecretKey required for private authentication.', example='yourAccessKeySecret'),
        version?: string(name='Version', description='The signature version required when the origin is AWS S3.', example='v2'),
      }(name='AuthConf', description='Authentication information. When the origin is OSS or S3 and requires authentication, you need to pass the related configuration information for authentication.'),
      enabled?: boolean(name='Enabled', description='Whether the origin is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
      header?: any(name='Header', description='The request header to be included when fetching from the origin, supporting only Host.', example='{
        "Host": [
          "example.com"
        ]
      }'),
      name?: string(name='Name', description='The name of the origin, which must be unique under one origin pool.', example='origin1'),
      type?: string(name='Type', description='The type of the origin:

- ip_domain: IP or domain type origin;
- OSS: OSS address origin;
- S3: AWS S3 origin.', example='OSS'),
      weight?: int32(name='Weight', description='The weight, an integer between 0 and 100.', example='50'),
    }
  ](name='Origins', description='Information about the origins added to the origin pool. Multiple origins are passed as an array.'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='216558609793952'),
}

model UpdateOriginPoolShrinkRequest {
  enabled?: boolean(name='Enabled', description='Whether the origin pool is enabled:

- true: Enabled;
- false: Disabled.', example='true'),
  id?: long(name='Id', description='The ID of the origin pool, which can be obtained by calling the [ListOriginPools](https://help.aliyun.com/document_detail/2863947.html) interface.

This parameter is required.', example='1038520525196928'),
  originsShrink?: string(name='Origins', description='Information about the origins added to the origin pool. Multiple origins are passed as an array.'),
  siteId?: long(name='SiteId', description='The site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='216558609793952'),
}

model UpdateOriginPoolResponseBody = {
  id?: long(name='Id', description='Source address pool ID.', example='1038520525196928'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginPoolResponseBody(name='body'),
}

/**
 * @summary Modify the Monitor
 *
 * @param tmpReq UpdateOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginPoolResponse
 */
@context("updateOriginPoolWithContext")
async function updateOriginPoolWithOptions(tmpReq: UpdateOriginPoolRequest, runtime: $RuntimeOptions): UpdateOriginPoolResponse {
  tmpReq.validate();
  var request = new UpdateOriginPoolShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.origins)) {
    request.originsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.origins, 'Origins', 'json');
  }
  var query = {};
  if (!$isNull(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.originsShrink)) {
    query['Origins'] = request.originsShrink;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify the Monitor
 *
 * @param request UpdateOriginPoolRequest
 * @return UpdateOriginPoolResponse
 */
async function updateOriginPool(request: UpdateOriginPoolRequest): UpdateOriginPoolResponse {
  var runtime = new $RuntimeOptions{};
  return updateOriginPoolWithOptions(request, runtime);
}

model UpdateOriginProtectionRequest {
  originConverge?: string(name='OriginConverge', description='The IP convergence status.

*   on
*   off

This parameter is required.', example='on'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateOriginProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C6B5E5A-42FC-5DF2-986C-4DAAE3C55086'),
}

model UpdateOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Enables or disables IP convergence.
 *
 * @param request UpdateOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginProtectionResponse
 */
@context("updateOriginProtectionWithContext")
async function updateOriginProtectionWithOptions(request: UpdateOriginProtectionRequest, runtime: $RuntimeOptions): UpdateOriginProtectionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.originConverge)) {
    query['OriginConverge'] = request.originConverge;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables IP convergence.
 *
 * @param request UpdateOriginProtectionRequest
 * @return UpdateOriginProtectionResponse
 */
async function updateOriginProtection(request: UpdateOriginProtectionRequest): UpdateOriginProtectionResponse {
  var runtime = new $RuntimeOptions{};
  return updateOriginProtectionWithOptions(request, runtime);
}

model UpdateOriginProtectionIpWhiteListRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateOriginProtectionIpWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model UpdateOriginProtectionIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginProtectionIpWhiteListResponseBody(name='body'),
}

/**
 * @summary Updates the IP whitelist for origin protection used by a website to the latest version.
 *
 * @param request UpdateOriginProtectionIpWhiteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginProtectionIpWhiteListResponse
 */
@context("updateOriginProtectionIpWhiteListWithContext")
async function updateOriginProtectionIpWhiteListWithOptions(request: UpdateOriginProtectionIpWhiteListRequest, runtime: $RuntimeOptions): UpdateOriginProtectionIpWhiteListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateOriginProtectionIpWhiteList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the IP whitelist for origin protection used by a website to the latest version.
 *
 * @param request UpdateOriginProtectionIpWhiteListRequest
 * @return UpdateOriginProtectionIpWhiteListResponse
 */
async function updateOriginProtectionIpWhiteList(request: UpdateOriginProtectionIpWhiteListRequest): UpdateOriginProtectionIpWhiteListResponse {
  var runtime = new $RuntimeOptions{};
  return updateOriginProtectionIpWhiteListWithOptions(request, runtime);
}

model UpdateOriginRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID.

This parameter is required.', example='35281609698****'),
  dnsRecord?: string(name='DnsRecord', description='Rewrite the DNS resolution record of the origin request.', example='test.example.com'),
  follow302Enable?: string(name='Follow302Enable'),
  follow302MaxTries?: string(name='Follow302MaxTries'),
  follow302RetainArgs?: string(name='Follow302RetainArgs'),
  follow302RetainHeader?: string(name='Follow302RetainHeader'),
  follow302TargetHost?: string(name='Follow302TargetHost'),
  originHost?: string(name='OriginHost', description='The HOST carried in the origin request.', example='origin.example.com'),
  originHttpPort?: string(name='OriginHttpPort', description='Port of the origin server when using HTTP protocol for origin pull.', example='8080'),
  originHttpsPort?: string(name='OriginHttpsPort', description='Port of the origin server when using HTTPS protocol for origin pull.', example='4433'),
  originMtls?: string(name='OriginMtls', description='mTLS switch. Valid values:
- on: Enable.
- off: Disable.', example='on'),
  originReadTimeout?: string(name='OriginReadTimeout'),
  originScheme?: string(name='OriginScheme', description='Protocol used for the origin request. Valid values:
- http: Use HTTP protocol for origin pull.
- https: Use HTTPS protocol for origin pull.
- follow: Follow the client\\\\"s protocol for origin pull.', example='http'),
  originSni?: string(name='OriginSni', description='SNI carried in the origin request.', example='origin.example.com'),
  originVerify?: string(name='OriginVerify', description='Origin certificate verification switch. Valid values:
- on: Enable.
- off: Disable.', example='on'),
  range?: string(name='Range', description='Use range chunking for origin pull file download. Valid values:
- on: Enable.
- off: Disable.
- force: Force.', example='on'),
  rangeChunkSize?: string(name='RangeChunkSize'),
  rule?: string(name='Rule', description='Rule content, used to match user requests with conditional expressions. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq \\\\"video.example.com\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Valid values:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](~~ListSites~~) interface.

This parameter is required.', example='5407498413****'),
}

model UpdateOriginRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateOriginRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginRuleResponseBody(name='body'),
}

/**
 * @summary Modify Origin Rule Configuration for Site
 *
 * @param request UpdateOriginRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginRuleResponse
 */
@context("updateOriginRuleWithContext")
async function updateOriginRuleWithOptions(request: UpdateOriginRuleRequest, runtime: $RuntimeOptions): UpdateOriginRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.dnsRecord)) {
    query['DnsRecord'] = request.dnsRecord;
  }
  if (!$isNull(request.follow302Enable)) {
    query['Follow302Enable'] = request.follow302Enable;
  }
  if (!$isNull(request.follow302MaxTries)) {
    query['Follow302MaxTries'] = request.follow302MaxTries;
  }
  if (!$isNull(request.follow302RetainArgs)) {
    query['Follow302RetainArgs'] = request.follow302RetainArgs;
  }
  if (!$isNull(request.follow302RetainHeader)) {
    query['Follow302RetainHeader'] = request.follow302RetainHeader;
  }
  if (!$isNull(request.follow302TargetHost)) {
    query['Follow302TargetHost'] = request.follow302TargetHost;
  }
  if (!$isNull(request.originHost)) {
    query['OriginHost'] = request.originHost;
  }
  if (!$isNull(request.originHttpPort)) {
    query['OriginHttpPort'] = request.originHttpPort;
  }
  if (!$isNull(request.originHttpsPort)) {
    query['OriginHttpsPort'] = request.originHttpsPort;
  }
  if (!$isNull(request.originMtls)) {
    query['OriginMtls'] = request.originMtls;
  }
  if (!$isNull(request.originReadTimeout)) {
    query['OriginReadTimeout'] = request.originReadTimeout;
  }
  if (!$isNull(request.originScheme)) {
    query['OriginScheme'] = request.originScheme;
  }
  if (!$isNull(request.originSni)) {
    query['OriginSni'] = request.originSni;
  }
  if (!$isNull(request.originVerify)) {
    query['OriginVerify'] = request.originVerify;
  }
  if (!$isNull(request.range)) {
    query['Range'] = request.range;
  }
  if (!$isNull(request.rangeChunkSize)) {
    query['RangeChunkSize'] = request.rangeChunkSize;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateOriginRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Origin Rule Configuration for Site
 *
 * @param request UpdateOriginRuleRequest
 * @return UpdateOriginRuleResponse
 */
async function updateOriginRule(request: UpdateOriginRuleRequest): UpdateOriginRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateOriginRuleWithOptions(request, runtime);
}

model UpdatePageRequest {
  content?: string(name='Content', description='The Base64-encoded content of the error page. The content type is specified by the Content-Type field.

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header. Valid values:

*   text/html
*   application/json

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='The description of the custom error page.

This parameter is required.', example='a custom deny page'),
  id?: long(name='Id', description='The ID of the custom error page, which can be obtained by calling the [ListPages](https://help.aliyun.com/document_detail/2850223.html) operation.

This parameter is required.', example='50000001'),
  name?: string(name='Name', description='The name of the custom error page.

This parameter is required.', example='example'),
}

model UpdatePageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePageResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
 *
 * @param request UpdatePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePageResponse
 */
@context("updatePageWithContext")
async function updatePageWithOptions(request: UpdatePageRequest, runtime: $RuntimeOptions): UpdatePageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.content)) {
    body['Content'] = request.content;
  }
  if (!$isNull(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdatePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
 *
 * @param request UpdatePageRequest
 * @return UpdatePageResponse
 */
async function updatePage(request: UpdatePageRequest): UpdatePageResponse {
  var runtime = new $RuntimeOptions{};
  return updatePageWithOptions(request, runtime);
}

model UpdateRatePlanSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto payment.', example='true'),
  chargeType?: string(name='ChargeType', example='PREPAY'),
  instanceId?: string(name='InstanceId', example='xcdn-91fknmb80f0g'),
  orderType?: string(name='OrderType', description='The specification update type. Valid values:

*   DOWNGRADE
*   UPGRADE', example='UPGRADE'),
  targetPlanCode?: string(name='TargetPlanCode', example='entranceplan'),
  targetPlanName?: string(name='TargetPlanName', example='basic'),
}

model UpdateRatePlanSpecResponseBody = {
  instanceId?: string(name='InstanceId', example='xcdn-as23ds***'),
  orderId?: string(name='OrderId', example='2223332122***'),
  requestId?: string(name='RequestId', description='Id of the request', example='30423A7F-A83D-1E24-B80E-86DD25790758'),
}

model UpdateRatePlanSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRatePlanSpecResponseBody(name='body'),
}

/**
 * @summary 套餐变配
 *
 * @param request UpdateRatePlanSpecRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRatePlanSpecResponse
 */
@context("updateRatePlanSpecWithContext")
async function updateRatePlanSpecWithOptions(request: UpdateRatePlanSpecRequest, runtime: $RuntimeOptions): UpdateRatePlanSpecResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!$isNull(request.targetPlanCode)) {
    query['TargetPlanCode'] = request.targetPlanCode;
  }
  if (!$isNull(request.targetPlanName)) {
    query['TargetPlanName'] = request.targetPlanName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRatePlanSpec',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 套餐变配
 *
 * @param request UpdateRatePlanSpecRequest
 * @return UpdateRatePlanSpecResponse
 */
async function updateRatePlanSpec(request: UpdateRatePlanSpecRequest): UpdateRatePlanSpecResponse {
  var runtime = new $RuntimeOptions{};
  return updateRatePlanSpecWithOptions(request, runtime);
}

model UpdateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey', description='The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='VIxuvJSA2S03f******kp208dy5w7'),
    authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:

*   **public**: public read. Select this value when the origin type is OSS or S3 and the origin access is public read.
*   **private**: private read. Select this value when the origin type is S3 and the origin access is private read.
*   **private_same_account**: private read under the same account. Select this value when the origin type is OSS, the origins belong to the same Alibaba Cloud account, and the origins have private read access.', example='private'),
    region?: string(name='Region', description='The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:

*   **v2**
*   **v4**

If you leave this parameter empty, the default value v4 is used.', example='v2'),
    secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
    version?: string(name='Version', description='The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.', example='us-east-1'),
  }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **video_image**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comments of the record.', example='This is a remark.'),
  data?: {
    algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.', example='0'),
    certificate?: string(name='Certificate', description='The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.', example='dGVzdGFkYWxrcw=='),
    fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. This parameter is required when you add a SSHFP record.', example='abcdef1234567890'),
    flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.', example='128'),
    keyTag?: int32(name='KeyTag', description='The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.', example='0'),
    matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
    port?: int32(name='Port', description='The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.', example='0'),
    priority?: int32(name='Priority', description='The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='10'),
    selector?: int32(name='Selector', description='The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
    tag?: string(name='Tag', description='The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.', example='issue'),
    type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.', example='0'),
    usage?: int32(name='Usage', description='The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
    value?: string(name='Value', description='The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:

*   **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
*   **CNAME**: the target domain name.
*   **NS**: the name servers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
    weight?: int32(name='Weight', description='The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.', example='0'),
  }(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [Add DNS records](https://www.alibabacloud.com/help/doc-detail/2708761.html).

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   **follow_hostname**: match the requested domain name.
*   **follow_origin_domain**: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The type of the origin for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS** : OSS origin.
*   **S3** : S3 origin.
*   **LB**: Load Balancer origin.
*   **OP**: origin in an origin pool.
*   **Domain**: common domain name.

If you leave the parameter empty or set its value as null, the default is Domain, which is common domain name.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. The range is 30 to 86,400, or 1. If the value is 1, the TTL of the record is determined by the system.', example='30'),
  type?: string(name='Type'),
}

model UpdateRecordShrinkRequest {
  authConfShrink?: string(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **video_image**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comments of the record.', example='This is a remark.'),
  dataShrink?: string(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [Add DNS records](https://www.alibabacloud.com/help/doc-detail/2708761.html).

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   **follow_hostname**: match the requested domain name.
*   **follow_origin_domain**: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The type of the origin for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS** : OSS origin.
*   **S3** : S3 origin.
*   **LB**: Load Balancer origin.
*   **OP**: origin in an origin pool.
*   **Domain**: common domain name.

If you leave the parameter empty or set its value as null, the default is Domain, which is common domain name.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. The range is 30 to 86,400, or 1. If the value is 1, the TTL of the record is determined by the system.', example='30'),
  type?: string(name='Type'),
}

model UpdateRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordResponseBody(name='body'),
}

/**
 * @summary Updates multiple types of DNS records and origin authentication configurations.
 *
 * @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
 * ### [](#)Usage notes
 * *   The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
 * *   You must specify a priority (Priority) for some record types, such as MX and SRV.
 * *   You must specify specific fields such as Flag and Tag for CAA records.
 * *   When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
 * *   If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
 *
 * @param tmpReq UpdateRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRecordResponse
 */
@context("updateRecordWithContext")
async function updateRecordWithOptions(tmpReq: UpdateRecordRequest, runtime: $RuntimeOptions): UpdateRecordResponse {
  tmpReq.validate();
  var request = new UpdateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.authConf)) {
    request.authConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authConf, 'AuthConf', 'json');
  }
  if (!$isNull(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!$isNull(request.authConfShrink)) {
    query['AuthConf'] = request.authConfShrink;
  }
  if (!$isNull(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!$isNull(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!$isNull(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!$isNull(request.hostPolicy)) {
    query['HostPolicy'] = request.hostPolicy;
  }
  if (!$isNull(request.proxied)) {
    query['Proxied'] = request.proxied;
  }
  if (!$isNull(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!$isNull(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!$isNull(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates multiple types of DNS records and origin authentication configurations.
 *
 * @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
 * ### [](#)Usage notes
 * *   The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
 * *   You must specify a priority (Priority) for some record types, such as MX and SRV.
 * *   You must specify specific fields such as Flag and Tag for CAA records.
 * *   When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
 * *   If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
 *
 * @param request UpdateRecordRequest
 * @return UpdateRecordResponse
 */
async function updateRecord(request: UpdateRecordRequest): UpdateRecordResponse {
  var runtime = new $RuntimeOptions{};
  return updateRecordWithOptions(request, runtime);
}

model UpdateRedirectRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListRedirectRules](https://help.aliyun.com/document_detail/2867474.html) interface.

This parameter is required.', example='3528160969****'),
  reserveQueryString?: string(name='ReserveQueryString', description='Preserve query string. Value range:
- on: Enable.
- off: Disable.', example='on'),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='rule_example'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  statusCode?: string(name='StatusCode', description='The response status code used by the node to respond with the redirect address to the client. Value range:

- 301
- 302
- 303
- 307
- 308', example='301'),
  targetUrl?: string(name='TargetUrl', description='The target URL after redirection.', example='http://www.exapmle.com/index.html'),
  type?: string(name='Type', description='Redirect type. Value range:

- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
}

model UpdateRedirectRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model UpdateRedirectRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRedirectRuleResponseBody(name='body'),
}

/**
 * @summary Update Redirect Rule
 *
 * @param request UpdateRedirectRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRedirectRuleResponse
 */
@context("updateRedirectRuleWithContext")
async function updateRedirectRuleWithOptions(request: UpdateRedirectRuleRequest, runtime: $RuntimeOptions): UpdateRedirectRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.reserveQueryString)) {
    query['ReserveQueryString'] = request.reserveQueryString;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.statusCode)) {
    query['StatusCode'] = request.statusCode;
  }
  if (!$isNull(request.targetUrl)) {
    query['TargetUrl'] = request.targetUrl;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRedirectRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update Redirect Rule
 *
 * @param request UpdateRedirectRuleRequest
 * @return UpdateRedirectRuleResponse
 */
async function updateRedirectRule(request: UpdateRedirectRuleRequest): UpdateRedirectRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateRedirectRuleWithOptions(request, runtime);
}

model UpdateRewriteUrlRuleRequest {
  configId?: long(name='ConfigId', description='Configuration ID. It can be obtained by calling the [ListRewriteUrlRules](https://help.aliyun.com/document_detail/2867480.html) interface.

This parameter is required.', example='3528160969****'),
  queryString?: string(name='QueryString', description='The query string after rewriting.', example='example=123'),
  rewriteQueryStringType?: string(name='RewriteQueryStringType', description='Query string rewrite type. Value range:
- static: Static mode.
- dynamic: Dynamic mode.', example='static'),
  rewriteUriType?: string(name='RewriteUriType', description='URI rewrite type. Value range:
- static: Static mode.
- dynamic: Dynamic mode.', example='static', nullable=false),
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding a global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq \\\\"video.example.com\\\\")', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding a global configuration. Value range:
- on: Enable.
- off: Disable.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding a global configuration.', example='example=123'),
  sequence?: int32(name='Sequence'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456789****'),
  uri?: string(name='Uri', description='The target URI after rewriting.', example='/image/example.jpg'),
}

model UpdateRewriteUrlRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model UpdateRewriteUrlRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRewriteUrlRuleResponseBody(name='body'),
}

/**
 * @summary Modify Rewrite URL Rule
 *
 * @param request UpdateRewriteUrlRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRewriteUrlRuleResponse
 */
@context("updateRewriteUrlRuleWithContext")
async function updateRewriteUrlRuleWithOptions(request: UpdateRewriteUrlRuleRequest, runtime: $RuntimeOptions): UpdateRewriteUrlRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.queryString)) {
    query['QueryString'] = request.queryString;
  }
  if (!$isNull(request.rewriteQueryStringType)) {
    query['RewriteQueryStringType'] = request.rewriteQueryStringType;
  }
  if (!$isNull(request.rewriteUriType)) {
    query['RewriteUriType'] = request.rewriteUriType;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.uri)) {
    query['Uri'] = request.uri;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRewriteUrlRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Rewrite URL Rule
 *
 * @param request UpdateRewriteUrlRuleRequest
 * @return UpdateRewriteUrlRuleResponse
 */
async function updateRewriteUrlRule(request: UpdateRewriteUrlRuleRequest): UpdateRewriteUrlRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateRewriteUrlRuleWithOptions(request, runtime);
}

model UpdateRoutineRouteRequest {
  bypass?: string(name='Bypass', example='on'),
  configId?: long(name='ConfigId', description='This parameter is required.', example='35281609698****'),
  fallback?: string(name='Fallback'),
  routeEnable?: string(name='RouteEnable', example='on'),
  routeName?: string(name='RouteName', example='test_route'),
  routineName?: string(name='RoutineName', example='test-routine1'),
  rule?: string(name='Rule', example='(http.host eq \\\\"video.example.com\\\\")'),
  sequence?: int32(name='Sequence', example='1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456******'),
}

model UpdateRoutineRouteResponseBody = {
  requestId?: string(name='RequestId', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateRoutineRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRoutineRouteResponseBody(name='body'),
}

/**
 * @summary 修改边缘函数路由配置
 *
 * @param request UpdateRoutineRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRoutineRouteResponse
 */
@context("updateRoutineRouteWithContext")
async function updateRoutineRouteWithOptions(request: UpdateRoutineRouteRequest, runtime: $RuntimeOptions): UpdateRoutineRouteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bypass)) {
    query['Bypass'] = request.bypass;
  }
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.fallback)) {
    query['Fallback'] = request.fallback;
  }
  if (!$isNull(request.routeEnable)) {
    query['RouteEnable'] = request.routeEnable;
  }
  if (!$isNull(request.routeName)) {
    query['RouteName'] = request.routeName;
  }
  if (!$isNull(request.routineName)) {
    query['RoutineName'] = request.routineName;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRoutineRoute',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改边缘函数路由配置
 *
 * @param request UpdateRoutineRouteRequest
 * @return UpdateRoutineRouteResponse
 */
async function updateRoutineRoute(request: UpdateRoutineRouteRequest): UpdateRoutineRouteResponse {
  var runtime = new $RuntimeOptions{};
  return updateRoutineRouteWithOptions(request, runtime);
}

model UpdateScheduledPreloadExecutionRequest {
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='UpdateScheduledPreloadExecution'),
  interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
}

model UpdateScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
  interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
  jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
  status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='running'),
}

model UpdateScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Updates a scheduled prefetch plan based on the plan ID.
 *
 * @param request UpdateScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateScheduledPreloadExecutionResponse
 */
@context("updateScheduledPreloadExecutionWithContext")
async function updateScheduledPreloadExecutionWithOptions(request: UpdateScheduledPreloadExecutionRequest, runtime: $RuntimeOptions): UpdateScheduledPreloadExecutionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!$isNull(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!$isNull(request.interval)) {
    body['Interval'] = request.interval;
  }
  if (!$isNull(request.sliceLen)) {
    body['SliceLen'] = request.sliceLen;
  }
  if (!$isNull(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a scheduled prefetch plan based on the plan ID.
 *
 * @param request UpdateScheduledPreloadExecutionRequest
 * @return UpdateScheduledPreloadExecutionResponse
 */
async function updateScheduledPreloadExecution(request: UpdateScheduledPreloadExecutionRequest): UpdateScheduledPreloadExecutionResponse {
  var runtime = new $RuntimeOptions{};
  return updateScheduledPreloadExecutionWithOptions(request, runtime);
}

model UpdateSeoBypassRequest {
  enable?: string(name='Enable', description='This parameter is required.', example='on'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model UpdateSeoBypassResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateSeoBypassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSeoBypassResponseBody(name='body'),
}

/**
 * @summary 修改站点放行搜索引擎爬虫配置
 *
 * @param request UpdateSeoBypassRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSeoBypassResponse
 */
@context("updateSeoBypassWithContext")
async function updateSeoBypassWithOptions(request: UpdateSeoBypassRequest, runtime: $RuntimeOptions): UpdateSeoBypassResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSeoBypass',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改站点放行搜索引擎爬虫配置
 *
 * @param request UpdateSeoBypassRequest
 * @return UpdateSeoBypassResponse
 */
async function updateSeoBypass(request: UpdateSeoBypassRequest): UpdateSeoBypassResponse {
  var runtime = new $RuntimeOptions{};
  return updateSeoBypassWithOptions(request, runtime);
}

model UpdateSiteAccessTypeRequest {
  accessType?: string(name='AccessType', description='The new DNS setup of the website. Valid values:

*   **NS**
*   **CNAME**

This parameter is required.', example='NS'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890'),
}

model UpdateSiteAccessTypeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateSiteAccessTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteAccessTypeResponseBody(name='body'),
}

/**
 * @summary Converts the DNS setup option of a website.
 *
 * @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
 * *   The website only has proxied A/AAAA and CNAME records.
 * *   The DNS passthrough mode and custom nameserver features are not enabled for the website.
 *
 * @param request UpdateSiteAccessTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteAccessTypeResponse
 */
@context("updateSiteAccessTypeWithContext")
async function updateSiteAccessTypeWithOptions(request: UpdateSiteAccessTypeRequest, runtime: $RuntimeOptions): UpdateSiteAccessTypeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteAccessType',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Converts the DNS setup option of a website.
 *
 * @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
 * *   The website only has proxied A/AAAA and CNAME records.
 * *   The DNS passthrough mode and custom nameserver features are not enabled for the website.
 *
 * @param request UpdateSiteAccessTypeRequest
 * @return UpdateSiteAccessTypeResponse
 */
async function updateSiteAccessType(request: UpdateSiteAccessTypeRequest): UpdateSiteAccessTypeResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteAccessTypeWithOptions(request, runtime);
}

model UpdateSiteCoverageRequest {
  coverage?: string(name='Coverage', description='The desired service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland

This parameter is required.', example='global'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='1234567890123'),
}

model UpdateSiteCoverageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model UpdateSiteCoverageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCoverageResponseBody(name='body'),
}

/**
 * @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
 *
 * @param request UpdateSiteCoverageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteCoverageResponse
 */
@context("updateSiteCoverageWithContext")
async function updateSiteCoverageWithOptions(request: UpdateSiteCoverageRequest, runtime: $RuntimeOptions): UpdateSiteCoverageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteCoverage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
 *
 * @param request UpdateSiteCoverageRequest
 * @return UpdateSiteCoverageResponse
 */
async function updateSiteCoverage(request: UpdateSiteCoverageRequest): UpdateSiteCoverageResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteCoverageWithOptions(request, runtime);
}

model UpdateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies', description='The cookie fields.'),
  requestHeaders?: [ string ](name='RequestHeaders', description='The request header fields.'),
  responseHeaders?: [ string ](name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='site id', example='11223****'),
}

model UpdateSiteCustomLogShrinkRequest {
  cookiesShrink?: string(name='Cookies', description='The cookie fields.'),
  requestHeadersShrink?: string(name='RequestHeaders', description='The request header fields.'),
  responseHeadersShrink?: string(name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='site id', example='11223****'),
}

model UpdateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
}

model UpdateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @param tmpReq UpdateSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteCustomLogResponse
 */
@context("updateSiteCustomLogWithContext")
async function updateSiteCustomLogWithOptions(tmpReq: UpdateSiteCustomLogRequest, runtime: $RuntimeOptions): UpdateSiteCustomLogResponse {
  tmpReq.validate();
  var request = new UpdateSiteCustomLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.cookies)) {
    request.cookiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cookies, 'Cookies', 'json');
  }
  if (!$isNull(tmpReq.requestHeaders)) {
    request.requestHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaders, 'RequestHeaders', 'json');
  }
  if (!$isNull(tmpReq.responseHeaders)) {
    request.responseHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaders, 'ResponseHeaders', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.cookiesShrink)) {
    body['Cookies'] = request.cookiesShrink;
  }
  if (!$isNull(request.requestHeadersShrink)) {
    body['RequestHeaders'] = request.requestHeadersShrink;
  }
  if (!$isNull(request.responseHeadersShrink)) {
    body['ResponseHeaders'] = request.responseHeadersShrink;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @param request UpdateSiteCustomLogRequest
 * @return UpdateSiteCustomLogResponse
 */
async function updateSiteCustomLog(request: UpdateSiteCustomLogRequest): UpdateSiteCustomLogResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteCustomLogWithOptions(request, runtime);
}

model UpdateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_er'),
  discardRate?: float(name='DiscardRate', description='The discard rate.', example='0.0'),
  fieldName?: string(name='FieldName', description='The log fields that you want to include in real-time logs to be delivered. Separate the log fields with commas (,).

This parameter is required.', example='ClientIP,UserAgent'),
  filterVer?: string(name='FilterVer'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456****'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Modifies a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteDeliveryTaskResponse
 */
@context("updateSiteDeliveryTaskWithContext")
async function updateSiteDeliveryTaskWithOptions(request: UpdateSiteDeliveryTaskRequest, runtime: $RuntimeOptions): UpdateSiteDeliveryTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!$isNull(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!$isNull(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!$isNull(request.filterVer)) {
    body['FilterVer'] = request.filterVer;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskRequest
 * @return UpdateSiteDeliveryTaskResponse
 */
async function updateSiteDeliveryTask(request: UpdateSiteDeliveryTaskRequest): UpdateSiteDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteDeliveryTaskWithOptions(request, runtime);
}

model UpdateSiteDeliveryTaskStatusRequest {
  method?: string(name='Method', description='Specifies whether to enable the delivery task.

This parameter is required.', example='online'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', description='The status of the delivery task. Valid values:

*   **online**
*   **offline**', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskStatusResponseBody(name='body'),
}

/**
 * @summary Changes the status of a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteDeliveryTaskStatusResponse
 */
@context("updateSiteDeliveryTaskStatusWithContext")
async function updateSiteDeliveryTaskStatusWithOptions(request: UpdateSiteDeliveryTaskStatusRequest, runtime: $RuntimeOptions): UpdateSiteDeliveryTaskStatusResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteDeliveryTaskStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the status of a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskStatusRequest
 * @return UpdateSiteDeliveryTaskStatusResponse
 */
async function updateSiteDeliveryTaskStatus(request: UpdateSiteDeliveryTaskStatusRequest): UpdateSiteDeliveryTaskStatusResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteDeliveryTaskStatusWithOptions(request, runtime);
}

model UpdateSiteNameExclusiveRequest {
  enable?: string(name='Enable', description='Specifies whether to enable site hold. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateSiteNameExclusiveResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateSiteNameExclusiveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteNameExclusiveResponseBody(name='body'),
}

/**
 * @summary Modifies the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
 *
 * @param request UpdateSiteNameExclusiveRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteNameExclusiveResponse
 */
@context("updateSiteNameExclusiveWithContext")
async function updateSiteNameExclusiveWithOptions(request: UpdateSiteNameExclusiveRequest, runtime: $RuntimeOptions): UpdateSiteNameExclusiveResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteNameExclusive',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
 *
 * @param request UpdateSiteNameExclusiveRequest
 * @return UpdateSiteNameExclusiveResponse
 */
async function updateSiteNameExclusive(request: UpdateSiteNameExclusiveRequest): UpdateSiteNameExclusiveResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteNameExclusiveWithOptions(request, runtime);
}

model UpdateSitePauseRequest {
  paused?: boolean(name='Paused', description='Specifies whether to temporarily pause ESA on the website. If you set this parameter to true, all requests to the domains in your DNS records go directly to your origin server. Valid values:

*   true
*   false

This parameter is required.', example='true'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateSitePauseResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6abd807e-ed2a-44de-ac54-ac38a62472e6'),
}

model UpdateSitePauseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSitePauseResponseBody(name='body'),
}

/**
 * @summary Modifies the ESA proxy configuration of a website.
 *
 * @param request UpdateSitePauseRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSitePauseResponse
 */
@context("updateSitePauseWithContext")
async function updateSitePauseWithOptions(request: UpdateSitePauseRequest, runtime: $RuntimeOptions): UpdateSitePauseResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.paused)) {
    query['Paused'] = request.paused;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSitePause',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the ESA proxy configuration of a website.
 *
 * @param request UpdateSitePauseRequest
 * @return UpdateSitePauseResponse
 */
async function updateSitePause(request: UpdateSitePauseRequest): UpdateSitePauseResponse {
  var runtime = new $RuntimeOptions{};
  return updateSitePauseWithOptions(request, runtime);
}

model UpdateSiteVanityNSRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='1234567890123'),
  vanityNSList?: string(name='VanityNSList', description='The custom nameserver names. You can specify two to five custom nameserver names. Separate multiple names with commas (,).', example='ns1.example.com,ns2.example.com'),
}

model UpdateSiteVanityNSResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateSiteVanityNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteVanityNSResponseBody(name='body'),
}

/**
 * @summary Updates the custom nameserver names for a single website.
 *
 * @param request UpdateSiteVanityNSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteVanityNSResponse
 */
@context("updateSiteVanityNSWithContext")
async function updateSiteVanityNSWithOptions(request: UpdateSiteVanityNSRequest, runtime: $RuntimeOptions): UpdateSiteVanityNSResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.vanityNSList)) {
    query['VanityNSList'] = request.vanityNSList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSiteVanityNS',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the custom nameserver names for a single website.
 *
 * @param request UpdateSiteVanityNSRequest
 * @return UpdateSiteVanityNSResponse
 */
async function updateSiteVanityNS(request: UpdateSiteVanityNSRequest): UpdateSiteVanityNSResponse {
  var runtime = new $RuntimeOptions{};
  return updateSiteVanityNSWithOptions(request, runtime);
}

model UpdateTieredCacheRequest {
  cacheArchitectureMode?: string(name='CacheArchitectureMode', description='The tiered cache architecture mode. Valid values:

*   edge: edge tiered cache.
*   edge_smart: edge tiered cache + smart tiered cache.
*   edge_regional: edge tiered cache + regional tiered cache.
*   edge_regional_smart: edge tiered cache + regional tiered cache + smart tiered cache.

This parameter is required.', example='edge_smart'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model UpdateTieredCacheResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateTieredCacheResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTieredCacheResponseBody(name='body'),
}

/**
 * @summary Modifies the tiered cache configuration of your website.
 *
 * @param request UpdateTieredCacheRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTieredCacheResponse
 */
@context("updateTieredCacheWithContext")
async function updateTieredCacheWithOptions(request: UpdateTieredCacheRequest, runtime: $RuntimeOptions): UpdateTieredCacheResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.cacheArchitectureMode)) {
    query['CacheArchitectureMode'] = request.cacheArchitectureMode;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateTieredCache',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the tiered cache configuration of your website.
 *
 * @param request UpdateTieredCacheRequest
 * @return UpdateTieredCacheResponse
 */
async function updateTieredCache(request: UpdateTieredCacheRequest): UpdateTieredCacheResponse {
  var runtime = new $RuntimeOptions{};
  return updateTieredCacheWithOptions(request, runtime);
}

model UpdateUrlObservationRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='35281609698****'),
  sdkType?: string(name='SdkType', description='This parameter is required.', example='manual'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456789****'),
}

model UpdateUrlObservationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateUrlObservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUrlObservationResponseBody(name='body'),
}

/**
 * @summary 更新网页监测配置
 *
 * @param request UpdateUrlObservationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUrlObservationResponse
 */
@context("updateUrlObservationWithContext")
async function updateUrlObservationWithOptions(request: UpdateUrlObservationRequest, runtime: $RuntimeOptions): UpdateUrlObservationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.sdkType)) {
    query['SdkType'] = request.sdkType;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateUrlObservation',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新网页监测配置
 *
 * @param request UpdateUrlObservationRequest
 * @return UpdateUrlObservationResponse
 */
async function updateUrlObservation(request: UpdateUrlObservationRequest): UpdateUrlObservationResponse {
  var runtime = new $RuntimeOptions{};
  return updateUrlObservationWithOptions(request, runtime);
}

model UpdateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_er'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0'),
  fieldName?: string(name='FieldName', description='The log fields that you want to include in logs to be delivered. Separate the log fields with commas (,).

This parameter is required.', example='ClientRequestID,ClientRequestHost'),
  filterVer?: string(name='FilterVer'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test_project'),
}

model UpdateUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
 *
 * @param request UpdateUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserDeliveryTaskResponse
 */
@context("updateUserDeliveryTaskWithContext")
async function updateUserDeliveryTaskWithOptions(request: UpdateUserDeliveryTaskRequest, runtime: $RuntimeOptions): UpdateUserDeliveryTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!$isNull(request.details)) {
    body['Details'] = request.details;
  }
  if (!$isNull(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!$isNull(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!$isNull(request.filterVer)) {
    body['FilterVer'] = request.filterVer;
  }
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
 *
 * @param request UpdateUserDeliveryTaskRequest
 * @return UpdateUserDeliveryTaskResponse
 */
async function updateUserDeliveryTask(request: UpdateUserDeliveryTaskRequest): UpdateUserDeliveryTaskResponse {
  var runtime = new $RuntimeOptions{};
  return updateUserDeliveryTaskWithOptions(request, runtime);
}

model UpdateUserDeliveryTaskStatusRequest {
  method?: string(name='Method', description='Enables or disables the delivery task. Valid values: online and offline.

This parameter is required.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', description='The status of the delivery task.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskStatusResponseBody(name='body'),
}

/**
 * @summary Changes the status of a delivery task in your Alibaba Cloud account.
 *
 * @description ## [](#)
 * You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
 *
 * @param request UpdateUserDeliveryTaskStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserDeliveryTaskStatusResponse
 */
@context("updateUserDeliveryTaskStatusWithContext")
async function updateUserDeliveryTaskStatusWithOptions(request: UpdateUserDeliveryTaskStatusRequest, runtime: $RuntimeOptions): UpdateUserDeliveryTaskStatusResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateUserDeliveryTaskStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the status of a delivery task in your Alibaba Cloud account.
 *
 * @description ## [](#)
 * You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
 *
 * @param request UpdateUserDeliveryTaskStatusRequest
 * @return UpdateUserDeliveryTaskStatusResponse
 */
async function updateUserDeliveryTaskStatus(request: UpdateUserDeliveryTaskStatusRequest): UpdateUserDeliveryTaskStatusResponse {
  var runtime = new $RuntimeOptions{};
  return updateUserDeliveryTaskStatusWithOptions(request, runtime);
}

model UpdateVideoProcessingRequest {
  configId?: long(name='ConfigId', description='This parameter is required.', example='35281609698****'),
  flvSeekEnd?: string(name='FlvSeekEnd', example='end'),
  flvSeekStart?: string(name='FlvSeekStart', example='start'),
  flvVideoSeekMode?: string(name='FlvVideoSeekMode', example='by_byte'),
  mp4SeekEnd?: string(name='Mp4SeekEnd', example='end'),
  mp4SeekStart?: string(name='Mp4SeekStart', example='start'),
  rule?: string(name='Rule', example='(http.host eq "video.example.com")'),
  ruleEnable?: string(name='RuleEnable', example='on'),
  ruleName?: string(name='RuleName', example='rule_example'),
  sequence?: int32(name='Sequence', example='1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  videoSeekEnable?: string(name='VideoSeekEnable', example='on'),
}

model UpdateVideoProcessingResponseBody = {
  requestId?: string(name='RequestId', example='3558df77-8a7a-4060-a900-2d7949403836'),
}

model UpdateVideoProcessingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVideoProcessingResponseBody(name='body'),
}

/**
 * @summary 修改站点视频处理配置
 *
 * @param request UpdateVideoProcessingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateVideoProcessingResponse
 */
@context("updateVideoProcessingWithContext")
async function updateVideoProcessingWithOptions(request: UpdateVideoProcessingRequest, runtime: $RuntimeOptions): UpdateVideoProcessingResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!$isNull(request.flvSeekEnd)) {
    query['FlvSeekEnd'] = request.flvSeekEnd;
  }
  if (!$isNull(request.flvSeekStart)) {
    query['FlvSeekStart'] = request.flvSeekStart;
  }
  if (!$isNull(request.flvVideoSeekMode)) {
    query['FlvVideoSeekMode'] = request.flvVideoSeekMode;
  }
  if (!$isNull(request.mp4SeekEnd)) {
    query['Mp4SeekEnd'] = request.mp4SeekEnd;
  }
  if (!$isNull(request.mp4SeekStart)) {
    query['Mp4SeekStart'] = request.mp4SeekStart;
  }
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.videoSeekEnable)) {
    query['VideoSeekEnable'] = request.videoSeekEnable;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateVideoProcessing',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改站点视频处理配置
 *
 * @param request UpdateVideoProcessingRequest
 * @return UpdateVideoProcessingResponse
 */
async function updateVideoProcessing(request: UpdateVideoProcessingRequest): UpdateVideoProcessingResponse {
  var runtime = new $RuntimeOptions{};
  return updateVideoProcessingWithOptions(request, runtime);
}

model UpdateWafRuleRequest {
  config?: WafRuleConfig(name='Config', description='Rule configuration.'),
  id?: long(name='Id', description='WAF rule ID, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.

This parameter is required.', example='20000001'),
  position?: long(name='Position', description='The position of the rule in the rule set.', example='1'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
  status?: string(name='Status', description='Rule status.', example='on'),
}

model UpdateWafRuleShrinkRequest {
  configShrink?: string(name='Config', description='Rule configuration.'),
  id?: long(name='Id', description='WAF rule ID, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.

This parameter is required.', example='20000001'),
  position?: long(name='Position', description='The position of the rule in the rule set.', example='1'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
  status?: string(name='Status', description='Rule status.', example='on'),
}

model UpdateWafRuleResponseBody = {
  id?: long(name='Id', description='WAF rule ID, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2878257.html) interface.', example='20000001'),
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWafRuleResponseBody(name='body'),
}

/**
 * @summary Update WAF Rule Page
 *
 * @param tmpReq UpdateWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWafRuleResponse
 */
@context("updateWafRuleWithContext")
async function updateWafRuleWithOptions(tmpReq: UpdateWafRuleRequest, runtime: $RuntimeOptions): UpdateWafRuleResponse {
  tmpReq.validate();
  var request = new UpdateWafRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.configShrink)) {
    body['Config'] = request.configShrink;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.position)) {
    body['Position'] = request.position;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update WAF Rule Page
 *
 * @param request UpdateWafRuleRequest
 * @return UpdateWafRuleResponse
 */
async function updateWafRule(request: UpdateWafRuleRequest): UpdateWafRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateWafRuleWithOptions(request, runtime);
}

model UpdateWafRulesetRequest {
  id?: long(name='Id', description='ID of the WAF ruleset, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2878359.html) interface.

This parameter is required.', example='10000001'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='Site version.', example='0'),
  status?: string(name='Status', description='The target status to change for the ruleset.', example='on'),
}

model UpdateWafRulesetResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWafRulesetResponseBody(name='body'),
}

/**
 * @summary Update WAF Ruleset
 *
 * @param request UpdateWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWafRulesetResponse
 */
@context("updateWafRulesetWithContext")
async function updateWafRulesetWithOptions(request: UpdateWafRulesetRequest, runtime: $RuntimeOptions): UpdateWafRulesetResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update WAF Ruleset
 *
 * @param request UpdateWafRulesetRequest
 * @return UpdateWafRulesetResponse
 */
async function updateWafRuleset(request: UpdateWafRulesetRequest): UpdateWafRulesetResponse {
  var runtime = new $RuntimeOptions{};
  return updateWafRulesetWithOptions(request, runtime);
}

model UpdateWaitingRoomRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off', example='on'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', description='The domain name.', example='example.com'),
      path?: string(name='Path', description='The probe path.', example='/test'),
      subdomain?: string(name='Subdomain', description='The subdomain.', example='test.'),
    }
  ](name='HostNameAndPath', description='The hostname and path.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If JSON response is enabled, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
  name?: string(name='Name', description='The name of the waiting room.'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='300'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='default'),
}

model UpdateWaitingRoomShrinkRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off', example='on'),
  hostNameAndPathShrink?: string(name='HostNameAndPath', description='The hostname and path.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If JSON response is enabled, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
  name?: string(name='Name', description='The name of the waiting room.'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='300'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='default'),
}

model UpdateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a waiting room.
 *
 * @param tmpReq UpdateWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomResponse
 */
@context("updateWaitingRoomWithContext")
async function updateWaitingRoomWithOptions(tmpReq: UpdateWaitingRoomRequest, runtime: $RuntimeOptions): UpdateWaitingRoomResponse {
  tmpReq.validate();
  var request = new UpdateWaitingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.hostNameAndPath)) {
    request.hostNameAndPathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostNameAndPath, 'HostNameAndPath', 'json');
  }
  var query = {};
  if (!$isNull(request.cookieName)) {
    query['CookieName'] = request.cookieName;
  }
  if (!$isNull(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.hostNameAndPathShrink)) {
    query['HostNameAndPath'] = request.hostNameAndPathShrink;
  }
  if (!$isNull(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!$isNull(request.language)) {
    query['Language'] = request.language;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!$isNull(request.queueAllEnable)) {
    query['QueueAllEnable'] = request.queueAllEnable;
  }
  if (!$isNull(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!$isNull(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!$isNull(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!$isNull(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  if (!$isNull(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a waiting room.
 *
 * @param request UpdateWaitingRoomRequest
 * @return UpdateWaitingRoomResponse
 */
async function updateWaitingRoom(request: UpdateWaitingRoomRequest): UpdateWaitingRoomResponse {
  var runtime = new $RuntimeOptions{};
  return updateWaitingRoomWithOptions(request, runtime);
}

model UpdateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='html-yets-maqi1111'),
  description?: string(name='Description', description='The description of the waiting room.', example='http://yywyyw.com'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='off'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room event. Valid values:

*   `on`
*   `off`', example='on'),
  endTime?: string(name='EndTime', description='The end time of the event. This value is a UNIX timestamp.', example='1719849600'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. Valid values:

*   on
*   off', example='off'),
  language?: string(name='Language', description='The default language. Valid values:

*   `enus`: English.
*   `zhcn`: Simplified Chinese.
*   `zhhk`: Traditional Chinese.', example='enus'),
  name?: string(name='Name', description='The name of the waiting room event.'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='300'),
  preQueueEnable?: string(name='PreQueueEnable', description='Specifies whether to enable pre-queuing.

*   on
*   off', example='on'),
  preQueueStartTime?: string(name='PreQueueStartTime', description='The start time for pre-queuing.', example='1719763200'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: All requests are blocked from accessing the origin.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', description='Specifies whether to enable random queuing.

*   on
*   off', example='on'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='The start time of the event. This value is a UNIX timestamp.', example='1719763200'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='200'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', description='The ID of the waiting room event, which can be obtained by calling the [ListWaitingRoomEvents](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='89677721098****'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='custom'),
}

model UpdateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a waiting room event.
 *
 * @param request UpdateWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomEventResponse
 */
@context("updateWaitingRoomEventWithContext")
async function updateWaitingRoomEventWithOptions(request: UpdateWaitingRoomEventRequest, runtime: $RuntimeOptions): UpdateWaitingRoomEventResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!$isNull(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!$isNull(request.language)) {
    query['Language'] = request.language;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!$isNull(request.preQueueEnable)) {
    query['PreQueueEnable'] = request.preQueueEnable;
  }
  if (!$isNull(request.preQueueStartTime)) {
    query['PreQueueStartTime'] = request.preQueueStartTime;
  }
  if (!$isNull(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!$isNull(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!$isNull(request.randomPreQueueEnable)) {
    query['RandomPreQueueEnable'] = request.randomPreQueueEnable;
  }
  if (!$isNull(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!$isNull(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!$isNull(request.waitingRoomEventId)) {
    query['WaitingRoomEventId'] = request.waitingRoomEventId;
  }
  if (!$isNull(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a waiting room event.
 *
 * @param request UpdateWaitingRoomEventRequest
 * @return UpdateWaitingRoomEventResponse
 */
async function updateWaitingRoomEvent(request: UpdateWaitingRoomEventRequest): UpdateWaitingRoomEventResponse {
  var runtime = new $RuntimeOptions{};
  return updateWaitingRoomEventWithOptions(request, runtime);
}

model UpdateWaitingRoomRuleRequest {
  rule?: string(name='Rule', description='Rule content, using conditional expressions to match user requests. This parameter is not required when adding global configuration. There are two usage scenarios:
- Match all incoming requests: Set the value to true
- Match specific requests: Set the value to a custom expression, for example: (http.host eq "video.example.com")

This parameter is required.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Rule switch. This parameter is not required when adding global configuration. Value range:
- on: Enable.
- off: Disable.

This parameter is required.', example='on'),
  ruleName?: string(name='RuleName', description='Rule name. This parameter is not required when adding global configuration.

This parameter is required.', example='test1'),
  siteId?: long(name='SiteId', description='Site ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) interface.

This parameter is required.', example='123456****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='The ID of the waiting room bypass rule to be updated, which can be obtained by calling the [ListWaitingRoomRules](https://help.aliyun.com/document_detail/2850279.html) interface.

This parameter is required.', example='8987739839****'),
}

model UpdateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID, used for tracking the progress of request processing.', example='9bfe9d95-7bf6-469d-a628-ed7bc9f25073'),
}

model UpdateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary Modify Waiting Room Rule
 *
 * @description This interface allows you to modify the rule settings of a specific waiting room in a site, including the rule name, enable status, and rule content, etc.
 *
 * @param request UpdateWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomRuleResponse
 */
@context("updateWaitingRoomRuleWithContext")
async function updateWaitingRoomRuleWithOptions(request: UpdateWaitingRoomRuleRequest, runtime: $RuntimeOptions): UpdateWaitingRoomRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!$isNull(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!$isNull(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.waitingRoomRuleId)) {
    query['WaitingRoomRuleId'] = request.waitingRoomRuleId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify Waiting Room Rule
 *
 * @description This interface allows you to modify the rule settings of a specific waiting room in a site, including the rule name, enable status, and rule content, etc.
 *
 * @param request UpdateWaitingRoomRuleRequest
 * @return UpdateWaitingRoomRuleResponse
 */
async function updateWaitingRoomRule(request: UpdateWaitingRoomRuleRequest): UpdateWaitingRoomRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateWaitingRoomRuleWithOptions(request, runtime);
}

model UploadClientCaCertificateRequest {
  certificate?: string(name='Certificate', description='The certificate content.

This parameter is required.', example='-----BEGIN CERTIFICATE-----'),
  name?: string(name='Name', description='The certificate name.', example='yourCertName'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model UploadClientCaCertificateResponseBody = {
  commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='GlobalSign nv-sa'),
  notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-12-01T02:13:07Z'),
  notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-12-01T02:13:07Z'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
  status?: string(name='Status', description='The status of the certificate.', example='OK'),
  validityDays?: string(name='ValidityDays', description='The validity period of the certificate. Unit: day.', example='300'),
}

model UploadClientCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadClientCaCertificateResponseBody(name='body'),
}

/**
 * @summary Uploads a client certificate authority (CA) certificate.
 *
 * @param request UploadClientCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadClientCaCertificateResponse
 */
@context("uploadClientCaCertificateWithContext")
async function uploadClientCaCertificateWithOptions(request: UploadClientCaCertificateRequest, runtime: $RuntimeOptions): UploadClientCaCertificateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadClientCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Uploads a client certificate authority (CA) certificate.
 *
 * @param request UploadClientCaCertificateRequest
 * @return UploadClientCaCertificateResponse
 */
async function uploadClientCaCertificate(request: UploadClientCaCertificateRequest): UploadClientCaCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return uploadClientCaCertificateWithOptions(request, runtime);
}

model UploadFileRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge or prefetch task. Valid values:

*   **file** (default): purges the cache by file.
*   **preload**: prefetches the file.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.

This parameter is required.', example='file'),
  uploadTaskName?: string(name='UploadTaskName', description='The name of the upload task.

This parameter is required.', example='purge_task_2024_11_11'),
  url?: string(name='Url', description='The OSS URL of the file that contains resources to be purged or prefetched.

This parameter is required.', example='https://xxxxx.oss-cn-shenzhen.aliyuncs.com/test_oss_file?Expires=1708659191&OSSAccessKeyId=**********&Signature=**********'),
}

model UploadFileAdvanceRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge or prefetch task. Valid values:

*   **file** (default): purges the cache by file.
*   **preload**: prefetches the file.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.

This parameter is required.', example='file'),
  uploadTaskName?: string(name='UploadTaskName', description='The name of the upload task.

This parameter is required.', example='purge_task_2024_11_11'),
  urlObject?: readable(name='Url', description='The OSS URL of the file that contains resources to be purged or prefetched.

This parameter is required.', example='https://xxxxx.oss-cn-shenzhen.aliyuncs.com/test_oss_file?Expires=1708659191&OSSAccessKeyId=**********&Signature=**********'),
}

model UploadFileResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  uploadId?: long(name='UploadId', description='The ID of the file upload task. You can use this ID for task submission or query subsequently.', example='159253299357****'),
}

model UploadFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadFileResponseBody(name='body'),
}

/**
 * @summary Uploads the file that contains resources to be purged or prefetched.
 *
 * @description > 
 * *   The file can be up to 10 MB in size.
 *
 * @param request UploadFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadFileResponse
 */
@context("uploadFileWithContext")
async function uploadFileWithOptions(request: UploadFileRequest, runtime: $RuntimeOptions): UploadFileResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  if (!$isNull(request.uploadTaskName)) {
    query['UploadTaskName'] = request.uploadTaskName;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadFile',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Uploads the file that contains resources to be purged or prefetched.
 *
 * @description > 
 * *   The file can be up to 10 MB in size.
 *
 * @param request UploadFileRequest
 * @return UploadFileResponse
 */
async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  var runtime = new $RuntimeOptions{};
  return uploadFileWithOptions(request, runtime);
}

async function uploadFileAdvance(request: UploadFileAdvanceRequest, runtime: $RuntimeOptions): UploadFileResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'ESA',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var uploadFileReq = new UploadFileRequest{};
  OpenApiUtil.convert(request, uploadFileReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    uploadFileReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var uploadFileResp = uploadFileWithOptions(uploadFileReq, runtime);
  return uploadFileResp;
}

model UploadOriginCaCertificateRequest {
  certificate?: string(name='Certificate', description='The certificate content.

This parameter is required.', example='-----BEGIN CERTIFICATE-----'),
  name?: string(name='Name', description='The certificate name.', example='example'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890***'),
}

model UploadOriginCaCertificateResponseBody = {
  commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
  id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
  issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='GlobalSign nv-sa'),
  notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-12-01T02:13:07Z'),
  notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-12-01T02:13:07Z'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1daa'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
  status?: string(name='Status', description='Indicates whether the operation is successful.

*   OK
*   Fail', example='OK'),
  validityDays?: string(name='ValidityDays', description='The validity period of the certificate. Unit: day.', example='365'),
}

model UploadOriginCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadOriginCaCertificateResponseBody(name='body'),
}

/**
 * @summary 上传源服务器CA证书
 *
 * @param request UploadOriginCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadOriginCaCertificateResponse
 */
@context("uploadOriginCaCertificateWithContext")
async function uploadOriginCaCertificateWithOptions(request: UploadOriginCaCertificateRequest, runtime: $RuntimeOptions): UploadOriginCaCertificateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadOriginCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上传源服务器CA证书
 *
 * @param request UploadOriginCaCertificateRequest
 * @return UploadOriginCaCertificateResponse
 */
async function uploadOriginCaCertificate(request: UploadOriginCaCertificateRequest): UploadOriginCaCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return uploadOriginCaCertificateWithOptions(request, runtime);
}

model UploadOriginClientCertificateRequest {
  certificate?: string(name='Certificate', description='The certificate content.

This parameter is required.', example='-----BEGIN CERTIFICATE-----'),
  name?: string(name='Name', description='The certificate name.', example='test'),
  privateKey?: string(name='PrivateKey', description='The private key of the certificate.

This parameter is required.', example='-----BEGIN PRIVATE KEY-----'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456789****'),
}

model UploadOriginClientCertificateResponseBody = {
  commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
  id?: string(name='Id', description='The certificate ID.', example='babaabcd****'),
  issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='GlobalSign nv-sa'),
  notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-12-01T02:13:07Z'),
  notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-12-01T02:13:07Z'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1daa'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
  status?: string(name='Status', description='The status of the certificate.', example='OK'),
  validityDays?: string(name='ValidityDays', description='The validity period of the certificate. Unit: day.', example='365'),
}

model UploadOriginClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadOriginClientCertificateResponseBody(name='body'),
}

/**
 * @summary 上传域名回源客户端证书
 *
 * @param request UploadOriginClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadOriginClientCertificateResponse
 */
@context("uploadOriginClientCertificateWithContext")
async function uploadOriginClientCertificateWithOptions(request: UploadOriginClientCertificateRequest, runtime: $RuntimeOptions): UploadOriginClientCertificateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.privateKey)) {
    body['PrivateKey'] = request.privateKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadOriginClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上传域名回源客户端证书
 *
 * @param request UploadOriginClientCertificateRequest
 * @return UploadOriginClientCertificateResponse
 */
async function uploadOriginClientCertificate(request: UploadOriginClientCertificateRequest): UploadOriginClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return uploadOriginClientCertificateWithOptions(request, runtime);
}

model UploadSiteOriginClientCertificateRequest {
  certificate?: string(name='Certificate', description='The certificate content.

This parameter is required.', example='-----BEGIN CERTIFICATE-----'),
  name?: string(name='Name', description='The certificate name.', example='example'),
  privateKey?: string(name='PrivateKey', description='The private key of the certificate.

This parameter is required.', example='-----BEGIN PRIVATE KEY-----'),
  siteId?: long(name='SiteId', description='Site ID.

This parameter is required.', example='123456789****'),
}

model UploadSiteOriginClientCertificateResponseBody = {
  commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca**'),
  id?: string(name='Id', description='The certificate ID on ESA.', example='babaabcd****'),
  issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='GlobalSign nv-sa'),
  notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-12-01T02:12:49Z'),
  notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-12-01T02:13:07Z'),
  requestId?: string(name='RequestId', description='Request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1d**'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
  status?: string(name='Status', description='The status of the certificate.', example='OK'),
  validityDays?: string(name='ValidityDays', description='The validity period of the certificate. Unit: day.', example='365'),
}

model UploadSiteOriginClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadSiteOriginClientCertificateResponseBody(name='body'),
}

/**
 * @summary Upload site origin client certificate
 *
 * @param request UploadSiteOriginClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadSiteOriginClientCertificateResponse
 */
@context("uploadSiteOriginClientCertificateWithContext")
async function uploadSiteOriginClientCertificateWithOptions(request: UploadSiteOriginClientCertificateRequest, runtime: $RuntimeOptions): UploadSiteOriginClientCertificateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.privateKey)) {
    body['PrivateKey'] = request.privateKey;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadSiteOriginClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Upload site origin client certificate
 *
 * @param request UploadSiteOriginClientCertificateRequest
 * @return UploadSiteOriginClientCertificateResponse
 */
async function uploadSiteOriginClientCertificate(request: UploadSiteOriginClientCertificateRequest): UploadSiteOriginClientCertificateResponse {
  var runtime = new $RuntimeOptions{};
  return uploadSiteOriginClientCertificateWithOptions(request, runtime);
}

model VerifySiteRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model VerifySiteResponseBody = {
  passed?: boolean(name='Passed', description='Indicates whether the verification passed. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model VerifySiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifySiteResponseBody(name='body'),
}

/**
 * @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
 *
 * @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
 * 2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
 *
 * @param request VerifySiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return VerifySiteResponse
 */
@context("verifySiteWithContext")
async function verifySiteWithOptions(request: VerifySiteRequest, runtime: $RuntimeOptions): VerifySiteResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'VerifySite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
 *
 * @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
 * 2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
 *
 * @param request VerifySiteRequest
 * @return VerifySiteResponse
 */
async function verifySite(request: VerifySiteRequest): VerifySiteResponse {
  var runtime = new $RuntimeOptions{};
  return verifySiteWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
