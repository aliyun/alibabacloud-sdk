/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ESA';
  @version = '2024-09-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model WafBatchRuleShared {
  action?: string(name='Action'),
  actions?: {
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  crossSiteId?: long(name='CrossSiteId'),
  expression?: string(name='Expression'),
  match?: WafRuleMatch2(name='Match'),
  mode?: string(name='Mode'),
  name?: string(name='Name'),
  target?: string(name='Target'),
}

model WafQuotaInteger {
  equal?: int32(name='Equal'),
  greaterThan?: int32(name='GreaterThan'),
  greaterThanOrEqual?: int32(name='GreaterThanOrEqual'),
  lessThan?: int32(name='LessThan'),
  lessThanOrEqual?: int32(name='LessThanOrEqual'),
}

model WafQuotaString {
  regexp?: string(name='Regexp'),
}

model WafRuleConfig {
  action?: string(name='Action'),
  actions?: {
    bypass?: {
      regularRules?: [ long ](name='RegularRules'),
      regularTypes?: [ string ](name='RegularTypes'),
      skip?: string(name='Skip'),
      tags?: [ string ](name='Tags'),
    }(name='Bypass'),
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  appPackage?: {
    packageSigns?: [ 
      {
        name?: string(name='Name'),
        sign?: string(name='Sign'),
      }
    ](name='PackageSigns'),
  }(name='AppPackage'),
  appSdk?: {
    customSign?: {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }(name='CustomSign'),
    customSignStatus?: string(name='CustomSignStatus'),
    featureAbnormal?: [ string ](name='FeatureAbnormal'),
  }(name='AppSdk'),
  expression?: string(name='Expression'),
  id?: long(name='Id'),
  managedGroupId?: long(name='ManagedGroupId'),
  managedList?: string(name='ManagedList'),
  managedRulesets?: [ 
    {
      action?: string(name='Action'),
      attackType?: int32(name='AttackType'),
      managedRules?: [ 
        {
          action?: string(name='Action'),
          id?: long(name='Id'),
          status?: string(name='Status'),
        }
      ](name='ManagedRules'),
      numberEnabled?: int32(name='NumberEnabled'),
      numberTotal?: int32(name='NumberTotal'),
      protectionLevel?: int32(name='ProtectionLevel'),
    }
  ](name='ManagedRulesets'),
  match?: WafRuleMatch(name='Match'),
  name?: string(name='Name'),
  rateLimit?: {
    characteristics?: WafRuleMatch2(name='Characteristics'),
    interval?: int32(name='Interval'),
    onHit?: boolean(name='OnHit'),
    TTL?: int32(name='TTL'),
    threshold?: {
      distinctManagedRules?: int32(name='DistinctManagedRules'),
      managedRulesBlocked?: int32(name='ManagedRulesBlocked'),
      request?: int32(name='Request'),
      responseStatus?: {
        code?: int32(name='Code'),
        count?: int32(name='Count'),
        ratio?: int32(name='Ratio'),
      }(name='ResponseStatus'),
      traffic?: string(name='Traffic'),
    }(name='Threshold'),
  }(name='RateLimit'),
  sigchl?: [ string ](name='Sigchl'),
  status?: string(name='Status'),
  timer?: WafTimer(name='Timer'),
  type?: string(name='Type'),
}

model WafRuleMatch {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [
    WafRuleMatch
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafRuleMatch2 {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [ 
    {
      convertToLower?: boolean(name='ConvertToLower'),
      criteria?: [ 
        {
          convertToLower?: boolean(name='ConvertToLower'),
          criteria?: [ 
            {
              convertToLower?: boolean(name='ConvertToLower'),
              matchOperator?: string(name='MatchOperator'),
              matchType?: string(name='MatchType'),
              matchValue?: any(name='MatchValue'),
              negate?: boolean(name='Negate'),
            }
          ](name='Criteria'),
          logic?: string(name='Logic'),
          matchOperator?: string(name='MatchOperator'),
          matchType?: string(name='MatchType'),
          matchValue?: any(name='MatchValue'),
          negate?: boolean(name='Negate'),
        }
      ](name='Criteria'),
      logic?: string(name='Logic'),
      matchOperator?: string(name='MatchOperator'),
      matchType?: string(name='MatchType'),
      matchValue?: any(name='MatchValue'),
      negate?: boolean(name='Negate'),
    }
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafSiteSettings {
  addBotProtectionHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddBotProtectionHeaders'),
  addSecurityHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddSecurityHeaders'),
  clientIpIdentifier?: {
    headers?: [ string ](name='Headers'),
    mode?: string(name='Mode'),
  }(name='ClientIpIdentifier'),
  securityLevel?: {
    value?: string(name='Value'),
  }(name='SecurityLevel'),
}

model WafTimer {
  periods?: [ 
    {
      end?: string(name='End'),
      start?: string(name='Start'),
    }
  ](name='Periods'),
  scopes?: string(name='Scopes'),
  weeklyPeriods?: [ 
    {
      dailyPeriods?: [ 
        {
          end?: string(name='End'),
          start?: string(name='Start'),
        }
      ](name='DailyPeriods'),
      days?: string(name='Days'),
    }
  ](name='WeeklyPeriods'),
  zone?: int32(name='Zone'),
}

model ActivateClientCertificateRequest {
  id: string(name='Id', description='This parameter is required.', example='babaded901474b9693acf530e0fb****', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model ActivateClientCertificateResponseBody = {
  id?: string(name='Id', example='babaded901474b9693acf530e0fb****'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
}

model ActivateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateClientCertificateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ActivateClientCertificate  ActivateClientCertificateRequest
  * @return ActivateClientCertificateResponse
 */
async function activateClientCertificate(request: ActivateClientCertificateRequest): ActivateClientCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateClientCertificate', 'GET', '/', 'json', false, 'json', request);
}

model BatchCreateRecordsRequest {
  recordList: [ 
    {
      bizName?: string(name='BizName', example='web'),
      data: {
        algorithm?: int32(name='Algorithm', example='0'),
        certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
        flag?: int32(name='Flag', example='128'),
        keyTag?: int32(name='KeyTag', example='0'),
        matchingType?: int32(name='MatchingType', example='0'),
        port?: int32(name='Port', example='0'),
        priority?: int32(name='Priority', example='2'),
        selector?: int32(name='Selector', example='0'),
        tag?: string(name='Tag', example='issue'),
        type?: int32(name='Type', example='0'),
        usage?: int32(name='Usage', example='0'),
        value?: string(name='Value', example='example.com'),
        weight?: int32(name='Weight', example='0'),
      }(name='Data', description='This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
      proxied: boolean(name='Proxied', description='This parameter is required.', example='true'),
      recordName: string(name='RecordName', description='This parameter is required.', example='www.example.com'),
      sourceType?: string(name='SourceType', example='OSS'),
      ttl: int32(name='Ttl', description='This parameter is required.', example='60'),
      type: string(name='Type', description='This parameter is required.', example='A/AAAA'),
    }
  ](name='RecordList', description='This parameter is required.', shrink='json', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model BatchCreateRecordsResponseBody = {
  recordResultList?: {
    failed?: [ 
      {
        bizName?: string(name='BizName', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', example='0'),
          certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
          flag?: int32(name='Flag', example='128'),
          keyTag?: int32(name='KeyTag', example='0'),
          matchingType?: int32(name='MatchingType', example='RSA'),
          port?: int32(name='Port', example='0'),
          priority?: int32(name='Priority', example='10'),
          selector?: int32(name='Selector', example='0'),
          tag?: string(name='Tag', example='issue'),
          type?: int32(name='Type', example='0'),
          usage?: int32(name='Usage', example='0'),
          value?: string(name='Value', example='example.com'),
          weight?: int32(name='Weight', example='0'),
        }(name='Data', example='{"value":"2.2.2.2"}'),
        description?: string(name='Description'),
        proxied?: boolean(name='Proxied', example='true'),
        recordId?: long(name='RecordId', example='1234567890123'),
        recordName?: string(name='RecordName', example='a.example.com'),
        recordType?: string(name='RecordType', example='A/AAAA'),
        sourceType?: string(name='SourceType', example='OSS'),
        ttl?: int32(name='Ttl', example='60'),
      }
    ](name='Failed'),
    success?: [ 
      {
        bizName?: string(name='BizName', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', example='0'),
          certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
          flag?: int32(name='Flag', example='128'),
          keyTag?: int32(name='KeyTag', example='0'),
          matchingType?: int32(name='MatchingType', example='0'),
          port?: int32(name='Port', example='0'),
          priority?: int32(name='Priority', example='10'),
          selector?: int32(name='Selector', example='0'),
          tag?: string(name='Tag', example='issue'),
          type?: int32(name='Type', example='0'),
          usage?: int32(name='Usage', example='0'),
          value?: string(name='Value', example='example.com'),
          weight?: int32(name='Weight', example='0'),
        }(name='Data', example='{"value":"1.1.1.1"}'),
        description?: string(name='Description', example='success'),
        proxied?: boolean(name='Proxied', example='true'),
        recordId?: long(name='RecordId', example='1234567890123'),
        recordName?: string(name='RecordName', example='www.example.com'),
        recordType?: string(name='RecordType', example='A/AAAA'),
        sourceType?: string(name='SourceType', example='OSS'),
        ttl?: int32(name='Ttl', example='60'),
      }
    ](name='Success'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='RecordResultList'),
  requestId?: string(name='RequestId', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model BatchCreateRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateRecords  BatchCreateRecordsRequest
  * @return BatchCreateRecordsResponse
 */
async function batchCreateRecords(request: BatchCreateRecordsRequest): BatchCreateRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateRecords', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateWafRulesRequest {
  configs?: [
    WafRuleConfig
  ](name='Configs', shrink='json', position='Body'),
  phase?: string(name='Phase', example='http_custom', position='Body'),
  shared?: WafBatchRuleShared(name='Shared', shrink='json', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
}

model BatchCreateWafRulesResponseBody = {
  ids?: [ long ](name='Ids'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId'),
}

model BatchCreateWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateWafRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateWafRules  BatchCreateWafRulesRequest
  * @return BatchCreateWafRulesResponse
 */
async function batchCreateWafRules(request: BatchCreateWafRulesRequest): BatchCreateWafRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateWafRules', 'POST', '/', 'json', true, 'form', request);
}

model BatchDeleteKvRequest {
  keys: [ string ](name='Keys', description='This parameter is required.', shrink='json', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
}

model BatchDeleteKvResponseBody = {
  failKeys?: [ string ](name='FailKeys'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys'),
}

model BatchDeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteKv  BatchDeleteKvRequest
  * @return BatchDeleteKvResponse
 */
async function batchDeleteKv(request: BatchDeleteKvRequest): BatchDeleteKvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteKv', 'POST', '/', 'json', true, 'form', request);
}

model BatchGetExpressionFieldsRequest {
  expressions?: [ 
    {
      expression?: string(name='Expression', example='ip.src eq 1.1.1.1'),
      id?: long(name='Id', example='1'),
    }
  ](name='Expressions', example='http_bot', shrink='json', position='Body'),
  phase?: string(name='Phase', example='http_bot', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
}

model BatchGetExpressionFieldsResponseBody = {
  fields?: [ 
    {
      fields?: [ string ](name='Fields'),
      id?: string(name='Id', example='1'),
    }
  ](name='Fields'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchGetExpressionFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetExpressionFieldsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetExpressionFields  BatchGetExpressionFieldsRequest
  * @return BatchGetExpressionFieldsResponse
 */
async function batchGetExpressionFields(request: BatchGetExpressionFieldsRequest): BatchGetExpressionFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetExpressionFields', 'POST', '/', 'json', true, 'form', request);
}

model BatchPutKvRequest {
  kvList: [ 
    {
      expiration?: long(name='Expiration', example='1690081381'),
      expirationTtl?: long(name='ExpirationTtl', example='3600'),
      key: string(name='Key', description='This parameter is required.', example='test_key'),
      value: string(name='Value', description='This parameter is required.', example='test_value'),
    }
  ](name='KvList', description='This parameter is required.', shrink='json', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
}

model BatchPutKvResponseBody = {
  failKeys?: [ string ](name='FailKeys'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys'),
}

model BatchPutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchPutKv  BatchPutKvRequest
  * @return BatchPutKvResponse
 */
async function batchPutKv(request: BatchPutKvRequest): BatchPutKvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchPutKv', 'POST', '/', 'json', true, 'form', request);
}

model BatchUpdateWafRulesRequest {
  configs?: [
    WafRuleConfig
  ](name='Configs', shrink='json', position='Body'),
  phase?: string(name='Phase', example='http_custom', position='Body'),
  rulesetId?: long(name='RulesetId', example='10000001', position='Body'),
  shared?: WafBatchRuleShared(name='Shared', shrink='json', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
}

model BatchUpdateWafRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchUpdateWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateWafRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUpdateWafRules  BatchUpdateWafRulesRequest
  * @return BatchUpdateWafRulesResponse
 */
async function batchUpdateWafRules(request: BatchUpdateWafRulesRequest): BatchUpdateWafRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateWafRules', 'POST', '/', 'json', true, 'form', request);
}

model BlockObjectRequest {
  content: [ string ](name='Content', description='This parameter is required.', shrink='json', position='Query'),
  extension?: string(name='Extension', position='Query'),
  maxage?: int32(name='Maxage', minimum=600, maximum=864000, position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='BlockObject', position='Query'),
  type: string(name='Type', description='This parameter is required.', position='Query'),
}

model BlockObjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  taskId?: string(name='TaskId'),
}

model BlockObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlockObjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BlockObject  BlockObjectRequest
  * @return BlockObjectResponse
 */
async function blockObject(request: BlockObjectRequest): BlockObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BlockObject', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='This parameter is required.', example='rg-axxxxxx', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  siteId?: long(name='SiteId', example='123456****', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F8AA0364-0FDB-4AD5-AC74-D69FAB8924ED'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckSiteNameRequest {
  siteName: string(name='SiteName', description='This parameter is required.', example='example.com', position='Query'),
}

model CheckSiteNameResponseBody = {
  description?: string(name='Description', example='success'),
  isSubSite?: boolean(name='IsSubSite', example='false'),
  messeage?: string(name='Messeage'),
  passed?: boolean(name='Passed', example='true'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CheckSiteNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckSiteName  CheckSiteNameRequest
  * @return CheckSiteNameResponse
 */
async function checkSiteName(request: CheckSiteNameRequest): CheckSiteNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSiteName', 'POST', '/', 'json', false, 'json', request);
}

model CheckSiteProjectNameRequest {
  projectName: string(name='ProjectName', description='This parameter is required.', example='user_log', position='Query'),
  siteId?: long(name='SiteId', example='12312312213212', position='Query'),
}

model CheckSiteProjectNameResponseBody = {
  check?: boolean(name='Check', example='true'),
  description?: string(name='Description', example='project name pass the check'),
  projectName?: string(name='ProjectName', example='dcdn_waf_userAccount_log'),
  requestId?: string(name='RequestId', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckSiteProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteProjectNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckSiteProjectName  CheckSiteProjectNameRequest
  * @return CheckSiteProjectNameResponse
 */
async function checkSiteProjectName(request: CheckSiteProjectNameRequest): CheckSiteProjectNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSiteProjectName', 'GET', '/', 'json', false, 'json', request);
}

model CheckUserProjectNameRequest {
  projectName: string(name='ProjectName', description='This parameter is required.', example='ali-dcdn-log-56', position='Query'),
}

model CheckUserProjectNameResponseBody = {
  check?: boolean(name='Check', example='true'),
  description?: string(name='Description', example='project name pass the check'),
  projectName?: string(name='ProjectName', example='ali-dcdn-log-56'),
  requestId?: string(name='RequestId', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckUserProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserProjectNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckUserProjectName  CheckUserProjectNameRequest
  * @return CheckUserProjectNameResponse
 */
async function checkUserProjectName(request: CheckUserProjectNameRequest): CheckUserProjectNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUserProjectName', 'GET', '/', 'json', false, 'json', request);
}

model CommitRoutineStagingCodeRequest {
  codeDescription?: string(name='CodeDescription', position='Body'),
  name?: string(name='Name', example='CommitRoutineStagingCode', position='Body'),
}

model CommitRoutineStagingCodeResponseBody = {
  codeVersion?: string(name='CodeVersion'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CommitRoutineStagingCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommitRoutineStagingCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CommitRoutineStagingCode  CommitRoutineStagingCodeRequest
  * @return CommitRoutineStagingCodeResponse
 */
async function commitRoutineStagingCode(request: CommitRoutineStagingCodeRequest): CommitRoutineStagingCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CommitRoutineStagingCode', 'POST', '/', 'json', true, 'form', request);
}

model CreateCustomScenePolicyRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='2021-11-07T18:00:00Z', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='test', maxLength=255, position='Query'),
  objects?: string(name='Objects', example='7096621098****', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2021-11-07T17:00:00Z', position='Query'),
  template: string(name='Template', description='This parameter is required.', example='promotion', position='Query'),
}

model CreateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', example='test'),
  objects?: [ string ](name='Objects'),
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  startTime?: string(name='StartTime', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', example='promotion'),
}

model CreateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomScenePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomScenePolicy  CreateCustomScenePolicyRequest
  * @return CreateCustomScenePolicyResponse
 */
async function createCustomScenePolicy(request: CreateCustomScenePolicyRequest): CreateCustomScenePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomScenePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateKvNamespaceRequest {
  description?: string(name='Description', example='this is a test namespace.', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Body'),
}

model CreateKvNamespaceResponseBody = {
  description?: string(name='Description', example='this is a test namespace.'),
  namespace?: string(name='Namespace', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', example='657717877171818496'),
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model CreateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKvNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateKvNamespace  CreateKvNamespaceRequest
  * @return CreateKvNamespaceResponse
 */
async function createKvNamespace(request: CreateKvNamespaceRequest): CreateKvNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKvNamespace', 'POST', '/', 'json', true, 'form', request);
}

model CreateListRequest {
  description?: string(name='Description', example='a custom list', position='Body'),
  items?: [ string ](name='Items', example='a custom list', shrink='json', position='Body'),
  kind?: string(name='Kind', example='ip', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='example', position='Body'),
}

model CreateListResponseBody = {
  id?: long(name='Id', example='40000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateList  CreateListRequest
  * @return CreateListResponse
 */
async function createList(request: CreateListRequest): CreateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateList', 'POST', '/', 'json', true, 'form', request);
}

model CreatePageRequest {
  content?: string(name='Content', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4=', position='Body'),
  contentType: string(name='ContentType', description='This parameter is required.', example='text/html', position='Body'),
  description?: string(name='Description', example='a custom deny page', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='example', position='Body'),
}

model CreatePageResponseBody = {
  id?: long(name='Id', example='50000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePage  CreatePageRequest
  * @return CreatePageResponse
 */
async function createPage(request: CreatePageRequest): CreatePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePage', 'POST', '/', 'json', true, 'form', request);
}

model CreateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
    authType?: string(name='AuthType', example='private'),
    region?: string(name='Region', example='us-east-1'),
    secretKey?: string(name='SecretKey', example='VIxuvJSA2S03f******kp208dy5w7'),
    version?: string(name='Version', example='v4'),
  }(name='AuthConf', shrink='json', position='Query'),
  bizName?: string(name='BizName', description='业务场景', example='web', position='Query'),
  comment?: string(name='Comment', example='This is a remark.', position='Query'),
  data: {
    algorithm?: int32(name='Algorithm', example='1'),
    certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
    fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
    flag?: int32(name='Flag', example='128'),
    keyTag?: int32(name='KeyTag', example='0'),
    matchingType?: int32(name='MatchingType', example='1'),
    port?: int32(name='Port', example='0'),
    priority?: int32(name='Priority', example='10'),
    selector?: int32(name='Selector', example='1'),
    tag?: string(name='Tag', example='issue'),
    type?: int32(name='Type', example='RSA'),
    usage?: int32(name='Usage', example='1'),
    value?: string(name='Value', example='example.com'),
    weight?: int32(name='Weight', example='0'),
  }(name='Data', description='This parameter is required.', example='{
    "value":"2.2.2.2"
}', shrink='json', position='Query'),
  hostPolicy?: string(name='HostPolicy', position='Query'),
  proxied?: boolean(name='Proxied', description='是否代理加速', example='true', position='Query'),
  recordName: string(name='RecordName', description='记录名称

This parameter is required.', example='www.example.com', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
  sourceType?: string(name='SourceType', example='OSS', position='Query'),
  ttl?: int32(name='Ttl', example='30', position='Query'),
  type: string(name='Type', description='记录类型

This parameter is required.', example='A/AAAA', position='Query'),
}

model CreateRecordResponseBody = {
  recordId?: long(name='RecordId', example='1234567890123'),
  requestId?: string(name='RequestId', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model CreateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRecord  CreateRecordRequest
  * @return CreateRecordResponse
 */
async function createRecord(request: CreateRecordRequest): CreateRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRecord', 'POST', '/', 'json', false, 'json', request);
}

model CreateRoutineRequest {
  description?: string(name='Description', example='the description of this routine', position='Body'),
  name?: string(name='Name', example='test-routine1', position='Body'),
  specName?: string(name='SpecName', example='5ms', position='Body'),
}

model CreateRoutineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', example='OK'),
}

model CreateRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRoutine  CreateRoutineRequest
  * @return CreateRoutineResponse
 */
async function createRoutine(request: CreateRoutineRequest): CreateRoutineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoutine', 'POST', '/', 'json', true, 'form', request);
}

model CreateRoutineRelatedRecordRequest {
  name?: string(name='Name', example='CreateRoutineRelatedRecord', position='Body'),
  recordName?: string(name='RecordName', position='Body'),
  siteId?: long(name='SiteId', position='Body'),
}

model CreateRoutineRelatedRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
}

model CreateRoutineRelatedRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineRelatedRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRoutineRelatedRecord  CreateRoutineRelatedRecordRequest
  * @return CreateRoutineRelatedRecordResponse
 */
async function createRoutineRelatedRecord(request: CreateRoutineRelatedRecordRequest): CreateRoutineRelatedRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoutineRelatedRecord', 'POST', '/', 'json', true, 'form', request);
}

model CreateRoutineRelatedRouteRequest {
  name?: string(name='Name', example='CreateRoutineRelatedRoute', position='Body'),
  route?: string(name='Route', position='Body'),
  siteId?: long(name='SiteId', position='Body'),
}

model CreateRoutineRelatedRouteResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
}

model CreateRoutineRelatedRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineRelatedRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRoutineRelatedRoute  CreateRoutineRelatedRouteRequest
  * @return CreateRoutineRelatedRouteResponse
 */
async function createRoutineRelatedRoute(request: CreateRoutineRelatedRouteRequest): CreateRoutineRelatedRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoutineRelatedRoute', 'POST', '/', 'json', true, 'form', request);
}

model CreateScheduledPreloadExecutionsRequest {
  executions: [ 
    {
      endTime?: string(name='EndTime'),
      interval: int32(name='Interval', description='This parameter is required.', minimum=1),
      sliceLen: int32(name='SliceLen', description='This parameter is required.', minimum=1, maximum=10),
      startTime?: string(name='StartTime'),
    }
  ](name='Executions', description='This parameter is required.', shrink='json', position='Body'),
  id?: string(name='Id', example='CreateScheduledPreloadExecutions', position='Query'),
}

model CreateScheduledPreloadExecutionsResponseBody = {
  failedExecutions?: [ 
    {
      aliUid?: string(name='AliUid'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      interval?: int32(name='Interval'),
      jobId?: string(name='JobId'),
      sliceLen?: int32(name='SliceLen'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='FailedExecutions'),
  failedMessages?: [ string ](name='FailedMessages'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successCount?: int32(name='SuccessCount'),
  successExecutions?: [ 
    {
      aliUid?: string(name='AliUid'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      interval?: int32(name='Interval'),
      jobId?: string(name='JobId'),
      sliceLen?: int32(name='SliceLen'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='SuccessExecutions'),
  totalCount?: int32(name='TotalCount'),
}

model CreateScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateScheduledPreloadExecutions  CreateScheduledPreloadExecutionsRequest
  * @return CreateScheduledPreloadExecutionsResponse
 */
async function createScheduledPreloadExecutions(request: CreateScheduledPreloadExecutionsRequest): CreateScheduledPreloadExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScheduledPreloadExecutions', 'POST', '/', 'json', true, 'form', request);
}

model CreateScheduledPreloadJobRequest {
  insertWay: string(name='InsertWay', description='This parameter is required.', example='oss', position='Body'),
  name: string(name='Name', description='This parameter is required.', minLength=1, maxLength=128, position='Body'),
  ossUrl?: string(name='OssUrl', position='Body'),
  siteId: long(name='SiteId', description='This parameter is required.', position='Body'),
  urlList?: string(name='UrlList', position='Body'),
}

model CreateScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid'),
  createdAt?: string(name='CreatedAt'),
  domains?: string(name='Domains'),
  errorInfo?: string(name='ErrorInfo'),
  failedFileOss?: string(name='FailedFileOss'),
  fileId?: string(name='FileId'),
  id?: string(name='Id'),
  insertWay?: string(name='InsertWay'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
  taskSubmitted?: int32(name='TaskSubmitted'),
  taskType?: string(name='TaskType'),
  urlCount?: int32(name='UrlCount'),
  urlSubmitted?: int32(name='UrlSubmitted'),
}

model CreateScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateScheduledPreloadJob  CreateScheduledPreloadJobRequest
  * @return CreateScheduledPreloadJobResponse
 */
async function createScheduledPreloadJob(request: CreateScheduledPreloadJobRequest): CreateScheduledPreloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScheduledPreloadJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateSiteRequest {
  accessType: string(name='AccessType', description='This parameter is required.', example='NS', position='Query'),
  coverage: string(name='Coverage', description='This parameter is required.', example='domestic', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='dbaudit-cn-nwy349jdb03', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmw4znnok****', position='Query'),
  siteName: string(name='SiteName', description='记录名称

This parameter is required.', example='CreateSite', position='Query'),
}

model CreateSiteResponseBody = {
  nameServerList?: string(name='NameServerList', example='ns1.example.com,ns2.example.com'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', example='1234567890123'),
  verifyCode?: string(name='VerifyCode', example='verify_aah9dioasmov****'),
}

model CreateSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSite  CreateSiteRequest
  * @return CreateSiteResponse
 */
async function createSite(request: CreateSiteRequest): CreateSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSite', 'POST', '/', 'json', false, 'json', request);
}

model CreateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies', shrink='json', position='Body'),
  requestHeaders?: [ string ](name='RequestHeaders', shrink='json', position='Body'),
  responseHeaders?: [ string ](name='ResponseHeaders', shrink='json', position='Body'),
  siteId?: long(name='SiteId', example='11223', position='Body'),
}

model CreateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='073bd613-6e72-4461-b6bc-19326dfc6a9c'),
}

model CreateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteCustomLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSiteCustomLog  CreateSiteCustomLogRequest
  * @return CreateSiteCustomLogResponse
 */
async function createSiteCustomLog(request: CreateSiteCustomLogRequest): CreateSiteCustomLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSiteCustomLog', 'POST', '/', 'json', true, 'form', request);
}

model CreateSiteDeliveryTaskRequest {
  businessType: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1', position='Body'),
  dataCenter: string(name='DataCenter', description='This parameter is required.', example='cn', position='Body'),
  deliveryType: string(name='DeliveryType', description='This parameter is required.', example='sls', position='Body'),
  discardRate?: float(name='DiscardRate', example='0.0', position='Body'),
  fieldName: string(name='FieldName', description='This parameter is required.', example='user_agent,ip_adress,ip_port', position='Body'),
  httpDelivery?: {
    compress?: string(name='Compress'),
    destUrl?: string(name='DestUrl'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam'),
    logBodyPrefix?: string(name='LogBodyPrefix'),
    logBodySuffix?: string(name='LogBodySuffix'),
    maxBatchMB?: long(name='MaxBatchMB'),
    maxBatchSize?: long(name='MaxBatchSize'),
    maxRetry?: long(name='MaxRetry'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam'),
    standardAuthOn?: boolean(name='StandardAuthOn'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime'),
      privateKey?: string(name='PrivateKey'),
      urlPath?: string(name='UrlPath'),
    }(name='StandardAuthParam'),
    transformTimeout?: long(name='TransformTimeout'),
  }(name='HttpDelivery', shrink='json', position='Body'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer'),
    brokers?: [ string ](name='Brokers'),
    compress?: string(name='Compress', example='gzip'),
    machanismType?: string(name='MachanismType'),
    password?: string(name='Password'),
    topic?: string(name='Topic'),
    userAuth?: boolean(name='UserAuth'),
    userName?: string(name='UserName'),
  }(name='KafkaDelivery', shrink='json', position='Body'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid'),
    bucketName?: string(name='BucketName'),
    prefixPath?: string(name='PrefixPath', example='logriver-test/log'),
    region?: string(name='Region', example='cn-beijing'),
  }(name='OssDelivery', shrink='json', position='Body'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey'),
    bucketPath?: string(name='BucketPath'),
    endpoint?: string(name='Endpoint'),
    prefixPath?: string(name='PrefixPath'),
    region?: string(name='Region'),
    s3Cmpt?: boolean(name='S3Cmpt'),
    secretKey?: string(name='SecretKey'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery', shrink='json', position='Body'),
  siteId?: long(name='SiteId', example='12312312112***', position='Body'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    SLSRegion?: string(name='SLSRegion'),
  }(name='SlsDelivery', shrink='json', position='Body'),
  taskName: string(name='TaskName', description='This parameter is required.', example='dcdn-test-task', position='Body'),
}

model CreateSiteDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', example='cn'),
  requestId?: string(name='RequestId', description='Id of the request', example='9358E852-992D-5BC7-8BD7-975CA02773A8'),
  siteId?: string(name='SiteId', example='123456****'),
  taskName?: string(name='TaskName', example='er-oss'),
}

model CreateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSiteDeliveryTask  CreateSiteDeliveryTaskRequest
  * @return CreateSiteDeliveryTaskResponse
 */
async function createSiteDeliveryTask(request: CreateSiteDeliveryTaskRequest): CreateSiteDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSiteDeliveryTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserDeliveryTaskRequest {
  businessType: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1', position='Body'),
  dataCenter: string(name='DataCenter', description='This parameter is required.', example='cn', position='Body'),
  deliveryType: string(name='DeliveryType', description='This parameter is required.', example='sls', position='Body'),
  discardRate?: float(name='DiscardRate', example='0', position='Body'),
  fieldName: string(name='FieldName', description='This parameter is required.', example='user_agent,ip_address,ip_port', position='Body'),
  httpDelivery?: {
    compress?: string(name='Compress'),
    destUrl?: string(name='DestUrl'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam'),
    lastLogSplit?: string(name='LastLogSplit'),
    logBodyPrefix?: string(name='LogBodyPrefix'),
    logBodySuffix?: string(name='LogBodySuffix'),
    logSplit?: string(name='LogSplit'),
    logSplitWords?: string(name='LogSplitWords'),
    maxBackoffMS?: long(name='MaxBackoffMS'),
    maxBatchMB?: long(name='MaxBatchMB'),
    maxBatchSize?: long(name='MaxBatchSize'),
    maxRetry?: long(name='MaxRetry'),
    minBackoffMS?: long(name='MinBackoffMS'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam'),
    responseBodyKey?: string(name='ResponseBodyKey'),
    standardAuthOn?: boolean(name='StandardAuthOn'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime'),
      privateKey?: string(name='PrivateKey'),
      urlPath?: string(name='UrlPath'),
    }(name='StandardAuthParam'),
    successCode?: long(name='SuccessCode'),
    transformTimeout?: long(name='TransformTimeout'),
  }(name='HttpDelivery', shrink='json', position='Body'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer'),
    brokers?: [ string ](name='Brokers'),
    compress?: string(name='Compress', example='gzip'),
    machanismType?: string(name='MachanismType'),
    password?: string(name='Password'),
    topic?: string(name='Topic'),
    userAuth?: boolean(name='UserAuth'),
    userName?: string(name='UserName'),
  }(name='KafkaDelivery', shrink='json', position='Body'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid'),
    bucketName?: string(name='BucketName'),
    prefixPath?: string(name='PrefixPath', example='logriver-test/log'),
    region?: string(name='Region', example='cn-shanghai'),
  }(name='OssDelivery', shrink='json', position='Body'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey'),
    bucketPath?: string(name='BucketPath'),
    endpoint?: string(name='Endpoint'),
    prefixPath?: string(name='PrefixPath'),
    region?: string(name='Region'),
    s3Cmpt?: boolean(name='S3Cmpt'),
    secretKey?: string(name='SecretKey'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery', shrink='json', position='Body'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    SLSRegion?: string(name='SLSRegion'),
  }(name='SlsDelivery', shrink='json', position='Body'),
  taskName: string(name='TaskName', description='This parameter is required.', example='test_project', position='Body'),
}

model CreateUserDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', example='cn'),
  requestId?: string(name='RequestId', description='Id of the request', example='2CCD40B1-3F20-5FF0-8A67-E3F34B87744F'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='er-http'),
}

model CreateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserDeliveryTask  CreateUserDeliveryTaskRequest
  * @return CreateUserDeliveryTaskResponse
 */
async function createUserDeliveryTask(request: CreateUserDeliveryTaskRequest): CreateUserDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserDeliveryTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateWafRuleRequest {
  config?: WafRuleConfig(name='Config', shrink='json', position='Body'),
  phase: string(name='Phase', description='This parameter is required.', example='http_custom', position='Body'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
}

model CreateWafRuleResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId'),
}

model CreateWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWafRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWafRule  CreateWafRuleRequest
  * @return CreateWafRuleResponse
 */
async function createWafRule(request: CreateWafRuleRequest): CreateWafRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWafRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateWaitingRoomRequest {
  cookieName: string(name='CookieName', description='This parameter is required.', example='__aliwaitingroom_example', position='Query'),
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!', position='Query'),
  description?: string(name='Description', position='Query'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on', position='Query'),
  enable: string(name='Enable', description='This parameter is required.', example='on', position='Query'),
  hostNameAndPath: [ 
    {
      domain: string(name='Domain', description='This parameter is required.', example='example.com'),
      path: string(name='Path', description='This parameter is required.', example='/test'),
      subdomain: string(name='Subdomain', description='This parameter is required.', example='test.'),
    }
  ](name='HostNameAndPath', description='This parameter is required.', shrink='json', position='Query'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on', position='Query'),
  language?: string(name='Language', example='enus', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='waitingroom_example', position='Query'),
  newUsersPerMinute: string(name='NewUsersPerMinute', description='This parameter is required.', example='200', position='Query'),
  queueAllEnable?: string(name='QueueAllEnable', example='on', position='Query'),
  queuingMethod: string(name='QueuingMethod', description='This parameter is required.', example='fifo', position='Query'),
  queuingStatusCode: string(name='QueuingStatusCode', description='This parameter is required.', example='200', position='Query'),
  sessionDuration: string(name='SessionDuration', description='This parameter is required.', example='5', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
  totalActiveUsers: string(name='TotalActiveUsers', description='This parameter is required.', example='300', position='Query'),
  waitingRoomType: string(name='WaitingRoomType', description='This parameter is required.', example='default', position='Query'),
}

model CreateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWaitingRoom  CreateWaitingRoomRequest
  * @return CreateWaitingRoomResponse
 */
async function createWaitingRoom(request: CreateWaitingRoomRequest): CreateWaitingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWaitingRoom', 'POST', '/', 'json', false, 'json', request);
}

model CreateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!', position='Query'),
  description?: string(name='Description', position='Query'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on', position='Query'),
  enable: string(name='Enable', description='This parameter is required.', example='on', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='1719849600', position='Query'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on', position='Query'),
  language?: string(name='Language', example='zhcn', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='waitingroom_example', position='Query'),
  newUsersPerMinute: string(name='NewUsersPerMinute', description='This parameter is required.', example='10', position='Query'),
  preQueueEnable?: string(name='PreQueueEnable', example='on', position='Query'),
  preQueueStartTime?: string(name='PreQueueStartTime', example='1719763200', position='Query'),
  queuingMethod: string(name='QueuingMethod', description='This parameter is required.', example='random', position='Query'),
  queuingStatusCode: string(name='QueuingStatusCode', description='This parameter is required.', example='202', position='Query'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', example='on', position='Query'),
  sessionDuration: string(name='SessionDuration', description='This parameter is required.', example='5', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='1719763200', position='Query'),
  totalActiveUsers: string(name='TotalActiveUsers', description='This parameter is required.', example='100', position='Query'),
  waitingRoomId?: string(name='WaitingRoomId', example='6a51d5bc6460887abd1291dc7d4db28b', position='Query'),
  waitingRoomType: string(name='WaitingRoomType', description='This parameter is required.', example='default', position='Query'),
}

model CreateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model CreateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWaitingRoomEvent  CreateWaitingRoomEventRequest
  * @return CreateWaitingRoomEventResponse
 */
async function createWaitingRoomEvent(request: CreateWaitingRoomEventRequest): CreateWaitingRoomEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWaitingRoomEvent', 'POST', '/', 'json', false, 'json', request);
}

model CreateWaitingRoomRuleRequest {
  rule: string(name='Rule', description='This parameter is required.', example='(http.request.uri.path.file_name eq \\"jpg\\")', position='Query'),
  ruleEnable: string(name='RuleEnable', description='This parameter is required.', example='on', position='Query'),
  ruleName: string(name='RuleName', description='This parameter is required.', example='waitingroom_example', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  waitingRoomId: string(name='WaitingRoomId', description='This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4', position='Query'),
}

model CreateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model CreateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWaitingRoomRule  CreateWaitingRoomRuleRequest
  * @return CreateWaitingRoomRuleResponse
 */
async function createWaitingRoomRule(request: CreateWaitingRoomRuleRequest): CreateWaitingRoomRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWaitingRoomRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomScenePolicyRequest {
  policyId: long(name='PolicyId', description='This parameter is required.', example='1', minimum=1, position='Query'),
}

model DeleteCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='5CC228B4-7A67-4016-9C9F-4A4133494A91'),
}

model DeleteCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomScenePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomScenePolicy  DeleteCustomScenePolicyRequest
  * @return DeleteCustomScenePolicyResponse
 */
async function deleteCustomScenePolicy(request: DeleteCustomScenePolicyRequest): DeleteCustomScenePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomScenePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKvRequest {
  key: string(name='Key', description='This parameter is required.', example='test_key', position='Query'),
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
}

model DeleteKvResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteKv  DeleteKvRequest
  * @return DeleteKvResponse
 */
async function deleteKv(request: DeleteKvRequest): DeleteKvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKv', 'GET', '/', 'json', false, 'json', request);
}

model DeleteKvNamespaceRequest {
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
}

model DeleteKvNamespaceResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteKvNamespace  DeleteKvNamespaceRequest
  * @return DeleteKvNamespaceResponse
 */
async function deleteKvNamespace(request: DeleteKvNamespaceRequest): DeleteKvNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKvNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteListRequest {
  id: long(name='Id', description='This parameter is required.', example='40000001', position='Body'),
}

model DeleteListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteList  DeleteListRequest
  * @return DeleteListResponse
 */
async function deleteList(request: DeleteListRequest): DeleteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteList', 'POST', '/', 'json', true, 'form', request);
}

model DeletePageRequest {
  id: long(name='Id', description='This parameter is required.', example='50000001', position='Body'),
}

model DeletePageResponseBody = {
  id?: long(name='Id', example='50000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeletePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePage  DeletePageRequest
  * @return DeletePageResponse
 */
async function deletePage(request: DeletePageRequest): DeletePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePage', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRecordRequest {
  recordId: long(name='RecordId', description='This parameter is required.', position='Query'),
}

model DeleteRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRecord  DeleteRecordRequest
  * @return DeleteRecordResponse
 */
async function deleteRecord(request: DeleteRecordRequest): DeleteRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecord', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoutineRequest {
  name?: string(name='Name', example='test-routine1', position='Body'),
}

model DeleteRoutineResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', example='OK'),
}

model DeleteRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRoutine  DeleteRoutineRequest
  * @return DeleteRoutineResponse
 */
async function deleteRoutine(request: DeleteRoutineRequest): DeleteRoutineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutine', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRoutineCodeVersionRequest {
  codeVersion?: string(name='CodeVersion', example='1710120201067203242', position='Body'),
  name?: string(name='Name', example='test-routine1', position='Body'),
}

model DeleteRoutineCodeVersionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', example='OK'),
}

model DeleteRoutineCodeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineCodeVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRoutineCodeVersion  DeleteRoutineCodeVersionRequest
  * @return DeleteRoutineCodeVersionResponse
 */
async function deleteRoutineCodeVersion(request: DeleteRoutineCodeVersionRequest): DeleteRoutineCodeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutineCodeVersion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRoutineRelatedRecordRequest {
  name?: string(name='Name', example='DeleteRoutineRelatedRecord', position='Body'),
  recordId?: long(name='RecordId', position='Body'),
  recordName?: string(name='RecordName', position='Body'),
  siteId?: long(name='SiteId', position='Query'),
}

model DeleteRoutineRelatedRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status'),
}

model DeleteRoutineRelatedRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineRelatedRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRoutineRelatedRecord  DeleteRoutineRelatedRecordRequest
  * @return DeleteRoutineRelatedRecordResponse
 */
async function deleteRoutineRelatedRecord(request: DeleteRoutineRelatedRecordRequest): DeleteRoutineRelatedRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutineRelatedRecord', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRoutineRelatedRouteRequest {
  name?: string(name='Name', example='DeleteRoutineRelatedRoute', position='Body'),
  route?: string(name='Route', position='Body'),
  routeId?: string(name='RouteId', position='Body'),
  siteId?: long(name='SiteId', position='Body'),
}

model DeleteRoutineRelatedRouteResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status'),
}

model DeleteRoutineRelatedRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineRelatedRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRoutineRelatedRoute  DeleteRoutineRelatedRouteRequest
  * @return DeleteRoutineRelatedRouteResponse
 */
async function deleteRoutineRelatedRoute(request: DeleteRoutineRelatedRouteRequest): DeleteRoutineRelatedRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutineRelatedRoute', 'POST', '/', 'json', true, 'form', request);
}

model DeleteScheduledPreloadExecutionRequest {
  id: string(name='Id', description='This parameter is required.', example='DeleteScheduledPreloadExecution', position='Query'),
}

model DeleteScheduledPreloadExecutionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteScheduledPreloadExecution  DeleteScheduledPreloadExecutionRequest
  * @return DeleteScheduledPreloadExecutionResponse
 */
async function deleteScheduledPreloadExecution(request: DeleteScheduledPreloadExecutionRequest): DeleteScheduledPreloadExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScheduledPreloadExecution', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScheduledPreloadJobRequest {
  id: string(name='Id', description='This parameter is required.', example='DeleteScheduledPreloadJob', position='Query'),
}

model DeleteScheduledPreloadJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteScheduledPreloadJob  DeleteScheduledPreloadJobRequest
  * @return DeleteScheduledPreloadJobResponse
 */
async function deleteScheduledPreloadJob(request: DeleteScheduledPreloadJobRequest): DeleteScheduledPreloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScheduledPreloadJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSiteRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  siteId?: long(name='SiteId', example='1234567890123', position='Query'),
}

model DeleteSiteResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model DeleteSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSite  DeleteSiteRequest
  * @return DeleteSiteResponse
 */
async function deleteSite(request: DeleteSiteRequest): DeleteSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSite', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSiteDeliveryTaskRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='123456******', position='Body'),
  taskName: string(name='TaskName', description='This parameter is required.', example='cdn-test-task', position='Body'),
}

model DeleteSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSiteDeliveryTask  DeleteSiteDeliveryTaskRequest
  * @return DeleteSiteDeliveryTaskResponse
 */
async function deleteSiteDeliveryTask(request: DeleteSiteDeliveryTaskRequest): DeleteSiteDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSiteDeliveryTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserDeliveryTaskRequest {
  taskName: string(name='TaskName', description='This parameter is required.', example='test-project', position='Body'),
}

model DeleteUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='952ea16b-1f05-4a76-bb32-420282d8aeb9'),
}

model DeleteUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserDeliveryTask  DeleteUserDeliveryTaskRequest
  * @return DeleteUserDeliveryTaskResponse
 */
async function deleteUserDeliveryTask(request: DeleteUserDeliveryTaskRequest): DeleteUserDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserDeliveryTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWafRuleRequest {
  id: long(name='Id', description='This parameter is required.', example='20000001', position='Body'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', example='1', position='Query'),
}

model DeleteWafRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWafRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWafRule  DeleteWafRuleRequest
  * @return DeleteWafRuleResponse
 */
async function deleteWafRule(request: DeleteWafRuleRequest): DeleteWafRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWafRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWafRulesetRequest {
  id: long(name='Id', description='This parameter is required.', example='10000001', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', example='1', position='Query'),
}

model DeleteWafRulesetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWafRulesetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWafRuleset  DeleteWafRulesetRequest
  * @return DeleteWafRulesetResponse
 */
async function deleteWafRuleset(request: DeleteWafRulesetRequest): DeleteWafRulesetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWafRuleset', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWaitingRoomRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  waitingRoomId: string(name='WaitingRoomId', description='This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4', position='Query'),
}

model DeleteWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model DeleteWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWaitingRoom  DeleteWaitingRoomRequest
  * @return DeleteWaitingRoomResponse
 */
async function deleteWaitingRoom(request: DeleteWaitingRoomRequest): DeleteWaitingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWaitingRoom', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWaitingRoomEventRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', example='302909890***', position='Query'),
}

model DeleteWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWaitingRoomEvent  DeleteWaitingRoomEventRequest
  * @return DeleteWaitingRoomEventResponse
 */
async function deleteWaitingRoomEvent(request: DeleteWaitingRoomEventRequest): DeleteWaitingRoomEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWaitingRoomEvent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWaitingRoomRuleRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='3672886****', position='Query'),
}

model DeleteWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWaitingRoomRule  DeleteWaitingRoomRuleRequest
  * @return DeleteWaitingRoomRuleResponse
 */
async function deleteWaitingRoomRule(request: DeleteWaitingRoomRuleRequest): DeleteWaitingRoomRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWaitingRoomRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomScenePoliciesRequest {
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  policyId?: long(name='PolicyId', example='1234****', minimum=0, position='Query'),
}

model DescribeCustomScenePoliciesResponseBody = {
  dataModule?: [ 
    {
      endTime?: string(name='EndTime', example='2023-03-06T16:00:00Z'),
      name?: string(name='Name', example='test'),
      objects?: [ string ](name='Objects'),
      policyId?: long(name='PolicyId', example='1234****'),
      startTime?: string(name='StartTime', example='2023-03-04T16:00:00Z'),
      status?: string(name='Status', example='Expired'),
      template?: string(name='Template', example='promotion'),
    }
  ](name='DataModule'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  quota?: int32(name='Quota', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCustomScenePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomScenePoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustomScenePolicies  DescribeCustomScenePoliciesRequest
  * @return DescribeCustomScenePoliciesResponse
 */
async function describeCustomScenePolicies(request: DescribeCustomScenePoliciesRequest): DescribeCustomScenePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomScenePolicies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDoSAllEventListRequest {
  endTime?: string(name='EndTime', example='2023-02-22T15:59:59Z', position='Query'),
  eventType?: string(name='EventType', example='web-cc', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='7096621098****', minimum=1, position='Query'),
  startTime: string(name='StartTime', description='A short description of struct

This parameter is required.', example='2023-02-12T15:00:00Z', position='Query'),
}

model DescribeDDoSAllEventListResponseBody = {
  dataList?: [ 
    {
      bps?: long(name='Bps', example='800'),
      cps?: long(name='Cps', example='50'),
      endTime?: string(name='EndTime', example='2023-02-12T15:59:59Z'),
      eventId?: string(name='EventId', example='web-cc_1'),
      eventType?: string(name='EventType', example='web-cc'),
      pps?: long(name='Pps', example='12000'),
      qps?: long(name='Qps', example='7692'),
      startTime?: string(name='StartTime', example='2023-02-12T15:00:00Z'),
      target?: string(name='Target', example='example.com'),
      targetId?: string(name='TargetId', example='000000000155****'),
    }
  ](name='DataList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='D73A4243-CFBD-5110-876F-09237E77ECBD'),
  siteId?: long(name='SiteId', example='7096621098****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDDoSAllEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSAllEventListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDDoSAllEventList  DescribeDDoSAllEventListRequest
  * @return DescribeDDoSAllEventListResponse
 */
async function describeDDoSAllEventList(request: DescribeDDoSAllEventListRequest): DescribeDDoSAllEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDoSAllEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHttpDDoSAttackIntelligentProtectionRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', minimum=1, position='Query'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', example='defense'),
  aiTemplate?: string(name='AiTemplate', example='level60'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHttpDDoSAttackIntelligentProtection  DescribeHttpDDoSAttackIntelligentProtectionRequest
  * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
async function describeHttpDDoSAttackIntelligentProtection(request: DescribeHttpDDoSAttackIntelligentProtectionRequest): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHttpDDoSAttackIntelligentProtection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHttpDDoSAttackProtectionRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', minimum=1, position='Query'),
}

model DescribeHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', example='default'),
  requestId?: string(name='RequestId', description='Id of the request', example='35C66C7B-671H-4297-9187-2C4477247A78'),
  siteId?: long(name='SiteId', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHttpDDoSAttackProtection  DescribeHttpDDoSAttackProtectionRequest
  * @return DescribeHttpDDoSAttackProtectionResponse
 */
async function describeHttpDDoSAttackProtection(request: DescribeHttpDDoSAttackProtectionRequest): DescribeHttpDDoSAttackProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHttpDDoSAttackProtection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPRangeListRequest {
}

model DescribeIPRangeListResponseBody = {
  content?: [ 
    {
      cidr?: string(name='Cidr', example='172.16.0.0/12'),
      ipType?: string(name='IpType', example='IPv4'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model DescribeIPRangeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIPRangeListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIPRangeList  DescribeIPRangeListRequest
  * @return DescribeIPRangeListResponse
 */
async function describeIPRangeList(request: DescribeIPRangeListRequest): DescribeIPRangeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPRangeList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeKvAccountStatusRequest {
}

model DescribeKvAccountStatusResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model DescribeKvAccountStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKvAccountStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeKvAccountStatus  DescribeKvAccountStatusRequest
  * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatus(request: DescribeKvAccountStatusRequest): DescribeKvAccountStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKvAccountStatus', 'GET', '/', 'json', false, 'json', request);
}

model DescribePreloadTasksRequest {
  content?: string(name='Content', example='http://a.com/1.jpg?b=2', position='Query'),
  endTime?: string(name='EndTime', example='2023-03-23T06:23:00Z', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Query'),
  siteId?: long(name='SiteId', example='123456789****', position='Query'),
  startTime?: string(name='StartTime', example='2023-03-22T17:00:00Z', position='Query'),
  status?: string(name='Status', example='Complete', position='Query'),
}

model DescribePreloadTasksResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  tasks?: [ 
    {
      content?: string(name='Content', example='http://a.com/1.jpg?b=2'),
      createTime?: string(name='CreateTime', example='2023-03-28 14:28:57'),
      description?: string(name='Description', example='Internal Error'),
      process?: string(name='Process', example='100%'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='1597854579687428'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount', example='83'),
}

model DescribePreloadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreloadTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePreloadTasks  DescribePreloadTasksRequest
  * @return DescribePreloadTasksResponse
 */
async function describePreloadTasks(request: DescribePreloadTasksRequest): DescribePreloadTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreloadTasks', 'GET', '/', 'json', false, 'json', request);
}

model DescribePurgeTasksRequest {
  content?: string(name='Content', example='http://a.com/1.jpg?b=1', position='Query'),
  endTime?: string(name='EndTime', example='2022-11-18T15:59:59Z', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Query'),
  siteId?: long(name='SiteId', example='123456789****', position='Query'),
  startTime?: string(name='StartTime', example='2022-11-16T05:33:00Z', position='Query'),
  status?: string(name='Status', example='Complete', position='Query'),
  type?: string(name='Type', example='file', position='Query'),
}

model DescribePurgeTasksResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  tasks?: [ 
    {
      content?: string(name='Content', example='http://a.com/1.jpg?b=1'),
      createTime?: string(name='CreateTime', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', example='Internal Error'),
      process?: string(name='Process', example='100%'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='16346513304'),
      type?: string(name='Type', example='file'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount', example='15'),
}

model DescribePurgeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurgeTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePurgeTasks  DescribePurgeTasksRequest
  * @return DescribePurgeTasksResponse
 */
async function describePurgeTasks(request: DescribePurgeTasksRequest): DescribePurgeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurgeTasks', 'GET', '/', 'json', false, 'json', request);
}

model DisableCustomScenePolicyRequest {
  policyId: long(name='PolicyId', description='This parameter is required.', example='100001', minimum=1, position='Query'),
}

model DisableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', example='100001'),
  requestId?: string(name='RequestId', description='Id of the request', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DisableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableCustomScenePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableCustomScenePolicy  DisableCustomScenePolicyRequest
  * @return DisableCustomScenePolicyResponse
 */
async function disableCustomScenePolicy(request: DisableCustomScenePolicyRequest): DisableCustomScenePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableCustomScenePolicy', 'POST', '/', 'json', false, 'json', request);
}

model EditSiteWafSettingsRequest {
  settings?: WafSiteSettings(name='Settings', shrink='json', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
}

model EditSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model EditSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditSiteWafSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EditSiteWafSettings  EditSiteWafSettingsRequest
  * @return EditSiteWafSettingsResponse
 */
async function editSiteWafSettings(request: EditSiteWafSettingsRequest): EditSiteWafSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditSiteWafSettings', 'POST', '/', 'json', true, 'form', request);
}

model EnableCustomScenePolicyRequest {
  policyId: long(name='PolicyId', description='This parameter is required.', example='1', minimum=1, position='Query'),
}

model EnableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model EnableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableCustomScenePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableCustomScenePolicy  EnableCustomScenePolicyRequest
  * @return EnableCustomScenePolicyResponse
 */
async function enableCustomScenePolicy(request: EnableCustomScenePolicyRequest): EnableCustomScenePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableCustomScenePolicy', 'POST', '/', 'json', false, 'json', request);
}

model ExportRecordsRequest {
  siteId?: long(name='SiteId', example='1234567890123', position='Query'),
}

model ExportRecordsResponseBody = {
  content?: string(name='Content', example=';; site:example.com.\\n;; Exported:2024-01-24 15:54:35\\n\\n;; A Records\\na1.example.com. 30 IN A 1.1.1.1 direct\\na2.example.com. 30 IN A 1.1.1.1 direct\\na3.example.com. 30 IN A 1.1.1.1 direct\\n'),
  requestId?: string(name='RequestId', description='Id of the request', example='C69B5894-D1BA-592C-95D0-DADBE7AEAC63'),
}

model ExportRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportRecords  ExportRecordsRequest
  * @return ExportRecordsResponse
 */
async function exportRecords(request: ExportRecordsRequest): ExportRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportRecords', 'GET', '/', 'json', false, 'json', request);
}

model GetCacheReserveSpecificationRequest {
}

model GetCacheReserveSpecificationResponseBody = {
  cacheReserveCapacity?: [ string ](name='CacheReserveCapacity'),
  cacheReserveRegion?: [ string ](name='CacheReserveRegion'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetCacheReserveSpecificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCacheReserveSpecificationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCacheReserveSpecification  GetCacheReserveSpecificationRequest
  * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecification(request: GetCacheReserveSpecificationRequest): GetCacheReserveSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCacheReserveSpecification', 'GET', '/', 'json', false, 'json', request);
}

model GetErServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GetErServiceResponseBody = {
  planName?: string(name='PlanName', example='er_paymode'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  status?: string(name='Status', example='Running'),
}

model GetErServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetErService  GetErServiceRequest
  * @return GetErServiceResponse
 */
async function getErService(request: GetErServiceRequest): GetErServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetErService', 'GET', '/', 'json', false, 'json', request);
}

model GetKvRequest {
  base64?: boolean(name='Base64', example='true', position='Query'),
  key: string(name='Key', description='This parameter is required.', example='test_key', position='Query'),
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
}

model GetKvResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', example='test_value'),
}

model GetKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKv  GetKvRequest
  * @return GetKvResponse
 */
async function getKv(request: GetKvRequest): GetKvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKv', 'GET', '/', 'json', false, 'json', request);
}

model GetKvAccountRequest {
}

model GetKvAccountResponseBody = {
  capacity?: long(name='Capacity', example='1073741824'),
  capacityString?: string(name='CapacityString', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', example='100 MB'),
  namespaceList?: [ 
    {
      capacity?: long(name='Capacity', example='1073741824'),
      capacityString?: string(name='CapacityString', example='1 GB'),
      capacityUsed?: long(name='CapacityUsed', example='100048576'),
      capacityUsedString?: string(name='CapacityUsedString', example='100 MB'),
      description?: string(name='Description', example='the first namespace'),
      namespace?: string(name='Namespace', example='test_namespace'),
      namespaceId?: string(name='NamespaceId', example='643355322374688768'),
      status?: string(name='Status', example='online'),
    }
  ](name='NamespaceList'),
  namespaceQuota?: int32(name='NamespaceQuota', example='10'),
  namespaceUsed?: int32(name='NamespaceUsed', example='1'),
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model GetKvAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKvAccount  GetKvAccountRequest
  * @return GetKvAccountResponse
 */
async function getKvAccount(request: GetKvAccountRequest): GetKvAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKvAccount', 'GET', '/', 'json', false, 'json', request);
}

model GetKvNamespaceRequest {
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
}

model GetKvNamespaceResponseBody = {
  capacity?: long(name='Capacity', example='1073741824'),
  capacityString?: string(name='CapacityString', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', example='100 MB'),
  description?: string(name='Description', example='this is a test namespace.'),
  namespace?: string(name='Namespace', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', example='643355322374688768'),
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model GetKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKvNamespace  GetKvNamespaceRequest
  * @return GetKvNamespaceResponse
 */
async function getKvNamespace(request: GetKvNamespaceRequest): GetKvNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKvNamespace', 'GET', '/', 'json', false, 'json', request);
}

model GetListRequest {
  id?: long(name='Id', example='40000001', position='Query'),
}

model GetListResponseBody = {
  description?: string(name='Description', description='自定义响应页面描述', example='a custom list', maxLength=1024),
  id?: long(name='Id', description='自定义响应页面ID', example='40000001'),
  items?: [ string ](name='Items'),
  kind?: string(name='Kind', example='ip'),
  name: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example', maxLength=128),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetList  GetListRequest
  * @return GetListResponse
 */
async function getList(request: GetListRequest): GetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetList', 'POST', '/', 'json', false, 'json', request);
}

model GetPageRequest {
  id?: long(name='Id', example='50000001', position='Query'),
}

model GetPageResponseBody = {
  content: string(name='Content', description='自定义响应页面内容BASE64编码

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType: string(name='ContentType', description='自定义响应页面内容类型

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='自定义响应页面描述', example='a custom deny page', maxLength=1024),
  id?: long(name='Id', description='自定义响应页面ID', example='50000001'),
  kind?: string(name='Kind', example='custom'),
  name: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example', maxLength=128),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPage  GetPageRequest
  * @return GetPageResponse
 */
async function getPage(request: GetPageRequest): GetPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPage', 'POST', '/', 'json', false, 'json', request);
}

model GetPurgeQuotaRequest {
  siteId?: long(name='SiteId', example='123456789****', position='Query'),
  type?: string(name='Type', example='file', position='Query'),
}

model GetPurgeQuotaResponseBody = {
  quota?: string(name='Quota', example='100000'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  usage?: string(name='Usage', example='10'),
}

model GetPurgeQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPurgeQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPurgeQuota  GetPurgeQuotaRequest
  * @return GetPurgeQuotaResponse
 */
async function getPurgeQuota(request: GetPurgeQuotaRequest): GetPurgeQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPurgeQuota', 'GET', '/', 'json', false, 'json', request);
}

model GetRealtimeDeliveryFieldRequest {
  businessType: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_er', position='Query'),
}

model GetRealtimeDeliveryFieldResponseBody = {
  fieldContent?: map[string]FieldContentValue(name='FieldContent'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetRealtimeDeliveryFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealtimeDeliveryFieldResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRealtimeDeliveryField  GetRealtimeDeliveryFieldRequest
  * @return GetRealtimeDeliveryFieldResponse
 */
async function getRealtimeDeliveryField(request: GetRealtimeDeliveryFieldRequest): GetRealtimeDeliveryFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealtimeDeliveryField', 'GET', '/', 'json', false, 'json', request);
}

model GetRecordRequest {
  recordId: long(name='RecordId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model GetRecordResponseBody = {
  recordModel?: {
    authConf?: {
      accessKey?: string(name='AccessKey', example='VIxuvJSA2S03f******kp208dy5w7'),
      authType?: string(name='AuthType', example='public'),
      region?: string(name='Region', example='us-east-1'),
      secretKey?: string(name='SecretKey', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
      version?: string(name='Version', example='v2'),
    }(name='AuthConf'),
    bizName?: string(name='BizName', example='image_video'),
    comment?: string(name='Comment'),
    createTime?: string(name='CreateTime', example='2023-03-10T13:30:39Z'),
    data?: {
      algorithm?: int32(name='Algorithm', example='1'),
      certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
      fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
      flag?: int32(name='Flag', example='128'),
      keyTag?: int32(name='KeyTag', example='1'),
      matchingType?: int32(name='MatchingType', example='1'),
      port?: int32(name='Port', example='8707'),
      priority?: int32(name='Priority', example='10'),
      selector?: int32(name='Selector', example='1'),
      tag?: string(name='Tag', example='issue'),
      type?: int32(name='Type', example='RSA'),
      usage?: int32(name='Usage', example='0'),
      value?: string(name='Value', example='example.com'),
      weight?: int32(name='Weight', example='0'),
    }(name='Data', example='{"value":"1.1.1.1"}'),
    hostPolicy?: string(name='HostPolicy'),
    proxied?: boolean(name='Proxied', example='true'),
    recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
    recordId?: long(name='RecordId', example='1234567890123'),
    recordName?: string(name='RecordName', example='a.example.com'),
    recordSourceType?: string(name='RecordSourceType', example='OSS'),
    recordType?: string(name='RecordType', example='A/AAAA'),
    siteId?: long(name='SiteId', example='1234567890123'),
    siteName?: string(name='SiteName', example='example.com'),
    ttl?: int32(name='Ttl', example='20'),
    updateTime?: string(name='UpdateTime', example='2023-01-27T02:26:22Z'),
  }(name='RecordModel'),
  requestId?: string(name='RequestId', description='Id of the request', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
}

model GetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRecord  GetRecordRequest
  * @return GetRecordResponse
 */
async function getRecord(request: GetRecordRequest): GetRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecord', 'GET', '/', 'json', false, 'json', request);
}

model GetRoutineRequest {
  name?: string(name='Name', example='GetRoutine', position='Body'),
}

model GetRoutineResponseBody = {
  codeVersions?: [ 
    {
      codeDescription?: string(name='CodeDescription'),
      codeVersion?: string(name='CodeVersion'),
      createTime?: string(name='CreateTime'),
    }
  ](name='CodeVersions'),
  createTime?: string(name='CreateTime'),
  defaultRelatedRecord?: string(name='DefaultRelatedRecord'),
  description?: string(name='Description'),
  envs?: [ 
    {
      canaryAreaList?: [ string ](name='CanaryAreaList'),
      canaryCodeVersion?: string(name='CanaryCodeVersion'),
      codeVersion?: string(name='CodeVersion'),
      env?: string(name='Env'),
      specName?: string(name='SpecName'),
    }
  ](name='Envs'),
  relatedRecords?: [ 
    {
      recordId?: long(name='RecordId'),
      recordName?: string(name='RecordName'),
      siteId?: long(name='SiteId'),
      siteName?: string(name='SiteName'),
    }
  ](name='RelatedRecords'),
  relatedRoutes?: [ 
    {
      route?: string(name='Route'),
      routeId?: string(name='RouteId'),
      siteId?: long(name='SiteId'),
      siteName?: string(name='SiteName'),
    }
  ](name='RelatedRoutes'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoutine  GetRoutineRequest
  * @return GetRoutineResponse
 */
async function getRoutine(request: GetRoutineRequest): GetRoutineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoutine', 'POST', '/', 'json', true, 'form', request);
}

model GetRoutineStagingCodeUploadInfoRequest {
  codeDescription?: string(name='CodeDescription', position='Body'),
  name?: string(name='Name', example='GetRoutineStagingCodeUploadInfo', position='Body'),
}

model GetRoutineStagingCodeUploadInfoResponseBody = {
  codeVersion?: string(name='CodeVersion'),
  ossPostConfig?: map[string]any(name='OssPostConfig'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetRoutineStagingCodeUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineStagingCodeUploadInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoutineStagingCodeUploadInfo  GetRoutineStagingCodeUploadInfoRequest
  * @return GetRoutineStagingCodeUploadInfoResponse
 */
async function getRoutineStagingCodeUploadInfo(request: GetRoutineStagingCodeUploadInfoRequest): GetRoutineStagingCodeUploadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoutineStagingCodeUploadInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetRoutineStagingEnvIpRequest {
}

model GetRoutineStagingEnvIpResponseBody = {
  IPV4?: [ string ](name='IPV4'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetRoutineStagingEnvIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineStagingEnvIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoutineStagingEnvIp  GetRoutineStagingEnvIpRequest
  * @return GetRoutineStagingEnvIpResponse
 */
async function getRoutineStagingEnvIp(request: GetRoutineStagingEnvIpRequest): GetRoutineStagingEnvIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoutineStagingEnvIp', 'POST', '/', 'json', false, 'json', request);
}

model GetRoutineUserInfoRequest {
}

model GetRoutineUserInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  routines?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      routineName?: string(name='RoutineName'),
    }
  ](name='Routines'),
  subdomains?: [ string ](name='Subdomains'),
}

model GetRoutineUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoutineUserInfo  GetRoutineUserInfoRequest
  * @return GetRoutineUserInfoResponse
 */
async function getRoutineUserInfo(request: GetRoutineUserInfoRequest): GetRoutineUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoutineUserInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetScheduledPreloadJobRequest {
  id: string(name='Id', description='This parameter is required.', example='GetScheduledPreloadJob', position='Query'),
}

model GetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid'),
  createdAt?: string(name='CreatedAt'),
  domains?: string(name='Domains'),
  errorInfo?: string(name='ErrorInfo'),
  failedFileOss?: string(name='FailedFileOss'),
  fileId?: string(name='FileId'),
  id?: string(name='Id'),
  insertWay?: string(name='InsertWay'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
  taskSubmitted?: int32(name='TaskSubmitted'),
  taskType?: string(name='TaskType'),
  urlCount?: int32(name='UrlCount'),
  urlSubmitted?: int32(name='UrlSubmitted'),
}

model GetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScheduledPreloadJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScheduledPreloadJob  GetScheduledPreloadJobRequest
  * @return GetScheduledPreloadJobResponse
 */
async function getScheduledPreloadJob(request: GetScheduledPreloadJobRequest): GetScheduledPreloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScheduledPreloadJob', 'GET', '/', 'json', false, 'json', request);
}

model GetSiteRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model GetSiteResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  siteModel?: {
    accessType?: string(name='AccessType', example='NS'),
    cnameZone?: string(name='CnameZone', example='example.cname.com'),
    coverage?: string(name='Coverage', example='domestic'),
    createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
    instanceId?: string(name='InstanceId', example='cas-merge-q6h0bv'),
    nameServerList?: string(name='NameServerList', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
    planName?: string(name='PlanName', example='plan-168777532****'),
    planSpecName?: string(name='PlanSpecName', example='normal'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26g6i6se****'),
    siteId?: long(name='SiteId', example='1234567890123'),
    siteName?: string(name='SiteName', example='example.com'),
    status?: string(name='Status', example='pending'),
    tags?: map[string]any(name='Tags', example='{"tag1":"value1"}'),
    updateTime?: string(name='UpdateTime', example='2023-12-24T02:01:11Z'),
    vanityNSList?: map[string]string(name='VanityNSList'),
    verifyCode?: string(name='VerifyCode', example='verify_d516cb3740f81f0cef77d162edd1****'),
    versionManagement?: boolean(name='VersionManagement', example='true'),
  }(name='SiteModel'),
}

model GetSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSite  GetSiteRequest
  * @return GetSiteResponse
 */
async function getSite(request: GetSiteRequest): GetSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSite', 'GET', '/', 'json', false, 'json', request);
}

model GetSiteCurrentNSRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model GetSiteCurrentNSResponseBody = {
  NSList?: [ string ](name='NSList'),
  requestId?: string(name='RequestId', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model GetSiteCurrentNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCurrentNSResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSiteCurrentNS  GetSiteCurrentNSRequest
  * @return GetSiteCurrentNSResponse
 */
async function getSiteCurrentNS(request: GetSiteCurrentNSRequest): GetSiteCurrentNSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSiteCurrentNS', 'GET', '/', 'json', false, 'json', request);
}

model GetSiteCustomLogRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='11223***', position='Query'),
}

model GetSiteCustomLogResponseBody = {
  configId?: long(name='ConfigId', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  isExist?: boolean(name='IsExist', example='true'),
  logCustomField?: {
    cookies?: [ string ](name='Cookies'),
    requestHeaders?: [ string ](name='RequestHeaders'),
    responseHeaders?: [ string ](name='ResponseHeaders'),
  }(name='LogCustomField'),
  requestId?: string(name='RequestId', description='Id of the request', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  siteId?: long(name='SiteId', example='167026711***'),
}

model GetSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCustomLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSiteCustomLog  GetSiteCustomLogRequest
  * @return GetSiteCustomLogResponse
 */
async function getSiteCustomLog(request: GetSiteCustomLogRequest): GetSiteCustomLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSiteCustomLog', 'GET', '/', 'json', false, 'json', request);
}

model GetSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', example='123456***', position='Query'),
  taskName: string(name='TaskName', description='This parameter is required.', example='cdn-test-task', position='Query'),
}

model GetSiteDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', example='cn'),
  deliveryType?: string(name='DeliveryType', example='sls'),
  discardRate?: float(name='DiscardRate', example='0.0'),
  fieldList?: string(name='FieldList', example='Client,UserAgent'),
  filterRules?: string(name='FilterRules', example='[]'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  sinkConfig?: any(name='SinkConfig', example='{\\"Region\\": \\"cn-hangzhou\\", \\"Endpoint\\": \\"https://***.oss-cn-hangzhou.aliyuncs.com\\", \\"BucketPath\\": \\"hjy-test002/online-logs\\"}'),
  siteId?: long(name='SiteId', example='123456****'),
  siteName?: string(name='SiteName', example='test.***.com'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSiteDeliveryTask  GetSiteDeliveryTaskRequest
  * @return GetSiteDeliveryTaskResponse
 */
async function getSiteDeliveryTask(request: GetSiteDeliveryTaskRequest): GetSiteDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSiteDeliveryTask', 'GET', '/', 'json', false, 'json', request);
}

model GetSiteLogDeliveryQuotaRequest {
  businessType: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
}

model GetSiteLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='4C14840EF0EAAB6D97CDE0C5F6554ACE'),
  siteId?: long(name='SiteId', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteLogDeliveryQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSiteLogDeliveryQuota  GetSiteLogDeliveryQuotaRequest
  * @return GetSiteLogDeliveryQuotaResponse
 */
async function getSiteLogDeliveryQuota(request: GetSiteLogDeliveryQuotaRequest): GetSiteLogDeliveryQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSiteLogDeliveryQuota', 'GET', '/', 'json', false, 'json', request);
}

model GetSiteWafSettingsRequest {
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
}

model GetSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  settings?: WafSiteSettings(name='Settings'),
}

model GetSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteWafSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSiteWafSettings  GetSiteWafSettingsRequest
  * @return GetSiteWafSettingsResponse
 */
async function getSiteWafSettings(request: GetSiteWafSettingsRequest): GetSiteWafSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSiteWafSettings', 'POST', '/', 'json', false, 'json', request);
}

model GetUploadTaskRequest {
  siteId?: long(name='SiteId', example='123456****', position='Query'),
  uploadId?: long(name='UploadId', example='159253299357****', position='Query'),
}

model GetUploadTaskResponseBody = {
  description?: string(name='Description', example='invalid url'),
  requestId?: string(name='RequestId', description='Id of the request', example='ET5BF670-09D5-4D0B-BEBY-D96A2A52****'),
  status?: string(name='Status', example='running'),
}

model GetUploadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUploadTask  GetUploadTaskRequest
  * @return GetUploadTaskResponse
 */
async function getUploadTask(request: GetUploadTaskRequest): GetUploadTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUploadTask', 'GET', '/', 'json', false, 'json', request);
}

model GetUserDeliveryTaskRequest {
  taskName: string(name='TaskName', description='This parameter is required.', example='test_project', position='Query'),
}

model GetUserDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_er'),
  dataCenter?: string(name='DataCenter', example='cn'),
  deliveryType?: string(name='DeliveryType', example='oss'),
  discardRate?: float(name='DiscardRate', example='0'),
  fieldList?: string(name='FieldList', example='ClientRequestID,ClientRequestHost'),
  filterRules?: string(name='FilterRules', example='[{"ClientSSLProtocol": {"equals": ["TLSv1.3"]}}]'),
  requestId?: string(name='RequestId', description='Id of the request', example='7072132a-bd3c-46a6-9e81-aba3e0e3f861'),
  sinkConfig?: any(name='SinkConfig', example='{\\"Project\\": \\"er-online-hjy-pro\\", \\"Logstore\\": \\"er-online-hjy-log\\", \\"Region\\": \\"cn-hangzhou\\", \\"Endpoint\\": \\"cn-hangzhou.log.aliyuncs.com\\", \\"Aliuid\\": \\"1077912128805410\\"}'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='testoss11'),
}

model GetUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserDeliveryTask  GetUserDeliveryTaskRequest
  * @return GetUserDeliveryTaskResponse
 */
async function getUserDeliveryTask(request: GetUserDeliveryTaskRequest): GetUserDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserDeliveryTask', 'GET', '/', 'json', false, 'json', request);
}

model GetUserLogDeliveryQuotaRequest {
  businessType: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1', position='Query'),
}

model GetUserLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model GetUserLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLogDeliveryQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserLogDeliveryQuota  GetUserLogDeliveryQuotaRequest
  * @return GetUserLogDeliveryQuotaResponse
 */
async function getUserLogDeliveryQuota(request: GetUserLogDeliveryQuotaRequest): GetUserLogDeliveryQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserLogDeliveryQuota', 'GET', '/', 'json', false, 'json', request);
}

model GetWafBotAppKeyRequest {
}

model GetWafBotAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='APP key', example='example_appkey'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafBotAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafBotAppKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWafBotAppKey  GetWafBotAppKeyRequest
  * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKey(request: GetWafBotAppKeyRequest): GetWafBotAppKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWafBotAppKey', 'POST', '/', 'json', false, 'json', request);
}

model GetWafFilterRequest {
  phase?: string(name='Phase', example='http_bot', position='Query'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  target?: string(name='Target', example='characteristics', position='Query'),
  type?: string(name='Type', example='http_custom_cc', position='Query'),
}

model GetWafFilterResponseBody = {
  filter?: {
    fields?: [ 
      {
        key?: string(name='Key', example='http.request.headers'),
        label?: string(name='Label', example='Header'),
        logics?: [ 
          {
            attributes?: int32(name='Attributes', example='1'),
            kind?: string(name='Kind', example='input:single'),
            negative?: boolean(name='Negative'),
            operator?: string(name='Operator', example='Does not equal'),
            symbol?: string(name='Symbol', example='eq'),
            tip?: string(name='Tip', example='e.g. image/jpeg'),
            type?: string(name='Type', example='string'),
            validator?: {
              errMsg?: string(name='ErrMsg', example='Enter a valid expression'),
              length?: WafQuotaInteger(name='Length'),
              pattern?: string(name='Pattern', example='^example$'),
              range?: WafQuotaInteger(name='Range'),
            }(name='Validator'),
          }
        ](name='Logics'),
        selector?: {
          data?: [ 
            {
              label?: string(name='Label', example='China'),
              value?: string(name='Value', example='CN'),
            }
          ](name='Data'),
          kind?: string(name='Kind', example='data'),
        }(name='Selector'),
        sub?: boolean(name='Sub'),
        subTip?: string(name='SubTip', example='e.g. Content-Type'),
      }
    ](name='Fields'),
    phase?: string(name='Phase', example='http_bot'),
    target?: string(name='Target', example='characteristics'),
    type?: string(name='Type', example='http_custom_cc'),
  }(name='Filter'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafFilterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWafFilter  GetWafFilterRequest
  * @return GetWafFilterResponse
 */
async function getWafFilter(request: GetWafFilterRequest): GetWafFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWafFilter', 'POST', '/', 'json', false, 'json', request);
}

model GetWafQuotaRequest {
  paths?: string(name='Paths', example='page', position='Query'),
}

model GetWafQuotaResponseBody = {
  quota?: {
    list?: {
      enable?: boolean(name='Enable'),
      items?: map[string]QuotaListItemsValue(name='Items'),
      numberItemsPerList?: WafQuotaInteger(name='NumberItemsPerList'),
      numberItemsTotal?: WafQuotaInteger(name='NumberItemsTotal'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='List'),
    managedRulesGroup?: {
      enable?: boolean(name='Enable'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='ManagedRulesGroup'),
    page?: {
      contentTypes?: map[string]QuotaPageContentTypesValue(name='ContentTypes'),
      enable?: boolean(name='Enable'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='Page'),
    scenePolicy?: {
      enable?: boolean(name='Enable'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='ScenePolicy'),
  }(name='Quota'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWafQuota  GetWafQuotaRequest
  * @return GetWafQuotaResponse
 */
async function getWafQuota(request: GetWafQuotaRequest): GetWafQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWafQuota', 'POST', '/', 'json', false, 'json', request);
}

model GetWafRuleRequest {
  id: long(name='Id', description='This parameter is required.', example='20000001', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
}

model GetWafRuleResponseBody = {
  config?: WafRuleConfig(name='Config'),
  id?: long(name='Id', description='自定义响应页面ID', example='2000001'),
  name: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example', maxLength=128),
  phase: string(name='Phase', description='自定义响应页面内容类型

This parameter is required.', example='http_custom'),
  position?: long(name='Position', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  status?: string(name='Status', example='on'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWafRule  GetWafRuleRequest
  * @return GetWafRuleResponse
 */
async function getWafRule(request: GetWafRuleRequest): GetWafRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWafRule', 'POST', '/', 'json', false, 'json', request);
}

model GetWafRulesetRequest {
  id?: long(name='Id', example='10000001', position='Query'),
  phase?: string(name='Phase', example='http_bot', position='Query'),
  siteId?: long(name='SiteId', example='1', position='Query'),
}

model GetWafRulesetResponseBody = {
  id?: long(name='Id', description='自定义响应页面ID', example='10000001'),
  name: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example', maxLength=128),
  phase: string(name='Phase', description='自定义响应页面内容类型

This parameter is required.', example='http_bot'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [
    WafRuleConfig
  ](name='Rules'),
  shared?: WafBatchRuleShared(name='Shared'),
  status?: string(name='Status', example='on'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafRulesetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWafRuleset  GetWafRulesetRequest
  * @return GetWafRulesetResponse
 */
async function getWafRuleset(request: GetWafRulesetRequest): GetWafRulesetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWafRuleset', 'POST', '/', 'json', false, 'json', request);
}

model ListCacheReserveInstancesRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  status?: string(name='Status', example='ListCacheReserveInstances', position='Query'),
}

model ListCacheReserveInstancesResponseBody = {
  instanceInfo?: [ 
    {
      cacheReserveCapacity?: string(name='CacheReserveCapacity'),
      cacheReserveRegion?: string(name='CacheReserveRegion'),
      createTime?: string(name='CreateTime'),
      duration?: int32(name='Duration'),
      expireTime?: string(name='ExpireTime'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
    }
  ](name='InstanceInfo'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model ListCacheReserveInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCacheReserveInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCacheReserveInstances  ListCacheReserveInstancesRequest
  * @return ListCacheReserveInstancesResponse
 */
async function listCacheReserveInstances(request: ListCacheReserveInstancesRequest): ListCacheReserveInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCacheReserveInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListClientCertificatesRequest {
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model ListClientCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  result?: [ 
    {
      CACertificateId?: string(name='CACertificateId', example='baba39055622c008b90285a8838ed09a'),
      commonName?: string(name='CommonName', example='www.example.com'),
      createTime?: string(name='CreateTime', example='2024-06-24 07:48:51'),
      id?: string(name='Id', example='babab9db65ee5efcca9f3d41d4b50d66'),
      issuer?: string(name='Issuer', example='GlobalSign nv-sa'),
      name?: string(name='Name', example='yourCertName'),
      notAfter?: string(name='NotAfter', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', example='RSA'),
      SAN?: string(name='SAN', example='www.example.com,*.example.com'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', example='SHA256-RSA'),
      status?: string(name='Status', example='active'),
      type?: string(name='Type', example='dcdn'),
      updateTime?: string(name='UpdateTime', example='2024-07-20 06:18:42'),
    }
  ](name='Result'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListClientCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCertificatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClientCertificates  ListClientCertificatesRequest
  * @return ListClientCertificatesResponse
 */
async function listClientCertificates(request: ListClientCertificatesRequest): ListClientCertificatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientCertificates', 'GET', '/', 'json', false, 'json', request);
}

model ListEdgeContainerAppRecordsRequest {
  appId: string(name='AppId', description='This parameter is required.', example='app-88068867578379****', minLength=20, maxLength=64, position='Query'),
  orderKey?: string(name='OrderKey', example='CreateTime', position='Query'),
  orderType?: string(name='OrderType', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchKey?: string(name='SearchKey', example='ver-1006157458290860032', position='Query'),
}

model ListEdgeContainerAppRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  records?: [ 
    {
      appId?: string(name='AppId', example='app-88068867578379****'),
      cname?: string(name='Cname', example='kdxceo****.yun****.com'),
      configId?: long(name='ConfigId', example='27522948436****'),
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      recordId?: long(name='RecordId', example='266****'),
      recordName?: string(name='RecordName', example='a.example.com'),
      schemdId?: int32(name='SchemdId', example='123456'),
      siteId?: long(name='SiteId', example='5407498413****'),
      updateTime?: string(name='UpdateTime', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListEdgeContainerAppRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEdgeContainerAppRecords  ListEdgeContainerAppRecordsRequest
  * @return ListEdgeContainerAppRecordsResponse
 */
async function listEdgeContainerAppRecords(request: ListEdgeContainerAppRecordsRequest): ListEdgeContainerAppRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEdgeContainerAppRecords', 'GET', '/', 'json', false, 'json', request);
}

model ListEdgeContainerAppsRequest {
  orderKey?: string(name='OrderKey', example='CreateTime', position='Query'),
  orderType?: string(name='OrderType', example='Asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  searchKey?: string(name='SearchKey', example='ver-1005682639679266816', position='Query'),
  searchType?: string(name='SearchType', example='Appid', position='Query'),
}

model ListEdgeContainerAppsResponseBody = {
  apps?: [ 
    {
      appId?: string(name='AppId', example='app-88068867578379****'),
      createTime?: string(name='CreateTime', example='2022-12-01T16:16:27.418298794+08:00'),
      domainName?: string(name='DomainName', example='test.com'),
      gatewayType?: string(name='GatewayType', example='l7'),
      healthCheck?: {
        failTimes?: int32(name='FailTimes', example='5'),
        host?: string(name='Host', example='test.com'),
        httpCode?: string(name='HttpCode', example='http_2XX'),
        interval?: int32(name='Interval', example='5'),
        method?: string(name='Method', example='GET'),
        port?: int32(name='Port', example='8080'),
        succTimes?: int32(name='SuccTimes', example='1'),
        timeout?: int32(name='Timeout', example='60'),
        type?: string(name='Type', example='l7'),
        uri?: string(name='Uri', example='/health_check'),
      }(name='HealthCheck'),
      name?: string(name='Name', example='app-test'),
      percentage?: int32(name='Percentage'),
      quicCid?: string(name='QuicCid', example='false'),
      remarks?: string(name='Remarks', example='test app'),
      servicePort?: int32(name='ServicePort', example='80'),
      status?: string(name='Status', example='created'),
      targetPort?: int32(name='TargetPort', example='80'),
      updateTime?: string(name='UpdateTime', example='2023-11-15T12:11:02Z'),
      versionCount?: int32(name='VersionCount', example='10'),
    }
  ](name='Apps'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListEdgeContainerAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEdgeContainerApps  ListEdgeContainerAppsRequest
  * @return ListEdgeContainerAppsResponse
 */
async function listEdgeContainerApps(request: ListEdgeContainerAppsRequest): ListEdgeContainerAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEdgeContainerApps', 'POST', '/', 'json', false, 'json', request);
}

model ListEdgeContainerRecordsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  recordMatchType?: string(name='RecordMatchType', example='fuzzy', position='Query'),
  recordName?: string(name='RecordName', example='a.example.com', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model ListEdgeContainerRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', example='a.example.com'),
      siteId?: long(name='SiteId', example='1234567890123'),
      siteName?: string(name='SiteName', example='example.com'),
      updateTime?: string(name='UpdateTime', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', example='50'),
}

model ListEdgeContainerRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEdgeContainerRecords  ListEdgeContainerRecordsRequest
  * @return ListEdgeContainerRecordsResponse
 */
async function listEdgeContainerRecords(request: ListEdgeContainerRecordsRequest): ListEdgeContainerRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEdgeContainerRecords', 'GET', '/', 'json', false, 'json', request);
}

model ListEdgeRoutinePlansRequest {
}

model ListEdgeRoutinePlansResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  planInfo?: [ 
    {
      billingMode?: string(name='BillingMode', example='POSTPAY'),
      erRoutineCodeVersionQuota?: string(name='ErRoutineCodeVersionQuota', example='20'),
      erRoutineQuota?: string(name='ErRoutineQuota', example='100'),
      erRoutineRouteSiteCountQuota?: string(name='ErRoutineRouteSiteCountQuota', example='100'),
      paymentMethod?: string(name='PaymentMethod', example='er_free'),
      planName?: string(name='PlanName', example='test_plan'),
    }
  ](name='PlanInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', example='12'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListEdgeRoutinePlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutinePlansResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEdgeRoutinePlans  ListEdgeRoutinePlansRequest
  * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlans(request: ListEdgeRoutinePlansRequest): ListEdgeRoutinePlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEdgeRoutinePlans', 'GET', '/', 'json', false, 'json', request);
}

model ListEdgeRoutineRecordsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  recordMatchType?: string(name='RecordMatchType', example='fuzzy', position='Query'),
  recordName?: string(name='RecordName', example='a.example.com', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
}

model ListEdgeRoutineRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', example='a.example.com'),
      siteId?: long(name='SiteId', example='5407498413****'),
      siteName?: string(name='SiteName', example='example.com'),
      updateTime?: string(name='UpdateTime', example='2023-12-22T08:32:02Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', example='121'),
}

model ListEdgeRoutineRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutineRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEdgeRoutineRecords  ListEdgeRoutineRecordsRequest
  * @return ListEdgeRoutineRecordsResponse
 */
async function listEdgeRoutineRecords(request: ListEdgeRoutineRecordsRequest): ListEdgeRoutineRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEdgeRoutineRecords', 'GET', '/', 'json', false, 'json', request);
}

model ListInstanceQuotasRequest {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****', position='Query'),
  quotaNames: string(name='QuotaNames', description='This parameter is required.', example='preload, free_cert', position='Query'),
  siteId?: long(name='SiteId', example='2882900****', position='Query'),
}

model ListInstanceQuotasResponseBody = {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', example='customHttpCert'),
      quotaValue?: string(name='QuotaValue', example='10'),
      quotaValueType?: string(name='QuotaValueType', example='bool'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247B78'),
  status?: string(name='Status', example='online'),
}

model ListInstanceQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceQuotas  ListInstanceQuotasRequest
  * @return ListInstanceQuotasResponse
 */
async function listInstanceQuotas(request: ListInstanceQuotasRequest): ListInstanceQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceQuotas', 'GET', '/', 'json', false, 'json', request);
}

model ListInstanceQuotasWithUsageRequest {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****', position='Query'),
  quotaNames: string(name='QuotaNames', description='This parameter is required.', example='customHttpCert', position='Query'),
  siteId?: long(name='SiteId', example='1232223****', position='Query'),
}

model ListInstanceQuotasWithUsageResponseBody = {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', example='redirect_rules|rule_quota'),
      quotaValue?: string(name='QuotaValue', example='10'),
      siteUsage?: [ 
        {
          siteId?: long(name='SiteId', example='34818329392****'),
          siteName?: string(name='SiteName', example='test.top'),
          siteUsage?: string(name='SiteUsage', example='1'),
        }
      ](name='SiteUsage'),
      usage?: string(name='Usage', example='3'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', description='Id of the request', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  status?: string(name='Status', example='online'),
}

model ListInstanceQuotasWithUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasWithUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceQuotasWithUsage  ListInstanceQuotasWithUsageRequest
  * @return ListInstanceQuotasWithUsageResponse
 */
async function listInstanceQuotasWithUsage(request: ListInstanceQuotasWithUsageRequest): ListInstanceQuotasWithUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceQuotasWithUsage', 'GET', '/', 'json', false, 'json', request);
}

model ListKvsRequest {
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
  pageNumber?: int32(name='PageNumber', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='50', minimum=1, maximum=100, position='Query'),
  prefix?: string(name='Prefix', example='prefix-', maxLength=1000, position='Query'),
}

model ListKvsResponseBody = {
  keys?: [ 
    {
      name?: string(name='Name', example='Key1'),
      updateTime?: string(name='UpdateTime', example='2021-12-13T07:46:03Z'),
    }
  ](name='Keys'),
  pageNumber?: int32(name='PageNumber', example='100'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', example='1024'),
}

model ListKvsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListKvsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListKvs  ListKvsRequest
  * @return ListKvsResponse
 */
async function listKvs(request: ListKvsRequest): ListKvsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListKvs', 'GET', '/', 'json', false, 'json', request);
}

model ListListsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  queryArgs?: {
    desc?: boolean(name='Desc'),
    descriptionLike?: string(name='DescriptionLike', example='a custom list'),
    idLike?: string(name='IdLike', example='40000001'),
    itemLike?: string(name='ItemLike', example='10.1.1.1'),
    kind?: string(name='Kind', example='ip'),
    nameItemLike?: string(name='NameItemLike', example='10.1.1.1'),
    nameLike?: string(name='NameLike', example='example'),
    orderBy?: string(name='OrderBy', example='id'),
  }(name='QueryArgs', example='ListLists', shrink='json', position='Query'),
}

model ListListsResponseBody = {
  lists?: [ 
    {
      description?: string(name='Description', description='自定义响应页面描述', example='a custom list', maxLength=1024),
      id?: long(name='Id', example='40000001'),
      kind?: string(name='Kind', example='ip'),
      length?: long(name='Length', example='100'),
      name?: string(name='Name', example='example'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Lists'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', example='5'),
  usage?: long(name='Usage', example='10'),
}

model ListListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLists  ListListsRequest
  * @return ListListsResponse
 */
async function listLists(request: ListListsRequest): ListListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLists', 'POST', '/', 'json', false, 'json', request);
}

model ListLoadBalancerRegionsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='1024', position='Query'),
}

model ListLoadBalancerRegionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1024'),
  regions?: [ 
    {
      regionCnName?: string(name='RegionCnName'),
      regionCode?: string(name='RegionCode', example='SEAS'),
      regionEnName?: string(name='RegionEnName', example='South East Asia'),
      subRegions?: [ 
        {
          subRegionCnName?: string(name='SubRegionCnName'),
          subRegionCode?: string(name='SubRegionCode', example='ID'),
          subRegionEnName?: string(name='SubRegionEnName', example='Indonesia'),
        }
      ](name='SubRegions'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request', example='81A5E222-24BF-17EF-9E80-A68D9B8F363D'),
  totalCount?: int32(name='TotalCount', example='12'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListLoadBalancerRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancerRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLoadBalancerRegions  ListLoadBalancerRegionsRequest
  * @return ListLoadBalancerRegionsResponse
 */
async function listLoadBalancerRegions(request: ListLoadBalancerRegionsRequest): ListLoadBalancerRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLoadBalancerRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListManagedRulesGroupsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListManagedRulesGroupsResponseBody = {
  managedRulesGroups?: [ 
    {
      name?: string(name='Name', example='example'),
      ruleCount?: long(name='RuleCount', example='1000'),
    }
  ](name='ManagedRulesGroups'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListManagedRulesGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManagedRulesGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListManagedRulesGroups  ListManagedRulesGroupsRequest
  * @return ListManagedRulesGroupsResponse
 */
async function listManagedRulesGroups(request: ListManagedRulesGroupsRequest): ListManagedRulesGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListManagedRulesGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListPagesRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListPagesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  pages?: [ 
    {
      content: string(name='Content', description='自定义响应页面内容BASE64编码

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
      contentType: string(name='ContentType', description='自定义响应页面内容类型

This parameter is required.', example='text/html'),
      description?: string(name='Description', description='自定义响应页面描述', example='a custom deny page', maxLength=1024),
      id?: long(name='Id', example='50000001'),
      kind?: string(name='Kind', example='custom'),
      name?: string(name='Name', example='example'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Pages'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', example='10'),
  usage?: long(name='Usage', example='10'),
}

model ListPagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPages  ListPagesRequest
  * @return ListPagesResponse
 */
async function listPages(request: ListPagesRequest): ListPagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPages', 'POST', '/', 'json', false, 'json', request);
}

model ListRecordsRequest {
  bizName?: string(name='BizName', example='web', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  proxied?: string(name='Proxied', example='true', position='Query'),
  recordMatchType?: string(name='RecordMatchType', example='fuzzy', position='Query'),
  recordName?: string(name='RecordName', example='www.example.com', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
  sourceType?: string(name='SourceType', example='OSS', position='Query'),
  type?: string(name='Type', example='CNAME', position='Query'),
}

model ListRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  records?: [ 
    {
      authConf?: {
        accessKey?: string(name='AccessKey', example='u0Nkg5gBK***QF5wvKMM504JUHt'),
        authType?: string(name='AuthType', example='private'),
        region?: string(name='Region', example='us-east-1'),
        secretKey?: string(name='SecretKey', example='VIxuvJSA2S03f***kp208dy5w7'),
        version?: string(name='Version', example='v4'),
      }(name='AuthConf'),
      bizName?: string(name='BizName', example='web'),
      comment?: string(name='Comment', example='this is a remark.'),
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      data?: {
        algorithm?: int32(name='Algorithm', example='0'),
        certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
        flag?: int32(name='Flag', example='128'),
        keyTag?: int32(name='KeyTag', example='0'),
        matchingType?: int32(name='MatchingType', example='0'),
        port?: int32(name='Port', example='80'),
        priority?: int32(name='Priority', example='0'),
        selector?: int32(name='Selector', example='0'),
        tag?: string(name='Tag', example='issue'),
        type?: int32(name='Type', example='0'),
        usage?: int32(name='Usage', example='0'),
        value?: string(name='Value', example='CNAME'),
        weight?: int32(name='Weight', example='0'),
      }(name='Data', example='{"value":"1.1.1.1"}'),
      hostPolicy?: string(name='HostPolicy'),
      proxied?: boolean(name='Proxied', example='true'),
      recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
      recordId?: long(name='RecordId', example='1234567890123'),
      recordName?: string(name='RecordName', example='a.example.com'),
      recordSourceType?: string(name='RecordSourceType', example='OSS'),
      recordType?: string(name='RecordType', example='A/AAAA'),
      siteId?: long(name='SiteId', example='1234567890123'),
      siteName?: string(name='SiteName', example='example.com'),
      ttl?: long(name='Ttl', example='30'),
      updateTime?: string(name='UpdateTime', example='2023-06-07T10:02:59Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRecords  ListRecordsRequest
  * @return ListRecordsResponse
 */
async function listRecords(request: ListRecordsRequest): ListRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRecords', 'GET', '/', 'json', false, 'json', request);
}

model ListRoutineCanaryAreasRequest {
}

model ListRoutineCanaryAreasResponseBody = {
  canaryAreas?: [ string ](name='CanaryAreas'),
  requestId?: string(name='RequestId', description='Id of the request', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model ListRoutineCanaryAreasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineCanaryAreasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoutineCanaryAreas  ListRoutineCanaryAreasRequest
  * @return ListRoutineCanaryAreasResponse
 */
async function listRoutineCanaryAreas(request: ListRoutineCanaryAreasRequest): ListRoutineCanaryAreasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoutineCanaryAreas', 'POST', '/', 'json', false, 'json', request);
}

model ListRoutineOptionalSpecsRequest {
}

model ListRoutineOptionalSpecsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  specs?: [ 
    {
      isAvailable?: boolean(name='IsAvailable'),
      specName?: string(name='SpecName'),
    }
  ](name='Specs'),
}

model ListRoutineOptionalSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineOptionalSpecsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoutineOptionalSpecs  ListRoutineOptionalSpecsRequest
  * @return ListRoutineOptionalSpecsResponse
 */
async function listRoutineOptionalSpecs(request: ListRoutineOptionalSpecsRequest): ListRoutineOptionalSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoutineOptionalSpecs', 'POST', '/', 'json', false, 'json', request);
}

model ListScheduledPreloadExecutionsRequest {
  id: string(name='Id', description='This parameter is required.', example='ListScheduledPreloadExecutions', position='Query'),
}

model ListScheduledPreloadExecutionsResponseBody = {
  executions?: [ 
    {
      aliUid?: string(name='AliUid'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      interval?: int32(name='Interval'),
      jobId?: string(name='JobId'),
      sliceLen?: int32(name='SliceLen'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Executions'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScheduledPreloadExecutions  ListScheduledPreloadExecutionsRequest
  * @return ListScheduledPreloadExecutionsResponse
 */
async function listScheduledPreloadExecutions(request: ListScheduledPreloadExecutionsRequest): ListScheduledPreloadExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScheduledPreloadExecutions', 'GET', '/', 'json', false, 'json', request);
}

model ListScheduledPreloadJobsRequest {
  endTime?: long(name='EndTime', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='ListScheduledPreloadJobs', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model ListScheduledPreloadJobsResponseBody = {
  jobs?: [ 
    {
      aliUid?: string(name='AliUid'),
      createdAt?: string(name='CreatedAt'),
      domains?: string(name='Domains'),
      errorInfo?: string(name='ErrorInfo'),
      failedFileOss?: string(name='FailedFileOss'),
      fileId?: string(name='FileId'),
      id?: string(name='Id'),
      insertWay?: string(name='InsertWay'),
      name?: string(name='Name'),
      siteId?: long(name='SiteId'),
      taskSubmitted?: int32(name='TaskSubmitted'),
      taskType?: string(name='TaskType'),
      urlCount?: int32(name='UrlCount'),
      urlSubmitted?: int32(name='UrlSubmitted'),
    }
  ](name='Jobs'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListScheduledPreloadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScheduledPreloadJobs  ListScheduledPreloadJobsRequest
  * @return ListScheduledPreloadJobsResponse
 */
async function listScheduledPreloadJobs(request: ListScheduledPreloadJobsRequest): ListScheduledPreloadJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScheduledPreloadJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListSiteDeliveryTasksRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456***', position='Query'),
}

model ListSiteDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', example='0'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
      dataCenter?: string(name='DataCenter', example='cn'),
      deliveryType?: string(name='DeliveryType', example='sls'),
      status?: string(name='Status', example='online'),
      taskName?: string(name='TaskName', example='cdn-test-task'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListSiteDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSiteDeliveryTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSiteDeliveryTasks  ListSiteDeliveryTasksRequest
  * @return ListSiteDeliveryTasksResponse
 */
async function listSiteDeliveryTasks(request: ListSiteDeliveryTasksRequest): ListSiteDeliveryTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSiteDeliveryTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListSitesRequest {
  accessType?: string(name='AccessType', position='Query'),
  coverage?: string(name='Coverage', position='Query'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', example='false', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  planSubscribeType?: string(name='PlanSubscribeType', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzd3styujvyei', position='Query'),
  siteName?: string(name='SiteName', example='example.com', position='Query'),
  siteSearchType?: string(name='SiteSearchType', example='fuzzy', position='Query'),
  status?: string(name='Status', example='pending', position='Query'),
  tagFilter?: [ 
    {
      key?: string(name='Key', example='tag1'),
      value?: string(name='Value', example='aaa'),
    }
  ](name='TagFilter', shrink='json', position='Query'),
}

model ListSitesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  sites?: [ 
    {
      accessType?: string(name='AccessType', example='NS'),
      cnameZone?: string(name='CnameZone', example='example.cname.com'),
      coverage?: string(name='Coverage', example='domestic'),
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      instanceId?: string(name='InstanceId', example='onBvtlmIyeXLbiDw81F9'),
      nameServerList?: string(name='NameServerList', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
      planName?: string(name='PlanName', example='plan-168656498****'),
      planSpecName?: string(name='PlanSpecName', example='normal'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26g6i6se6pna'),
      siteId?: long(name='SiteId', example='123456789****'),
      siteName?: string(name='SiteName', example='example.com'),
      status?: string(name='Status', example='pending'),
      tags?: map[string]any(name='Tags', example='{"tag1":"value1"}'),
      updateTime?: string(name='UpdateTime', example='2023-12-24T02:01:11Z'),
      verifyCode?: string(name='VerifyCode', example='verify_d516cb3740f81f0cef77d162edd1****'),
    }
  ](name='Sites'),
  totalCount?: int32(name='TotalCount', example='40'),
}

model ListSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSitesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSites  ListSitesRequest
  * @return ListSitesResponse
 */
async function listSites(request: ListSitesRequest): ListSitesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSites', 'GET', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxItem?: int32(name='MaxItem', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAZjtYxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='要创建并绑定标签的资源所在的地域ID。

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='site', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键', example='env'),
      value?: string(name='Value', description='标签值', example='value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAYwsxxxxxxx'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='example.com'),
      resourceType?: string(name='ResourceType', example='site'),
      tagKey?: string(name='TagKey', example='env'),
      tagValue?: string(name='TagValue', example='value'),
    }
  ](name='TagResources'),
  totalCount?: int32(name='TotalCount', example='16'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListUploadTasksRequest {
  endTime?: string(name='EndTime', example='2019-12-06T12:00:00Z', position='Query'),
  siteId?: long(name='SiteId', example='123456****', position='Query'),
  startTime?: string(name='StartTime', example='2018-11-29T00:00:00Z', position='Query'),
  type?: string(name='Type', example='file', position='Query'),
}

model ListUploadTasksResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-A198-72F8FD6D****'),
  tasks?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', example='invalid url'),
      errorCode?: string(name='ErrorCode', example='InvalidUrl,InvalidDomain'),
      status?: string(name='Status', example='Complete'),
      type?: string(name='Type', example='file'),
      uploadId?: string(name='UploadId', example='159253299357****'),
      uploadTaskName?: string(name='UploadTaskName', example='purge_file_task'),
    }
  ](name='Tasks'),
}

model ListUploadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUploadTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUploadTasks  ListUploadTasksRequest
  * @return ListUploadTasksResponse
 */
async function listUploadTasks(request: ListUploadTasksRequest): ListUploadTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUploadTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListUserDeliveryTasksRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model ListUserDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='1f94c47f-3a1a-4f69-8d6c-bfeee1b49aab'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', example='dcdn_log_er'),
      dataCenter?: string(name='DataCenter', example='cn'),
      deliveryType?: string(name='DeliveryType', example='oss'),
      status?: string(name='Status', example='online'),
      taskName?: string(name='TaskName', example='testoss11'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='68'),
}

model ListUserDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDeliveryTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserDeliveryTasks  ListUserDeliveryTasksRequest
  * @return ListUserDeliveryTasksResponse
 */
async function listUserDeliveryTasks(request: ListUserDeliveryTasksRequest): ListUserDeliveryTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserDeliveryTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListUserRatePlanInstancesRequest {
  checkRemainingSiteQuota?: string(name='CheckRemainingSiteQuota', example='true', position='Query'),
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='500', position='Query'),
  sortBy?: string(name='SortBy', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', example='asc', position='Query'),
  status?: string(name='Status', example='online', position='Query'),
}

model ListUserRatePlanInstancesResponseBody = {
  instanceInfo?: [ 
    {
      billingMode?: string(name='BillingMode', example='PREPAY'),
      coverages?: string(name='Coverages', example='domestic,overseas'),
      createTime?: string(name='CreateTime', example='YYYY-MM-DDThh:mm:ssZ'),
      duration?: int32(name='Duration', example='3'),
      expireTime?: string(name='ExpireTime', example='YYYY-MM-DDThh:mm:ssZ'),
      instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
      planName?: string(name='PlanName', example='basic'),
      planType?: string(name='PlanType', example='normal'),
      siteQuota?: string(name='SiteQuota', example='1'),
      sites?: [ 
        {
          siteId?: long(name='SiteId', example='123456****'),
          siteName?: string(name='SiteName', example='example.com'),
          siteStatus?: string(name='SiteStatus', example='pending'),
        }
      ](name='Sites'),
      status?: string(name='Status', example='online'),
    }
  ](name='InstanceInfo'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', example='68'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListUserRatePlanInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRatePlanInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserRatePlanInstances  ListUserRatePlanInstancesRequest
  * @return ListUserRatePlanInstancesResponse
 */
async function listUserRatePlanInstances(request: ListUserRatePlanInstancesRequest): ListUserRatePlanInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserRatePlanInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListWafManagedRulesRequest {
  attackType: int32(name='AttackType', description='This parameter is required.', example='11', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='10000001', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  queryArgs?: {
    action?: string(name='Action', example='deny'),
    idNameLike?: string(name='IdNameLike', example='example'),
    protectionLevel?: int32(name='ProtectionLevel', example='1'),
    protectionLevels?: [ int32 ](name='ProtectionLevels'),
    status?: string(name='Status', example='on'),
  }(name='QueryArgs', shrink='json', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
}

model ListWafManagedRulesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', example='deny'),
      id?: long(name='Id', example='100001'),
      name?: string(name='Name'),
      protectionLevel?: int32(name='ProtectionLevel', example='1'),
      status?: string(name='Status', example='on'),
    }
  ](name='Rules'),
  totalCount?: long(name='TotalCount', example='20'),
}

model ListWafManagedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafManagedRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWafManagedRules  ListWafManagedRulesRequest
  * @return ListWafManagedRulesResponse
 */
async function listWafManagedRules(request: ListWafManagedRulesRequest): ListWafManagedRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWafManagedRules', 'POST', '/', 'json', false, 'json', request);
}

model ListWafPhasesRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
}

model ListWafPhasesResponseBody = {
  phases?: [ 
    {
      phase?: string(name='Phase'),
      rulesets?: [ 
        {
          id?: long(name='Id'),
          name?: string(name='Name'),
          rules?: [
            WafRuleConfig
          ](name='Rules'),
          shared?: WafBatchRuleShared(name='Shared'),
        }
      ](name='Rulesets'),
    }
  ](name='Phases'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model ListWafPhasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafPhasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWafPhases  ListWafPhasesRequest
  * @return ListWafPhasesResponse
 */
async function listWafPhases(request: ListWafPhasesRequest): ListWafPhasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWafPhases', 'POST', '/', 'json', false, 'json', request);
}

model ListWafRulesRequest {
  pageNumber?: int32(name='PageNumber', example='http_custom', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
  phase?: string(name='Phase', example='0', position='Query'),
  queryArgs?: {
    desc?: boolean(name='Desc'),
    id?: long(name='Id', example='20000001'),
    idNameLike?: string(name='IdNameLike', example='example'),
    nameLike?: string(name='NameLike', example='example'),
    orderBy?: string(name='OrderBy', example='position'),
    rulesetId?: long(name='RulesetId', example='10000001'),
    status?: string(name='Status', example='on'),
  }(name='QueryArgs', example='http_custom', shrink='json', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', example='1', position='Query'),
}

model ListWafRulesResponseBody = {
  instanceUsage?: long(name='InstanceUsage', example='10'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', example='deny'),
      characteristicsFields?: [ string ](name='CharacteristicsFields'),
      config?: WafRuleConfig(name='Config'),
      fields?: [ string ](name='Fields'),
      id?: long(name='Id', example='20000001'),
      name?: string(name='Name', example='example'),
      phase?: string(name='Phase', example='http_custom'),
      position?: long(name='Position', example='1'),
      rulesetId?: long(name='RulesetId', example='10000001'),
      skip?: string(name='Skip', example='part'),
      status?: string(name='Status', example='on'),
      tags?: [ string ](name='Tags'),
      timer?: WafTimer(name='Timer'),
      type?: string(name='Type', example='http_custom'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Rules'),
  siteUsage?: long(name='SiteUsage', example='5'),
  totalCount?: long(name='TotalCount', example='20'),
}

model ListWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWafRules  ListWafRulesRequest
  * @return ListWafRulesResponse
 */
async function listWafRules(request: ListWafRulesRequest): ListWafRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWafRules', 'POST', '/', 'json', false, 'json', request);
}

model ListWafRulesetsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  phase?: string(name='Phase', example='http_bot', position='Query'),
  queryArgs?: {
    anyLike?: string(name='AnyLike', example='example'),
    desc?: boolean(name='Desc'),
    nameLike?: string(name='NameLike', example='example'),
    orderBy?: string(name='OrderBy', example='id'),
  }(name='QueryArgs', example='http_bot', shrink='json', position='Query'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', example='1', position='Query'),
}

model ListWafRulesetsResponseBody = {
  instanceUsage?: long(name='InstanceUsage', example='10'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesets?: [ 
    {
      fields?: [ string ](name='Fields'),
      id?: long(name='Id', example='10000001'),
      name?: string(name='Name', example='example'),
      phase?: string(name='Phase', example='http_bot'),
      status?: string(name='Status', example='on'),
      target?: string(name='Target', example='web'),
      types?: [ string ](name='Types'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Rulesets'),
  siteUsage?: long(name='SiteUsage', example='5'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListWafRulesetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafRulesetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWafRulesets  ListWafRulesetsRequest
  * @return ListWafRulesetsResponse
 */
async function listWafRulesets(request: ListWafRulesetsRequest): ListWafRulesetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWafRulesets', 'POST', '/', 'json', false, 'json', request);
}

model ListWafTemplateRulesRequest {
  phase?: string(name='Phase', example='http_anti_scan', position='Query'),
  queryArgs?: {
    type?: string(name='Type', example='http_directory_traversal'),
  }(name='QueryArgs', shrink='json', position='Query'),
}

model ListWafTemplateRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      config?: WafRuleConfig(name='Config'),
      name?: string(name='Name', example='HTTP Directory Traversal Rule [Template]'),
      phase?: string(name='Phase', example='http_anti_scan'),
      status?: string(name='Status', example='on'),
      type?: string(name='Type', example='http_directory_traversal'),
    }
  ](name='Rules'),
}

model ListWafTemplateRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafTemplateRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWafTemplateRules  ListWafTemplateRulesRequest
  * @return ListWafTemplateRulesResponse
 */
async function listWafTemplateRules(request: ListWafTemplateRulesRequest): ListWafTemplateRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWafTemplateRules', 'POST', '/', 'json', false, 'json', request);
}

model ListWafUsageOfRulesRequest {
  phase?: string(name='Phase', example='http_anti_scan', position='Query'),
  siteId?: long(name='SiteId', example='ListWafUsageOfRules', position='Query'),
}

model ListWafUsageOfRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  sites?: [ 
    {
      id?: long(name='Id', example='1'),
      name?: string(name='Name', example='example.com'),
      usage?: long(name='Usage', example='1'),
    }
  ](name='Sites'),
}

model ListWafUsageOfRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafUsageOfRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWafUsageOfRules  ListWafUsageOfRulesRequest
  * @return ListWafUsageOfRulesResponse
 */
async function listWafUsageOfRules(request: ListWafUsageOfRulesRequest): ListWafUsageOfRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWafUsageOfRules', 'POST', '/', 'json', false, 'json', request);
}

model ListWaitingRoomEventsRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='7096621098****', position='Query'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', example='89677721098****', position='Query'),
  waitingRoomId: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****', position='Query'),
}

model ListWaitingRoomEventsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='f3c3700a-4c0f-4a24-b576-fd7dbf9e7c55'),
  waitingRoomEvents?: [ 
    {
      customPageHtml?: string(name='CustomPageHtml', example='html-yets-maqi1111'),
      description?: string(name='Description', example='terraform-example'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='off'),
      enable?: string(name='Enable', example='on'),
      endTime?: string(name='EndTime', example='1719814497'),
      jsonResponseEnable?: string(name='JsonResponseEnable', example='off'),
      language?: string(name='Language', example='zhcn'),
      name?: string(name='Name'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', example='11'),
      preQueueEnable?: string(name='PreQueueEnable', example='on'),
      preQueueStartTime?: string(name='PreQueueStartTime', example='1719814097'),
      queuingMethod?: string(name='QueuingMethod', example='fifo'),
      queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
      randomPreQueueEnable?: string(name='RandomPreQueueEnable', example='on'),
      sessionDuration?: string(name='SessionDuration', example='3'),
      startTime?: string(name='StartTime', example='1719814398'),
      totalActiveUsers?: string(name='TotalActiveUsers', example='22'),
      waitingRoomEventId?: long(name='WaitingRoomEventId', example='89677721098****'),
      waitingRoomId?: string(name='WaitingRoomId', example='5c938a045c9ca46607163d34966****'),
      waitingRoomType?: string(name='WaitingRoomType', example='custom'),
    }
  ](name='WaitingRoomEvents'),
}

model ListWaitingRoomEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWaitingRoomEvents  ListWaitingRoomEventsRequest
  * @return ListWaitingRoomEventsResponse
 */
async function listWaitingRoomEvents(request: ListWaitingRoomEventsRequest): ListWaitingRoomEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWaitingRoomEvents', 'GET', '/', 'json', false, 'json', request);
}

model ListWaitingRoomRulesRequest {
  ruleName?: string(name='RuleName', example='test', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  waitingRoomId: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****', position='Query'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='37286782688****', position='Query'),
}

model ListWaitingRoomRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  waitingRoomRules?: [ 
    {
      rule?: string(name='Rule', example='(http.request.uri.path.file_name eq \\"jpg\\")'),
      ruleEnable?: string(name='RuleEnable', example='on'),
      ruleName?: string(name='RuleName', example='ip'),
      waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='37286782688****'),
    }
  ](name='WaitingRoomRules'),
}

model ListWaitingRoomRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWaitingRoomRules  ListWaitingRoomRulesRequest
  * @return ListWaitingRoomRulesResponse
 */
async function listWaitingRoomRules(request: ListWaitingRoomRulesRequest): ListWaitingRoomRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWaitingRoomRules', 'GET', '/', 'json', false, 'json', request);
}

model ListWaitingRoomsRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='120876698010528', position='Query'),
  waitingRoomId?: string(name='WaitingRoomId', example='6a51d5bc6460887abd1291dc7d4d****', position='Query'),
}

model ListWaitingRoomsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  waitingRooms?: [ 
    {
      cookieName?: string(name='CookieName', example='__aliwaitingroom_example'),
      customPageHtml?: string(name='CustomPageHtml'),
      description?: string(name='Description'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
      enable?: string(name='Enable', example='on'),
      hostNameAndPath?: [ 
        {
          domain?: string(name='Domain', example='example.com'),
          path?: string(name='Path', example='/test'),
          subdomain?: string(name='Subdomain', example='test.'),
        }
      ](name='HostNameAndPath'),
      jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
      language?: string(name='Language', example='zhcn'),
      name?: string(name='Name'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', example='200'),
      queueAllEnable?: string(name='QueueAllEnable', example='on'),
      queuingMethod?: string(name='QueuingMethod', example='random'),
      queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
      sessionDuration?: string(name='SessionDuration', example='3600'),
      totalActiveUsers?: string(name='TotalActiveUsers', example='300'),
      waitingRoomId?: string(name='WaitingRoomId', example='6a51d5bc6460887abd1291dc7d4d****'),
      waitingRoomType?: string(name='WaitingRoomType', example='default'),
    }
  ](name='WaitingRooms'),
}

model ListWaitingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWaitingRooms  ListWaitingRoomsRequest
  * @return ListWaitingRoomsResponse
 */
async function listWaitingRooms(request: ListWaitingRoomsRequest): ListWaitingRoomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWaitingRooms', 'GET', '/', 'json', false, 'json', request);
}

model PreloadCachesRequest {
  content?: [ string ](name='Content', shrink='json', position='Query'),
  headers?: map[string]string(name='Headers', shrink='json', position='Query'),
  siteId?: long(name='SiteId', example='123456789****', position='Query'),
}

model PreloadCachesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  taskId?: string(name='TaskId', example='16401427840'),
}

model PreloadCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreloadCachesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PreloadCaches  PreloadCachesRequest
  * @return PreloadCachesResponse
 */
async function preloadCaches(request: PreloadCachesRequest): PreloadCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreloadCaches', 'POST', '/', 'json', false, 'json', request);
}

model PublishRoutineCodeVersionRequest {
  canaryAreaList?: [ string ](name='CanaryAreaList', shrink='json', position='Body'),
  canaryCodeVersion?: string(name='CanaryCodeVersion', position='Body'),
  codeVersion?: string(name='CodeVersion', position='Body'),
  env?: string(name='Env', position='Body'),
  name?: string(name='Name', example='PublishRoutineCodeVersion', position='Body'),
}

model PublishRoutineCodeVersionResponseBody = {
  codeVersion?: string(name='CodeVersion'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PublishRoutineCodeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishRoutineCodeVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishRoutineCodeVersion  PublishRoutineCodeVersionRequest
  * @return PublishRoutineCodeVersionResponse
 */
async function publishRoutineCodeVersion(request: PublishRoutineCodeVersionRequest): PublishRoutineCodeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishRoutineCodeVersion', 'POST', '/', 'json', true, 'form', request);
}

model PurgeCachesRequest {
  content?: {
    cacheTags?: [ string ](name='CacheTags'),
    directories?: [ string ](name='Directories'),
    files?: [ any ](name='Files'),
    hostnames?: [ string ](name='Hostnames'),
    ignoreParams?: [ string ](name='IgnoreParams'),
    purgeAll?: boolean(name='PurgeAll', example='true'),
  }(name='Content', shrink='json', position='Query'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', example='true', position='Query'),
  force?: boolean(name='Force', example='true', position='Query'),
  siteId?: long(name='SiteId', example='123456789****', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='file', position='Query'),
}

model PurgeCachesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  taskId?: string(name='TaskId', example='15940956620'),
}

model PurgeCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurgeCachesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PurgeCaches  PurgeCachesRequest
  * @return PurgeCachesResponse
 */
async function purgeCaches(request: PurgeCachesRequest): PurgeCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurgeCaches', 'POST', '/', 'json', false, 'json', request);
}

model PutKvRequest {
  base64?: boolean(name='Base64', example='true', position='Query'),
  expiration?: long(name='Expiration', example='1690081381', position='Query'),
  expirationTtl?: long(name='ExpirationTtl', example='3600', position='Query'),
  key: string(name='Key', description='This parameter is required.', example='test_key', position='Query'),
  namespace: string(name='Namespace', description='This parameter is required.', example='test_namespace', position='Query'),
  value: string(name='Value', description='This parameter is required.', example='test_value', position='Body'),
}

model PutKvResponseBody = {
  length?: string(name='Length', example='4'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', example='test'),
}

model PutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutKv  PutKvRequest
  * @return PutKvResponse
 */
async function putKv(request: PutKvRequest): PutKvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutKv', 'POST', '/', 'json', true, 'form', request);
}

model ResetScheduledPreloadJobRequest {
  id?: string(name='Id', example='ResetScheduledPreloadJob', position='Query'),
}

model ResetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid'),
  createdAt?: string(name='CreatedAt'),
  domains?: string(name='Domains'),
  errorInfo?: string(name='ErrorInfo'),
  failedFileOss?: string(name='FailedFileOss'),
  fileId?: string(name='FileId'),
  id?: string(name='Id'),
  insertWay?: string(name='InsertWay'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
  taskSubmitted?: int32(name='TaskSubmitted'),
  taskType?: string(name='TaskType'),
  urlCount?: int32(name='UrlCount'),
  urlSubmitted?: int32(name='UrlSubmitted'),
}

model ResetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetScheduledPreloadJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetScheduledPreloadJob  ResetScheduledPreloadJobRequest
  * @return ResetScheduledPreloadJobResponse
 */
async function resetScheduledPreloadJob(request: ResetScheduledPreloadJobRequest): ResetScheduledPreloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetScheduledPreloadJob', 'POST', '/', 'json', false, 'json', request);
}

model SetCertificateRequest {
  casId?: long(name='CasId', example='30000478', position='Body'),
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE-----', position='Body'),
  id?: string(name='Id', example='30001303', position='Body'),
  name?: string(name='Name', example='yourCertName', maxLength=128, position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateKey?: string(name='PrivateKey', example='-----BEGIN PRIVATE KEY-----', position='Body'),
  region?: string(name='Region', example='cn-hangzhou', position='Body'),
  securityToken?: string(name='SecurityToken', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='cas', position='Body'),
  update?: boolean(name='Update', example='true', position='Body'),
}

model SetCertificateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
}

model SetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetCertificateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetCertificate  SetCertificateRequest
  * @return SetCertificateResponse
 */
async function setCertificate(request: SetCertificateRequest): SetCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCertificate', 'POST', '/', 'json', true, 'form', request);
}

model SetHttpDDoSAttackIntelligentProtectionRequest {
  aiMode: string(name='AiMode', description='This parameter is required.', example='defense', position='Query'),
  aiTemplate: string(name='AiTemplate', description='This parameter is required.', example='level60', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', minimum=1, position='Query'),
}

model SetHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', example='defense'),
  aiTemplate?: string(name='AiTemplate', example='level60'),
  requestId?: string(name='RequestId', description='Id of the request', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteId?: long(name='SiteId', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetHttpDDoSAttackIntelligentProtection  SetHttpDDoSAttackIntelligentProtectionRequest
  * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
async function setHttpDDoSAttackIntelligentProtection(request: SetHttpDDoSAttackIntelligentProtectionRequest): SetHttpDDoSAttackIntelligentProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHttpDDoSAttackIntelligentProtection', 'POST', '/', 'json', false, 'json', request);
}

model SetHttpDDoSAttackProtectionRequest {
  globalMode: string(name='GlobalMode', description='This parameter is required.', example='default', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', minimum=1, position='Query'),
}

model SetHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', example='default'),
  requestId?: string(name='RequestId', description='Id of the request', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  siteId?: long(name='SiteId', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetHttpDDoSAttackProtection  SetHttpDDoSAttackProtectionRequest
  * @return SetHttpDDoSAttackProtectionResponse
 */
async function setHttpDDoSAttackProtection(request: SetHttpDDoSAttackProtectionRequest): SetHttpDDoSAttackProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHttpDDoSAttackProtection', 'POST', '/', 'json', false, 'json', request);
}

model StartScheduledPreloadExecutionRequest {
  id: string(name='Id', description='This parameter is required.', example='StartScheduledPreloadExecution', position='Query'),
}

model StartScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid'),
  endTime?: string(name='EndTime'),
  id?: string(name='Id'),
  interval?: int32(name='Interval', example='60'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model StartScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartScheduledPreloadExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartScheduledPreloadExecution  StartScheduledPreloadExecutionRequest
  * @return StartScheduledPreloadExecutionResponse
 */
async function startScheduledPreloadExecution(request: StartScheduledPreloadExecutionRequest): StartScheduledPreloadExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartScheduledPreloadExecution', 'POST', '/', 'json', false, 'json', request);
}

model StopScheduledPreloadExecutionRequest {
  id: string(name='Id', description='This parameter is required.', example='StopScheduledPreloadExecution', position='Query'),
}

model StopScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid'),
  endTime?: string(name='EndTime'),
  id?: string(name='Id'),
  interval?: int32(name='Interval'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model StopScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopScheduledPreloadExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopScheduledPreloadExecution  StopScheduledPreloadExecutionRequest
  * @return StopScheduledPreloadExecutionResponse
 */
async function stopScheduledPreloadExecution(request: StopScheduledPreloadExecutionRequest): StopScheduledPreloadExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopScheduledPreloadExecution', 'POST', '/', 'json', false, 'json', request);
}

model TransformExpressionToMatchRequest {
  expression?: string(name='Expression', example='http_bot', position='Body'),
  phase?: string(name='Phase', example='http_bot', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
}

model TransformExpressionToMatchResponseBody = {
  match?: WafRuleMatch(name='Match'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model TransformExpressionToMatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransformExpressionToMatchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransformExpressionToMatch  TransformExpressionToMatchRequest
  * @return TransformExpressionToMatchResponse
 */
async function transformExpressionToMatch(request: TransformExpressionToMatchRequest): TransformExpressionToMatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformExpressionToMatch', 'POST', '/', 'json', true, 'form', request);
}

model TransformMatchToExpressionRequest {
  match?: WafRuleMatch(name='Match', example='http_bot', shrink='json', position='Body'),
  phase?: string(name='Phase', example='http_bot', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
}

model TransformMatchToExpressionResponseBody = {
  expression?: string(name='Expression'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model TransformMatchToExpressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransformMatchToExpressionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransformMatchToExpression  TransformMatchToExpressionRequest
  * @return TransformMatchToExpressionResponse
 */
async function transformMatchToExpression(request: TransformMatchToExpressionRequest): TransformMatchToExpressionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformMatchToExpression', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='是否全部删除，只针对TagKey.N为空时有效', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='要创建并绑定标签的资源所在的地域ID。

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID,最多 50个子项

This parameter is required.', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='site', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomScenePolicyRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='2023-04-03T19:00:00Z', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='test', maxLength=128, position='Query'),
  objects?: string(name='Objects', example='123456****', position='Query'),
  policyId: long(name='PolicyId', description='This parameter is required.', example='1', minimum=1, position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2023-04-03T16:00:00Z', position='Query'),
  template: string(name='Template', description='This parameter is required.', example='promotion', position='Query'),
}

model UpdateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', example='test'),
  objects?: [ string ](name='Objects'),
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  startTime?: string(name='StartTime', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', example='promotion'),
}

model UpdateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomScenePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomScenePolicy  UpdateCustomScenePolicyRequest
  * @return UpdateCustomScenePolicyResponse
 */
async function updateCustomScenePolicy(request: UpdateCustomScenePolicyRequest): UpdateCustomScenePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomScenePolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateKvNamespaceRequest {
  namespace: string(name='Namespace', description='This parameter is required.', example='ns1', position='Query'),
  title: string(name='Title', description='This parameter is required.', example='new_ns', position='Query'),
}

model UpdateKvNamespaceResponseBody = {
  description?: string(name='Description', example='this is a test ns.'),
  namespace?: string(name='Namespace', example='new_ns1'),
  namespaceId?: string(name='NamespaceId', example='643355322374688768'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  status?: string(name='Status', example='online'),
}

model UpdateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateKvNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateKvNamespace  UpdateKvNamespaceRequest
  * @return UpdateKvNamespaceResponse
 */
async function updateKvNamespace(request: UpdateKvNamespaceRequest): UpdateKvNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateKvNamespace', 'POST', '/', 'json', false, 'json', request);
}

model UpdateListRequest {
  description?: string(name='Description', example='a custom list', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='40000001', position='Body'),
  items?: [ string ](name='Items', example='a custom list', shrink='json', position='Body'),
  name?: string(name='Name', example='example', position='Body'),
}

model UpdateListResponseBody = {
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateList  UpdateListRequest
  * @return UpdateListResponse
 */
async function updateList(request: UpdateListRequest): UpdateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateList', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePageRequest {
  content: string(name='Content', description='This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4=', position='Body'),
  contentType: string(name='ContentType', description='This parameter is required.', example='text/html', position='Body'),
  description?: string(name='Description', example='a custom deny page', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='50000001', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='example', position='Body'),
}

model UpdatePageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePage  UpdatePageRequest
  * @return UpdatePageResponse
 */
async function updatePage(request: UpdatePageRequest): UpdatePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePage', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey'),
    authType?: string(name='AuthType'),
    region?: string(name='Region'),
    secretKey?: string(name='SecretKey'),
    version?: string(name='Version'),
  }(name='AuthConf', shrink='json', position='Query'),
  bizName?: string(name='BizName', position='Query'),
  comment?: string(name='Comment', position='Query'),
  data: {
    algorithm?: int32(name='Algorithm'),
    certificate?: string(name='Certificate'),
    fingerprint?: string(name='Fingerprint'),
    flag?: int32(name='Flag'),
    keyTag?: int32(name='KeyTag'),
    matchingType?: int32(name='MatchingType'),
    port?: int32(name='Port'),
    priority?: int32(name='Priority'),
    selector?: int32(name='Selector'),
    tag?: string(name='Tag'),
    type?: int32(name='Type'),
    usage?: int32(name='Usage'),
    value?: string(name='Value'),
    weight?: int32(name='Weight'),
  }(name='Data', description='This parameter is required.', shrink='json', position='Query'),
  hostPolicy?: string(name='HostPolicy', position='Query'),
  proxied?: boolean(name='Proxied', description='是否代理加速', position='Query'),
  recordId: long(name='RecordId', description='This parameter is required.', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
  ttl?: int32(name='Ttl', position='Query'),
}

model UpdateRecordResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRecord  UpdateRecordRequest
  * @return UpdateRecordResponse
 */
async function updateRecord(request: UpdateRecordRequest): UpdateRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRecord', 'POST', '/', 'json', false, 'json', request);
}

model UpdateScheduledPreloadExecutionRequest {
  endTime?: string(name='EndTime', position='Body'),
  id: string(name='Id', description='This parameter is required.', example='UpdateScheduledPreloadExecution', position='Query'),
  interval?: int32(name='Interval', position='Body'),
  sliceLen?: int32(name='SliceLen', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
}

model UpdateScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid'),
  endTime?: string(name='EndTime'),
  id?: string(name='Id'),
  interval?: int32(name='Interval'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model UpdateScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduledPreloadExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateScheduledPreloadExecution  UpdateScheduledPreloadExecutionRequest
  * @return UpdateScheduledPreloadExecutionResponse
 */
async function updateScheduledPreloadExecution(request: UpdateScheduledPreloadExecutionRequest): UpdateScheduledPreloadExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScheduledPreloadExecution', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSiteAccessTypeRequest {
  accessType: string(name='AccessType', description='This parameter is required.', example='NS', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890', position='Query'),
}

model UpdateSiteAccessTypeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateSiteAccessTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteAccessTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSiteAccessType  UpdateSiteAccessTypeRequest
  * @return UpdateSiteAccessTypeResponse
 */
async function updateSiteAccessType(request: UpdateSiteAccessTypeRequest): UpdateSiteAccessTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSiteAccessType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSiteCoverageRequest {
  coverage: string(name='Coverage', description='This parameter is required.', example='global', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model UpdateSiteCoverageResponseBody = {
  requestId?: string(name='RequestId', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model UpdateSiteCoverageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCoverageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSiteCoverage  UpdateSiteCoverageRequest
  * @return UpdateSiteCoverageResponse
 */
async function updateSiteCoverage(request: UpdateSiteCoverageRequest): UpdateSiteCoverageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSiteCoverage', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies', shrink='json', position='Body'),
  requestHeaders?: [ string ](name='RequestHeaders', shrink='json', position='Body'),
  responseHeaders?: [ string ](name='ResponseHeaders', shrink='json', position='Body'),
  siteId?: long(name='SiteId', description='site id', example='11223****', position='Body'),
}

model UpdateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
}

model UpdateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCustomLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSiteCustomLog  UpdateSiteCustomLogRequest
  * @return UpdateSiteCustomLogResponse
 */
async function updateSiteCustomLog(request: UpdateSiteCustomLogRequest): UpdateSiteCustomLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSiteCustomLog', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_er', position='Body'),
  discardRate?: float(name='DiscardRate', example='0.0', position='Body'),
  fieldName: string(name='FieldName', description='This parameter is required.', example='ClientIP,UserAgent', position='Body'),
  siteId?: long(name='SiteId', example='123456****', position='Body'),
  taskName: string(name='TaskName', description='This parameter is required.', example='cdn-test-task', position='Body'),
}

model UpdateSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSiteDeliveryTask  UpdateSiteDeliveryTaskRequest
  * @return UpdateSiteDeliveryTaskResponse
 */
async function updateSiteDeliveryTask(request: UpdateSiteDeliveryTaskRequest): UpdateSiteDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSiteDeliveryTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSiteDeliveryTaskStatusRequest {
  method: string(name='Method', description='This parameter is required.', example='online', position='Query'),
  siteId?: long(name='SiteId', example='123456****', position='Query'),
  taskName: string(name='TaskName', description='This parameter is required.', example='cdn-test-task', position='Query'),
}

model UpdateSiteDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSiteDeliveryTaskStatus  UpdateSiteDeliveryTaskStatusRequest
  * @return UpdateSiteDeliveryTaskStatusResponse
 */
async function updateSiteDeliveryTaskStatus(request: UpdateSiteDeliveryTaskStatusRequest): UpdateSiteDeliveryTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSiteDeliveryTaskStatus', 'GET', '/', 'json', false, 'json', request);
}

model UpdateSiteVanityNSRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
  vanityNSList?: string(name='VanityNSList', example='ns1.example.com,ns2.example.com', position='Query'),
}

model UpdateSiteVanityNSResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateSiteVanityNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteVanityNSResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSiteVanityNS  UpdateSiteVanityNSRequest
  * @return UpdateSiteVanityNSResponse
 */
async function updateSiteVanityNS(request: UpdateSiteVanityNSRequest): UpdateSiteVanityNSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSiteVanityNS', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_er', position='Body'),
  discardRate?: float(name='DiscardRate', example='0', position='Body'),
  fieldName: string(name='FieldName', description='This parameter is required.', example='ClientRequestID,ClientRequestHost', position='Body'),
  taskName: string(name='TaskName', description='This parameter is required.', example='test_project', position='Body'),
}

model UpdateUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserDeliveryTask  UpdateUserDeliveryTaskRequest
  * @return UpdateUserDeliveryTaskResponse
 */
async function updateUserDeliveryTask(request: UpdateUserDeliveryTaskRequest): UpdateUserDeliveryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDeliveryTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserDeliveryTaskStatusRequest {
  method: string(name='Method', description='This parameter is required.', example='online', position='Query'),
  taskName: string(name='TaskName', description='This parameter is required.', example='test_project', position='Query'),
}

model UpdateUserDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserDeliveryTaskStatus  UpdateUserDeliveryTaskStatusRequest
  * @return UpdateUserDeliveryTaskStatusResponse
 */
async function updateUserDeliveryTaskStatus(request: UpdateUserDeliveryTaskStatusRequest): UpdateUserDeliveryTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDeliveryTaskStatus', 'GET', '/', 'json', false, 'json', request);
}

model UpdateWafRuleRequest {
  config?: WafRuleConfig(name='Config', shrink='json', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='20000001', position='Body'),
  position?: long(name='Position', example='1', position='Body'),
  siteId: long(name='SiteId', description='This parameter is required.', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', position='Query'),
  status?: string(name='Status', example='on', position='Body'),
}

model UpdateWafRuleResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWafRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWafRule  UpdateWafRuleRequest
  * @return UpdateWafRuleResponse
 */
async function updateWafRule(request: UpdateWafRuleRequest): UpdateWafRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWafRule', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWafRulesetRequest {
  id: long(name='Id', description='This parameter is required.', example='10000001', position='Body'),
  siteId?: long(name='SiteId', example='1', position='Query'),
  siteVersion?: int32(name='SiteVersion', example='1', position='Query'),
  status?: string(name='Status', example='on', position='Body'),
}

model UpdateWafRulesetResponseBody = {
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWafRulesetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWafRuleset  UpdateWafRulesetRequest
  * @return UpdateWafRulesetResponse
 */
async function updateWafRuleset(request: UpdateWafRulesetRequest): UpdateWafRulesetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWafRuleset', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWaitingRoomRequest {
  cookieName?: string(name='CookieName', example='__aliwaitingroom_example', position='Query'),
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!', position='Query'),
  description?: string(name='Description', position='Query'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on', position='Query'),
  enable?: string(name='Enable', example='on', position='Query'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', example='example.com'),
      path?: string(name='Path', example='/test'),
      subdomain?: string(name='Subdomain', example='test.'),
    }
  ](name='HostNameAndPath', shrink='json', position='Query'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on', position='Query'),
  language?: string(name='Language', example='zhcn', position='Query'),
  name?: string(name='Name', position='Query'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', example='200', position='Query'),
  queueAllEnable?: string(name='QueueAllEnable', example='on', position='Query'),
  queuingMethod?: string(name='QueuingMethod', example='random', position='Query'),
  queuingStatusCode?: string(name='QueuingStatusCode', example='200', position='Query'),
  sessionDuration?: string(name='SessionDuration', example='5', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='7096621098****', position='Query'),
  totalActiveUsers?: string(name='TotalActiveUsers', example='300', position='Query'),
  waitingRoomId: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****', position='Query'),
  waitingRoomType?: string(name='WaitingRoomType', example='default', position='Query'),
}

model UpdateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWaitingRoom  UpdateWaitingRoomRequest
  * @return UpdateWaitingRoomResponse
 */
async function updateWaitingRoom(request: UpdateWaitingRoomRequest): UpdateWaitingRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWaitingRoom', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', example='html-yets-maqi1111', position='Query'),
  description?: string(name='Description', example='http://yywyyw.com', position='Query'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='off', position='Query'),
  enable?: string(name='Enable', example='on', position='Query'),
  endTime?: string(name='EndTime', example='1719849600', position='Query'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='off', position='Query'),
  language?: string(name='Language', example='enus', position='Query'),
  name?: string(name='Name', position='Query'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', example='300', position='Query'),
  preQueueEnable?: string(name='PreQueueEnable', example='on', position='Query'),
  preQueueStartTime?: string(name='PreQueueStartTime', example='1719763200', position='Query'),
  queuingMethod?: string(name='QueuingMethod', example='fifo', position='Query'),
  queuingStatusCode?: string(name='QueuingStatusCode', example='200', position='Query'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', example='on', position='Query'),
  sessionDuration?: string(name='SessionDuration', example='5', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  startTime?: string(name='StartTime', example='1719763200', position='Query'),
  totalActiveUsers?: string(name='TotalActiveUsers', example='200', position='Query'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', example='89677721098****', position='Query'),
  waitingRoomType?: string(name='WaitingRoomType', example='custom', position='Query'),
}

model UpdateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWaitingRoomEvent  UpdateWaitingRoomEventRequest
  * @return UpdateWaitingRoomEventResponse
 */
async function updateWaitingRoomEvent(request: UpdateWaitingRoomEventRequest): UpdateWaitingRoomEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWaitingRoomEvent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWaitingRoomRuleRequest {
  rule: string(name='Rule', description='This parameter is required.', example='(http.request.uri.path.file_name eq \\"jpg\\")', position='Query'),
  ruleEnable: string(name='RuleEnable', description='This parameter is required.', example='on', position='Query'),
  ruleName: string(name='RuleName', description='This parameter is required.', example='test1', position='Query'),
  siteId: long(name='SiteId', description='This parameter is required.', example='123456****', position='Query'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='8987739839****', position='Query'),
}

model UpdateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', example='9bfe9d95-7bf6-469d-a628-ed7bc9f25073'),
}

model UpdateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWaitingRoomRule  UpdateWaitingRoomRuleRequest
  * @return UpdateWaitingRoomRuleResponse
 */
async function updateWaitingRoomRule(request: UpdateWaitingRoomRuleRequest): UpdateWaitingRoomRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWaitingRoomRule', 'POST', '/', 'json', false, 'json', request);
}

model VerifySiteRequest {
  siteId: long(name='SiteId', description='This parameter is required.', example='1234567890123', position='Query'),
}

model VerifySiteResponseBody = {
  passed?: boolean(name='Passed', example='true'),
  requestId?: string(name='RequestId', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model VerifySiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifySiteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifySite  VerifySiteRequest
  * @return VerifySiteResponse
 */
async function verifySite(request: VerifySiteRequest): VerifySiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifySite', 'POST', '/', 'json', false, 'json', request);
}

model HttpDeliveryHeaderParamValue = {
  staticValue?: string(name='StaticValue'),
}

model HttpDeliveryQueryParamValue = {
  staticValue?: string(name='StaticValue'),
}

model FieldContentValue = {
  sortOrder?: long(name='SortOrder', example='1'),
  fieldList?: [ 
    {
      fieldName?: string(name='FieldName', example='ClientIp'),
      description?: string(name='Description', example='IP address of the client.'),
      descriptionCn?: string(name='DescriptionCn'),
      category?: string(name='Category', example='Client'),
      dataType?: string(name='DataType', example='String'),
      sortOrder?: long(name='SortOrder', example='1'),
      isDefault?: boolean(name='IsDefault', example='true'),
    }
  ](name='FieldList'),
}

model QuotaListItemsValue = {
  enable?: boolean(name='Enable'),
  value?: WafQuotaString(name='Value'),
}

model QuotaPageContentTypesValue = {
  enable?: boolean(name='Enable'),
  contentLength?: WafQuotaInteger(name='ContentLength'),
}

