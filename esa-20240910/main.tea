/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('esa', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model WafBatchRuleShared {
  action?: string(name='Action'),
  actions?: {
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  crossSiteId?: long(name='CrossSiteId'),
  expression?: string(name='Expression'),
  match?: WafRuleMatch2(name='Match'),
  mode?: string(name='Mode'),
  name?: string(name='Name'),
  target?: string(name='Target'),
}

model WafQuotaInteger {
  equal?: int32(name='Equal'),
  greaterThan?: int32(name='GreaterThan'),
  greaterThanOrEqual?: int32(name='GreaterThanOrEqual'),
  lessThan?: int32(name='LessThan'),
  lessThanOrEqual?: int32(name='LessThanOrEqual'),
}

model WafQuotaString {
  regexp?: string(name='Regexp'),
}

model WafRuleConfig {
  action?: string(name='Action'),
  actions?: {
    bypass?: {
      customRules?: [ long ](name='CustomRules'),
      regularRules?: [ long ](name='RegularRules'),
      regularTypes?: [ string ](name='RegularTypes'),
      skip?: string(name='Skip'),
      tags?: [ string ](name='Tags'),
    }(name='Bypass'),
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  appPackage?: {
    packageSigns?: [ 
      {
        name?: string(name='Name'),
        sign?: string(name='Sign'),
      }
    ](name='PackageSigns'),
  }(name='AppPackage'),
  appSdk?: {
    customSign?: {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }(name='CustomSign'),
    customSignStatus?: string(name='CustomSignStatus'),
    featureAbnormal?: [ string ](name='FeatureAbnormal'),
  }(name='AppSdk'),
  expression?: string(name='Expression'),
  id?: long(name='Id'),
  managedGroupId?: long(name='ManagedGroupId'),
  managedList?: string(name='ManagedList'),
  managedRulesets?: [ 
    {
      action?: string(name='Action'),
      attackType?: int32(name='AttackType'),
      managedRules?: [ 
        {
          action?: string(name='Action'),
          id?: long(name='Id'),
          status?: string(name='Status'),
        }
      ](name='ManagedRules'),
      numberEnabled?: int32(name='NumberEnabled'),
      numberTotal?: int32(name='NumberTotal'),
      protectionLevel?: int32(name='ProtectionLevel'),
    }
  ](name='ManagedRulesets'),
  name?: string(name='Name'),
  notes?: string(name='Notes'),
  rateLimit?: {
    characteristics?: WafRuleMatch2(name='Characteristics'),
    interval?: int32(name='Interval'),
    onHit?: boolean(name='OnHit'),
    TTL?: int32(name='TTL'),
    threshold?: {
      distinctManagedRules?: int32(name='DistinctManagedRules'),
      managedRulesBlocked?: int32(name='ManagedRulesBlocked'),
      request?: int32(name='Request'),
      responseStatus?: {
        code?: int32(name='Code'),
        count?: int32(name='Count'),
        ratio?: int32(name='Ratio'),
      }(name='ResponseStatus'),
      traffic?: string(name='Traffic'),
    }(name='Threshold'),
  }(name='RateLimit'),
  sigchl?: [ string ](name='Sigchl'),
  status?: string(name='Status'),
  timer?: WafTimer(name='Timer'),
  type?: string(name='Type'),
  value?: string(name='Value'),
}

model WafRuleMatch {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [
    WafRuleMatch
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafRuleMatch2 {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [ 
    {
      convertToLower?: boolean(name='ConvertToLower'),
      criteria?: [ 
        {
          convertToLower?: boolean(name='ConvertToLower'),
          criteria?: [ 
            {
              convertToLower?: boolean(name='ConvertToLower'),
              matchOperator?: string(name='MatchOperator'),
              matchType?: string(name='MatchType'),
              matchValue?: any(name='MatchValue'),
              negate?: boolean(name='Negate'),
            }
          ](name='Criteria'),
          logic?: string(name='Logic'),
          matchOperator?: string(name='MatchOperator'),
          matchType?: string(name='MatchType'),
          matchValue?: any(name='MatchValue'),
          negate?: boolean(name='Negate'),
        }
      ](name='Criteria'),
      logic?: string(name='Logic'),
      matchOperator?: string(name='MatchOperator'),
      matchType?: string(name='MatchType'),
      matchValue?: any(name='MatchValue'),
      negate?: boolean(name='Negate'),
    }
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafSiteSettings {
  addBotProtectionHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddBotProtectionHeaders'),
  addSecurityHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddSecurityHeaders'),
  botManagement?: {
    definiteBots?: {
      action?: string(name='Action'),
      id?: long(name='Id'),
    }(name='DefiniteBots'),
    effectOnStatic?: {
      enable?: boolean(name='Enable'),
    }(name='EffectOnStatic'),
    JSDetection?: {
      enable?: boolean(name='Enable'),
    }(name='JSDetection'),
    likelyBots?: {
      action?: string(name='Action'),
      id?: long(name='Id'),
    }(name='LikelyBots'),
    verifiedBots?: {
      action?: string(name='Action'),
      id?: long(name='Id'),
    }(name='VerifiedBots'),
  }(name='BotManagement'),
  clientIpIdentifier?: {
    headers?: [ string ](name='Headers'),
    mode?: string(name='Mode'),
  }(name='ClientIpIdentifier'),
  securityLevel?: {
    value?: string(name='Value'),
  }(name='SecurityLevel'),
}

model WafTimer {
  periods?: [ 
    {
      end?: string(name='End'),
      start?: string(name='Start'),
    }
  ](name='Periods'),
  scopes?: string(name='Scopes'),
  weeklyPeriods?: [ 
    {
      dailyPeriods?: [ 
        {
          end?: string(name='End'),
          start?: string(name='Start'),
        }
      ](name='DailyPeriods'),
      days?: string(name='Days'),
    }
  ](name='WeeklyPeriods'),
  zone?: int32(name='Zone'),
}

model HttpDeliveryHeaderParamValue = {
  staticValue?: string(name='StaticValue', description='The static variable.', example='alicdn'),
}

model HttpDeliveryQueryParamValue = {
  staticValue?: string(name='StaticValue', description='The static variable.', example='alicdn'),
}

model FieldContentValue = {
  sortOrder?: long(name='SortOrder', description='The sequence number of the fields.', example='1'),
  fieldList?: [ 
    {
      fieldName?: string(name='FieldName', description='The field name.', example='ClientIp'),
      description?: string(name='Description', description='The description of the field in English.', example='IP address of the client.'),
      descriptionCn?: string(name='DescriptionCn', description='The description of the field in Chinese.'),
      category?: string(name='Category', description='The category of the field.', example='Client'),
      dataType?: string(name='DataType', description='The data type of the field.', example='String'),
      sortOrder?: long(name='SortOrder', description='The sequence number of the field.', example='1'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the field is available by default.', example='true'),
    }
  ](name='FieldList', description='The fields.'),
}

model QuotaListItemsValue = {
  enable?: boolean(name='Enable', description='Indicates whether the item type is configured in the custom list.'),
  value?: WafQuotaString(name='Value', description='The format restrictions for the item type in the custom list.'),
}

model QuotaPageContentTypesValue = {
  enable?: boolean(name='Enable', description='Indicates whether the custom error pages of the Content-Type are configured.'),
  contentLength?: WafQuotaInteger(name='ContentLength', description='The maximum length of the custom error pages of the Content-Type.'),
}

model ActivateClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID, which can be obtained by calling the [ListClientCertificates](https://help.aliyun.com/document_detail/2852848.html) operation.

This parameter is required.', example='babaded901474b9693acf530e0fb****'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model ActivateClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaded901474b9693acf530e0fb****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model ActivateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateClientCertificateResponseBody(name='body'),
}

/**
 * @summary Activates a client certificate.
 *
 * @param request ActivateClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActivateClientCertificateResponse
 */
async function activateClientCertificateWithOptions(request: ActivateClientCertificateRequest, runtime: Util.RuntimeOptions): ActivateClientCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Activates a client certificate.
 *
 * @param request ActivateClientCertificateRequest
 * @return ActivateClientCertificateResponse
 */
async function activateClientCertificate(request: ActivateClientCertificateRequest): ActivateClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateClientCertificateWithOptions(request, runtime);
}

model ApplyCertificateRequest {
  domains?: string(name='Domains', description='This parameter is required.', example='www.example.com,blog.example.com'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  type?: string(name='Type'),
}

model ApplyCertificateResponseBody = {
  requestId?: string(name='RequestId', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  result?: [ 
    {
      domain?: string(name='Domain', example='*.example.com'),
      id?: string(name='Id', example='30000478'),
      status?: string(name='Status', example='Applying'),
    }
  ](name='Result'),
  siteName?: string(name='SiteName', example='example.com'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ApplyCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCertificateResponseBody(name='body'),
}

/**
 * @summary 申请免费证书
 *
 * @param request ApplyCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyCertificateResponse
 */
async function applyCertificateWithOptions(request: ApplyCertificateRequest, runtime: Util.RuntimeOptions): ApplyCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 申请免费证书
 *
 * @param request ApplyCertificateRequest
 * @return ApplyCertificateResponse
 */
async function applyCertificate(request: ApplyCertificateRequest): ApplyCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCertificateWithOptions(request, runtime);
}

model BatchCreateRecordsRequest {
  recordList?: [ 
    {
      authConf?: {
        accessKey?: string(name='AccessKey'),
        authType?: string(name='AuthType'),
        region?: string(name='Region'),
        secretKey?: string(name='SecretKey'),
        version?: string(name='Version'),
      }(name='AuthConf'),
      bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**
*   **api**
*   **web**', example='web'),
      data?: {
        algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Applicable to CERT and SSHFP records.', example='0'),
        certificate?: string(name='Certificate', description='The public key of the certificate. Applicable to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Applicable to SSHFP records.', example='abcdef1234567890'),
        flag?: int32(name='Flag', description='The Flag for a CAA record indicates its priority and how it is processed. Valid values: 0 to 255.', example='128'),
        keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Applicable to CERT records.', example='0'),
        matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Applicable to SMIMEA, and TLSA records.', example='0'),
        port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. Exclusive to SRV records.', example='0'),
        priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='2'),
        selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
        tag?: string(name='Tag', description='The tag of a CAA record, which indicates its specific type and purpose, such as issue, issuewild, and iodef.', example='issue'),
        type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
        usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
        value?: string(name='Value', description='The record value or part of the record content. A/AAAA: the IP address being pointed to. CNAME: the target domain name being pointed to. MX: valid target mail server domain name. TXT: valid text string. CAA: valid certificate authority domain name. SRV: valid target host domain name. URI: valid URI string.', example='example.com'),
        weight?: int32(name='Weight', description='The weight of the record. Valid values: 0 to 65,535. Applicable to SRV and URI records.', example='0'),
      }(name='Data', description='The DNS information of the record. Enter fields based on the record type.

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
      proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true'),
      recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='www.example.com'),
      sourceType?: string(name='SourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is used by default.', example='OSS'),
      ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.

This parameter is required.', example='60'),
      type?: string(name='Type', description='The DNS type of the record.

This parameter is required.', example='A/AAAA'),
    }
  ](name='RecordList', description='The list of DNS records to be created.

This parameter is required.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model BatchCreateRecordsShrinkRequest {
  recordListShrink?: string(name='RecordList', description='The list of DNS records to be created.

This parameter is required.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model BatchCreateRecordsResponseBody = {
  recordResultList?: {
    failed?: [ 
      {
        bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**
*   **api**
*   **web**', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Applicable to CERT and SSHFP records.', example='0'),
          certificate?: string(name='Certificate', description='The public key of the certificate. Applicable to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Applicable to SSHFP records.', example='abcdef1234567890'),
          flag?: int32(name='Flag', description='The flag bit of the record. Indicates its priority and handling method, used in CAA records.', example='128'),
          keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Applicable to CERT records.', example='0'),
          matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='RSA'),
          port?: int32(name='Port', description='The port number of the record, associated with the SRV record. Exclusive to SRV records.', example='0'),
          priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. Applicable to MX, SRV, and URI records.', example='10'),
          selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          tag?: string(name='Tag', description='Indicates its priority and handling method, used in CAA records.', example='issue'),
          type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
          usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          value?: string(name='Value', description='The record value or part of the record content. This value is returned when the record is A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, or URI. It has different meanings based on types of records:

*   **A/AAAA**: the IP addresses. IP addresses are separated by commas (,). There is at least one IPv4 address.
*   **CNAME**: the mapped domain name.
*   **NS**: the nameservers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
          weight?: int32(name='Weight', description='The weight of the record. Applicable to SRV and URI records.', example='0'),
        }(name='Data', description='The DNS information about the record, which contains various types of record values and their related attributes.', example='{"value":"2.2.2.2"}'),
        description?: string(name='Description', description='The result description.'),
        proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
        recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
        recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
        recordType?: string(name='RecordType', description='The DNS type of the record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
        sourceType?: string(name='SourceType', description='The origin type of the CNAME record. This field is left empty for other types of records. The type of the origin server. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.', example='OSS'),
        ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='60'),
      }
    ](name='Failed', description='The records that failed to be created.'),
    success?: [ 
      {
        bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**
*   **api**
*   **web**', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Applicable to CERT and SSHFP records.', example='0'),
          certificate?: string(name='Certificate', description='The public key of the certificate. Applicable to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Applicable to SSHFP records.', example='abcdef1234567890'),
          flag?: int32(name='Flag', description='The flag bit of the record. Indicates its priority and handling method, used in CAA records.', example='128'),
          keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Applicable to CERT records.', example='0'),
          matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. Exclusive to SRV records.', example='0'),
          priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. Applicable to MX, SRV, and URI records.', example='10'),
          selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          tag?: string(name='Tag', description='The label of a CAA record, which indicates its specific type and purpose, such as issue, issuewild, and iodef.', example='issue'),
          type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
          usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Applicable to SMIMEA and TLSA records.', example='0'),
          value?: string(name='Value', description='The record value or part of the record content. This value is returned when the record is A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, or URI. It has different meanings based on types of records:

*   **A/AAAA**: the IP addresses. Multiple IPs are separated by commas (,). There is at least one IPv4 address.
*   **CNAME**: the mapped domain name.
*   **NS**: the nameservers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
          weight?: int32(name='Weight', description='The weight of the record. Valid values: 0 to 65535. Applicable to SRV and URI records.', example='0'),
        }(name='Data', description='The DNS record information.', example='{"value":"1.1.1.1"}'),
        description?: string(name='Description', description='The result description.', example='success'),
        proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
        recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
        recordName?: string(name='RecordName', description='The record name.', example='www.example.com'),
        recordType?: string(name='RecordType', description='The DNS type of the record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
        sourceType?: string(name='SourceType', description='The origin type of the CNAME record. This field is left empty for other types of records. The type of the origin server. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.', example='OSS'),
        ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='60'),
      }
    ](name='Success', description='The records that have been created.'),
    totalCount?: int32(name='TotalCount', description='The total number of returned records.', example='20'),
  }(name='RecordResultList', description='The records that have been created and failed to be created.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model BatchCreateRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateRecordsResponseBody(name='body'),
}

/**
 * @summary Adds DNS records of different record types at a time..
 *
 * @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
 * Successful and failed records along with error messages are listed in the response.
 *
 * @param tmpReq BatchCreateRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCreateRecordsResponse
 */
async function batchCreateRecordsWithOptions(tmpReq: BatchCreateRecordsRequest, runtime: Util.RuntimeOptions): BatchCreateRecordsResponse {
  Util.validateModel(tmpReq);
  var request = new BatchCreateRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.recordList)) {
    request.recordListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordList, 'RecordList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.recordListShrink)) {
    query['RecordList'] = request.recordListShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds DNS records of different record types at a time..
 *
 * @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
 * Successful and failed records along with error messages are listed in the response.
 *
 * @param request BatchCreateRecordsRequest
 * @return BatchCreateRecordsResponse
 */
async function batchCreateRecords(request: BatchCreateRecordsRequest): BatchCreateRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateRecordsWithOptions(request, runtime);
}

model BatchDeleteKvRequest {
  keys?: [ string ](name='Keys', description='The keys that you want to delete. You can delete a maximum of 10,000 key-value pairs at a time.

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchDeleteKvShrinkRequest {
  keysShrink?: string(name='Keys', description='The keys that you want to delete. You can delete a maximum of 10,000 key-value pairs at a time.

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchDeleteKvResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that are deleted.'),
}

model BatchDeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvResponseBody(name='body'),
}

/**
 * @summary Deletes key-value pairs from a namespace at a time based on keys.
 *
 * @param tmpReq BatchDeleteKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteKvResponse
 */
async function batchDeleteKvWithOptions(tmpReq: BatchDeleteKvRequest, runtime: Util.RuntimeOptions): BatchDeleteKvResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteKvShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.keys)) {
    request.keysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keys, 'Keys', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.keysShrink)) {
    body['Keys'] = request.keysShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes key-value pairs from a namespace at a time based on keys.
 *
 * @param request BatchDeleteKvRequest
 * @return BatchDeleteKvResponse
 */
async function batchDeleteKv(request: BatchDeleteKvRequest): BatchDeleteKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteKvWithOptions(request, runtime);
}

model BatchDeleteKvWithHighCapacityRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  url?: string(name='Url', description='The download URL of the key-value pairs that you want to delete. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchDeleteKvWithHighCapacityAdvanceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  urlObject?: readable(name='Url', description='The download URL of the key-value pairs that you want to delete. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchDeleteKvWithHighCapacityResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that are deleted.'),
}

model BatchDeleteKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchDeleteWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for deleting key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	rawReq := BatchDeleteKvRequest{
 *     		Namespace: &namespace,
 *     	}
 *     	for i := 0; i < 10000; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		rawReq.Keys = append(rawReq.Keys, &key)
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
 *     	reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchDeleteKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteKvWithHighCapacityResponse
 */
async function batchDeleteKvWithHighCapacityWithOptions(request: BatchDeleteKvWithHighCapacityRequest, runtime: Util.RuntimeOptions): BatchDeleteKvWithHighCapacityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchDeleteWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for deleting key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	rawReq := BatchDeleteKvRequest{
 *     		Namespace: &namespace,
 *     	}
 *     	for i := 0; i < 10000; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		rawReq.Keys = append(rawReq.Keys, &key)
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
 *     	reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchDeleteKvWithHighCapacityRequest
 * @return BatchDeleteKvWithHighCapacityResponse
 */
async function batchDeleteKvWithHighCapacity(request: BatchDeleteKvWithHighCapacityRequest): BatchDeleteKvWithHighCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteKvWithHighCapacityWithOptions(request, runtime);
}

async function batchDeleteKvWithHighCapacityAdvance(request: BatchDeleteKvWithHighCapacityAdvanceRequest, runtime: Util.RuntimeOptions): BatchDeleteKvWithHighCapacityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var batchDeleteKvWithHighCapacityReq = new BatchDeleteKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, batchDeleteKvWithHighCapacityReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    batchDeleteKvWithHighCapacityReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var batchDeleteKvWithHighCapacityResp = batchDeleteKvWithHighCapacityWithOptions(batchDeleteKvWithHighCapacityReq, runtime);
  return batchDeleteKvWithHighCapacityResp;
}

model BatchGetExpressionFieldsRequest {
  expressions?: [ 
    {
      expression?: string(name='Expression', description='The content of the regular expression.', example='ip.src eq 1.1.1.1'),
      id?: long(name='Id', description='The ID of the regular expression.', example='1'),
    }
  ](name='Expressions', description='The regular expressions.', example='http_bot'),
  phase?: string(name='Phase', description='The WAF rule category.', example='http_bot'),
  siteId?: long(name='SiteId', description='The website ID.', example='1'),
}

model BatchGetExpressionFieldsShrinkRequest {
  expressionsShrink?: string(name='Expressions', description='The regular expressions.', example='http_bot'),
  phase?: string(name='Phase', description='The WAF rule category.', example='http_bot'),
  siteId?: long(name='SiteId', description='The website ID.', example='1'),
}

model BatchGetExpressionFieldsResponseBody = {
  fields?: [ 
    {
      fields?: [ string ](name='Fields', description='The fields that match the regular expression.'),
      id?: string(name='Id', description='The ID of the regular expression, which corresponds to the expression ID in the request parameter.', example='1'),
    }
  ](name='Fields', description='The fields that match the regular expressions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchGetExpressionFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetExpressionFieldsResponseBody(name='body'),
}

/**
 * @summary Batch queries the objects that match specific expressions.
 *
 * @param tmpReq BatchGetExpressionFieldsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGetExpressionFieldsResponse
 */
async function batchGetExpressionFieldsWithOptions(tmpReq: BatchGetExpressionFieldsRequest, runtime: Util.RuntimeOptions): BatchGetExpressionFieldsResponse {
  Util.validateModel(tmpReq);
  var request = new BatchGetExpressionFieldsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.expressions)) {
    request.expressionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.expressions, 'Expressions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.expressionsShrink)) {
    body['Expressions'] = request.expressionsShrink;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetExpressionFields',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Batch queries the objects that match specific expressions.
 *
 * @param request BatchGetExpressionFieldsRequest
 * @return BatchGetExpressionFieldsResponse
 */
async function batchGetExpressionFields(request: BatchGetExpressionFieldsRequest): BatchGetExpressionFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetExpressionFieldsWithOptions(request, runtime);
}

model BatchPutKvRequest {
  kvList?: [ 
    {
      expiration?: long(name='Expiration', description='The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='1690081381'),
      expirationTtl?: long(name='ExpirationTtl', description='The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='3600'),
      key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
      value?: string(name='Value', description='The key content.

This parameter is required.', example='test_value'),
    }
  ](name='KvList', description='The key-value pairs that you want to configure at a time. The total size can be up to 2 MB (2 × 1000 × 1000).

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchPutKvShrinkRequest {
  kvListShrink?: string(name='KvList', description='The key-value pairs that you want to configure at a time. The total size can be up to 2 MB (2 × 1000 × 1000).

This parameter is required.'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model BatchPutKvResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be written.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that were written.'),
}

model BatchPutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvResponseBody(name='body'),
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys.
 *
 * @param tmpReq BatchPutKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchPutKvResponse
 */
async function batchPutKvWithOptions(tmpReq: BatchPutKvRequest, runtime: Util.RuntimeOptions): BatchPutKvResponse {
  Util.validateModel(tmpReq);
  var request = new BatchPutKvShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.kvList)) {
    request.kvListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kvList, 'KvList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.kvListShrink)) {
    body['KvList'] = request.kvListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchPutKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys.
 *
 * @param request BatchPutKvRequest
 * @return BatchPutKvResponse
 */
async function batchPutKv(request: BatchPutKvRequest): BatchPutKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPutKvWithOptions(request, runtime);
}

model BatchPutKvWithHighCapacityRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  url?: string(name='Url', description='The download URL of the key-value pairs that you want to configure. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchPutKvWithHighCapacityAdvanceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  urlObject?: readable(name='Url', description='The download URL of the key-value pairs that you want to configure. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchPutKvWithHighCapacityResponseBody = {
  failKeys?: [ string ](name='FailKeys', description='The keys that failed to be written.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys', description='The keys that were written.'),
}

model BatchPutKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchPutKvWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	numKv := 10000
 *     	kvList := make([]*BatchPutKvRequestKvList, numKv)
 *     	test_value := strings.Repeat("a", 10*1024)
 *     	for i := 0; i < numKv; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		value := test_value
 *     		kvList[i] = &BatchPutKvRequestKvList{
 *     			Key:   &key,
 *     			Value: &value,
 *     		}
 *     	}
 *     	rawReq := BatchPutKvRequest{
 *     		Namespace: &namespace,
 *     		KvList:    kvList,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchPutKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchPutKvWithHighCapacityResponse
 */
async function batchPutKvWithHighCapacityWithOptions(request: BatchPutKvWithHighCapacityRequest, runtime: Util.RuntimeOptions): BatchPutKvWithHighCapacityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchPutKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
 *     func TestBatchPutKvWithHighCapacity() error {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs at a time.
 *     	namespace := "test_batch_put"
 *     	numKv := 10000
 *     	kvList := make([]*BatchPutKvRequestKvList, numKv)
 *     	test_value := strings.Repeat("a", 10*1024)
 *     	for i := 0; i < numKv; i++ {
 *     		key := fmt.Sprintf("test_key_%d", i)
 *     		value := test_value
 *     		kvList[i] = &BatchPutKvRequestKvList{
 *     			Key:   &key,
 *     			Value: &value,
 *     		}
 *     	}
 *     	rawReq := BatchPutKvRequest{
 *     		Namespace: &namespace,
 *     		KvList:    kvList,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		UrlObject: bytes.NewReader(payload),
 *     	}
 *     	resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request BatchPutKvWithHighCapacityRequest
 * @return BatchPutKvWithHighCapacityResponse
 */
async function batchPutKvWithHighCapacity(request: BatchPutKvWithHighCapacityRequest): BatchPutKvWithHighCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPutKvWithHighCapacityWithOptions(request, runtime);
}

async function batchPutKvWithHighCapacityAdvance(request: BatchPutKvWithHighCapacityAdvanceRequest, runtime: Util.RuntimeOptions): BatchPutKvWithHighCapacityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var batchPutKvWithHighCapacityReq = new BatchPutKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, batchPutKvWithHighCapacityReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    batchPutKvWithHighCapacityReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var batchPutKvWithHighCapacityResp = batchPutKvWithHighCapacityWithOptions(batchPutKvWithHighCapacityReq, runtime);
  return batchPutKvWithHighCapacityResp;
}

model BlockObjectRequest {
  content?: [ string ](name='Content', description='The content to block.

This parameter is required.'),
  extension?: string(name='Extension', description='The blocking period that you can extend. Set the value to 2year.', example='2year'),
  maxage?: int32(name='Maxage', description='The period of time during which the URL is blocked. Unit: seconds. Specify this parameter if Type is set to block.', example='864000'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='BlockObject'),
  type?: string(name='Type', description='The type. Valid values:

*   **block**
*   **unblock**

This parameter is required.', example='block'),
}

model BlockObjectShrinkRequest {
  contentShrink?: string(name='Content', description='The content to block.

This parameter is required.'),
  extension?: string(name='Extension', description='The blocking period that you can extend. Set the value to 2year.', example='2year'),
  maxage?: int32(name='Maxage', description='The period of time during which the URL is blocked. Unit: seconds. Specify this parameter if Type is set to block.', example='864000'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='BlockObject'),
  type?: string(name='Type', description='The type. Valid values:

*   **block**
*   **unblock**

This parameter is required.', example='block'),
}

model BlockObjectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  taskId?: string(name='TaskId', description='The blocking task ID.', example='15940956620'),
}

model BlockObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlockObjectResponseBody(name='body'),
}

/**
 * @summary Blocks URLs.
 *
 * @param tmpReq BlockObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BlockObjectResponse
 */
async function blockObjectWithOptions(tmpReq: BlockObjectRequest, runtime: Util.RuntimeOptions): BlockObjectResponse {
  Util.validateModel(tmpReq);
  var request = new BlockObjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.extension)) {
    query['Extension'] = request.extension;
  }
  if (!Util.isUnset(request.maxage)) {
    query['Maxage'] = request.maxage;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BlockObject',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Blocks URLs.
 *
 * @param request BlockObjectRequest
 * @return BlockObjectResponse
 */
async function blockObject(request: BlockObjectRequest): BlockObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return blockObjectWithOptions(request, runtime);
}

model CheckSiteNameRequest {
  siteName?: string(name='SiteName', description='The website name.

This parameter is required.', example='example.com'),
}

model CheckSiteNameResponseBody = {
  description?: string(name='Description', description='The description of the verification result. Valid values:

*   **success**: The verification is successful.
*   **Site.AlreadyExist**: The website domain name has already been added.
*   **Site.InvalidName**: Invalid website domain name.
*   **Site.SubSiteUnavailable**: Subdomains are not allowed.
*   **Site.InternalError**: An internal error occurs.', example='success'),
  isSubSite?: boolean(name='IsSubSite', description='Indicates whether a subdomain is specified. Valid values:

*   **true**
*   **false**', example='false'),
  messeage?: string(name='Messeage', description='The verification message.'),
  passed?: boolean(name='Passed', description='Indicates whether the verification passed.

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CheckSiteNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteNameResponseBody(name='body'),
}

/**
 * @summary Checks whether a specified website name is available.
 *
 * @param request CheckSiteNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSiteNameResponse
 */
async function checkSiteNameWithOptions(request: CheckSiteNameRequest, runtime: Util.RuntimeOptions): CheckSiteNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSiteName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks whether a specified website name is available.
 *
 * @param request CheckSiteNameRequest
 * @return CheckSiteNameResponse
 */
async function checkSiteName(request: CheckSiteNameRequest): CheckSiteNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSiteNameWithOptions(request, runtime);
}

model CheckSiteProjectNameRequest {
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.

This parameter is required.', example='user_log'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='12312312213212'),
}

model CheckSiteProjectNameResponseBody = {
  check?: boolean(name='Check', description='Indicates whether the task name is valid. Valid values:

*   **true**
*   **false**', example='true'),
  description?: string(name='Description', description='The result description.', example='project name pass the check'),
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.', example='dcdn_waf_userAccount_log'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckSiteProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteProjectNameResponseBody(name='body'),
}

/**
 * @summary Checks the name of a real-time log delivery task.
 *
 * @param request CheckSiteProjectNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSiteProjectNameResponse
 */
async function checkSiteProjectNameWithOptions(request: CheckSiteProjectNameRequest, runtime: Util.RuntimeOptions): CheckSiteProjectNameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSiteProjectName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks the name of a real-time log delivery task.
 *
 * @param request CheckSiteProjectNameRequest
 * @return CheckSiteProjectNameResponse
 */
async function checkSiteProjectName(request: CheckSiteProjectNameRequest): CheckSiteProjectNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSiteProjectNameWithOptions(request, runtime);
}

model CheckUserProjectNameRequest {
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.

This parameter is required.', example='ali-dcdn-log-56'),
}

model CheckUserProjectNameResponseBody = {
  check?: boolean(name='Check', description='Indicates whether the name is valid. Valid values:

*   **true**
*   **false**', example='true'),
  description?: string(name='Description', description='The reason why the name passed or failed the check.', example='project name pass the check'),
  projectName?: string(name='ProjectName', description='The name of the real-time log delivery task.', example='ali-dcdn-log-56'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckUserProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserProjectNameResponseBody(name='body'),
}

/**
 * @summary Checks the name of a real-time log delivery task by account.
 *
 * @param request CheckUserProjectNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckUserProjectNameResponse
 */
async function checkUserProjectNameWithOptions(request: CheckUserProjectNameRequest, runtime: Util.RuntimeOptions): CheckUserProjectNameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUserProjectName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Checks the name of a real-time log delivery task by account.
 *
 * @param request CheckUserProjectNameRequest
 * @return CheckUserProjectNameResponse
 */
async function checkUserProjectName(request: CheckUserProjectNameRequest): CheckUserProjectNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserProjectNameWithOptions(request, runtime);
}

model CommitRoutineStagingCodeRequest {
  codeDescription?: string(name='CodeDescription', description='The description of the code version.', example='description of this code ver'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='CommitRoutineStagingCode'),
}

model CommitRoutineStagingCodeResponseBody = {
  codeVersion?: string(name='CodeVersion', description='The version number of the newly generated code.', example='1710120201067203242'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model CommitRoutineStagingCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommitRoutineStagingCodeResponseBody(name='body'),
}

/**
 * @summary Commits the unstable code in the staging environment to generate an official code version.
 *
 * @param request CommitRoutineStagingCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommitRoutineStagingCodeResponse
 */
async function commitRoutineStagingCodeWithOptions(request: CommitRoutineStagingCodeRequest, runtime: Util.RuntimeOptions): CommitRoutineStagingCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CommitRoutineStagingCode',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Commits the unstable code in the staging environment to generate an official code version.
 *
 * @param request CommitRoutineStagingCodeRequest
 * @return CommitRoutineStagingCodeResponse
 */
async function commitRoutineStagingCode(request: CommitRoutineStagingCodeRequest): CommitRoutineStagingCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitRoutineStagingCodeWithOptions(request, runtime);
}

model CreateClientCertificateRequest {
  CSR?: string(name='CSR', example='-----BEGIN CERTIFICATE REQUEST-----'),
  pkeyType?: string(name='PkeyType', example='RSA'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  validityDays?: long(name='ValidityDays', description='This parameter is required.', example='365'),
}

model CreateClientCertificateResponseBody = {
  CACertificateId?: string(name='CACertificateId', example='babaded901474b9693acf530e0fb1dbb'),
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE-----'),
  commonName?: string(name='CommonName', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
  id?: string(name='Id', example='babaded901474b9693acf530e0fb1d95'),
  issuer?: string(name='Issuer', example='DCDN CA'),
  notAfter?: string(name='NotAfter', example='2024-12-01T02:12:49Z'),
  notBefore?: string(name='NotBefore', example='2023-12-01T02:12:49Z'),
  privateKey?: string(name='PrivateKey', example='-----BEGIN PRIVATE KEY-----'),
  requestId?: string(name='RequestId', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  serialNumber?: string(name='SerialNumber', example='babaded901474b9693acf530e0fb1daa'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', example='SHA256-RSA'),
  status?: string(name='Status', example='active'),
  validityDays?: string(name='ValidityDays', example='365'),
}

model CreateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientCertificateResponseBody(name='body'),
}

/**
 * @summary 创建客户端证书
 *
 * @param request CreateClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClientCertificateResponse
 */
async function createClientCertificateWithOptions(request: CreateClientCertificateRequest, runtime: Util.RuntimeOptions): CreateClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.CSR)) {
    body['CSR'] = request.CSR;
  }
  if (!Util.isUnset(request.pkeyType)) {
    body['PkeyType'] = request.pkeyType;
  }
  if (!Util.isUnset(request.validityDays)) {
    body['ValidityDays'] = request.validityDays;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建客户端证书
 *
 * @param request CreateClientCertificateRequest
 * @return CreateClientCertificateResponse
 */
async function createClientCertificate(request: CreateClientCertificateRequest): CreateClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClientCertificateWithOptions(request, runtime);
}

model CreateCustomScenePolicyRequest {
  endTime?: string(name='EndTime', description='The time when the policy expires.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', description='The policy name.

This parameter is required.', example='test'),
  objects?: string(name='Objects', description='The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).', example='7096621098****'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.

This parameter is required.', example='promotion'),
}

model CreateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', description='The policy name.', example='test'),
  objects?: [ string ](name='Objects', description='The IDs of websites associated.'),
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', description='The name of the policy template.', example='promotion'),
}

model CreateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
 *
 * @param request CreateCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomScenePolicyResponse
 */
async function createCustomScenePolicyWithOptions(request: CreateCustomScenePolicyRequest, runtime: Util.RuntimeOptions): CreateCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.objects)) {
    query['Objects'] = request.objects;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
 *
 * @param request CreateCustomScenePolicyRequest
 * @return CreateCustomScenePolicyResponse
 */
async function createCustomScenePolicy(request: CreateCustomScenePolicyRequest): CreateCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomScenePolicyWithOptions(request, runtime);
}

model CreateEdgeContainerAppRequest {
  healthCheckFailTimes?: int32(name='HealthCheckFailTimes', description='The number of consecutive failed health checks required for an application to be considered as unhealthy. Valid values: 1 to 10. Default value: 5.', example='3'),
  healthCheckHost?: string(name='HealthCheckHost', description='The domain name that is used for health checks. This parameter is empty by default.', example='www.aliyun.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code returned for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval between two consecutive health checks. Unit: seconds. Valid values: **1** to **50**. Default value: **5**.', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The HTTP request method for health checks. Valid values:

*   **HEAD** (default): requests the headers of the resource.
*   **GET**: requests the specified resource and returns both the headers and entity body.', example='HEAD'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The port used for health checks. Valid values: 1 to 65535. Default value: 80.', example='80'),
  healthCheckSuccTimes?: int32(name='HealthCheckSuccTimes', description='The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.', example='2'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds.\\\\
Valid values: **1** to **100**.\\\\
Default value: **3**.', example='5'),
  healthCheckType?: string(name='HealthCheckType', description='The health check type. By default, this parameter is left empty.

Valid values:

*   **l4**: Layer 4 health check.
*   **l7**: Layer 7 health check.', example='l7'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length. Default value: "/".', example='/health_check'),
  name?: string(name='Name', description='The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.

This parameter is required.', example='app-test'),
  remarks?: string(name='Remarks', description='The remarks. This parameter is empty by default.', example='test app'),
  servicePort?: int32(name='ServicePort', description='The server port. Valid values: 1 to 65535.

This parameter is required.', example='80'),
  targetPort?: int32(name='TargetPort', description='The backend port, which is also the service port of the application. Valid values: 1 to 65535.

This parameter is required.', example='80'),
}

model CreateEdgeContainerAppResponseBody = {
  appId?: string(name='AppId', description='The ID of the application that is created.', example='app-880688675783794688'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateEdgeContainerAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEdgeContainerAppResponseBody(name='body'),
}

/**
 * @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
 *
 * @param request CreateEdgeContainerAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEdgeContainerAppResponse
 */
async function createEdgeContainerAppWithOptions(request: CreateEdgeContainerAppRequest, runtime: Util.RuntimeOptions): CreateEdgeContainerAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.healthCheckFailTimes)) {
    body['HealthCheckFailTimes'] = request.healthCheckFailTimes;
  }
  if (!Util.isUnset(request.healthCheckHost)) {
    body['HealthCheckHost'] = request.healthCheckHost;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    body['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    body['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    body['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckPort)) {
    body['HealthCheckPort'] = request.healthCheckPort;
  }
  if (!Util.isUnset(request.healthCheckSuccTimes)) {
    body['HealthCheckSuccTimes'] = request.healthCheckSuccTimes;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    body['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthCheckType)) {
    body['HealthCheckType'] = request.healthCheckType;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    body['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  if (!Util.isUnset(request.servicePort)) {
    body['ServicePort'] = request.servicePort;
  }
  if (!Util.isUnset(request.targetPort)) {
    body['TargetPort'] = request.targetPort;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeContainerApp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
 *
 * @param request CreateEdgeContainerAppRequest
 * @return CreateEdgeContainerAppResponse
 */
async function createEdgeContainerApp(request: CreateEdgeContainerAppRequest): CreateEdgeContainerAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeContainerAppWithOptions(request, runtime);
}

model CreateEdgeContainerAppRecordRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  recordName?: string(name='RecordName', description='The associated domain name.

This parameter is required.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
}

model CreateEdgeContainerAppRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model CreateEdgeContainerAppRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEdgeContainerAppRecordResponseBody(name='body'),
}

/**
 * @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
 *
 * @param request CreateEdgeContainerAppRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEdgeContainerAppRecordResponse
 */
async function createEdgeContainerAppRecordWithOptions(request: CreateEdgeContainerAppRecordRequest, runtime: Util.RuntimeOptions): CreateEdgeContainerAppRecordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeContainerAppRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
 *
 * @param request CreateEdgeContainerAppRecordRequest
 * @return CreateEdgeContainerAppRecordResponse
 */
async function createEdgeContainerAppRecord(request: CreateEdgeContainerAppRecordRequest): CreateEdgeContainerAppRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeContainerAppRecordWithOptions(request, runtime);
}

model CreateEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  containers?: [ 
    {
      ACRImageInfo?: {
        domain?: string(name='Domain', description='The domain name of the Container Registry image.', example='1500.***.net'),
        instanceId?: string(name='InstanceId', description='The ID of the Container Registry instance.', example='xcdn-9axbo****'),
        isEnterpriseRegistry?: boolean(name='IsEnterpriseRegistry', description='Specifies whether the image is an enterprise-level Container Registry image.', example='false'),
        regionId?: string(name='RegionId', description='The regions in which the Container Registry instance resides.', example='cn-shanghai'),
        repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-h1ghghu60ct****'),
        repoName?: string(name='RepoName', description='The name of the image repository.', example='test_71'),
        repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='safeline'),
        tag?: string(name='Tag', description='The tag of the Container Registry image.', example='3.40.2'),
        tagUrl?: string(name='TagUrl', description='The URL of the Container Registry image tag.'),
      }(name='ACRImageInfo', description='The information about the Container Registry image.'),
      args?: string(name='Args', description='The arguments that are passed to the container startup command. Separate the parameters with spaces.', example='-a'),
      command?: string(name='Command', description='The command that is used to start the container. Separate the arguments with spaces.', example='nginx'),
      envVariables?: string(name='EnvVariables', description='The environment variables. Separate the environment variables with commas (,).', example='VITE_APP_TITLE=My App'),
      image?: string(name='Image', description='The address of the image.

This parameter is required.', example='registry-vpc.cn-shenzhen.aliyuncs.com/lihe****h/ea****ts_serv****am:3.**'),
      isACRImage?: boolean(name='IsACRImage', description='Specifies whether the image is a Container Registry image.

This parameter is required.', example='false'),
      name?: string(name='Name', description='The name of the container. The name must be unique in the same container group.

This parameter is required.', example='lxg-demo-er'),
      postStart?: string(name='PostStart', description='The command that is run before the container is started. Separate the arguments with spaces.', example='sh poststart.sh "echo hello world"'),
      preStop?: string(name='PreStop', description='The command that is run before the container is stopped. Separate the arguments with spaces.', example='sh prestop.sh "echo hello world"'),
      probeContent?: {
        command?: string(name='Command', description='The command of the exec type probe.', example='echo ok'),
        failureThreshold?: int32(name='FailureThreshold', description='The number of consecutive failed health checks required for a container to be considered as unhealthy.', example='3'),
        host?: string(name='Host', description='The domain name that is used for health checks.', example='www.rewrite.com'),
        httpHeaders?: string(name='HttpHeaders', description='The request headers that are included in the container health check request.', example='[{\\\\"Content-Type\\\\":\\\\"application/json\\\\"}]'),
        initialDelaySeconds?: int32(name='InitialDelaySeconds', description='The latency for container probe initialization.', example='1'),
        path?: string(name='Path', description='The health check path.', example='/'),
        periodSeconds?: int32(name='PeriodSeconds', description='The interval between container health checks.', example='1'),
        port?: int32(name='Port', description='The health check port.', example='9991'),
        scheme?: string(name='Scheme', description='The protocol that the container health check request uses.', example='http'),
        successThreshold?: int32(name='SuccessThreshold', description='The number of consecutive successful health checks required for a container to be considered as healthy.', example='1'),
        timeoutSeconds?: int32(name='TimeoutSeconds', description='The timeout period of the container health check.', example='1'),
      }(name='ProbeContent', description='The content of the container health probe.

This parameter is required.'),
      probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   exec: the command type.
*   tcpSocket: the TCP probe type.
*   httpGet: the HTTP access type.

This parameter is required.', example='exec'),
      spec?: string(name='Spec', description='The compute specification of the container. Valid values: 1C2G, 2C4G, 2C8G, 4C8G, 4C16G, 8C16G, and 8C32G.

This parameter is required.', example='1C2G'),
      storage?: string(name='Storage', description='The storage capacity. Valid values: 0.5G, 10G, 20G, and 30G.

This parameter is required.', example='0.5G'),
    }
  ](name='Containers', description='The container group to be deployed for this version, which contains information about images.\\\\
The image data contains the image address, startup command, parameters, environment variables, and probe rules. You can specify one or more images. The parameter value is a JSON string.

This parameter is required.', example='[
      {
            "Name": "container1",
            "Image": "image1",
            "Spec": "1C2G",
            "Command": "/bin/sh",
            "Args": "-c hello",
            "ProbeType": "tcpSocket",
            "ProbeContent": "{\\\\"Port\\\\":8080}"
      },
      {
            "Name": "container2",
            "Image": "image2",
            "Spec": "2C4G",
            "ProbeType": "httpGet",
            "ProbeContent": "{\\\\"Path\\\\":\\\\"/\\\\",\\\\"Port\\\\":80,\\\\"InitialDelaySeconds\\\\":10}"
      }
]'),
  name?: string(name='Name', description='The version name, which must be 6 to 128 characters in length.

This parameter is required.', example='verson1'),
  remarks?: string(name='Remarks', description='The description of the version.', example='test app'),
}

model CreateEdgeContainerAppVersionShrinkRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  containersShrink?: string(name='Containers', description='The container group to be deployed for this version, which contains information about images.\\\\
The image data contains the image address, startup command, parameters, environment variables, and probe rules. You can specify one or more images. The parameter value is a JSON string.

This parameter is required.', example='[
      {
            "Name": "container1",
            "Image": "image1",
            "Spec": "1C2G",
            "Command": "/bin/sh",
            "Args": "-c hello",
            "ProbeType": "tcpSocket",
            "ProbeContent": "{\\\\"Port\\\\":8080}"
      },
      {
            "Name": "container2",
            "Image": "image2",
            "Spec": "2C4G",
            "ProbeType": "httpGet",
            "ProbeContent": "{\\\\"Path\\\\":\\\\"/\\\\",\\\\"Port\\\\":80,\\\\"InitialDelaySeconds\\\\":10}"
      }
]'),
  name?: string(name='Name', description='The version name, which must be 6 to 128 characters in length.

This parameter is required.', example='verson1'),
  remarks?: string(name='Remarks', description='The description of the version.', example='test app'),
}

model CreateEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  versionId?: string(name='VersionId', description='The ID of the created version.', example='ver-87962637161651****'),
}

model CreateEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Creates a version for a containerized application. You can iterate the application based on the version.
 *
 * @param tmpReq CreateEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEdgeContainerAppVersionResponse
 */
async function createEdgeContainerAppVersionWithOptions(tmpReq: CreateEdgeContainerAppVersionRequest, runtime: Util.RuntimeOptions): CreateEdgeContainerAppVersionResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEdgeContainerAppVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.containers)) {
    request.containersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.containers, 'Containers', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.containersShrink)) {
    body['Containers'] = request.containersShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a version for a containerized application. You can iterate the application based on the version.
 *
 * @param request CreateEdgeContainerAppVersionRequest
 * @return CreateEdgeContainerAppVersionResponse
 */
async function createEdgeContainerAppVersion(request: CreateEdgeContainerAppVersionRequest): CreateEdgeContainerAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeContainerAppVersionWithOptions(request, runtime);
}

model CreateKvNamespaceRequest {
  description?: string(name='Description', description='The description of the namespace.', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='The name of the namespace.

This parameter is required.', example='test_namespace'),
}

model CreateKvNamespaceResponseBody = {
  description?: string(name='Description', description='The description of the namespace.', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='657717877171818496'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: working as expected.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
}

model CreateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Create a namespace in your Alibaba Cloud account.
 *
 * @param request CreateKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateKvNamespaceResponse
 */
async function createKvNamespaceWithOptions(request: CreateKvNamespaceRequest, runtime: Util.RuntimeOptions): CreateKvNamespaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a namespace in your Alibaba Cloud account.
 *
 * @param request CreateKvNamespaceRequest
 * @return CreateKvNamespaceResponse
 */
async function createKvNamespace(request: CreateKvNamespaceRequest): CreateKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKvNamespaceWithOptions(request, runtime);
}

model CreateListRequest {
  description?: string(name='Description', description='The description of the list that you want to create.', example='a custom list'),
  items?: [ string ](name='Items', description='The items in the list that you want to create.', example='a custom list'),
  kind?: string(name='Kind', description='The type of the list that you want to create.', example='ip'),
  name?: string(name='Name', description='The name of the list that you want to create.

This parameter is required.', example='example'),
}

model CreateListShrinkRequest {
  description?: string(name='Description', description='The description of the list that you want to create.', example='a custom list'),
  itemsShrink?: string(name='Items', description='The items in the list that you want to create.', example='a custom list'),
  kind?: string(name='Kind', description='The type of the list that you want to create.', example='ip'),
  name?: string(name='Name', description='The name of the list that you want to create.

This parameter is required.', example='example'),
}

model CreateListResponseBody = {
  id?: long(name='Id', description='The ID of the custom list.[](~~2850217~~)', example='40000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListResponseBody(name='body'),
}

/**
 * @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
 *
 * @param tmpReq CreateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateListResponse
 */
async function createListWithOptions(tmpReq: CreateListRequest, runtime: Util.RuntimeOptions): CreateListResponse {
  Util.validateModel(tmpReq);
  var request = new CreateListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.items)) {
    request.itemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.items, 'Items', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.itemsShrink)) {
    body['Items'] = request.itemsShrink;
  }
  if (!Util.isUnset(request.kind)) {
    body['Kind'] = request.kind;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
 *
 * @param request CreateListRequest
 * @return CreateListResponse
 */
async function createList(request: CreateListRequest): CreateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createListWithOptions(request, runtime);
}

model CreateOriginPoolRequest {
  enabled?: boolean(name='Enabled'),
  name?: string(name='Name', description='This parameter is required.', example='CreateOriginPool'),
  origins?: [ 
    {
      address?: string(name='Address'),
      authConf?: {
        accessKey?: string(name='AccessKey'),
        authType?: string(name='AuthType'),
        region?: string(name='Region'),
        secretKey?: string(name='SecretKey'),
        version?: string(name='Version'),
      }(name='AuthConf'),
      enabled?: boolean(name='Enabled'),
      header?: any(name='Header'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      weight?: int32(name='Weight'),
    }
  ](name='Origins'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model CreateOriginPoolShrinkRequest {
  enabled?: boolean(name='Enabled'),
  name?: string(name='Name', description='This parameter is required.', example='CreateOriginPool'),
  originsShrink?: string(name='Origins'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model CreateOriginPoolResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOriginPoolResponseBody(name='body'),
}

/**
 * @summary 新增源地址池
 *
 * @param tmpReq CreateOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOriginPoolResponse
 */
async function createOriginPoolWithOptions(tmpReq: CreateOriginPoolRequest, runtime: Util.RuntimeOptions): CreateOriginPoolResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOriginPoolShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.origins)) {
    request.originsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.origins, 'Origins', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.originsShrink)) {
    query['Origins'] = request.originsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增源地址池
 *
 * @param request CreateOriginPoolRequest
 * @return CreateOriginPoolResponse
 */
async function createOriginPool(request: CreateOriginPoolRequest): CreateOriginPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOriginPoolWithOptions(request, runtime);
}

model CreateOriginProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model CreateOriginProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model CreateOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Enables origin protection.
 *
 * @param request CreateOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOriginProtectionResponse
 */
async function createOriginProtectionWithOptions(request: CreateOriginProtectionRequest, runtime: Util.RuntimeOptions): CreateOriginProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables origin protection.
 *
 * @param request CreateOriginProtectionRequest
 * @return CreateOriginProtectionResponse
 */
async function createOriginProtection(request: CreateOriginProtectionRequest): CreateOriginProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOriginProtectionWithOptions(request, runtime);
}

model CreatePageRequest {
  content?: string(name='Content', description='The Base64-encoded page content. Example: "PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4=", which indicates "hello page".', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header. Valid values:

*   text/html
*   application/json

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='The description of the page.', example='a custom deny page'),
  name?: string(name='Name', description='The name of the custom error page.

This parameter is required.', example='example'),
}

model CreatePageResponseBody = {
  id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePageResponseBody(name='body'),
}

/**
 * @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
 *
 * @param request CreatePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePageResponse
 */
async function createPageWithOptions(request: CreatePageRequest, runtime: Util.RuntimeOptions): CreatePageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
 *
 * @param request CreatePageRequest
 * @return CreatePageResponse
 */
async function createPage(request: CreatePageRequest): CreatePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPageWithOptions(request, runtime);
}

model CreateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey', description='The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_cross_account, or when the SourceType is S3 and AuthType is private.', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
    authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:

*   **public**: public read. Select this value when the origin type is OSS or S3 and the origin access is public read.
*   **private**: private read. Select this value when the origin type is S3 and the origin access is private read.
*   **private_same_account**: private read under the same account. Select this value when the origin type is OSS, the origins belong to the same Alibaba Cloud account, and the origins have private read access.
*   **private_cross_account**: private read cross accounts. Select this value when the origin type is OSS, the origins belong to different Alibaba Cloud accounts, and the origins have private read access.', example='private'),
    region?: string(name='Region', description='The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.', example='us-east-1'),
    secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='VIxuvJSA2S03f******kp208dy5w7'),
    version?: string(name='Version', description='The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:

*   **v2**
*   **v4**

If you leave this parameter empty, the default value v4 is used.', example='v4'),
  }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comment of the record. The maximum length is 100 characters.', example='This is a remark.'),
  data?: {
    algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.', example='1'),
    certificate?: string(name='Certificate', description='The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.', example='dGVzdGFkYWxrcw=='),
    fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. This parameter is required when you add a SSHFP record.', example='abcdef1234567890'),
    flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.', example='128'),
    keyTag?: int32(name='KeyTag', description='The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.', example='0'),
    matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
    port?: int32(name='Port', description='The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.', example='0'),
    priority?: int32(name='Priority', description='The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='10'),
    selector?: int32(name='Selector', description='The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
    tag?: string(name='Tag', description='The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record. Valid values:

*   **issue**: indicates that a CA is authorized to issue a certificate for the domain name. This is usually followed by the domain name of the CA.
*   **issuewild**: indicates that a CA is authorized to issue a wildcard certificate (such as \\\\*.example.com) for the domain name.
*   **iodef**: specifies a URI to receive reports about CAA record violations.', example='issue'),
    type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.', example='RSA'),
    usage?: int32(name='Usage', description='The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
    value?: string(name='Value', description='Record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on types of records:

*   **A/AAAA**: the IP address(es). Separate IP addresses with commas (,). You must have at least one IPv4 address.
*   **CNAME**: the target domain name.
*   **NS**: the name servers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
    weight?: int32(name='Weight', description='The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.', example='0'),
  }(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [References](https://www.alibabacloud.com/help/doc-detail/2708761.html) .

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   **follow_hostname**: Follow the host record.
*   **follow_origin_domain**: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='www.example.com'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is used by default.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='30'),
  type?: string(name='Type', description='The type of the DNS record. For example, A/AAAA, TXT, MX, or CNAME.

This parameter is required.', example='A/AAAA'),
}

model CreateRecordShrinkRequest {
  authConfShrink?: string(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comment of the record. The maximum length is 100 characters.', example='This is a remark.'),
  dataShrink?: string(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [References](https://www.alibabacloud.com/help/doc-detail/2708761.html) .

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   **follow_hostname**: Follow the host record.
*   **follow_origin_domain**: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='www.example.com'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is used by default.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='30'),
  type?: string(name='Type', description='The type of the DNS record. For example, A/AAAA, TXT, MX, or CNAME.

This parameter is required.', example='A/AAAA'),
}

model CreateRecordResponseBody = {
  recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model CreateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecordResponseBody(name='body'),
}

/**
 * @summary Creates a DNS record for a specific website.
 *
 * @param tmpReq CreateRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRecordResponse
 */
async function createRecordWithOptions(tmpReq: CreateRecordRequest, runtime: Util.RuntimeOptions): CreateRecordResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authConf)) {
    request.authConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authConf, 'AuthConf', 'json');
  }
  if (!Util.isUnset(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authConfShrink)) {
    query['AuthConf'] = request.authConfShrink;
  }
  if (!Util.isUnset(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!Util.isUnset(request.hostPolicy)) {
    query['HostPolicy'] = request.hostPolicy;
  }
  if (!Util.isUnset(request.proxied)) {
    query['Proxied'] = request.proxied;
  }
  if (!Util.isUnset(request.recordName)) {
    query['RecordName'] = request.recordName;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a DNS record for a specific website.
 *
 * @param request CreateRecordRequest
 * @return CreateRecordResponse
 */
async function createRecord(request: CreateRecordRequest): CreateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecordWithOptions(request, runtime);
}

model CreateRoutineRequest {
  description?: string(name='Description', description='The routine description.', example='the description of this routine'),
  name?: string(name='Name', description='The routine name, which must be unique in the same account.

This parameter is required.', example='test-routine1'),
  specName?: string(name='SpecName', description='The specification of the routine.

This parameter is required.', example='5ms'),
}

model CreateRoutineResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model CreateRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineResponseBody(name='body'),
}

/**
 * @summary Creates a routine.
 *
 * @param request CreateRoutineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoutineResponse
 */
async function createRoutineWithOptions(request: CreateRoutineRequest, runtime: Util.RuntimeOptions): CreateRoutineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.specName)) {
    body['SpecName'] = request.specName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoutine',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a routine.
 *
 * @param request CreateRoutineRequest
 * @return CreateRoutineResponse
 */
async function createRoutine(request: CreateRoutineRequest): CreateRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoutineWithOptions(request, runtime);
}

model CreateRoutineRelatedRecordRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='CreateRoutineRelatedRecord'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='test-record-1.example.com'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='54362329990032'),
}

model CreateRoutineRelatedRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model CreateRoutineRelatedRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineRelatedRecordResponseBody(name='body'),
}

/**
 * @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
 *
 * @param request CreateRoutineRelatedRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoutineRelatedRecordResponse
 */
async function createRoutineRelatedRecordWithOptions(request: CreateRoutineRelatedRecordRequest, runtime: Util.RuntimeOptions): CreateRoutineRelatedRecordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoutineRelatedRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
 *
 * @param request CreateRoutineRelatedRecordRequest
 * @return CreateRoutineRelatedRecordResponse
 */
async function createRoutineRelatedRecord(request: CreateRoutineRelatedRecordRequest): CreateRoutineRelatedRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoutineRelatedRecordWithOptions(request, runtime);
}

model CreateRoutineRelatedRouteRequest {
  byPass?: string(name='ByPass'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='CreateRoutineRelatedRoute'),
  route?: string(name='Route', description='The route.

This parameter is required.', example='*.example.com/path1*'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='54362329990032'),
}

model CreateRoutineRelatedRouteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model CreateRoutineRelatedRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoutineRelatedRouteResponseBody(name='body'),
}

/**
 * @summary Adds a route to map a URL to a routine so that the routine can be triggered to respond to requests destined for the URL.
 *
 * @param request CreateRoutineRelatedRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoutineRelatedRouteResponse
 */
async function createRoutineRelatedRouteWithOptions(request: CreateRoutineRelatedRouteRequest, runtime: Util.RuntimeOptions): CreateRoutineRelatedRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.byPass)) {
    body['ByPass'] = request.byPass;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.route)) {
    body['Route'] = request.route;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoutineRelatedRoute',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a route to map a URL to a routine so that the routine can be triggered to respond to requests destined for the URL.
 *
 * @param request CreateRoutineRelatedRouteRequest
 * @return CreateRoutineRelatedRouteResponse
 */
async function createRoutineRelatedRoute(request: CreateRoutineRelatedRouteRequest): CreateRoutineRelatedRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoutineRelatedRouteWithOptions(request, runtime);
}

model CreateScheduledPreloadExecutionsRequest {
  executions?: [ 
    {
      endTime?: string(name='EndTime', description='The end time of the prefetch plans.', example='2024-06-04T02:02:09Z'),
      interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.

This parameter is required.', example='30'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.

This parameter is required.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plans.', example='2024-06-03T16:00:00Z'),
    }
  ](name='Executions', description='The scheduled prefetch plans to create.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the prefetch task, which is generated by calling the [CreateScheduledPreloadJob](https://help.aliyun.com/document_detail/2850459.html) operation.', example='CreateScheduledPreloadExecutions'),
}

model CreateScheduledPreloadExecutionsShrinkRequest {
  executionsShrink?: string(name='Executions', description='The scheduled prefetch plans to create.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the prefetch task, which is generated by calling the [CreateScheduledPreloadJob](https://help.aliyun.com/document_detail/2850459.html) operation.', example='CreateScheduledPreloadExecutions'),
}

model CreateScheduledPreloadExecutionsResponseBody = {
  failedExecutions?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      endTime?: string(name='EndTime', description='The end time of the prefetch plans.', example='2024-06-03T02:43:35Z'),
      id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
      interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
      jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plans.', example='2024-06-02T02:43:35Z'),
      status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='running'),
    }
  ](name='FailedExecutions', description='The information about prefetch plans that failed to be created.'),
  failedMessages?: [ string ](name='FailedMessages', description='The information about plan failures.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
  successCount?: int32(name='SuccessCount', description='The number of prefetch plans that are created.', example='12'),
  successExecutions?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      endTime?: string(name='EndTime', description='The end time of the prefetch plans.', example='2024-06-03T02:43:35Z'),
      id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
      interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
      jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plans.', example='2024-06-02T02:43:35Z'),
      status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='failed'),
    }
  ](name='SuccessExecutions', description='The information about created prefetch plans.'),
  totalCount?: int32(name='TotalCount', description='The total number of new plans requested.', example='2'),
}

model CreateScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
 * @summary Creates scheduled prefetch plans.
 *
 * @param tmpReq CreateScheduledPreloadExecutionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduledPreloadExecutionsResponse
 */
async function createScheduledPreloadExecutionsWithOptions(tmpReq: CreateScheduledPreloadExecutionsRequest, runtime: Util.RuntimeOptions): CreateScheduledPreloadExecutionsResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduledPreloadExecutionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.executions)) {
    request.executionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executions, 'Executions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.executionsShrink)) {
    body['Executions'] = request.executionsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduledPreloadExecutions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates scheduled prefetch plans.
 *
 * @param request CreateScheduledPreloadExecutionsRequest
 * @return CreateScheduledPreloadExecutionsResponse
 */
async function createScheduledPreloadExecutions(request: CreateScheduledPreloadExecutionsRequest): CreateScheduledPreloadExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduledPreloadExecutionsWithOptions(request, runtime);
}

model CreateScheduledPreloadJobRequest {
  insertWay?: string(name='InsertWay', description='The method to submit URLs to be prefetched.

Valid values:

*   **textBox**
*   **oss**

This parameter is required.', example='oss'),
  name?: string(name='Name', description='The name of the scheduled prefetch task.

This parameter is required.', example='example'),
  ossUrl?: string(name='OssUrl', description='The URL of the OSS object that stores the URLs to be prefetched.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='190007158391808'),
  urlList?: string(name='UrlList', description='The URLs to be prefetched. This parameter is required if you set InsertWay to textBox.', example='http://testurl.com/a.txt
http://testurl.com/b.txt'),
}

model CreateScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  createdAt?: string(name='CreatedAt', description='The time when the task was created.', example='2023-06-05T10:04:20+0800'),
  domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
  errorInfo?: string(name='ErrorInfo', description='The error message. Multiple error messages are separated by commas (,). Valid values:

*   **InvalidUrl**: The URL format is invalid.
*   **InvalidDomain**: The domain name fails the domain ownership verification.
*   **QuotaExcess**: the quota limit has been reached.
*   **OtherErrors**: other errors.', example='InvalidDomain'),
  failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
  id?: string(name='Id', description='The ID of the scheduled prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
  name?: string(name='Name', description='The task name.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
  siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
  taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
  taskType?: string(name='TaskType', description='The task type (refresh or preload).', example='preload'),
  urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
  urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
}

model CreateScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Adds a scheduled prefetch task.
 *
 * @param request CreateScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduledPreloadJobResponse
 */
async function createScheduledPreloadJobWithOptions(request: CreateScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): CreateScheduledPreloadJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.insertWay)) {
    body['InsertWay'] = request.insertWay;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossUrl)) {
    body['OssUrl'] = request.ossUrl;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.urlList)) {
    body['UrlList'] = request.urlList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a scheduled prefetch task.
 *
 * @param request CreateScheduledPreloadJobRequest
 * @return CreateScheduledPreloadJobResponse
 */
async function createScheduledPreloadJob(request: CreateScheduledPreloadJobRequest): CreateScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduledPreloadJobWithOptions(request, runtime);
}

model CreateSiteRequest {
  accessType?: string(name='AccessType', description='The DNS setup. Valid values:

*   **NS**
*   **CNAME**

This parameter is required.', example='NS'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland

This parameter is required.', example='domestic'),
  instanceId?: string(name='InstanceId', description='The instance ID, which can be obtained by calling the [ListUserRatePlanInstances](https://help.aliyun.com/document_detail/2852398.html) operation. Specify at least one of the instance ID and website ID. If you specify both of them, the instance ID is used.

This parameter is required.', example='dbaudit-cn-nwy349jdb03'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If you leave this parameter empty, the system uses the default resource group ID.', example='rg-acfmw4znnok****'),
  siteName?: string(name='SiteName', description='The website name.

This parameter is required.', example='CreateSite'),
}

model CreateSiteResponseBody = {
  nameServerList?: string(name='NameServerList', description='The nameservers assigned by ESA. The values are separated by commas (,). This parameter is returned if you set AccessType to NS. In this case, you must change the nameservers of your domain to the assigned ones. Then, you can verify the domain ownership and activate your website.', example='ns1.example.com,ns2.example.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  verifyCode?: string(name='VerifyCode', description='The verification code for the website. If you set AccessType to CNAME, you need to add a TXT record whose hostname is **_esaauth.[websiteDomainName]** and record value is the value of VerifyCode to the DNS records of your domain. ****Then, you can verify the domain ownership and activate your website.', example='verify_aah9dioasmov****'),
}

model CreateSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteResponseBody(name='body'),
}

/**
 * @summary Adds a website.
 *
 * @description *   Make sure that you have an available plan before you add a website.
 * *   Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
 *
 * @param request CreateSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteResponse
 */
async function createSiteWithOptions(request: CreateSiteRequest, runtime: Util.RuntimeOptions): CreateSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a website.
 *
 * @description *   Make sure that you have an available plan before you add a website.
 * *   Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
 *
 * @param request CreateSiteRequest
 * @return CreateSiteResponse
 */
async function createSite(request: CreateSiteRequest): CreateSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSiteWithOptions(request, runtime);
}

model CreateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies', description='The cookie fields.'),
  requestHeaders?: [ string ](name='RequestHeaders', description='The request header fields.'),
  responseHeaders?: [ string ](name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='11223'),
}

model CreateSiteCustomLogShrinkRequest {
  cookiesShrink?: string(name='Cookies', description='The cookie fields.'),
  requestHeadersShrink?: string(name='RequestHeaders', description='The request header fields.'),
  responseHeadersShrink?: string(name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='11223'),
}

model CreateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='073bd613-6e72-4461-b6bc-19326dfc6a9c'),
}

model CreateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @description *   **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
 * *   **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
 * *   **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
 *
 * @param tmpReq CreateSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteCustomLogResponse
 */
async function createSiteCustomLogWithOptions(tmpReq: CreateSiteCustomLogRequest, runtime: Util.RuntimeOptions): CreateSiteCustomLogResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSiteCustomLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cookies)) {
    request.cookiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cookies, 'Cookies', 'json');
  }
  if (!Util.isUnset(tmpReq.requestHeaders)) {
    request.requestHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaders, 'RequestHeaders', 'json');
  }
  if (!Util.isUnset(tmpReq.responseHeaders)) {
    request.responseHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaders, 'ResponseHeaders', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cookiesShrink)) {
    body['Cookies'] = request.cookiesShrink;
  }
  if (!Util.isUnset(request.requestHeadersShrink)) {
    body['RequestHeaders'] = request.requestHeadersShrink;
  }
  if (!Util.isUnset(request.responseHeadersShrink)) {
    body['ResponseHeaders'] = request.responseHeadersShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @description *   **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
 * *   **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
 * *   **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
 *
 * @param request CreateSiteCustomLogRequest
 * @return CreateSiteCustomLogResponse
 */
async function createSiteCustomLog(request: CreateSiteCustomLogRequest): CreateSiteCustomLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSiteCustomLogWithOptions(request, runtime);
}

model CreateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   oversea: outside the Chinese mainland.

This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

*   sls: Alibaba Cloud Simple Log Service (SLS).
*   http: HTTP server.
*   aws3: Amazon Simple Storage Service (S3).
*   oss: Alibaba Cloud Object Storage Service (OSS).
*   kafka: Kafka.
*   aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0.0'),
  fieldName?: string(name='FieldName', description='The log fields, which are separated by commas (,).

This parameter is required.', example='user_agent,ip_adress,ip_port'),
  httpDelivery?: {
    compress?: string(name='Compress', description='The compression method. By default, data is not compressed.', example='gzip'),
    destUrl?: string(name='DestUrl', description='The address of the HTTP server.', example='http://xxx.aliyun.com/v1/log/upload'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam', description='The custom headers.'),
    logBodyPrefix?: string(name='LogBodyPrefix', description='The prefix of the log delivery package.', example='cdnVersion:1.0'),
    logBodySuffix?: string(name='LogBodySuffix', description='The suffix of the log delivery package.', example='cdnVersion:1.0'),
    maxBatchMB?: long(name='MaxBatchMB', description='The maximum size of data for each delivery. Unit: MB.', example='5'),
    maxBatchSize?: long(name='MaxBatchSize', description='The maximum number of entries for each delivery.', example='1000'),
    maxRetry?: long(name='MaxRetry', description='The maximum number of retries.', example='3'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam', description='The custom query parameters.'),
    standardAuthOn?: boolean(name='StandardAuthOn', description='Specifies whether to use server authentication.', example='true'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime', description='The validity period of the signature.

>  The value must be greater than 0. We recommend that you specify a value that is greater than 300.', example='300'),
      privateKey?: string(name='PrivateKey', description='The private key.', example='***'),
      urlPath?: string(name='UrlPath', description='The URI path for server authentication.', example='v1/log/upload'),
    }(name='StandardAuthParam', description='The authentication configurations.'),
    transformTimeout?: long(name='TransformTimeout', description='The timeout period. Unit: seconds.', example='10'),
  }(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer', description='The load balancing method.', example='kafka.LeastBytes'),
    brokers?: [ string ](name='Brokers', description='The brokers.'),
    compress?: string(name='Compress', description='The compression method.', example='gzip'),
    machanismType?: string(name='MachanismType', description='The encryption method.', example='plain'),
    password?: string(name='Password', description='The password.', example='***'),
    topic?: string(name='Topic', description='The topic.', example='dqc_test2'),
    userAuth?: boolean(name='UserAuth', description='Specifies whether to enable authentication.', example='true'),
    userName?: string(name='UserName', description='The username.', example='xxx'),
  }(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid', description='The ID of your Alibaba Cloud account.', example='1234***'),
    bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='test_rlog'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region in which the bucket is located.', example='cn-beijing'),
  }(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey', description='The access key ID of your Amazon S3 account.', example='LTAIKh***'),
    bucketPath?: string(name='BucketPath', description='The directory in the bucket.', example='logriver-test/log'),
    endpoint?: string(name='Endpoint', description='The endpoint. This parameter is required when the S3Cmpt parameter is set to true.', example='https://s3.oss-cn-hangzhou.aliyuncs.com'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region ID of the service.', example='cn-beijing'),
    s3Cmpt?: boolean(name='S3Cmpt', description='Specifies whether the service is compatible with Amazon S3.', example='true'),
    secretKey?: string(name='SecretKey', description='The secret access key of your Amazon S3 account.', example='LDSIKh***'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='12312312112***'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore', description='The name of the Logstore.', example='accesslog-test'),
    SLSProject?: string(name='SLSProject', description='The name of the SLS project.', example='dcdn-test20240417'),
    SLSRegion?: string(name='SLSRegion', description='The region in which the SLS project resides.', example='cn-hangzhou'),
  }(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='dcdn-test-task'),
}

model CreateSiteDeliveryTaskShrinkRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   oversea: outside the Chinese mainland.

This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

*   sls: Alibaba Cloud Simple Log Service (SLS).
*   http: HTTP server.
*   aws3: Amazon Simple Storage Service (S3).
*   oss: Alibaba Cloud Object Storage Service (OSS).
*   kafka: Kafka.
*   aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0.0'),
  fieldName?: string(name='FieldName', description='The log fields, which are separated by commas (,).

This parameter is required.', example='user_agent,ip_adress,ip_port'),
  httpDeliveryShrink?: string(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDeliveryShrink?: string(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDeliveryShrink?: string(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3DeliveryShrink?: string(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='12312312112***'),
  slsDeliveryShrink?: string(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='dcdn-test-task'),
}

model CreateSiteDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   oversea: outside the Chinese mainland.', example='cn'),
  requestId?: string(name='RequestId', description='The request ID.', example='9358E852-992D-5BC7-8BD7-975CA02773A8'),
  siteId?: string(name='SiteId', description='The website ID.[](~~2850189~~)', example='123456****'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='er-oss'),
}

model CreateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Creates a real-time log delivery task.
 *
 * @param tmpReq CreateSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteDeliveryTaskResponse
 */
async function createSiteDeliveryTaskWithOptions(tmpReq: CreateSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): CreateSiteDeliveryTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSiteDeliveryTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.httpDelivery)) {
    request.httpDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpDelivery, 'HttpDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.kafkaDelivery)) {
    request.kafkaDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kafkaDelivery, 'KafkaDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.ossDelivery)) {
    request.ossDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ossDelivery, 'OssDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.s3Delivery)) {
    request.s3DeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.s3Delivery, 'S3Delivery', 'json');
  }
  if (!Util.isUnset(tmpReq.slsDelivery)) {
    request.slsDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slsDelivery, 'SlsDelivery', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!Util.isUnset(request.deliveryType)) {
    body['DeliveryType'] = request.deliveryType;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.httpDeliveryShrink)) {
    body['HttpDelivery'] = request.httpDeliveryShrink;
  }
  if (!Util.isUnset(request.kafkaDeliveryShrink)) {
    body['KafkaDelivery'] = request.kafkaDeliveryShrink;
  }
  if (!Util.isUnset(request.ossDeliveryShrink)) {
    body['OssDelivery'] = request.ossDeliveryShrink;
  }
  if (!Util.isUnset(request.s3DeliveryShrink)) {
    body['S3Delivery'] = request.s3DeliveryShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.slsDeliveryShrink)) {
    body['SlsDelivery'] = request.slsDeliveryShrink;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a real-time log delivery task.
 *
 * @param request CreateSiteDeliveryTaskRequest
 * @return CreateSiteDeliveryTaskResponse
 */
async function createSiteDeliveryTask(request: CreateSiteDeliveryTaskRequest): CreateSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSiteDeliveryTaskWithOptions(request, runtime);
}

model CreateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.

This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud SLS.
2.  http: HTTP server.
3.  aws3: Amazon S3.
4.  oss: Alibaba Cloud OSS.
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0'),
  fieldName?: string(name='FieldName', description='The log field. If you specify multiple fields, separate them with commas (,).

This parameter is required.', example='user_agent,ip_address,ip_port'),
  httpDelivery?: {
    compress?: string(name='Compress', description='The compression method.', example='gzip'),
    destUrl?: string(name='DestUrl', description='The address of the HTTP server.', example='http://xxx.aliyun.com/v1/log/upload'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam', description='The custom headers.'),
    lastLogSplit?: string(name='LastLogSplit', description='The ending separator.', example='\\\\n'),
    logBodyPrefix?: string(name='LogBodyPrefix', description='The prefix of the log delivery package.', example='cdnVersion:1.0'),
    logBodySuffix?: string(name='LogBodySuffix', description='The suffix of the log delivery package.', example='cdnVersion:1.0'),
    logSplit?: string(name='LogSplit', description='Specifies whether to enable log splitting. Default value: true.', example='true'),
    logSplitWords?: string(name='LogSplitWords', description='The log separator.', example='\\\\n'),
    maxBackoffMS?: long(name='MaxBackoffMS', description='The maximum backoff time. Unit: milliseconds.', example='1000'),
    maxBatchMB?: long(name='MaxBatchMB', description='The maximum size of data for each delivery. Unit: MB.', example='5'),
    maxBatchSize?: long(name='MaxBatchSize', description='The maximum number of entries for each delivery.', example='1000'),
    maxRetry?: long(name='MaxRetry', description='The maximum number of retries.', example='3'),
    minBackoffMS?: long(name='MinBackoffMS', description='The minimum backoff time. Unit: milliseconds.', example='100'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam', description='The custom query parameters.'),
    responseBodyKey?: string(name='ResponseBodyKey', description='The response field key used for success check.', example='err_code'),
    standardAuthOn?: boolean(name='StandardAuthOn', description='Specifies whether to use server authentication.', example='true'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime', description='The validity period of the signature.', example='300'),
      privateKey?: string(name='PrivateKey', description='The private key.', example='xxxx'),
      urlPath?: string(name='UrlPath', description='The URL path.', example='v1/log/upload'),
    }(name='StandardAuthParam', description='The authentication configurations.'),
    successCode?: long(name='SuccessCode', description='The custom code for a success.', example='200'),
    transformTimeout?: long(name='TransformTimeout', description='The timeout period. Unit: seconds.', example='10'),
  }(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer', description='The load balancing method.', example='kafka.LeastBytes'),
    brokers?: [ string ](name='Brokers', description='The brokers.'),
    compress?: string(name='Compress', description='The compression method. By default, data is not compressed.', example='gzip'),
    machanismType?: string(name='MachanismType', description='The encryption method.', example='plain'),
    password?: string(name='Password', description='The password.', example='xxx'),
    topic?: string(name='Topic', description='The topic.', example='dqc_test2'),
    userAuth?: boolean(name='UserAuth', description='Specifies whether to enable authentication.', example='true'),
    userName?: string(name='UserName', description='The username.', example='xxx'),
  }(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid', description='The ID of your Alibaba Cloud account.', example='1234***'),
    bucketName?: string(name='BucketName', description='The name of the OSS bucket.', example='test_rlog'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region in which the bucket is located.', example='cn-shanghai'),
  }(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey', description='The access key ID of your Amazon S3 account.', example='g0f46623ll0g0'),
    bucketPath?: string(name='BucketPath', description='The directory in the bucket.', example='logriver-test/log'),
    endpoint?: string(name='Endpoint', description='The endpoint.', example='https://s3.oss-cn-hangzhou.aliyuncs.com'),
    prefixPath?: string(name='PrefixPath', description='The prefix of the path in which you want to store logs.', example='logriver-test/log'),
    region?: string(name='Region', description='The region ID of the service.', example='cn-shanghai'),
    s3Cmpt?: boolean(name='S3Cmpt', description='Specifies whether the service is compatible with Amazon S3.', example='true'),
    secretKey?: string(name='SecretKey', description='The secret access key of your Amazon S3 account.', example='***'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore', description='The name of the SLS Logstore.', example='accesslog-test'),
    SLSProject?: string(name='SLSProject', description='The name of the SLS project.', example='dcdn-test20240417'),
    SLSRegion?: string(name='SLSRegion', description='The region in which the SLS project resides.', example='cn-hangzhou'),
  }(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The task name.

This parameter is required.', example='test_project'),
}

model CreateUserDeliveryTaskShrinkRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.

This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud SLS.
2.  http: HTTP server.
3.  aws3: Amazon S3.
4.  oss: Alibaba Cloud OSS.
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.

This parameter is required.', example='sls'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0'),
  fieldName?: string(name='FieldName', description='The log field. If you specify multiple fields, separate them with commas (,).

This parameter is required.', example='user_agent,ip_address,ip_port'),
  httpDeliveryShrink?: string(name='HttpDelivery', description='The configurations for delivery to an HTTP server.'),
  kafkaDeliveryShrink?: string(name='KafkaDelivery', description='The configurations for delivery to Kafka.'),
  ossDeliveryShrink?: string(name='OssDelivery', description='The configurations for delivery to OSS.'),
  s3DeliveryShrink?: string(name='S3Delivery', description='The configurations for delivery to Amazon S3 or an S3-compatible service.'),
  slsDeliveryShrink?: string(name='SlsDelivery', description='The configurations for delivery to SLS.'),
  taskName?: string(name='TaskName', description='The task name.

This parameter is required.', example='test_project'),
}

model CreateUserDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
  requestId?: string(name='RequestId', description='The request ID.', example='2CCD40B1-3F20-5FF0-8A67-E3F34B87744F'),
  status?: string(name='Status', description='The status of the delivery task.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='er-http'),
}

model CreateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Creates a log delivery task to ship logs to the specified destination.
 *
 * @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
 * *   **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
 * *   **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
 * *   **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
 * ## [](#)Precautions
 * *   Make sure that you have sufficient permissions to perform delivery tasks.
 * *   If you enable encryption or authentication, properly configure corresponding parameters.
 * *   Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
 * *   Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
 *
 * @param tmpReq CreateUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUserDeliveryTaskResponse
 */
async function createUserDeliveryTaskWithOptions(tmpReq: CreateUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): CreateUserDeliveryTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserDeliveryTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.httpDelivery)) {
    request.httpDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpDelivery, 'HttpDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.kafkaDelivery)) {
    request.kafkaDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kafkaDelivery, 'KafkaDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.ossDelivery)) {
    request.ossDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ossDelivery, 'OssDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.s3Delivery)) {
    request.s3DeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.s3Delivery, 'S3Delivery', 'json');
  }
  if (!Util.isUnset(tmpReq.slsDelivery)) {
    request.slsDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slsDelivery, 'SlsDelivery', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!Util.isUnset(request.deliveryType)) {
    body['DeliveryType'] = request.deliveryType;
  }
  if (!Util.isUnset(request.details)) {
    body['Details'] = request.details;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.httpDeliveryShrink)) {
    body['HttpDelivery'] = request.httpDeliveryShrink;
  }
  if (!Util.isUnset(request.kafkaDeliveryShrink)) {
    body['KafkaDelivery'] = request.kafkaDeliveryShrink;
  }
  if (!Util.isUnset(request.ossDeliveryShrink)) {
    body['OssDelivery'] = request.ossDeliveryShrink;
  }
  if (!Util.isUnset(request.s3DeliveryShrink)) {
    body['S3Delivery'] = request.s3DeliveryShrink;
  }
  if (!Util.isUnset(request.slsDeliveryShrink)) {
    body['SlsDelivery'] = request.slsDeliveryShrink;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a log delivery task to ship logs to the specified destination.
 *
 * @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
 * *   **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
 * *   **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
 * *   **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
 * ## [](#)Precautions
 * *   Make sure that you have sufficient permissions to perform delivery tasks.
 * *   If you enable encryption or authentication, properly configure corresponding parameters.
 * *   Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
 * *   Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
 *
 * @param request CreateUserDeliveryTaskRequest
 * @return CreateUserDeliveryTaskResponse
 */
async function createUserDeliveryTask(request: CreateUserDeliveryTaskRequest): CreateUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserDeliveryTaskWithOptions(request, runtime);
}

model CreateWaitingRoomRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.

This parameter is required.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', description='The domain name.

This parameter is required.', example='example.com'),
      path?: string(name='Path', description='The path.

This parameter is required.', example='/test'),
      subdomain?: string(name='Subdomain', description='The subdomain.

This parameter is required.', example='test.'),
    }
  ](name='HostNameAndPath', description='The hostname and path.

This parameter is required.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='enus'),
  name?: string(name='Name', description='The name of the waiting room.

This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.

This parameter is required.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.

This parameter is required.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429

This parameter is required.', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.

This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.

This parameter is required.', example='300'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom

This parameter is required.', example='default'),
}

model CreateWaitingRoomShrinkRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.

This parameter is required.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  hostNameAndPathShrink?: string(name='HostNameAndPath', description='The hostname and path.

This parameter is required.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='enus'),
  name?: string(name='Name', description='The name of the waiting room.

This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.

This parameter is required.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.

This parameter is required.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429

This parameter is required.', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.

This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.

This parameter is required.', example='300'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom

This parameter is required.', example='default'),
}

model CreateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomResponseBody(name='body'),
}

/**
 * @summary Creates a waiting room for a website.
 *
 * @param tmpReq CreateWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomResponse
 */
async function createWaitingRoomWithOptions(tmpReq: CreateWaitingRoomRequest, runtime: Util.RuntimeOptions): CreateWaitingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWaitingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hostNameAndPath)) {
    request.hostNameAndPathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostNameAndPath, 'HostNameAndPath', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cookieName)) {
    query['CookieName'] = request.cookieName;
  }
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.hostNameAndPathShrink)) {
    query['HostNameAndPath'] = request.hostNameAndPathShrink;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.queueAllEnable)) {
    query['QueueAllEnable'] = request.queueAllEnable;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a waiting room for a website.
 *
 * @param request CreateWaitingRoomRequest
 * @return CreateWaitingRoomResponse
 */
async function createWaitingRoom(request: CreateWaitingRoomRequest): CreateWaitingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingRoomWithOptions(request, runtime);
}

model CreateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  endTime?: string(name='EndTime', description='The end time of the event. This value is a UNIX timestamp.

This parameter is required.', example='1719849600'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
  name?: string(name='Name', description='The name of the waiting room event.

This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.

This parameter is required.', example='10'),
  preQueueEnable?: string(name='PreQueueEnable', description='Specifies whether to enable pre-queuing.

*   on
*   off', example='on'),
  preQueueStartTime?: string(name='PreQueueStartTime', description='The start time for pre-queuing.', example='1719763200'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.

This parameter is required.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429

This parameter is required.', example='202'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', description='Specifies whether to enable random queuing.

*   on
*   off', example='on'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.

This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='The start time of the event. This value is a UNIX timestamp.

This parameter is required.', example='1719763200'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.

This parameter is required.', example='100'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.', example='6a51d5bc6460887abd1291dc7d4db28b'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom

This parameter is required.', example='default'),
}

model CreateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model CreateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary Creates a waiting room event.
 *
 * @param request CreateWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomEventResponse
 */
async function createWaitingRoomEventWithOptions(request: CreateWaitingRoomEventRequest, runtime: Util.RuntimeOptions): CreateWaitingRoomEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.preQueueEnable)) {
    query['PreQueueEnable'] = request.preQueueEnable;
  }
  if (!Util.isUnset(request.preQueueStartTime)) {
    query['PreQueueStartTime'] = request.preQueueStartTime;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.randomPreQueueEnable)) {
    query['RandomPreQueueEnable'] = request.randomPreQueueEnable;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a waiting room event.
 *
 * @param request CreateWaitingRoomEventRequest
 * @return CreateWaitingRoomEventResponse
 */
async function createWaitingRoomEvent(request: CreateWaitingRoomEventRequest): CreateWaitingRoomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingRoomEventWithOptions(request, runtime);
}

model CreateWaitingRoomRuleRequest {
  rule?: string(name='Rule', description='The rule content, which is a policy or conditional expression.

This parameter is required.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Specifies whether to enable the rule. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  ruleName?: string(name='RuleName', description='The rule name.

This parameter is required.', example='waitingroom_example'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room to be bypassed.

This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4'),
}

model CreateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model CreateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary Creates a waiting room bypass rule.
 *
 * @param request CreateWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomRuleResponse
 */
async function createWaitingRoomRuleWithOptions(request: CreateWaitingRoomRuleRequest, runtime: Util.RuntimeOptions): CreateWaitingRoomRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a waiting room bypass rule.
 *
 * @param request CreateWaitingRoomRuleRequest
 * @return CreateWaitingRoomRuleResponse
 */
async function createWaitingRoomRule(request: CreateWaitingRoomRuleRequest): CreateWaitingRoomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingRoomRuleWithOptions(request, runtime);
}

model DeleteCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaded901474b9693acf530e0fb1d95'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890123'),
}

model DeleteCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='babaded901474b9693acf530e0fb1d95'),
  requestId?: string(name='RequestId', description='The request ID.', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCertificateResponseBody(name='body'),
}

/**
 * @summary Deletes a certificate for a website.
 *
 * @param request DeleteCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCertificateResponse
 */
async function deleteCertificateWithOptions(request: DeleteCertificateRequest, runtime: Util.RuntimeOptions): DeleteCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a certificate for a website.
 *
 * @param request DeleteCertificateRequest
 * @return DeleteCertificateResponse
 */
async function deleteCertificate(request: DeleteCertificateRequest): DeleteCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCertificateWithOptions(request, runtime);
}

model DeleteClientCaCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model DeleteClientCaCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model DeleteClientCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientCaCertificateResponseBody(name='body'),
}

/**
 * @summary Deletes a client CA certificate.
 *
 * @param request DeleteClientCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteClientCaCertificateResponse
 */
async function deleteClientCaCertificateWithOptions(request: DeleteClientCaCertificateRequest, runtime: Util.RuntimeOptions): DeleteClientCaCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a client CA certificate.
 *
 * @param request DeleteClientCaCertificateRequest
 * @return DeleteClientCaCertificateResponse
 */
async function deleteClientCaCertificate(request: DeleteClientCaCertificateRequest): DeleteClientCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientCaCertificateWithOptions(request, runtime);
}

model DeleteClientCertificateRequest {
  id?: string(name='Id', description='This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model DeleteClientCertificateResponseBody = {
  id?: string(name='Id', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
}

model DeleteClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientCertificateResponseBody(name='body'),
}

/**
 * @summary 删除客户端证书
 *
 * @param request DeleteClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteClientCertificateResponse
 */
async function deleteClientCertificateWithOptions(request: DeleteClientCertificateRequest, runtime: Util.RuntimeOptions): DeleteClientCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除客户端证书
 *
 * @param request DeleteClientCertificateRequest
 * @return DeleteClientCertificateResponse
 */
async function deleteClientCertificate(request: DeleteClientCertificateRequest): DeleteClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientCertificateWithOptions(request, runtime);
}

model DeleteCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='1'),
}

model DeleteCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='5CC228B4-7A67-4016-9C9F-4A4133494A91'),
}

model DeleteCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Deletes a scenario-specific custom policy.
 *
 * @param request DeleteCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomScenePolicyResponse
 */
async function deleteCustomScenePolicyWithOptions(request: DeleteCustomScenePolicyRequest, runtime: Util.RuntimeOptions): DeleteCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a scenario-specific custom policy.
 *
 * @param request DeleteCustomScenePolicyRequest
 * @return DeleteCustomScenePolicyResponse
 */
async function deleteCustomScenePolicy(request: DeleteCustomScenePolicyRequest): DeleteCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomScenePolicyWithOptions(request, runtime);
}

model DeleteEdgeContainerAppRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-1232321454***'),
}

model DeleteEdgeContainerAppResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  state?: string(name='State', description='Specifies whether the deletion is successful.', example='ok'),
}

model DeleteEdgeContainerAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEdgeContainerAppResponseBody(name='body'),
}

/**
 * @summary Deletes a containerized application.
 *
 * @param request DeleteEdgeContainerAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEdgeContainerAppResponse
 */
async function deleteEdgeContainerAppWithOptions(request: DeleteEdgeContainerAppRequest, runtime: Util.RuntimeOptions): DeleteEdgeContainerAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeContainerApp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a containerized application.
 *
 * @param request DeleteEdgeContainerAppRequest
 * @return DeleteEdgeContainerAppResponse
 */
async function deleteEdgeContainerApp(request: DeleteEdgeContainerAppRequest): DeleteEdgeContainerAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeContainerAppWithOptions(request, runtime);
}

model DeleteEdgeContainerAppRecordRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  recordName?: string(name='RecordName', description='The associated domain name.

This parameter is required.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
}

model DeleteEdgeContainerAppRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteEdgeContainerAppRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEdgeContainerAppRecordResponseBody(name='body'),
}

/**
 * @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
 *
 * @param request DeleteEdgeContainerAppRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEdgeContainerAppRecordResponse
 */
async function deleteEdgeContainerAppRecordWithOptions(request: DeleteEdgeContainerAppRecordRequest, runtime: Util.RuntimeOptions): DeleteEdgeContainerAppRecordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeContainerAppRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
 *
 * @param request DeleteEdgeContainerAppRecordRequest
 * @return DeleteEdgeContainerAppRecordResponse
 */
async function deleteEdgeContainerAppRecord(request: DeleteEdgeContainerAppRecordRequest): DeleteEdgeContainerAppRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeContainerAppRecordWithOptions(request, runtime);
}

model DeleteEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-96253477062511****'),
  versionId?: string(name='VersionId', description='The ID of the version that you want to delete. To obtain the version ID, call the [ListEdgeContainerAppVersions](~~ListEdgeContainerAppVersions~~) operation.

This parameter is required.', example='ver-89884764010378****'),
}

model DeleteEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='b021e538-9dde-46ed-a1f2-9469da8f3e77'),
}

model DeleteEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Deletes a version of a containerized application.
 *
 * @param request DeleteEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEdgeContainerAppVersionResponse
 */
async function deleteEdgeContainerAppVersionWithOptions(request: DeleteEdgeContainerAppVersionRequest, runtime: Util.RuntimeOptions): DeleteEdgeContainerAppVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a version of a containerized application.
 *
 * @param request DeleteEdgeContainerAppVersionRequest
 * @return DeleteEdgeContainerAppVersionResponse
 */
async function deleteEdgeContainerAppVersion(request: DeleteEdgeContainerAppVersionRequest): DeleteEdgeContainerAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeContainerAppVersionWithOptions(request, runtime);
}

model DeleteKvRequest {
  key?: string(name='Key', description='The name of the key that you want to delete.

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model DeleteKvResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvResponseBody(name='body'),
}

/**
 * @summary Deletes a key-value pair from a namespace.
 *
 * @param request DeleteKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKvResponse
 */
async function deleteKvWithOptions(request: DeleteKvRequest, runtime: Util.RuntimeOptions): DeleteKvResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a key-value pair from a namespace.
 *
 * @param request DeleteKvRequest
 * @return DeleteKvResponse
 */
async function deleteKv(request: DeleteKvRequest): DeleteKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKvWithOptions(request, runtime);
}

model DeleteKvNamespaceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model DeleteKvNamespaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Deletes a namespace from an Alibaba Cloud account.
 *
 * @param request DeleteKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKvNamespaceResponse
 */
async function deleteKvNamespaceWithOptions(request: DeleteKvNamespaceRequest, runtime: Util.RuntimeOptions): DeleteKvNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a namespace from an Alibaba Cloud account.
 *
 * @param request DeleteKvNamespaceRequest
 * @return DeleteKvNamespaceResponse
 */
async function deleteKvNamespace(request: DeleteKvNamespaceRequest): DeleteKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKvNamespaceWithOptions(request, runtime);
}

model DeleteListRequest {
  id?: long(name='Id', description='The ID of the custom list, which can be obtained by calling the [ListLists](https://help.aliyun.com/document_detail/2850217.html) operation.

This parameter is required.', example='40000001'),
}

model DeleteListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListResponseBody(name='body'),
}

/**
 * @summary Deletes a custom list that is no longer needed.
 *
 * @param request DeleteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteListResponse
 */
async function deleteListWithOptions(request: DeleteListRequest, runtime: Util.RuntimeOptions): DeleteListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom list that is no longer needed.
 *
 * @param request DeleteListRequest
 * @return DeleteListResponse
 */
async function deleteList(request: DeleteListRequest): DeleteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteListWithOptions(request, runtime);
}

model DeleteOriginPoolRequest {
  id?: long(name='Id', description='This parameter is required.', example='DeleteOriginPool'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model DeleteOriginPoolResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginPoolResponseBody(name='body'),
}

/**
 * @summary 删除源地址池
 *
 * @param request DeleteOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginPoolResponse
 */
async function deleteOriginPoolWithOptions(request: DeleteOriginPoolRequest, runtime: Util.RuntimeOptions): DeleteOriginPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除源地址池
 *
 * @param request DeleteOriginPoolRequest
 * @return DeleteOriginPoolResponse
 */
async function deleteOriginPool(request: DeleteOriginPoolRequest): DeleteOriginPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOriginPoolWithOptions(request, runtime);
}

model DeleteOriginProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DeleteOriginProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model DeleteOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Disables origin protection.
 *
 * @param request DeleteOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOriginProtectionResponse
 */
async function deleteOriginProtectionWithOptions(request: DeleteOriginProtectionRequest, runtime: Util.RuntimeOptions): DeleteOriginProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables origin protection.
 *
 * @param request DeleteOriginProtectionRequest
 * @return DeleteOriginProtectionResponse
 */
async function deleteOriginProtection(request: DeleteOriginProtectionRequest): DeleteOriginProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOriginProtectionWithOptions(request, runtime);
}

model DeletePageRequest {
  id?: long(name='Id', description='The ID of the custom error page, which can be obtained by calling the [ListPages](https://help.aliyun.com/document_detail/2850223.html) operation.

This parameter is required.', example='50000001'),
}

model DeletePageResponseBody = {
  id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeletePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePageResponseBody(name='body'),
}

/**
 * @summary Deletes a custom error page that is no longer needed.
 *
 * @param request DeletePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePageResponse
 */
async function deletePageWithOptions(request: DeletePageRequest, runtime: Util.RuntimeOptions): DeletePageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom error page that is no longer needed.
 *
 * @param request DeletePageRequest
 * @return DeletePageResponse
 */
async function deletePage(request: DeletePageRequest): DeletePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePageWithOptions(request, runtime);
}

model DeleteRecordRequest {
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
}

model DeleteRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRecordResponseBody(name='body'),
}

/**
 * @summary Deletes a DNS record of a website based on the specified RecordId.
 *
 * @param request DeleteRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRecordResponse
 */
async function deleteRecordWithOptions(request: DeleteRecordRequest, runtime: Util.RuntimeOptions): DeleteRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a DNS record of a website based on the specified RecordId.
 *
 * @param request DeleteRecordRequest
 * @return DeleteRecordResponse
 */
async function deleteRecord(request: DeleteRecordRequest): DeleteRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordWithOptions(request, runtime);
}

model DeleteRoutineRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='test-routine1'),
}

model DeleteRoutineResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model DeleteRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineResponseBody(name='body'),
}

/**
 * @summary Deletes a routine in Edge Routine.
 *
 * @param request DeleteRoutineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineResponse
 */
async function deleteRoutineWithOptions(request: DeleteRoutineRequest, runtime: Util.RuntimeOptions): DeleteRoutineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutine',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a routine in Edge Routine.
 *
 * @param request DeleteRoutineRequest
 * @return DeleteRoutineResponse
 */
async function deleteRoutine(request: DeleteRoutineRequest): DeleteRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineWithOptions(request, runtime);
}

model DeleteRoutineCodeVersionRequest {
  codeVersion?: string(name='CodeVersion', description='The code version.

This parameter is required.', example='1710120201067203242'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='test-routine1'),
}

model DeleteRoutineCodeVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model DeleteRoutineCodeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineCodeVersionResponseBody(name='body'),
}

/**
 * @summary Deletes a code version of a routine.
 *
 * @param request DeleteRoutineCodeVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineCodeVersionResponse
 */
async function deleteRoutineCodeVersionWithOptions(request: DeleteRoutineCodeVersionRequest, runtime: Util.RuntimeOptions): DeleteRoutineCodeVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.codeVersion)) {
    body['CodeVersion'] = request.codeVersion;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutineCodeVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a code version of a routine.
 *
 * @param request DeleteRoutineCodeVersionRequest
 * @return DeleteRoutineCodeVersionResponse
 */
async function deleteRoutineCodeVersion(request: DeleteRoutineCodeVersionRequest): DeleteRoutineCodeVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineCodeVersionWithOptions(request, runtime);
}

model DeleteRoutineRelatedRecordRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='DeleteRoutineRelatedRecord'),
  recordId?: long(name='RecordId', description='The record ID.

This parameter is required.', example='12345'),
  recordName?: string(name='RecordName', description='The record name.

This parameter is required.', example='test-xxx.example.com'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='12345'),
}

model DeleteRoutineRelatedRecordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.

*   OK
*   Fail', example='OK'),
}

model DeleteRoutineRelatedRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineRelatedRecordResponseBody(name='body'),
}

/**
 * @summary Deletes a record that is associated with a routine.
 *
 * @param request DeleteRoutineRelatedRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineRelatedRecordResponse
 */
async function deleteRoutineRelatedRecordWithOptions(request: DeleteRoutineRelatedRecordRequest, runtime: Util.RuntimeOptions): DeleteRoutineRelatedRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.recordId)) {
    body['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.recordName)) {
    body['RecordName'] = request.recordName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutineRelatedRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a record that is associated with a routine.
 *
 * @param request DeleteRoutineRelatedRecordRequest
 * @return DeleteRoutineRelatedRecordResponse
 */
async function deleteRoutineRelatedRecord(request: DeleteRoutineRelatedRecordRequest): DeleteRoutineRelatedRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineRelatedRecordWithOptions(request, runtime);
}

model DeleteRoutineRelatedRouteRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='DeleteRoutineRelatedRoute'),
  route?: string(name='Route', description='The route URL.

This parameter is required.', example='*.example.com/path1*'),
  routeId?: string(name='RouteId', description='The route ID.

This parameter is required.', example='0c3b82a3d1524e9f750da11d0cc0be0a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='54362329990032'),
}

model DeleteRoutineRelatedRouteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  status?: string(name='Status', description='Indicates whether the operation is successful.', example='OK'),
}

model DeleteRoutineRelatedRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoutineRelatedRouteResponseBody(name='body'),
}

/**
 * @summary Deletes a route that is associated with a routine.
 *
 * @param request DeleteRoutineRelatedRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoutineRelatedRouteResponse
 */
async function deleteRoutineRelatedRouteWithOptions(request: DeleteRoutineRelatedRouteRequest, runtime: Util.RuntimeOptions): DeleteRoutineRelatedRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.route)) {
    body['Route'] = request.route;
  }
  if (!Util.isUnset(request.routeId)) {
    body['RouteId'] = request.routeId;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutineRelatedRoute',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a route that is associated with a routine.
 *
 * @param request DeleteRoutineRelatedRouteRequest
 * @return DeleteRoutineRelatedRouteResponse
 */
async function deleteRoutineRelatedRoute(request: DeleteRoutineRelatedRouteRequest): DeleteRoutineRelatedRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineRelatedRouteWithOptions(request, runtime);
}

model DeleteScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='DeleteScheduledPreloadExecution'),
}

model DeleteScheduledPreloadExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Deletes a scheduled prefetch plan based on the plan ID.
 *
 * @param request DeleteScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScheduledPreloadExecutionResponse
 */
async function deleteScheduledPreloadExecutionWithOptions(request: DeleteScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): DeleteScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a scheduled prefetch plan based on the plan ID.
 *
 * @param request DeleteScheduledPreloadExecutionRequest
 * @return DeleteScheduledPreloadExecutionResponse
 */
async function deleteScheduledPreloadExecution(request: DeleteScheduledPreloadExecutionRequest): DeleteScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduledPreloadExecutionWithOptions(request, runtime);
}

model DeleteScheduledPreloadJobRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.

This parameter is required.', example='DeleteScheduledPreloadJob'),
}

model DeleteScheduledPreloadJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model DeleteScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Deletes a specified scheduled prefetch task based on the task ID.
 *
 * @param request DeleteScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScheduledPreloadJobResponse
 */
async function deleteScheduledPreloadJobWithOptions(request: DeleteScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): DeleteScheduledPreloadJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a specified scheduled prefetch task based on the task ID.
 *
 * @param request DeleteScheduledPreloadJobRequest
 * @return DeleteScheduledPreloadJobResponse
 */
async function deleteScheduledPreloadJob(request: DeleteScheduledPreloadJobRequest): DeleteScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduledPreloadJobWithOptions(request, runtime);
}

model DeleteSiteRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1234567890123'),
}

model DeleteSiteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model DeleteSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteResponseBody(name='body'),
}

/**
 * @summary Deletes a website based on the specified website ID.
 *
 * @param request DeleteSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteResponse
 */
async function deleteSiteWithOptions(request: DeleteSiteRequest, runtime: Util.RuntimeOptions): DeleteSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a website based on the specified website ID.
 *
 * @param request DeleteSiteRequest
 * @return DeleteSiteResponse
 */
async function deleteSite(request: DeleteSiteRequest): DeleteSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSiteWithOptions(request, runtime);
}

model DeleteSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456******'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model DeleteSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a real-time log delivery task.
 *
 * @param request DeleteSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteDeliveryTaskResponse
 */
async function deleteSiteDeliveryTaskWithOptions(request: DeleteSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): DeleteSiteDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a real-time log delivery task.
 *
 * @param request DeleteSiteDeliveryTaskRequest
 * @return DeleteSiteDeliveryTaskResponse
 */
async function deleteSiteDeliveryTask(request: DeleteSiteDeliveryTaskRequest): DeleteSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSiteDeliveryTaskWithOptions(request, runtime);
}

model DeleteUserDeliveryTaskRequest {
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test-project'),
}

model DeleteUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='952ea16b-1f05-4a76-bb32-420282d8aeb9'),
}

model DeleteUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a log delivery task from your Alibaba Cloud account.
 *
 * @description ******> 
 * *   Deleted tasks cannot be restored. Proceed with caution.
 * *   To call this operation, you must have an account that has the required permissions.
 * *   The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
 *
 * @param request DeleteUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUserDeliveryTaskResponse
 */
async function deleteUserDeliveryTaskWithOptions(request: DeleteUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): DeleteUserDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a log delivery task from your Alibaba Cloud account.
 *
 * @description ******> 
 * *   Deleted tasks cannot be restored. Proceed with caution.
 * *   To call this operation, you must have an account that has the required permissions.
 * *   The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
 *
 * @param request DeleteUserDeliveryTaskRequest
 * @return DeleteUserDeliveryTaskResponse
 */
async function deleteUserDeliveryTask(request: DeleteUserDeliveryTaskRequest): DeleteUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserDeliveryTaskWithOptions(request, runtime);
}

model DeleteWaitingRoomRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The waiting room ID.

This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4'),
}

model DeleteWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model DeleteWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomResponseBody(name='body'),
}

/**
 * @summary Deletes a waiting room.
 *
 * @param request DeleteWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomResponse
 */
async function deleteWaitingRoomWithOptions(request: DeleteWaitingRoomRequest, runtime: Util.RuntimeOptions): DeleteWaitingRoomResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a waiting room.
 *
 * @param request DeleteWaitingRoomRequest
 * @return DeleteWaitingRoomResponse
 */
async function deleteWaitingRoom(request: DeleteWaitingRoomRequest): DeleteWaitingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingRoomWithOptions(request, runtime);
}

model DeleteWaitingRoomEventRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', description='The ID of the waiting room event.', example='302909890***'),
}

model DeleteWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary Deletes a waiting room event.
 *
 * @param request DeleteWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomEventResponse
 */
async function deleteWaitingRoomEventWithOptions(request: DeleteWaitingRoomEventRequest, runtime: Util.RuntimeOptions): DeleteWaitingRoomEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomEventId)) {
    query['WaitingRoomEventId'] = request.waitingRoomEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a waiting room event.
 *
 * @param request DeleteWaitingRoomEventRequest
 * @return DeleteWaitingRoomEventResponse
 */
async function deleteWaitingRoomEvent(request: DeleteWaitingRoomEventRequest): DeleteWaitingRoomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingRoomEventWithOptions(request, runtime);
}

model DeleteWaitingRoomRuleRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='The ID of the waiting room bypass rule.', example='3672886****'),
}

model DeleteWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a waiting room bypass rule.
 *
 * @param request DeleteWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomRuleResponse
 */
async function deleteWaitingRoomRuleWithOptions(request: DeleteWaitingRoomRuleRequest, runtime: Util.RuntimeOptions): DeleteWaitingRoomRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomRuleId)) {
    query['WaitingRoomRuleId'] = request.waitingRoomRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a waiting room bypass rule.
 *
 * @param request DeleteWaitingRoomRuleRequest
 * @return DeleteWaitingRoomRuleResponse
 */
async function deleteWaitingRoomRule(request: DeleteWaitingRoomRuleRequest): DeleteWaitingRoomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingRoomRuleWithOptions(request, runtime);
}

model DescribeCustomScenePoliciesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100000.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Valid values: 5, 10, and 20.', example='10'),
  policyId?: long(name='PolicyId', description='The ID of the policy, which can be obtained by calling the [ListWafRulesets](https://help.aliyun.com/document_detail/2850233.html) operation.', example='1234****'),
}

model DescribeCustomScenePoliciesResponseBody = {
  dataModule?: [ 
    {
      endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-06T16:00:00Z'),
      name?: string(name='Name', description='The name of the scenario-specific policy.', example='test'),
      objects?: [ string ](name='Objects', description='The IDs of websites that are associated with the policy.'),
      policyId?: long(name='PolicyId', description='The policy ID.', example='1234****'),
      startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-04T16:00:00Z'),
      status?: string(name='Status', description='The status of the policy. Valid values:

*   **Disabled**
*   **Pending**
*   **Running**
*   **Expired**', example='Expired'),
      template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.', example='promotion'),
    }
  ](name='DataModule', description='The scenario-specific policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  quota?: int32(name='Quota', description='The policy quota.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCustomScenePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomScenePoliciesResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a scenario-specific policy.
 *
 * @param request DescribeCustomScenePoliciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCustomScenePoliciesResponse
 */
async function describeCustomScenePoliciesWithOptions(request: DescribeCustomScenePoliciesRequest, runtime: Util.RuntimeOptions): DescribeCustomScenePoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomScenePolicies',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a scenario-specific policy.
 *
 * @param request DescribeCustomScenePoliciesRequest
 * @return DescribeCustomScenePoliciesResponse
 */
async function describeCustomScenePolicies(request: DescribeCustomScenePoliciesRequest): DescribeCustomScenePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomScenePoliciesWithOptions(request, runtime);
}

model DescribeDDoSAllEventListRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. The maximum time range is 31 days.

If you do not configure this parameter, the current time is used as the end of the time range to query.', example='2023-02-22T15:59:59Z'),
  eventType?: string(name='EventType', description='The type of DDoS attacks to query. Valid values:

*   **web-cc**: web resource exhaustion attacks.
*   **cc**: connection flood attacks.
*   **traffic**: volumetric attacks.

Default value: web-cc.', example='web-cc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: 5, 10, and 20.', example='10'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2023-02-12T15:00:00Z'),
}

model DescribeDDoSAllEventListResponseBody = {
  dataList?: [ 
    {
      bps?: long(name='Bps', description='The peak of volumetric attacks. Unit: bit/s.', example='800'),
      coverage?: string(name='Coverage'),
      cps?: long(name='Cps', description='The peak of connection flood attacks. Unit: connections per seconds (CPS).', example='50'),
      endTime?: string(name='EndTime', description='The time when the DDoS attack ends.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-02-12T15:59:59Z'),
      eventId?: string(name='EventId', description='The attack event ID.', example='web-cc_1'),
      eventResult?: string(name='EventResult'),
      eventType?: string(name='EventType', description='The type of DDoS attacks that was queried. Valid values:

*   **web-cc**: web resource exhaustion attacks.
*   **cc**: connection flood attacks.
*   **traffic**: volumetric attacks.', example='web-cc'),
      pps?: long(name='Pps', description='The peak of volumetric attacks. Unit: packets per second (PPS).', example='12000'),
      qps?: long(name='Qps', description='The peak QPS of web resource exhaustion attacks.', example='7692'),
      startTime?: string(name='StartTime', description='The time when the DDoS attack starts.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-02-12T15:00:00Z'),
      target?: string(name='Target', description='The attack target.', example='example.com'),
      targetId?: string(name='TargetId', description='The ID of the web resource exhaustion attack target.', example='000000000155****'),
    }
  ](name='DataList', description='The DDoS attack events.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='D73A4243-CFBD-5110-876F-09237E77ECBD'),
  siteId?: long(name='SiteId', description='The website ID.', example='7096621098****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDDoSAllEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSAllEventListResponseBody(name='body'),
}

/**
 * @summary Queries DDoS attack events.
 *
 * @param request DescribeDDoSAllEventListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSAllEventListResponse
 */
async function describeDDoSAllEventListWithOptions(request: DescribeDDoSAllEventListRequest, runtime: Util.RuntimeOptions): DescribeDDoSAllEventListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSAllEventList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries DDoS attack events.
 *
 * @param request DescribeDDoSAllEventListRequest
 * @return DescribeDDoSAllEventListResponse
 */
async function describeDDoSAllEventList(request: DescribeDDoSAllEventListRequest): DescribeDDoSAllEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSAllEventListWithOptions(request, runtime);
}

model DescribeDDoSBpsListRequest {
  coverage?: string(name='Coverage'),
  endTime?: string(name='EndTime', example='2023-05-18T06:19:42Z'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='70966210986912'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2023-05-14T17:00:00Z'),
}

model DescribeDDoSBpsListResponseBody = {
  dataInterval?: int32(name='DataInterval', example='300'),
  dataModule?: [ 
    {
      attackBps?: long(name='AttackBps', example='9000000000'),
      attackPps?: long(name='AttackPps', example='9000000'),
      normalBps?: long(name='NormalBps', example='1000000000'),
      normalPps?: long(name='NormalPps', example='1000000'),
      timeStamp?: string(name='TimeStamp', example='2023-05-14T17:00:00Z'),
      totalBps?: long(name='TotalBps', example='10000000000'),
      totalPps?: long(name='TotalPps', example='100000000'),
    }
  ](name='DataModule'),
  endTime?: string(name='EndTime', example='2023-05-18T06:19:42Z'),
  requestId?: string(name='RequestId', description='Id of the request', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  startTime?: string(name='StartTime', example='2023-05-14T17:00:00Z'),
}

model DescribeDDoSBpsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSBpsListResponseBody(name='body'),
}

/**
 * @summary 查询DCDN DDoS用户bps、pps数据
 *
 * @param request DescribeDDoSBpsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSBpsListResponse
 */
async function describeDDoSBpsListWithOptions(request: DescribeDDoSBpsListRequest, runtime: Util.RuntimeOptions): DescribeDDoSBpsListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSBpsList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询DCDN DDoS用户bps、pps数据
 *
 * @param request DescribeDDoSBpsListRequest
 * @return DescribeDDoSBpsListResponse
 */
async function describeDDoSBpsList(request: DescribeDDoSBpsListRequest): DescribeDDoSBpsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSBpsListWithOptions(request, runtime);
}

model DescribeDDoSL7QpsListRequest {
  endTime?: string(name='EndTime', example='2023-04-19T19:00:00Z'),
  interval?: int32(name='Interval', description='This parameter is required.', example='300'),
  recordId?: long(name='RecordId', example='86510927836942****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='A short description of struct

This parameter is required.', example='2023-04-19T16:00:00Z'),
}

model DescribeDDoSL7QpsListResponseBody = {
  dataInterval?: int32(name='DataInterval', example='300'),
  dataModule?: [ 
    {
      attack?: long(name='Attack', example='5'),
      normal?: long(name='Normal', example='4'),
      timeStamp?: string(name='TimeStamp', example='2023-04-19T16:00:00Z'),
      total?: long(name='Total', example='9'),
    }
  ](name='DataModule'),
  endTime?: string(name='EndTime', example='2023-04-19T19:00:00Z'),
  recordId?: long(name='RecordId', example='86510927836942****'),
  requestId?: string(name='RequestId', description='Id of the request', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteId?: long(name='SiteId', example='123456****'),
  startTime?: string(name='StartTime', example='2023-04-19T16:00:00Z'),
}

model DescribeDDoSL7QpsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSL7QpsListResponseBody(name='body'),
}

/**
 * @summary ddos分析七层qps走势图接口
 *
 * @param request DescribeDDoSL7QpsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSL7QpsListResponse
 */
async function describeDDoSL7QpsListWithOptions(request: DescribeDDoSL7QpsListRequest, runtime: Util.RuntimeOptions): DescribeDDoSL7QpsListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSL7QpsList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ddos分析七层qps走势图接口
 *
 * @param request DescribeDDoSL7QpsListRequest
 * @return DescribeDDoSL7QpsListResponse
 */
async function describeDDoSL7QpsList(request: DescribeDDoSL7QpsListRequest): DescribeDDoSL7QpsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSL7QpsListWithOptions(request, runtime);
}

model DescribeHttpDDoSAttackIntelligentProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', description='The mode of smart HTTP DDoS protection. Valid values:

*   **observe**: alert.
*   **defense**: block.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='The level of smart HTTP DDoS protection. Valid values:

*   **level0**: very loose.
*   **level30**: loose.
*   **level60**: normal.
*   **level90**: strict.', example='level60'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of smart HTTP DDoS protection for a website.
 *
 * @param request DescribeHttpDDoSAttackIntelligentProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
async function describeHttpDDoSAttackIntelligentProtectionWithOptions(request: DescribeHttpDDoSAttackIntelligentProtectionRequest, runtime: Util.RuntimeOptions): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHttpDDoSAttackIntelligentProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of smart HTTP DDoS protection for a website.
 *
 * @param request DescribeHttpDDoSAttackIntelligentProtectionRequest
 * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
async function describeHttpDDoSAttackIntelligentProtection(request: DescribeHttpDDoSAttackIntelligentProtectionRequest): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHttpDDoSAttackIntelligentProtectionWithOptions(request, runtime);
}

model DescribeHttpDDoSAttackProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', description='The level of HTTP DDoS attack protection. Valid values:

*   **very weak**: very loose.
*   **weak**: loose.
*   **default**: normal.
*   **hard**: strict.', example='default'),
  requestId?: string(name='RequestId', description='The request ID.', example='35C66C7B-671H-4297-9187-2C4477247A78'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of HTTP DDoS attack protection.
 *
 * @param request DescribeHttpDDoSAttackProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHttpDDoSAttackProtectionResponse
 */
async function describeHttpDDoSAttackProtectionWithOptions(request: DescribeHttpDDoSAttackProtectionRequest, runtime: Util.RuntimeOptions): DescribeHttpDDoSAttackProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHttpDDoSAttackProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of HTTP DDoS attack protection.
 *
 * @param request DescribeHttpDDoSAttackProtectionRequest
 * @return DescribeHttpDDoSAttackProtectionResponse
 */
async function describeHttpDDoSAttackProtection(request: DescribeHttpDDoSAttackProtectionRequest): DescribeHttpDDoSAttackProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHttpDDoSAttackProtectionWithOptions(request, runtime);
}

model DescribeKvAccountStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='Indicates whether Edge KV is activated for the Alibaba Cloud account.

*   **online**
*   **offline**', example='online'),
}

model DescribeKvAccountStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKvAccountStatusResponseBody(name='body'),
}

/**
 * @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
 *
 * @param request DescribeKvAccountStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatusWithOptions(runtime: Util.RuntimeOptions): DescribeKvAccountStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeKvAccountStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
 *
 * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatus(): DescribeKvAccountStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKvAccountStatusWithOptions(runtime);
}

model DescribePreloadTasksRequest {
  content?: string(name='Content', description='The content to prefetch. Exact match is supported.', example='http://a.com/1.jpg?b=2'),
  endTime?: string(name='EndTime', description='The end time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2023-03-23T06:23:00Z'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 50.', example='20'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
  startTime?: string(name='StartTime', description='The start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2023-03-22T17:00:00Z'),
  status?: string(name='Status', description='The task status. Valid values:

*   **Complete**: The task is complete.
*   **Refreshing**: The task is running.
*   **Failed**: The task failed.', example='Complete'),
}

model DescribePreloadTasksResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  tasks?: [ 
    {
      content?: string(name='Content', description='The prefetched content.', example='http://a.com/1.jpg?b=2'),
      createTime?: string(name='CreateTime', description='The time when the task was created.', example='2023-03-28 14:28:57'),
      description?: string(name='Description', description='The error message returned upon a prefetch task failure. Valid values:

*   **Internal Error**
*   **Origin Timeout**
*   **Origin Return StatusCode 5XX**', example='Internal Error'),
      process?: string(name='Process', description='The progress of the task, in percentage.', example='100%'),
      status?: string(name='Status', description='The task status.

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
      taskId?: string(name='TaskId', description='The ID of the queried task.', example='1597854579687428'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='83'),
}

model DescribePreloadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreloadTasksResponseBody(name='body'),
}

/**
 * @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
 *
 * @param request DescribePreloadTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePreloadTasksResponse
 */
async function describePreloadTasksWithOptions(request: DescribePreloadTasksRequest, runtime: Util.RuntimeOptions): DescribePreloadTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePreloadTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
 *
 * @param request DescribePreloadTasksRequest
 * @return DescribePreloadTasksResponse
 */
async function describePreloadTasks(request: DescribePreloadTasksRequest): DescribePreloadTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreloadTasksWithOptions(request, runtime);
}

model DescribePurgeTasksRequest {
  content?: string(name='Content', description='The content to purge. Exact match is supported.', example='http://a.com/1.jpg?b=1'),
  endTime?: string(name='EndTime', description='The end time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2022-11-18T15:59:59Z'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100000.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 50.', example='20'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
  startTime?: string(name='StartTime', description='The start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-11-16T05:33:00Z'),
  status?: string(name='Status', description='The task status. Valid values:

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
  type?: string(name='Type', description='The task type. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.', example='file'),
}

model DescribePurgeTasksResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  tasks?: [ 
    {
      content?: string(name='Content', description='The purged content.', example='http://a.com/1.jpg?b=1'),
      createTime?: string(name='CreateTime', description='The time when the task was created.', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', description='The error description returned when the purge task failed.', example='Internal Error'),
      process?: string(name='Process', description='The progress of the task, in percentage.', example='100%'),
      status?: string(name='Status', description='The task status.

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
      taskId?: string(name='TaskId', description='The task ID.', example='16346513304'),
      type?: string(name='Type', description='The type of the purge task. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.', example='file'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model DescribePurgeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurgeTasksResponseBody(name='body'),
}

/**
 * @summary Queries the details of purge tasks.
 *
 * @param request DescribePurgeTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePurgeTasksResponse
 */
async function describePurgeTasksWithOptions(request: DescribePurgeTasksRequest, runtime: Util.RuntimeOptions): DescribePurgeTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurgeTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of purge tasks.
 *
 * @param request DescribePurgeTasksRequest
 * @return DescribePurgeTasksResponse
 */
async function describePurgeTasks(request: DescribePurgeTasksRequest): DescribePurgeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurgeTasksWithOptions(request, runtime);
}

model DisableCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='100001'),
}

model DisableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', description='The ID of the disabled policy.', example='100001'),
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DisableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Disables a scenario-specific policy.
 *
 * @param request DisableCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableCustomScenePolicyResponse
 */
async function disableCustomScenePolicyWithOptions(request: DisableCustomScenePolicyRequest, runtime: Util.RuntimeOptions): DisableCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables a scenario-specific policy.
 *
 * @param request DisableCustomScenePolicyRequest
 * @return DisableCustomScenePolicyResponse
 */
async function disableCustomScenePolicy(request: DisableCustomScenePolicyRequest): DisableCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableCustomScenePolicyWithOptions(request, runtime);
}

model EditSiteWafSettingsRequest {
  settings?: WafSiteSettings(name='Settings', description='The WAF configuration of the website in the JSON format.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version of the website.', example='0'),
}

model EditSiteWafSettingsShrinkRequest {
  settingsShrink?: string(name='Settings', description='The WAF configuration of the website in the JSON format.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version of the website.', example='0'),
}

model EditSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model EditSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditSiteWafSettingsResponseBody(name='body'),
}

/**
 * @summary Modifies the Web Application Firewall (WAF) configuration of a website, such as the client IP address that is identified by WAF.
 *
 * @param tmpReq EditSiteWafSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EditSiteWafSettingsResponse
 */
async function editSiteWafSettingsWithOptions(tmpReq: EditSiteWafSettingsRequest, runtime: Util.RuntimeOptions): EditSiteWafSettingsResponse {
  Util.validateModel(tmpReq);
  var request = new EditSiteWafSettingsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.settings)) {
    request.settingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.settings, 'Settings', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.settingsShrink)) {
    body['Settings'] = request.settingsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EditSiteWafSettings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the Web Application Firewall (WAF) configuration of a website, such as the client IP address that is identified by WAF.
 *
 * @param request EditSiteWafSettingsRequest
 * @return EditSiteWafSettingsResponse
 */
async function editSiteWafSettings(request: EditSiteWafSettingsRequest): EditSiteWafSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return editSiteWafSettingsWithOptions(request, runtime);
}

model EnableCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='1'),
}

model EnableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model EnableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Enables a scenario-specific policy.
 *
 * @param request EnableCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableCustomScenePolicyResponse
 */
async function enableCustomScenePolicyWithOptions(request: EnableCustomScenePolicyRequest, runtime: Util.RuntimeOptions): EnableCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables a scenario-specific policy.
 *
 * @param request EnableCustomScenePolicyRequest
 * @return EnableCustomScenePolicyResponse
 */
async function enableCustomScenePolicy(request: EnableCustomScenePolicyRequest): EnableCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableCustomScenePolicyWithOptions(request, runtime);
}

model ExportRecordsRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='1234567890123'),
}

model ExportRecordsResponseBody = {
  content?: string(name='Content', description='The exported DNS records.', example=';; site:example.com.\\\\n;; Exported:2024-01-24 15:54:35\\\\n\\\\n;; A Records\\\\na1.example.com. 30 IN A 1.1.1.1 direct\\\\na2.example.com. 30 IN A 1.1.1.1 direct\\\\na3.example.com. 30 IN A 1.1.1.1 direct\\\\n'),
  requestId?: string(name='RequestId', description='The request ID.', example='C69B5894-D1BA-592C-95D0-DADBE7AEAC63'),
}

model ExportRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportRecordsResponseBody(name='body'),
}

/**
 * @summary Exports all DNS records of a website domain as a TXT file.
 *
 * @param request ExportRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportRecordsResponse
 */
async function exportRecordsWithOptions(request: ExportRecordsRequest, runtime: Util.RuntimeOptions): ExportRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Exports all DNS records of a website domain as a TXT file.
 *
 * @param request ExportRecordsRequest
 * @return ExportRecordsResponse
 */
async function exportRecords(request: ExportRecordsRequest): ExportRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportRecordsWithOptions(request, runtime);
}

model GetCacheReserveSpecificationResponseBody = {
  cacheReserveCapacity?: [ string ](name='CacheReserveCapacity', description='The capacities of cache reserve instances that can be created.'),
  cacheReserveRegion?: [ string ](name='CacheReserveRegion', description='The regions in which cache reserve instances can be created.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model GetCacheReserveSpecificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCacheReserveSpecificationResponseBody(name='body'),
}

/**
 * @summary Queries the available specifications of cache reserve instances.
 *
 * @param request GetCacheReserveSpecificationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecificationWithOptions(runtime: Util.RuntimeOptions): GetCacheReserveSpecificationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCacheReserveSpecification',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the available specifications of cache reserve instances.
 *
 * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecification(): GetCacheReserveSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCacheReserveSpecificationWithOptions(runtime);
}

model GetCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='babaded901474b9693acf530e0fb1d95'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890123'),
}

model GetCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  result?: {
    applyCode?: long(name='ApplyCode', example='2'),
    applyMessage?: string(name='ApplyMessage', example='canceled'),
    casId?: string(name='CasId', description='The certificate ID on Certificate Management Service.', example='30000478'),
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2020-05-12 02:00:53'),
    DCV?: [ 
      {
        id?: string(name='Id', description='DCV ID.', example='bababf7cdd1546a2ad04c0def1f4c980'),
        key?: string(name='Key', example='http://www.example.com/.well-known/acme-challenge/pH20CqwS5L3ZnvkhI436DCzadKFuG7QcUcvB_4KsAow'),
        status?: string(name='Status', example='pending'),
        type?: string(name='Type', example='HTTP'),
        value?: string(name='Value', example='pH20CqwS5L3ZnvkhI436DCzadKFuG7QcUcvB_4KsAow.KfzYo4LH3EgOt7a73G-RqZkbR0eYtLfEUmtmqGmr4FQ'),
      }
    ](name='DCV'),
    fingerprintSha256?: string(name='FingerprintSha256', description='The SHA-256 fingerprint of the certificate.', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
    id?: string(name='Id', description='The certificate ID on ESA.', example='babaded901474b9693acf530e0fb1d95'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='DigiCert'),
    issuerCN?: string(name='IssuerCN', description='The Common Name of the CA that issued the certificate.', example='DigiCert Global Root CA'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2023-11-26T16:00:00Z'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-11-26T16:00:00Z'),
    pubAlg?: string(name='PubAlg', description='The public-key algorithm of the certificate.', example='ECDSA'),
    region?: string(name='Region', description='The region.', example='cn-hangzhou'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='babaded901474b9693acf530e0fb1daa'),
    sigAlg?: string(name='SigAlg', description='The signature algorithm of the certificate.', example='ECDSA-SHA1'),
    status?: string(name='Status', description='The certificate status.', example='OK'),
    type?: string(name='Type', description='The certificate type.', example='free'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2022-09-22 05:33:13'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The certificate status.', example='OK'),
}

model GetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCertificateResponseBody(name='body'),
}

/**
 * @summary Queries certificate information about a website.
 *
 * @param request GetCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCertificateResponse
 */
async function getCertificateWithOptions(request: GetCertificateRequest, runtime: Util.RuntimeOptions): GetCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries certificate information about a website.
 *
 * @param request GetCertificateRequest
 * @return GetCertificateResponse
 */
async function getCertificate(request: GetCertificateRequest): GetCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCertificateWithOptions(request, runtime);
}

model GetCertificateQuotaRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  type?: string(name='Type', description='This parameter is required.', example='free'),
}

model GetCertificateQuotaResponseBody = {
  quota?: long(name='Quota', example='10'),
  quotaUsage?: long(name='QuotaUsage', example='5'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteCount?: long(name='SiteCount', example='2'),
  siteUsage?: [ 
    {
      siteId?: string(name='SiteId', example='165929521496928'),
      siteName?: string(name='SiteName', example='example.com'),
      siteUsage?: long(name='SiteUsage', example='5'),
    }
  ](name='SiteUsage'),
  type?: string(name='Type', example='free'),
}

model GetCertificateQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCertificateQuotaResponseBody(name='body'),
}

/**
 * @summary 查询证书quota及用量
 *
 * @param request GetCertificateQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCertificateQuotaResponse
 */
async function getCertificateQuotaWithOptions(request: GetCertificateQuotaRequest, runtime: Util.RuntimeOptions): GetCertificateQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCertificateQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询证书quota及用量
 *
 * @param request GetCertificateQuotaRequest
 * @return GetCertificateQuotaResponse
 */
async function getCertificateQuota(request: GetCertificateQuotaRequest): GetCertificateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCertificateQuotaWithOptions(request, runtime);
}

model GetClientCaCertificateRequest {
  id?: string(name='Id', description='This parameter is required.', example='babab9db65ee5efcca9f3d41d4b5****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model GetClientCaCertificateResponseBody = {
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  result?: {
    commonName?: string(name='CommonName', example='www.example.com'),
    createTime?: string(name='CreateTime', example='2024-03-05 18:24:04'),
    id?: string(name='Id', example='babab9db65ee5efcca9f3d41d4b5****'),
    issuer?: string(name='Issuer', example='GlobalSign nv-sa'),
    name?: string(name='Name', example='yourCertName'),
    notAfter?: string(name='NotAfter', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', example='RSA'),
    SAN?: string(name='SAN', example='www.example.com,*.example.com'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', example='SHA256-RSA'),
    status?: string(name='Status', example='OK'),
    type?: string(name='Type', example='upload'),
    updateTime?: string(name='UpdateTime', example='2024-03-05 18:24:04'),
  }(name='Result'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
  status?: string(name='Status', example='OK'),
}

model GetClientCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientCaCertificateResponseBody(name='body'),
}

/**
 * @summary 获取客户端CA证书信息
 *
 * @param request GetClientCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClientCaCertificateResponse
 */
async function getClientCaCertificateWithOptions(request: GetClientCaCertificateRequest, runtime: Util.RuntimeOptions): GetClientCaCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClientCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取客户端CA证书信息
 *
 * @param request GetClientCaCertificateRequest
 * @return GetClientCaCertificateResponse
 */
async function getClientCaCertificate(request: GetClientCaCertificateRequest): GetClientCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClientCaCertificateWithOptions(request, runtime);
}

model GetClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model GetClientCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  result?: {
    CACertificateId?: string(name='CACertificateId', description='The ID of the CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
    commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
    createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
    id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
    issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
    name?: string(name='Name', description='The certificate name.', example='yourCertName'),
    notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
    notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
    pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
    SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
    status?: string(name='Status', description='The certificate status.', example='active'),
    type?: string(name='Type', description='The certificate type.', example='dcdn'),
    updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-09-22 05:33:13'),
  }(name='Result', description='The certificate information.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  status?: string(name='Status', description='The certificate status.', example='active'),
}

model GetClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientCertificateResponseBody(name='body'),
}

/**
 * @summary Queries information about a client certificate.
 *
 * @param request GetClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClientCertificateResponse
 */
async function getClientCertificateWithOptions(request: GetClientCertificateRequest, runtime: Util.RuntimeOptions): GetClientCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about a client certificate.
 *
 * @param request GetClientCertificateRequest
 * @return GetClientCertificateResponse
 */
async function getClientCertificate(request: GetClientCertificateRequest): GetClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClientCertificateWithOptions(request, runtime);
}

model GetClientCertificateHostnamesRequest {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model GetClientCertificateHostnamesResponseBody = {
  hostnames?: [ string ](name='Hostnames', description='The domain names with which the certificate is associated.'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model GetClientCertificateHostnamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientCertificateHostnamesResponseBody(name='body'),
}

/**
 * @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
 *
 * @param request GetClientCertificateHostnamesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClientCertificateHostnamesResponse
 */
async function getClientCertificateHostnamesWithOptions(request: GetClientCertificateHostnamesRequest, runtime: Util.RuntimeOptions): GetClientCertificateHostnamesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClientCertificateHostnames',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
 *
 * @param request GetClientCertificateHostnamesRequest
 * @return GetClientCertificateHostnamesResponse
 */
async function getClientCertificateHostnames(request: GetClientCertificateHostnamesRequest): GetClientCertificateHostnamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClientCertificateHostnamesWithOptions(request, runtime);
}

model GetEdgeContainerAppRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
}

model GetEdgeContainerAppResponseBody = {
  app?: {
    appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
    createTime?: string(name='CreateTime', description='The time when the application was created.', example='2023-07-25T05:58:05Z'),
    domainName?: string(name='DomainName', description='The domain name that is associated with the application. If no domain name is associated with the application, the value is an empty string.', example='www.1feel.cn'),
    gatewayType?: string(name='GatewayType', description='The type of the gateway. Valid values:

*   l7: Layer 7 gateway.
*   l4: Layer 4 gateway.', example='l7'),
    healthCheck?: {
      failTimes?: int32(name='FailTimes', description='The number of consecutive failed health checks required for an application to be considered as unhealthy.', example='5'),
      host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
      httpCode?: string(name='HttpCode', description='The range of health check status codes that indicate successful health checks.', example='http_2xx'),
      interval?: int32(name='Interval', description='The interval between health checks. Unit: seconds.', example='5'),
      method?: string(name='Method', description='The HTTP method that the health check request uses.', example='HEAD'),
      port?: int32(name='Port', description='The health check port.', example='80'),
      succTimes?: int32(name='SuccTimes', description='The number of consecutive successful health checks required for an application to be considered as healthy.', example='3'),
      timeout?: int32(name='Timeout', description='The timeout period of the health check. Unit: seconds.', example='60'),
      type?: string(name='Type', description='The health check type. Valid values:

*   l7
*   l4', example='l7'),
      uri?: string(name='Uri', description='The health check URL.', example='/health_check'),
    }(name='HealthCheck', description='The information about health checks.'),
    name?: string(name='Name', description='The application name.', example='test-app1'),
    quicCid?: string(name='QuicCid', description='Indicates whether QUIC is enabled.', example='false'),
    remarks?: string(name='Remarks', description='The remarks about the application.', example='test app'),
    servicePort?: int32(name='ServicePort', description='The server port. Valid values: 1 to 65535.', example='80'),
    status?: string(name='Status', description='The status of the application. Valid values:

*   creating: The application is being created.
*   failed: The application failed to be created.
*   created: The application is created.', example='created'),
    targetPort?: int32(name='TargetPort', description='The backend port, which is also the service port of the application. Valid values: 1 to 65535.', example='80'),
    updateTime?: string(name='UpdateTime', description='The time when the application was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-03-26T02:35:58Z'),
    versionCount?: int32(name='VersionCount', description='The number of versions of the application.', example='1'),
  }(name='App', description='The basic information about the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
}

model GetEdgeContainerAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppResponseBody(name='body'),
}

/**
 * @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
 *
 * @param request GetEdgeContainerAppRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppResponse
 */
async function getEdgeContainerAppWithOptions(request: GetEdgeContainerAppRequest, runtime: Util.RuntimeOptions): GetEdgeContainerAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerApp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
 *
 * @param request GetEdgeContainerAppRequest
 * @return GetEdgeContainerAppResponse
 */
async function getEdgeContainerApp(request: GetEdgeContainerAppRequest): GetEdgeContainerAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerAppWithOptions(request, runtime);
}

model GetEdgeContainerAppStatusRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  publishEnv?: string(name='PublishEnv', description='The release environment. Valid values: prod and staging.', example='staging'),
}

model GetEdgeContainerAppStatusResponseBody = {
  appStatus?: {
    baseLineVersion?: string(name='BaseLineVersion', description='The base version of the application.', example='ver-123123123123****'),
    deployStatus?: string(name='DeployStatus', description='The deployment status of the application.

*   **undeploy**: The application is not deployed.
*   **deploying**: The application is being deployed.
*   **deployed**: The application is deployed.
*   **undeploying**: The deployment is being canceled.', example='undeploy'),
    deployTime?: string(name='DeployTime', description='The time when the application was deployed. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2024-07-25T05:58:05Z'),
    deployedVersion?: string(name='DeployedVersion', description='The release version of the application.', example='ver-123123123123****'),
    expectPercentage?: int32(name='ExpectPercentage', description='The expected release percentage of the application.', example='50%'),
    fullRelease?: boolean(name='FullRelease', description='Specifies whether to fully release the version. This parameter takes effect only when PublishType is set to region.', example='true'),
    publishEnv?: string(name='PublishEnv', description='The environment to which the application was released. Valid values:

*   **prod**: the production environment.
*   **staging**: the staging environment.', example='prod'),
    publishPercentage?: int32(name='PublishPercentage', description='The release percentage of the application.', example='50%'),
    publishStatus?: string(name='PublishStatus', description='The release status of the application. Valid values:

*   **publishing**
*   **published**
*   **rollbacking**
*   **rollbacked**', example='pubishing'),
    publishTime?: string(name='PublishTime', description='The time when the application was released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2024-07-25T05:58:05Z'),
    publishType?: string(name='PublishType', description='Specifies how the version is released. Valid values:

*   percentage: releases the version by percentage.
*   region: releases the version by region.

If you do not specify this parameter, the version is released by percentage by default.', example='percentage'),
    publishingVersion?: string(name='PublishingVersion', description='The release version of the application.', example='ver-123123123123****'),
    regions?: {
      region?: [ string ](name='Region')
    }(name='Regions', description='The regions to which the version is released.'),
    rollbackTime?: string(name='RollbackTime', description='The time when the last rollback was performed.', example='2024-07-25T05:58:05Z'),
    unDeployTime?: string(name='UnDeployTime', description='The time when the application deployment was canceled. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2024-07-25T05:58:05Z'),
  }(name='AppStatus', description='The status of the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetEdgeContainerAppStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
 *
 * @param request GetEdgeContainerAppStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppStatusResponse
 */
async function getEdgeContainerAppStatusWithOptions(request: GetEdgeContainerAppStatusRequest, runtime: Util.RuntimeOptions): GetEdgeContainerAppStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.publishEnv)) {
    query['PublishEnv'] = request.publishEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerAppStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
 *
 * @param request GetEdgeContainerAppStatusRequest
 * @return GetEdgeContainerAppStatusResponse
 */
async function getEdgeContainerAppStatus(request: GetEdgeContainerAppStatusRequest): GetEdgeContainerAppStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerAppStatusWithOptions(request, runtime);
}

model GetEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  versionId?: string(name='VersionId', description='The version ID, which can be obtained by calling the [ListEdgeContainerAppVersions](~~ListEdgeContainerAppVersions~~) operation.

This parameter is required.', example='ver-87962637161651****'),
}

model GetEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  version?: {
    appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
    containers?: [ 
      {
        ACRImageInfo?: {
          domain?: string(name='Domain', description='The domain name of the Container Registry image.', example='*.mooc.seewo.com'),
          instanceId?: string(name='InstanceId', description='The ID of the Container Registry instance.', example='xcdn-9ak2thl14z5s'),
          isEnterpriseRegistry?: boolean(name='IsEnterpriseRegistry', description='Indicates whether the image is an enterprise-level image.', example='false'),
          regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
          repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-zeu0xyk28alyxozh'),
          repoName?: string(name='RepoName', description='The name of the image repository.', example='test_1'),
          repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='wpy1'),
          tag?: string(name='Tag', description='The tag value.', example='test-healthy-100-soa-1710987653'),
          tagUrl?: string(name='TagUrl', description='The URL of the Container Registry image tag.', example='registry-vpc.cn-shenzhen.aliyuncs.com/lihetech/easywits_server_exam:3.40.2'),
        }(name='ACRImageInfo', description='The information about the Container Registry image.'),
        args?: string(name='Args', description='The arguments that are passed to the container startup command.', example='-c /path/config.toml'),
        command?: string(name='Command', description='The command that is used to start the container.', example='sh abc.sh 1 2 3'),
        envVariables?: string(name='EnvVariables', description='The environment variables.', example='ENV=prod'),
        image?: string(name='Image', description='The image address.', example='nginx:1.14.0'),
        isACRImage?: boolean(name='IsACRImage', description='Indicates whether the image is a Container Registry image.', example='false'),
        name?: string(name='Name', description='The version name.', example='version01'),
        postStart?: string(name='PostStart', description='The command that is run before the container is started. Format: `{"exec":{"command":["cat","/etc/group"\\\\]}}`. If you want to cancel this configuration, set the parameter value to `""` or `{}`. If you do not specify this parameter, this configuration is ignored.', example='{\\\\"exec\\\\":{\\\\"command\\\\":[\\\\"touch\\\\",\\\\"/home/admin/checkpoststartV1\\\\"]}}'),
        preStop?: string(name='PreStop', description='The command that is run before the container is stopped.', example='sh prestop.sh "echo hello world"'),
        probeContent?: {
          command?: string(name='Command', description='The probe command.', example='sh test.sh'),
          failureThreshold?: int32(name='FailureThreshold', description='The number of consecutive failed health checks required for a container to be considered as unhealthy.', example='3'),
          host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
          httpHeaders?: string(name='HttpHeaders', description='The request headers that are included in the container health check request.', example='[{\\\\"Content-Type\\\\":\\\\"application/json'),
          initialDelaySeconds?: int32(name='InitialDelaySeconds', description='The latency for container probe initialization.', example='20'),
          path?: string(name='Path', description='The path of the container health check.', example='/health_check'),
          periodSeconds?: int32(name='PeriodSeconds', description='The interval between container health checks.', example='5'),
          port?: int32(name='Port', description='The port of the container health check. Valid values: **1** to **65535**.', example='80'),
          scheme?: string(name='Scheme', description='The protocol that the container health check request uses.', example='http'),
          successThreshold?: int32(name='SuccessThreshold', description='The number of consecutive successful health checks required for a container to be considered as healthy.', example='1'),
          timeoutSeconds?: int32(name='TimeoutSeconds', description='The timeout period of the container health check.', example='5'),
        }(name='ProbeContent', description='The probe content.'),
        probeType?: string(name='ProbeType', description='The probe type.', example='httpGet'),
        spec?: string(name='Spec', description='The compute specification.', example='1C2G'),
        storage?: string(name='Storage', description='The storage capacity of the container. Valid values: 0.5G, 10G, 20G, and 30G.'),
      }
    ](name='Containers', description='The container images deployed for this version.'),
    createTime?: string(name='CreateTime', description='The time when the version was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-07-01T09:32:33Z'),
    lastPublishTime?: string(name='LastPublishTime', description='The time when the version was last released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-07-25T04:58:05Z'),
    name?: string(name='Name', description='The version name.', example='test'),
    publishTime?: string(name='PublishTime', description='The time when the version was released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2022-11-14T02:04:03Z'),
    remarks?: string(name='Remarks', description='The remarks.', example='aaa'),
    status?: string(name='Status', description='The status of the current version. Valid values:

*   created: The version is created.
*   failed: The version failed to be created.
*   creating: The version is being created.', example='created'),
    updateTime?: string(name='UpdateTime', description='The time when the version was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2021-12-03T10:52:52Z'),
    versionId?: string(name='VersionId', description='The ID of the created version.', example='ver-87962637161651****'),
  }(name='Version', description='The information about the version.'),
}

model GetEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
 *
 * @param request GetEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerAppVersionResponse
 */
async function getEdgeContainerAppVersionWithOptions(request: GetEdgeContainerAppVersionRequest, runtime: Util.RuntimeOptions): GetEdgeContainerAppVersionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
 *
 * @param request GetEdgeContainerAppVersionRequest
 * @return GetEdgeContainerAppVersionResponse
 */
async function getEdgeContainerAppVersion(request: GetEdgeContainerAppVersionRequest): GetEdgeContainerAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerAppVersionWithOptions(request, runtime);
}

model GetEdgeContainerDeployRegionsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='GetEdgeContainerDeployRegions'),
}

model GetEdgeContainerDeployRegionsResponseBody = {
  regions?: [ string ](name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetEdgeContainerDeployRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerDeployRegionsResponseBody(name='body'),
}

/**
 * @summary Queries regions where a containerized application is deployed based on the application ID.
 *
 * @param request GetEdgeContainerDeployRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerDeployRegionsResponse
 */
async function getEdgeContainerDeployRegionsWithOptions(request: GetEdgeContainerDeployRegionsRequest, runtime: Util.RuntimeOptions): GetEdgeContainerDeployRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerDeployRegions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries regions where a containerized application is deployed based on the application ID.
 *
 * @param request GetEdgeContainerDeployRegionsRequest
 * @return GetEdgeContainerDeployRegionsResponse
 */
async function getEdgeContainerDeployRegions(request: GetEdgeContainerDeployRegionsRequest): GetEdgeContainerDeployRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerDeployRegionsWithOptions(request, runtime);
}

model GetEdgeContainerLogsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  lines?: int32(name='Lines', description='The number of log entries to output.

This parameter is required.', example='500'),
}

model GetEdgeContainerLogsResponseBody = {
  items?: [ string ](name='Items', description='The logs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetEdgeContainerLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerLogsResponseBody(name='body'),
}

/**
 * @summary Queries Edge Container logs.
 *
 * @param request GetEdgeContainerLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerLogsResponse
 */
async function getEdgeContainerLogsWithOptions(request: GetEdgeContainerLogsRequest, runtime: Util.RuntimeOptions): GetEdgeContainerLogsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerLogs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Edge Container logs.
 *
 * @param request GetEdgeContainerLogsRequest
 * @return GetEdgeContainerLogsResponse
 */
async function getEdgeContainerLogs(request: GetEdgeContainerLogsRequest): GetEdgeContainerLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerLogsWithOptions(request, runtime);
}

model GetEdgeContainerStagingDeployStatusRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='GetEdgeContainerStagingDeployStatus'),
}

model GetEdgeContainerStagingDeployStatusResponseBody = {
  containersReady?: string(name='ContainersReady', description='Indicates whether the container is ready.

*   ok
*   unready', example='ok'),
  creationTimestamp?: string(name='CreationTimestamp', description='The time when the container was created. The value is a timestamp.', example='2024-09-24T06:46:35Z'),
  initialized?: string(name='Initialized', description='The initialization status of the container.

*   ok
*   unready', example='ok'),
  phase?: string(name='Phase', description='The status of the container in the staging environment.

*   NoContainer: created.
*   Running: running.
*   Failed: abnormal.', example='Running'),
  podRestartState?: {
    lastTerminatedReason?: string(name='LastTerminatedReason', description='The reason for the last restart.', example='OOMKilled'),
    restartCount?: int32(name='RestartCount', description='The number of times that the container restarted.', example='1'),
  }(name='PodRestartState', description='The details of container restart.'),
  ready?: string(name='Ready', description='Indicates whether domain names are associated with the container.

*   ok
*   unready', example='ok'),
  requestId?: string(name='RequestId', description='The request ID.', example='2F2C992B-3FE2-5EBB-A61F-F9DD4EB257DA'),
  scheduled?: string(name='Scheduled', description='The scheduling status of the container.

*   ok
*   unready', example='ok'),
  VIPs?: [ string ](name='VIPs', description='The virtual IP addresses.'),
}

model GetEdgeContainerStagingDeployStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerStagingDeployStatusResponseBody(name='body'),
}

/**
 * @summary Queries the deployment status of an application in the staging environment by using the application ID.
 *
 * @param request GetEdgeContainerStagingDeployStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerStagingDeployStatusResponse
 */
async function getEdgeContainerStagingDeployStatusWithOptions(request: GetEdgeContainerStagingDeployStatusRequest, runtime: Util.RuntimeOptions): GetEdgeContainerStagingDeployStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerStagingDeployStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the deployment status of an application in the staging environment by using the application ID.
 *
 * @param request GetEdgeContainerStagingDeployStatusRequest
 * @return GetEdgeContainerStagingDeployStatusResponse
 */
async function getEdgeContainerStagingDeployStatus(request: GetEdgeContainerStagingDeployStatusRequest): GetEdgeContainerStagingDeployStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerStagingDeployStatusWithOptions(request, runtime);
}

model GetEdgeContainerTerminalRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-88068867578379****'),
}

model GetEdgeContainerTerminalResponseBody = {
  cluster?: string(name='Cluster', description='The cluster name.', example='c497b44c2a59f4ae0bd2826edc40a2c6e'),
  container?: string(name='Container', description='The container name.', example='worker0'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='ns1'),
  pod?: string(name='Pod', description='The name of the container group.', example='1775b9e0-8463-457e-89e8-fb7b6d125b2e'),
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  sessionId?: string(name='SessionId', description='The session ID.', example='af22f4xxxxxxxxxxxxxxxxxx'),
  token?: string(name='Token', description='The information about the shared token.', example='af22f4-xxxxx-xxxx-xxxx-xxxx'),
}

model GetEdgeContainerTerminalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEdgeContainerTerminalResponseBody(name='body'),
}

/**
 * @summary Queries the terminal information of a containerized application.
 *
 * @param request GetEdgeContainerTerminalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEdgeContainerTerminalResponse
 */
async function getEdgeContainerTerminalWithOptions(request: GetEdgeContainerTerminalRequest, runtime: Util.RuntimeOptions): GetEdgeContainerTerminalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeContainerTerminal',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the terminal information of a containerized application.
 *
 * @param request GetEdgeContainerTerminalRequest
 * @return GetEdgeContainerTerminalResponse
 */
async function getEdgeContainerTerminal(request: GetEdgeContainerTerminalRequest): GetEdgeContainerTerminalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeContainerTerminalWithOptions(request, runtime);
}

model GetKvRequest {
  base64?: boolean(name='Base64', description='Specifies whether to decode the value by using Base 64. If you call the [PutKv](https://help.aliyun.com/document_detail/2850482.html) operation and set the Base64 parameter to true, set this parameter to true to read the original content.', example='true'),
  key?: string(name='Key', description='The key name for the query.

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model GetKvResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', description='The value of the key.', example='test_value'),
}

model GetKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvResponseBody(name='body'),
}

/**
 * @summary Queries the value of a key in a key-value pair.
 *
 * @param request GetKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvResponse
 */
async function getKvWithOptions(request: GetKvRequest, runtime: Util.RuntimeOptions): GetKvResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the value of a key in a key-value pair.
 *
 * @param request GetKvRequest
 * @return GetKvResponse
 */
async function getKv(request: GetKvRequest): GetKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKvWithOptions(request, runtime);
}

model GetKvAccountResponseBody = {
  capacity?: long(name='Capacity', description='The available capacity of all namespaces in the account. Unit: bytes.', example='1073741824'),
  capacityString?: string(name='CapacityString', description='The available capacity of all namespaces in the account.', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', description='The used capacity of all namespaces in the account. Unit: bytes.', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', description='The used capacity of all namespaces in the account.', example='100 MB'),
  namespaceList?: [ 
    {
      capacity?: long(name='Capacity', description='The available capacity of the namespace. Unit: bytes.', example='1073741824'),
      capacityString?: string(name='CapacityString', description='The available capacity of the namespace.', example='1 GB'),
      capacityUsed?: long(name='CapacityUsed', description='The used capacity of the namespace. Unit: bytes.', example='100048576'),
      capacityUsedString?: string(name='CapacityUsedString', description='The used capacity of the namespace.', example='100 MB'),
      description?: string(name='Description', description='The description of the namespace.', example='the first namespace'),
      namespace?: string(name='Namespace', description='The name of the namespace.', example='test_namespace'),
      namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='643355322374688768'),
      status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: normal.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
    }
  ](name='NamespaceList', description='The namespaces in the account.'),
  namespaceQuota?: int32(name='NamespaceQuota', description='The maximum number of namespaces that can be created in the account.', example='10'),
  namespaceUsed?: int32(name='NamespaceUsed', description='The number of created namespaces that store key-value data in the account.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='Indicates whether Edge KV is activated for the Alibaba Cloud account.

*   **online**
*   **offline**', example='online'),
}

model GetKvAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvAccountResponseBody(name='body'),
}

/**
 * @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
 *
 * @param request GetKvAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvAccountResponse
 */
async function getKvAccountWithOptions(runtime: Util.RuntimeOptions): GetKvAccountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetKvAccount',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
 *
 * @return GetKvAccountResponse
 */
async function getKvAccount(): GetKvAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKvAccountWithOptions(runtime);
}

model GetKvNamespaceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
}

model GetKvNamespaceResponseBody = {
  capacity?: long(name='Capacity', description='The available capacity of the namespace. Unit: bytes.', example='1073741824'),
  capacityString?: string(name='CapacityString', description='The available capacity of the namespace.', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', description='The used capacity of the namespace. Unit: bytes.', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', description='The used capacity of the namespace.', example='100 MB'),
  description?: string(name='Description', description='The description of the namespace.', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='643355322374688768'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: working as expected.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
}

model GetKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a namespace in your Alibaba Cloud account.
 *
 * @param request GetKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvNamespaceResponse
 */
async function getKvNamespaceWithOptions(request: GetKvNamespaceRequest, runtime: Util.RuntimeOptions): GetKvNamespaceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a namespace in your Alibaba Cloud account.
 *
 * @param request GetKvNamespaceRequest
 * @return GetKvNamespaceResponse
 */
async function getKvNamespace(request: GetKvNamespaceRequest): GetKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKvNamespaceWithOptions(request, runtime);
}

model GetListRequest {
  id?: long(name='Id', description='The ID of the custom list, which can be obtained by calling the [ListLists](https://help.aliyun.com/document_detail/2850217.html) operation.', example='40000001'),
}

model GetListResponseBody = {
  description?: string(name='Description', description='The description of the custom list.', example='a custom list'),
  id?: long(name='Id', description='The ID of the custom list.[](~~2850217~~)', example='40000001'),
  items?: [ string ](name='Items', description='The items in the custom list, which are displayed as an array.'),
  kind?: string(name='Kind', description='The type of the custom list.', example='ip'),
  name?: string(name='Name', description='The name of the custom list.

This parameter is required.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', description='The time when the custom list was last modified.', example='2024-01-01T00:00:00Z'),
}

model GetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListResponseBody(name='body'),
}

/**
 * @summary Queries the details of a custom list, such as the name, description, type, and content.
 *
 * @param request GetListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetListResponse
 */
async function getListWithOptions(request: GetListRequest, runtime: Util.RuntimeOptions): GetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a custom list, such as the name, description, type, and content.
 *
 * @param request GetListRequest
 * @return GetListResponse
 */
async function getList(request: GetListRequest): GetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListWithOptions(request, runtime);
}

model GetOriginPoolRequest {
  id?: long(name='Id', description='This parameter is required.', example='GetOriginPool'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model GetOriginPoolResponseBody = {
  enabled?: boolean(name='Enabled'),
  id?: long(name='Id'),
  name?: string(name='Name'),
  origins?: [ 
    {
      address?: string(name='Address'),
      authConf?: {
        accessKey?: string(name='AccessKey'),
        authType?: string(name='AuthType'),
        region?: string(name='Region'),
        secretKey?: string(name='SecretKey'),
        version?: string(name='Version'),
      }(name='AuthConf'),
      enabled?: boolean(name='Enabled'),
      header?: any(name='Header'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      weight?: int32(name='Weight'),
    }
  ](name='Origins'),
  recordName?: string(name='RecordName'),
  referenceLBCount?: int32(name='ReferenceLBCount'),
  references?: {
    dnsRecords?: [ 
      {
        id?: long(name='Id'),
        name?: string(name='Name'),
      }
    ](name='DnsRecords'),
    IPARecords?: [ 
      {
        id?: long(name='Id'),
        name?: string(name='Name'),
      }
    ](name='IPARecords'),
    loadBalancers?: [ 
      {
        id?: long(name='Id'),
        name?: string(name='Name'),
      }
    ](name='LoadBalancers'),
  }(name='References'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
}

model GetOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginPoolResponseBody(name='body'),
}

/**
 * @summary 查询特定源地址池
 *
 * @param request GetOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginPoolResponse
 */
async function getOriginPoolWithOptions(request: GetOriginPoolRequest, runtime: Util.RuntimeOptions): GetOriginPoolResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询特定源地址池
 *
 * @param request GetOriginPoolRequest
 * @return GetOriginPoolResponse
 */
async function getOriginPool(request: GetOriginPoolRequest): GetOriginPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOriginPoolWithOptions(request, runtime);
}

model GetOriginProtectionRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
}

model GetOriginProtectionResponseBody = {
  currentIPWhitelist?: {
    IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection used by the website, specified as IPv4 addresses or CIDR blocks.'),
    IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection used by the website, specified as IPv6 addresses or CIDR blocks.'),
  }(name='CurrentIPWhitelist', description='The IP whitelist for origin protection used by the website.'),
  diffIPWhitelist?: {
    addedIPWhitelist?: {
      IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
      IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
    }(name='AddedIPWhitelist', description='The new IP whitelist for origin protection.'),
    noChangeIpWhitelist?: {
      IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
      IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
    }(name='NoChangeIpWhitelist', description='The IP whitelist for origin protection that remains unchanged.'),
    removedIPWhitelist?: {
      IPv4?: [ string ](name='IPv4', description='The IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
      IPv6?: [ string ](name='IPv6', description='The IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
    }(name='RemovedIPWhitelist', description='The IP whitelist for origin protection that has been deleted.'),
  }(name='DiffIPWhitelist', description='The IP whitelist for origin protection that has been updated.'),
  latestIPWhitelist?: {
    IPv4?: [ string ](name='IPv4', description='The latest IP whitelist for origin protection, specified as IPv4 addresses or CIDR blocks.'),
    IPv6?: [ string ](name='IPv6', description='The latest IP whitelist for origin protection, specified as IPv6 addresses or CIDR blocks.'),
  }(name='LatestIPWhitelist', description='The latest IP whitelist for origin protection.'),
  needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the IP whitelist for origin protection needs to be updated. If the currently used IP whitelist is different from the latest IP whitelist, it needs to be updated, and the value is true.

*   true: The update is required.
*   false: No update is required.', example='true'),
  originConverge?: string(name='OriginConverge', description='Indicates whether IP convergence is enabled.

*   on
*   off', example='on'),
  originProtection?: string(name='OriginProtection', description='Indicates whether origin protection is enabled.

*   on
*   off', example='on'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model GetOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
 *
 * @param request GetOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOriginProtectionResponse
 */
async function getOriginProtectionWithOptions(request: GetOriginProtectionRequest, runtime: Util.RuntimeOptions): GetOriginProtectionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
 *
 * @param request GetOriginProtectionRequest
 * @return GetOriginProtectionResponse
 */
async function getOriginProtection(request: GetOriginProtectionRequest): GetOriginProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOriginProtectionWithOptions(request, runtime);
}

model GetPageRequest {
  id?: long(name='Id', description='The ID of the custom error page, which can be obtained by calling the [ListPages](https://help.aliyun.com/document_detail/2850223.html) operation.', example='50000001'),
}

model GetPageResponseBody = {
  content?: string(name='Content', description='The Base64-encoded content of the error page. The content type is specified by the Content-Type field.

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header.

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='The description of the custom error page.', example='a custom deny page'),
  id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
  kind?: string(name='Kind', description='The type of the custom response page.', example='custom'),
  name?: string(name='Name', description='The name of the custom response page.

This parameter is required.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', description='The time when the custom error page was last modified.', example='2024-01-01T00:00:00Z'),
}

model GetPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPageResponseBody(name='body'),
}

/**
 * @summary Queries the details of a custom error page based on the error page ID.
 *
 * @param request GetPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPageResponse
 */
async function getPageWithOptions(request: GetPageRequest, runtime: Util.RuntimeOptions): GetPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a custom error page based on the error page ID.
 *
 * @param request GetPageRequest
 * @return GetPageResponse
 */
async function getPage(request: GetPageRequest): GetPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPageWithOptions(request, runtime);
}

model GetPurgeQuotaRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge task. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specific parameters ignored.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.', example='file'),
}

model GetPurgeQuotaResponseBody = {
  quota?: string(name='Quota', description='The total quota.', example='100000'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  usage?: string(name='Usage', description='The quota usage.', example='10'),
}

model GetPurgeQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPurgeQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the quotas and quota usage for different cache purge options.
 *
 * @param request GetPurgeQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPurgeQuotaResponse
 */
async function getPurgeQuotaWithOptions(request: GetPurgeQuotaRequest, runtime: Util.RuntimeOptions): GetPurgeQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPurgeQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the quotas and quota usage for different cache purge options.
 *
 * @param request GetPurgeQuotaRequest
 * @return GetPurgeQuotaResponse
 */
async function getPurgeQuota(request: GetPurgeQuotaRequest): GetPurgeQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPurgeQuotaWithOptions(request, runtime);
}

model GetRealtimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_er'),
}

model GetRealtimeDeliveryFieldResponseBody = {
  fieldContent?: map[string]FieldContentValue(name='FieldContent', description='The fields returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetRealtimeDeliveryFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealtimeDeliveryFieldResponseBody(name='body'),
}

/**
 * @summary Queries the fields in real-time logs based on the log category.
 *
 * @param request GetRealtimeDeliveryFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRealtimeDeliveryFieldResponse
 */
async function getRealtimeDeliveryFieldWithOptions(request: GetRealtimeDeliveryFieldRequest, runtime: Util.RuntimeOptions): GetRealtimeDeliveryFieldResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRealtimeDeliveryField',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the fields in real-time logs based on the log category.
 *
 * @param request GetRealtimeDeliveryFieldRequest
 * @return GetRealtimeDeliveryFieldResponse
 */
async function getRealtimeDeliveryField(request: GetRealtimeDeliveryFieldRequest): GetRealtimeDeliveryFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeDeliveryFieldWithOptions(request, runtime);
}

model GetRecordRequest {
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
}

model GetRecordResponseBody = {
  recordModel?: {
    authConf?: {
      accessKey?: string(name='AccessKey', description='The access key ID of the account to which the origin server belongs. This parameter is returned if the origin type is OSS and AuthType is set to private_cross_account, or the origin type is S3 and AuthType is set to private.', example='VIxuvJSA2S03f******kp208dy5w7'),
      authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The origin type refers to the SourceType parameter in this operation. This parameter is returned if the origin type is OSS or S3Valid values:

*   **public**: public read. This value is returned when the origin is a public OSS or S3 bucket.
*   **private**: private read. This value is returned when the origin is a private S3 bucket.
*   **private_same_account**: private read in the same account. This value is returned when the origin is a private OSS bucket in your account.
*   **private_cross_account**: private read across accounts. This value is returned when the origin is a private OSS bucket in a different Alibaba Cloud account.', example='public'),
      region?: string(name='Region', description='The region of the origin. If the origin type is S3, you must specify this value. You can obtain the region information from the official website of S3.', example='us-east-1'),
      secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This parameter is returned if the origin type is OSS and AuthType is set to private_cross_account, or the origin type is S3 and AuthType is set to private.SecretKey', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
      version?: string(name='Version', description='The version of the signature algorithm. This parameter is returned when the origin type is S3 and AuthType is private. The following two types are supported:

*   **v2**
*   **v4**

If this parameter is left empty, the default value v4 is used.', example='v2'),
    }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
    bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave this parameter empty if your record is not proxied. Valid values:

*   **image_video**
*   **api**
*   **web**', example='image_video'),
    comment?: string(name='Comment', description='The comments of the record.', example='This is a comment.'),
    createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-03-10T13:30:39Z'),
    data?: {
      algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.', example='1'),
      certificate?: string(name='Certificate', description='The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.', example='dGVzdGFkYWxrcw=='),
      fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. This parameter is required when you add a SSHFP record.', example='abcdef1234567890'),
      flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.', example='128'),
      keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. This parameter is required when you add a CAA record.', example='1'),
      matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
      port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. This parameter is required when you add an SRV record.', example='8707'),
      priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='10'),
      selector?: int32(name='Selector', description='The type of the certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='1'),
      tag?: string(name='Tag', description='The tag of the record. The Tag of a CAA record indicate its specific type and usage.', example='issue'),
      type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.', example='RSA'),
      usage?: int32(name='Usage', description='The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
      value?: string(name='Value', description='The record value or part of the record content. This parameter is returned when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on types of records.

*   **A/AAAA**: the IP address. Multiple IP addresses are separated with commas (,). There is at least one IPv4 address.
*   **CNAME**: the target domain name.
*   **NS**: the nameserver for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
      weight?: int32(name='Weight', description='The weight of the record, specified within the range of 0 to 65535. This parameter is required when you add SRV or URI records.', example='0'),
    }(name='Data', description='The DNS record information. The content returned by this parameter varies based on the record type.', example='{"value":"1.1.1.1"}'),
    hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. Valid values:

*   follow_hostname: matches the requested domain name.
*   follow_origin_domain: matches the origin\\\\"s domain name.', example='follow_origin_domain'),
    proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
    recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='a.example.com.cnamezone.com'),
    recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
    recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
    recordSourceType?: string(name='RecordSourceType', description='The origin type for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is returned by default.', example='OSS'),
    recordType?: string(name='RecordType', description='The type of the DNS record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
    siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
    siteName?: string(name='SiteName', description='The website name.', example='example.com'),
    ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='20'),
    updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-01-27T02:26:22Z'),
  }(name='RecordModel', description='The information about the queried record.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
}

model GetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
 *
 * @param request GetRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRecordResponse
 */
async function getRecordWithOptions(request: GetRecordRequest, runtime: Util.RuntimeOptions): GetRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
 *
 * @param request GetRecordRequest
 * @return GetRecordResponse
 */
async function getRecord(request: GetRecordRequest): GetRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecordWithOptions(request, runtime);
}

model GetRoutineRequest {
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='GetRoutine'),
}

model GetRoutineResponseBody = {
  codeVersions?: [ 
    {
      codeDescription?: string(name='CodeDescription', description='The description of the code version.', example='test ver code desc'),
      codeVersion?: string(name='CodeVersion', description='The code version.', example='1710120201067203242'),
      createTime?: string(name='CreateTime', description='The time when the code version was created.', example='2024-03-11T01:23:21Z'),
    }
  ](name='CodeVersions', description='The code versions.'),
  createTime?: string(name='CreateTime', description='The time when the routine was created.', example='2024-03-11T01:23:21Z'),
  defaultRelatedRecord?: string(name='DefaultRelatedRecord', description='The default record name to access.', example='routine1.example.com'),
  description?: string(name='Description', description='The description of the routine.', example='ZWRpdCByb3V0aW5lIGNvbmZpZyBkZXNjcmlwdGlvbg'),
  envs?: [ 
    {
      canaryAreaList?: [ string ](name='CanaryAreaList', description='The regions for canary release.'),
      canaryCodeVersion?: string(name='CanaryCodeVersion', description='The version number for canary release.', example='1710120201067577628'),
      codeVersion?: string(name='CodeVersion', description='The version number of the code in the environment.', example='1710120201067577628'),
      env?: string(name='Env', description='The environment type.', example='production'),
      specName?: string(name='SpecName', description='The specification.', example='5ms'),
    }
  ](name='Envs', description='The information about the environments.'),
  relatedRecords?: [ 
    {
      recordId?: long(name='RecordId', description='The record ID.', example='509348423011904'),
      recordName?: string(name='RecordName', description='The record name.', example='test-record-1.example.com'),
      siteId?: long(name='SiteId', description='The website ID.', example='54362329990032'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
    }
  ](name='RelatedRecords', description='The records associated with the routine.'),
  relatedRoutes?: [ 
    {
      byPass?: string(name='ByPass'),
      route?: string(name='Route', description='The route.', example='*.example.com/path1*'),
      routeId?: string(name='RouteId', description='The route ID.', example='d501cb8a2c951f32922d260040780c06'),
      siteId?: long(name='SiteId', description='The website ID.', example='54362329990032'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
    }
  ](name='RelatedRoutes', description='The routes associated with the routine.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetRoutineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
 *
 * @param request GetRoutineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineResponse
 */
async function getRoutineWithOptions(request: GetRoutineRequest, runtime: Util.RuntimeOptions): GetRoutineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRoutine',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
 *
 * @param request GetRoutineRequest
 * @return GetRoutineResponse
 */
async function getRoutine(request: GetRoutineRequest): GetRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoutineWithOptions(request, runtime);
}

model GetRoutineStagingCodeUploadInfoRequest {
  codeDescription?: string(name='CodeDescription', description='The code description.', example='the description of code'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='GetRoutineStagingCodeUploadInfo'),
}

model GetRoutineStagingCodeUploadInfoResponseBody = {
  codeVersion?: string(name='CodeVersion', description='The code version.', example='1710120201067203242'),
  ossPostConfig?: map[string]any(name='OssPostConfig', description='The configuration information that can be used to upload to OSS.', example='{
            "Url": "http://oss_fake_bucket_url",
            "OSSAccessKeyId": "xxx",
            "key": "site_er_js/hello.1418586423220543.unstable.js",
            "callback": "xxx==",
            "x:codeDescription": "xxx=",
            "policy": "xxx",
            "Signature": "xxx="
}'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetRoutineStagingCodeUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineStagingCodeUploadInfoResponseBody(name='body'),
}

/**
 * @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
 *
 * @description *   Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
 * *   A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
 *
 * @param request GetRoutineStagingCodeUploadInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineStagingCodeUploadInfoResponse
 */
async function getRoutineStagingCodeUploadInfoWithOptions(request: GetRoutineStagingCodeUploadInfoRequest, runtime: Util.RuntimeOptions): GetRoutineStagingCodeUploadInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRoutineStagingCodeUploadInfo',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
 *
 * @description *   Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
 * *   A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
 *
 * @param request GetRoutineStagingCodeUploadInfoRequest
 * @return GetRoutineStagingCodeUploadInfoResponse
 */
async function getRoutineStagingCodeUploadInfo(request: GetRoutineStagingCodeUploadInfoRequest): GetRoutineStagingCodeUploadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoutineStagingCodeUploadInfoWithOptions(request, runtime);
}

model GetRoutineStagingEnvIpResponseBody = {
  IPV4?: [ string ](name='IPV4', description='The IPv4 addresses.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model GetRoutineStagingEnvIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineStagingEnvIpResponseBody(name='body'),
}

/**
 * @summary Queries the IP addresses of staging environments for Edge Routine.
 *
 * @param request GetRoutineStagingEnvIpRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineStagingEnvIpResponse
 */
async function getRoutineStagingEnvIpWithOptions(runtime: Util.RuntimeOptions): GetRoutineStagingEnvIpResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetRoutineStagingEnvIp',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the IP addresses of staging environments for Edge Routine.
 *
 * @return GetRoutineStagingEnvIpResponse
 */
async function getRoutineStagingEnvIp(): GetRoutineStagingEnvIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoutineStagingEnvIpWithOptions(runtime);
}

model GetRoutineUserInfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
  routines?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the routine was created.', example='2024-03-11T01:23:02.883361712Z'),
      description?: string(name='Description', description='The routine description, which is Base64-encoded.', example='ZWRpdCByb3V0aW5lIGNvbmZpZyBkZXNjcmlwdGlvbg'),
      routineName?: string(name='RoutineName', description='The routine name.', example='test-routine1'),
    }
  ](name='Routines', description='The routines.'),
  subdomains?: [ string ](name='Subdomains', description='The subdomains.'),
}

model GetRoutineUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoutineUserInfoResponseBody(name='body'),
}

/**
 * @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
 *
 * @param request GetRoutineUserInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoutineUserInfoResponse
 */
async function getRoutineUserInfoWithOptions(runtime: Util.RuntimeOptions): GetRoutineUserInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetRoutineUserInfo',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
 *
 * @return GetRoutineUserInfoResponse
 */
async function getRoutineUserInfo(): GetRoutineUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoutineUserInfoWithOptions(runtime);
}

model GetScheduledPreloadJobRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.

This parameter is required.', example='GetScheduledPreloadJob'),
}

model GetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  createdAt?: string(name='CreatedAt', description='The time when the task was created.', example='2024-06-02T02:23:26Z'),
  domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
  errorInfo?: string(name='ErrorInfo', description='The error message that is returned.', example='invalid domain:test.com'),
  failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
  id?: string(name='Id', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
  name?: string(name='Name', description='The task name.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
  taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
  taskType?: string(name='TaskType', description='The task type. Valid values: refresh and preload.', example='preload'),
  urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
  urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
}

model GetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Queries a specified scheduled prefetch task based on the task ID.
 *
 * @param request GetScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetScheduledPreloadJobResponse
 */
async function getScheduledPreloadJobWithOptions(request: GetScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): GetScheduledPreloadJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a specified scheduled prefetch task based on the task ID.
 *
 * @param request GetScheduledPreloadJobRequest
 * @return GetScheduledPreloadJobResponse
 */
async function getScheduledPreloadJob(request: GetScheduledPreloadJobRequest): GetScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScheduledPreloadJobWithOptions(request, runtime);
}

model GetSiteRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model GetSiteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  siteModel?: {
    accessType?: string(name='AccessType', description='The DNS setup option for the website. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
    cnameZone?: string(name='CnameZone', description='The CNAME of the website domain. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='example.cname.com'),
    coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland.
*   **global**: global.
*   **overseas**: outside the Chinese mainland.', example='domestic'),
    createTime?: string(name='CreateTime', description='The time when the WEBsite was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format and is displayed in UTC.', example='2023-12-24T02:01:11Z'),
    instanceId?: string(name='InstanceId', description='The plan ID.', example='cas-merge-q6h0bv'),
    nameServerList?: string(name='NameServerList', description='The nameservers assigned to the website domain. They are separated by commas (,).', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
    planName?: string(name='PlanName', description='The plan name.', example='plan-168777532****'),
    planSpecName?: string(name='PlanSpecName', description='The specification of the plan associated with the website.', example='normal'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.', example='rg-aek26g6i6se****'),
    siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
    siteName?: string(name='SiteName', description='The website name.', example='example.com'),
    status?: string(name='Status', description='The website status. Valid values:

*   **pending**: The website is to be configured.
*   **active**: The website is active.
*   **offline**: The website is suspended.
*   **moved**: The website has been added and verified by another Alibaba Cloud account.', example='pending'),
    tags?: map[string]any(name='Tags', description='The tags of the website.', example='{"tag1":"value1"}'),
    updateTime?: string(name='UpdateTime', description='The time when the WEBsite was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format and is displayed in UTC.', example='2023-12-24T02:01:11Z'),
    vanityNSList?: map[string]string(name='VanityNSList', description='The information about custom nameservers of the website domain. The key is a custom nameserver name, and the value is the IP address of the custom nameserver. Multiple IP addresses are separated by commas (,).'),
    verifyCode?: string(name='VerifyCode', description='The code that is used to verify the website domain ownership. As part of the verification TXT record, this parameter is returned for websites that use CNAME setup.', example='verify_d516cb3740f81f0cef77d162edd1****'),
    versionManagement?: boolean(name='VersionManagement', description='The status of version management. If true is returned, version management is enabled for the website.', example='true'),
  }(name='SiteModel', description='The queried website information.'),
}

model GetSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteResponseBody(name='body'),
}

/**
 * @summary Queries information about a website based on the website ID.
 *
 * @param request GetSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteResponse
 */
async function getSiteWithOptions(request: GetSiteRequest, runtime: Util.RuntimeOptions): GetSiteResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about a website based on the website ID.
 *
 * @param request GetSiteRequest
 * @return GetSiteResponse
 */
async function getSite(request: GetSiteRequest): GetSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteWithOptions(request, runtime);
}

model GetSiteCurrentNSRequest {
  siteId?: long(name='SiteId', description='The website ID. It can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model GetSiteCurrentNSResponseBody = {
  NSList?: [ string ](name='NSList', description='The nameservers of the website.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model GetSiteCurrentNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCurrentNSResponseBody(name='body'),
}

/**
 * @summary Queries the nameservers configured for a website.
 *
 * @param request GetSiteCurrentNSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteCurrentNSResponse
 */
async function getSiteCurrentNSWithOptions(request: GetSiteCurrentNSRequest, runtime: Util.RuntimeOptions): GetSiteCurrentNSResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteCurrentNS',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the nameservers configured for a website.
 *
 * @param request GetSiteCurrentNSRequest
 * @return GetSiteCurrentNSResponse
 */
async function getSiteCurrentNS(request: GetSiteCurrentNSRequest): GetSiteCurrentNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteCurrentNSWithOptions(request, runtime);
}

model GetSiteCustomLogRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='11223***'),
}

model GetSiteCustomLogResponseBody = {
  configId?: long(name='ConfigId', description='The ID of the custom log field configuration.', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  isExist?: boolean(name='IsExist', description='Indicates whether the custom configuration exists.', example='true'),
  logCustomField?: {
    cookies?: [ string ](name='Cookies', description='The cookie fields.'),
    requestHeaders?: [ string ](name='RequestHeaders', description='The request header fields.'),
    responseHeaders?: [ string ](name='ResponseHeaders', description='The response header fields.'),
  }(name='LogCustomField', description='The custom fields.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  siteId?: long(name='SiteId', description='The website ID.', example='167026711***'),
}

model GetSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of custom log fields for a website.
 *
 * @description *   **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
 * *   **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
 * *   ****
 *
 * @param request GetSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteCustomLogResponse
 */
async function getSiteCustomLogWithOptions(request: GetSiteCustomLogRequest, runtime: Util.RuntimeOptions): GetSiteCustomLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of custom log fields for a website.
 *
 * @description *   **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
 * *   **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
 * *   ****
 *
 * @param request GetSiteCustomLogRequest
 * @return GetSiteCustomLogResponse
 */
async function getSiteCustomLog(request: GetSiteCustomLogRequest): GetSiteCustomLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteCustomLogWithOptions(request, runtime);
}

model GetSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456***'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

1.  cn: the Chinese mainland.
2.  sg: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud Simple Log Service (SLS).
2.  http: HTTP server.
3.  aws3: Amazon Simple Storage Service (S3).
4.  oss: Alibaba Cloud Object Storage Service (OSS).
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.', example='sls'),
  discardRate?: float(name='DiscardRate', description='The discard rate.', example='0.0'),
  fieldList?: string(name='FieldList', description='The log fields.', example='Client,UserAgent'),
  filterRules?: string(name='FilterRules', description='The filtering rules.', example='[]'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  sinkConfig?: any(name='SinkConfig', description='The delivery configuration.', example='{\\\\"Region\\\\": \\\\"cn-hangzhou\\\\", \\\\"Endpoint\\\\": \\\\"https://***.oss-cn-hangzhou.aliyuncs.com\\\\", \\\\"BucketPath\\\\": \\\\"hjy-test002/online-logs\\\\"}'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
  siteName?: string(name='SiteName', description='The website name.', example='test.***.com'),
  status?: string(name='Status', description='The status of the delivery task.

*   **online**
*   **offline**', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Queries a real-time log delivery task.
 *
 * @param request GetSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteDeliveryTaskResponse
 */
async function getSiteDeliveryTaskWithOptions(request: GetSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): GetSiteDeliveryTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a real-time log delivery task.
 *
 * @param request GetSiteDeliveryTaskRequest
 * @return GetSiteDeliveryTaskResponse
 */
async function getSiteDeliveryTask(request: GetSiteDeliveryTaskRequest): GetSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteDeliveryTaskWithOptions(request, runtime);
}

model GetSiteLogDeliveryQuotaRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

1.  dcdn_log_access_l1 (default): access logs.
2.  dcdn_log_er: Edge Routine logs.
3.  dcdn_log_waf: firewall logs.
4.  dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

1.  dcdn_log_access_l1 (default): access logs.
2.  dcdn_log_er: Edge Routine logs.
3.  dcdn_log_waf: firewall logs.
4.  dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', description='The remaining quota.', example='3'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C14840EF0EAAB6D97CDE0C5F6554ACE'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteLogDeliveryQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
 *
 * @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
 * **Take note of the following parameters:**
 * *   ``
 * *   `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
 * *   `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
 * **Response:**
 * *   If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
 *
 * @param request GetSiteLogDeliveryQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteLogDeliveryQuotaResponse
 */
async function getSiteLogDeliveryQuotaWithOptions(request: GetSiteLogDeliveryQuotaRequest, runtime: Util.RuntimeOptions): GetSiteLogDeliveryQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteLogDeliveryQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
 *
 * @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
 * **Take note of the following parameters:**
 * *   ``
 * *   `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
 * *   `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
 * **Response:**
 * *   If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
 *
 * @param request GetSiteLogDeliveryQuotaRequest
 * @return GetSiteLogDeliveryQuotaResponse
 */
async function getSiteLogDeliveryQuota(request: GetSiteLogDeliveryQuotaRequest): GetSiteLogDeliveryQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteLogDeliveryQuotaWithOptions(request, runtime);
}

model GetSiteWafSettingsRequest {
  path?: string(name='Path'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version of the website.', example='0'),
}

model GetSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  settings?: WafSiteSettings(name='Settings', description='The WAF configurations of the website.'),
}

model GetSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteWafSettingsResponseBody(name='body'),
}

/**
 * @summary Queries the Web Application Firewall (WAF) configurations of a website.
 *
 * @param request GetSiteWafSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteWafSettingsResponse
 */
async function getSiteWafSettingsWithOptions(request: GetSiteWafSettingsRequest, runtime: Util.RuntimeOptions): GetSiteWafSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteWafSettings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Web Application Firewall (WAF) configurations of a website.
 *
 * @param request GetSiteWafSettingsRequest
 * @return GetSiteWafSettingsResponse
 */
async function getSiteWafSettings(request: GetSiteWafSettingsRequest): GetSiteWafSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteWafSettingsWithOptions(request, runtime);
}

model GetUploadTaskRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456****'),
  uploadId?: long(name='UploadId', description='The ID of the file upload task. This field is assigned after you call the [UploadFile](https://help.aliyun.com/document_detail/2850466.html) operation.', example='159253299357****'),
}

model GetUploadTaskResponseBody = {
  description?: string(name='Description', description='The error message returned when the file upload task failed.', example='invalid url'),
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A52****'),
  status?: string(name='Status', description='The task status.

*   **INIT**: The task is being initialized.
*   **activacted**: The task is activated.
*   **running**: The task is running.
*   **success**: The task is successful.
*   **partial**: The task is partially successful.
*   **fail**: The task failed.', example='running'),
}

model GetUploadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadTaskResponseBody(name='body'),
}

/**
 * @summary Queries the execution status and running information of a file upload task based on the task ID.
 *
 * @param request GetUploadTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUploadTaskResponse
 */
async function getUploadTaskWithOptions(request: GetUploadTaskRequest, runtime: Util.RuntimeOptions): GetUploadTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUploadTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the execution status and running information of a file upload task based on the task ID.
 *
 * @param request GetUploadTaskRequest
 * @return GetUploadTaskResponse
 */
async function getUploadTask(request: GetUploadTaskRequest): GetUploadTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadTaskWithOptions(request, runtime);
}

model GetUserDeliveryTaskRequest {
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test_project'),
}

model GetUserDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   **dcdn_log_access_l1** (default): access logs.
*   **dcdn_log_er**: Edge Routine logs.
*   **dcdn_log_waf**: firewall logs.
*   **dcdn_log_ipa**: TCP/UDP proxy logs.', example='dcdn_log_er'),
  dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

*   sls: Alibaba Cloud Simple Log Service (SLS).
*   http: HTTP server.
*   aws3: Amazon Simple Storage Service (S3).
*   oss: Alibaba Cloud Object Storage Service (OSS).
*   kafka: Kafka.
*   aws3cmpt: S3-compatible storage service.', example='oss'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate.', example='0'),
  fieldList?: string(name='FieldList', description='The fields.', example='ClientRequestID,ClientRequestHost'),
  filterRules?: string(name='FilterRules', description='The filtering rules.', example='[{"ClientSSLProtocol": {"equals": ["TLSv1.3"]}}]'),
  requestId?: string(name='RequestId', description='The request ID.', example='7072132a-bd3c-46a6-9e81-aba3e0e3f861'),
  sinkConfig?: any(name='SinkConfig', description='The delivery configuration.', example='{\\\\"Project\\\\": \\\\"er-online-hjy-pro\\\\", \\\\"Logstore\\\\": \\\\"er-online-hjy-log\\\\", \\\\"Region\\\\": \\\\"cn-hangzhou\\\\", \\\\"Endpoint\\\\": \\\\"cn-hangzhou.log.aliyuncs.com\\\\", \\\\"Aliuid\\\\": \\\\"1077912128805410\\\\"}'),
  status?: string(name='Status', description='The status of the delivery task.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='testoss11'),
}

model GetUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Queries the information about a log delivery task by account.
 *
 * @description *   This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****
 * *   You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****
 * *   ****````
 *
 * @param request GetUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserDeliveryTaskResponse
 */
async function getUserDeliveryTaskWithOptions(request: GetUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): GetUserDeliveryTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a log delivery task by account.
 *
 * @description *   This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****
 * *   You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****
 * *   ****````
 *
 * @param request GetUserDeliveryTaskRequest
 * @return GetUserDeliveryTaskResponse
 */
async function getUserDeliveryTask(request: GetUserDeliveryTaskRequest): GetUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserDeliveryTaskWithOptions(request, runtime);
}

model GetUserLogDeliveryQuotaRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.

This parameter is required.', example='dcdn_log_access_l1'),
}

model GetUserLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', description='The remaining quota.', example='3'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model GetUserLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLogDeliveryQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the remaining log delivery quota of each log category in your account.
 *
 * @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
 *
 * @param request GetUserLogDeliveryQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserLogDeliveryQuotaResponse
 */
async function getUserLogDeliveryQuotaWithOptions(request: GetUserLogDeliveryQuotaRequest, runtime: Util.RuntimeOptions): GetUserLogDeliveryQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserLogDeliveryQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the remaining log delivery quota of each log category in your account.
 *
 * @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
 *
 * @param request GetUserLogDeliveryQuotaRequest
 * @return GetUserLogDeliveryQuotaResponse
 */
async function getUserLogDeliveryQuota(request: GetUserLogDeliveryQuotaRequest): GetUserLogDeliveryQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserLogDeliveryQuotaWithOptions(request, runtime);
}

model GetWafBotAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='The application key.', example='example_appkey'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafBotAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafBotAppKeyResponseBody(name='body'),
}

/**
 * @summary Queries the application key (AppKey) that is used for authentication and data exchange in bot behavior detection in Web Application Firewall (WAF).
 *
 * @param request GetWafBotAppKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKeyWithOptions(runtime: Util.RuntimeOptions): GetWafBotAppKeyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetWafBotAppKey',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the application key (AppKey) that is used for authentication and data exchange in bot behavior detection in Web Application Firewall (WAF).
 *
 * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKey(): GetWafBotAppKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafBotAppKeyWithOptions(runtime);
}

model GetWafFilterRequest {
  phase?: string(name='Phase', description='The WAF rule category to which the filter conditions to query belong.', example='http_bot'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1'),
  target?: string(name='Target', description='The condition for matching incoming requests.', example='characteristics'),
  type?: string(name='Type', description='The rule type.', example='http_custom_cc'),
}

model GetWafFilterResponseBody = {
  filter?: {
    fields?: [ 
      {
        key?: string(name='Key', description='The field for matched objects in the system.', example='http.request.headers'),
        label?: string(name='Label', description='The label of the matched object.', example='Header'),
        logics?: [ 
          {
            attributes?: int32(name='Attributes', description='A custom attribute. For example, this parameter can specify whether the value is case-sensitive.', example='1'),
            kind?: string(name='Kind', description='The type of the value input box. Valid values:

*   select:single
*   select:multi
*   input:single
*   input:multi', example='input:single'),
            negative?: boolean(name='Negative', description='Indicates whether the match result is inverted.'),
            operator?: string(name='Operator', description='The displayed matching characters.', example='Does not equal'),
            symbol?: string(name='Symbol', description='The matching characters in the system.', example='eq'),
            tip?: string(name='Tip', description='The tip on how to enter a valid value that is required by the rules.', example='e.g. image/jpeg'),
            type?: string(name='Type', description='The type of the value. Valid values:

*   integer
*   integer_slice
*   string
*   string_slice', example='string'),
            validator?: {
              errMsg?: string(name='ErrMsg', description='The error message when the validation fails.', example='Enter a valid expression'),
              length?: WafQuotaInteger(name='Length', description='The length of the value.'),
              pattern?: string(name='Pattern', description='The regular expression pattern of the value, which is used to validate strings.', example='^example$'),
              range?: WafQuotaInteger(name='Range', description='The range of the value, which is used to validate numbers.'),
            }(name='Validator', description='The validator, which defines the validation rules for a value.'),
          }
        ](name='Logics', description='The logical conditions.'),
        selector?: {
          data?: [ 
            {
              label?: string(name='Label', description='The label of the data.', example='China'),
              value?: string(name='Value', description='The value of the data.', example='CN'),
            }
          ](name='Data', description='The data. This parameter is available only when the value of the Kind parameter is data.'),
          kind?: string(name='Kind', description='The type of selector. Valid values: data and others.', example='data'),
        }(name='Selector', description='The selector, which defines how to select a matched object.'),
        sub?: boolean(name='Sub', description='Indicates whether the matched object contains a subfield.', example='true'),
        subTip?: string(name='SubTip', description='The tip on how to enter a subfield.', example='e.g. Content-Type'),
      }
    ](name='Fields', description='The matched objects and related properties.'),
    phase?: string(name='Phase', description='The WAF rule category.', example='http_bot'),
    target?: string(name='Target', description='The condition for matching incoming requests.', example='characteristics'),
    type?: string(name='Type', description='The rule type.', example='http_custom_cc'),
  }(name='Filter', description='The returned match conditions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafFilterResponseBody(name='body'),
}

/**
 * @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
 *
 * @param request GetWafFilterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafFilterResponse
 */
async function getWafFilterWithOptions(request: GetWafFilterRequest, runtime: Util.RuntimeOptions): GetWafFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWafFilter',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
 *
 * @param request GetWafFilterRequest
 * @return GetWafFilterResponse
 */
async function getWafFilter(request: GetWafFilterRequest): GetWafFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafFilterWithOptions(request, runtime);
}

model GetWafQuotaRequest {
  paths?: string(name='Paths', description='The type of WAF resources. Valid values:

*   managed_rules_group: the managed rule group.
*   list: the custom list.
*   page: the custom error page.
*   scene_policy: the scenario-specific policy.', example='page'),
}

model GetWafQuotaResponseBody = {
  quota?: {
    list?: {
      enable?: boolean(name='Enable', description='Indicates whether custom lists are enabled.'),
      items?: map[string]QuotaListItemsValue(name='Items', description='The quota information about all item types in the custom lists.'),
      numberItemsPerList?: WafQuotaInteger(name='NumberItemsPerList', description='The maximum number of items in each custom list.'),
      numberItemsTotal?: WafQuotaInteger(name='NumberItemsTotal', description='The maximum number of items in all custom lists.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The maximum number of custom lists.'),
    }(name='List', description='The quota information about custom lists.'),
    managedRulesGroup?: {
      enable?: boolean(name='Enable', description='Indicates whether the WAF managed rule group is enabled.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The maximum number of WAF managed rule groups.'),
    }(name='ManagedRulesGroup', description='The quota information about WAF managed rule groups.'),
    page?: {
      contentTypes?: map[string]QuotaPageContentTypesValue(name='ContentTypes', description='The quota information about custom error pages of all Content-Types.'),
      enable?: boolean(name='Enable', description='Indicates whether custom error pages are enabled.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The maximum number of custom error pages.'),
    }(name='Page', description='The quota information about custom error pages.'),
    scenePolicy?: {
      enable?: boolean(name='Enable', description='Indicates whether scenario-specific policies are enabled.'),
      numberTotal?: WafQuotaInteger(name='NumberTotal', description='The maximum number of scenario-specific policies.'),
    }(name='ScenePolicy', description='The quota information about scenario-specific policies.'),
  }(name='Quota', description='The quota information returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafQuotaResponseBody(name='body'),
}

/**
 * @summary Queries the quotas of Web Application Firewall (WAF) resources, such as managed rule groups, custom lists, custom error pages, and scenario-specific policies.
 *
 * @param request GetWafQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafQuotaResponse
 */
async function getWafQuotaWithOptions(request: GetWafQuotaRequest, runtime: Util.RuntimeOptions): GetWafQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.paths)) {
    query['Paths'] = request.paths;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWafQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the quotas of Web Application Firewall (WAF) resources, such as managed rule groups, custom lists, custom error pages, and scenario-specific policies.
 *
 * @param request GetWafQuotaRequest
 * @return GetWafQuotaResponse
 */
async function getWafQuota(request: GetWafQuotaRequest): GetWafQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafQuotaWithOptions(request, runtime);
}

model ListCacheReserveInstancesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the cache reserve instance.', example='sp-xcdn-96wblslz****'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 500**. Default value: **500**.', example='20'),
  sortBy?: string(name='SortBy', description='The criterion by which you want to sort the queried instances. Valid values:

*   ExpireTime: sorts the instances by the time when the instances expire.
*   CreateTime: sorts the instances by the time when the instances were purchased.', example='ExpireTime'),
  sortOrder?: string(name='SortOrder', description='The order by which you want to sort the queried instances. Valid values:

*   asc: in ascending order.
*   desc: in descending order.', example='desc'),
  status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   online: The instance is in service.
*   offline: The instance has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The instance is released.
*   overdue: The instance is stopped due to overdue payments.', example='ListCacheReserveInstances', nullable=false),
}

model ListCacheReserveInstancesResponseBody = {
  instanceInfo?: [ 
    {
      cacheReserveCapacity?: string(name='CacheReserveCapacity', description='The capacity of the cache reserve instance. Unit: GB.', example='512000'),
      cacheReserveRegion?: string(name='CacheReserveRegion', description='The region in which the cache reserve instance resides.', example='HK'),
      createTime?: string(name='CreateTime', description='The time when the cache reserve instance was purchased.', example='2024-04-12T05:41:51Z'),
      duration?: int32(name='Duration', description='The subscription period of the cache reserve instance. Unit: months.', example='3'),
      expireTime?: string(name='ExpireTime', description='The time when the cache reserve instance expires.', example='2024-10-05T16:00:00Z'),
      instanceId?: string(name='InstanceId', description='The ID of the cache reserve instance.', example='sp-xcdn-96wblslz****'),
      status?: string(name='Status', description='The status of the cache reserve instance. Valid values:

*   online: The instance is in service.
*   offline: The instance has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The instance is released.
*   overdue: The service was stopped due to overdue payments.', example='online'),
    }
  ](name='InstanceInfo', description='The cache reserve instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**. Valid values: **1 to 500**.', example='500'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
  totalPage?: int32(name='TotalPage', description='The total number of pages returned.', example='1'),
}

model ListCacheReserveInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCacheReserveInstancesResponseBody(name='body'),
}

/**
 * @summary Queries the cache reserve instances in your Alibaba Cloud account.
 *
 * @param request ListCacheReserveInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCacheReserveInstancesResponse
 */
async function listCacheReserveInstancesWithOptions(request: ListCacheReserveInstancesRequest, runtime: Util.RuntimeOptions): ListCacheReserveInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCacheReserveInstances',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the cache reserve instances in your Alibaba Cloud account.
 *
 * @param request ListCacheReserveInstancesRequest
 * @return ListCacheReserveInstancesResponse
 */
async function listCacheReserveInstances(request: ListCacheReserveInstancesRequest): ListCacheReserveInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCacheReserveInstancesWithOptions(request, runtime);
}

model ListCertificatesRequest {
  keyword?: string(name='Keyword', example='example'),
  pageNumber?: long(name='PageNumber', example='3'),
  pageSize?: long(name='PageSize', example='10'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  validOnly?: boolean(name='ValidOnly', example='1'),
}

model ListCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  result?: [ 
    {
      applyCode?: long(name='ApplyCode'),
      applyMessage?: string(name='ApplyMessage'),
      casId?: string(name='CasId', example='30000569'),
      commonName?: string(name='CommonName', example='www.example.com'),
      createTime?: string(name='CreateTime', example='2022-06-24 07:48:51'),
      DCV?: [ 
        {
          id?: string(name='Id'),
          key?: string(name='Key'),
          status?: string(name='Status'),
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='DCV'),
      fingerprintSha256?: string(name='FingerprintSha256', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456a****'),
      id?: string(name='Id', example='baba39055622c008b90285a8838e****'),
      issuer?: string(name='Issuer', example='GlobalSign nv-sa'),
      issuerCN?: string(name='IssuerCN', example='GlobalSign Organization Validation CA - SHA256 - G3'),
      name?: string(name='Name', example='yourCertName'),
      notAfter?: string(name='NotAfter', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', example='2023-03-31 02:08:00'),
      pubAlg?: string(name='PubAlg', example='RSA'),
      region?: string(name='Region', example='cn-hangzhou'),
      SAN?: string(name='SAN', example='www.example.com,*.example.com'),
      serialNumber?: string(name='SerialNumber', example='babab022c5e9b27bf9c64d7f4b16****'),
      sigAlg?: string(name='SigAlg', example='SHA256-RSA'),
      status?: string(name='Status', example='OK'),
      type?: string(name='Type', example='free'),
      updateTime?: string(name='UpdateTime', example='2023-04-20 06:18:42'),
    }
  ](name='Result'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCertificatesResponseBody(name='body'),
}

/**
 * @summary 查询站点下证书列表
 *
 * @param request ListCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCertificatesResponse
 */
async function listCertificatesWithOptions(request: ListCertificatesRequest, runtime: Util.RuntimeOptions): ListCertificatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点下证书列表
 *
 * @param request ListCertificatesRequest
 * @return ListCertificatesResponse
 */
async function listCertificates(request: ListCertificatesRequest): ListCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCertificatesWithOptions(request, runtime);
}

model ListCiphersRequest {
  ciphersGroup?: string(name='CiphersGroup', description='This parameter is required.', example='strict'),
}

model ListCiphersResponseBody = {
  ciphersGroup?: string(name='CiphersGroup', example='all'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  result?: [ string ](name='Result'),
  totalCount?: long(name='TotalCount', example='16'),
}

model ListCiphersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCiphersResponseBody(name='body'),
}

/**
 * @summary 查询TLS密码套件列表
 *
 * @param request ListCiphersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCiphersResponse
 */
async function listCiphersWithOptions(request: ListCiphersRequest, runtime: Util.RuntimeOptions): ListCiphersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCiphers',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询TLS密码套件列表
 *
 * @param request ListCiphersRequest
 * @return ListCiphersResponse
 */
async function listCiphers(request: ListCiphersRequest): ListCiphersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCiphersWithOptions(request, runtime);
}

model ListClientCaCertificatesRequest {
  pageNumber?: long(name='PageNumber', description='The page number. Valid values: 1 to 500.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 100.', example='20'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](~~ListSites~~) operation.

This parameter is required.', example='1234567890123'),
}

model ListClientCaCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
  result?: [ 
    {
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
      id?: string(name='Id', description='The certificate ID.', example='babab9db65ee5efcca9f3d41d4b5****'),
      issuer?: string(name='Issuer', description='The CA that issued the certificate.', example='GlobalSign nv-sa'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public-key algorithm of the certificate.', example='RSA'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.', example='OK'),
      type?: string(name='Type', description='The certificate type.', example='upload'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
    }
  ](name='Result', description='The queried client CA certificates.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='16'),
}

model ListClientCaCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCaCertificatesResponseBody(name='body'),
}

/**
 * @summary Queries a list of client certificate authority (CA) certificates for a website.
 *
 * @param request ListClientCaCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClientCaCertificatesResponse
 */
async function listClientCaCertificatesWithOptions(request: ListClientCaCertificatesRequest, runtime: Util.RuntimeOptions): ListClientCaCertificatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClientCaCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of client certificate authority (CA) certificates for a website.
 *
 * @param request ListClientCaCertificatesRequest
 * @return ListClientCaCertificatesResponse
 */
async function listClientCaCertificates(request: ListClientCaCertificatesRequest): ListClientCaCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientCaCertificatesWithOptions(request, runtime);
}

model ListClientCertificatesRequest {
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model ListClientCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  result?: [ 
    {
      CACertificateId?: string(name='CACertificateId', description='The ID of the CA certificate.', example='baba39055622c008b90285a8838ed09a'),
      commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='www.example.com'),
      createTime?: string(name='CreateTime', description='The time when the certificate was created.', example='2024-06-24 07:48:51'),
      id?: string(name='Id', description='The certificate ID.', example='babab9db65ee5efcca9f3d41d4b50d66'),
      issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='GlobalSign nv-sa'),
      name?: string(name='Name', description='The certificate name.', example='yourCertName'),
      notAfter?: string(name='NotAfter', description='The time when the certificate expires.', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', description='The time when the certificate takes effect.', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', description='The public key algorithm of the certificate.', example='RSA'),
      SAN?: string(name='SAN', description='The Subject Alternative Name (SAN) of the certificate.', example='www.example.com,*.example.com'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The signature algorithm of the certificate.', example='SHA256-RSA'),
      status?: string(name='Status', description='The certificate status.', example='active'),
      type?: string(name='Type', description='The certificate type.', example='dcdn'),
      updateTime?: string(name='UpdateTime', description='The time when the certificate was updated.', example='2024-07-20 06:18:42'),
    }
  ](name='Result', description='The client certificates.'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='5'),
}

model ListClientCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCertificatesResponseBody(name='body'),
}

/**
 * @summary Queries client certificates configured for a website.
 *
 * @param request ListClientCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClientCertificatesResponse
 */
async function listClientCertificatesWithOptions(request: ListClientCertificatesRequest, runtime: Util.RuntimeOptions): ListClientCertificatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClientCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries client certificates configured for a website.
 *
 * @param request ListClientCertificatesRequest
 * @return ListClientCertificatesResponse
 */
async function listClientCertificates(request: ListClientCertificatesRequest): ListClientCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientCertificatesWithOptions(request, runtime);
}

model ListEdgeContainerAppRecordsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  orderKey?: string(name='OrderKey', description='The sorting field. Valid values:

*   CreateTime: the time when the domain name was associated.
*   CreateTime: the time when the domain name was last modified.', example='CreateTime'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='DESC'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Valid values: 1 to 500.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword that is used for the search.', example='ver-1006157458290860032'),
}

model ListEdgeContainerAppRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  records?: [ 
    {
      appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
      cname?: string(name='Cname', description='The CNAME of the associated domain name.', example='kdxceo****.yun****.com'),
      configId?: long(name='ConfigId', description='The configuration ID of the associated domain name.', example='27522948436****'),
      createTime?: string(name='CreateTime', description='The time when the domain name was added. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      recordId?: long(name='RecordId', description='The record ID of the associated domain name.', example='266****'),
      recordName?: string(name='RecordName', description='The associated domain name.', example='a.example.com'),
      schemdId?: int32(name='SchemdId', description='The scheduling domain ID of the associated domain name.', example='123456'),
      siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
      updateTime?: string(name='UpdateTime', description='The time when the scheduling domain ID or CNAME was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records', description='The details about the associated domain names.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The number of domain names that are associated with the specified application.', example='2'),
}

model ListEdgeContainerAppRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppRecordsResponseBody(name='body'),
}

/**
 * @summary Lists domain names that are associated with a containerized application.
 *
 * @param request ListEdgeContainerAppRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppRecordsResponse
 */
async function listEdgeContainerAppRecordsWithOptions(request: ListEdgeContainerAppRecordsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerAppRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerAppRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists domain names that are associated with a containerized application.
 *
 * @param request ListEdgeContainerAppRecordsRequest
 * @return ListEdgeContainerAppRecordsResponse
 */
async function listEdgeContainerAppRecords(request: ListEdgeContainerAppRecordsRequest): ListEdgeContainerAppRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerAppRecordsWithOptions(request, runtime);
}

model ListEdgeContainerAppVersionsRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.

This parameter is required.', example='app-88068867578379****'),
  orderKey?: string(name='OrderKey', description='The sorting field. Valid values:

*   Name: the version name.
*   CreateTime: the time when the version was created.
*   UpdateTime: the time when the version was last modified.', example='Name'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='DESC'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 65535.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword used for the search.', example='ver-100568263967926****'),
  searchType?: string(name='SearchType', description='The parameter used for fuzzy search. Valid values: VersionId and Name.', example='VersionId'),
}

model ListEdgeContainerAppVersionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='20'),
  versions?: [ 
    {
      appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
      containers?: [ 
        {
          args?: string(name='Args', description='The arguments that are passed to the container startup command.', example='-c a=1'),
          command?: string(name='Command', description='The command that is used to start the container.', example='openresty -g \\\\"daemon off;\\\\"'),
          envVariables?: string(name='EnvVariables', description='The environment variables of the container.', example='ENV=prod'),
          image?: string(name='Image', description='The address of the container image.', example='nginx'),
          name?: string(name='Name', description='The container name.', example='container1'),
          postStart?: string(name='PostStart', description='The command that is run before the container is started. Format: `{"exec":{"command":["cat","/etc/group"\\\\]}}`.

If you want to cancel this configuration, set the parameter value to `""` or `{}`. If you do not specify this parameter, this configuration is ignored.', example='{\\\\"exec\\\\":{\\\\"command\\\\":[\\\\"bash\\\\",\\\\"-c\\\\",\\\\"cd /home/admin/'),
          preStop?: string(name='PreStop', description='The command that is run before the container is stopped.', example='sh stop.sh'),
          probeContent?: {
            command?: string(name='Command', description='The probe command.', example='openresty -g  "daemon off;'),
            failureThreshold?: int32(name='FailureThreshold', description='The number of consecutive failed health checks required for a container to be considered as unhealthy.', example='3'),
            host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
            httpHeaders?: string(name='HttpHeaders', description='The request headers that are included in the container health check request.', example='{\\\\"Content-Type\\\\":\\\\"application/json\\\\"}'),
            initialDelaySeconds?: int32(name='InitialDelaySeconds', description='The latency for container probe initialization.', example='10'),
            path?: string(name='Path', description='The path of the container health check.', example='/health_check'),
            periodSeconds?: int32(name='PeriodSeconds', description='The interval between container health checks.', example='5'),
            port?: int32(name='Port', description='The port of the container health check.', example='80'),
            scheme?: string(name='Scheme', description='The protocol that the container health check request uses.', example='http'),
            successThreshold?: int32(name='SuccessThreshold', description='The number of consecutive successful health checks required for a container to be considered as healthy.', example='1'),
            timeoutSeconds?: int32(name='TimeoutSeconds', description='The timeout period of the container health check.', example='30'),
          }(name='ProbeContent', description='The container probe content.'),
          probeType?: string(name='ProbeType', description='The probe type of the container.', example='httpGet'),
          spec?: string(name='Spec', description='The compute specification of the container.', example='1C2G'),
        }
      ](name='Containers', description='The containers in the version.'),
      createTime?: string(name='CreateTime', description='The time when the version was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2022-11-10T02:53:16Z'),
      lastPublishTime?: string(name='LastPublishTime', description='The time when the version was last released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-02-10T02:48:36Z'),
      name?: string(name='Name', description='The version name.', example='version01'),
      publishTime?: string(name='PublishTime', description='The time when the version was released. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-02-10T02:48:36Z'),
      remarks?: string(name='Remarks', description='The remarks.', example='test version'),
      status?: string(name='Status', description='The status of the current version. Valid values:

*   **created**
*   **failed**
*   **creating**', example='created'),
      updateTime?: string(name='UpdateTime', description='The time when the version was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-04-16 10:51:00'),
      versionId?: string(name='VersionId', description='The version ID.', example='ver-87962637161651****'),
    }
  ](name='Versions', description='The versions.'),
}

model ListEdgeContainerAppVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppVersionsResponseBody(name='body'),
}

/**
 * @summary Lists versions of all containerized applications.
 *
 * @param request ListEdgeContainerAppVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppVersionsResponse
 */
async function listEdgeContainerAppVersionsWithOptions(request: ListEdgeContainerAppVersionsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerAppVersionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerAppVersions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists versions of all containerized applications.
 *
 * @param request ListEdgeContainerAppVersionsRequest
 * @return ListEdgeContainerAppVersionsResponse
 */
async function listEdgeContainerAppVersions(request: ListEdgeContainerAppVersionsRequest): ListEdgeContainerAppVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerAppVersionsWithOptions(request, runtime);
}

model ListEdgeContainerAppsRequest {
  orderKey?: string(name='OrderKey', description='The sorting field. This parameter is left empty by default. Valid values:

*   Name: the version name.
*   CreateTime: the time when the version was created.
*   UpdateTime: the time when the version was last modified.', example='CreateTime'),
  orderType?: string(name='OrderType', description='The order in which you want to sort the query results. This parameter is left empty by default. Valid values:

*   ASC: in ascending order.
*   DESC: in descending order.', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**. Valid values: 1 to 65535.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **20**. Valid values: 1 to 500.', example='20'),
  searchKey?: string(name='SearchKey', description='The search keyword.', example='ver-1005682639679266816'),
  searchType?: string(name='SearchType', description='The search criterion based on which you want to perform fuzzy search. Valid values:

*   Appid: the application ID.
*   Name: the application name.', example='Appid'),
}

model ListEdgeContainerAppsResponseBody = {
  apps?: [ 
    {
      appId?: string(name='AppId', description='The application ID.', example='app-88068867578379****'),
      createTime?: string(name='CreateTime', description='The time when the version was created.', example='2022-12-01T16:16:27.418298794+08:00'),
      domainName?: string(name='DomainName', description='The domain name associated with the application.', example='test.com'),
      gatewayType?: string(name='GatewayType', description='The type of the gateway. Valid values:

*   l7: Layer 7 gateway.
*   l4: Layer 4 gateway.', example='l7'),
      healthCheck?: {
        failTimes?: int32(name='FailTimes', description='The number of consecutive failed health checks for an application to be considered unhealthy.', example='5'),
        host?: string(name='Host', description='The domain name that is used for health checks.', example='test.com'),
        httpCode?: string(name='HttpCode', description='The range of health check status codes that indicate successful health checks.', example='http_2XX'),
        interval?: int32(name='Interval', description='The interval between health checks. Unit: seconds.', example='5'),
        method?: string(name='Method', description='The HTTP method used for health checks.', example='GET'),
        port?: int32(name='Port', description='The health check port.', example='8080'),
        succTimes?: int32(name='SuccTimes', description='The number of consecutive successful health checks for an application to be considered healthy.', example='1'),
        timeout?: int32(name='Timeout', description='The timeout period of health checks. Unit: seconds.', example='60'),
        type?: string(name='Type', description='The type of health checks. Valid values:

*   l7
*   l4', example='l7'),
        uri?: string(name='Uri', description='The health check URL.', example='/health_check'),
      }(name='HealthCheck', description='The information about health checks.'),
      name?: string(name='Name', description='The application name.', example='app-test'),
      percentage?: int32(name='Percentage', description='The progress of the application creation task in percentage.', example='100'),
      quicCid?: string(name='QuicCid', description='Indicates whether QUIC is enabled.', example='false'),
      remarks?: string(name='Remarks', description='The remarks.', example='test app'),
      servicePort?: int32(name='ServicePort', description='The server port. Valid values: 1 to 65535.', example='80'),
      status?: string(name='Status', description='The status of the application. Valid values:

*   creating: The application is being created.
*   failed: The application failed to be created.
*   created: The application is created.', example='created'),
      targetPort?: int32(name='TargetPort', description='The backend port, which is also the service port of the application. Valid values: 1 to 65535.', example='80'),
      updateTime?: string(name='UpdateTime', description='The time when the application was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.', example='2023-11-15T12:11:02Z'),
      versionCount?: int32(name='VersionCount', description='The number of versions of the application.', example='10'),
    }
  ](name='Apps', description='The queried applications.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**. Valid values: 1 to 65535.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='10'),
}

model ListEdgeContainerAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppsResponseBody(name='body'),
}

/**
 * @summary Queries all containerized applications in your Alibaba Cloud account.
 *
 * @param request ListEdgeContainerAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppsResponse
 */
async function listEdgeContainerAppsWithOptions(request: ListEdgeContainerAppsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderKey)) {
    query['OrderKey'] = request.orderKey;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.searchType)) {
    query['SearchType'] = request.searchType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerApps',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all containerized applications in your Alibaba Cloud account.
 *
 * @param request ListEdgeContainerAppsRequest
 * @return ListEdgeContainerAppsResponse
 */
async function listEdgeContainerApps(request: ListEdgeContainerAppsRequest): ListEdgeContainerAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerAppsWithOptions(request, runtime);
}

model ListEdgeContainerRecordsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='20'),
  recordMatchType?: string(name='RecordMatchType', description='The match mode to filter the record names:

*   **fuzzy**
*   **prefix**
*   **suffix**
*   **exact** (default)', example='fuzzy'),
  recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='1234567890123'),
}

model ListEdgeContainerRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured.', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
      siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records', description='The records.'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='50'),
}

model ListEdgeContainerRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerRecordsResponseBody(name='body'),
}

/**
 * @summary Queries the records that are associated with Edge Container for a website.
 *
 * @param request ListEdgeContainerRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerRecordsResponse
 */
async function listEdgeContainerRecordsWithOptions(request: ListEdgeContainerRecordsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the records that are associated with Edge Container for a website.
 *
 * @param request ListEdgeContainerRecordsRequest
 * @return ListEdgeContainerRecordsResponse
 */
async function listEdgeContainerRecords(request: ListEdgeContainerRecordsRequest): ListEdgeContainerRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerRecordsWithOptions(request, runtime);
}

model ListEdgeRoutinePlansResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 500.', example='20'),
  planInfo?: [ 
    {
      billingMode?: string(name='BillingMode', description='The billing method. Valid values:

*   PREPAY: subscription.
*   POSTPAY: pay-as-you-go.', example='POSTPAY'),
      erRoutineCodeVersionQuota?: string(name='ErRoutineCodeVersionQuota', description='The maximum number of versions that each routine supports.', example='20'),
      erRoutineQuota?: string(name='ErRoutineQuota', description='The maximum of routines that can be created.', example='100'),
      erRoutineRouteSiteCountQuota?: string(name='ErRoutineRouteSiteCountQuota', description='The maximum number of websites with which each routine can be associated.', example='100'),
      paymentMethod?: string(name='PaymentMethod', description='The payment method. Valid values:

*   er_free
*   er_pay', example='er_free'),
      planName?: string(name='PlanName', description='The plan name.', example='test_plan'),
    }
  ](name='PlanInfo', description='The plans.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  totalPage?: int32(name='TotalPage', description='The total number of pages returned.', example='1'),
}

model ListEdgeRoutinePlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutinePlansResponseBody(name='body'),
}

/**
 * @summary Queries Edge Routine plans.
 *
 * @param request ListEdgeRoutinePlansRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlansWithOptions(runtime: Util.RuntimeOptions): ListEdgeRoutinePlansResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListEdgeRoutinePlans',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Edge Routine plans.
 *
 * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlans(): ListEdgeRoutinePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeRoutinePlansWithOptions(runtime);
}

model ListEdgeRoutineRecordsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='20'),
  recordMatchType?: string(name='RecordMatchType', description='The match mode to filter the record names.

*   **fuzzy**: fuzzy match.
*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **exact** (default): exact match .', example='fuzzy'),
  recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456****'),
}

model ListEdgeRoutineRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The total number of pages returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
      siteId?: long(name='SiteId', description='The website ID.', example='5407498413****'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-22T08:32:02Z'),
    }
  ](name='Records', description='The list of records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='121'),
}

model ListEdgeRoutineRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutineRecordsResponseBody(name='body'),
}

/**
 * @summary Queries the records that are associated with Edge Routine routes for a website.
 *
 * @description >  You can call this operation 100 times per second.
 *
 * @param request ListEdgeRoutineRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeRoutineRecordsResponse
 */
async function listEdgeRoutineRecordsWithOptions(request: ListEdgeRoutineRecordsRequest, runtime: Util.RuntimeOptions): ListEdgeRoutineRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeRoutineRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the records that are associated with Edge Routine routes for a website.
 *
 * @description >  You can call this operation 100 times per second.
 *
 * @param request ListEdgeRoutineRecordsRequest
 * @return ListEdgeRoutineRecordsResponse
 */
async function listEdgeRoutineRecords(request: ListEdgeRoutineRecordsRequest): ListEdgeRoutineRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeRoutineRecordsWithOptions(request, runtime);
}

model ListInstanceQuotasRequest {
  instanceId?: string(name='InstanceId', description='The plan ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='sp-xcdn-96wblslz****'),
  quotaNames?: string(name='QuotaNames', description='The quota names in the plan. Separate multiple names with commas (,). Valid values:

*   **waf:phase:http_anti_scan:actions**: the actions in WAF scan protection rules.
*   **waf:phase:http_bot:actions**: all actions in WAF bot management rules.
*   **waf:phase:http_bot:http_custom_cc_dev:characteristic:fields**: the statistical objects for the custom device-based throttling in WAF bot management rules.
*   **waf:phase:http_bot:http_custom_cc_ip:characteristic:fields**: the statistical objects for the custom IP address-based throttling in WAF bot management rules.
*   ****waf:phase:http_bot:match:symbols****: the match operators in WAF bot management rules.
*   **waf:phase:http_bot:http_custom_cc:characteristic:fields**: the statistical objects for the custom session-based throttling in WAF bot management rules.
*   **waf:phase:http_bot:match:fields**: the match fields in WAF bot management rules.
*   **waf:phase:http_whitelist:match:symbols**: the match operators in WAF whitelist rules.
*   **waf:phase:http_whitelist:match:fields**: the match fields in WAF whitelist rules.
*   **waf:phase:http_anti_scan:http_directory_traversal:characteristic:fields**: the statistical objects for directory traversal blocking in WAF scan protection rules.
*   **waf:phase:http_anti_scan:http_high_frequency:characteristic:fields**: the statistical objects for high-frequency scanning blocking in WAF scan protection rules.
*   **waf:phase:http_anti_scan:match:symbols**: the match operators in WAF scan protection rules.
*   **waf:phase:http_anti_scan:match:fields**: the match fields in WAF scan protection rules.
*   **waf:phase:http_managed:actions**: the actions in WAF managed rules.
*   **waf:phase:http_managed:group:reference:ids**: the referenced rule groups in WAF managed rules.
*   **waf:phase:http_ratelimit:actions**: the actions in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:ttls**: the action durations in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:intervals**: the statistical durations in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:http_ratelimit:characteristic:fields**: the match characteristics in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:match:symbols**: the match operators in WAF rate limiting rules.
*   **waf:phase:http_ratelimit:match:fields**: the match fields in WAF rate limiting rules.
*   **waf:phase:http_custom:actions**: the actions in custom WAF rules.
*   **waf:phase:http_custom:match:symbols**: the match operators in custom WAF rules.
*   **waf:phase:http_custom:match:fields**: the match fields in custom WAF rules.
*   **waiting_room|queuing_method**: the queuing method in Waiting Room.
*   **origin_rules|origin_scheme**: the origin protocol in origin rules.
*   **origin_rules|origin_sni**: the origin Server Name Indication (SNI) in origin rules.
*   **origin_rules|origin_host**: the origin host in origin rules.
*   **fourlayeracceleration**: TCP/UDP proxy.
*   **rtlog_service**: the availability to collect real-time logs.
*   **dashboard_traffic**: the value-added capability of traffic analytics.
*   **custom_name_server**: the availability to configure custom nameservers.
*   **waf:phase:http_bot:enable**: the availability to enable WAF bot management.
*   **waf:phase:http_whitelist:enable**: the availability to configure WAF whitelist rules.
*   **instantlog**: the availability to collect instant logs.
*   **waf:phase:http_anti_scan:enable**: the availability to enable WAF scan protection.
*   **waf:phase:http_managed:group:reference:enable**: the availability to configure reference rule groups in WAF managed rules.
*   **waf:phase:http_managed:enable**: the availability to configure WAF managed rules.
*   **waf:phase:http_ratelimit:on_hit:enable**: the availability to configure whether to apply rate limiting to all requests that hit the cache.
*   **ddos**: DDoS mitigation.
*   **waf:phase:http_ratelimit:enable**: the availability to configure WAF rate limiting.
*   **waf:phase:http_custom:enable**: the availability to configure custom WAF rules.
*   **waf:phase:all:page:reference:enable**: the availability to configure custom error pages.
*   **rules_support_regex**: the support for regular expressions in rules engine.
*   **waiting_room_event**: scheduled events in Waiting Room.
*   **waiting_room_rule**: the availability to allow requests to bypass the waiting room.
*   **waiting_room|json_response**: the availability to enable JSON response in Waiting Room.
*   **waiting_room|disable_session_renewal**: the availability to disable session renewal in Waiting Room.
*   **origin_rules|dns_record**: DNS records in origin rules.
*   **managed_transforms|add_client_geolocation_headers**: the availability to configure whether to add geolocation headers in transform rules.
*   **tiered_cache|regional_enable**: regional tiered cache.
*   **real_client_ip_header**: the availability to configure whether to add the real IP address of a client to the request header.
*   **data_timerange**: minute-level time range for data query.
*   **cache_rules|edge_cache_ttl**: POP cache TTL.
*   **cache_rules|browser_cache_ttl**: browser cache TTL.
*   **fourLayerRecordCount**: the maximum number of records of websites for which TCP/UDP acceleration is enabled.
*   **waitingroomRuleCount**: the maximum number of rules per waiting room.
*   **waitingroomEventCount**: the maximum number of events per waiting room.
*   **waitingroom_custom_pathhost**: the availability to configure the hostname and path in Waiting Room.
*   **er_routers**: Edge Routine routes.
*   **cache_rules|rule_quota**: the maximum number of cache rules.
*   **configuration_rules|rule_quota**: the maximum number of configuration rules.
*   **redirect_rules|rule_quota**: the redirect rules.
*   **compression_rules|rule_quota**: the maximum number of compression rules.
*   **origin_rules|rule_quota**: the maximum number of origin rules.
*   **waf:phase:http_bot:rulesets_per_instance:less_than_or_equal**: the maximum number of rulesets in WAF bot management per plan.
*   **waf:phase:http_whitelist:rules_per_instance:less_than_or_equal**: the maximum number of WAF whitelist rules per plan.
*   **rtlog_quota**: the maximum number of real-time log delivery tasks.
*   **waf:phase:http_anti_scan:rulesets_per_instance:less_than_or_equal**: the maximum number of rulesets in WAF scan protection per plan.
*   **ddos_instance**: the number of Anti-DDoS Proxy instances.
*   **waf:phase:http_ratelimit:rules_per_instance:less_than_or_equal**: the maximum number of WAF rate limiting rules.
*   **waf:phase:http_custom:rules_per_instance:less_than_or_equal**: the maximum number of custom WAF rules per plan.
*   **ruleNestedConditionalCount**: the number of nested layers in a rule.
*   **waiting_room_rule**: Waiting Room.
*   **transition_rule**: the maximum number of transform rules.
*   **customHttpCert**: the maximum number of custom certificates.
*   **free_cert**: the maximum number of free certificates.
*   **preload**: prefetch.
*   **refresh_cache_tag**: purge by cache tag.
*   **refresh_ignore_param**: purge by URL with specified parameters ignored.
*   **refresh_directory**: purge by directory.
*   **refresh_hostname**: purge by hostname.
*   **refresh_all**: purge all cache.
*   **refresh_file**: purge by URL.
*   **wildcard**: the maximum number of wildcard domains.
*   **recordCount**: the maximum number of Layer 7 records.
*   **siteCount**: the maximum number of websites that can be associated with the plan.
*   **https|rule_quota**: the maximum number of SSL/TLS rules.

This parameter is required.', example='preload, free_cert'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='2882900****', nullable=false),
}

model ListInstanceQuotasResponseBody = {
  instanceId?: string(name='InstanceId', description='The plan ID.', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', description='The quota name.', example='customHttpCert'),
      quotaValue?: string(name='QuotaValue', description='The quota value.', example='10'),
      quotaValueType?: string(name='QuotaValueType', description='The threshold type of the quota. Valid values:

*   value: enumerates the values of the quota.
*   bool: specifies whether the quota is available.
*   num: the upper limit of the quota.
*   range: the value range for the quota.
*   custom: other types than the preceding four quota threshold types.', example='bool'),
    }
  ](name='Quotas', description='The quotas in the plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247B78'),
  status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.', example='online'),
}

model ListInstanceQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasResponseBody(name='body'),
}

/**
 * @summary Queries the quota details in a subscription plan.
 *
 * @param request ListInstanceQuotasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceQuotasResponse
 */
async function listInstanceQuotasWithOptions(request: ListInstanceQuotasRequest, runtime: Util.RuntimeOptions): ListInstanceQuotasResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceQuotas',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the quota details in a subscription plan.
 *
 * @param request ListInstanceQuotasRequest
 * @return ListInstanceQuotasResponse
 */
async function listInstanceQuotas(request: ListInstanceQuotasRequest): ListInstanceQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceQuotasWithOptions(request, runtime);
}

model ListInstanceQuotasWithUsageRequest {
  instanceId?: string(name='InstanceId', description='The plan ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='sp-xcdn-96wblslz****'),
  quotaNames?: string(name='QuotaNames', description='The quota names in the plan. Separate the quota names with commas (,). You can query up to 10 quota names at a time. Valid values:

*   **customHttpCert**: the custom certificates.
*   **transition_rule**: the transform rules.
*   **waiting_room**: the waiting rooms.
*   **https|rule_quota**: the SSL/TLS rules.
*   **cache_rules|rule_quota**: the cache rules.
*   **configuration_rules|rule_quota**: the configuration rules.
*   **redirect_rules|rule_quota**: the redirect rules.
*   **compression_rules|rule_quota**: the compression rules.
*   **origin_rules|rule_quota**: the origin rules.

This parameter is required.', example='customHttpCert'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='1232223****', nullable=false),
}

model ListInstanceQuotasWithUsageResponseBody = {
  instanceId?: string(name='InstanceId', description='The plan ID.[](~~2850189~~)', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', description='The quota name.', example='redirect_rules|rule_quota'),
      quotaValue?: string(name='QuotaValue', description='The quota value.', example='10'),
      siteUsage?: [ 
        {
          siteId?: long(name='SiteId', description='The website ID.', example='34818329392****'),
          siteName?: string(name='SiteName', description='The website name.', example='test.top'),
          siteUsage?: string(name='SiteUsage', description='The quota usage of the website.', example='1'),
        }
      ](name='SiteUsage', description='The usage of the quota in each website associated with the plan.'),
      usage?: string(name='Usage', description='The quota usage.', example='3'),
    }
  ](name='Quotas', description='The quotas and their actual usage in the plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.', example='online'),
}

model ListInstanceQuotasWithUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasWithUsageResponseBody(name='body'),
}

/**
 * @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
 *
 * @param request ListInstanceQuotasWithUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceQuotasWithUsageResponse
 */
async function listInstanceQuotasWithUsageWithOptions(request: ListInstanceQuotasWithUsageRequest, runtime: Util.RuntimeOptions): ListInstanceQuotasWithUsageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceQuotasWithUsage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
 *
 * @param request ListInstanceQuotasWithUsageRequest
 * @return ListInstanceQuotasWithUsageResponse
 */
async function listInstanceQuotasWithUsage(request: ListInstanceQuotasWithUsageRequest): ListInstanceQuotasWithUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceQuotasWithUsageWithOptions(request, runtime);
}

model ListKvsRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreatevNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  pageNumber?: int32(name='PageNumber', description='The page number. The product of PageNumber and PageSize cannot exceed 50,000.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 50. Maximum value: 100.', example='50'),
  prefix?: string(name='Prefix', description='The prefix to query.', example='prefix-'),
}

model ListKvsResponseBody = {
  keys?: [ 
    {
      name?: string(name='Name', description='The key name.', example='Key1'),
      updateTime?: string(name='UpdateTime', description='The time when the key was last updated.', example='2021-12-13T07:46:03Z'),
    }
  ](name='Keys', description='The key-value pairs.'),
  pageNumber?: int32(name='PageNumber', description='The total number of pages returned.', example='100'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1024'),
}

model ListKvsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListKvsResponseBody(name='body'),
}

/**
 * @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
 *
 * @param request ListKvsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListKvsResponse
 */
async function listKvsWithOptions(request: ListKvsRequest, runtime: Util.RuntimeOptions): ListKvsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListKvs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
 *
 * @param request ListKvsRequest
 * @return ListKvsResponse
 */
async function listKvs(request: ListKvsRequest): ListKvsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listKvsWithOptions(request, runtime);
}

model ListListsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  queryArgs?: {
    desc?: boolean(name='Desc', description='Specifies whether to sort the returned data in descending order.', example='true'),
    descriptionLike?: string(name='DescriptionLike', description='The list description for fuzzy search.', example='a custom list'),
    idLike?: string(name='IdLike', description='The list ID for fuzzy search.', example='40000001'),
    itemLike?: string(name='ItemLike', description='The list content for fuzzy search.', example='10.1.1.1'),
    kind?: string(name='Kind', example='ip'),
    nameItemLike?: string(name='NameItemLike', description='The list name and content for fuzzy search.', example='10.1.1.1'),
    nameLike?: string(name='NameLike', description='The list name for fuzzy search.', example='example'),
    orderBy?: string(name='OrderBy', description='The column by which you want to sort the returned data.', example='id'),
  }(name='QueryArgs', description='The query arguments in the JSON format, which contain filter conditions.', example='ListLists'),
}

model ListListsShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  queryArgsShrink?: string(name='QueryArgs', description='The query arguments in the JSON format, which contain filter conditions.', example='ListLists'),
}

model ListListsResponseBody = {
  lists?: [ 
    {
      description?: string(name='Description', description='The list description.', example='a custom list'),
      id?: long(name='Id', description='The ID of the custom list.[](~~2850217~~)', example='40000001'),
      kind?: string(name='Kind', description='The list type.', example='ip'),
      length?: long(name='Length', description='The length of the list information array, which indicates how many items the list contains.', example='100'),
      name?: string(name='Name', description='The list name.', example='example'),
      updateTime?: string(name='UpdateTime', description='The time when the list was last modified.', example='2024-01-01T00:00:00Z'),
    }
  ](name='Lists', description='The array that contains list information, including list data after paging.'),
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='The total number of filtered lists.', example='5'),
  usage?: long(name='Usage', description='The number of created lists.', example='10'),
}

model ListListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListsResponseBody(name='body'),
}

/**
 * @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
 *
 * @param tmpReq ListListsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListListsResponse
 */
async function listListsWithOptions(tmpReq: ListListsRequest, runtime: Util.RuntimeOptions): ListListsResponse {
  Util.validateModel(tmpReq);
  var request = new ListListsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLists',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
 *
 * @param request ListListsRequest
 * @return ListListsResponse
 */
async function listLists(request: ListListsRequest): ListListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListsWithOptions(request, runtime);
}

model ListLoadBalancerRegionsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1024'),
}

model ListLoadBalancerRegionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1024'),
  regions?: [ 
    {
      regionCnName?: string(name='RegionCnName', description='The Chinese name of the region.'),
      regionCode?: string(name='RegionCode', description='The code of the region.', example='SEAS'),
      regionEnName?: string(name='RegionEnName', description='The English name of the region.', example='South East Asia'),
      subRegions?: [ 
        {
          subRegionCnName?: string(name='SubRegionCnName', description='The Chinese name of the region.'),
          subRegionCode?: string(name='SubRegionCode', description='The code of the subregion.', example='ID'),
          subRegionEnName?: string(name='SubRegionEnName', description='The English name of the subregion.', example='Indonesia'),
        }
      ](name='SubRegions', description='The subregions of the region.'),
    }
  ](name='Regions', description='The regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='81A5E222-24BF-17EF-9E80-A68D9B8F363D'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  totalPage?: int32(name='TotalPage', description='The total number of pages returned.', example='1'),
}

model ListLoadBalancerRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancerRegionsResponseBody(name='body'),
}

/**
 * @summary Queries the information that can be used to configure a traffic steering policy based on the originating country or region for a load balancer, such as the code and code descriptions of the regions and subregions of the load balancer.
 *
 * @description When you call an operation to create a traffic steering policy based on the originating country or region for a load balancer, you can use the code of a region or subregion to specify traffic that is sent from the region or subregion.
 *
 * @param request ListLoadBalancerRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLoadBalancerRegionsResponse
 */
async function listLoadBalancerRegionsWithOptions(request: ListLoadBalancerRegionsRequest, runtime: Util.RuntimeOptions): ListLoadBalancerRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLoadBalancerRegions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information that can be used to configure a traffic steering policy based on the originating country or region for a load balancer, such as the code and code descriptions of the regions and subregions of the load balancer.
 *
 * @description When you call an operation to create a traffic steering policy based on the originating country or region for a load balancer, you can use the code of a region or subregion to specify traffic that is sent from the region or subregion.
 *
 * @param request ListLoadBalancerRegionsRequest
 * @return ListLoadBalancerRegionsResponse
 */
async function listLoadBalancerRegions(request: ListLoadBalancerRegionsRequest): ListLoadBalancerRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLoadBalancerRegionsWithOptions(request, runtime);
}

model ListManagedRulesGroupsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
}

model ListManagedRulesGroupsResponseBody = {
  managedRulesGroups?: [ 
    {
      name?: string(name='Name', description='The name of the managed rule group.', example='example'),
      ruleCount?: long(name='RuleCount', description='The number of rules in the managed rule group.', example='1000'),
    }
  ](name='ManagedRulesGroups', description='The information about the managed rule groups.'),
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='The total number of managed rule groups returned.', example='5'),
}

model ListManagedRulesGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManagedRulesGroupsResponseBody(name='body'),
}

/**
 * @summary Queries all WAF managed rule groups in your Alibaba Cloud account.
 *
 * @param request ListManagedRulesGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListManagedRulesGroupsResponse
 */
async function listManagedRulesGroupsWithOptions(request: ListManagedRulesGroupsRequest, runtime: Util.RuntimeOptions): ListManagedRulesGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListManagedRulesGroups',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all WAF managed rule groups in your Alibaba Cloud account.
 *
 * @param request ListManagedRulesGroupsRequest
 * @return ListManagedRulesGroupsResponse
 */
async function listManagedRulesGroups(request: ListManagedRulesGroupsRequest): ListManagedRulesGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManagedRulesGroupsWithOptions(request, runtime);
}

model ListOriginPoolsRequest {
  matchType?: string(name='MatchType'),
  name?: string(name='Name'),
  orderBy?: string(name='OrderBy'),
  pageNumber?: int32(name='PageNumber', example='ListOriginPools'),
  pageSize?: int32(name='PageSize'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model ListOriginPoolsResponseBody = {
  originPools?: [ 
    {
      enabled?: boolean(name='Enabled'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      origins?: [ 
        {
          address?: string(name='Address'),
          authConf?: {
            accessKey?: string(name='AccessKey'),
            authType?: string(name='AuthType'),
            region?: string(name='Region'),
            secretKey?: string(name='SecretKey'),
            version?: string(name='Version'),
          }(name='AuthConf'),
          enabled?: boolean(name='Enabled'),
          header?: any(name='Header'),
          id?: long(name='Id'),
          name?: string(name='Name'),
          type?: string(name='Type'),
          weight?: int32(name='Weight'),
        }
      ](name='Origins'),
      recordName?: string(name='RecordName'),
      referenceLBCount?: int32(name='ReferenceLBCount'),
      references?: {
        dnsRecords?: [ 
          {
            id?: long(name='Id'),
            name?: string(name='Name'),
          }
        ](name='DnsRecords'),
        IPARecords?: [ 
          {
            id?: long(name='Id'),
            name?: string(name='Name'),
          }
        ](name='IPARecords'),
        loadBalancers?: [ 
          {
            id?: long(name='Id'),
            name?: string(name='Name'),
          }
        ](name='LoadBalancers'),
      }(name='References'),
      siteId?: long(name='SiteId'),
    }
  ](name='OriginPools'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model ListOriginPoolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOriginPoolsResponseBody(name='body'),
}

/**
 * @summary 查询源地址池列表
 *
 * @param request ListOriginPoolsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOriginPoolsResponse
 */
async function listOriginPoolsWithOptions(request: ListOriginPoolsRequest, runtime: Util.RuntimeOptions): ListOriginPoolsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOriginPools',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询源地址池列表
 *
 * @param request ListOriginPoolsRequest
 * @return ListOriginPoolsResponse
 */
async function listOriginPools(request: ListOriginPoolsRequest): ListOriginPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOriginPoolsWithOptions(request, runtime);
}

model ListPagesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1 to 100000**. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
  queryArgs?: {
    nameDescriptionLike?: string(name='NameDescriptionLike'),
  }(name='QueryArgs'),
}

model ListPagesShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1 to 100000**. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
  queryArgsShrink?: string(name='QueryArgs'),
}

model ListPagesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  pages?: [ 
    {
      content?: string(name='Content', description='The Base64-encoded content of the error page. The content type is specified by the Content-Type field.

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
      contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header.

This parameter is required.', example='text/html'),
      description?: string(name='Description', description='The description of the custom error page.', example='a custom deny page'),
      id?: long(name='Id', description='The ID of the custom error page.[](~~2850223~~)', example='50000001'),
      kind?: string(name='Kind', description='The type of the custom error page.', example='custom'),
      name?: string(name='Name', description='The name of the custom error page.', example='example'),
      updateTime?: string(name='UpdateTime', description='The time when the custom error page was last modified.', example='2024-01-01T00:00:00Z'),
    }
  ](name='Pages', description='The custom error pages. Each element in the array contains error page-specific information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', description='The number of custom error pages after filtering.', example='10'),
  usage?: long(name='Usage', description='The number of custom error pages that you created.', example='10'),
}

model ListPagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPagesResponseBody(name='body'),
}

/**
 * @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
 *
 * @param tmpReq ListPagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPagesResponse
 */
async function listPagesWithOptions(tmpReq: ListPagesRequest, runtime: Util.RuntimeOptions): ListPagesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPagesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPages',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
 *
 * @param request ListPagesRequest
 * @return ListPagesResponse
 */
async function listPages(request: ListPagesRequest): ListPagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPagesWithOptions(request, runtime);
}

model ListRecordsRequest {
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **500**.', example='10'),
  proxied?: boolean(name='Proxied', description='Filters by whether the record is proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordMatchType?: string(name='RecordMatchType', description='The match mode to search for the record name. Default value: exact. Valid values:

*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **exact**: exact match.
*   **fuzzy**: fuzzy match.', example='fuzzy'),
  recordName?: string(name='RecordName', description='The record name. This parameter specifies a filter condition for the query.', example='www.example.com'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The origin type of the record. Only CNAME records can be filtered by using this field. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.', example='OSS'),
  type?: string(name='Type', description='The DNS record type.', example='CNAME'),
}

model ListRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  records?: [ 
    {
      authConf?: {
        accessKey?: string(name='AccessKey', description='The access key of the account to which the origin server belongs. This value is returned when the SourceType is OSS, and AuthType is private_cross_account, or when the SourceType is S3 and AuthType is private.', example='u0Nkg5gBK***QF5wvKMM504JUHt'),
        authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, the authentication type of the origin must be specified. Valid values:

*   **public**: public read. This value is returned when the origin is a public OSS or S3 bucket.
*   **private**: private read. This value is returned when the origin is a private S3 bucket.
*   **private_same_account**: private read under the same account. This value is returned when the origin is a private OSS bucket in your Alibaba Cloud account.
*   **private_cross_account**: private read across accounts. This value is returned when the origin is a private OSS bucket in a different Alibaba Cloud account.', example='private'),
        region?: string(name='Region', description='The region of the origin. This parameter is returned if the origin type is S3. You can get the region information from the official website of Amazon S3.', example='us-east-1'),
        secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This value is returned when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='VIxuvJSA2S03f***kp208dy5w7'),
        version?: string(name='Version', description='The version of the signature algorithm. This value is returned when the origin type is S3 and AuthType is private. Valid values:

*   **v2**
*   **v4**

If this parameter is left empty, the default value v4 is used.', example='v4'),
      }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
      bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Valid values:

*   **image_video**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
      comment?: string(name='Comment', description='The comments of the record.', example='this is a remark.'),
      createTime?: string(name='CreateTime', description='The time when the record was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      data?: {
        algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record. Valid values: 0 to 255. Exclusive to CERT and SSHFP records.', example='0'),
        certificate?: string(name='Certificate', description='The public key of the certificate. Exclusive to CERT, SMIMEA, and TLSA records.', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. Exclusive to SSHFP records.', example='abcdef1234567890'),
        flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed. Valid values: 0 to 255. Exclusive to CAA records.', example='128'),
        keyTag?: int32(name='KeyTag', description='The public key identification for the record. Valid values: 0 to 65535. Exclusive to CERT records.', example='0'),
        matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate. Valid values: 0 to 255. Exclusive to SMIMEA and TLSA records.', example='0'),
        port?: int32(name='Port', description='The port of the record. Valid values: 0 to 65535. Exclusive to SRV records.', example='80'),
        priority?: int32(name='Priority', description='The priority of the record. Valid values: 0 to 65535. A smaller value indicates a higher priority. Exclusive to MX, SRV, and URI records.', example='0'),
        selector?: int32(name='Selector', description='The type of certificate or public key. Valid values: 0 to 255. Exclusive to SMIMEA, and TLSA records.', example='0'),
        tag?: string(name='Tag', description='The tag of the record. The Tag of a CAA record indicate its specific type and usage. Exclusive to CAA records.', example='issue'),
        type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records).', example='0'),
        usage?: int32(name='Usage', description='The usage identifier of the record. Valid values: 0 to 255. Exclusive to SMIMEA, and TLSA records.', example='0'),
        value?: string(name='Value', description='Record value or part of the record content. This value is returned when the record is A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, or URI. It has different meanings based on types of records:

*   **A/AAAA**: the IP addresses. IP addresses are separated by commas (,). There is at least one IPv4 address.
*   **CNAME**: the pointed/mapped domain name.
*   **NS**: the nameservers for the domain name.
*   **MX**: a valid domain name of the mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='CNAME'),
        weight?: int32(name='Weight', description='The weight of the record. Valid values: 0 to 65535. Exclusive to SRV and URI records.', example='0'),
      }(name='Data', description='The DNS record information. Different types of records contain different information.', example='{"value":"1.1.1.1"}'),
      hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. Valid values:

*   follow_hostname: matches the requested domain name.
*   follow_origin_domain: matches the origin\\\\"s domain name.', example='follow_origin_domain'),
      proxied?: boolean(name='Proxied', description='Indicates whether the record is proxied. Valid values:

*   **true**
*   **false**', example='true'),
      recordCname?: string(name='RecordCname', description='The CNAME. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='a.example.com.cnamezone.com'),
      recordId?: long(name='RecordId', description='The record ID.', example='1234567890123'),
      recordName?: string(name='RecordName', description='The record name.', example='a.example.com'),
      recordSourceType?: string(name='RecordSourceType', description='The origin type for the CNAME record. This parameter is returned when you add a CNAME record. Valid values:

*   **OSS**: OSS bucket.
*   **S3**: S3 bucket.
*   **LB**: load balancer.
*   **OP**: origin pool.
*   **Domain**: domain name.

If you do not pass this parameter or if you leave its value empty, Domain is returned by default.', example='OSS'),
      recordType?: string(name='RecordType', description='The DNS type of the record, such as **A/AAAA, CNAME, and TXT**.', example='A/AAAA'),
      siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      ttl?: long(name='Ttl', description='The TTL of the record. Unit: seconds. If the value is 1, the TTL of the record is determined by the system.', example='30'),
      updateTime?: string(name='UpdateTime', description='The time when the record was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-06-07T10:02:59Z'),
    }
  ](name='Records', description='The DNS record information. The format of this field varies based on the record type. For more information, see Add DNS records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='20'),
}

model ListRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecordsResponseBody(name='body'),
}

/**
 * @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
 *
 * @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
 *
 * @param request ListRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRecordsResponse
 */
async function listRecordsWithOptions(request: ListRecordsRequest, runtime: Util.RuntimeOptions): ListRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
 *
 * @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
 *
 * @param request ListRecordsRequest
 * @return ListRecordsResponse
 */
async function listRecords(request: ListRecordsRequest): ListRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordsWithOptions(request, runtime);
}

model ListRoutineCanaryAreasResponseBody = {
  canaryAreas?: [ string ](name='CanaryAreas', description='The regions for canary release.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model ListRoutineCanaryAreasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineCanaryAreasResponseBody(name='body'),
}

/**
 * @summary Lists the regions to which Edge Routine code can be released for canary deployment.
 *
 * @param request ListRoutineCanaryAreasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutineCanaryAreasResponse
 */
async function listRoutineCanaryAreasWithOptions(runtime: Util.RuntimeOptions): ListRoutineCanaryAreasResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRoutineCanaryAreas',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists the regions to which Edge Routine code can be released for canary deployment.
 *
 * @return ListRoutineCanaryAreasResponse
 */
async function listRoutineCanaryAreas(): ListRoutineCanaryAreasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoutineCanaryAreasWithOptions(runtime);
}

model ListRoutineOptionalSpecsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1234567890ABCDEF01234567890ABCDEF'),
  specs?: [ 
    {
      isAvailable?: boolean(name='IsAvailable', description='Indicates whether the specification is available. Valid values:

*   true
*   false', example='true'),
      specName?: string(name='SpecName', description='The specification name.', example='5ms'),
    }
  ](name='Specs', description='The available specifications.'),
}

model ListRoutineOptionalSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutineOptionalSpecsResponseBody(name='body'),
}

/**
 * @summary Queries the specifications that you can select for a routine based on the plan type. The response contains all specifications that you can select for a routine. The IsAvailable parameter indicates whether a specification is available.
 *
 * @description You can call this operation to query the specifications that you can select for a routine.
 *
 * @param request ListRoutineOptionalSpecsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutineOptionalSpecsResponse
 */
async function listRoutineOptionalSpecsWithOptions(runtime: Util.RuntimeOptions): ListRoutineOptionalSpecsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRoutineOptionalSpecs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the specifications that you can select for a routine based on the plan type. The response contains all specifications that you can select for a routine. The IsAvailable parameter indicates whether a specification is available.
 *
 * @description You can call this operation to query the specifications that you can select for a routine.
 *
 * @return ListRoutineOptionalSpecsResponse
 */
async function listRoutineOptionalSpecs(): ListRoutineOptionalSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoutineOptionalSpecsWithOptions(runtime);
}

model ListScheduledPreloadExecutionsRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.

This parameter is required.', example='ListScheduledPreloadExecutions'),
}

model ListScheduledPreloadExecutionsResponseBody = {
  executions?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
      id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
      interval?: int32(name='Interval', description='The time interval between each batch execution in the plan. Unit: seconds.', example='60'),
      jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
      startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
      status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='running'),
    }
  ](name='Executions', description='The information about prefetch plans returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
 * @summary Lists the plans in a scheduled prefetch task by task ID.
 *
 * @param request ListScheduledPreloadExecutionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListScheduledPreloadExecutionsResponse
 */
async function listScheduledPreloadExecutionsWithOptions(request: ListScheduledPreloadExecutionsRequest, runtime: Util.RuntimeOptions): ListScheduledPreloadExecutionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScheduledPreloadExecutions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists the plans in a scheduled prefetch task by task ID.
 *
 * @param request ListScheduledPreloadExecutionsRequest
 * @return ListScheduledPreloadExecutionsResponse
 */
async function listScheduledPreloadExecutions(request: ListScheduledPreloadExecutionsRequest): ListScheduledPreloadExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduledPreloadExecutionsWithOptions(request, runtime);
}

model ListScheduledPreloadJobsRequest {
  endTime?: long(name='EndTime', description='The end time for querying the task creation time range. Specify the timestamp in milliseconds.', example='1717225277000'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='ListScheduledPreloadJobs'),
  startTime?: long(name='StartTime', description='The beginning of the task creation time range to query. Specify the timestamp in milliseconds.', example='1717225276000'),
}

model ListScheduledPreloadJobsResponseBody = {
  jobs?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
      createdAt?: string(name='CreatedAt', description='The time when the task was created.', example='2024-06-01T08:53:13Z'),
      domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
      errorInfo?: string(name='ErrorInfo', description='The error message that is returned.', example='invalid domain:test.com'),
      failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
      fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
      id?: string(name='Id', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
      insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
      name?: string(name='Name', description='The task name.', example='example'),
      siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
      taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
      taskType?: string(name='TaskType', description='The task type. Valid values: refresh and preload.', example='preload'),
      urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
      urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
    }
  ](name='Jobs', description='The list of the prefetch tasks.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: string(name='TotalCount', description='The total number of tasks returned.', example='5'),
}

model ListScheduledPreloadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadJobsResponseBody(name='body'),
}

/**
 * @summary Queries the scheduled prefetch tasks for a website.
 *
 * @param request ListScheduledPreloadJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListScheduledPreloadJobsResponse
 */
async function listScheduledPreloadJobsWithOptions(request: ListScheduledPreloadJobsRequest, runtime: Util.RuntimeOptions): ListScheduledPreloadJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScheduledPreloadJobs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the scheduled prefetch tasks for a website.
 *
 * @param request ListScheduledPreloadJobsRequest
 * @return ListScheduledPreloadJobsResponse
 */
async function listScheduledPreloadJobs(request: ListScheduledPreloadJobsRequest): ListScheduledPreloadJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduledPreloadJobsWithOptions(request, runtime);
}

model ListSiteDeliveryTasksRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456***'),
}

model ListSiteDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 0.', example='0'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 500**. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
      dataCenter?: string(name='DataCenter', description='The data center. Valid values:

*   cn: the Chinese mainland.
*   sg: outside the Chinese mainland.', example='cn'),
      deliveryType?: string(name='DeliveryType', description='The destination of the delivery. Valid values:

1.  sls: Alibaba Cloud Simple Log Service (SLS).
2.  http: HTTP server.
3.  aws3: Amazon Simple Storage Service (S3).
4.  oss: Alibaba Cloud Object Storage Service (OSS).
5.  kafka: Kafka.
6.  aws3cmpt: S3-compatible storage service.', example='sls'),
      status?: string(name='Status', description='The status of the delivery task.

*   **online**
*   **offline**', example='online'),
      taskName?: string(name='TaskName', description='The name of the delivery task.', example='cdn-test-task'),
    }
  ](name='Tasks', description='The delivery tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of log delivery tasks.', example='20'),
}

model ListSiteDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSiteDeliveryTasksResponseBody(name='body'),
}

/**
 * @summary Lists all log delivery tasks that are in progress.
 *
 * @param request ListSiteDeliveryTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSiteDeliveryTasksResponse
 */
async function listSiteDeliveryTasksWithOptions(request: ListSiteDeliveryTasksRequest, runtime: Util.RuntimeOptions): ListSiteDeliveryTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSiteDeliveryTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all log delivery tasks that are in progress.
 *
 * @param request ListSiteDeliveryTasksRequest
 * @return ListSiteDeliveryTasksResponse
 */
async function listSiteDeliveryTasks(request: ListSiteDeliveryTasksRequest): ListSiteDeliveryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSiteDeliveryTasksWithOptions(request, runtime);
}

model ListSitesRequest {
  accessType?: string(name='AccessType', description='The DNS setup. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='global'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', description='Specifies whether to query only websites on Enterprise plans. Valid values: **true and false**.', example='false'),
  orderBy?: string(name='OrderBy', description='null

*   null
*   null', example='visitTime'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 500.', example='20'),
  planSubscribeType?: string(name='PlanSubscribeType', description='The plan type. Valid values:

*   **basicplan**: Entrance (coming soon)
*   **standardplan**: Pro
*   **advancedplan**: Premium
*   **enterpriseplan**: Enterprise', example='basicplan'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter specifies a filter condition for the query.', example='rg-aekzd3styujvyei'),
  siteName?: string(name='SiteName', description='The website name. This parameter specifies a filter condition for the query.', example='example.com'),
  siteSearchType?: string(name='SiteSearchType', description='The match mode to search for the website name. Default value: exact. Valid values:

*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **null**
*   **fuzzy**: fuzzy match.', example='fuzzy'),
  status?: string(name='Status', description='The website status. This parameter specifies a filter condition for the query.', example='pending'),
  tagFilter?: [ 
    {
      key?: string(name='Key', description='The tag key. This parameter specifies a filter condition for the query.', example='tag1'),
      value?: string(name='Value', description='The tag value. This parameter specifies a filter condition for the query.', example='aaa'),
    }
  ](name='TagFilter', description='The tag filtering rule.'),
}

model ListSitesShrinkRequest {
  accessType?: string(name='AccessType', description='The DNS setup. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
  coverage?: string(name='Coverage', description='The service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='global'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', description='Specifies whether to query only websites on Enterprise plans. Valid values: **true and false**.', example='false'),
  orderBy?: string(name='OrderBy', description='null

*   null
*   null', example='visitTime'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 500.', example='20'),
  planSubscribeType?: string(name='PlanSubscribeType', description='The plan type. Valid values:

*   **basicplan**: Entrance (coming soon)
*   **standardplan**: Pro
*   **advancedplan**: Premium
*   **enterpriseplan**: Enterprise', example='basicplan'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter specifies a filter condition for the query.', example='rg-aekzd3styujvyei'),
  siteName?: string(name='SiteName', description='The website name. This parameter specifies a filter condition for the query.', example='example.com'),
  siteSearchType?: string(name='SiteSearchType', description='The match mode to search for the website name. Default value: exact. Valid values:

*   **prefix**: match by prefix.
*   **suffix**: match by suffix.
*   **null**
*   **fuzzy**: fuzzy match.', example='fuzzy'),
  status?: string(name='Status', description='The website status. This parameter specifies a filter condition for the query.', example='pending'),
  tagFilterShrink?: string(name='TagFilter', description='The tag filtering rule.'),
}

model ListSitesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of websites per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  sites?: [ 
    {
      accessType?: string(name='AccessType', description='The DNS setup for the website. Valid values:

*   **NS**
*   **CNAME**', example='NS'),
      cnameZone?: string(name='CnameZone', description='The CNAME of the website domain. If you use CNAME setup when you add your website to ESA, the value is the CNAME that you configured then.', example='example.cname.com'),
      coverage?: string(name='Coverage', description='The service location for the website. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='domestic'),
      createTime?: string(name='CreateTime', description='The time when the website was added. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      instanceId?: string(name='InstanceId', description='The ID of the plan associated with the website.', example='onBvtlmIyeXLbiDw81F9'),
      nameServerList?: string(name='NameServerList', description='The nameservers assigned to the website domain, which are separated by commas (,).', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
      planName?: string(name='PlanName', description='The plan name.', example='plan-168656498****'),
      planSpecName?: string(name='PlanSpecName', description='The plan associated with the website.', example='normal'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek26g6i6se6pna'),
      siteId?: long(name='SiteId', description='The website ID.', example='123456789****'),
      siteName?: string(name='SiteName', description='The website name.', example='example.com'),
      status?: string(name='Status', description='The website status. Valid values:

*   **pending**: The website is to be configured.
*   **active**: The website is active.
*   **offline**: The website is suspended.
*   **moved**: The website has been added and verified by another Alibaba Cloud account.', example='pending'),
      tags?: map[string]any(name='Tags', description='The tags of the website.', example='{"tag1":"value1"}'),
      updateTime?: string(name='UpdateTime', description='The time when the website was updated. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-12-24T02:01:11Z'),
      verifyCode?: string(name='VerifyCode', description='The code that is used to verify the website domain ownership. As part of the verification TXT record, this parameter is returned for websites that use CNAME setup.', example='verify_d516cb3740f81f0cef77d162edd1****'),
      visitTime?: string(name='VisitTime', description='null', example='2023-12-24T02:01:11Z'),
    }
  ](name='Sites', description='The queried websites.'),
  totalCount?: int32(name='TotalCount', description='The total number of websites.', example='40'),
}

model ListSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSitesResponseBody(name='body'),
}

/**
 * @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
 *
 * @param tmpReq ListSitesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSitesResponse
 */
async function listSitesWithOptions(tmpReq: ListSitesRequest, runtime: Util.RuntimeOptions): ListSitesResponse {
  Util.validateModel(tmpReq);
  var request = new ListSitesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tagFilter)) {
    request.tagFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagFilter, 'TagFilter', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSites',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
 *
 * @param request ListSitesRequest
 * @return ListSitesResponse
 */
async function listSites(request: ListSitesRequest): ListSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSitesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxItem?: int32(name='MaxItem', description='The maximum number of tags to return.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

>  This parameter is not required for the first request. If not all results are returned in one query, you can specify the token that is obtained from the previous query as the value of **NextToken**.', example='AAAAAZjtYxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the resources reside.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The website ID.'),
  resourceType?: string(name='ResourceType', description='The resource type.

This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='env'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tag', description='A list of tags. You can enter up to 20 tags.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAYwsxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='example.com'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='site'),
      tagKey?: string(name='TagKey', description='The tag key.', example='env'),
      tagValue?: string(name='TagValue', description='The tag value.', example='value'),
    }
  ](name='TagResources', description='The tags of the resource.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @summary Queries tags based on the region ID and resource type.
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxItem)) {
    query['MaxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries tags based on the region ID and resource type.
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUploadTasksRequest {
  endTime?: string(name='EndTime', description='The time when the task ends. Specify the time in the YYYY-MM-DDThh:mm:ssZ format.', example='2019-12-06T12:00:00Z'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456****'),
  startTime?: string(name='StartTime', description='The time when the task starts. Specify the time in the YYYY-MM-DDThh:mm:ssZ format.', example='2018-11-29T00:00:00Z'),
  type?: string(name='Type', description='The task type. Valid values:

*   **file**: purges the cache by file URL.
*   **preload**: prefetches files.
*   **directory**: purges the cache by directory.
*   **ignoreparams**: purges the cache by URL with specified parameters ignored.', example='file'),
}

model ListUploadTasksResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB1A380B-09F0-41BB-A198-72F8FD6D****'),
  tasks?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the task was created.', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', description='The error message returned when the file upload task failed.', example='invalid url'),
      errorCode?: string(name='ErrorCode', description='The error code. Multiple error codes are separated by commas (,).

*   **InvalidUrl**: The URL format is incorrect.
*   **InvalidDomain**: The domain ownership fails to be verified.
*   **QuotaExcess**: The quota limit has been reached.
*   **OtherErrors**: Other errors.', example='InvalidUrl,InvalidDomain'),
      status?: string(name='Status', description='The task status.

*   **Complete**: The task is complete.
*   **Refreshing**: The task is in progress.
*   **Failed**: The task failed.', example='Complete'),
      type?: string(name='Type', description='The task type. Valid values:

*   **file**: purges the cache by file URL.
*   **preload**: prefetches files.
*   **directory**: purges the cache by directory.
*   **ignoreparams**: purges the cache by URL with specified parameters ignored.', example='file'),
      uploadId?: string(name='UploadId', description='The ID of the file upload task.', example='159253299357****'),
      uploadTaskName?: string(name='UploadTaskName', description='The name of the file upload task.', example='purge_file_task'),
    }
  ](name='Tasks', description='The file upload tasks.'),
}

model ListUploadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUploadTasksResponseBody(name='body'),
}

/**
 * @summary Queries the execution status and running information of file upload tasks based on the task time and type.
 *
 * @param request ListUploadTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUploadTasksResponse
 */
async function listUploadTasksWithOptions(request: ListUploadTasksRequest, runtime: Util.RuntimeOptions): ListUploadTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUploadTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the execution status and running information of file upload tasks based on the task time and type.
 *
 * @param request ListUploadTasksRequest
 * @return ListUploadTasksResponse
 */
async function listUploadTasks(request: ListUploadTasksRequest): ListUploadTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUploadTasksWithOptions(request, runtime);
}

model ListUserDeliveryTasksRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

1.  dcdn_log_access_l1 (default): access logs.
2.  dcdn_log_er: Edge Routine logs.
3.  dcdn_log_waf: firewall logs.
4.  dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_access_l1'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 20.', example='20'),
}

model ListUserDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='1f94c47f-3a1a-4f69-8d6c-bfeee1b49aab'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', description='The log category.', example='dcdn_log_er'),
      dataCenter?: string(name='DataCenter', description='The data center. Valid values:

1.  cn: the Chinese mainland.
2.  sg: outside the Chinese mainland.', example='cn'),
      deliveryType?: string(name='DeliveryType', description='The delivery destination.', example='oss'),
      status?: string(name='Status', description='The status of the delivery task.', example='online'),
      taskName?: string(name='TaskName', description='The name of the delivery task.', example='testoss11'),
    }
  ](name='Tasks', description='The delivery tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of delivery tasks.', example='68'),
}

model ListUserDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDeliveryTasksResponseBody(name='body'),
}

/**
 * @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
 *
 * @param request ListUserDeliveryTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserDeliveryTasksResponse
 */
async function listUserDeliveryTasksWithOptions(request: ListUserDeliveryTasksRequest, runtime: Util.RuntimeOptions): ListUserDeliveryTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserDeliveryTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
 *
 * @param request ListUserDeliveryTasksRequest
 * @return ListUserDeliveryTasksResponse
 */
async function listUserDeliveryTasks(request: ListUserDeliveryTasksRequest): ListUserDeliveryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserDeliveryTasksWithOptions(request, runtime);
}

model ListUserRatePlanInstancesRequest {
  checkRemainingSiteQuota?: string(name='CheckRemainingSiteQuota', description='Specifies whether to query only the plans that have remaining quota for associating websites. Valid values:

*   true: queries only the plans that have remaining quota for associating websites.
*   false: queries all plans in your account.', example='true'),
  instanceId?: string(name='InstanceId', description='The plan ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='sp-xcdn-96wblslz****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: **1** to **100000**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='500'),
  remainingExpireDays?: int32(name='RemainingExpireDays'),
  sortBy?: string(name='SortBy', description='The sorting field. By default, the queried plans are sorted by purchase time. Valid values:

*   CreateTime: the time when the plans were purchased.
*   ExpireTime: the time when the plans expire.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the query results. Default value: desc. Valid values:

*   asc: in ascending order.
*   desc: in descending order.', example='asc'),
  status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.
*   overdue: The plan is stopped due to overdue payments.', example='online', nullable=false),
}

model ListUserRatePlanInstancesResponseBody = {
  instanceInfo?: [ 
    {
      billingMode?: string(name='BillingMode', description='The billing method. Valid values:

*   PREPAY: subscription.
*   POSTPAY: pay-as-you-go.', example='PREPAY'),
      botInstanceLevel?: string(name='BotInstanceLevel'),
      botRequest?: string(name='BotRequest'),
      coverages?: string(name='Coverages', description='The service locations for the websites that can be associated with the plan. Multiple values are separated by commas (,). Valid values:

*   domestic: the Chinese mainland.
*   overseas: outside the Chinese mainland.
*   global: global.', example='domestic,overseas'),
      createTime?: string(name='CreateTime', description='The time when the plan was purchased.', example='YYYY-MM-DDThh:mm:ssZ'),
      crossborderTraffic?: string(name='CrossborderTraffic'),
      ddosBurstableDomesticProtection?: string(name='DdosBurstableDomesticProtection'),
      ddosBurstableOverseasProtection?: string(name='DdosBurstableOverseasProtection'),
      ddosInstanceLevel?: string(name='DdosInstanceLevel'),
      duration?: int32(name='Duration', description='The subscription duration of the plan. Unit: month.', example='3'),
      edgeRoutineRquest?: string(name='EdgeRoutineRquest'),
      edgeWafRequest?: string(name='EdgeWafRequest'),
      expireTime?: string(name='ExpireTime', description='The time when the plan expires.', example='YYYY-MM-DDThh:mm:ssZ'),
      instanceId?: string(name='InstanceId', description='The plan ID.', example='sp-xcdn-96wblslz****'),
      layer4Traffic?: string(name='Layer4Traffic'),
      layer4TrafficIntl?: string(name='Layer4TrafficIntl'),
      planName?: string(name='PlanName', description='The plan name.', example='basic'),
      planTraffic?: string(name='PlanTraffic'),
      planType?: string(name='PlanType', description='The plan type. Valid values:

*   normal
*   enterprise', example='normal'),
      siteQuota?: string(name='SiteQuota', description='The maximum number of websites that can be associated with the plan.', example='1'),
      sites?: [ 
        {
          siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
          siteName?: string(name='SiteName', description='The website name.', example='example.com'),
          siteStatus?: string(name='SiteStatus', description='The website status. Valid values:

*   pending: The website is to be configured.
*   active: The website is active.
*   offline: The website is suspended.
*   moved: The website has been added and verified by another Alibaba Cloud account.', example='pending'),
        }
      ](name='Sites', description='The websites that have been associated with the plan.'),
      smartRoutingRequest?: string(name='SmartRoutingRequest'),
      staticRequest?: string(name='StaticRequest'),
      status?: string(name='Status', description='The plan status. Valid values:

*   online: The plan is in service.
*   offline: The plan has expired within an allowable period. In this state, the plan is unavailable.
*   disable: The plan is released.', example='online'),
    }
  ](name='InstanceInfo', description='The queried plans.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='68'),
  totalPage?: int32(name='TotalPage', description='The total number of pages returned.', example='1'),
}

model ListUserRatePlanInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRatePlanInstancesResponseBody(name='body'),
}

/**
 * @summary Queries the plans that you purchased and the details of the plans.
 *
 * @param request ListUserRatePlanInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserRatePlanInstancesResponse
 */
async function listUserRatePlanInstancesWithOptions(request: ListUserRatePlanInstancesRequest, runtime: Util.RuntimeOptions): ListUserRatePlanInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserRatePlanInstances',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the plans that you purchased and the details of the plans.
 *
 * @param request ListUserRatePlanInstancesRequest
 * @return ListUserRatePlanInstancesResponse
 */
async function listUserRatePlanInstances(request: ListUserRatePlanInstancesRequest): ListUserRatePlanInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserRatePlanInstancesWithOptions(request, runtime);
}

model ListWafManagedRulesRequest {
  attackType?: int32(name='AttackType', description='The attack type. Valid values:

*   SQL injection
*   Cross-site scripting
*   Code execution
*   CRLF
*   Local file inclusion
*   Remote file inclusion
*   webshell
*   Cross-site request forgery
*   Others
*   SEMA

This parameter is required.', example='11'),
  id?: long(name='Id', description='The ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2850237.html) operation.

This parameter is required.', example='10000001'),
  language?: string(name='Language', description='The language of the response. Valid values:

*   **en**: English.
*   **zh**: Chinese.', example='zh'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  protectionLevel?: int32(name='ProtectionLevel'),
  queryArgs?: {
    action?: string(name='Action', description='The action that you want WAF to perform on requests that match the rule.', example='deny'),
    idNameLike?: string(name='IdNameLike', description='The rule ID or name for fuzzy search.', example='example'),
    protectionLevels?: [ int32 ](name='ProtectionLevels', description='The protection levels of the rules.'),
    status?: string(name='Status', description='The status of the rule.', example='on'),
  }(name='QueryArgs', description='The query conditions.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1'),
}

model ListWafManagedRulesShrinkRequest {
  attackType?: int32(name='AttackType', description='The attack type. Valid values:

*   SQL injection
*   Cross-site scripting
*   Code execution
*   CRLF
*   Local file inclusion
*   Remote file inclusion
*   webshell
*   Cross-site request forgery
*   Others
*   SEMA

This parameter is required.', example='11'),
  id?: long(name='Id', description='The ID of the WAF rule, which can be obtained by calling the [ListWafRules](https://help.aliyun.com/document_detail/2850237.html) operation.

This parameter is required.', example='10000001'),
  language?: string(name='Language', description='The language of the response. Valid values:

*   **en**: English.
*   **zh**: Chinese.', example='zh'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  protectionLevel?: int32(name='ProtectionLevel'),
  queryArgsShrink?: string(name='QueryArgs', description='The query conditions.'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1'),
}

model ListWafManagedRulesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', description='The action that WAF performs on requests that match the managed rule.', example='deny'),
      id?: long(name='Id', description='The ID of the managed rule.', example='100001'),
      name?: string(name='Name', description='The name of the managed rule.'),
      protectionLevel?: int32(name='ProtectionLevel', description='The protection level of the managed rule.', example='1'),
      status?: string(name='Status', description='The status of the protection rule.', example='on'),
    }
  ](name='Rules', description='The managed rules.'),
  totalCount?: long(name='TotalCount', description='The total number of filtered rules.', example='20'),
}

model ListWafManagedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafManagedRulesResponseBody(name='body'),
}

/**
 * @summary Lists all Web Application Firewall (WAF) managed rules or some of them based on specific conditions. You can call this operation to query the details of WAF rules by page.
 *
 * @param tmpReq ListWafManagedRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafManagedRulesResponse
 */
async function listWafManagedRulesWithOptions(tmpReq: ListWafManagedRulesRequest, runtime: Util.RuntimeOptions): ListWafManagedRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWafManagedRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.protectionLevel)) {
    query['ProtectionLevel'] = request.protectionLevel;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafManagedRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Lists all Web Application Firewall (WAF) managed rules or some of them based on specific conditions. You can call this operation to query the details of WAF rules by page.
 *
 * @param request ListWafManagedRulesRequest
 * @return ListWafManagedRulesResponse
 */
async function listWafManagedRules(request: ListWafManagedRulesRequest): ListWafManagedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafManagedRulesWithOptions(request, runtime);
}

model ListWafPhasesRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', description='The version of the website.', example='0'),
}

model ListWafPhasesResponseBody = {
  phases?: [ 
    {
      phase?: string(name='Phase', description='The name of the WAF rule category.', example='http_custom'),
      rulesets?: [ 
        {
          id?: long(name='Id', description='The ID of the WAF ruleset.[](~~2850233~~)', example='10000001'),
          name?: string(name='Name', description='The name of the WAF ruleset.', example='example'),
          rules?: [
            WafRuleConfig
          ](name='Rules', description='The rule configurations in the WAF ruleset.'),
          shared?: WafBatchRuleShared(name='Shared', description='The configurations shared by the rules in the WAF ruleset.'),
        }
      ](name='Rulesets', description='The WAF rulesets.'),
    }
  ](name='Phases', description='The WAF rule categories.'),
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model ListWafPhasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafPhasesResponseBody(name='body'),
}

/**
 * @summary Queries the WAF rule categories that are applied to a website and related rulesets.
 *
 * @param request ListWafPhasesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafPhasesResponse
 */
async function listWafPhasesWithOptions(request: ListWafPhasesRequest, runtime: Util.RuntimeOptions): ListWafPhasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafPhases',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the WAF rule categories that are applied to a website and related rulesets.
 *
 * @param request ListWafPhasesRequest
 * @return ListWafPhasesResponse
 */
async function listWafPhases(request: ListWafPhasesRequest): ListWafPhasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafPhasesWithOptions(request, runtime);
}

model ListWafTemplateRulesRequest {
  phase?: string(name='Phase', description='The WAF rule category, which is used to filter template rules of a specific category.', example='http_anti_scan'),
  queryArgs?: {
    type?: string(name='Type', description='The rule type.', example='http_directory_traversal'),
  }(name='QueryArgs', description='The query parameter, which is used to filter template rules based on criteria such as the rule type.', example='http_anti_scan'),
  siteId?: long(name='SiteId', description='站点ID，可通过调用[ListSites](https://help.aliyun.com/document_detail/2850189.html)接口获取。', example='1'),
}

model ListWafTemplateRulesShrinkRequest {
  phase?: string(name='Phase', description='The WAF rule category, which is used to filter template rules of a specific category.', example='http_anti_scan'),
  queryArgsShrink?: string(name='QueryArgs', description='The query parameter, which is used to filter template rules based on criteria such as the rule type.', example='http_anti_scan'),
  siteId?: long(name='SiteId', description='站点ID，可通过调用[ListSites](https://help.aliyun.com/document_detail/2850189.html)接口获取。', example='1'),
}

model ListWafTemplateRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      config?: WafRuleConfig(name='Config', description='The configuration of the rule.'),
      name?: string(name='Name', description='The rule name.', example='HTTP Directory Traversal Rule [Template]'),
      phase?: string(name='Phase', description='The WAF rule category.', example='http_anti_scan'),
      status?: string(name='Status', description='Indicates whether the rule is enabled.', example='on'),
      type?: string(name='Type', description='The rule type.', example='http_directory_traversal'),
    }
  ](name='Rules', description='The returned template rules.'),
}

model ListWafTemplateRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafTemplateRulesResponseBody(name='body'),
}

/**
 * @summary Queries template rules in Web Application Firewall (WAF). In most cases, these rules are pre-defined rulesets that are used to quickly enable protection against common types of attacks.
 *
 * @param tmpReq ListWafTemplateRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafTemplateRulesResponse
 */
async function listWafTemplateRulesWithOptions(tmpReq: ListWafTemplateRulesRequest, runtime: Util.RuntimeOptions): ListWafTemplateRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWafTemplateRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafTemplateRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries template rules in Web Application Firewall (WAF). In most cases, these rules are pre-defined rulesets that are used to quickly enable protection against common types of attacks.
 *
 * @param request ListWafTemplateRulesRequest
 * @return ListWafTemplateRulesResponse
 */
async function listWafTemplateRules(request: ListWafTemplateRulesRequest): ListWafTemplateRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafTemplateRulesWithOptions(request, runtime);
}

model ListWafUsageOfRulesRequest {
  phase?: string(name='Phase', description='The WAF rule category.', example='http_anti_scan'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='ListWafUsageOfRules'),
}

model ListWafUsageOfRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  sites?: [ 
    {
      id?: long(name='Id', description='The website ID.', example='1'),
      name?: string(name='Name', description='The website name.', example='example.com'),
      usage?: long(name='Usage', description='The usage of WAF rules or WAF rulesets.', example='1'),
    }
  ](name='Sites', description='The usage details of WAF rules of the website.'),
}

model ListWafUsageOfRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafUsageOfRulesResponseBody(name='body'),
}

/**
 * @summary Queries the usage details of WAF rules.
 *
 * @param request ListWafUsageOfRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafUsageOfRulesResponse
 */
async function listWafUsageOfRulesWithOptions(request: ListWafUsageOfRulesRequest, runtime: Util.RuntimeOptions): ListWafUsageOfRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafUsageOfRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the usage details of WAF rules.
 *
 * @param request ListWafUsageOfRulesRequest
 * @return ListWafUsageOfRulesResponse
 */
async function listWafUsageOfRules(request: ListWafUsageOfRulesRequest): ListWafUsageOfRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafUsageOfRulesWithOptions(request, runtime);
}

model ListWaitingRoomEventsRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', description='The ID of the waiting room event. This parameter is optional. You can specify this parameter to query a specific waiting room event.', example='89677721098****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The unique ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
}

model ListWaitingRoomEventsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to trace a call.', example='f3c3700a-4c0f-4a24-b576-fd7dbf9e7c55'),
  waitingRoomEvents?: [ 
    {
      customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. This parameter is returned when the waiting room type is set to custom. The content is URL-encoded.', example='html-yets-maqi1111'),
      description?: string(name='Description', description='The event description.', example='terraform-example'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Indicates whether session renewal is disabled. Valid values:

*   on
*   off', example='off'),
      enable?: string(name='Enable', description='The event status. Valid values:

*   on
*   off', example='on'),
      endTime?: string(name='EndTime', description='The end time of the event. This value is a UNIX timestamp.', example='1719814497'),
      jsonResponseEnable?: string(name='JsonResponseEnable', description='Indicates whether JOSN response is enabled. If JSON response is enabled, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='off'),
      language?: string(name='Language', description='The language of the waiting room page. This parameter is returned when the waiting room type is set to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
      name?: string(name='Name', description='The custom event name.'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='11'),
      preQueueEnable?: string(name='PreQueueEnable', description='Indicates whether pre-queuing is enabled. Valid values:

*   on
*   off', example='on'),
      preQueueStartTime?: string(name='PreQueueStartTime', description='The start time for pre-queuing. This value is a UNIX timestamp. This parameter is valid only when pre-queuing is enabled.', example='1719814097'),
      queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='fifo'),
      queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
      randomPreQueueEnable?: string(name='RandomPreQueueEnable', description='Indicates whether random queuing is enabled. Valid values:

*   on
*   off', example='on'),
      sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='3'),
      startTime?: string(name='StartTime', description='The start time of the event. This value is a UNIX timestamp.', example='1719814398'),
      totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='22'),
      waitingRoomEventId?: long(name='WaitingRoomEventId', description='The unique ID of the waiting room event.', example='89677721098****'),
      waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room associated with the event.', example='5c938a045c9ca46607163d34966****'),
      waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='custom'),
    }
  ](name='WaitingRoomEvents', description='The details of the waiting room events.'),
}

model ListWaitingRoomEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomEventsResponseBody(name='body'),
}

/**
 * @summary Queries the information about waiting room events for a waiting room.
 *
 * @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
 *
 * @param request ListWaitingRoomEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomEventsResponse
 */
async function listWaitingRoomEventsWithOptions(request: ListWaitingRoomEventsRequest, runtime: Util.RuntimeOptions): ListWaitingRoomEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWaitingRoomEvents',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about waiting room events for a waiting room.
 *
 * @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
 *
 * @param request ListWaitingRoomEventsRequest
 * @return ListWaitingRoomEventsResponse
 */
async function listWaitingRoomEvents(request: ListWaitingRoomEventsRequest): ListWaitingRoomEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWaitingRoomEventsWithOptions(request, runtime);
}

model ListWaitingRoomRulesRequest {
  ruleName?: string(name='RuleName', description='Optional. The rule name, which can be used to query a specific bypass rule.', example='test'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room to be bypassed, which can be obtained by calling the [ListWatingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='Optional. The rule ID, which can be used to query a specific rule.', example='37286782688****'),
}

model ListWaitingRoomRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to trace a call.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  waitingRoomRules?: [ 
    {
      rule?: string(name='Rule', description='The rule content, which is a policy or conditional expression.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
      ruleEnable?: string(name='RuleEnable', description='Indicates whether the rule is enabled. Valid values:

*   on
*   off', example='on'),
      ruleName?: string(name='RuleName', description='The rule name.', example='ip'),
      waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='The rule ID.', example='37286782688****'),
    }
  ](name='WaitingRoomRules', description='The waiting room bypass rules.'),
}

model ListWaitingRoomRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomRulesResponseBody(name='body'),
}

/**
 * @summary Queries the waiting room bypass rules configured for a waiting room.
 *
 * @description You can call this operation to query the waiting room bypass rules that are associated with a website.
 *
 * @param request ListWaitingRoomRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomRulesResponse
 */
async function listWaitingRoomRulesWithOptions(request: ListWaitingRoomRulesRequest, runtime: Util.RuntimeOptions): ListWaitingRoomRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWaitingRoomRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the waiting room bypass rules configured for a waiting room.
 *
 * @description You can call this operation to query the waiting room bypass rules that are associated with a website.
 *
 * @param request ListWaitingRoomRulesRequest
 * @return ListWaitingRoomRulesResponse
 */
async function listWaitingRoomRules(request: ListWaitingRoomRulesRequest): ListWaitingRoomRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWaitingRoomRulesWithOptions(request, runtime);
}

model ListWaitingRoomsRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='120876698010528'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room. Specify this parameter to query the information about a specific waiting room.', example='6a51d5bc6460887abd1291dc7d4d****'),
}

model ListWaitingRoomsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to trace a call.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  waitingRooms?: [ 
    {
      cookieName?: string(name='CookieName', description='The name of the custom cookie.', example='__aliwaitingroom_example'),
      customPageHtml?: string(name='CustomPageHtml', description='The HTML content or identifier of the custom queuing page. This parameter is valid only when `WaitingRoomType` is set to `custom`. The content must be URL-encoded.'),
      description?: string(name='Description', description='The description of the waiting room.'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Indicates whether session renewal is disabled. Valid values:

*   on
*   off', example='on'),
      enable?: string(name='Enable', description='Indicates whether the waiting room is enabled. Valid values:

*   on
*   off', example='on'),
      hostNameAndPath?: [ 
        {
          domain?: string(name='Domain', description='The domain name.', example='example.com'),
          path?: string(name='Path', description='The path.', example='/test'),
          subdomain?: string(name='Subdomain', description='The subdomain.', example='test.'),
        }
      ](name='HostNameAndPath', description='The hostname and path.'),
      jsonResponseEnable?: string(name='JsonResponseEnable', description='Indicates whether JSON response is enabled. If you set this parameter to on, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
      language?: string(name='Language', description='The language of the waiting room page. This parameter is returned when the waiting room type is set to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
      name?: string(name='Name', description='The name of the waiting room.'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='200'),
      queueAllEnable?: string(name='QueueAllEnable', description='Indicates whether all requests must be queued. Valid values:

*   on
*   off', example='on'),
      queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='random'),
      queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
      sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='3600'),
      totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='300'),
      waitingRoomId?: string(name='WaitingRoomId', description='The unique ID of the waiting room.', example='6a51d5bc6460887abd1291dc7d4d****'),
      waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='default'),
    }
  ](name='WaitingRooms', description='The waiting rooms.'),
}

model ListWaitingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomsResponseBody(name='body'),
}

/**
 * @summary Queries the information about all waiting rooms in a website.
 *
 * @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
 *
 * @param request ListWaitingRoomsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomsResponse
 */
async function listWaitingRoomsWithOptions(request: ListWaitingRoomsRequest, runtime: Util.RuntimeOptions): ListWaitingRoomsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWaitingRooms',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about all waiting rooms in a website.
 *
 * @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
 *
 * @param request ListWaitingRoomsRequest
 * @return ListWaitingRoomsResponse
 */
async function listWaitingRooms(request: ListWaitingRoomsRequest): ListWaitingRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWaitingRoomsWithOptions(request, runtime);
}

model PreloadCachesRequest {
  content?: [ string ](name='Content', description='The files to be prefetched.'),
  headers?: map[string]string(name='Headers', description='By default, prefetch requests include the Accept-Encoding:gzip header. If you want a prefetch request to include other headers or implement multi-replica prefetch, you can specify a custom prefetch header by configuring the Headers parameter.'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
}

model PreloadCachesShrinkRequest {
  contentShrink?: string(name='Content', description='The files to be prefetched.'),
  headersShrink?: string(name='Headers', description='By default, prefetch requests include the Accept-Encoding:gzip header. If you want a prefetch request to include other headers or implement multi-replica prefetch, you can specify a custom prefetch header by configuring the Headers parameter.'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.', example='123456789****'),
}

model PreloadCachesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  taskId?: string(name='TaskId', description='The prefetch task ID.', example='16401427840'),
}

model PreloadCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreloadCachesResponseBody(name='body'),
}

/**
 * @summary Prefetches cache.
 *
 * @param tmpReq PreloadCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PreloadCachesResponse
 */
async function preloadCachesWithOptions(tmpReq: PreloadCachesRequest, runtime: Util.RuntimeOptions): PreloadCachesResponse {
  Util.validateModel(tmpReq);
  var request = new PreloadCachesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.headers)) {
    request.headersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.headers, 'Headers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.headersShrink)) {
    query['Headers'] = request.headersShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PreloadCaches',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Prefetches cache.
 *
 * @param request PreloadCachesRequest
 * @return PreloadCachesResponse
 */
async function preloadCaches(request: PreloadCachesRequest): PreloadCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadCachesWithOptions(request, runtime);
}

model PublishEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  fullRelease?: boolean(name='FullRelease', description='Specifies whether to fully release the version. This parameter takes effect only when PublishType is set to region.', example='true'),
  percentage?: int32(name='Percentage', description='The release percentage. Valid values: 1 to 100. Default value: 100.', example='100'),
  publishEnv?: string(name='PublishEnv', description='The environment to which you want to release the version. Valid values:

*   prod: the production environment.
*   staging: the staging environment.

This parameter is required.', example='prod'),
  publishType?: string(name='PublishType', description='Specifies how the version is released. Valid values:

*   percentage: releases the version by percentage.
*   region: releases the version by region.

If you do not specify this parameter, the version is released by percentage by default.', example='percentage'),
  regions?: [ string ](name='Regions', description='The regions to which the version is released.'),
  remarks?: string(name='Remarks', description='The remarks. This parameter is empty by default.', example='test publish app'),
  startTime?: string(name='StartTime', description='The time when the application version starts to be released. If you do not specify this parameter, the current time is used by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2023-06-05T16:00:00Z'),
  versionId?: string(name='VersionId', description='The version ID.

This parameter is required.', example='ver-87962637161651****'),
}

model PublishEdgeContainerAppVersionShrinkRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  fullRelease?: boolean(name='FullRelease', description='Specifies whether to fully release the version. This parameter takes effect only when PublishType is set to region.', example='true'),
  percentage?: int32(name='Percentage', description='The release percentage. Valid values: 1 to 100. Default value: 100.', example='100'),
  publishEnv?: string(name='PublishEnv', description='The environment to which you want to release the version. Valid values:

*   prod: the production environment.
*   staging: the staging environment.

This parameter is required.', example='prod'),
  publishType?: string(name='PublishType', description='Specifies how the version is released. Valid values:

*   percentage: releases the version by percentage.
*   region: releases the version by region.

If you do not specify this parameter, the version is released by percentage by default.', example='percentage'),
  regionsShrink?: string(name='Regions', description='The regions to which the version is released.'),
  remarks?: string(name='Remarks', description='The remarks. This parameter is empty by default.', example='test publish app'),
  startTime?: string(name='StartTime', description='The time when the application version starts to be released. If you do not specify this parameter, the current time is used by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2023-06-05T16:00:00Z'),
  versionId?: string(name='VersionId', description='The version ID.

This parameter is required.', example='ver-87962637161651****'),
}

model PublishEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model PublishEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
 *
 * @param tmpReq PublishEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishEdgeContainerAppVersionResponse
 */
async function publishEdgeContainerAppVersionWithOptions(tmpReq: PublishEdgeContainerAppVersionRequest, runtime: Util.RuntimeOptions): PublishEdgeContainerAppVersionResponse {
  Util.validateModel(tmpReq);
  var request = new PublishEdgeContainerAppVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.regions)) {
    request.regionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regions, 'Regions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.fullRelease)) {
    query['FullRelease'] = request.fullRelease;
  }
  if (!Util.isUnset(request.publishType)) {
    query['PublishType'] = request.publishType;
  }
  if (!Util.isUnset(request.regionsShrink)) {
    query['Regions'] = request.regionsShrink;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.percentage)) {
    body['Percentage'] = request.percentage;
  }
  if (!Util.isUnset(request.publishEnv)) {
    body['PublishEnv'] = request.publishEnv;
  }
  if (!Util.isUnset(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
 *
 * @param request PublishEdgeContainerAppVersionRequest
 * @return PublishEdgeContainerAppVersionResponse
 */
async function publishEdgeContainerAppVersion(request: PublishEdgeContainerAppVersionRequest): PublishEdgeContainerAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishEdgeContainerAppVersionWithOptions(request, runtime);
}

model PublishRoutineCodeVersionRequest {
  canaryAreaList?: [ string ](name='CanaryAreaList', description='The regions for canary release.'),
  canaryCodeVersion?: string(name='CanaryCodeVersion', description='The version number for canary release.', example='1710120201067203242'),
  codeVersion?: string(name='CodeVersion', description='The code version to be released.', example='1710120201067203242'),
  env?: string(name='Env', description='The environment name.

This parameter is required.', example='production'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='PublishRoutineCodeVersion'),
}

model PublishRoutineCodeVersionShrinkRequest {
  canaryAreaListShrink?: string(name='CanaryAreaList', description='The regions for canary release.'),
  canaryCodeVersion?: string(name='CanaryCodeVersion', description='The version number for canary release.', example='1710120201067203242'),
  codeVersion?: string(name='CodeVersion', description='The code version to be released.', example='1710120201067203242'),
  env?: string(name='Env', description='The environment name.

This parameter is required.', example='production'),
  name?: string(name='Name', description='The routine name.

This parameter is required.', example='PublishRoutineCodeVersion'),
}

model PublishRoutineCodeVersionResponseBody = {
  codeVersion?: string(name='CodeVersion', description='The code version.', example='1710120201067203242'),
  requestId?: string(name='RequestId', description='The request ID.', example='EDBD3EB3-97DA-5465-AEF5-8DCA5DC5E395'),
}

model PublishRoutineCodeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishRoutineCodeVersionResponseBody(name='body'),
}

/**
 * @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
 *
 * @param tmpReq PublishRoutineCodeVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishRoutineCodeVersionResponse
 */
async function publishRoutineCodeVersionWithOptions(tmpReq: PublishRoutineCodeVersionRequest, runtime: Util.RuntimeOptions): PublishRoutineCodeVersionResponse {
  Util.validateModel(tmpReq);
  var request = new PublishRoutineCodeVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.canaryAreaList)) {
    request.canaryAreaListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.canaryAreaList, 'CanaryAreaList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.canaryAreaListShrink)) {
    body['CanaryAreaList'] = request.canaryAreaListShrink;
  }
  if (!Util.isUnset(request.canaryCodeVersion)) {
    body['CanaryCodeVersion'] = request.canaryCodeVersion;
  }
  if (!Util.isUnset(request.codeVersion)) {
    body['CodeVersion'] = request.codeVersion;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishRoutineCodeVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
 *
 * @param request PublishRoutineCodeVersionRequest
 * @return PublishRoutineCodeVersionResponse
 */
async function publishRoutineCodeVersion(request: PublishRoutineCodeVersionRequest): PublishRoutineCodeVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishRoutineCodeVersionWithOptions(request, runtime);
}

model PurgeCachesRequest {
  content?: {
    cacheTags?: [ string ](name='CacheTags', description='The cache tags that are used to purge the cache. This parameter is required if Type is set to cachetag.'),
    directories?: [ string ](name='Directories', description='The directories that are used to purge the cache. This parameter is required if Type is set to directory.'),
    files?: [ any ](name='Files', description='The files to purge. This parameter is required if Type is set to file.'),
    hostnames?: [ string ](name='Hostnames', description='The hostnames that are used to purge the cache. This parameter is required if Type is set to hostname.'),
    ignoreParams?: [ string ](name='IgnoreParams', description='The file URLs with parameters ignored that are used to purge the cache. This parameter is required if Type is set to ignoreParams.'),
    purgeAll?: boolean(name='PurgeAll', description='Specifies whether to purge all cache of the website. Default value: false. The value is true when Type is set to purgeall.', example='true'),
  }(name='Content', description='The content to purge.'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', description='Specifies whether to purge cached resources for edge computing. For example, purge the resources cached by the CacheAPI operation of Edge Routine.', example='true'),
  force?: boolean(name='Force', description='Specifies whether to purge resources in a directory if the resources requested are different from the resources on the origin server. Default value: false.

*   **true**: purges all resources in the directory.
*   **false**: purges only changed resources in the directory.

>  This configuration takes effect for the following purge task types: directory, cachetag, ignoreParams, hostname, and purgeall.', example='true'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge task. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specific parameters ignored. This option ignores the question mark (?) and parameters after the question mark (?) in a request URL and purges the cache. After you call this operation with the request URL submitted, the system compares the submitted URL with the URL of the cached resource without specified parameters. If the URLs match, the POPs purge the cached resources.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.

This parameter is required.', example='file'),
}

model PurgeCachesShrinkRequest {
  contentShrink?: string(name='Content', description='The content to purge.'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', description='Specifies whether to purge cached resources for edge computing. For example, purge the resources cached by the CacheAPI operation of Edge Routine.', example='true'),
  force?: boolean(name='Force', description='Specifies whether to purge resources in a directory if the resources requested are different from the resources on the origin server. Default value: false.

*   **true**: purges all resources in the directory.
*   **false**: purges only changed resources in the directory.

>  This configuration takes effect for the following purge task types: directory, cachetag, ignoreParams, hostname, and purgeall.', example='true'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge task. Valid values:

*   **file** (default): purges the cache by file.
*   **cachetag**: purges the cache by cache tag.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specific parameters ignored. This option ignores the question mark (?) and parameters after the question mark (?) in a request URL and purges the cache. After you call this operation with the request URL submitted, the system compares the submitted URL with the URL of the cached resource without specified parameters. If the URLs match, the POPs purge the cached resources.
*   **hostname**: purges the cache by hostname.
*   **purgeall**: purges all cache.

This parameter is required.', example='file'),
}

model PurgeCachesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  taskId?: string(name='TaskId', description='The task ID, which is generated after you create a task.', example='15940956620'),
}

model PurgeCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurgeCachesResponseBody(name='body'),
}

/**
 * @summary Purges resources cached on points of presence (POPs). You can purge the cache by file URL, directory, cache tag, hostname, or URL with specified parameters ignored, or purge all the cache.
 *
 * @param tmpReq PurgeCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PurgeCachesResponse
 */
async function purgeCachesWithOptions(tmpReq: PurgeCachesRequest, runtime: Util.RuntimeOptions): PurgeCachesResponse {
  Util.validateModel(tmpReq);
  var request = new PurgeCachesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.edgeComputePurge)) {
    query['EdgeComputePurge'] = request.edgeComputePurge;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurgeCaches',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Purges resources cached on points of presence (POPs). You can purge the cache by file URL, directory, cache tag, hostname, or URL with specified parameters ignored, or purge all the cache.
 *
 * @param request PurgeCachesRequest
 * @return PurgeCachesResponse
 */
async function purgeCaches(request: PurgeCachesRequest): PurgeCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return purgeCachesWithOptions(request, runtime);
}

model PutKvRequest {
  base64?: boolean(name='Base64', description='Specifies whether the content of the key is Base64-encoded. Set this parameter to true if you want to store the key content in binary format. When this parameter is set to true, the Value parameter must be Base64-encoded.', example='true'),
  expiration?: long(name='Expiration', description='The time when the key-value pair expires, which cannot be earlier than the current time. The value is a timestamp in seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='1690081381'),
  expirationTtl?: long(name='ExpirationTtl', description='The relative expiration time. Unit: seconds. If you specify both Expiration and ExpirationTtl, only ExpirationTtl takes effect.', example='3600'),
  key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namespace'),
  value?: string(name='Value', description='The content of the key, which can be up to 2 MB (2 × 1000 × 1000). If the content is larger than 2 MB, call [PutKvWithHighCapacity](https://help.aliyun.com/document_detail/2850486.html).

This parameter is required.', example='test_value'),
}

model PutKvResponseBody = {
  length?: string(name='Length', description='The length of the value in the key-value pair.', example='4'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', description='The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.', example='test'),
}

model PutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvResponseBody(name='body'),
}

/**
 * @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
 *
 * @param request PutKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutKvResponse
 */
async function putKvWithOptions(request: PutKvRequest, runtime: Util.RuntimeOptions): PutKvResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.base64)) {
    query['Base64'] = request.base64;
  }
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.expirationTtl)) {
    query['ExpirationTtl'] = request.expirationTtl;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.value)) {
    body['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
 *
 * @param request PutKvRequest
 * @return PutKvResponse
 */
async function putKv(request: PutKvRequest): PutKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return putKvWithOptions(request, runtime);
}

model PutKvWithHighCapacityRequest {
  key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namesapce'),
  url?: string(name='Url', description='The download URL of the key-value pair that you want to upload. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model PutKvWithHighCapacityAdvanceRequest {
  key?: string(name='Key', description='The key name. The name can be up to 512 characters in length and cannot contain spaces or backslashes (\\\\\\\\).

This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='test_namesapce'),
  urlObject?: readable(name='Url', description='The download URL of the key-value pair that you want to upload. This parameter is automatically filled in when you use the SDK to call the operation.

This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model PutKvWithHighCapacityResponseBody = {
  length?: string(name='Length', description='The length of the value in the key-value pair.', example='4'),
  requestId?: string(name='RequestId', description='The request ID.', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', description='The content of the key. If the content has more than 256 characters in length, the system displays the first 100 and the last 100 characters, and omits the middle part.', example='test'),
}

model PutKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
 *     func TestPutKvWithHighCapacity() {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs.
 *     	namespace := "test-put-kv"
 *     	key := "test_PutKvWithHighCapacity_0"
 *     	value := strings.Repeat("t", 10*1024*1024)
 *     	rawReq := &PutKvRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		Value:     &value,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		UrlObject: bytes.NewReader([]byte(payload)),
 *     	}
 *     	resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request PutKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutKvWithHighCapacityResponse
 */
async function putKvWithHighCapacityWithOptions(request: PutKvWithHighCapacityRequest, runtime: Util.RuntimeOptions): PutKvWithHighCapacityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
 *
 * @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
 *     func TestPutKvWithHighCapacity() {
 *     	// Initialize the configurations.
 *     	cfg := new(openapi.Config)
 *     	cfg.SetAccessKeyId("xxxxxxxxx")
 *     	cfg.SetAccessKeySecret("xxxxxxxxxx")
 *     	cli, err := NewClient(cfg)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	runtime := &util.RuntimeOptions{}
 *     	// Construct a request for uploading key-value pairs.
 *     	namespace := "test-put-kv"
 *     	key := "test_PutKvWithHighCapacity_0"
 *     	value := strings.Repeat("t", 10*1024*1024)
 *     	rawReq := &PutKvRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		Value:     &value,
 *     	}
 *     	payload, err := json.Marshal(rawReq)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	// If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
 *     	reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
 *     		Namespace: &namespace,
 *     		Key:       &key,
 *     		UrlObject: bytes.NewReader([]byte(payload)),
 *     	}
 *     	resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
 *     	if err != nil {
 *     		return err
 *     	}
 *     	return nil
 *     }
 *
 * @param request PutKvWithHighCapacityRequest
 * @return PutKvWithHighCapacityResponse
 */
async function putKvWithHighCapacity(request: PutKvWithHighCapacityRequest): PutKvWithHighCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return putKvWithHighCapacityWithOptions(request, runtime);
}

async function putKvWithHighCapacityAdvance(request: PutKvWithHighCapacityAdvanceRequest, runtime: Util.RuntimeOptions): PutKvWithHighCapacityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var putKvWithHighCapacityReq = new PutKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, putKvWithHighCapacityReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    putKvWithHighCapacityReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var putKvWithHighCapacityResp = putKvWithHighCapacityWithOptions(putKvWithHighCapacityReq, runtime);
  return putKvWithHighCapacityResp;
}

model RebuildEdgeContainerAppStagingEnvRequest {
  appId?: string(name='AppId', description='The application ID, which can be obtained by calling the [ListEdgeContainerApps](~~ListEdgeContainerApps~~) operation.', example='app-88068867578379****'),
}

model RebuildEdgeContainerAppStagingEnvResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
}

model RebuildEdgeContainerAppStagingEnvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebuildEdgeContainerAppStagingEnvResponseBody(name='body'),
}

/**
 * @summary Rebuilds the staging environment for containerized applications.
 *
 * @param request RebuildEdgeContainerAppStagingEnvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebuildEdgeContainerAppStagingEnvResponse
 */
async function rebuildEdgeContainerAppStagingEnvWithOptions(request: RebuildEdgeContainerAppStagingEnvRequest, runtime: Util.RuntimeOptions): RebuildEdgeContainerAppStagingEnvResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebuildEdgeContainerAppStagingEnv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rebuilds the staging environment for containerized applications.
 *
 * @param request RebuildEdgeContainerAppStagingEnvRequest
 * @return RebuildEdgeContainerAppStagingEnvResponse
 */
async function rebuildEdgeContainerAppStagingEnv(request: RebuildEdgeContainerAppStagingEnvRequest): RebuildEdgeContainerAppStagingEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebuildEdgeContainerAppStagingEnvWithOptions(request, runtime);
}

model ResetScheduledPreloadJobRequest {
  id?: string(name='Id', description='The ID of the scheduled prefetch task.', example='ResetScheduledPreloadJob'),
}

model ResetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  createdAt?: string(name='CreatedAt', description='The time when the SQL task was created.', example='2024-06-02T02:23:26Z'),
  domains?: string(name='Domains', description='The domain names to be prefetched.', example='testurl.com'),
  errorInfo?: string(name='ErrorInfo', description='The error message that is returned.', example='invalid domain:test.com'),
  failedFileOss?: string(name='FailedFileOss', description='The URL of the OSS object that stores a list of URLs that failed the conditional check for prefetching.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
  fileId?: string(name='FileId', description='The ID of the URL list file, which can be used during downloads.', example='665d3b48621bccf3fe29e1a7'),
  id?: string(name='Id', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  insertWay?: string(name='InsertWay', description='The method to submit the URLs to be prefetched.', example='oss'),
  name?: string(name='Name', description='The delivery project name.', example='example'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  siteId?: long(name='SiteId', description='The website ID.', example='190007158391808'),
  taskSubmitted?: int32(name='TaskSubmitted', description='The number of submitted prefetch tasks.', example='1'),
  taskType?: string(name='TaskType', description='The task type. Valid values: refresh and preload.', example='preload'),
  urlCount?: int32(name='UrlCount', description='The total number of URLs.', example='2'),
  urlSubmitted?: int32(name='UrlSubmitted', description='The number of submitted URLs.', example='1'),
}

model ResetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
 *
 * @param request ResetScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetScheduledPreloadJobResponse
 */
async function resetScheduledPreloadJobWithOptions(request: ResetScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): ResetScheduledPreloadJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
 *
 * @param request ResetScheduledPreloadJobRequest
 * @return ResetScheduledPreloadJobResponse
 */
async function resetScheduledPreloadJob(request: ResetScheduledPreloadJobRequest): ResetScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetScheduledPreloadJobWithOptions(request, runtime);
}

model RevokeClientCertificateRequest {
  id?: string(name='Id', description='The certificate ID.

This parameter is required.', example='baba39055622c008b90285a8838ed09a'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model RevokeClientCertificateResponseBody = {
  id?: string(name='Id', description='The certificate ID.', example='baba39055622c008b90285a8838ed09a'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model RevokeClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeClientCertificateResponseBody(name='body'),
}

/**
 * @summary Revokes an activated client certificate.
 *
 * @param request RevokeClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeClientCertificateResponse
 */
async function revokeClientCertificateWithOptions(request: RevokeClientCertificateRequest, runtime: Util.RuntimeOptions): RevokeClientCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Revokes an activated client certificate.
 *
 * @param request RevokeClientCertificateRequest
 * @return RevokeClientCertificateResponse
 */
async function revokeClientCertificate(request: RevokeClientCertificateRequest): RevokeClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeClientCertificateWithOptions(request, runtime);
}

model RollbackEdgeContainerAppVersionRequest {
  appId?: string(name='AppId', description='The application ID.

This parameter is required.', example='app-88068867578379****'),
  remarks?: string(name='Remarks', description='The remarks.', example='test rollback app'),
  versionId?: string(name='VersionId', description='The ID of version that you want to roll back.

This parameter is required.', example='ver-87962637161651****'),
}

model RollbackEdgeContainerAppVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model RollbackEdgeContainerAppVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RollbackEdgeContainerAppVersionResponseBody(name='body'),
}

/**
 * @summary Rolls back a version of a containerized application.
 *
 * @param request RollbackEdgeContainerAppVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RollbackEdgeContainerAppVersionResponse
 */
async function rollbackEdgeContainerAppVersionWithOptions(request: RollbackEdgeContainerAppVersionRequest, runtime: Util.RuntimeOptions): RollbackEdgeContainerAppVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.remarks)) {
    body['Remarks'] = request.remarks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RollbackEdgeContainerAppVersion',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rolls back a version of a containerized application.
 *
 * @param request RollbackEdgeContainerAppVersionRequest
 * @return RollbackEdgeContainerAppVersionResponse
 */
async function rollbackEdgeContainerAppVersion(request: RollbackEdgeContainerAppVersionRequest): RollbackEdgeContainerAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackEdgeContainerAppVersionWithOptions(request, runtime);
}

model SetCertificateRequest {
  casId?: long(name='CasId', description='The certificate ID on Certificate Management Service.', example='30000478'),
  certificate?: string(name='Certificate', description='The certificate content.', example='-----BEGIN CERTIFICATE-----'),
  id?: string(name='Id', description='The certificate ID on ESA.', example='30001303'),
  name?: string(name='Name', description='The certificate name.', example='yourCertName'),
  ownerId?: long(name='OwnerId'),
  privateKey?: string(name='PrivateKey', description='The private key of the certificate.', example='-----BEGIN PRIVATE KEY-----'),
  region?: string(name='Region', description='The region.', example='cn-hangzhou'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
  type?: string(name='Type', description='The certificate type. Valid values:

*   cas: a certificate purchased by using Certificate Management Service.
*   upload: a custom certificate that you upload.

This parameter is required.', example='cas'),
  update?: boolean(name='Update', description='Specifies whether to update the certificate.', example='true'),
}

model SetCertificateResponseBody = {
  id?: string(name='Id'),
  requestId?: string(name='RequestId', description='The request ID.', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
}

model SetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetCertificateResponseBody(name='body'),
}

/**
 * @summary Configures whether to enable certificates and update certificate information for a website.
 *
 * @param request SetCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetCertificateResponse
 */
async function setCertificateWithOptions(request: SetCertificateRequest, runtime: Util.RuntimeOptions): SetCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.casId)) {
    body['CasId'] = request.casId;
  }
  if (!Util.isUnset(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.privateKey)) {
    body['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.update)) {
    body['Update'] = request.update;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures whether to enable certificates and update certificate information for a website.
 *
 * @param request SetCertificateRequest
 * @return SetCertificateResponse
 */
async function setCertificate(request: SetCertificateRequest): SetCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCertificateWithOptions(request, runtime);
}

model SetClientCertificateHostnamesRequest {
  hostnames?: [ string ](name='Hostnames', description='The domain names to associate.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model SetClientCertificateHostnamesShrinkRequest {
  hostnamesShrink?: string(name='Hostnames', description='The domain names to associate.

This parameter is required.'),
  id?: string(name='Id', description='The ID of the client CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  siteId?: long(name='SiteId', description='The website ID.

This parameter is required.', example='1234567890123'),
}

model SetClientCertificateHostnamesResponseBody = {
  id?: string(name='Id', description='The ID of the client CA certificate.', example='babab9db65ee5efcca9f3d41d4b50d66'),
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  siteId?: long(name='SiteId', description='The website ID.', example='1234567890123'),
  siteName?: string(name='SiteName', description='The website name.', example='example.com'),
}

model SetClientCertificateHostnamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetClientCertificateHostnamesResponseBody(name='body'),
}

/**
 * @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
 *
 * @param tmpReq SetClientCertificateHostnamesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetClientCertificateHostnamesResponse
 */
async function setClientCertificateHostnamesWithOptions(tmpReq: SetClientCertificateHostnamesRequest, runtime: Util.RuntimeOptions): SetClientCertificateHostnamesResponse {
  Util.validateModel(tmpReq);
  var request = new SetClientCertificateHostnamesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hostnames)) {
    request.hostnamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostnames, 'Hostnames', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hostnamesShrink)) {
    body['Hostnames'] = request.hostnamesShrink;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetClientCertificateHostnames',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
 *
 * @param request SetClientCertificateHostnamesRequest
 * @return SetClientCertificateHostnamesResponse
 */
async function setClientCertificateHostnames(request: SetClientCertificateHostnamesRequest): SetClientCertificateHostnamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setClientCertificateHostnamesWithOptions(request, runtime);
}

model SetHttpDDoSAttackIntelligentProtectionRequest {
  aiMode?: string(name='AiMode', description='The mode of smart HTTP DDoS protection. Valid values:

*   **observe**: alert.
*   **defense**: block.

This parameter is required.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='The level of smart HTTP DDoS protection. Valid values:

*   **level0**: very loose.
*   **level30**: loose.
*   **level60**: normal.
*   **level90**: strict.

This parameter is required.', example='level60'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', description='The mode of smart HTTP DDoS protection. Valid values:

*   **observe**: alert.
*   **defense**: block.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='The level of smart HTTP DDoS protection. Valid values:

*   **level0**: very loose.
*   **level30**: loose.
*   **level60**: normal.
*   **level90**: strict.', example='level60'),
  requestId?: string(name='RequestId', description='The request ID.', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
 * @summary Configures smart HTTP DDoS protection.
 *
 * @param request SetHttpDDoSAttackIntelligentProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
async function setHttpDDoSAttackIntelligentProtectionWithOptions(request: SetHttpDDoSAttackIntelligentProtectionRequest, runtime: Util.RuntimeOptions): SetHttpDDoSAttackIntelligentProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aiMode)) {
    query['AiMode'] = request.aiMode;
  }
  if (!Util.isUnset(request.aiTemplate)) {
    query['AiTemplate'] = request.aiTemplate;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetHttpDDoSAttackIntelligentProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures smart HTTP DDoS protection.
 *
 * @param request SetHttpDDoSAttackIntelligentProtectionRequest
 * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
async function setHttpDDoSAttackIntelligentProtection(request: SetHttpDDoSAttackIntelligentProtectionRequest): SetHttpDDoSAttackIntelligentProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpDDoSAttackIntelligentProtectionWithOptions(request, runtime);
}

model SetHttpDDoSAttackProtectionRequest {
  globalMode?: string(name='GlobalMode', description='The level of HTTP DDoS attack protection. Valid values:

*   **very weak**: very loose.
*   **weak**: loose.
*   **default**: normal.
*   **hard**: strict.

This parameter is required.', example='default'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', description='The level of HTTP DDoS attack protection.', example='default'),
  requestId?: string(name='RequestId', description='The request ID.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
 * @summary Configures HTTP DDoS attack protection for a website.
 *
 * @param request SetHttpDDoSAttackProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetHttpDDoSAttackProtectionResponse
 */
async function setHttpDDoSAttackProtectionWithOptions(request: SetHttpDDoSAttackProtectionRequest, runtime: Util.RuntimeOptions): SetHttpDDoSAttackProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalMode)) {
    query['GlobalMode'] = request.globalMode;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetHttpDDoSAttackProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures HTTP DDoS attack protection for a website.
 *
 * @param request SetHttpDDoSAttackProtectionRequest
 * @return SetHttpDDoSAttackProtectionResponse
 */
async function setHttpDDoSAttackProtection(request: SetHttpDDoSAttackProtectionRequest): SetHttpDDoSAttackProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpDDoSAttackProtectionWithOptions(request, runtime);
}

model StartScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='StartScheduledPreloadExecution'),
}

model StartScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.', example='665d3b48621bccf3fe29e1a7'),
  interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
  jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
  status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='waiting'),
}

model StartScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Starts a scheduled prefetch plan based on the plan ID.
 *
 * @param request StartScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartScheduledPreloadExecutionResponse
 */
async function startScheduledPreloadExecutionWithOptions(request: StartScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): StartScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts a scheduled prefetch plan based on the plan ID.
 *
 * @param request StartScheduledPreloadExecutionRequest
 * @return StartScheduledPreloadExecutionResponse
 */
async function startScheduledPreloadExecution(request: StartScheduledPreloadExecutionRequest): StartScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startScheduledPreloadExecutionWithOptions(request, runtime);
}

model StopScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='StopScheduledPreloadExecution'),
}

model StopScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
  interval?: int32(name='Interval', description='The time interval between each batch execution in the plan. Unit: seconds.', example='60'),
  jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
  status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='stopped'),
}

model StopScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Stops a scheduled prefetch plan based on the plan ID.
 *
 * @param request StopScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopScheduledPreloadExecutionResponse
 */
async function stopScheduledPreloadExecutionWithOptions(request: StopScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): StopScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops a scheduled prefetch plan based on the plan ID.
 *
 * @param request StopScheduledPreloadExecutionRequest
 * @return StopScheduledPreloadExecutionResponse
 */
async function stopScheduledPreloadExecution(request: StopScheduledPreloadExecutionRequest): StopScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopScheduledPreloadExecutionWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags. Valid values:

*   **true**
*   **false**

Default value: **false**.', example='false'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region where the resources reside. Set the value to **cn-hangzhou**.

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N. Valid values of N: **1** to **50**.

This parameter is required.'),
  resourceType?: string(name='ResourceType', description='The resource type.

This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tagKey?: [ string ](name='TagKey', description='The key of tag N to remove from the resource. Valid values of N: **1** to **20**.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @summary Deletes a resource tag based on a specified resource ID.
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a resource tag based on a specified resource ID.
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCustomScenePolicyRequest {
  endTime?: string(name='EndTime', description='The time when the policy expires.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', description='The policy name.

This parameter is required.', example='test'),
  objects?: string(name='Objects', description='The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).', example='123456****'),
  policyId?: long(name='PolicyId', description='The policy ID, which can be obtained by calling the [DescribeCustomScenePolicies](https://help.aliyun.com/document_detail/2850508.html) operation.

This parameter is required.', example='1'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.

This parameter is required.', example='promotion'),
}

model UpdateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', description='The time when the policy expires.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', description='The policy name.', example='test'),
  objects?: [ string ](name='Objects', description='The IDs of websites associated.'),
  policyId?: long(name='PolicyId', description='The policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  startTime?: string(name='StartTime', description='The time when the policy takes effect.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', description='The name of the policy template. Valid value:

*   **promotion**: major events.', example='promotion'),
}

model UpdateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a custom scenario-specific policy.
 *
 * @param request UpdateCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomScenePolicyResponse
 */
async function updateCustomScenePolicyWithOptions(request: UpdateCustomScenePolicyRequest, runtime: Util.RuntimeOptions): UpdateCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.objects)) {
    query['Objects'] = request.objects;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a custom scenario-specific policy.
 *
 * @param request UpdateCustomScenePolicyRequest
 * @return UpdateCustomScenePolicyResponse
 */
async function updateCustomScenePolicy(request: UpdateCustomScenePolicyRequest): UpdateCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomScenePolicyWithOptions(request, runtime);
}

model UpdateKvNamespaceRequest {
  namespace?: string(name='Namespace', description='The name of the namespace that you specify when you call the [CreateKvNamespace](https://help.aliyun.com/document_detail/2850317.html) operation.

This parameter is required.', example='ns1'),
  title?: string(name='Title', description='The new name of the namespace.

This parameter is required.', example='new_ns'),
}

model UpdateKvNamespaceResponseBody = {
  description?: string(name='Description', description='The description of the namespace.', example='this is a test ns.'),
  namespace?: string(name='Namespace', description='The updated name of the namespace.', example='new_ns1'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='643355322374688768'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  status?: string(name='Status', description='The status of the namespace. Valid values:

*   **online**: normal.
*   **delete**: pending deletion.
*   **deleting**: being deleted.
*   **deleted**: deleted.', example='online'),
}

model UpdateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateKvNamespaceResponseBody(name='body'),
}

/**
 * @summary Updates the name of a namespace in Edge KV.
 *
 * @param request UpdateKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateKvNamespaceResponse
 */
async function updateKvNamespaceWithOptions(request: UpdateKvNamespaceRequest, runtime: Util.RuntimeOptions): UpdateKvNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the name of a namespace in Edge KV.
 *
 * @param request UpdateKvNamespaceRequest
 * @return UpdateKvNamespaceResponse
 */
async function updateKvNamespace(request: UpdateKvNamespaceRequest): UpdateKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateKvNamespaceWithOptions(request, runtime);
}

model UpdateOriginPoolRequest {
  enabled?: boolean(name='Enabled'),
  id?: long(name='Id', description='This parameter is required.', example='UpdateOriginPool'),
  origins?: [ 
    {
      address?: string(name='Address'),
      authConf?: {
        accessKey?: string(name='AccessKey'),
        authType?: string(name='AuthType'),
        region?: string(name='Region'),
        secretKey?: string(name='SecretKey'),
        version?: string(name='Version'),
      }(name='AuthConf'),
      enabled?: boolean(name='Enabled'),
      header?: any(name='Header'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      weight?: int32(name='Weight'),
    }
  ](name='Origins'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model UpdateOriginPoolShrinkRequest {
  enabled?: boolean(name='Enabled'),
  id?: long(name='Id', description='This parameter is required.', example='UpdateOriginPool'),
  originsShrink?: string(name='Origins'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
}

model UpdateOriginPoolResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateOriginPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginPoolResponseBody(name='body'),
}

/**
 * @summary 修改监视器
 *
 * @param tmpReq UpdateOriginPoolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginPoolResponse
 */
async function updateOriginPoolWithOptions(tmpReq: UpdateOriginPoolRequest, runtime: Util.RuntimeOptions): UpdateOriginPoolResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateOriginPoolShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.origins)) {
    request.originsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.origins, 'Origins', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.originsShrink)) {
    query['Origins'] = request.originsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOriginPool',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改监视器
 *
 * @param request UpdateOriginPoolRequest
 * @return UpdateOriginPoolResponse
 */
async function updateOriginPool(request: UpdateOriginPoolRequest): UpdateOriginPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOriginPoolWithOptions(request, runtime);
}

model UpdateOriginProtectionRequest {
  originConverge?: string(name='OriginConverge', description='The IP convergence status.

*   on
*   off

This parameter is required.', example='on'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateOriginProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C6B5E5A-42FC-5DF2-986C-4DAAE3C55086'),
}

model UpdateOriginProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginProtectionResponseBody(name='body'),
}

/**
 * @summary Enables or disables IP convergence.
 *
 * @param request UpdateOriginProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginProtectionResponse
 */
async function updateOriginProtectionWithOptions(request: UpdateOriginProtectionRequest, runtime: Util.RuntimeOptions): UpdateOriginProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.originConverge)) {
    query['OriginConverge'] = request.originConverge;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOriginProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables IP convergence.
 *
 * @param request UpdateOriginProtectionRequest
 * @return UpdateOriginProtectionResponse
 */
async function updateOriginProtection(request: UpdateOriginProtectionRequest): UpdateOriginProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOriginProtectionWithOptions(request, runtime);
}

model UpdateOriginProtectionIpWhiteListRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
}

model UpdateOriginProtectionIpWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model UpdateOriginProtectionIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOriginProtectionIpWhiteListResponseBody(name='body'),
}

/**
 * @summary Updates the IP whitelist for origin protection used by a website to the latest version.
 *
 * @param request UpdateOriginProtectionIpWhiteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateOriginProtectionIpWhiteListResponse
 */
async function updateOriginProtectionIpWhiteListWithOptions(request: UpdateOriginProtectionIpWhiteListRequest, runtime: Util.RuntimeOptions): UpdateOriginProtectionIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOriginProtectionIpWhiteList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the IP whitelist for origin protection used by a website to the latest version.
 *
 * @param request UpdateOriginProtectionIpWhiteListRequest
 * @return UpdateOriginProtectionIpWhiteListResponse
 */
async function updateOriginProtectionIpWhiteList(request: UpdateOriginProtectionIpWhiteListRequest): UpdateOriginProtectionIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOriginProtectionIpWhiteListWithOptions(request, runtime);
}

model UpdatePageRequest {
  content?: string(name='Content', description='The Base64-encoded content of the error page. The content type is specified by the Content-Type field.

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='The Content-Type field in the HTTP header. Valid values:

*   text/html
*   application/json

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='The description of the custom error page.

This parameter is required.', example='a custom deny page'),
  id?: long(name='Id', description='The ID of the custom error page, which can be obtained by calling the [ListPages](https://help.aliyun.com/document_detail/2850223.html) operation.

This parameter is required.', example='50000001'),
  name?: string(name='Name', description='The name of the custom error page.

This parameter is required.', example='example'),
}

model UpdatePageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePageResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
 *
 * @param request UpdatePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePageResponse
 */
async function updatePageWithOptions(request: UpdatePageRequest, runtime: Util.RuntimeOptions): UpdatePageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
 *
 * @param request UpdatePageRequest
 * @return UpdatePageResponse
 */
async function updatePage(request: UpdatePageRequest): UpdatePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePageWithOptions(request, runtime);
}

model UpdateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey', description='The access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='VIxuvJSA2S03f******kp208dy5w7'),
    authType?: string(name='AuthType', description='The authentication type of the origin server. Different origins support different authentication types. The type of origin refers to the SourceType parameter in this operation. If the type of origin is OSS or S3, you must specify the authentication type of the origin. Valid values:

*   **public**: public read. Select this value when the origin type is OSS or S3 and the origin access is public read.
*   **private**: private read. Select this value when the origin type is S3 and the origin access is private read.
*   **private_same_account**: private read under the same account. Select this value when the origin type is OSS, the origins belong to the same Alibaba Cloud account, and the origins have private read access.', example='private'),
    region?: string(name='Region', description='The version of the signature algorithm. This parameter is required when the origin type is S3 and AuthType is private. The following two types are supported:

*   **v2**
*   **v4**

If you leave this parameter empty, the default value v4 is used.', example='v2'),
    secretKey?: string(name='SecretKey', description='The secret access key of the account to which the origin server belongs. This parameter is required when the SourceType is OSS, and AuthType is private_same_account, or when the SourceType is S3 and AuthType is private.', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
    version?: string(name='Version', description='The region of the origin. If the origin type is S3, you must specify this value. You can get the region information from the official website of S3.', example='us-east-1'),
  }(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **video_image**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comments of the record.', example='This is a remark.'),
  data?: {
    algorithm?: int32(name='Algorithm', description='The encryption algorithm used for the record, specified within the range from 0 to 255. This parameter is required when you add CERT or SSHFP records.', example='0'),
    certificate?: string(name='Certificate', description='The public key of the certificate. This parameter is required when you add CERT, SMIMEA, or TLSA records.', example='dGVzdGFkYWxrcw=='),
    fingerprint?: string(name='Fingerprint', description='The public key fingerprint of the record. This parameter is required when you add a SSHFP record.', example='abcdef1234567890'),
    flag?: int32(name='Flag', description='The flag bit of the record. The Flag for a CAA record indicates its priority and how it is processed, specified within the range of 0 to 255. This parameter is required when you add a CAA record.', example='128'),
    keyTag?: int32(name='KeyTag', description='The public key identification for the record, specified within the range of 0 to 65,535. This parameter is required when you add a CAA record.', example='0'),
    matchingType?: int32(name='MatchingType', description='The algorithm policy used to match or validate the certificate, specified within the range 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
    port?: int32(name='Port', description='The port of the record, specified within the range of 0 to 65,535. This parameter is required when you add an SRV record.', example='0'),
    priority?: int32(name='Priority', description='The priority of the record, specified within the range of 0 to 65,535. A smaller value indicates a higher priority. This parameter is required when you add MX, SRV, and URI records.', example='10'),
    selector?: int32(name='Selector', description='The type of certificate or public key, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
    tag?: string(name='Tag', description='The label of the record. The Tag of a CAA record indicate its specific type and usage. This parameter is required when you add a CAA record.', example='issue'),
    type?: int32(name='Type', description='The certificate type of the record (in CERT records), or the public key type (in SSHFP records). This parameter is required when you add CERT or SSHFP records.', example='0'),
    usage?: int32(name='Usage', description='The usage identifier of the record, specified within the range of 0 to 255. This parameter is required when you add SMIMEA or TLSA records.', example='0'),
    value?: string(name='Value', description='The record value or part of the record content. This parameter is required when you add A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI records. It has different meanings based on different types of records:

*   **A/AAAA**: the IP address(es). Separate multiple IPs with commas (,). You must have at least one IPv4 address.
*   **CNAME**: the target domain name.
*   **NS**: the name servers for the domain name.
*   **MX**: a valid domain name of the target mail server.
*   **TXT**: a valid text string.
*   **CAA**: a valid domain name of the certificate authority.
*   **SRV**: a valid domain name of the target host.
*   **URI**: a valid URI string.', example='example.com'),
    weight?: int32(name='Weight', description='The weight of the record, specified within the range of 0 to 65,535. This parameter is required when you add SRV or URI records.', example='0'),
  }(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [Add DNS records](https://www.alibabacloud.com/help/doc-detail/2708761.html).

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   **follow_hostname**: match the requested domain name.
*   **follow_origin_domain**: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The type of the origin for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS** : OSS origin.
*   **S3** : S3 origin.
*   **LB**: Load Balancer origin.
*   **OP**: origin in an origin pool.
*   **Domain**: common domain name.

If you leave the parameter empty or set its value as null, the default is Domain, which is common domain name.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. The range is 30 to 86,400, or 1. If the value is 1, the TTL of the record is determined by the system.', example='30'),
}

model UpdateRecordShrinkRequest {
  authConfShrink?: string(name='AuthConf', description='The origin authentication information of the CNAME record.'),
  bizName?: string(name='BizName', description='The business scenario of the record for acceleration. Leave the parameter empty if your record is not proxied. Valid values:

*   **video_image**: video and image.
*   **api**: API.
*   **web**: web page.', example='web'),
  comment?: string(name='Comment', description='The comments of the record.', example='This is a remark.'),
  dataShrink?: string(name='Data', description='The DNS record information. The format of this field varies based on the record type. For more information, see [Add DNS records](https://www.alibabacloud.com/help/doc-detail/2708761.html).

This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy', description='The origin host policy. This policy takes effect when the record type is CNAME. You can set the policy in two modes:

*   **follow_hostname**: match the requested domain name.
*   **follow_origin_domain**: match the origin\\\\"s domain name.', example='follow_origin_domain'),
  proxied?: boolean(name='Proxied', description='Specifies whether to proxy the record. Only CNAME and A/AAAA records can be proxied. Valid values:

*   **true**
*   **false**', example='true'),
  recordId?: long(name='RecordId', description='The record ID, which can be obtained by calling [ListRecords](https://help.aliyun.com/document_detail/2850265.html).

This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', description='The type of the origin for the CNAME record. This parameter is required when you add a CNAME record. Valid values:

*   **OSS** : OSS origin.
*   **S3** : S3 origin.
*   **LB**: Load Balancer origin.
*   **OP**: origin in an origin pool.
*   **Domain**: common domain name.

If you leave the parameter empty or set its value as null, the default is Domain, which is common domain name.', example='OSS'),
  ttl?: int32(name='Ttl', description='The TTL of the record. Unit: seconds. The range is 30 to 86,400, or 1. If the value is 1, the TTL of the record is determined by the system.', example='30'),
}

model UpdateRecordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordResponseBody(name='body'),
}

/**
 * @summary Updates multiple types of DNS records and origin authentication configurations.
 *
 * @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
 * ### [](#)Usage notes
 * *   The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
 * *   You must specify a priority (Priority) for some record types, such as MX and SRV.
 * *   You must specify specific fields such as Flag and Tag for CAA records.
 * *   When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
 * *   If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
 *
 * @param tmpReq UpdateRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRecordResponse
 */
async function updateRecordWithOptions(tmpReq: UpdateRecordRequest, runtime: Util.RuntimeOptions): UpdateRecordResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authConf)) {
    request.authConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authConf, 'AuthConf', 'json');
  }
  if (!Util.isUnset(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authConfShrink)) {
    query['AuthConf'] = request.authConfShrink;
  }
  if (!Util.isUnset(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!Util.isUnset(request.hostPolicy)) {
    query['HostPolicy'] = request.hostPolicy;
  }
  if (!Util.isUnset(request.proxied)) {
    query['Proxied'] = request.proxied;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates multiple types of DNS records and origin authentication configurations.
 *
 * @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
 * ### [](#)Usage notes
 * *   The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
 * *   You must specify a priority (Priority) for some record types, such as MX and SRV.
 * *   You must specify specific fields such as Flag and Tag for CAA records.
 * *   When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
 * *   If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
 *
 * @param request UpdateRecordRequest
 * @return UpdateRecordResponse
 */
async function updateRecord(request: UpdateRecordRequest): UpdateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordWithOptions(request, runtime);
}

model UpdateScheduledPreloadExecutionRequest {
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.

This parameter is required.', example='UpdateScheduledPreloadExecution'),
  interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
}

model UpdateScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='15685865xxx14622'),
  endTime?: string(name='EndTime', description='The end time of the prefetch plan.', example='2024-05-31T18:10:48.849+08:00'),
  id?: string(name='Id', description='The ID of the prefetch plan.', example='66599bd7397885b43804901c'),
  interval?: int32(name='Interval', description='The time interval between each batch execution. Unit: seconds.', example='60'),
  jobId?: string(name='JobId', description='The ID of the prefetch task.', example='665d3af3621bccf3fe29e1a4'),
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  sliceLen?: int32(name='SliceLen', description='The number of URLs prefetched in each batch.', example='10'),
  startTime?: string(name='StartTime', description='The start time of the prefetch plan.', example='2024-05-31T17:10:48.849+08:00'),
  status?: string(name='Status', description='The status of the prefetch plan. Valid values:

*   **waiting**
*   **running**
*   **finished**
*   **failed**
*   **stopped**', example='running'),
}

model UpdateScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary Updates a scheduled prefetch plan based on the plan ID.
 *
 * @param request UpdateScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateScheduledPreloadExecutionResponse
 */
async function updateScheduledPreloadExecutionWithOptions(request: UpdateScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): UpdateScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    body['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.sliceLen)) {
    body['SliceLen'] = request.sliceLen;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a scheduled prefetch plan based on the plan ID.
 *
 * @param request UpdateScheduledPreloadExecutionRequest
 * @return UpdateScheduledPreloadExecutionResponse
 */
async function updateScheduledPreloadExecution(request: UpdateScheduledPreloadExecutionRequest): UpdateScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduledPreloadExecutionWithOptions(request, runtime);
}

model UpdateSiteAccessTypeRequest {
  accessType?: string(name='AccessType', description='The new DNS setup of the website. Valid values:

*   **NS**
*   **CNAME**

This parameter is required.', example='NS'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890'),
}

model UpdateSiteAccessTypeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateSiteAccessTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteAccessTypeResponseBody(name='body'),
}

/**
 * @summary Converts the DNS setup option of a website.
 *
 * @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
 * *   The website only has proxied A/AAAA and CNAME records.
 * *   The DNS passthrough mode and custom nameserver features are not enabled for the website.
 *
 * @param request UpdateSiteAccessTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteAccessTypeResponse
 */
async function updateSiteAccessTypeWithOptions(request: UpdateSiteAccessTypeRequest, runtime: Util.RuntimeOptions): UpdateSiteAccessTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteAccessType',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Converts the DNS setup option of a website.
 *
 * @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
 * *   The website only has proxied A/AAAA and CNAME records.
 * *   The DNS passthrough mode and custom nameserver features are not enabled for the website.
 *
 * @param request UpdateSiteAccessTypeRequest
 * @return UpdateSiteAccessTypeResponse
 */
async function updateSiteAccessType(request: UpdateSiteAccessTypeRequest): UpdateSiteAccessTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteAccessTypeWithOptions(request, runtime);
}

model UpdateSiteCoverageRequest {
  coverage?: string(name='Coverage', description='The desired service location. Valid values:

*   **domestic**: the Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland

This parameter is required.', example='global'),
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='1234567890123'),
}

model UpdateSiteCoverageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model UpdateSiteCoverageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCoverageResponseBody(name='body'),
}

/**
 * @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
 *
 * @param request UpdateSiteCoverageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteCoverageResponse
 */
async function updateSiteCoverageWithOptions(request: UpdateSiteCoverageRequest, runtime: Util.RuntimeOptions): UpdateSiteCoverageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteCoverage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
 *
 * @param request UpdateSiteCoverageRequest
 * @return UpdateSiteCoverageResponse
 */
async function updateSiteCoverage(request: UpdateSiteCoverageRequest): UpdateSiteCoverageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteCoverageWithOptions(request, runtime);
}

model UpdateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies', description='The cookie fields.'),
  requestHeaders?: [ string ](name='RequestHeaders', description='The request header fields.'),
  responseHeaders?: [ string ](name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='site id', example='11223****'),
}

model UpdateSiteCustomLogShrinkRequest {
  cookiesShrink?: string(name='Cookies', description='The cookie fields.'),
  requestHeadersShrink?: string(name='RequestHeaders', description='The request header fields.'),
  responseHeadersShrink?: string(name='ResponseHeaders', description='The response header fields.'),
  siteId?: long(name='SiteId', description='site id', example='11223****'),
}

model UpdateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
}

model UpdateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @param tmpReq UpdateSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteCustomLogResponse
 */
async function updateSiteCustomLogWithOptions(tmpReq: UpdateSiteCustomLogRequest, runtime: Util.RuntimeOptions): UpdateSiteCustomLogResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSiteCustomLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cookies)) {
    request.cookiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cookies, 'Cookies', 'json');
  }
  if (!Util.isUnset(tmpReq.requestHeaders)) {
    request.requestHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaders, 'RequestHeaders', 'json');
  }
  if (!Util.isUnset(tmpReq.responseHeaders)) {
    request.responseHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaders, 'ResponseHeaders', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cookiesShrink)) {
    body['Cookies'] = request.cookiesShrink;
  }
  if (!Util.isUnset(request.requestHeadersShrink)) {
    body['RequestHeaders'] = request.requestHeadersShrink;
  }
  if (!Util.isUnset(request.responseHeadersShrink)) {
    body['ResponseHeaders'] = request.responseHeadersShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
 *
 * @param request UpdateSiteCustomLogRequest
 * @return UpdateSiteCustomLogResponse
 */
async function updateSiteCustomLog(request: UpdateSiteCustomLogRequest): UpdateSiteCustomLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteCustomLogWithOptions(request, runtime);
}

model UpdateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_er'),
  discardRate?: float(name='DiscardRate', description='The discard rate.', example='0.0'),
  fieldName?: string(name='FieldName', description='The log fields that you want to include in real-time logs to be delivered. Separate the log fields with commas (,).

This parameter is required.', example='ClientIP,UserAgent'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.', example='123456****'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Modifies a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteDeliveryTaskResponse
 */
async function updateSiteDeliveryTaskWithOptions(request: UpdateSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): UpdateSiteDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskRequest
 * @return UpdateSiteDeliveryTaskResponse
 */
async function updateSiteDeliveryTask(request: UpdateSiteDeliveryTaskRequest): UpdateSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteDeliveryTaskWithOptions(request, runtime);
}

model UpdateSiteDeliveryTaskStatusRequest {
  method?: string(name='Method', description='Specifies whether to enable the delivery task.

This parameter is required.', example='online'),
  siteId?: long(name='SiteId', description='The website ID.', example='123456****'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', description='The status of the delivery task. Valid values:

*   **online**
*   **offline**', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskStatusResponseBody(name='body'),
}

/**
 * @summary Changes the status of a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteDeliveryTaskStatusResponse
 */
async function updateSiteDeliveryTaskStatusWithOptions(request: UpdateSiteDeliveryTaskStatusRequest, runtime: Util.RuntimeOptions): UpdateSiteDeliveryTaskStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteDeliveryTaskStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the status of a real-time log delivery task.
 *
 * @param request UpdateSiteDeliveryTaskStatusRequest
 * @return UpdateSiteDeliveryTaskStatusResponse
 */
async function updateSiteDeliveryTaskStatus(request: UpdateSiteDeliveryTaskStatusRequest): UpdateSiteDeliveryTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteDeliveryTaskStatusWithOptions(request, runtime);
}

model UpdateSiteVanityNSRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='1234567890123'),
  vanityNSList?: string(name='VanityNSList', description='The custom nameserver names. You can specify two to five custom nameserver names. Separate multiple names with commas (,).', example='ns1.example.com,ns2.example.com'),
}

model UpdateSiteVanityNSResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateSiteVanityNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteVanityNSResponseBody(name='body'),
}

/**
 * @summary Updates the custom nameserver names for a single website.
 *
 * @param request UpdateSiteVanityNSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteVanityNSResponse
 */
async function updateSiteVanityNSWithOptions(request: UpdateSiteVanityNSRequest, runtime: Util.RuntimeOptions): UpdateSiteVanityNSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.vanityNSList)) {
    query['VanityNSList'] = request.vanityNSList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteVanityNS',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the custom nameserver names for a single website.
 *
 * @param request UpdateSiteVanityNSRequest
 * @return UpdateSiteVanityNSResponse
 */
async function updateSiteVanityNS(request: UpdateSiteVanityNSRequest): UpdateSiteVanityNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteVanityNSWithOptions(request, runtime);
}

model UpdateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='The log category. Valid values:

*   dcdn_log_access_l1 (default): access logs.
*   dcdn_log_er: Edge Routine logs.
*   dcdn_log_waf: firewall logs.
*   dcdn_log_ipa: TCP/UDP proxy logs.', example='dcdn_log_er'),
  details?: string(name='Details'),
  discardRate?: float(name='DiscardRate', description='The discard rate. Default value: 0.', example='0'),
  fieldName?: string(name='FieldName', description='The log fields that you want to include in logs to be delivered. Separate the log fields with commas (,).

This parameter is required.', example='ClientRequestID,ClientRequestHost'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test_project'),
}

model UpdateUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
 *
 * @param request UpdateUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserDeliveryTaskResponse
 */
async function updateUserDeliveryTaskWithOptions(request: UpdateUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): UpdateUserDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.details)) {
    body['Details'] = request.details;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
 *
 * @param request UpdateUserDeliveryTaskRequest
 * @return UpdateUserDeliveryTaskResponse
 */
async function updateUserDeliveryTask(request: UpdateUserDeliveryTaskRequest): UpdateUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserDeliveryTaskWithOptions(request, runtime);
}

model UpdateUserDeliveryTaskStatusRequest {
  method?: string(name='Method', description='Enables or disables the delivery task. Valid values: online and offline.

This parameter is required.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.

This parameter is required.', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', description='The status of the delivery task.', example='online'),
  taskName?: string(name='TaskName', description='The name of the delivery task.', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskStatusResponseBody(name='body'),
}

/**
 * @summary Changes the status of a delivery task in your Alibaba Cloud account.
 *
 * @description ## [](#)
 * You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
 *
 * @param request UpdateUserDeliveryTaskStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserDeliveryTaskStatusResponse
 */
async function updateUserDeliveryTaskStatusWithOptions(request: UpdateUserDeliveryTaskStatusRequest, runtime: Util.RuntimeOptions): UpdateUserDeliveryTaskStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserDeliveryTaskStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the status of a delivery task in your Alibaba Cloud account.
 *
 * @description ## [](#)
 * You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
 *
 * @param request UpdateUserDeliveryTaskStatusRequest
 * @return UpdateUserDeliveryTaskStatusResponse
 */
async function updateUserDeliveryTaskStatus(request: UpdateUserDeliveryTaskStatusRequest): UpdateUserDeliveryTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserDeliveryTaskStatusWithOptions(request, runtime);
}

model UpdateWaitingRoomRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off', example='on'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', description='The domain name.', example='example.com'),
      path?: string(name='Path', description='The probe path.', example='/test'),
      subdomain?: string(name='Subdomain', description='The subdomain.', example='test.'),
    }
  ](name='HostNameAndPath', description='The hostname and path.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If JSON response is enabled, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
  name?: string(name='Name', description='The name of the waiting room.'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='300'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='default'),
}

model UpdateWaitingRoomShrinkRequest {
  cookieName?: string(name='CookieName', description='The name of the custom cookie.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='Hello%20world!'),
  description?: string(name='Description', description='The description of the waiting room.'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='on'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room. Valid values:

*   on
*   off', example='on'),
  hostNameAndPathShrink?: string(name='HostNameAndPath', description='The hostname and path.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. If JSON response is enabled, a JSON body is returned for requests to the waiting room with the header Accept: application/json. Valid values:

*   on
*   off', example='on'),
  language?: string(name='Language', description='The language of the waiting room page. You must specify this parameter if you set WaitingRoomType to default. Valid values:

*   enus: English.
*   zhcn: Simplified Chinese.
*   zhhk: Traditional Chinese.', example='zhcn'),
  name?: string(name='Name', description='The name of the waiting room.'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', description='Specifies whether to queue all requests. Valid values:

*   on
*   off', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: Users are blocked from reaching the origin.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='7096621098****'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='300'),
  waitingRoomId?: string(name='WaitingRoomId', description='The ID of the waiting room, which can be obtained by calling the [ListWaitingRooms](https://help.aliyun.com/document_detail/2850279.html) operation.

This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='default'),
}

model UpdateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a waiting room.
 *
 * @param tmpReq UpdateWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomResponse
 */
async function updateWaitingRoomWithOptions(tmpReq: UpdateWaitingRoomRequest, runtime: Util.RuntimeOptions): UpdateWaitingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWaitingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hostNameAndPath)) {
    request.hostNameAndPathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostNameAndPath, 'HostNameAndPath', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cookieName)) {
    query['CookieName'] = request.cookieName;
  }
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.hostNameAndPathShrink)) {
    query['HostNameAndPath'] = request.hostNameAndPathShrink;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.queueAllEnable)) {
    query['QueueAllEnable'] = request.queueAllEnable;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a waiting room.
 *
 * @param request UpdateWaitingRoomRequest
 * @return UpdateWaitingRoomResponse
 */
async function updateWaitingRoom(request: UpdateWaitingRoomRequest): UpdateWaitingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWaitingRoomWithOptions(request, runtime);
}

model UpdateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', description='The content of the custom waiting room page. You must specify this parameter if you set WaitingRoomType to custom. The content must be Base64-encoded.', example='html-yets-maqi1111'),
  description?: string(name='Description', description='The description of the waiting room.', example='http://yywyyw.com'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', description='Specifies whether to disable session renewal. Valid values:

*   on
*   off', example='off'),
  enable?: string(name='Enable', description='Specifies whether to enable the waiting room event. Valid values:

*   `on`
*   `off`', example='on'),
  endTime?: string(name='EndTime', description='The end time of the event. This value is a UNIX timestamp.', example='1719849600'),
  jsonResponseEnable?: string(name='JsonResponseEnable', description='Specifies whether to enable JSON response. Valid values:

*   on
*   off', example='off'),
  language?: string(name='Language', description='The default language. Valid values:

*   `enus`: English.
*   `zhcn`: Simplified Chinese.
*   `zhhk`: Traditional Chinese.', example='enus'),
  name?: string(name='Name', description='The name of the waiting room event.'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='The maximum number of new users per minute.', example='300'),
  preQueueEnable?: string(name='PreQueueEnable', description='Specifies whether to enable pre-queuing.

*   on
*   off', example='on'),
  preQueueStartTime?: string(name='PreQueueStartTime', description='The start time for pre-queuing.', example='1719763200'),
  queuingMethod?: string(name='QueuingMethod', description='The queuing method. Valid values:

*   random: Users gain access to the origin randomly, regardless of the arrival time.
*   fifo: Users gain access to the origin in order of arrival.
*   passthrough: Users pass through the waiting room and go straight to the origin.
*   reject-all: All requests are blocked from accessing the origin.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='The HTTP status code to return while a user is in the queue. Valid values:

*   200
*   202
*   429', example='200'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', description='Specifies whether to enable random queuing.

*   on
*   off', example='on'),
  sessionDuration?: string(name='SessionDuration', description='The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.', example='5'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='The start time of the event. This value is a UNIX timestamp.', example='1719763200'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='The maximum number of active users.', example='200'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', description='The ID of the waiting room event, which can be obtained by calling the [ListWaitingRoomEvents](https://help.aliyun.com/document_detail/2850279.html) operation.', example='89677721098****'),
  waitingRoomType?: string(name='WaitingRoomType', description='The type of the waiting room. Valid values:

*   default
*   custom', example='custom'),
}

model UpdateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a waiting room event.
 *
 * @param request UpdateWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomEventResponse
 */
async function updateWaitingRoomEventWithOptions(request: UpdateWaitingRoomEventRequest, runtime: Util.RuntimeOptions): UpdateWaitingRoomEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.preQueueEnable)) {
    query['PreQueueEnable'] = request.preQueueEnable;
  }
  if (!Util.isUnset(request.preQueueStartTime)) {
    query['PreQueueStartTime'] = request.preQueueStartTime;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.randomPreQueueEnable)) {
    query['RandomPreQueueEnable'] = request.randomPreQueueEnable;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomEventId)) {
    query['WaitingRoomEventId'] = request.waitingRoomEventId;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a waiting room event.
 *
 * @param request UpdateWaitingRoomEventRequest
 * @return UpdateWaitingRoomEventResponse
 */
async function updateWaitingRoomEvent(request: UpdateWaitingRoomEventRequest): UpdateWaitingRoomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWaitingRoomEventWithOptions(request, runtime);
}

model UpdateWaitingRoomRuleRequest {
  rule?: string(name='Rule', description='The rule content, which is a policy or conditional expression.

This parameter is required.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='Specifies whether to enable the rule. Valid values:

*   on
*   off

This parameter is required.', example='on'),
  ruleName?: string(name='RuleName', description='The rule name.

This parameter is required.', example='test1'),
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='123456****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', description='The ID of the waiting room bypass rule that you want to update. You can call [ListWaitingRoomRules](https://help.aliyun.com/document_detail/2850279.html) to obtain the ID.', example='8987739839****'),
}

model UpdateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to trace a call.', example='9bfe9d95-7bf6-469d-a628-ed7bc9f25073'),
}

model UpdateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary Updates the configurations of a waiting room bypass rule for a website.
 *
 * @description You can call this API operation to modify the configurations of a waiting room bypass rule for your website, including the rule name, status, and rule content.
 *
 * @param request UpdateWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomRuleResponse
 */
async function updateWaitingRoomRuleWithOptions(request: UpdateWaitingRoomRuleRequest, runtime: Util.RuntimeOptions): UpdateWaitingRoomRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomRuleId)) {
    query['WaitingRoomRuleId'] = request.waitingRoomRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the configurations of a waiting room bypass rule for a website.
 *
 * @description You can call this API operation to modify the configurations of a waiting room bypass rule for your website, including the rule name, status, and rule content.
 *
 * @param request UpdateWaitingRoomRuleRequest
 * @return UpdateWaitingRoomRuleResponse
 */
async function updateWaitingRoomRule(request: UpdateWaitingRoomRuleRequest): UpdateWaitingRoomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWaitingRoomRuleWithOptions(request, runtime);
}

model UploadClientCaCertificateRequest {
  certificate?: string(name='Certificate', description='This parameter is required.', example='-----BEGIN CERTIFICATE-----'),
  name?: string(name='Name', example='yourCertName'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model UploadClientCaCertificateResponseBody = {
  commonName?: string(name='CommonName', example='www.example.com'),
  fingerprintSha256?: string(name='FingerprintSha256', example='1dc5fc9af4eead2570c70d94b416130baeb6d4429b51fd3557379588456aca66'),
  id?: string(name='Id', example='baba39055622c008b90285a8838ed09a'),
  issuer?: string(name='Issuer', example='GlobalSign nv-sa'),
  notAfter?: string(name='NotAfter', example='2024-12-01T02:13:07Z'),
  notBefore?: string(name='NotBefore', example='2023-12-01T02:13:07Z'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  serialNumber?: string(name='SerialNumber', example='babab9db65ee5efcca9f3d41d4b50d66'),
  signatureAlgorithm?: string(name='SignatureAlgorithm', example='SHA256-RSA'),
  status?: string(name='Status', example='OK'),
  validityDays?: string(name='ValidityDays', example='300'),
}

model UploadClientCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadClientCaCertificateResponseBody(name='body'),
}

/**
 * @summary 上传客户端CA证书
 *
 * @param request UploadClientCaCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadClientCaCertificateResponse
 */
async function uploadClientCaCertificateWithOptions(request: UploadClientCaCertificateRequest, runtime: Util.RuntimeOptions): UploadClientCaCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UploadClientCaCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上传客户端CA证书
 *
 * @param request UploadClientCaCertificateRequest
 * @return UploadClientCaCertificateResponse
 */
async function uploadClientCaCertificate(request: UploadClientCaCertificateRequest): UploadClientCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadClientCaCertificateWithOptions(request, runtime);
}

model UploadFileRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge or prefetch task. Valid values:

*   **file** (default): purges the cache by file.
*   **preload**: prefetches the file.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.

This parameter is required.', example='file'),
  uploadTaskName?: string(name='UploadTaskName', description='The name of the upload task.

This parameter is required.', example='purge_task_2024_11_11'),
  url?: string(name='Url', description='The OSS URL of the file that contains resources to be purged or prefetched.

This parameter is required.', example='https://xxxxx.oss-cn-shenzhen.aliyuncs.com/test_oss_file?Expires=1708659191&OSSAccessKeyId=**********&Signature=**********'),
}

model UploadFileAdvanceRequest {
  siteId?: long(name='SiteId', description='The website ID. You can call the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation to obtain the ID.

This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='The type of the purge or prefetch task. Valid values:

*   **file** (default): purges the cache by file.
*   **preload**: prefetches the file.
*   **directory**: purges the cache by directory.
*   **ignoreParams**: purges the cache by URL with specified parameters ignored.

This parameter is required.', example='file'),
  uploadTaskName?: string(name='UploadTaskName', description='The name of the upload task.

This parameter is required.', example='purge_task_2024_11_11'),
  urlObject?: readable(name='Url', description='The OSS URL of the file that contains resources to be purged or prefetched.

This parameter is required.', example='https://xxxxx.oss-cn-shenzhen.aliyuncs.com/test_oss_file?Expires=1708659191&OSSAccessKeyId=**********&Signature=**********'),
}

model UploadFileResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  uploadId?: long(name='UploadId', description='The ID of the file upload task. You can use this ID for task submission or query subsequently.', example='159253299357****'),
}

model UploadFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadFileResponseBody(name='body'),
}

/**
 * @summary Uploads the file that contains resources to be purged or prefetched.
 *
 * @description > 
 * *   The file can be up to 10 MB in size.
 *
 * @param request UploadFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadFileResponse
 */
async function uploadFileWithOptions(request: UploadFileRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uploadTaskName)) {
    query['UploadTaskName'] = request.uploadTaskName;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadFile',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Uploads the file that contains resources to be purged or prefetched.
 *
 * @description > 
 * *   The file can be up to 10 MB in size.
 *
 * @param request UploadFileRequest
 * @return UploadFileResponse
 */
async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadFileWithOptions(request, runtime);
}

async function uploadFileAdvance(request: UploadFileAdvanceRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var uploadFileReq = new UploadFileRequest{};
  OpenApiUtil.convert(request, uploadFileReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    uploadFileReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var uploadFileResp = uploadFileWithOptions(uploadFileReq, runtime);
  return uploadFileResp;
}

model VerifySiteRequest {
  siteId?: long(name='SiteId', description='The website ID, which can be obtained by calling the [ListSites](https://help.aliyun.com/document_detail/2850189.html) operation.

This parameter is required.', example='1234567890123'),
}

model VerifySiteResponseBody = {
  passed?: boolean(name='Passed', description='Indicates whether the verification passed. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model VerifySiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifySiteResponseBody(name='body'),
}

/**
 * @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
 *
 * @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
 * 2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
 *
 * @param request VerifySiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return VerifySiteResponse
 */
async function verifySiteWithOptions(request: VerifySiteRequest, runtime: Util.RuntimeOptions): VerifySiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifySite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
 *
 * @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
 * 2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
 *
 * @param request VerifySiteRequest
 * @return VerifySiteResponse
 */
async function verifySite(request: VerifySiteRequest): VerifySiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifySiteWithOptions(request, runtime);
}

