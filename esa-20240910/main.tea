/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('esa', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model WafBatchRuleShared {
  action?: string(name='Action'),
  actions?: {
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  crossSiteId?: long(name='CrossSiteId'),
  expression?: string(name='Expression'),
  match?: WafRuleMatch2(name='Match'),
  mode?: string(name='Mode'),
  name?: string(name='Name'),
  target?: string(name='Target'),
}

model WafQuotaInteger {
  equal?: int32(name='Equal'),
  greaterThan?: int32(name='GreaterThan'),
  greaterThanOrEqual?: int32(name='GreaterThanOrEqual'),
  lessThan?: int32(name='LessThan'),
  lessThanOrEqual?: int32(name='LessThanOrEqual'),
}

model WafQuotaString {
  regexp?: string(name='Regexp'),
}

model WafRuleConfig {
  action?: string(name='Action'),
  actions?: {
    bypass?: {
      regularRules?: [ long ](name='RegularRules'),
      regularTypes?: [ string ](name='RegularTypes'),
      skip?: string(name='Skip'),
      tags?: [ string ](name='Tags'),
    }(name='Bypass'),
    response?: {
      code?: int32(name='Code'),
      id?: long(name='Id'),
    }(name='Response'),
  }(name='Actions'),
  appPackage?: {
    packageSigns?: [ 
      {
        name?: string(name='Name'),
        sign?: string(name='Sign'),
      }
    ](name='PackageSigns'),
  }(name='AppPackage'),
  appSdk?: {
    customSign?: {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }(name='CustomSign'),
    customSignStatus?: string(name='CustomSignStatus'),
    featureAbnormal?: [ string ](name='FeatureAbnormal'),
  }(name='AppSdk'),
  expression?: string(name='Expression'),
  id?: long(name='Id'),
  managedGroupId?: long(name='ManagedGroupId'),
  managedList?: string(name='ManagedList'),
  managedRulesets?: [ 
    {
      action?: string(name='Action'),
      attackType?: int32(name='AttackType'),
      managedRules?: [ 
        {
          action?: string(name='Action'),
          id?: long(name='Id'),
          status?: string(name='Status'),
        }
      ](name='ManagedRules'),
      numberEnabled?: int32(name='NumberEnabled'),
      numberTotal?: int32(name='NumberTotal'),
      protectionLevel?: int32(name='ProtectionLevel'),
    }
  ](name='ManagedRulesets'),
  match?: WafRuleMatch(name='Match'),
  name?: string(name='Name'),
  rateLimit?: {
    characteristics?: WafRuleMatch2(name='Characteristics'),
    interval?: int32(name='Interval'),
    onHit?: boolean(name='OnHit'),
    TTL?: int32(name='TTL'),
    threshold?: {
      distinctManagedRules?: int32(name='DistinctManagedRules'),
      managedRulesBlocked?: int32(name='ManagedRulesBlocked'),
      request?: int32(name='Request'),
      responseStatus?: {
        code?: int32(name='Code'),
        count?: int32(name='Count'),
        ratio?: int32(name='Ratio'),
      }(name='ResponseStatus'),
      traffic?: string(name='Traffic'),
    }(name='Threshold'),
  }(name='RateLimit'),
  sigchl?: [ string ](name='Sigchl'),
  status?: string(name='Status'),
  timer?: WafTimer(name='Timer'),
  type?: string(name='Type'),
}

model WafRuleMatch {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [
    WafRuleMatch
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafRuleMatch2 {
  convertToLower?: boolean(name='ConvertToLower'),
  criteria?: [ 
    {
      convertToLower?: boolean(name='ConvertToLower'),
      criteria?: [ 
        {
          convertToLower?: boolean(name='ConvertToLower'),
          criteria?: [ 
            {
              convertToLower?: boolean(name='ConvertToLower'),
              matchOperator?: string(name='MatchOperator'),
              matchType?: string(name='MatchType'),
              matchValue?: any(name='MatchValue'),
              negate?: boolean(name='Negate'),
            }
          ](name='Criteria'),
          logic?: string(name='Logic'),
          matchOperator?: string(name='MatchOperator'),
          matchType?: string(name='MatchType'),
          matchValue?: any(name='MatchValue'),
          negate?: boolean(name='Negate'),
        }
      ](name='Criteria'),
      logic?: string(name='Logic'),
      matchOperator?: string(name='MatchOperator'),
      matchType?: string(name='MatchType'),
      matchValue?: any(name='MatchValue'),
      negate?: boolean(name='Negate'),
    }
  ](name='Criteria'),
  logic?: string(name='Logic'),
  matchOperator?: string(name='MatchOperator'),
  matchType?: string(name='MatchType'),
  matchValue?: any(name='MatchValue'),
  negate?: boolean(name='Negate'),
}

model WafSiteSettings {
  addBotProtectionHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddBotProtectionHeaders'),
  addSecurityHeaders?: {
    enable?: boolean(name='Enable'),
  }(name='AddSecurityHeaders'),
  clientIpIdentifier?: {
    headers?: [ string ](name='Headers'),
    mode?: string(name='Mode'),
  }(name='ClientIpIdentifier'),
  securityLevel?: {
    value?: string(name='Value'),
  }(name='SecurityLevel'),
}

model WafTimer {
  periods?: [ 
    {
      end?: string(name='End'),
      start?: string(name='Start'),
    }
  ](name='Periods'),
  scopes?: string(name='Scopes'),
  weeklyPeriods?: [ 
    {
      dailyPeriods?: [ 
        {
          end?: string(name='End'),
          start?: string(name='Start'),
        }
      ](name='DailyPeriods'),
      days?: string(name='Days'),
    }
  ](name='WeeklyPeriods'),
  zone?: int32(name='Zone'),
}

model HttpDeliveryHeaderParamValue = {
  staticValue?: string(name='StaticValue'),
}

model HttpDeliveryQueryParamValue = {
  staticValue?: string(name='StaticValue'),
}

model FieldContentValue = {
  sortOrder?: long(name='SortOrder', example='1'),
  fieldList?: [ 
    {
      fieldName?: string(name='FieldName', example='ClientIp'),
      description?: string(name='Description', example='IP address of the client.'),
      descriptionCn?: string(name='DescriptionCn'),
      category?: string(name='Category', example='Client'),
      dataType?: string(name='DataType', example='String'),
      sortOrder?: long(name='SortOrder', example='1'),
      isDefault?: boolean(name='IsDefault', example='true'),
    }
  ](name='FieldList'),
}

model QuotaListItemsValue = {
  enable?: boolean(name='Enable'),
  value?: WafQuotaString(name='Value'),
}

model QuotaPageContentTypesValue = {
  enable?: boolean(name='Enable'),
  contentLength?: WafQuotaInteger(name='ContentLength'),
}

model ActivateClientCertificateRequest {
  id?: string(name='Id', description='This parameter is required.', example='babaded901474b9693acf530e0fb****'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model ActivateClientCertificateResponseBody = {
  id?: string(name='Id', example='babaded901474b9693acf530e0fb****'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
}

model ActivateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateClientCertificateResponseBody(name='body'),
}

/**
 * @summary 激活客户端证书
 *
 * @param request ActivateClientCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActivateClientCertificateResponse
 */
async function activateClientCertificateWithOptions(request: ActivateClientCertificateRequest, runtime: Util.RuntimeOptions): ActivateClientCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateClientCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 激活客户端证书
 *
 * @param request ActivateClientCertificateRequest
 * @return ActivateClientCertificateResponse
 */
async function activateClientCertificate(request: ActivateClientCertificateRequest): ActivateClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateClientCertificateWithOptions(request, runtime);
}

model BatchCreateRecordsRequest {
  recordList?: [ 
    {
      bizName?: string(name='BizName', example='web'),
      data?: {
        algorithm?: int32(name='Algorithm', example='0'),
        certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
        flag?: int32(name='Flag', example='128'),
        keyTag?: int32(name='KeyTag', example='0'),
        matchingType?: int32(name='MatchingType', example='0'),
        port?: int32(name='Port', example='0'),
        priority?: int32(name='Priority', example='2'),
        selector?: int32(name='Selector', example='0'),
        tag?: string(name='Tag', example='issue'),
        type?: int32(name='Type', example='0'),
        usage?: int32(name='Usage', example='0'),
        value?: string(name='Value', example='example.com'),
        weight?: int32(name='Weight', example='0'),
      }(name='Data', description='This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
      proxied?: boolean(name='Proxied', description='This parameter is required.', example='true'),
      recordName?: string(name='RecordName', description='This parameter is required.', example='www.example.com'),
      sourceType?: string(name='SourceType', example='OSS'),
      ttl?: int32(name='Ttl', description='This parameter is required.', example='60'),
      type?: string(name='Type', description='This parameter is required.', example='A/AAAA'),
    }
  ](name='RecordList', description='This parameter is required.'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model BatchCreateRecordsShrinkRequest {
  recordListShrink?: string(name='RecordList', description='This parameter is required.'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model BatchCreateRecordsResponseBody = {
  recordResultList?: {
    failed?: [ 
      {
        bizName?: string(name='BizName', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', example='0'),
          certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
          flag?: int32(name='Flag', example='128'),
          keyTag?: int32(name='KeyTag', example='0'),
          matchingType?: int32(name='MatchingType', example='RSA'),
          port?: int32(name='Port', example='0'),
          priority?: int32(name='Priority', example='10'),
          selector?: int32(name='Selector', example='0'),
          tag?: string(name='Tag', example='issue'),
          type?: int32(name='Type', example='0'),
          usage?: int32(name='Usage', example='0'),
          value?: string(name='Value', example='example.com'),
          weight?: int32(name='Weight', example='0'),
        }(name='Data', example='{"value":"2.2.2.2"}'),
        description?: string(name='Description'),
        proxied?: boolean(name='Proxied', example='true'),
        recordId?: long(name='RecordId', example='1234567890123'),
        recordName?: string(name='RecordName', example='a.example.com'),
        recordType?: string(name='RecordType', example='A/AAAA'),
        sourceType?: string(name='SourceType', example='OSS'),
        ttl?: int32(name='Ttl', example='60'),
      }
    ](name='Failed'),
    success?: [ 
      {
        bizName?: string(name='BizName', example='web'),
        data?: {
          algorithm?: int32(name='Algorithm', example='0'),
          certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
          fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
          flag?: int32(name='Flag', example='128'),
          keyTag?: int32(name='KeyTag', example='0'),
          matchingType?: int32(name='MatchingType', example='0'),
          port?: int32(name='Port', example='0'),
          priority?: int32(name='Priority', example='10'),
          selector?: int32(name='Selector', example='0'),
          tag?: string(name='Tag', example='issue'),
          type?: int32(name='Type', example='0'),
          usage?: int32(name='Usage', example='0'),
          value?: string(name='Value', example='example.com'),
          weight?: int32(name='Weight', example='0'),
        }(name='Data', example='{"value":"1.1.1.1"}'),
        description?: string(name='Description', example='success'),
        proxied?: boolean(name='Proxied', example='true'),
        recordId?: long(name='RecordId', example='1234567890123'),
        recordName?: string(name='RecordName', example='www.example.com'),
        recordType?: string(name='RecordType', example='A/AAAA'),
        sourceType?: string(name='SourceType', example='OSS'),
        ttl?: int32(name='Ttl', example='60'),
      }
    ](name='Success'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='RecordResultList'),
  requestId?: string(name='RequestId', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model BatchCreateRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateRecordsResponseBody(name='body'),
}

/**
 * @summary 创建记录
 *
 * @param tmpReq BatchCreateRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCreateRecordsResponse
 */
async function batchCreateRecordsWithOptions(tmpReq: BatchCreateRecordsRequest, runtime: Util.RuntimeOptions): BatchCreateRecordsResponse {
  Util.validateModel(tmpReq);
  var request = new BatchCreateRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.recordList)) {
    request.recordListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordList, 'RecordList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.recordListShrink)) {
    query['RecordList'] = request.recordListShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建记录
 *
 * @param request BatchCreateRecordsRequest
 * @return BatchCreateRecordsResponse
 */
async function batchCreateRecords(request: BatchCreateRecordsRequest): BatchCreateRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateRecordsWithOptions(request, runtime);
}

model BatchCreateWafRulesRequest {
  configs?: [
    WafRuleConfig
  ](name='Configs'),
  phase?: string(name='Phase', example='http_custom'),
  shared?: WafBatchRuleShared(name='Shared'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model BatchCreateWafRulesShrinkRequest {
  configsShrink?: string(name='Configs'),
  phase?: string(name='Phase', example='http_custom'),
  sharedShrink?: string(name='Shared'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model BatchCreateWafRulesResponseBody = {
  ids?: [ long ](name='Ids'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId'),
}

model BatchCreateWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateWafRulesResponseBody(name='body'),
}

/**
 * @summary 批量创建WAF规则
 *
 * @param tmpReq BatchCreateWafRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCreateWafRulesResponse
 */
async function batchCreateWafRulesWithOptions(tmpReq: BatchCreateWafRulesRequest, runtime: Util.RuntimeOptions): BatchCreateWafRulesResponse {
  Util.validateModel(tmpReq);
  var request = new BatchCreateWafRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configs)) {
    request.configsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configs, 'Configs', 'json');
  }
  if (!Util.isUnset(tmpReq.shared)) {
    request.sharedShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shared, 'Shared', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configsShrink)) {
    body['Configs'] = request.configsShrink;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.sharedShrink)) {
    body['Shared'] = request.sharedShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateWafRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量创建WAF规则
 *
 * @param request BatchCreateWafRulesRequest
 * @return BatchCreateWafRulesResponse
 */
async function batchCreateWafRules(request: BatchCreateWafRulesRequest): BatchCreateWafRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateWafRulesWithOptions(request, runtime);
}

model BatchDeleteKvRequest {
  keys?: [ string ](name='Keys', description='This parameter is required.'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model BatchDeleteKvShrinkRequest {
  keysShrink?: string(name='Keys', description='This parameter is required.'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model BatchDeleteKvResponseBody = {
  failKeys?: [ string ](name='FailKeys'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys'),
}

model BatchDeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvResponseBody(name='body'),
}

/**
 * @summary 批量删除Namespace的key-value对
 *
 * @param tmpReq BatchDeleteKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteKvResponse
 */
async function batchDeleteKvWithOptions(tmpReq: BatchDeleteKvRequest, runtime: Util.RuntimeOptions): BatchDeleteKvResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteKvShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.keys)) {
    request.keysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keys, 'Keys', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.keysShrink)) {
    body['Keys'] = request.keysShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量删除Namespace的key-value对
 *
 * @param request BatchDeleteKvRequest
 * @return BatchDeleteKvResponse
 */
async function batchDeleteKv(request: BatchDeleteKvRequest): BatchDeleteKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteKvWithOptions(request, runtime);
}

model BatchDeleteKvWithHighCapacityRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
  url?: string(name='Url', description='This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchDeleteKvWithHighCapacityAdvanceRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
  urlObject?: readable(name='Url', description='This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchDeleteKvWithHighCapacityResponseBody = {
  failKeys?: [ string ](name='FailKeys'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys'),
}

model BatchDeleteKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary 批量删除Namespace下的KV队，支持大body的上传，上限100M
 *
 * @param request BatchDeleteKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteKvWithHighCapacityResponse
 */
async function batchDeleteKvWithHighCapacityWithOptions(request: BatchDeleteKvWithHighCapacityRequest, runtime: Util.RuntimeOptions): BatchDeleteKvWithHighCapacityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量删除Namespace下的KV队，支持大body的上传，上限100M
 *
 * @param request BatchDeleteKvWithHighCapacityRequest
 * @return BatchDeleteKvWithHighCapacityResponse
 */
async function batchDeleteKvWithHighCapacity(request: BatchDeleteKvWithHighCapacityRequest): BatchDeleteKvWithHighCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteKvWithHighCapacityWithOptions(request, runtime);
}

async function batchDeleteKvWithHighCapacityAdvance(request: BatchDeleteKvWithHighCapacityAdvanceRequest, runtime: Util.RuntimeOptions): BatchDeleteKvWithHighCapacityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var batchDeleteKvWithHighCapacityReq = new BatchDeleteKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, batchDeleteKvWithHighCapacityReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    batchDeleteKvWithHighCapacityReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var batchDeleteKvWithHighCapacityResp = batchDeleteKvWithHighCapacityWithOptions(batchDeleteKvWithHighCapacityReq, runtime);
  return batchDeleteKvWithHighCapacityResp;
}

model BatchGetExpressionFieldsRequest {
  expressions?: [ 
    {
      expression?: string(name='Expression', example='ip.src eq 1.1.1.1'),
      id?: long(name='Id', example='1'),
    }
  ](name='Expressions', example='http_bot'),
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
}

model BatchGetExpressionFieldsShrinkRequest {
  expressionsShrink?: string(name='Expressions', example='http_bot'),
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
}

model BatchGetExpressionFieldsResponseBody = {
  fields?: [ 
    {
      fields?: [ string ](name='Fields'),
      id?: string(name='Id', example='1'),
    }
  ](name='Fields'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchGetExpressionFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetExpressionFieldsResponseBody(name='body'),
}

/**
 * @summary 批量获取表达式的匹配项
 *
 * @param tmpReq BatchGetExpressionFieldsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGetExpressionFieldsResponse
 */
async function batchGetExpressionFieldsWithOptions(tmpReq: BatchGetExpressionFieldsRequest, runtime: Util.RuntimeOptions): BatchGetExpressionFieldsResponse {
  Util.validateModel(tmpReq);
  var request = new BatchGetExpressionFieldsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.expressions)) {
    request.expressionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.expressions, 'Expressions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.expressionsShrink)) {
    body['Expressions'] = request.expressionsShrink;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetExpressionFields',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量获取表达式的匹配项
 *
 * @param request BatchGetExpressionFieldsRequest
 * @return BatchGetExpressionFieldsResponse
 */
async function batchGetExpressionFields(request: BatchGetExpressionFieldsRequest): BatchGetExpressionFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetExpressionFieldsWithOptions(request, runtime);
}

model BatchPutKvRequest {
  kvList?: [ 
    {
      expiration?: long(name='Expiration', example='1690081381'),
      expirationTtl?: long(name='ExpirationTtl', example='3600'),
      key?: string(name='Key', description='This parameter is required.', example='test_key'),
      value?: string(name='Value', description='This parameter is required.', example='test_value'),
    }
  ](name='KvList', description='This parameter is required.'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model BatchPutKvShrinkRequest {
  kvListShrink?: string(name='KvList', description='This parameter is required.'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model BatchPutKvResponseBody = {
  failKeys?: [ string ](name='FailKeys'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys'),
}

model BatchPutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvResponseBody(name='body'),
}

/**
 * @summary 批量设置Namespace的key-value对
 *
 * @param tmpReq BatchPutKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchPutKvResponse
 */
async function batchPutKvWithOptions(tmpReq: BatchPutKvRequest, runtime: Util.RuntimeOptions): BatchPutKvResponse {
  Util.validateModel(tmpReq);
  var request = new BatchPutKvShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.kvList)) {
    request.kvListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kvList, 'KvList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.kvListShrink)) {
    body['KvList'] = request.kvListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchPutKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量设置Namespace的key-value对
 *
 * @param request BatchPutKvRequest
 * @return BatchPutKvResponse
 */
async function batchPutKv(request: BatchPutKvRequest): BatchPutKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPutKvWithOptions(request, runtime);
}

model BatchPutKvWithHighCapacityRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
  url?: string(name='Url', description='This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchPutKvWithHighCapacityAdvanceRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
  urlObject?: readable(name='Url', description='This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model BatchPutKvWithHighCapacityResponseBody = {
  failKeys?: [ string ](name='FailKeys'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  successKeys?: [ string ](name='SuccessKeys'),
}

model BatchPutKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchPutKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary 批量设置Namespace的key-value对，支持最大100M的请求体
 *
 * @param request BatchPutKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchPutKvWithHighCapacityResponse
 */
async function batchPutKvWithHighCapacityWithOptions(request: BatchPutKvWithHighCapacityRequest, runtime: Util.RuntimeOptions): BatchPutKvWithHighCapacityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchPutKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量设置Namespace的key-value对，支持最大100M的请求体
 *
 * @param request BatchPutKvWithHighCapacityRequest
 * @return BatchPutKvWithHighCapacityResponse
 */
async function batchPutKvWithHighCapacity(request: BatchPutKvWithHighCapacityRequest): BatchPutKvWithHighCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPutKvWithHighCapacityWithOptions(request, runtime);
}

async function batchPutKvWithHighCapacityAdvance(request: BatchPutKvWithHighCapacityAdvanceRequest, runtime: Util.RuntimeOptions): BatchPutKvWithHighCapacityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var batchPutKvWithHighCapacityReq = new BatchPutKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, batchPutKvWithHighCapacityReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    batchPutKvWithHighCapacityReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var batchPutKvWithHighCapacityResp = batchPutKvWithHighCapacityWithOptions(batchPutKvWithHighCapacityReq, runtime);
  return batchPutKvWithHighCapacityResp;
}

model BatchUpdateWafRulesRequest {
  configs?: [
    WafRuleConfig
  ](name='Configs'),
  phase?: string(name='Phase', example='http_custom'),
  rulesetId?: long(name='RulesetId', example='10000001'),
  shared?: WafBatchRuleShared(name='Shared'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model BatchUpdateWafRulesShrinkRequest {
  configsShrink?: string(name='Configs'),
  phase?: string(name='Phase', example='http_custom'),
  rulesetId?: long(name='RulesetId', example='10000001'),
  sharedShrink?: string(name='Shared'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model BatchUpdateWafRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model BatchUpdateWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateWafRulesResponseBody(name='body'),
}

/**
 * @summary 批量修改WAF规则
 *
 * @param tmpReq BatchUpdateWafRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchUpdateWafRulesResponse
 */
async function batchUpdateWafRulesWithOptions(tmpReq: BatchUpdateWafRulesRequest, runtime: Util.RuntimeOptions): BatchUpdateWafRulesResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateWafRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configs)) {
    request.configsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configs, 'Configs', 'json');
  }
  if (!Util.isUnset(tmpReq.shared)) {
    request.sharedShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shared, 'Shared', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configsShrink)) {
    body['Configs'] = request.configsShrink;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.rulesetId)) {
    body['RulesetId'] = request.rulesetId;
  }
  if (!Util.isUnset(request.sharedShrink)) {
    body['Shared'] = request.sharedShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateWafRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量修改WAF规则
 *
 * @param request BatchUpdateWafRulesRequest
 * @return BatchUpdateWafRulesResponse
 */
async function batchUpdateWafRules(request: BatchUpdateWafRulesRequest): BatchUpdateWafRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateWafRulesWithOptions(request, runtime);
}

model BlockObjectRequest {
  content?: [ string ](name='Content', description='This parameter is required.'),
  extension?: string(name='Extension'),
  maxage?: int32(name='Maxage'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='BlockObject'),
  type?: string(name='Type', description='This parameter is required.'),
}

model BlockObjectShrinkRequest {
  contentShrink?: string(name='Content', description='This parameter is required.'),
  extension?: string(name='Extension'),
  maxage?: int32(name='Maxage'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='BlockObject'),
  type?: string(name='Type', description='This parameter is required.'),
}

model BlockObjectResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  taskId?: string(name='TaskId'),
}

model BlockObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlockObjectResponseBody(name='body'),
}

/**
 * @summary URL封禁
 *
 * @param tmpReq BlockObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BlockObjectResponse
 */
async function blockObjectWithOptions(tmpReq: BlockObjectRequest, runtime: Util.RuntimeOptions): BlockObjectResponse {
  Util.validateModel(tmpReq);
  var request = new BlockObjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.extension)) {
    query['Extension'] = request.extension;
  }
  if (!Util.isUnset(request.maxage)) {
    query['Maxage'] = request.maxage;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BlockObject',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary URL封禁
 *
 * @param request BlockObjectRequest
 * @return BlockObjectResponse
 */
async function blockObject(request: BlockObjectRequest): BlockObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return blockObjectWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='rg-axxxxxx'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', example='123456****'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F8AA0364-0FDB-4AD5-AC74-D69FAB8924ED'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
 * @summary 修改站点的企业资源组
 *
 * @param request ChangeResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeResourceGroupResponse
 */
async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改站点的企业资源组
 *
 * @param request ChangeResourceGroupRequest
 * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CheckSiteNameRequest {
  siteName?: string(name='SiteName', description='This parameter is required.', example='example.com'),
}

model CheckSiteNameResponseBody = {
  description?: string(name='Description', example='success'),
  isSubSite?: boolean(name='IsSubSite', example='false'),
  messeage?: string(name='Messeage'),
  passed?: boolean(name='Passed', example='true'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
}

model CheckSiteNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteNameResponseBody(name='body'),
}

/**
 * @summary 校验站点名称是否可用
 *
 * @param request CheckSiteNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSiteNameResponse
 */
async function checkSiteNameWithOptions(request: CheckSiteNameRequest, runtime: Util.RuntimeOptions): CheckSiteNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSiteName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 校验站点名称是否可用
 *
 * @param request CheckSiteNameRequest
 * @return CheckSiteNameResponse
 */
async function checkSiteName(request: CheckSiteNameRequest): CheckSiteNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSiteNameWithOptions(request, runtime);
}

model CheckSiteProjectNameRequest {
  projectName?: string(name='ProjectName', description='This parameter is required.', example='user_log'),
  siteId?: long(name='SiteId', example='12312312213212'),
}

model CheckSiteProjectNameResponseBody = {
  check?: boolean(name='Check', example='true'),
  description?: string(name='Description', example='project name pass the check'),
  projectName?: string(name='ProjectName', example='dcdn_waf_userAccount_log'),
  requestId?: string(name='RequestId', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckSiteProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSiteProjectNameResponseBody(name='body'),
}

/**
 * @summary 实时日志任务投递名检查
 *
 * @param request CheckSiteProjectNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSiteProjectNameResponse
 */
async function checkSiteProjectNameWithOptions(request: CheckSiteProjectNameRequest, runtime: Util.RuntimeOptions): CheckSiteProjectNameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSiteProjectName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实时日志任务投递名检查
 *
 * @param request CheckSiteProjectNameRequest
 * @return CheckSiteProjectNameResponse
 */
async function checkSiteProjectName(request: CheckSiteProjectNameRequest): CheckSiteProjectNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSiteProjectNameWithOptions(request, runtime);
}

model CheckUserProjectNameRequest {
  projectName?: string(name='ProjectName', description='This parameter is required.', example='ali-dcdn-log-56'),
}

model CheckUserProjectNameResponseBody = {
  check?: boolean(name='Check', example='true'),
  description?: string(name='Description', example='project name pass the check'),
  projectName?: string(name='ProjectName', example='ali-dcdn-log-56'),
  requestId?: string(name='RequestId', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model CheckUserProjectNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserProjectNameResponseBody(name='body'),
}

/**
 * @summary 实时日志用户任务投递名检查
 *
 * @param request CheckUserProjectNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckUserProjectNameResponse
 */
async function checkUserProjectNameWithOptions(request: CheckUserProjectNameRequest, runtime: Util.RuntimeOptions): CheckUserProjectNameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUserProjectName',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 实时日志用户任务投递名检查
 *
 * @param request CheckUserProjectNameRequest
 * @return CheckUserProjectNameResponse
 */
async function checkUserProjectName(request: CheckUserProjectNameRequest): CheckUserProjectNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserProjectNameWithOptions(request, runtime);
}

model CreateCustomScenePolicyRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', description='This parameter is required.', example='test'),
  objects?: string(name='Objects', example='7096621098****'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', description='This parameter is required.', example='promotion'),
}

model CreateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', example='2021-11-07T18:00:00Z'),
  name?: string(name='Name', example='test'),
  objects?: [ string ](name='Objects'),
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  startTime?: string(name='StartTime', example='2021-11-07T17:00:00Z'),
  template?: string(name='Template', example='promotion'),
}

model CreateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary 创建定制场景策略
 *
 * @param request CreateCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomScenePolicyResponse
 */
async function createCustomScenePolicyWithOptions(request: CreateCustomScenePolicyRequest, runtime: Util.RuntimeOptions): CreateCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.objects)) {
    query['Objects'] = request.objects;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建定制场景策略
 *
 * @param request CreateCustomScenePolicyRequest
 * @return CreateCustomScenePolicyResponse
 */
async function createCustomScenePolicy(request: CreateCustomScenePolicyRequest): CreateCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomScenePolicyWithOptions(request, runtime);
}

model CreateKvNamespaceRequest {
  description?: string(name='Description', example='this is a test namespace.'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model CreateKvNamespaceResponseBody = {
  description?: string(name='Description', example='this is a test namespace.'),
  namespace?: string(name='Namespace', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', example='657717877171818496'),
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model CreateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKvNamespaceResponseBody(name='body'),
}

/**
 * @summary 添加Namespace
 *
 * @param request CreateKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateKvNamespaceResponse
 */
async function createKvNamespaceWithOptions(request: CreateKvNamespaceRequest, runtime: Util.RuntimeOptions): CreateKvNamespaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加Namespace
 *
 * @param request CreateKvNamespaceRequest
 * @return CreateKvNamespaceResponse
 */
async function createKvNamespace(request: CreateKvNamespaceRequest): CreateKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKvNamespaceWithOptions(request, runtime);
}

model CreateListRequest {
  description?: string(name='Description', example='a custom list'),
  items?: [ string ](name='Items', example='a custom list'),
  kind?: string(name='Kind', example='ip'),
  name?: string(name='Name', description='This parameter is required.', example='example'),
}

model CreateListShrinkRequest {
  description?: string(name='Description', example='a custom list'),
  itemsShrink?: string(name='Items', example='a custom list'),
  kind?: string(name='Kind', example='ip'),
  name?: string(name='Name', description='This parameter is required.', example='example'),
}

model CreateListResponseBody = {
  id?: long(name='Id', example='40000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListResponseBody(name='body'),
}

/**
 * @summary 创建自定义列表
 *
 * @param tmpReq CreateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateListResponse
 */
async function createListWithOptions(tmpReq: CreateListRequest, runtime: Util.RuntimeOptions): CreateListResponse {
  Util.validateModel(tmpReq);
  var request = new CreateListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.items)) {
    request.itemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.items, 'Items', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.itemsShrink)) {
    body['Items'] = request.itemsShrink;
  }
  if (!Util.isUnset(request.kind)) {
    body['Kind'] = request.kind;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建自定义列表
 *
 * @param request CreateListRequest
 * @return CreateListResponse
 */
async function createList(request: CreateListRequest): CreateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createListWithOptions(request, runtime);
}

model CreatePageRequest {
  content?: string(name='Content', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='This parameter is required.', example='text/html'),
  description?: string(name='Description', example='a custom deny page'),
  name?: string(name='Name', description='This parameter is required.', example='example'),
}

model CreatePageResponseBody = {
  id?: long(name='Id', example='50000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model CreatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePageResponseBody(name='body'),
}

/**
 * @summary 调用CreatePage创建自定义响应页面
 *
 * @param request CreatePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePageResponse
 */
async function createPageWithOptions(request: CreatePageRequest, runtime: Util.RuntimeOptions): CreatePageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用CreatePage创建自定义响应页面
 *
 * @param request CreatePageRequest
 * @return CreatePageResponse
 */
async function createPage(request: CreatePageRequest): CreatePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPageWithOptions(request, runtime);
}

model CreateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
    authType?: string(name='AuthType', example='private'),
    region?: string(name='Region', example='us-east-1'),
    secretKey?: string(name='SecretKey', example='VIxuvJSA2S03f******kp208dy5w7'),
    version?: string(name='Version', example='v4'),
  }(name='AuthConf'),
  bizName?: string(name='BizName', description='业务场景', example='web'),
  comment?: string(name='Comment', example='This is a remark.'),
  data?: {
    algorithm?: int32(name='Algorithm', example='1'),
    certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
    fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
    flag?: int32(name='Flag', example='128'),
    keyTag?: int32(name='KeyTag', example='0'),
    matchingType?: int32(name='MatchingType', example='1'),
    port?: int32(name='Port', example='0'),
    priority?: int32(name='Priority', example='10'),
    selector?: int32(name='Selector', example='1'),
    tag?: string(name='Tag', example='issue'),
    type?: int32(name='Type', example='RSA'),
    usage?: int32(name='Usage', example='1'),
    value?: string(name='Value', example='example.com'),
    weight?: int32(name='Weight', example='0'),
  }(name='Data', description='This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy'),
  proxied?: boolean(name='Proxied', description='是否代理加速', example='true'),
  recordName?: string(name='RecordName', description='记录名称

This parameter is required.', example='www.example.com'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', example='OSS'),
  ttl?: int32(name='Ttl', example='30'),
  type?: string(name='Type', description='记录类型

This parameter is required.', example='A/AAAA'),
}

model CreateRecordShrinkRequest {
  authConfShrink?: string(name='AuthConf'),
  bizName?: string(name='BizName', description='业务场景', example='web'),
  comment?: string(name='Comment', example='This is a remark.'),
  dataShrink?: string(name='Data', description='This parameter is required.', example='{
    "value":"2.2.2.2"
}'),
  hostPolicy?: string(name='HostPolicy'),
  proxied?: boolean(name='Proxied', description='是否代理加速', example='true'),
  recordName?: string(name='RecordName', description='记录名称

This parameter is required.', example='www.example.com'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', example='OSS'),
  ttl?: int32(name='Ttl', example='30'),
  type?: string(name='Type', description='记录类型

This parameter is required.', example='A/AAAA'),
}

model CreateRecordResponseBody = {
  recordId?: long(name='RecordId', example='1234567890123'),
  requestId?: string(name='RequestId', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model CreateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRecordResponseBody(name='body'),
}

/**
 * @summary 创建记录
 *
 * @param tmpReq CreateRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRecordResponse
 */
async function createRecordWithOptions(tmpReq: CreateRecordRequest, runtime: Util.RuntimeOptions): CreateRecordResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authConf)) {
    request.authConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authConf, 'AuthConf', 'json');
  }
  if (!Util.isUnset(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authConfShrink)) {
    query['AuthConf'] = request.authConfShrink;
  }
  if (!Util.isUnset(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!Util.isUnset(request.hostPolicy)) {
    query['HostPolicy'] = request.hostPolicy;
  }
  if (!Util.isUnset(request.proxied)) {
    query['Proxied'] = request.proxied;
  }
  if (!Util.isUnset(request.recordName)) {
    query['RecordName'] = request.recordName;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建记录
 *
 * @param request CreateRecordRequest
 * @return CreateRecordResponse
 */
async function createRecord(request: CreateRecordRequest): CreateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecordWithOptions(request, runtime);
}

model CreateScheduledPreloadExecutionsRequest {
  executions?: [ 
    {
      endTime?: string(name='EndTime'),
      interval?: int32(name='Interval', description='This parameter is required.'),
      sliceLen?: int32(name='SliceLen', description='This parameter is required.'),
      startTime?: string(name='StartTime'),
    }
  ](name='Executions', description='This parameter is required.'),
  id?: string(name='Id', example='CreateScheduledPreloadExecutions'),
}

model CreateScheduledPreloadExecutionsShrinkRequest {
  executionsShrink?: string(name='Executions', description='This parameter is required.'),
  id?: string(name='Id', example='CreateScheduledPreloadExecutions'),
}

model CreateScheduledPreloadExecutionsResponseBody = {
  failedExecutions?: [ 
    {
      aliUid?: string(name='AliUid'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      interval?: int32(name='Interval'),
      jobId?: string(name='JobId'),
      sliceLen?: int32(name='SliceLen'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='FailedExecutions'),
  failedMessages?: [ string ](name='FailedMessages'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successCount?: int32(name='SuccessCount'),
  successExecutions?: [ 
    {
      aliUid?: string(name='AliUid'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      interval?: int32(name='Interval'),
      jobId?: string(name='JobId'),
      sliceLen?: int32(name='SliceLen'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='SuccessExecutions'),
  totalCount?: int32(name='TotalCount'),
}

model CreateScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
 * @summary 批量新增定时预热任务的计划
 *
 * @param tmpReq CreateScheduledPreloadExecutionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduledPreloadExecutionsResponse
 */
async function createScheduledPreloadExecutionsWithOptions(tmpReq: CreateScheduledPreloadExecutionsRequest, runtime: Util.RuntimeOptions): CreateScheduledPreloadExecutionsResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduledPreloadExecutionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.executions)) {
    request.executionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.executions, 'Executions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.executionsShrink)) {
    body['Executions'] = request.executionsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduledPreloadExecutions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量新增定时预热任务的计划
 *
 * @param request CreateScheduledPreloadExecutionsRequest
 * @return CreateScheduledPreloadExecutionsResponse
 */
async function createScheduledPreloadExecutions(request: CreateScheduledPreloadExecutionsRequest): CreateScheduledPreloadExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduledPreloadExecutionsWithOptions(request, runtime);
}

model CreateScheduledPreloadJobRequest {
  insertWay?: string(name='InsertWay', description='This parameter is required.', example='oss'),
  name?: string(name='Name', description='This parameter is required.'),
  ossUrl?: string(name='OssUrl'),
  siteId?: long(name='SiteId', description='This parameter is required.'),
  urlList?: string(name='UrlList'),
}

model CreateScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid'),
  createdAt?: string(name='CreatedAt'),
  domains?: string(name='Domains'),
  errorInfo?: string(name='ErrorInfo'),
  failedFileOss?: string(name='FailedFileOss'),
  fileId?: string(name='FileId'),
  id?: string(name='Id'),
  insertWay?: string(name='InsertWay'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
  taskSubmitted?: int32(name='TaskSubmitted'),
  taskType?: string(name='TaskType'),
  urlCount?: int32(name='UrlCount'),
  urlSubmitted?: int32(name='UrlSubmitted'),
}

model CreateScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary 新增定时预热任务
 *
 * @param request CreateScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateScheduledPreloadJobResponse
 */
async function createScheduledPreloadJobWithOptions(request: CreateScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): CreateScheduledPreloadJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.insertWay)) {
    body['InsertWay'] = request.insertWay;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossUrl)) {
    body['OssUrl'] = request.ossUrl;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.urlList)) {
    body['UrlList'] = request.urlList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增定时预热任务
 *
 * @param request CreateScheduledPreloadJobRequest
 * @return CreateScheduledPreloadJobResponse
 */
async function createScheduledPreloadJob(request: CreateScheduledPreloadJobRequest): CreateScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduledPreloadJobWithOptions(request, runtime);
}

model CreateSiteRequest {
  accessType?: string(name='AccessType', description='This parameter is required.', example='NS'),
  coverage?: string(name='Coverage', description='This parameter is required.', example='domestic'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='dbaudit-cn-nwy349jdb03'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmw4znnok****'),
  siteName?: string(name='SiteName', description='记录名称

This parameter is required.', example='CreateSite'),
}

model CreateSiteResponseBody = {
  nameServerList?: string(name='NameServerList', example='ns1.example.com,ns2.example.com'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', example='1234567890123'),
  verifyCode?: string(name='VerifyCode', example='verify_aah9dioasmov****'),
}

model CreateSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteResponseBody(name='body'),
}

/**
 * @summary 创建站点
 *
 * @param request CreateSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteResponse
 */
async function createSiteWithOptions(request: CreateSiteRequest, runtime: Util.RuntimeOptions): CreateSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建站点
 *
 * @param request CreateSiteRequest
 * @return CreateSiteResponse
 */
async function createSite(request: CreateSiteRequest): CreateSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSiteWithOptions(request, runtime);
}

model CreateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies'),
  requestHeaders?: [ string ](name='RequestHeaders'),
  responseHeaders?: [ string ](name='ResponseHeaders'),
  siteId?: long(name='SiteId', example='11223'),
}

model CreateSiteCustomLogShrinkRequest {
  cookiesShrink?: string(name='Cookies'),
  requestHeadersShrink?: string(name='RequestHeaders'),
  responseHeadersShrink?: string(name='ResponseHeaders'),
  siteId?: long(name='SiteId', example='11223'),
}

model CreateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='073bd613-6e72-4461-b6bc-19326dfc6a9c'),
}

model CreateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary 新建自定义字段
 *
 * @param tmpReq CreateSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteCustomLogResponse
 */
async function createSiteCustomLogWithOptions(tmpReq: CreateSiteCustomLogRequest, runtime: Util.RuntimeOptions): CreateSiteCustomLogResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSiteCustomLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cookies)) {
    request.cookiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cookies, 'Cookies', 'json');
  }
  if (!Util.isUnset(tmpReq.requestHeaders)) {
    request.requestHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaders, 'RequestHeaders', 'json');
  }
  if (!Util.isUnset(tmpReq.responseHeaders)) {
    request.responseHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaders, 'ResponseHeaders', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cookiesShrink)) {
    body['Cookies'] = request.cookiesShrink;
  }
  if (!Util.isUnset(request.requestHeadersShrink)) {
    body['RequestHeaders'] = request.requestHeadersShrink;
  }
  if (!Util.isUnset(request.responseHeadersShrink)) {
    body['ResponseHeaders'] = request.responseHeadersShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建自定义字段
 *
 * @param request CreateSiteCustomLogRequest
 * @return CreateSiteCustomLogResponse
 */
async function createSiteCustomLog(request: CreateSiteCustomLogRequest): CreateSiteCustomLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSiteCustomLogWithOptions(request, runtime);
}

model CreateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', example='0.0'),
  fieldName?: string(name='FieldName', description='This parameter is required.', example='user_agent,ip_adress,ip_port'),
  httpDelivery?: {
    compress?: string(name='Compress'),
    destUrl?: string(name='DestUrl'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam'),
    logBodyPrefix?: string(name='LogBodyPrefix'),
    logBodySuffix?: string(name='LogBodySuffix'),
    maxBatchMB?: long(name='MaxBatchMB'),
    maxBatchSize?: long(name='MaxBatchSize'),
    maxRetry?: long(name='MaxRetry'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam'),
    standardAuthOn?: boolean(name='StandardAuthOn'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime'),
      privateKey?: string(name='PrivateKey'),
      urlPath?: string(name='UrlPath'),
    }(name='StandardAuthParam'),
    transformTimeout?: long(name='TransformTimeout'),
  }(name='HttpDelivery'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer'),
    brokers?: [ string ](name='Brokers'),
    compress?: string(name='Compress', example='gzip'),
    machanismType?: string(name='MachanismType'),
    password?: string(name='Password'),
    topic?: string(name='Topic'),
    userAuth?: boolean(name='UserAuth'),
    userName?: string(name='UserName'),
  }(name='KafkaDelivery'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid'),
    bucketName?: string(name='BucketName'),
    prefixPath?: string(name='PrefixPath', example='logriver-test/log'),
    region?: string(name='Region', example='cn-beijing'),
  }(name='OssDelivery'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey'),
    bucketPath?: string(name='BucketPath'),
    endpoint?: string(name='Endpoint'),
    prefixPath?: string(name='PrefixPath'),
    region?: string(name='Region'),
    s3Cmpt?: boolean(name='S3Cmpt'),
    secretKey?: string(name='SecretKey'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery'),
  siteId?: long(name='SiteId', example='12312312112***'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    SLSRegion?: string(name='SLSRegion'),
  }(name='SlsDelivery'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='dcdn-test-task'),
}

model CreateSiteDeliveryTaskShrinkRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', example='0.0'),
  fieldName?: string(name='FieldName', description='This parameter is required.', example='user_agent,ip_adress,ip_port'),
  httpDeliveryShrink?: string(name='HttpDelivery'),
  kafkaDeliveryShrink?: string(name='KafkaDelivery'),
  ossDeliveryShrink?: string(name='OssDelivery'),
  s3DeliveryShrink?: string(name='S3Delivery'),
  siteId?: long(name='SiteId', example='12312312112***'),
  slsDeliveryShrink?: string(name='SlsDelivery'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='dcdn-test-task'),
}

model CreateSiteDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', example='cn'),
  requestId?: string(name='RequestId', description='Id of the request', example='9358E852-992D-5BC7-8BD7-975CA02773A8'),
  siteId?: string(name='SiteId', example='123456****'),
  taskName?: string(name='TaskName', example='er-oss'),
}

model CreateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 新建一个任务投递
 *
 * @param tmpReq CreateSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSiteDeliveryTaskResponse
 */
async function createSiteDeliveryTaskWithOptions(tmpReq: CreateSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): CreateSiteDeliveryTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSiteDeliveryTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.httpDelivery)) {
    request.httpDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpDelivery, 'HttpDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.kafkaDelivery)) {
    request.kafkaDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kafkaDelivery, 'KafkaDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.ossDelivery)) {
    request.ossDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ossDelivery, 'OssDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.s3Delivery)) {
    request.s3DeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.s3Delivery, 'S3Delivery', 'json');
  }
  if (!Util.isUnset(tmpReq.slsDelivery)) {
    request.slsDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slsDelivery, 'SlsDelivery', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!Util.isUnset(request.deliveryType)) {
    body['DeliveryType'] = request.deliveryType;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.httpDeliveryShrink)) {
    body['HttpDelivery'] = request.httpDeliveryShrink;
  }
  if (!Util.isUnset(request.kafkaDeliveryShrink)) {
    body['KafkaDelivery'] = request.kafkaDeliveryShrink;
  }
  if (!Util.isUnset(request.ossDeliveryShrink)) {
    body['OssDelivery'] = request.ossDeliveryShrink;
  }
  if (!Util.isUnset(request.s3DeliveryShrink)) {
    body['S3Delivery'] = request.s3DeliveryShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.slsDeliveryShrink)) {
    body['SlsDelivery'] = request.slsDeliveryShrink;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建一个任务投递
 *
 * @param request CreateSiteDeliveryTaskRequest
 * @return CreateSiteDeliveryTaskResponse
 */
async function createSiteDeliveryTask(request: CreateSiteDeliveryTaskRequest): CreateSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSiteDeliveryTaskWithOptions(request, runtime);
}

model CreateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', example='0'),
  fieldName?: string(name='FieldName', description='This parameter is required.', example='user_agent,ip_address,ip_port'),
  httpDelivery?: {
    compress?: string(name='Compress'),
    destUrl?: string(name='DestUrl'),
    headerParam?: map[string]HttpDeliveryHeaderParamValue(name='HeaderParam'),
    lastLogSplit?: string(name='LastLogSplit'),
    logBodyPrefix?: string(name='LogBodyPrefix'),
    logBodySuffix?: string(name='LogBodySuffix'),
    logSplit?: string(name='LogSplit'),
    logSplitWords?: string(name='LogSplitWords'),
    maxBackoffMS?: long(name='MaxBackoffMS'),
    maxBatchMB?: long(name='MaxBatchMB'),
    maxBatchSize?: long(name='MaxBatchSize'),
    maxRetry?: long(name='MaxRetry'),
    minBackoffMS?: long(name='MinBackoffMS'),
    queryParam?: map[string]HttpDeliveryQueryParamValue(name='QueryParam'),
    responseBodyKey?: string(name='ResponseBodyKey'),
    standardAuthOn?: boolean(name='StandardAuthOn'),
    standardAuthParam?: {
      expiredTime?: int32(name='ExpiredTime'),
      privateKey?: string(name='PrivateKey'),
      urlPath?: string(name='UrlPath'),
    }(name='StandardAuthParam'),
    successCode?: long(name='SuccessCode'),
    transformTimeout?: long(name='TransformTimeout'),
  }(name='HttpDelivery'),
  kafkaDelivery?: {
    balancer?: string(name='Balancer'),
    brokers?: [ string ](name='Brokers'),
    compress?: string(name='Compress', example='gzip'),
    machanismType?: string(name='MachanismType'),
    password?: string(name='Password'),
    topic?: string(name='Topic'),
    userAuth?: boolean(name='UserAuth'),
    userName?: string(name='UserName'),
  }(name='KafkaDelivery'),
  ossDelivery?: {
    aliuid?: string(name='Aliuid'),
    bucketName?: string(name='BucketName'),
    prefixPath?: string(name='PrefixPath', example='logriver-test/log'),
    region?: string(name='Region', example='cn-shanghai'),
  }(name='OssDelivery'),
  s3Delivery?: {
    accessKey?: string(name='AccessKey'),
    bucketPath?: string(name='BucketPath'),
    endpoint?: string(name='Endpoint'),
    prefixPath?: string(name='PrefixPath'),
    region?: string(name='Region'),
    s3Cmpt?: boolean(name='S3Cmpt'),
    secretKey?: string(name='SecretKey'),
    serverSideEncryption?: boolean(name='ServerSideEncryption'),
    vertifyType?: string(name='VertifyType'),
  }(name='S3Delivery'),
  slsDelivery?: {
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    SLSRegion?: string(name='SLSRegion'),
  }(name='SlsDelivery'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='test_project'),
}

model CreateUserDeliveryTaskShrinkRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', description='This parameter is required.', example='cn'),
  deliveryType?: string(name='DeliveryType', description='This parameter is required.', example='sls'),
  discardRate?: float(name='DiscardRate', example='0'),
  fieldName?: string(name='FieldName', description='This parameter is required.', example='user_agent,ip_address,ip_port'),
  httpDeliveryShrink?: string(name='HttpDelivery'),
  kafkaDeliveryShrink?: string(name='KafkaDelivery'),
  ossDeliveryShrink?: string(name='OssDelivery'),
  s3DeliveryShrink?: string(name='S3Delivery'),
  slsDeliveryShrink?: string(name='SlsDelivery'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='test_project'),
}

model CreateUserDeliveryTaskResponseBody = {
  dataCenter?: string(name='DataCenter', example='cn'),
  requestId?: string(name='RequestId', description='Id of the request', example='2CCD40B1-3F20-5FF0-8A67-E3F34B87744F'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='er-http'),
}

model CreateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 新建一个用户粒度任务投递
 *
 * @param tmpReq CreateUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUserDeliveryTaskResponse
 */
async function createUserDeliveryTaskWithOptions(tmpReq: CreateUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): CreateUserDeliveryTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserDeliveryTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.httpDelivery)) {
    request.httpDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.httpDelivery, 'HttpDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.kafkaDelivery)) {
    request.kafkaDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kafkaDelivery, 'KafkaDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.ossDelivery)) {
    request.ossDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ossDelivery, 'OssDelivery', 'json');
  }
  if (!Util.isUnset(tmpReq.s3Delivery)) {
    request.s3DeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.s3Delivery, 'S3Delivery', 'json');
  }
  if (!Util.isUnset(tmpReq.slsDelivery)) {
    request.slsDeliveryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slsDelivery, 'SlsDelivery', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!Util.isUnset(request.deliveryType)) {
    body['DeliveryType'] = request.deliveryType;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.httpDeliveryShrink)) {
    body['HttpDelivery'] = request.httpDeliveryShrink;
  }
  if (!Util.isUnset(request.kafkaDeliveryShrink)) {
    body['KafkaDelivery'] = request.kafkaDeliveryShrink;
  }
  if (!Util.isUnset(request.ossDeliveryShrink)) {
    body['OssDelivery'] = request.ossDeliveryShrink;
  }
  if (!Util.isUnset(request.s3DeliveryShrink)) {
    body['S3Delivery'] = request.s3DeliveryShrink;
  }
  if (!Util.isUnset(request.slsDeliveryShrink)) {
    body['SlsDelivery'] = request.slsDeliveryShrink;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建一个用户粒度任务投递
 *
 * @param request CreateUserDeliveryTaskRequest
 * @return CreateUserDeliveryTaskResponse
 */
async function createUserDeliveryTask(request: CreateUserDeliveryTaskRequest): CreateUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserDeliveryTaskWithOptions(request, runtime);
}

model CreateWafRuleRequest {
  config?: WafRuleConfig(name='Config'),
  phase?: string(name='Phase', description='This parameter is required.', example='http_custom'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model CreateWafRuleShrinkRequest {
  configShrink?: string(name='Config'),
  phase?: string(name='Phase', description='This parameter is required.', example='http_custom'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model CreateWafRuleResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesetId?: long(name='RulesetId'),
}

model CreateWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWafRuleResponseBody(name='body'),
}

/**
 * @summary 创建WAF规则
 *
 * @param tmpReq CreateWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWafRuleResponse
 */
async function createWafRuleWithOptions(tmpReq: CreateWafRuleRequest, runtime: Util.RuntimeOptions): CreateWafRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWafRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configShrink)) {
    body['Config'] = request.configShrink;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建WAF规则
 *
 * @param request CreateWafRuleRequest
 * @return CreateWafRuleResponse
 */
async function createWafRule(request: CreateWafRuleRequest): CreateWafRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWafRuleWithOptions(request, runtime);
}

model CreateWaitingRoomRequest {
  cookieName?: string(name='CookieName', description='This parameter is required.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!'),
  description?: string(name='Description'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
  enable?: string(name='Enable', description='This parameter is required.', example='on'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', description='This parameter is required.', example='example.com'),
      path?: string(name='Path', description='This parameter is required.', example='/test'),
      subdomain?: string(name='Subdomain', description='This parameter is required.', example='test.'),
    }
  ](name='HostNameAndPath', description='This parameter is required.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
  language?: string(name='Language', example='enus'),
  name?: string(name='Name', description='This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='This parameter is required.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='This parameter is required.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='This parameter is required.', example='200'),
  sessionDuration?: string(name='SessionDuration', description='This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='This parameter is required.', example='300'),
  waitingRoomType?: string(name='WaitingRoomType', description='This parameter is required.', example='default'),
}

model CreateWaitingRoomShrinkRequest {
  cookieName?: string(name='CookieName', description='This parameter is required.', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!'),
  description?: string(name='Description'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
  enable?: string(name='Enable', description='This parameter is required.', example='on'),
  hostNameAndPathShrink?: string(name='HostNameAndPath', description='This parameter is required.'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
  language?: string(name='Language', example='enus'),
  name?: string(name='Name', description='This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='This parameter is required.', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', example='on'),
  queuingMethod?: string(name='QueuingMethod', description='This parameter is required.', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='This parameter is required.', example='200'),
  sessionDuration?: string(name='SessionDuration', description='This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='This parameter is required.', example='300'),
  waitingRoomType?: string(name='WaitingRoomType', description='This parameter is required.', example='default'),
}

model CreateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomResponseBody(name='body'),
}

/**
 * @summary 创建等候室
 *
 * @param tmpReq CreateWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomResponse
 */
async function createWaitingRoomWithOptions(tmpReq: CreateWaitingRoomRequest, runtime: Util.RuntimeOptions): CreateWaitingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWaitingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hostNameAndPath)) {
    request.hostNameAndPathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostNameAndPath, 'HostNameAndPath', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cookieName)) {
    query['CookieName'] = request.cookieName;
  }
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.hostNameAndPathShrink)) {
    query['HostNameAndPath'] = request.hostNameAndPathShrink;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.queueAllEnable)) {
    query['QueueAllEnable'] = request.queueAllEnable;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建等候室
 *
 * @param request CreateWaitingRoomRequest
 * @return CreateWaitingRoomResponse
 */
async function createWaitingRoom(request: CreateWaitingRoomRequest): CreateWaitingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingRoomWithOptions(request, runtime);
}

model CreateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!'),
  description?: string(name='Description'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
  enable?: string(name='Enable', description='This parameter is required.', example='on'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1719849600'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
  language?: string(name='Language', example='zhcn'),
  name?: string(name='Name', description='This parameter is required.', example='waitingroom_example'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', description='This parameter is required.', example='10'),
  preQueueEnable?: string(name='PreQueueEnable', example='on'),
  preQueueStartTime?: string(name='PreQueueStartTime', example='1719763200'),
  queuingMethod?: string(name='QueuingMethod', description='This parameter is required.', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', description='This parameter is required.', example='202'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', example='on'),
  sessionDuration?: string(name='SessionDuration', description='This parameter is required.', example='5'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1719763200'),
  totalActiveUsers?: string(name='TotalActiveUsers', description='This parameter is required.', example='100'),
  waitingRoomId?: string(name='WaitingRoomId', example='6a51d5bc6460887abd1291dc7d4db28b'),
  waitingRoomType?: string(name='WaitingRoomType', description='This parameter is required.', example='default'),
}

model CreateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model CreateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary 创建等候室事件
 *
 * @param request CreateWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomEventResponse
 */
async function createWaitingRoomEventWithOptions(request: CreateWaitingRoomEventRequest, runtime: Util.RuntimeOptions): CreateWaitingRoomEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.preQueueEnable)) {
    query['PreQueueEnable'] = request.preQueueEnable;
  }
  if (!Util.isUnset(request.preQueueStartTime)) {
    query['PreQueueStartTime'] = request.preQueueStartTime;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.randomPreQueueEnable)) {
    query['RandomPreQueueEnable'] = request.randomPreQueueEnable;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建等候室事件
 *
 * @param request CreateWaitingRoomEventRequest
 * @return CreateWaitingRoomEventResponse
 */
async function createWaitingRoomEvent(request: CreateWaitingRoomEventRequest): CreateWaitingRoomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingRoomEventWithOptions(request, runtime);
}

model CreateWaitingRoomRuleRequest {
  rule?: string(name='Rule', description='This parameter is required.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='This parameter is required.', example='on'),
  ruleName?: string(name='RuleName', description='This parameter is required.', example='waitingroom_example'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4'),
}

model CreateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model CreateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary 创建等候室规则
 *
 * @param request CreateWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWaitingRoomRuleResponse
 */
async function createWaitingRoomRuleWithOptions(request: CreateWaitingRoomRuleRequest, runtime: Util.RuntimeOptions): CreateWaitingRoomRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建等候室规则
 *
 * @param request CreateWaitingRoomRuleRequest
 * @return CreateWaitingRoomRuleResponse
 */
async function createWaitingRoomRule(request: CreateWaitingRoomRuleRequest): CreateWaitingRoomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingRoomRuleWithOptions(request, runtime);
}

model DeleteCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='This parameter is required.', example='1'),
}

model DeleteCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='5CC228B4-7A67-4016-9C9F-4A4133494A91'),
}

model DeleteCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary 删除定制场景策略
 *
 * @param request DeleteCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomScenePolicyResponse
 */
async function deleteCustomScenePolicyWithOptions(request: DeleteCustomScenePolicyRequest, runtime: Util.RuntimeOptions): DeleteCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除定制场景策略
 *
 * @param request DeleteCustomScenePolicyRequest
 * @return DeleteCustomScenePolicyResponse
 */
async function deleteCustomScenePolicy(request: DeleteCustomScenePolicyRequest): DeleteCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomScenePolicyWithOptions(request, runtime);
}

model DeleteKvRequest {
  key?: string(name='Key', description='This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model DeleteKvResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvResponseBody(name='body'),
}

/**
 * @summary 删除Namespace的Key-Value对
 *
 * @param request DeleteKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKvResponse
 */
async function deleteKvWithOptions(request: DeleteKvRequest, runtime: Util.RuntimeOptions): DeleteKvResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Namespace的Key-Value对
 *
 * @param request DeleteKvRequest
 * @return DeleteKvResponse
 */
async function deleteKv(request: DeleteKvRequest): DeleteKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKvWithOptions(request, runtime);
}

model DeleteKvNamespaceRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model DeleteKvNamespaceResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
}

model DeleteKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKvNamespaceResponseBody(name='body'),
}

/**
 * @summary 删除Namespace
 *
 * @param request DeleteKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKvNamespaceResponse
 */
async function deleteKvNamespaceWithOptions(request: DeleteKvNamespaceRequest, runtime: Util.RuntimeOptions): DeleteKvNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Namespace
 *
 * @param request DeleteKvNamespaceRequest
 * @return DeleteKvNamespaceResponse
 */
async function deleteKvNamespace(request: DeleteKvNamespaceRequest): DeleteKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKvNamespaceWithOptions(request, runtime);
}

model DeleteListRequest {
  id?: long(name='Id', description='This parameter is required.', example='40000001'),
}

model DeleteListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListResponseBody(name='body'),
}

/**
 * @summary 删除自定义列表
 *
 * @param request DeleteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteListResponse
 */
async function deleteListWithOptions(request: DeleteListRequest, runtime: Util.RuntimeOptions): DeleteListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除自定义列表
 *
 * @param request DeleteListRequest
 * @return DeleteListResponse
 */
async function deleteList(request: DeleteListRequest): DeleteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteListWithOptions(request, runtime);
}

model DeletePageRequest {
  id?: long(name='Id', description='This parameter is required.', example='50000001'),
}

model DeletePageResponseBody = {
  id?: long(name='Id', example='50000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeletePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePageResponseBody(name='body'),
}

/**
 * @summary 删除自定义响应页面
 *
 * @param request DeletePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePageResponse
 */
async function deletePageWithOptions(request: DeletePageRequest, runtime: Util.RuntimeOptions): DeletePageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除自定义响应页面
 *
 * @param request DeletePageRequest
 * @return DeletePageResponse
 */
async function deletePage(request: DeletePageRequest): DeletePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePageWithOptions(request, runtime);
}

model DeleteRecordRequest {
  recordId?: long(name='RecordId', description='This parameter is required.'),
}

model DeleteRecordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRecordResponseBody(name='body'),
}

/**
 * @summary 删除记录
 *
 * @param request DeleteRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRecordResponse
 */
async function deleteRecordWithOptions(request: DeleteRecordRequest, runtime: Util.RuntimeOptions): DeleteRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除记录
 *
 * @param request DeleteRecordRequest
 * @return DeleteRecordResponse
 */
async function deleteRecord(request: DeleteRecordRequest): DeleteRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordWithOptions(request, runtime);
}

model DeleteScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='This parameter is required.', example='DeleteScheduledPreloadExecution'),
}

model DeleteScheduledPreloadExecutionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary 删除单个定时预热计划
 *
 * @param request DeleteScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScheduledPreloadExecutionResponse
 */
async function deleteScheduledPreloadExecutionWithOptions(request: DeleteScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): DeleteScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除单个定时预热计划
 *
 * @param request DeleteScheduledPreloadExecutionRequest
 * @return DeleteScheduledPreloadExecutionResponse
 */
async function deleteScheduledPreloadExecution(request: DeleteScheduledPreloadExecutionRequest): DeleteScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduledPreloadExecutionWithOptions(request, runtime);
}

model DeleteScheduledPreloadJobRequest {
  id?: string(name='Id', description='This parameter is required.', example='DeleteScheduledPreloadJob'),
}

model DeleteScheduledPreloadJobResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary 删除指定定时预热任务
 *
 * @param request DeleteScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteScheduledPreloadJobResponse
 */
async function deleteScheduledPreloadJobWithOptions(request: DeleteScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): DeleteScheduledPreloadJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除指定定时预热任务
 *
 * @param request DeleteScheduledPreloadJobRequest
 * @return DeleteScheduledPreloadJobResponse
 */
async function deleteScheduledPreloadJob(request: DeleteScheduledPreloadJobRequest): DeleteScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduledPreloadJobWithOptions(request, runtime);
}

model DeleteSiteRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', example='1234567890123'),
}

model DeleteSiteResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model DeleteSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteResponseBody(name='body'),
}

/**
 * @summary 删除站点
 *
 * @param request DeleteSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteResponse
 */
async function deleteSiteWithOptions(request: DeleteSiteRequest, runtime: Util.RuntimeOptions): DeleteSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除站点
 *
 * @param request DeleteSiteRequest
 * @return DeleteSiteResponse
 */
async function deleteSite(request: DeleteSiteRequest): DeleteSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSiteWithOptions(request, runtime);
}

model DeleteSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456******'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='cdn-test-task'),
}

model DeleteSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DeleteSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 删除一个任务投递
 *
 * @param request DeleteSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSiteDeliveryTaskResponse
 */
async function deleteSiteDeliveryTaskWithOptions(request: DeleteSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): DeleteSiteDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除一个任务投递
 *
 * @param request DeleteSiteDeliveryTaskRequest
 * @return DeleteSiteDeliveryTaskResponse
 */
async function deleteSiteDeliveryTask(request: DeleteSiteDeliveryTaskRequest): DeleteSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSiteDeliveryTaskWithOptions(request, runtime);
}

model DeleteUserDeliveryTaskRequest {
  taskName?: string(name='TaskName', description='This parameter is required.', example='test-project'),
}

model DeleteUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='952ea16b-1f05-4a76-bb32-420282d8aeb9'),
}

model DeleteUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 删除一个用户任务投递
 *
 * @param request DeleteUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUserDeliveryTaskResponse
 */
async function deleteUserDeliveryTaskWithOptions(request: DeleteUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): DeleteUserDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除一个用户任务投递
 *
 * @param request DeleteUserDeliveryTaskRequest
 * @return DeleteUserDeliveryTaskResponse
 */
async function deleteUserDeliveryTask(request: DeleteUserDeliveryTaskRequest): DeleteUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserDeliveryTaskWithOptions(request, runtime);
}

model DeleteWafRuleRequest {
  id?: long(name='Id', description='This parameter is required.', example='20000001'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model DeleteWafRuleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWafRuleResponseBody(name='body'),
}

/**
 * @summary 删除WAF规则
 *
 * @param request DeleteWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWafRuleResponse
 */
async function deleteWafRuleWithOptions(request: DeleteWafRuleRequest, runtime: Util.RuntimeOptions): DeleteWafRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除WAF规则
 *
 * @param request DeleteWafRuleRequest
 * @return DeleteWafRuleResponse
 */
async function deleteWafRule(request: DeleteWafRuleRequest): DeleteWafRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWafRuleWithOptions(request, runtime);
}

model DeleteWafRulesetRequest {
  id?: long(name='Id', description='This parameter is required.', example='10000001'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model DeleteWafRulesetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model DeleteWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWafRulesetResponseBody(name='body'),
}

/**
 * @summary 删除WAF规则集
 *
 * @param request DeleteWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWafRulesetResponse
 */
async function deleteWafRulesetWithOptions(request: DeleteWafRulesetRequest, runtime: Util.RuntimeOptions): DeleteWafRulesetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除WAF规则集
 *
 * @param request DeleteWafRulesetRequest
 * @return DeleteWafRulesetResponse
 */
async function deleteWafRuleset(request: DeleteWafRulesetRequest): DeleteWafRulesetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWafRulesetWithOptions(request, runtime);
}

model DeleteWaitingRoomRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='This parameter is required.', example='25133f536f1b1f6b6091f6a92c614dd4'),
}

model DeleteWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
}

model DeleteWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomResponseBody(name='body'),
}

/**
 * @summary 删除等候室
 *
 * @param request DeleteWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomResponse
 */
async function deleteWaitingRoomWithOptions(request: DeleteWaitingRoomRequest, runtime: Util.RuntimeOptions): DeleteWaitingRoomResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除等候室
 *
 * @param request DeleteWaitingRoomRequest
 * @return DeleteWaitingRoomResponse
 */
async function deleteWaitingRoom(request: DeleteWaitingRoomRequest): DeleteWaitingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingRoomWithOptions(request, runtime);
}

model DeleteWaitingRoomEventRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', example='302909890***'),
}

model DeleteWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary 删除等候室事件
 *
 * @param request DeleteWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomEventResponse
 */
async function deleteWaitingRoomEventWithOptions(request: DeleteWaitingRoomEventRequest, runtime: Util.RuntimeOptions): DeleteWaitingRoomEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomEventId)) {
    query['WaitingRoomEventId'] = request.waitingRoomEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除等候室事件
 *
 * @param request DeleteWaitingRoomEventRequest
 * @return DeleteWaitingRoomEventResponse
 */
async function deleteWaitingRoomEvent(request: DeleteWaitingRoomEventRequest): DeleteWaitingRoomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingRoomEventWithOptions(request, runtime);
}

model DeleteWaitingRoomRuleRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='3672886****'),
}

model DeleteWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary 删除等候室规则
 *
 * @param request DeleteWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWaitingRoomRuleResponse
 */
async function deleteWaitingRoomRuleWithOptions(request: DeleteWaitingRoomRuleRequest, runtime: Util.RuntimeOptions): DeleteWaitingRoomRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomRuleId)) {
    query['WaitingRoomRuleId'] = request.waitingRoomRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除等候室规则
 *
 * @param request DeleteWaitingRoomRuleRequest
 * @return DeleteWaitingRoomRuleResponse
 */
async function deleteWaitingRoomRule(request: DeleteWaitingRoomRuleRequest): DeleteWaitingRoomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingRoomRuleWithOptions(request, runtime);
}

model DescribeCustomScenePoliciesRequest {
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyId?: long(name='PolicyId', example='1234****'),
}

model DescribeCustomScenePoliciesResponseBody = {
  dataModule?: [ 
    {
      endTime?: string(name='EndTime', example='2023-03-06T16:00:00Z'),
      name?: string(name='Name', example='test'),
      objects?: [ string ](name='Objects'),
      policyId?: long(name='PolicyId', example='1234****'),
      startTime?: string(name='StartTime', example='2023-03-04T16:00:00Z'),
      status?: string(name='Status', example='Expired'),
      template?: string(name='Template', example='promotion'),
    }
  ](name='DataModule'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  quota?: int32(name='Quota', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCustomScenePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomScenePoliciesResponseBody(name='body'),
}

/**
 * @summary 查询定制场景策略配置
 *
 * @param request DescribeCustomScenePoliciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCustomScenePoliciesResponse
 */
async function describeCustomScenePoliciesWithOptions(request: DescribeCustomScenePoliciesRequest, runtime: Util.RuntimeOptions): DescribeCustomScenePoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomScenePolicies',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询定制场景策略配置
 *
 * @param request DescribeCustomScenePoliciesRequest
 * @return DescribeCustomScenePoliciesResponse
 */
async function describeCustomScenePolicies(request: DescribeCustomScenePoliciesRequest): DescribeCustomScenePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomScenePoliciesWithOptions(request, runtime);
}

model DescribeDDoSAllEventListRequest {
  endTime?: string(name='EndTime', example='2023-02-22T15:59:59Z'),
  eventType?: string(name='EventType', example='web-cc'),
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='7096621098****'),
  startTime?: string(name='StartTime', description='A short description of struct

This parameter is required.', example='2023-02-12T15:00:00Z'),
}

model DescribeDDoSAllEventListResponseBody = {
  dataList?: [ 
    {
      bps?: long(name='Bps', example='800'),
      cps?: long(name='Cps', example='50'),
      endTime?: string(name='EndTime', example='2023-02-12T15:59:59Z'),
      eventId?: string(name='EventId', example='web-cc_1'),
      eventType?: string(name='EventType', example='web-cc'),
      pps?: long(name='Pps', example='12000'),
      qps?: long(name='Qps', example='7692'),
      startTime?: string(name='StartTime', example='2023-02-12T15:00:00Z'),
      target?: string(name='Target', example='example.com'),
      targetId?: string(name='TargetId', example='000000000155****'),
    }
  ](name='DataList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='D73A4243-CFBD-5110-876F-09237E77ECBD'),
  siteId?: long(name='SiteId', example='7096621098****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDDoSAllEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDDoSAllEventListResponseBody(name='body'),
}

/**
 * @summary 攻击分析-查询攻击事件列表
 *
 * @param request DescribeDDoSAllEventListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDDoSAllEventListResponse
 */
async function describeDDoSAllEventListWithOptions(request: DescribeDDoSAllEventListRequest, runtime: Util.RuntimeOptions): DescribeDDoSAllEventListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSAllEventList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 攻击分析-查询攻击事件列表
 *
 * @param request DescribeDDoSAllEventListRequest
 * @return DescribeDDoSAllEventListResponse
 */
async function describeDDoSAllEventList(request: DescribeDDoSAllEventListRequest): DescribeDDoSAllEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSAllEventListWithOptions(request, runtime);
}

model DescribeHttpDDoSAttackIntelligentProtectionRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', example='defense'),
  aiTemplate?: string(name='AiTemplate', example='level60'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  siteId?: long(name='SiteId', example='123456****'),
}

model DescribeHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
 * @summary 查询HTTP DDoS智能防护配置信息
 *
 * @param request DescribeHttpDDoSAttackIntelligentProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
async function describeHttpDDoSAttackIntelligentProtectionWithOptions(request: DescribeHttpDDoSAttackIntelligentProtectionRequest, runtime: Util.RuntimeOptions): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHttpDDoSAttackIntelligentProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询HTTP DDoS智能防护配置信息
 *
 * @param request DescribeHttpDDoSAttackIntelligentProtectionRequest
 * @return DescribeHttpDDoSAttackIntelligentProtectionResponse
 */
async function describeHttpDDoSAttackIntelligentProtection(request: DescribeHttpDDoSAttackIntelligentProtectionRequest): DescribeHttpDDoSAttackIntelligentProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHttpDDoSAttackIntelligentProtectionWithOptions(request, runtime);
}

model DescribeHttpDDoSAttackProtectionRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', example='default'),
  requestId?: string(name='RequestId', description='Id of the request', example='35C66C7B-671H-4297-9187-2C4477247A78'),
  siteId?: long(name='SiteId', example='123456****'),
}

model DescribeHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
 * @summary 查询HTTP DDoS攻击防护配置信息
 *
 * @param request DescribeHttpDDoSAttackProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHttpDDoSAttackProtectionResponse
 */
async function describeHttpDDoSAttackProtectionWithOptions(request: DescribeHttpDDoSAttackProtectionRequest, runtime: Util.RuntimeOptions): DescribeHttpDDoSAttackProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHttpDDoSAttackProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询HTTP DDoS攻击防护配置信息
 *
 * @param request DescribeHttpDDoSAttackProtectionRequest
 * @return DescribeHttpDDoSAttackProtectionResponse
 */
async function describeHttpDDoSAttackProtection(request: DescribeHttpDDoSAttackProtectionRequest): DescribeHttpDDoSAttackProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHttpDDoSAttackProtectionWithOptions(request, runtime);
}

model DescribeIPRangeListResponseBody = {
  content?: [ 
    {
      cidr?: string(name='Cidr', example='172.16.0.0/12'),
      ipType?: string(name='IpType', example='IPv4'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
}

model DescribeIPRangeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIPRangeListResponseBody(name='body'),
}

/**
 * @summary 查询加速服务节点IP段列表
 *
 * @param request DescribeIPRangeListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeIPRangeListResponse
 */
async function describeIPRangeListWithOptions(runtime: Util.RuntimeOptions): DescribeIPRangeListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeIPRangeList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询加速服务节点IP段列表
 *
 * @return DescribeIPRangeListResponse
 */
async function describeIPRangeList(): DescribeIPRangeListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIPRangeListWithOptions(runtime);
}

model DescribeKvAccountStatusResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model DescribeKvAccountStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKvAccountStatusResponseBody(name='body'),
}

/**
 * @summary 查询账户的KV状态信
 *
 * @param request DescribeKvAccountStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatusWithOptions(runtime: Util.RuntimeOptions): DescribeKvAccountStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeKvAccountStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询账户的KV状态信
 *
 * @return DescribeKvAccountStatusResponse
 */
async function describeKvAccountStatus(): DescribeKvAccountStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKvAccountStatusWithOptions(runtime);
}

model DescribePreloadTasksRequest {
  content?: string(name='Content', example='http://a.com/1.jpg?b=2'),
  endTime?: string(name='EndTime', example='2023-03-23T06:23:00Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  siteId?: long(name='SiteId', example='123456789****'),
  startTime?: string(name='StartTime', example='2023-03-22T17:00:00Z'),
  status?: string(name='Status', example='Complete'),
}

model DescribePreloadTasksResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  tasks?: [ 
    {
      content?: string(name='Content', example='http://a.com/1.jpg?b=2'),
      createTime?: string(name='CreateTime', example='2023-03-28 14:28:57'),
      description?: string(name='Description', example='Internal Error'),
      process?: string(name='Process', example='100%'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='1597854579687428'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount', example='83'),
}

model DescribePreloadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePreloadTasksResponseBody(name='body'),
}

/**
 * @summary 预热任务查询接口
 *
 * @param request DescribePreloadTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePreloadTasksResponse
 */
async function describePreloadTasksWithOptions(request: DescribePreloadTasksRequest, runtime: Util.RuntimeOptions): DescribePreloadTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePreloadTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 预热任务查询接口
 *
 * @param request DescribePreloadTasksRequest
 * @return DescribePreloadTasksResponse
 */
async function describePreloadTasks(request: DescribePreloadTasksRequest): DescribePreloadTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreloadTasksWithOptions(request, runtime);
}

model DescribePurgeTasksRequest {
  content?: string(name='Content', example='http://a.com/1.jpg?b=1'),
  endTime?: string(name='EndTime', example='2022-11-18T15:59:59Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  siteId?: long(name='SiteId', example='123456789****'),
  startTime?: string(name='StartTime', example='2022-11-16T05:33:00Z'),
  status?: string(name='Status', example='Complete'),
  type?: string(name='Type', example='file'),
}

model DescribePurgeTasksResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  tasks?: [ 
    {
      content?: string(name='Content', example='http://a.com/1.jpg?b=1'),
      createTime?: string(name='CreateTime', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', example='Internal Error'),
      process?: string(name='Process', example='100%'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='16346513304'),
      type?: string(name='Type', example='file'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount', example='15'),
}

model DescribePurgeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurgeTasksResponseBody(name='body'),
}

/**
 * @summary 刷新任务查询接口
 *
 * @param request DescribePurgeTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePurgeTasksResponse
 */
async function describePurgeTasksWithOptions(request: DescribePurgeTasksRequest, runtime: Util.RuntimeOptions): DescribePurgeTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurgeTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 刷新任务查询接口
 *
 * @param request DescribePurgeTasksRequest
 * @return DescribePurgeTasksResponse
 */
async function describePurgeTasks(request: DescribePurgeTasksRequest): DescribePurgeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurgeTasksWithOptions(request, runtime);
}

model DisableCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='This parameter is required.', example='100001'),
}

model DisableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', example='100001'),
  requestId?: string(name='RequestId', description='Id of the request', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DisableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary 禁用定制场景策略
 *
 * @param request DisableCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableCustomScenePolicyResponse
 */
async function disableCustomScenePolicyWithOptions(request: DisableCustomScenePolicyRequest, runtime: Util.RuntimeOptions): DisableCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 禁用定制场景策略
 *
 * @param request DisableCustomScenePolicyRequest
 * @return DisableCustomScenePolicyResponse
 */
async function disableCustomScenePolicy(request: DisableCustomScenePolicyRequest): DisableCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableCustomScenePolicyWithOptions(request, runtime);
}

model EditSiteWafSettingsRequest {
  settings?: WafSiteSettings(name='Settings'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model EditSiteWafSettingsShrinkRequest {
  settingsShrink?: string(name='Settings'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model EditSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model EditSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditSiteWafSettingsResponseBody(name='body'),
}

/**
 * @summary 编辑站点WAF配置
 *
 * @param tmpReq EditSiteWafSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EditSiteWafSettingsResponse
 */
async function editSiteWafSettingsWithOptions(tmpReq: EditSiteWafSettingsRequest, runtime: Util.RuntimeOptions): EditSiteWafSettingsResponse {
  Util.validateModel(tmpReq);
  var request = new EditSiteWafSettingsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.settings)) {
    request.settingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.settings, 'Settings', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.settingsShrink)) {
    body['Settings'] = request.settingsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EditSiteWafSettings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑站点WAF配置
 *
 * @param request EditSiteWafSettingsRequest
 * @return EditSiteWafSettingsResponse
 */
async function editSiteWafSettings(request: EditSiteWafSettingsRequest): EditSiteWafSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return editSiteWafSettingsWithOptions(request, runtime);
}

model EnableCustomScenePolicyRequest {
  policyId?: long(name='PolicyId', description='This parameter is required.', example='1'),
}

model EnableCustomScenePolicyResponseBody = {
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model EnableCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary 启动定制场景策略
 *
 * @param request EnableCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableCustomScenePolicyResponse
 */
async function enableCustomScenePolicyWithOptions(request: EnableCustomScenePolicyRequest, runtime: Util.RuntimeOptions): EnableCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动定制场景策略
 *
 * @param request EnableCustomScenePolicyRequest
 * @return EnableCustomScenePolicyResponse
 */
async function enableCustomScenePolicy(request: EnableCustomScenePolicyRequest): EnableCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableCustomScenePolicyWithOptions(request, runtime);
}

model ExportRecordsRequest {
  siteId?: long(name='SiteId', example='1234567890123'),
}

model ExportRecordsResponseBody = {
  content?: string(name='Content', example=';; site:example.com.\\\\n;; Exported:2024-01-24 15:54:35\\\\n\\\\n;; A Records\\\\na1.example.com. 30 IN A 1.1.1.1 direct\\\\na2.example.com. 30 IN A 1.1.1.1 direct\\\\na3.example.com. 30 IN A 1.1.1.1 direct\\\\n'),
  requestId?: string(name='RequestId', description='Id of the request', example='C69B5894-D1BA-592C-95D0-DADBE7AEAC63'),
}

model ExportRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportRecordsResponseBody(name='body'),
}

/**
 * @summary 导出记录
 *
 * @param request ExportRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportRecordsResponse
 */
async function exportRecordsWithOptions(request: ExportRecordsRequest, runtime: Util.RuntimeOptions): ExportRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导出记录
 *
 * @param request ExportRecordsRequest
 * @return ExportRecordsResponse
 */
async function exportRecords(request: ExportRecordsRequest): ExportRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportRecordsWithOptions(request, runtime);
}

model GetCacheReserveSpecificationResponseBody = {
  cacheReserveCapacity?: [ string ](name='CacheReserveCapacity'),
  cacheReserveRegion?: [ string ](name='CacheReserveRegion'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetCacheReserveSpecificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCacheReserveSpecificationResponseBody(name='body'),
}

/**
 * @summary 查询缓存保持实例规格
 *
 * @param request GetCacheReserveSpecificationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecificationWithOptions(runtime: Util.RuntimeOptions): GetCacheReserveSpecificationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCacheReserveSpecification',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询缓存保持实例规格
 *
 * @return GetCacheReserveSpecificationResponse
 */
async function getCacheReserveSpecification(): GetCacheReserveSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCacheReserveSpecificationWithOptions(runtime);
}

model GetErServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GetErServiceResponseBody = {
  planName?: string(name='PlanName', example='er_paymode'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  status?: string(name='Status', example='Running'),
}

model GetErServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetErServiceResponseBody(name='body'),
}

/**
 * @summary GetErService
 *
 * @param request GetErServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetErServiceResponse
 */
async function getErServiceWithOptions(request: GetErServiceRequest, runtime: Util.RuntimeOptions): GetErServiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetErService',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary GetErService
 *
 * @param request GetErServiceRequest
 * @return GetErServiceResponse
 */
async function getErService(request: GetErServiceRequest): GetErServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getErServiceWithOptions(request, runtime);
}

model GetKvRequest {
  base64?: boolean(name='Base64', example='true'),
  key?: string(name='Key', description='This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model GetKvResponseBody = {
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', example='test_value'),
}

model GetKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvResponseBody(name='body'),
}

/**
 * @summary 查询Key-Value对的某个Key值
 *
 * @param request GetKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvResponse
 */
async function getKvWithOptions(request: GetKvRequest, runtime: Util.RuntimeOptions): GetKvResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Key-Value对的某个Key值
 *
 * @param request GetKvRequest
 * @return GetKvResponse
 */
async function getKv(request: GetKvRequest): GetKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKvWithOptions(request, runtime);
}

model GetKvAccountResponseBody = {
  capacity?: long(name='Capacity', example='1073741824'),
  capacityString?: string(name='CapacityString', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', example='100 MB'),
  namespaceList?: [ 
    {
      capacity?: long(name='Capacity', example='1073741824'),
      capacityString?: string(name='CapacityString', example='1 GB'),
      capacityUsed?: long(name='CapacityUsed', example='100048576'),
      capacityUsedString?: string(name='CapacityUsedString', example='100 MB'),
      description?: string(name='Description', example='the first namespace'),
      namespace?: string(name='Namespace', example='test_namespace'),
      namespaceId?: string(name='NamespaceId', example='643355322374688768'),
      status?: string(name='Status', example='online'),
    }
  ](name='NamespaceList'),
  namespaceQuota?: int32(name='NamespaceQuota', example='10'),
  namespaceUsed?: int32(name='NamespaceUsed', example='1'),
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model GetKvAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvAccountResponseBody(name='body'),
}

/**
 * @summary 列出账号下的NS
 *
 * @param request GetKvAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvAccountResponse
 */
async function getKvAccountWithOptions(runtime: Util.RuntimeOptions): GetKvAccountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetKvAccount',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出账号下的NS
 *
 * @return GetKvAccountResponse
 */
async function getKvAccount(): GetKvAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKvAccountWithOptions(runtime);
}

model GetKvNamespaceRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
}

model GetKvNamespaceResponseBody = {
  capacity?: long(name='Capacity', example='1073741824'),
  capacityString?: string(name='CapacityString', example='1 GB'),
  capacityUsed?: long(name='CapacityUsed', example='10048576'),
  capacityUsedString?: string(name='CapacityUsedString', example='100 MB'),
  description?: string(name='Description', example='this is a test namespace.'),
  namespace?: string(name='Namespace', example='test_namespace'),
  namespaceId?: string(name='NamespaceId', example='643355322374688768'),
  requestId?: string(name='RequestId', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  status?: string(name='Status', example='online'),
}

model GetKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKvNamespaceResponseBody(name='body'),
}

/**
 * @summary 查询Namespace信息
 *
 * @param request GetKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKvNamespaceResponse
 */
async function getKvNamespaceWithOptions(request: GetKvNamespaceRequest, runtime: Util.RuntimeOptions): GetKvNamespaceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Namespace信息
 *
 * @param request GetKvNamespaceRequest
 * @return GetKvNamespaceResponse
 */
async function getKvNamespace(request: GetKvNamespaceRequest): GetKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKvNamespaceWithOptions(request, runtime);
}

model GetListRequest {
  id?: long(name='Id', example='40000001'),
}

model GetListResponseBody = {
  description?: string(name='Description', description='自定义响应页面描述', example='a custom list'),
  id?: long(name='Id', description='自定义响应页面ID', example='40000001'),
  items?: [ string ](name='Items'),
  kind?: string(name='Kind', example='ip'),
  name?: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListResponseBody(name='body'),
}

/**
 * @summary 获取单个自定义列表
 *
 * @param request GetListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetListResponse
 */
async function getListWithOptions(request: GetListRequest, runtime: Util.RuntimeOptions): GetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个自定义列表
 *
 * @param request GetListRequest
 * @return GetListResponse
 */
async function getList(request: GetListRequest): GetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListWithOptions(request, runtime);
}

model GetPageRequest {
  id?: long(name='Id', example='50000001'),
}

model GetPageResponseBody = {
  content?: string(name='Content', description='自定义响应页面内容BASE64编码

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='自定义响应页面内容类型

This parameter is required.', example='text/html'),
  description?: string(name='Description', description='自定义响应页面描述', example='a custom deny page'),
  id?: long(name='Id', description='自定义响应页面ID', example='50000001'),
  kind?: string(name='Kind', example='custom'),
  name?: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPageResponseBody(name='body'),
}

/**
 * @summary 获取单个自定义响应页面详情
 *
 * @param request GetPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPageResponse
 */
async function getPageWithOptions(request: GetPageRequest, runtime: Util.RuntimeOptions): GetPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个自定义响应页面详情
 *
 * @param request GetPageRequest
 * @return GetPageResponse
 */
async function getPage(request: GetPageRequest): GetPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPageWithOptions(request, runtime);
}

model GetPurgeQuotaRequest {
  siteId?: long(name='SiteId', example='123456789****'),
  type?: string(name='Type', example='file'),
}

model GetPurgeQuotaResponseBody = {
  quota?: string(name='Quota', example='100000'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  usage?: string(name='Usage', example='10'),
}

model GetPurgeQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPurgeQuotaResponseBody(name='body'),
}

/**
 * @summary 获取刷新Quota
 *
 * @param request GetPurgeQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPurgeQuotaResponse
 */
async function getPurgeQuotaWithOptions(request: GetPurgeQuotaRequest, runtime: Util.RuntimeOptions): GetPurgeQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPurgeQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取刷新Quota
 *
 * @param request GetPurgeQuotaRequest
 * @return GetPurgeQuotaResponse
 */
async function getPurgeQuota(request: GetPurgeQuotaRequest): GetPurgeQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPurgeQuotaWithOptions(request, runtime);
}

model GetRealtimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_er'),
}

model GetRealtimeDeliveryFieldResponseBody = {
  fieldContent?: map[string]FieldContentValue(name='FieldContent'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247B78'),
}

model GetRealtimeDeliveryFieldResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealtimeDeliveryFieldResponseBody(name='body'),
}

/**
 * @summary ub日志字段列表接口
 *
 * @param request GetRealtimeDeliveryFieldRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRealtimeDeliveryFieldResponse
 */
async function getRealtimeDeliveryFieldWithOptions(request: GetRealtimeDeliveryFieldRequest, runtime: Util.RuntimeOptions): GetRealtimeDeliveryFieldResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRealtimeDeliveryField',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ub日志字段列表接口
 *
 * @param request GetRealtimeDeliveryFieldRequest
 * @return GetRealtimeDeliveryFieldResponse
 */
async function getRealtimeDeliveryField(request: GetRealtimeDeliveryFieldRequest): GetRealtimeDeliveryFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeDeliveryFieldWithOptions(request, runtime);
}

model GetRecordRequest {
  recordId?: long(name='RecordId', description='This parameter is required.', example='1234567890123'),
}

model GetRecordResponseBody = {
  recordModel?: {
    authConf?: {
      accessKey?: string(name='AccessKey', example='VIxuvJSA2S03f******kp208dy5w7'),
      authType?: string(name='AuthType', example='public'),
      region?: string(name='Region', example='us-east-1'),
      secretKey?: string(name='SecretKey', example='u0Nkg5gBK*******QF5wvKMM504JUHt'),
      version?: string(name='Version', example='v2'),
    }(name='AuthConf'),
    bizName?: string(name='BizName', example='image_video'),
    comment?: string(name='Comment'),
    createTime?: string(name='CreateTime', example='2023-03-10T13:30:39Z'),
    data?: {
      algorithm?: int32(name='Algorithm', example='1'),
      certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
      fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
      flag?: int32(name='Flag', example='128'),
      keyTag?: int32(name='KeyTag', example='1'),
      matchingType?: int32(name='MatchingType', example='1'),
      port?: int32(name='Port', example='8707'),
      priority?: int32(name='Priority', example='10'),
      selector?: int32(name='Selector', example='1'),
      tag?: string(name='Tag', example='issue'),
      type?: int32(name='Type', example='RSA'),
      usage?: int32(name='Usage', example='0'),
      value?: string(name='Value', example='example.com'),
      weight?: int32(name='Weight', example='0'),
    }(name='Data', example='{"value":"1.1.1.1"}'),
    hostPolicy?: string(name='HostPolicy'),
    proxied?: boolean(name='Proxied', example='true'),
    recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
    recordId?: long(name='RecordId', example='1234567890123'),
    recordName?: string(name='RecordName', example='a.example.com'),
    recordSourceType?: string(name='RecordSourceType', example='OSS'),
    recordType?: string(name='RecordType', example='A/AAAA'),
    siteId?: long(name='SiteId', example='1234567890123'),
    siteName?: string(name='SiteName', example='example.com'),
    ttl?: int32(name='Ttl', example='20'),
    updateTime?: string(name='UpdateTime', example='2023-01-27T02:26:22Z'),
  }(name='RecordModel'),
  requestId?: string(name='RequestId', description='Id of the request', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
}

model GetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordResponseBody(name='body'),
}

/**
 * @summary 查询单个记录信息
 *
 * @param request GetRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRecordResponse
 */
async function getRecordWithOptions(request: GetRecordRequest, runtime: Util.RuntimeOptions): GetRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个记录信息
 *
 * @param request GetRecordRequest
 * @return GetRecordResponse
 */
async function getRecord(request: GetRecordRequest): GetRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecordWithOptions(request, runtime);
}

model GetScheduledPreloadJobRequest {
  id?: string(name='Id', description='This parameter is required.', example='GetScheduledPreloadJob'),
}

model GetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid'),
  createdAt?: string(name='CreatedAt'),
  domains?: string(name='Domains'),
  errorInfo?: string(name='ErrorInfo'),
  failedFileOss?: string(name='FailedFileOss'),
  fileId?: string(name='FileId'),
  id?: string(name='Id'),
  insertWay?: string(name='InsertWay'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
  taskSubmitted?: int32(name='TaskSubmitted'),
  taskType?: string(name='TaskType'),
  urlCount?: int32(name='UrlCount'),
  urlSubmitted?: int32(name='UrlSubmitted'),
}

model GetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary 查询单个定时预热任务
 *
 * @param request GetScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetScheduledPreloadJobResponse
 */
async function getScheduledPreloadJobWithOptions(request: GetScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): GetScheduledPreloadJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个定时预热任务
 *
 * @param request GetScheduledPreloadJobRequest
 * @return GetScheduledPreloadJobResponse
 */
async function getScheduledPreloadJob(request: GetScheduledPreloadJobRequest): GetScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScheduledPreloadJobWithOptions(request, runtime);
}

model GetSiteRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model GetSiteResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  siteModel?: {
    accessType?: string(name='AccessType', example='NS'),
    cnameZone?: string(name='CnameZone', example='example.cname.com'),
    coverage?: string(name='Coverage', example='domestic'),
    createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
    instanceId?: string(name='InstanceId', example='cas-merge-q6h0bv'),
    nameServerList?: string(name='NameServerList', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
    planName?: string(name='PlanName', example='plan-168777532****'),
    planSpecName?: string(name='PlanSpecName', example='normal'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26g6i6se****'),
    siteId?: long(name='SiteId', example='1234567890123'),
    siteName?: string(name='SiteName', example='example.com'),
    status?: string(name='Status', example='pending'),
    tags?: map[string]any(name='Tags', example='{"tag1":"value1"}'),
    updateTime?: string(name='UpdateTime', example='2023-12-24T02:01:11Z'),
    vanityNSList?: map[string]string(name='VanityNSList'),
    verifyCode?: string(name='VerifyCode', example='verify_d516cb3740f81f0cef77d162edd1****'),
    versionManagement?: boolean(name='VersionManagement', example='true'),
  }(name='SiteModel'),
}

model GetSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteResponseBody(name='body'),
}

/**
 * @summary 查询单个站点信息
 *
 * @param request GetSiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteResponse
 */
async function getSiteWithOptions(request: GetSiteRequest, runtime: Util.RuntimeOptions): GetSiteResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个站点信息
 *
 * @param request GetSiteRequest
 * @return GetSiteResponse
 */
async function getSite(request: GetSiteRequest): GetSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteWithOptions(request, runtime);
}

model GetSiteCurrentNSRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model GetSiteCurrentNSResponseBody = {
  NSList?: [ string ](name='NSList'),
  requestId?: string(name='RequestId', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
}

model GetSiteCurrentNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCurrentNSResponseBody(name='body'),
}

/**
 * @summary 查询当前NS列表
 *
 * @param request GetSiteCurrentNSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteCurrentNSResponse
 */
async function getSiteCurrentNSWithOptions(request: GetSiteCurrentNSRequest, runtime: Util.RuntimeOptions): GetSiteCurrentNSResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteCurrentNS',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询当前NS列表
 *
 * @param request GetSiteCurrentNSRequest
 * @return GetSiteCurrentNSResponse
 */
async function getSiteCurrentNS(request: GetSiteCurrentNSRequest): GetSiteCurrentNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteCurrentNSWithOptions(request, runtime);
}

model GetSiteCustomLogRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='11223***'),
}

model GetSiteCustomLogResponseBody = {
  configId?: long(name='ConfigId', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  isExist?: boolean(name='IsExist', example='true'),
  logCustomField?: {
    cookies?: [ string ](name='Cookies'),
    requestHeaders?: [ string ](name='RequestHeaders'),
    responseHeaders?: [ string ](name='ResponseHeaders'),
  }(name='LogCustomField'),
  requestId?: string(name='RequestId', description='Id of the request', example='6befa4aa-2a94-4f51-a245-295787192d2c'),
  siteId?: long(name='SiteId', example='167026711***'),
}

model GetSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary 获取自定义字段
 *
 * @param request GetSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteCustomLogResponse
 */
async function getSiteCustomLogWithOptions(request: GetSiteCustomLogRequest, runtime: Util.RuntimeOptions): GetSiteCustomLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取自定义字段
 *
 * @param request GetSiteCustomLogRequest
 * @return GetSiteCustomLogResponse
 */
async function getSiteCustomLog(request: GetSiteCustomLogRequest): GetSiteCustomLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteCustomLogWithOptions(request, runtime);
}

model GetSiteDeliveryTaskRequest {
  siteId?: long(name='SiteId', example='123456***'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  dataCenter?: string(name='DataCenter', example='cn'),
  deliveryType?: string(name='DeliveryType', example='sls'),
  discardRate?: float(name='DiscardRate', example='0.0'),
  fieldList?: string(name='FieldList', example='Client,UserAgent'),
  filterRules?: string(name='FilterRules', example='[]'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  sinkConfig?: any(name='SinkConfig', example='{\\\\"Region\\\\": \\\\"cn-hangzhou\\\\", \\\\"Endpoint\\\\": \\\\"https://***.oss-cn-hangzhou.aliyuncs.com\\\\", \\\\"BucketPath\\\\": \\\\"hjy-test002/online-logs\\\\"}'),
  siteId?: long(name='SiteId', example='123456****'),
  siteName?: string(name='SiteName', example='test.***.com'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='cdn-test-task'),
}

model GetSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 获取一个实时日志任务投递
 *
 * @param request GetSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteDeliveryTaskResponse
 */
async function getSiteDeliveryTaskWithOptions(request: GetSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): GetSiteDeliveryTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个实时日志任务投递
 *
 * @param request GetSiteDeliveryTaskRequest
 * @return GetSiteDeliveryTaskResponse
 */
async function getSiteDeliveryTask(request: GetSiteDeliveryTaskRequest): GetSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteDeliveryTaskWithOptions(request, runtime);
}

model GetSiteLogDeliveryQuotaRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='4C14840EF0EAAB6D97CDE0C5F6554ACE'),
  siteId?: long(name='SiteId', example='123456****'),
}

model GetSiteLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteLogDeliveryQuotaResponseBody(name='body'),
}

/**
 * @summary 获取日志投递任务quota数
 *
 * @param request GetSiteLogDeliveryQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteLogDeliveryQuotaResponse
 */
async function getSiteLogDeliveryQuotaWithOptions(request: GetSiteLogDeliveryQuotaRequest, runtime: Util.RuntimeOptions): GetSiteLogDeliveryQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteLogDeliveryQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志投递任务quota数
 *
 * @param request GetSiteLogDeliveryQuotaRequest
 * @return GetSiteLogDeliveryQuotaResponse
 */
async function getSiteLogDeliveryQuota(request: GetSiteLogDeliveryQuotaRequest): GetSiteLogDeliveryQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteLogDeliveryQuotaWithOptions(request, runtime);
}

model GetSiteWafSettingsRequest {
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model GetSiteWafSettingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  settings?: WafSiteSettings(name='Settings'),
}

model GetSiteWafSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSiteWafSettingsResponseBody(name='body'),
}

/**
 * @summary 获取站点WAF配置
 *
 * @param request GetSiteWafSettingsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSiteWafSettingsResponse
 */
async function getSiteWafSettingsWithOptions(request: GetSiteWafSettingsRequest, runtime: Util.RuntimeOptions): GetSiteWafSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSiteWafSettings',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取站点WAF配置
 *
 * @param request GetSiteWafSettingsRequest
 * @return GetSiteWafSettingsResponse
 */
async function getSiteWafSettings(request: GetSiteWafSettingsRequest): GetSiteWafSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSiteWafSettingsWithOptions(request, runtime);
}

model GetUploadTaskRequest {
  siteId?: long(name='SiteId', example='123456****'),
  uploadId?: long(name='UploadId', example='159253299357****'),
}

model GetUploadTaskResponseBody = {
  description?: string(name='Description', example='invalid url'),
  requestId?: string(name='RequestId', description='Id of the request', example='ET5BF670-09D5-4D0B-BEBY-D96A2A52****'),
  status?: string(name='Status', example='running'),
}

model GetUploadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadTaskResponseBody(name='body'),
}

/**
 * @summary 文件上传任务查询接口
 *
 * @param request GetUploadTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUploadTaskResponse
 */
async function getUploadTaskWithOptions(request: GetUploadTaskRequest, runtime: Util.RuntimeOptions): GetUploadTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUploadTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文件上传任务查询接口
 *
 * @param request GetUploadTaskRequest
 * @return GetUploadTaskResponse
 */
async function getUploadTask(request: GetUploadTaskRequest): GetUploadTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadTaskWithOptions(request, runtime);
}

model GetUserDeliveryTaskRequest {
  taskName?: string(name='TaskName', description='This parameter is required.', example='test_project'),
}

model GetUserDeliveryTaskResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_er'),
  dataCenter?: string(name='DataCenter', example='cn'),
  deliveryType?: string(name='DeliveryType', example='oss'),
  discardRate?: float(name='DiscardRate', example='0'),
  fieldList?: string(name='FieldList', example='ClientRequestID,ClientRequestHost'),
  filterRules?: string(name='FilterRules', example='[{"ClientSSLProtocol": {"equals": ["TLSv1.3"]}}]'),
  requestId?: string(name='RequestId', description='Id of the request', example='7072132a-bd3c-46a6-9e81-aba3e0e3f861'),
  sinkConfig?: any(name='SinkConfig', example='{\\\\"Project\\\\": \\\\"er-online-hjy-pro\\\\", \\\\"Logstore\\\\": \\\\"er-online-hjy-log\\\\", \\\\"Region\\\\": \\\\"cn-hangzhou\\\\", \\\\"Endpoint\\\\": \\\\"cn-hangzhou.log.aliyuncs.com\\\\", \\\\"Aliuid\\\\": \\\\"1077912128805410\\\\"}'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='testoss11'),
}

model GetUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 获取一个用户粒度任务投递
 *
 * @param request GetUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserDeliveryTaskResponse
 */
async function getUserDeliveryTaskWithOptions(request: GetUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): GetUserDeliveryTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个用户粒度任务投递
 *
 * @param request GetUserDeliveryTaskRequest
 * @return GetUserDeliveryTaskResponse
 */
async function getUserDeliveryTask(request: GetUserDeliveryTaskRequest): GetUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserDeliveryTaskWithOptions(request, runtime);
}

model GetUserLogDeliveryQuotaRequest {
  businessType?: string(name='BusinessType', description='This parameter is required.', example='dcdn_log_access_l1'),
}

model GetUserLogDeliveryQuotaResponseBody = {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  freeQuota?: long(name='FreeQuota', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model GetUserLogDeliveryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserLogDeliveryQuotaResponseBody(name='body'),
}

/**
 * @summary 获取日志投递任务用户quota数
 *
 * @param request GetUserLogDeliveryQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserLogDeliveryQuotaResponse
 */
async function getUserLogDeliveryQuotaWithOptions(request: GetUserLogDeliveryQuotaRequest, runtime: Util.RuntimeOptions): GetUserLogDeliveryQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserLogDeliveryQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志投递任务用户quota数
 *
 * @param request GetUserLogDeliveryQuotaRequest
 * @return GetUserLogDeliveryQuotaResponse
 */
async function getUserLogDeliveryQuota(request: GetUserLogDeliveryQuotaRequest): GetUserLogDeliveryQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserLogDeliveryQuotaWithOptions(request, runtime);
}

model GetWafBotAppKeyResponseBody = {
  appKey?: string(name='AppKey', description='APP key', example='example_appkey'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafBotAppKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafBotAppKeyResponseBody(name='body'),
}

/**
 * @param request GetWafBotAppKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKeyWithOptions(runtime: Util.RuntimeOptions): GetWafBotAppKeyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetWafBotAppKey',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @return GetWafBotAppKeyResponse
 */
async function getWafBotAppKey(): GetWafBotAppKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafBotAppKeyWithOptions(runtime);
}

model GetWafFilterRequest {
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
  target?: string(name='Target', example='characteristics'),
  type?: string(name='Type', example='http_custom_cc'),
}

model GetWafFilterResponseBody = {
  filter?: {
    fields?: [ 
      {
        key?: string(name='Key', example='http.request.headers'),
        label?: string(name='Label', example='Header'),
        logics?: [ 
          {
            attributes?: int32(name='Attributes', example='1'),
            kind?: string(name='Kind', example='input:single'),
            negative?: boolean(name='Negative'),
            operator?: string(name='Operator', example='Does not equal'),
            symbol?: string(name='Symbol', example='eq'),
            tip?: string(name='Tip', example='e.g. image/jpeg'),
            type?: string(name='Type', example='string'),
            validator?: {
              errMsg?: string(name='ErrMsg', example='Enter a valid expression'),
              length?: WafQuotaInteger(name='Length'),
              pattern?: string(name='Pattern', example='^example$'),
              range?: WafQuotaInteger(name='Range'),
            }(name='Validator'),
          }
        ](name='Logics'),
        selector?: {
          data?: [ 
            {
              label?: string(name='Label', example='China'),
              value?: string(name='Value', example='CN'),
            }
          ](name='Data'),
          kind?: string(name='Kind', example='data'),
        }(name='Selector'),
        sub?: boolean(name='Sub'),
        subTip?: string(name='SubTip', example='e.g. Content-Type'),
      }
    ](name='Fields'),
    phase?: string(name='Phase', example='http_bot'),
    target?: string(name='Target', example='characteristics'),
    type?: string(name='Type', example='http_custom_cc'),
  }(name='Filter'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafFilterResponseBody(name='body'),
}

/**
 * @summary 将匹配项转换为表达式
 *
 * @param request GetWafFilterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafFilterResponse
 */
async function getWafFilterWithOptions(request: GetWafFilterRequest, runtime: Util.RuntimeOptions): GetWafFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWafFilter',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将匹配项转换为表达式
 *
 * @param request GetWafFilterRequest
 * @return GetWafFilterResponse
 */
async function getWafFilter(request: GetWafFilterRequest): GetWafFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafFilterWithOptions(request, runtime);
}

model GetWafQuotaRequest {
  paths?: string(name='Paths', example='page'),
}

model GetWafQuotaResponseBody = {
  quota?: {
    list?: {
      enable?: boolean(name='Enable'),
      items?: map[string]QuotaListItemsValue(name='Items'),
      numberItemsPerList?: WafQuotaInteger(name='NumberItemsPerList'),
      numberItemsTotal?: WafQuotaInteger(name='NumberItemsTotal'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='List'),
    managedRulesGroup?: {
      enable?: boolean(name='Enable'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='ManagedRulesGroup'),
    page?: {
      contentTypes?: map[string]QuotaPageContentTypesValue(name='ContentTypes'),
      enable?: boolean(name='Enable'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='Page'),
    scenePolicy?: {
      enable?: boolean(name='Enable'),
      numberTotal?: WafQuotaInteger(name='NumberTotal'),
    }(name='ScenePolicy'),
  }(name='Quota'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model GetWafQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafQuotaResponseBody(name='body'),
}

/**
 * @summary 获取WAF配额详情
 *
 * @param request GetWafQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafQuotaResponse
 */
async function getWafQuotaWithOptions(request: GetWafQuotaRequest, runtime: Util.RuntimeOptions): GetWafQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.paths)) {
    query['Paths'] = request.paths;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWafQuota',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取WAF配额详情
 *
 * @param request GetWafQuotaRequest
 * @return GetWafQuotaResponse
 */
async function getWafQuota(request: GetWafQuotaRequest): GetWafQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafQuotaWithOptions(request, runtime);
}

model GetWafRuleRequest {
  id?: long(name='Id', description='This parameter is required.', example='20000001'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
}

model GetWafRuleResponseBody = {
  config?: WafRuleConfig(name='Config'),
  id?: long(name='Id', description='自定义响应页面ID', example='2000001'),
  name?: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example'),
  phase?: string(name='Phase', description='自定义响应页面内容类型

This parameter is required.', example='http_custom'),
  position?: long(name='Position', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  status?: string(name='Status', example='on'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafRuleResponseBody(name='body'),
}

/**
 * @summary 获取单个WAF规则详情
 *
 * @param request GetWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafRuleResponse
 */
async function getWafRuleWithOptions(request: GetWafRuleRequest, runtime: Util.RuntimeOptions): GetWafRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个WAF规则详情
 *
 * @param request GetWafRuleRequest
 * @return GetWafRuleResponse
 */
async function getWafRule(request: GetWafRuleRequest): GetWafRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafRuleWithOptions(request, runtime);
}

model GetWafRulesetRequest {
  id?: long(name='Id', example='10000001'),
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
}

model GetWafRulesetResponseBody = {
  id?: long(name='Id', description='自定义响应页面ID', example='10000001'),
  name?: string(name='Name', description='自定义响应页面名称

This parameter is required.', example='example'),
  phase?: string(name='Phase', description='自定义响应页面内容类型

This parameter is required.', example='http_bot'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [
    WafRuleConfig
  ](name='Rules'),
  shared?: WafBatchRuleShared(name='Shared'),
  status?: string(name='Status', example='on'),
  updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
}

model GetWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWafRulesetResponseBody(name='body'),
}

/**
 * @summary 获取WAF规则集详情
 *
 * @param request GetWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWafRulesetResponse
 */
async function getWafRulesetWithOptions(request: GetWafRulesetRequest, runtime: Util.RuntimeOptions): GetWafRulesetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取WAF规则集详情
 *
 * @param request GetWafRulesetRequest
 * @return GetWafRulesetResponse
 */
async function getWafRuleset(request: GetWafRulesetRequest): GetWafRulesetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWafRulesetWithOptions(request, runtime);
}

model ListCacheReserveInstancesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
  sortOrder?: string(name='SortOrder'),
  status?: string(name='Status', example='ListCacheReserveInstances', nullable=false),
}

model ListCacheReserveInstancesResponseBody = {
  instanceInfo?: [ 
    {
      cacheReserveCapacity?: string(name='CacheReserveCapacity'),
      cacheReserveRegion?: string(name='CacheReserveRegion'),
      createTime?: string(name='CreateTime'),
      duration?: int32(name='Duration'),
      expireTime?: string(name='ExpireTime'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
    }
  ](name='InstanceInfo'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model ListCacheReserveInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCacheReserveInstancesResponseBody(name='body'),
}

/**
 * @summary 查询缓存保持实例列表
 *
 * @param request ListCacheReserveInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCacheReserveInstancesResponse
 */
async function listCacheReserveInstancesWithOptions(request: ListCacheReserveInstancesRequest, runtime: Util.RuntimeOptions): ListCacheReserveInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCacheReserveInstances',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询缓存保持实例列表
 *
 * @param request ListCacheReserveInstancesRequest
 * @return ListCacheReserveInstancesResponse
 */
async function listCacheReserveInstances(request: ListCacheReserveInstancesRequest): ListCacheReserveInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCacheReserveInstancesWithOptions(request, runtime);
}

model ListClientCertificatesRequest {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model ListClientCertificatesResponseBody = {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  result?: [ 
    {
      CACertificateId?: string(name='CACertificateId', example='baba39055622c008b90285a8838ed09a'),
      commonName?: string(name='CommonName', example='www.example.com'),
      createTime?: string(name='CreateTime', example='2024-06-24 07:48:51'),
      id?: string(name='Id', example='babab9db65ee5efcca9f3d41d4b50d66'),
      issuer?: string(name='Issuer', example='GlobalSign nv-sa'),
      name?: string(name='Name', example='yourCertName'),
      notAfter?: string(name='NotAfter', example='2024-03-31 02:08:00'),
      notBefore?: string(name='NotBefore', example='2023-03-31 02:08:00'),
      pubkeyAlgorithm?: string(name='PubkeyAlgorithm', example='RSA'),
      SAN?: string(name='SAN', example='www.example.com,*.example.com'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', example='SHA256-RSA'),
      status?: string(name='Status', example='active'),
      type?: string(name='Type', example='dcdn'),
      updateTime?: string(name='UpdateTime', example='2024-07-20 06:18:42'),
    }
  ](name='Result'),
  siteId?: long(name='SiteId', example='1234567890123'),
  siteName?: string(name='SiteName', example='example.com'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListClientCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCertificatesResponseBody(name='body'),
}

/**
 * @summary 查询站点下客户端证书列表
 *
 * @param request ListClientCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClientCertificatesResponse
 */
async function listClientCertificatesWithOptions(request: ListClientCertificatesRequest, runtime: Util.RuntimeOptions): ListClientCertificatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClientCertificates',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点下客户端证书列表
 *
 * @param request ListClientCertificatesRequest
 * @return ListClientCertificatesResponse
 */
async function listClientCertificates(request: ListClientCertificatesRequest): ListClientCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientCertificatesWithOptions(request, runtime);
}

model ListEdgeContainerAppRecordsRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='app-88068867578379****'),
  orderKey?: string(name='OrderKey', example='CreateTime'),
  orderType?: string(name='OrderType', example='DESC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchKey?: string(name='SearchKey', example='ver-1006157458290860032'),
}

model ListEdgeContainerAppRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  records?: [ 
    {
      appId?: string(name='AppId', example='app-88068867578379****'),
      cname?: string(name='Cname', example='kdxceo****.yun****.com'),
      configId?: long(name='ConfigId', example='27522948436****'),
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      recordId?: long(name='RecordId', example='266****'),
      recordName?: string(name='RecordName', example='a.example.com'),
      schemdId?: int32(name='SchemdId', example='123456'),
      siteId?: long(name='SiteId', example='5407498413****'),
      updateTime?: string(name='UpdateTime', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListEdgeContainerAppRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppRecordsResponseBody(name='body'),
}

/**
 * @summary 获取一个边缘容器应用的全部域名记录
 *
 * @param request ListEdgeContainerAppRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppRecordsResponse
 */
async function listEdgeContainerAppRecordsWithOptions(request: ListEdgeContainerAppRecordsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerAppRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerAppRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个边缘容器应用的全部域名记录
 *
 * @param request ListEdgeContainerAppRecordsRequest
 * @return ListEdgeContainerAppRecordsResponse
 */
async function listEdgeContainerAppRecords(request: ListEdgeContainerAppRecordsRequest): ListEdgeContainerAppRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerAppRecordsWithOptions(request, runtime);
}

model ListEdgeContainerAppsRequest {
  orderKey?: string(name='OrderKey', example='CreateTime'),
  orderType?: string(name='OrderType', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  searchKey?: string(name='SearchKey', example='ver-1005682639679266816'),
  searchType?: string(name='SearchType', example='Appid'),
}

model ListEdgeContainerAppsResponseBody = {
  apps?: [ 
    {
      appId?: string(name='AppId', example='app-88068867578379****'),
      createTime?: string(name='CreateTime', example='2022-12-01T16:16:27.418298794+08:00'),
      domainName?: string(name='DomainName', example='test.com'),
      gatewayType?: string(name='GatewayType', example='l7'),
      healthCheck?: {
        failTimes?: int32(name='FailTimes', example='5'),
        host?: string(name='Host', example='test.com'),
        httpCode?: string(name='HttpCode', example='http_2XX'),
        interval?: int32(name='Interval', example='5'),
        method?: string(name='Method', example='GET'),
        port?: int32(name='Port', example='8080'),
        succTimes?: int32(name='SuccTimes', example='1'),
        timeout?: int32(name='Timeout', example='60'),
        type?: string(name='Type', example='l7'),
        uri?: string(name='Uri', example='/health_check'),
      }(name='HealthCheck'),
      name?: string(name='Name', example='app-test'),
      percentage?: int32(name='Percentage'),
      quicCid?: string(name='QuicCid', example='false'),
      remarks?: string(name='Remarks', example='test app'),
      servicePort?: int32(name='ServicePort', example='80'),
      status?: string(name='Status', example='created'),
      targetPort?: int32(name='TargetPort', example='80'),
      updateTime?: string(name='UpdateTime', example='2023-11-15T12:11:02Z'),
      versionCount?: int32(name='VersionCount', example='10'),
    }
  ](name='Apps'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2430E05E-1340-5773-B5E1-B743929F46F2'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListEdgeContainerAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerAppsResponseBody(name='body'),
}

/**
 * @summary 获取用户全部边缘容器应用
 *
 * @param request ListEdgeContainerAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerAppsResponse
 */
async function listEdgeContainerAppsWithOptions(request: ListEdgeContainerAppsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderKey)) {
    query['OrderKey'] = request.orderKey;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.searchType)) {
    query['SearchType'] = request.searchType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerApps',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户全部边缘容器应用
 *
 * @param request ListEdgeContainerAppsRequest
 * @return ListEdgeContainerAppsResponse
 */
async function listEdgeContainerApps(request: ListEdgeContainerAppsRequest): ListEdgeContainerAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerAppsWithOptions(request, runtime);
}

model ListEdgeContainerRecordsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  recordMatchType?: string(name='RecordMatchType', example='fuzzy'),
  recordName?: string(name='RecordName', example='a.example.com'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model ListEdgeContainerRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', example='a.example.com'),
      siteId?: long(name='SiteId', example='1234567890123'),
      siteName?: string(name='SiteName', example='example.com'),
      updateTime?: string(name='UpdateTime', example='2021-12-22T08:32:02Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', example='50'),
}

model ListEdgeContainerRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeContainerRecordsResponseBody(name='body'),
}

/**
 * @summary 查询站点的边缘容器记录
 *
 * @param request ListEdgeContainerRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeContainerRecordsResponse
 */
async function listEdgeContainerRecordsWithOptions(request: ListEdgeContainerRecordsRequest, runtime: Util.RuntimeOptions): ListEdgeContainerRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeContainerRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点的边缘容器记录
 *
 * @param request ListEdgeContainerRecordsRequest
 * @return ListEdgeContainerRecordsResponse
 */
async function listEdgeContainerRecords(request: ListEdgeContainerRecordsRequest): ListEdgeContainerRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeContainerRecordsWithOptions(request, runtime);
}

model ListEdgeRoutinePlansResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  planInfo?: [ 
    {
      billingMode?: string(name='BillingMode', example='POSTPAY'),
      erRoutineCodeVersionQuota?: string(name='ErRoutineCodeVersionQuota', example='20'),
      erRoutineQuota?: string(name='ErRoutineQuota', example='100'),
      erRoutineRouteSiteCountQuota?: string(name='ErRoutineRouteSiteCountQuota', example='100'),
      paymentMethod?: string(name='PaymentMethod', example='er_free'),
      planName?: string(name='PlanName', example='test_plan'),
    }
  ](name='PlanInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', example='12'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListEdgeRoutinePlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutinePlansResponseBody(name='body'),
}

/**
 * @summary 查询用户可购买的边缘函数的套餐
 *
 * @param request ListEdgeRoutinePlansRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlansWithOptions(runtime: Util.RuntimeOptions): ListEdgeRoutinePlansResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListEdgeRoutinePlans',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户可购买的边缘函数的套餐
 *
 * @return ListEdgeRoutinePlansResponse
 */
async function listEdgeRoutinePlans(): ListEdgeRoutinePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeRoutinePlansWithOptions(runtime);
}

model ListEdgeRoutineRecordsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  recordMatchType?: string(name='RecordMatchType', example='fuzzy'),
  recordName?: string(name='RecordName', example='a.example.com'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model ListEdgeRoutineRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  records?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
      recordName?: string(name='RecordName', example='a.example.com'),
      siteId?: long(name='SiteId', example='5407498413****'),
      siteName?: string(name='SiteName', example='example.com'),
      updateTime?: string(name='UpdateTime', example='2023-12-22T08:32:02Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  totalCount?: int32(name='TotalCount', example='121'),
}

model ListEdgeRoutineRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEdgeRoutineRecordsResponseBody(name='body'),
}

/**
 * @summary 查询站点的边缘路由记录
 *
 * @param request ListEdgeRoutineRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEdgeRoutineRecordsResponse
 */
async function listEdgeRoutineRecordsWithOptions(request: ListEdgeRoutineRecordsRequest, runtime: Util.RuntimeOptions): ListEdgeRoutineRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEdgeRoutineRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点的边缘路由记录
 *
 * @param request ListEdgeRoutineRecordsRequest
 * @return ListEdgeRoutineRecordsResponse
 */
async function listEdgeRoutineRecords(request: ListEdgeRoutineRecordsRequest): ListEdgeRoutineRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeRoutineRecordsWithOptions(request, runtime);
}

model ListInstanceQuotasRequest {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  quotaNames?: string(name='QuotaNames', description='This parameter is required.', example='preload, free_cert'),
  siteId?: long(name='SiteId', example='2882900****', nullable=false),
}

model ListInstanceQuotasResponseBody = {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', example='customHttpCert'),
      quotaValue?: string(name='QuotaValue', example='10'),
      quotaValueType?: string(name='QuotaValueType', example='bool'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247B78'),
  status?: string(name='Status', example='online'),
}

model ListInstanceQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasResponseBody(name='body'),
}

/**
 * @summary 查询实例或者站点的quota值
 *
 * @param request ListInstanceQuotasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceQuotasResponse
 */
async function listInstanceQuotasWithOptions(request: ListInstanceQuotasRequest, runtime: Util.RuntimeOptions): ListInstanceQuotasResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceQuotas',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例或者站点的quota值
 *
 * @param request ListInstanceQuotasRequest
 * @return ListInstanceQuotasResponse
 */
async function listInstanceQuotas(request: ListInstanceQuotasRequest): ListInstanceQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceQuotasWithOptions(request, runtime);
}

model ListInstanceQuotasWithUsageRequest {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  quotaNames?: string(name='QuotaNames', description='This parameter is required.', example='customHttpCert'),
  siteId?: long(name='SiteId', example='1232223****', nullable=false),
}

model ListInstanceQuotasWithUsageResponseBody = {
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  quotas?: [ 
    {
      quotaName?: string(name='QuotaName', example='redirect_rules|rule_quota'),
      quotaValue?: string(name='QuotaValue', example='10'),
      siteUsage?: [ 
        {
          siteId?: long(name='SiteId', example='34818329392****'),
          siteName?: string(name='SiteName', example='test.top'),
          siteUsage?: string(name='SiteUsage', example='1'),
        }
      ](name='SiteUsage'),
      usage?: string(name='Usage', example='3'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId', description='Id of the request', example='85H66C7B-671A-4297-9187-2C4477247A74'),
  status?: string(name='Status', example='online'),
}

model ListInstanceQuotasWithUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceQuotasWithUsageResponseBody(name='body'),
}

/**
 * @summary 查询功能quota和用量
 *
 * @param request ListInstanceQuotasWithUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceQuotasWithUsageResponse
 */
async function listInstanceQuotasWithUsageWithOptions(request: ListInstanceQuotasWithUsageRequest, runtime: Util.RuntimeOptions): ListInstanceQuotasWithUsageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceQuotasWithUsage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询功能quota和用量
 *
 * @param request ListInstanceQuotasWithUsageRequest
 * @return ListInstanceQuotasWithUsageResponse
 */
async function listInstanceQuotasWithUsage(request: ListInstanceQuotasWithUsageRequest): ListInstanceQuotasWithUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceQuotasWithUsageWithOptions(request, runtime);
}

model ListKvsRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='50'),
  prefix?: string(name='Prefix', example='prefix-'),
}

model ListKvsResponseBody = {
  keys?: [ 
    {
      name?: string(name='Name', example='Key1'),
      updateTime?: string(name='UpdateTime', example='2021-12-13T07:46:03Z'),
    }
  ](name='Keys'),
  pageNumber?: int32(name='PageNumber', example='100'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  totalCount?: int32(name='TotalCount', example='1024'),
}

model ListKvsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListKvsResponseBody(name='body'),
}

/**
 * @summary 遍历Namespace的Key值
 *
 * @param request ListKvsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListKvsResponse
 */
async function listKvsWithOptions(request: ListKvsRequest, runtime: Util.RuntimeOptions): ListKvsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListKvs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 遍历Namespace的Key值
 *
 * @param request ListKvsRequest
 * @return ListKvsResponse
 */
async function listKvs(request: ListKvsRequest): ListKvsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listKvsWithOptions(request, runtime);
}

model ListListsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  queryArgs?: {
    desc?: boolean(name='Desc'),
    descriptionLike?: string(name='DescriptionLike', example='a custom list'),
    idLike?: string(name='IdLike', example='40000001'),
    itemLike?: string(name='ItemLike', example='10.1.1.1'),
    kind?: string(name='Kind', example='ip'),
    nameItemLike?: string(name='NameItemLike', example='10.1.1.1'),
    nameLike?: string(name='NameLike', example='example'),
    orderBy?: string(name='OrderBy', example='id'),
  }(name='QueryArgs', example='ListLists'),
}

model ListListsShrinkRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  queryArgsShrink?: string(name='QueryArgs', example='ListLists'),
}

model ListListsResponseBody = {
  lists?: [ 
    {
      description?: string(name='Description', description='自定义响应页面描述', example='a custom list'),
      id?: long(name='Id', example='40000001'),
      kind?: string(name='Kind', example='ip'),
      length?: long(name='Length', example='100'),
      name?: string(name='Name', example='example'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Lists'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', example='5'),
  usage?: long(name='Usage', example='10'),
}

model ListListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListsResponseBody(name='body'),
}

/**
 * @summary 列举自定义列表
 *
 * @param tmpReq ListListsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListListsResponse
 */
async function listListsWithOptions(tmpReq: ListListsRequest, runtime: Util.RuntimeOptions): ListListsResponse {
  Util.validateModel(tmpReq);
  var request = new ListListsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLists',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举自定义列表
 *
 * @param request ListListsRequest
 * @return ListListsResponse
 */
async function listLists(request: ListListsRequest): ListListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListsWithOptions(request, runtime);
}

model ListLoadBalancerRegionsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1024'),
}

model ListLoadBalancerRegionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1024'),
  regions?: [ 
    {
      regionCnName?: string(name='RegionCnName'),
      regionCode?: string(name='RegionCode', example='SEAS'),
      regionEnName?: string(name='RegionEnName', example='South East Asia'),
      subRegions?: [ 
        {
          subRegionCnName?: string(name='SubRegionCnName'),
          subRegionCode?: string(name='SubRegionCode', example='ID'),
          subRegionEnName?: string(name='SubRegionEnName', example='Indonesia'),
        }
      ](name='SubRegions'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request', example='81A5E222-24BF-17EF-9E80-A68D9B8F363D'),
  totalCount?: int32(name='TotalCount', example='12'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListLoadBalancerRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancerRegionsResponseBody(name='body'),
}

/**
 * @summary 查询负载均衡区域列表
 *
 * @param request ListLoadBalancerRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLoadBalancerRegionsResponse
 */
async function listLoadBalancerRegionsWithOptions(request: ListLoadBalancerRegionsRequest, runtime: Util.RuntimeOptions): ListLoadBalancerRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLoadBalancerRegions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询负载均衡区域列表
 *
 * @param request ListLoadBalancerRegionsRequest
 * @return ListLoadBalancerRegionsResponse
 */
async function listLoadBalancerRegions(request: ListLoadBalancerRegionsRequest): ListLoadBalancerRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLoadBalancerRegionsWithOptions(request, runtime);
}

model ListManagedRulesGroupsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model ListManagedRulesGroupsResponseBody = {
  managedRulesGroups?: [ 
    {
      name?: string(name='Name', example='example'),
      ruleCount?: long(name='RuleCount', example='1000'),
    }
  ](name='ManagedRulesGroups'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListManagedRulesGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManagedRulesGroupsResponseBody(name='body'),
}

/**
 * @summary 列举自定义托管规则组
 *
 * @param request ListManagedRulesGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListManagedRulesGroupsResponse
 */
async function listManagedRulesGroupsWithOptions(request: ListManagedRulesGroupsRequest, runtime: Util.RuntimeOptions): ListManagedRulesGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListManagedRulesGroups',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举自定义托管规则组
 *
 * @param request ListManagedRulesGroupsRequest
 * @return ListManagedRulesGroupsResponse
 */
async function listManagedRulesGroups(request: ListManagedRulesGroupsRequest): ListManagedRulesGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManagedRulesGroupsWithOptions(request, runtime);
}

model ListPagesRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model ListPagesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  pages?: [ 
    {
      content?: string(name='Content', description='自定义响应页面内容BASE64编码

This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
      contentType?: string(name='ContentType', description='自定义响应页面内容类型

This parameter is required.', example='text/html'),
      description?: string(name='Description', description='自定义响应页面描述', example='a custom deny page'),
      id?: long(name='Id', example='50000001'),
      kind?: string(name='Kind', example='custom'),
      name?: string(name='Name', example='example'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Pages'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  totalCount?: int32(name='TotalCount', example='10'),
  usage?: long(name='Usage', example='10'),
}

model ListPagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPagesResponseBody(name='body'),
}

/**
 * @summary 列举自定义响应页面
 *
 * @param request ListPagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPagesResponse
 */
async function listPagesWithOptions(request: ListPagesRequest, runtime: Util.RuntimeOptions): ListPagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPages',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举自定义响应页面
 *
 * @param request ListPagesRequest
 * @return ListPagesResponse
 */
async function listPages(request: ListPagesRequest): ListPagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPagesWithOptions(request, runtime);
}

model ListRecordsRequest {
  bizName?: string(name='BizName', example='web'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  proxied?: string(name='Proxied', example='true'),
  recordMatchType?: string(name='RecordMatchType', example='fuzzy'),
  recordName?: string(name='RecordName', example='www.example.com'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  sourceType?: string(name='SourceType', example='OSS'),
  type?: string(name='Type', example='CNAME'),
}

model ListRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  records?: [ 
    {
      authConf?: {
        accessKey?: string(name='AccessKey', example='u0Nkg5gBK***QF5wvKMM504JUHt'),
        authType?: string(name='AuthType', example='private'),
        region?: string(name='Region', example='us-east-1'),
        secretKey?: string(name='SecretKey', example='VIxuvJSA2S03f***kp208dy5w7'),
        version?: string(name='Version', example='v4'),
      }(name='AuthConf'),
      bizName?: string(name='BizName', example='web'),
      comment?: string(name='Comment', example='this is a remark.'),
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      data?: {
        algorithm?: int32(name='Algorithm', example='0'),
        certificate?: string(name='Certificate', example='dGVzdGFkYWxrcw=='),
        fingerprint?: string(name='Fingerprint', example='abcdef1234567890'),
        flag?: int32(name='Flag', example='128'),
        keyTag?: int32(name='KeyTag', example='0'),
        matchingType?: int32(name='MatchingType', example='0'),
        port?: int32(name='Port', example='80'),
        priority?: int32(name='Priority', example='0'),
        selector?: int32(name='Selector', example='0'),
        tag?: string(name='Tag', example='issue'),
        type?: int32(name='Type', example='0'),
        usage?: int32(name='Usage', example='0'),
        value?: string(name='Value', example='CNAME'),
        weight?: int32(name='Weight', example='0'),
      }(name='Data', example='{"value":"1.1.1.1"}'),
      hostPolicy?: string(name='HostPolicy'),
      proxied?: boolean(name='Proxied', example='true'),
      recordCname?: string(name='RecordCname', example='a.example.com.cnamezone.com'),
      recordId?: long(name='RecordId', example='1234567890123'),
      recordName?: string(name='RecordName', example='a.example.com'),
      recordSourceType?: string(name='RecordSourceType', example='OSS'),
      recordType?: string(name='RecordType', example='A/AAAA'),
      siteId?: long(name='SiteId', example='1234567890123'),
      siteName?: string(name='SiteName', example='example.com'),
      ttl?: long(name='Ttl', example='30'),
      updateTime?: string(name='UpdateTime', example='2023-06-07T10:02:59Z'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecordsResponseBody(name='body'),
}

/**
 * @summary 查询站点下的记录列表
 *
 * @param request ListRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRecordsResponse
 */
async function listRecordsWithOptions(request: ListRecordsRequest, runtime: Util.RuntimeOptions): ListRecordsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRecords',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点下的记录列表
 *
 * @param request ListRecordsRequest
 * @return ListRecordsResponse
 */
async function listRecords(request: ListRecordsRequest): ListRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecordsWithOptions(request, runtime);
}

model ListScheduledPreloadExecutionsRequest {
  id?: string(name='Id', description='This parameter is required.', example='ListScheduledPreloadExecutions'),
}

model ListScheduledPreloadExecutionsResponseBody = {
  executions?: [ 
    {
      aliUid?: string(name='AliUid'),
      endTime?: string(name='EndTime'),
      id?: string(name='Id'),
      interval?: int32(name='Interval'),
      jobId?: string(name='JobId'),
      sliceLen?: int32(name='SliceLen'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Executions'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListScheduledPreloadExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadExecutionsResponseBody(name='body'),
}

/**
 * @summary 列出指定任务下的执行计划
 *
 * @param request ListScheduledPreloadExecutionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListScheduledPreloadExecutionsResponse
 */
async function listScheduledPreloadExecutionsWithOptions(request: ListScheduledPreloadExecutionsRequest, runtime: Util.RuntimeOptions): ListScheduledPreloadExecutionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScheduledPreloadExecutions',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出指定任务下的执行计划
 *
 * @param request ListScheduledPreloadExecutionsRequest
 * @return ListScheduledPreloadExecutionsResponse
 */
async function listScheduledPreloadExecutions(request: ListScheduledPreloadExecutionsRequest): ListScheduledPreloadExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduledPreloadExecutionsWithOptions(request, runtime);
}

model ListScheduledPreloadJobsRequest {
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='ListScheduledPreloadJobs'),
  startTime?: long(name='StartTime'),
}

model ListScheduledPreloadJobsResponseBody = {
  jobs?: [ 
    {
      aliUid?: string(name='AliUid'),
      createdAt?: string(name='CreatedAt'),
      domains?: string(name='Domains'),
      errorInfo?: string(name='ErrorInfo'),
      failedFileOss?: string(name='FailedFileOss'),
      fileId?: string(name='FileId'),
      id?: string(name='Id'),
      insertWay?: string(name='InsertWay'),
      name?: string(name='Name'),
      siteId?: long(name='SiteId'),
      taskSubmitted?: int32(name='TaskSubmitted'),
      taskType?: string(name='TaskType'),
      urlCount?: int32(name='UrlCount'),
      urlSubmitted?: int32(name='UrlSubmitted'),
    }
  ](name='Jobs'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: string(name='TotalCount'),
}

model ListScheduledPreloadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledPreloadJobsResponseBody(name='body'),
}

/**
 * @summary 列出定时预热任务列表
 *
 * @param request ListScheduledPreloadJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListScheduledPreloadJobsResponse
 */
async function listScheduledPreloadJobsWithOptions(request: ListScheduledPreloadJobsRequest, runtime: Util.RuntimeOptions): ListScheduledPreloadJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScheduledPreloadJobs',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出定时预热任务列表
 *
 * @param request ListScheduledPreloadJobsRequest
 * @return ListScheduledPreloadJobsResponse
 */
async function listScheduledPreloadJobs(request: ListScheduledPreloadJobsRequest): ListScheduledPreloadJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduledPreloadJobsWithOptions(request, runtime);
}

model ListSiteDeliveryTasksRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456***'),
}

model ListSiteDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', example='0'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
      dataCenter?: string(name='DataCenter', example='cn'),
      deliveryType?: string(name='DeliveryType', example='sls'),
      status?: string(name='Status', example='online'),
      taskName?: string(name='TaskName', example='cdn-test-task'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListSiteDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSiteDeliveryTasksResponseBody(name='body'),
}

/**
 * @summary 列出全部任务投递
 *
 * @param request ListSiteDeliveryTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSiteDeliveryTasksResponse
 */
async function listSiteDeliveryTasksWithOptions(request: ListSiteDeliveryTasksRequest, runtime: Util.RuntimeOptions): ListSiteDeliveryTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSiteDeliveryTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出全部任务投递
 *
 * @param request ListSiteDeliveryTasksRequest
 * @return ListSiteDeliveryTasksResponse
 */
async function listSiteDeliveryTasks(request: ListSiteDeliveryTasksRequest): ListSiteDeliveryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSiteDeliveryTasksWithOptions(request, runtime);
}

model ListSitesRequest {
  accessType?: string(name='AccessType'),
  coverage?: string(name='Coverage'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', example='false'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  planSubscribeType?: string(name='PlanSubscribeType'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzd3styujvyei'),
  siteName?: string(name='SiteName', example='example.com'),
  siteSearchType?: string(name='SiteSearchType', example='fuzzy'),
  status?: string(name='Status', example='pending'),
  tagFilter?: [ 
    {
      key?: string(name='Key', example='tag1'),
      value?: string(name='Value', example='aaa'),
    }
  ](name='TagFilter'),
}

model ListSitesShrinkRequest {
  accessType?: string(name='AccessType'),
  coverage?: string(name='Coverage'),
  onlyEnterprise?: boolean(name='OnlyEnterprise', example='false'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  planSubscribeType?: string(name='PlanSubscribeType'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzd3styujvyei'),
  siteName?: string(name='SiteName', example='example.com'),
  siteSearchType?: string(name='SiteSearchType', example='fuzzy'),
  status?: string(name='Status', example='pending'),
  tagFilterShrink?: string(name='TagFilter'),
}

model ListSitesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  sites?: [ 
    {
      accessType?: string(name='AccessType', example='NS'),
      cnameZone?: string(name='CnameZone', example='example.cname.com'),
      coverage?: string(name='Coverage', example='domestic'),
      createTime?: string(name='CreateTime', example='2023-12-24T02:01:11Z'),
      instanceId?: string(name='InstanceId', example='onBvtlmIyeXLbiDw81F9'),
      nameServerList?: string(name='NameServerList', example='male1-1.ialicdn.com,female1-1.ialicdn.com'),
      planName?: string(name='PlanName', example='plan-168656498****'),
      planSpecName?: string(name='PlanSpecName', example='normal'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26g6i6se6pna'),
      siteId?: long(name='SiteId', example='123456789****'),
      siteName?: string(name='SiteName', example='example.com'),
      status?: string(name='Status', example='pending'),
      tags?: map[string]any(name='Tags', example='{"tag1":"value1"}'),
      updateTime?: string(name='UpdateTime', example='2023-12-24T02:01:11Z'),
      verifyCode?: string(name='VerifyCode', example='verify_d516cb3740f81f0cef77d162edd1****'),
    }
  ](name='Sites'),
  totalCount?: int32(name='TotalCount', example='40'),
}

model ListSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSitesResponseBody(name='body'),
}

/**
 * @summary 查询站点列表
 *
 * @param tmpReq ListSitesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSitesResponse
 */
async function listSitesWithOptions(tmpReq: ListSitesRequest, runtime: Util.RuntimeOptions): ListSitesResponse {
  Util.validateModel(tmpReq);
  var request = new ListSitesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tagFilter)) {
    request.tagFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagFilter, 'TagFilter', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSites',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询站点列表
 *
 * @param request ListSitesRequest
 * @return ListSitesResponse
 */
async function listSites(request: ListSitesRequest): ListSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSitesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxItem?: int32(name='MaxItem', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAZjtYxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='要创建并绑定标签的资源所在的地域ID。

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键', example='env'),
      value?: string(name='Value', description='标签值', example='value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAYwsxxxxxxx'),
  requestId?: string(name='RequestId', example='CB1A380B-09F0-41BB-280B-72F8FD6DA2FE'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='example.com'),
      resourceType?: string(name='ResourceType', example='site'),
      tagKey?: string(name='TagKey', example='env'),
      tagValue?: string(name='TagValue', example='value'),
    }
  ](name='TagResources'),
  totalCount?: int32(name='TotalCount', example='16'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @summary 查询云资源已经绑定的标签列表
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxItem)) {
    query['MaxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询云资源已经绑定的标签列表
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUploadTasksRequest {
  endTime?: string(name='EndTime', example='2019-12-06T12:00:00Z'),
  siteId?: long(name='SiteId', example='123456****'),
  startTime?: string(name='StartTime', example='2018-11-29T00:00:00Z'),
  type?: string(name='Type', example='file'),
}

model ListUploadTasksResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-A198-72F8FD6D****'),
  tasks?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-07-26T01:56:15Z'),
      description?: string(name='Description', example='invalid url'),
      errorCode?: string(name='ErrorCode', example='InvalidUrl,InvalidDomain'),
      status?: string(name='Status', example='Complete'),
      type?: string(name='Type', example='file'),
      uploadId?: string(name='UploadId', example='159253299357****'),
      uploadTaskName?: string(name='UploadTaskName', example='purge_file_task'),
    }
  ](name='Tasks'),
}

model ListUploadTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUploadTasksResponseBody(name='body'),
}

/**
 * @summary 获取文件上传任务
 *
 * @param request ListUploadTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUploadTasksResponse
 */
async function listUploadTasksWithOptions(request: ListUploadTasksRequest, runtime: Util.RuntimeOptions): ListUploadTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUploadTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文件上传任务
 *
 * @param request ListUploadTasksRequest
 * @return ListUploadTasksResponse
 */
async function listUploadTasks(request: ListUploadTasksRequest): ListUploadTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUploadTasksWithOptions(request, runtime);
}

model ListUserDeliveryTasksRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_access_l1'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
}

model ListUserDeliveryTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='1f94c47f-3a1a-4f69-8d6c-bfeee1b49aab'),
  tasks?: [ 
    {
      businessType?: string(name='BusinessType', example='dcdn_log_er'),
      dataCenter?: string(name='DataCenter', example='cn'),
      deliveryType?: string(name='DeliveryType', example='oss'),
      status?: string(name='Status', example='online'),
      taskName?: string(name='TaskName', example='testoss11'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='68'),
}

model ListUserDeliveryTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDeliveryTasksResponseBody(name='body'),
}

/**
 * @summary 列出用户全部任务投递
 *
 * @param request ListUserDeliveryTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserDeliveryTasksResponse
 */
async function listUserDeliveryTasksWithOptions(request: ListUserDeliveryTasksRequest, runtime: Util.RuntimeOptions): ListUserDeliveryTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserDeliveryTasks',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出用户全部任务投递
 *
 * @param request ListUserDeliveryTasksRequest
 * @return ListUserDeliveryTasksResponse
 */
async function listUserDeliveryTasks(request: ListUserDeliveryTasksRequest): ListUserDeliveryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserDeliveryTasksWithOptions(request, runtime);
}

model ListUserRatePlanInstancesRequest {
  checkRemainingSiteQuota?: string(name='CheckRemainingSiteQuota', example='true'),
  instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='500'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  sortOrder?: string(name='SortOrder', example='asc'),
  status?: string(name='Status', example='online', nullable=false),
}

model ListUserRatePlanInstancesResponseBody = {
  instanceInfo?: [ 
    {
      billingMode?: string(name='BillingMode', example='PREPAY'),
      coverages?: string(name='Coverages', example='domestic,overseas'),
      createTime?: string(name='CreateTime', example='YYYY-MM-DDThh:mm:ssZ'),
      duration?: int32(name='Duration', example='3'),
      expireTime?: string(name='ExpireTime', example='YYYY-MM-DDThh:mm:ssZ'),
      instanceId?: string(name='InstanceId', example='sp-xcdn-96wblslz****'),
      planName?: string(name='PlanName', example='basic'),
      planType?: string(name='PlanType', example='normal'),
      siteQuota?: string(name='SiteQuota', example='1'),
      sites?: [ 
        {
          siteId?: long(name='SiteId', example='123456****'),
          siteName?: string(name='SiteName', example='example.com'),
          siteStatus?: string(name='SiteStatus', example='pending'),
        }
      ](name='Sites'),
      status?: string(name='Status', example='online'),
    }
  ](name='InstanceInfo'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-3C82-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', example='68'),
  totalPage?: int32(name='TotalPage', example='1'),
}

model ListUserRatePlanInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRatePlanInstancesResponseBody(name='body'),
}

/**
 * @summary 查询该用户下可用的已购套餐实例
 *
 * @param request ListUserRatePlanInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserRatePlanInstancesResponse
 */
async function listUserRatePlanInstancesWithOptions(request: ListUserRatePlanInstancesRequest, runtime: Util.RuntimeOptions): ListUserRatePlanInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserRatePlanInstances',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询该用户下可用的已购套餐实例
 *
 * @param request ListUserRatePlanInstancesRequest
 * @return ListUserRatePlanInstancesResponse
 */
async function listUserRatePlanInstances(request: ListUserRatePlanInstancesRequest): ListUserRatePlanInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserRatePlanInstancesWithOptions(request, runtime);
}

model ListWafManagedRulesRequest {
  attackType?: int32(name='AttackType', description='This parameter is required.', example='11'),
  id?: long(name='Id', description='This parameter is required.', example='10000001'),
  language?: string(name='Language', example='zh'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  queryArgs?: {
    action?: string(name='Action', example='deny'),
    idNameLike?: string(name='IdNameLike', example='example'),
    protectionLevel?: int32(name='ProtectionLevel', example='1'),
    protectionLevels?: [ int32 ](name='ProtectionLevels'),
    status?: string(name='Status', example='on'),
  }(name='QueryArgs'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
}

model ListWafManagedRulesShrinkRequest {
  attackType?: int32(name='AttackType', description='This parameter is required.', example='11'),
  id?: long(name='Id', description='This parameter is required.', example='10000001'),
  language?: string(name='Language', example='zh'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  queryArgsShrink?: string(name='QueryArgs'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
}

model ListWafManagedRulesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', example='deny'),
      id?: long(name='Id', example='100001'),
      name?: string(name='Name'),
      protectionLevel?: int32(name='ProtectionLevel', example='1'),
      status?: string(name='Status', example='on'),
    }
  ](name='Rules'),
  totalCount?: long(name='TotalCount', example='20'),
}

model ListWafManagedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafManagedRulesResponseBody(name='body'),
}

/**
 * @summary 列举WAF托管规则
 *
 * @param tmpReq ListWafManagedRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafManagedRulesResponse
 */
async function listWafManagedRulesWithOptions(tmpReq: ListWafManagedRulesRequest, runtime: Util.RuntimeOptions): ListWafManagedRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWafManagedRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafManagedRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举WAF托管规则
 *
 * @param request ListWafManagedRulesRequest
 * @return ListWafManagedRulesResponse
 */
async function listWafManagedRules(request: ListWafManagedRulesRequest): ListWafManagedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafManagedRulesWithOptions(request, runtime);
}

model ListWafPhasesRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion'),
}

model ListWafPhasesResponseBody = {
  phases?: [ 
    {
      phase?: string(name='Phase'),
      rulesets?: [ 
        {
          id?: long(name='Id'),
          name?: string(name='Name'),
          rules?: [
            WafRuleConfig
          ](name='Rules'),
          shared?: WafBatchRuleShared(name='Shared'),
        }
      ](name='Rulesets'),
    }
  ](name='Phases'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model ListWafPhasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafPhasesResponseBody(name='body'),
}

/**
 * @summary 列举WAF阶段
 *
 * @param request ListWafPhasesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafPhasesResponse
 */
async function listWafPhasesWithOptions(request: ListWafPhasesRequest, runtime: Util.RuntimeOptions): ListWafPhasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafPhases',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举WAF阶段
 *
 * @param request ListWafPhasesRequest
 * @return ListWafPhasesResponse
 */
async function listWafPhases(request: ListWafPhasesRequest): ListWafPhasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafPhasesWithOptions(request, runtime);
}

model ListWafRulesRequest {
  pageNumber?: int32(name='PageNumber', example='http_custom'),
  pageSize?: int32(name='PageSize', example='1'),
  phase?: string(name='Phase', example='0'),
  queryArgs?: {
    desc?: boolean(name='Desc'),
    id?: long(name='Id', example='20000001'),
    idNameLike?: string(name='IdNameLike', example='example'),
    nameLike?: string(name='NameLike', example='example'),
    orderBy?: string(name='OrderBy', example='position'),
    rulesetId?: long(name='RulesetId', example='10000001'),
    status?: string(name='Status', example='on'),
  }(name='QueryArgs', example='http_custom'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model ListWafRulesShrinkRequest {
  pageNumber?: int32(name='PageNumber', example='http_custom'),
  pageSize?: int32(name='PageSize', example='1'),
  phase?: string(name='Phase', example='0'),
  queryArgsShrink?: string(name='QueryArgs', example='http_custom'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model ListWafRulesResponseBody = {
  instanceUsage?: long(name='InstanceUsage', example='10'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      action?: string(name='Action', example='deny'),
      characteristicsFields?: [ string ](name='CharacteristicsFields'),
      config?: WafRuleConfig(name='Config'),
      fields?: [ string ](name='Fields'),
      id?: long(name='Id', example='20000001'),
      name?: string(name='Name', example='example'),
      phase?: string(name='Phase', example='http_custom'),
      position?: long(name='Position', example='1'),
      rulesetId?: long(name='RulesetId', example='10000001'),
      skip?: string(name='Skip', example='part'),
      status?: string(name='Status', example='on'),
      tags?: [ string ](name='Tags'),
      timer?: WafTimer(name='Timer'),
      type?: string(name='Type', example='http_custom'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Rules'),
  siteUsage?: long(name='SiteUsage', example='5'),
  totalCount?: long(name='TotalCount', example='20'),
}

model ListWafRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafRulesResponseBody(name='body'),
}

/**
 * @summary 列举WAF规则
 *
 * @param tmpReq ListWafRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafRulesResponse
 */
async function listWafRulesWithOptions(tmpReq: ListWafRulesRequest, runtime: Util.RuntimeOptions): ListWafRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWafRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举WAF规则
 *
 * @param request ListWafRulesRequest
 * @return ListWafRulesResponse
 */
async function listWafRules(request: ListWafRulesRequest): ListWafRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafRulesWithOptions(request, runtime);
}

model ListWafRulesetsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  phase?: string(name='Phase', example='http_bot'),
  queryArgs?: {
    anyLike?: string(name='AnyLike', example='example'),
    desc?: boolean(name='Desc'),
    nameLike?: string(name='NameLike', example='example'),
    orderBy?: string(name='OrderBy', example='id'),
  }(name='QueryArgs', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model ListWafRulesetsShrinkRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  phase?: string(name='Phase', example='http_bot'),
  queryArgsShrink?: string(name='QueryArgs', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
}

model ListWafRulesetsResponseBody = {
  instanceUsage?: long(name='InstanceUsage', example='10'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rulesets?: [ 
    {
      fields?: [ string ](name='Fields'),
      id?: long(name='Id', example='10000001'),
      name?: string(name='Name', example='example'),
      phase?: string(name='Phase', example='http_bot'),
      status?: string(name='Status', example='on'),
      target?: string(name='Target', example='web'),
      types?: [ string ](name='Types'),
      updateTime?: string(name='UpdateTime', example='2024-01-01T00:00:00Z'),
    }
  ](name='Rulesets'),
  siteUsage?: long(name='SiteUsage', example='5'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListWafRulesetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafRulesetsResponseBody(name='body'),
}

/**
 * @summary 列举WAF规则集
 *
 * @param tmpReq ListWafRulesetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafRulesetsResponse
 */
async function listWafRulesetsWithOptions(tmpReq: ListWafRulesetsRequest, runtime: Util.RuntimeOptions): ListWafRulesetsResponse {
  Util.validateModel(tmpReq);
  var request = new ListWafRulesetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafRulesets',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举WAF规则集
 *
 * @param request ListWafRulesetsRequest
 * @return ListWafRulesetsResponse
 */
async function listWafRulesets(request: ListWafRulesetsRequest): ListWafRulesetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafRulesetsWithOptions(request, runtime);
}

model ListWafTemplateRulesRequest {
  phase?: string(name='Phase', example='http_anti_scan'),
  queryArgs?: {
    type?: string(name='Type', example='http_directory_traversal'),
  }(name='QueryArgs'),
}

model ListWafTemplateRulesShrinkRequest {
  phase?: string(name='Phase', example='http_anti_scan'),
  queryArgsShrink?: string(name='QueryArgs'),
}

model ListWafTemplateRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  rules?: [ 
    {
      config?: WafRuleConfig(name='Config'),
      name?: string(name='Name', example='HTTP Directory Traversal Rule [Template]'),
      phase?: string(name='Phase', example='http_anti_scan'),
      status?: string(name='Status', example='on'),
      type?: string(name='Type', example='http_directory_traversal'),
    }
  ](name='Rules'),
}

model ListWafTemplateRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafTemplateRulesResponseBody(name='body'),
}

/**
 * @summary 列举WAF模板规则
 *
 * @param tmpReq ListWafTemplateRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafTemplateRulesResponse
 */
async function listWafTemplateRulesWithOptions(tmpReq: ListWafTemplateRulesRequest, runtime: Util.RuntimeOptions): ListWafTemplateRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWafTemplateRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queryArgs)) {
    request.queryArgsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queryArgs, 'QueryArgs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.queryArgsShrink)) {
    query['QueryArgs'] = request.queryArgsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafTemplateRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举WAF模板规则
 *
 * @param request ListWafTemplateRulesRequest
 * @return ListWafTemplateRulesResponse
 */
async function listWafTemplateRules(request: ListWafTemplateRulesRequest): ListWafTemplateRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafTemplateRulesWithOptions(request, runtime);
}

model ListWafUsageOfRulesRequest {
  phase?: string(name='Phase', example='http_anti_scan'),
  siteId?: long(name='SiteId', example='ListWafUsageOfRules'),
}

model ListWafUsageOfRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
  sites?: [ 
    {
      id?: long(name='Id', example='1'),
      name?: string(name='Name', example='example.com'),
      usage?: long(name='Usage', example='1'),
    }
  ](name='Sites'),
}

model ListWafUsageOfRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWafUsageOfRulesResponseBody(name='body'),
}

/**
 * @summary 列举WAF规则使用情况
 *
 * @param request ListWafUsageOfRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWafUsageOfRulesResponse
 */
async function listWafUsageOfRulesWithOptions(request: ListWafUsageOfRulesRequest, runtime: Util.RuntimeOptions): ListWafUsageOfRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.phase)) {
    query['Phase'] = request.phase;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWafUsageOfRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举WAF规则使用情况
 *
 * @param request ListWafUsageOfRulesRequest
 * @return ListWafUsageOfRulesResponse
 */
async function listWafUsageOfRules(request: ListWafUsageOfRulesRequest): ListWafUsageOfRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWafUsageOfRulesWithOptions(request, runtime);
}

model ListWaitingRoomEventsRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='7096621098****'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', example='89677721098****'),
  waitingRoomId?: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****'),
}

model ListWaitingRoomEventsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='f3c3700a-4c0f-4a24-b576-fd7dbf9e7c55'),
  waitingRoomEvents?: [ 
    {
      customPageHtml?: string(name='CustomPageHtml', example='html-yets-maqi1111'),
      description?: string(name='Description', example='terraform-example'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='off'),
      enable?: string(name='Enable', example='on'),
      endTime?: string(name='EndTime', example='1719814497'),
      jsonResponseEnable?: string(name='JsonResponseEnable', example='off'),
      language?: string(name='Language', example='zhcn'),
      name?: string(name='Name'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', example='11'),
      preQueueEnable?: string(name='PreQueueEnable', example='on'),
      preQueueStartTime?: string(name='PreQueueStartTime', example='1719814097'),
      queuingMethod?: string(name='QueuingMethod', example='fifo'),
      queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
      randomPreQueueEnable?: string(name='RandomPreQueueEnable', example='on'),
      sessionDuration?: string(name='SessionDuration', example='3'),
      startTime?: string(name='StartTime', example='1719814398'),
      totalActiveUsers?: string(name='TotalActiveUsers', example='22'),
      waitingRoomEventId?: long(name='WaitingRoomEventId', example='89677721098****'),
      waitingRoomId?: string(name='WaitingRoomId', example='5c938a045c9ca46607163d34966****'),
      waitingRoomType?: string(name='WaitingRoomType', example='custom'),
    }
  ](name='WaitingRoomEvents'),
}

model ListWaitingRoomEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomEventsResponseBody(name='body'),
}

/**
 * @summary 查询等候室事件
 *
 * @param request ListWaitingRoomEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomEventsResponse
 */
async function listWaitingRoomEventsWithOptions(request: ListWaitingRoomEventsRequest, runtime: Util.RuntimeOptions): ListWaitingRoomEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWaitingRoomEvents',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询等候室事件
 *
 * @param request ListWaitingRoomEventsRequest
 * @return ListWaitingRoomEventsResponse
 */
async function listWaitingRoomEvents(request: ListWaitingRoomEventsRequest): ListWaitingRoomEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWaitingRoomEventsWithOptions(request, runtime);
}

model ListWaitingRoomRulesRequest {
  ruleName?: string(name='RuleName', example='test'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  waitingRoomId?: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='37286782688****'),
}

model ListWaitingRoomRulesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A123425345'),
  waitingRoomRules?: [ 
    {
      rule?: string(name='Rule', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
      ruleEnable?: string(name='RuleEnable', example='on'),
      ruleName?: string(name='RuleName', example='ip'),
      waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='37286782688****'),
    }
  ](name='WaitingRoomRules'),
}

model ListWaitingRoomRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomRulesResponseBody(name='body'),
}

/**
 * @summary 查询等候室绕过规则
 *
 * @param request ListWaitingRoomRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomRulesResponse
 */
async function listWaitingRoomRulesWithOptions(request: ListWaitingRoomRulesRequest, runtime: Util.RuntimeOptions): ListWaitingRoomRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWaitingRoomRules',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询等候室绕过规则
 *
 * @param request ListWaitingRoomRulesRequest
 * @return ListWaitingRoomRulesResponse
 */
async function listWaitingRoomRules(request: ListWaitingRoomRulesRequest): ListWaitingRoomRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWaitingRoomRulesWithOptions(request, runtime);
}

model ListWaitingRoomsRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='120876698010528'),
  waitingRoomId?: string(name='WaitingRoomId', example='6a51d5bc6460887abd1291dc7d4d****'),
}

model ListWaitingRoomsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CB1A380B-09F0-41BB-A198-72F8FD6DA2FE'),
  waitingRooms?: [ 
    {
      cookieName?: string(name='CookieName', example='__aliwaitingroom_example'),
      customPageHtml?: string(name='CustomPageHtml'),
      description?: string(name='Description'),
      disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
      enable?: string(name='Enable', example='on'),
      hostNameAndPath?: [ 
        {
          domain?: string(name='Domain', example='example.com'),
          path?: string(name='Path', example='/test'),
          subdomain?: string(name='Subdomain', example='test.'),
        }
      ](name='HostNameAndPath'),
      jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
      language?: string(name='Language', example='zhcn'),
      name?: string(name='Name'),
      newUsersPerMinute?: string(name='NewUsersPerMinute', example='200'),
      queueAllEnable?: string(name='QueueAllEnable', example='on'),
      queuingMethod?: string(name='QueuingMethod', example='random'),
      queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
      sessionDuration?: string(name='SessionDuration', example='3600'),
      totalActiveUsers?: string(name='TotalActiveUsers', example='300'),
      waitingRoomId?: string(name='WaitingRoomId', example='6a51d5bc6460887abd1291dc7d4d****'),
      waitingRoomType?: string(name='WaitingRoomType', example='default'),
    }
  ](name='WaitingRooms'),
}

model ListWaitingRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingRoomsResponseBody(name='body'),
}

/**
 * @summary 查询等候室
 *
 * @param request ListWaitingRoomsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWaitingRoomsResponse
 */
async function listWaitingRoomsWithOptions(request: ListWaitingRoomsRequest, runtime: Util.RuntimeOptions): ListWaitingRoomsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWaitingRooms',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询等候室
 *
 * @param request ListWaitingRoomsRequest
 * @return ListWaitingRoomsResponse
 */
async function listWaitingRooms(request: ListWaitingRoomsRequest): ListWaitingRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWaitingRoomsWithOptions(request, runtime);
}

model PreloadCachesRequest {
  content?: [ string ](name='Content'),
  headers?: map[string]string(name='Headers'),
  siteId?: long(name='SiteId', example='123456789****'),
}

model PreloadCachesShrinkRequest {
  contentShrink?: string(name='Content'),
  headersShrink?: string(name='Headers'),
  siteId?: long(name='SiteId', example='123456789****'),
}

model PreloadCachesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
  taskId?: string(name='TaskId', example='16401427840'),
}

model PreloadCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreloadCachesResponseBody(name='body'),
}

/**
 * @summary 缓存预热
 *
 * @param tmpReq PreloadCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PreloadCachesResponse
 */
async function preloadCachesWithOptions(tmpReq: PreloadCachesRequest, runtime: Util.RuntimeOptions): PreloadCachesResponse {
  Util.validateModel(tmpReq);
  var request = new PreloadCachesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  if (!Util.isUnset(tmpReq.headers)) {
    request.headersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.headers, 'Headers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.headersShrink)) {
    query['Headers'] = request.headersShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PreloadCaches',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 缓存预热
 *
 * @param request PreloadCachesRequest
 * @return PreloadCachesResponse
 */
async function preloadCaches(request: PreloadCachesRequest): PreloadCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadCachesWithOptions(request, runtime);
}

model PurgeCachesRequest {
  content?: {
    cacheTags?: [ string ](name='CacheTags'),
    directories?: [ string ](name='Directories'),
    files?: [ any ](name='Files'),
    hostnames?: [ string ](name='Hostnames'),
    ignoreParams?: [ string ](name='IgnoreParams'),
    purgeAll?: boolean(name='PurgeAll', example='true'),
  }(name='Content'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', example='true'),
  force?: boolean(name='Force', example='true'),
  siteId?: long(name='SiteId', example='123456789****'),
  type?: string(name='Type', description='This parameter is required.', example='file'),
}

model PurgeCachesShrinkRequest {
  contentShrink?: string(name='Content'),
  edgeComputePurge?: boolean(name='EdgeComputePurge', example='true'),
  force?: boolean(name='Force', example='true'),
  siteId?: long(name='SiteId', example='123456789****'),
  type?: string(name='Type', description='This parameter is required.', example='file'),
}

model PurgeCachesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
  taskId?: string(name='TaskId', example='15940956620'),
}

model PurgeCachesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurgeCachesResponseBody(name='body'),
}

/**
 * @summary 缓存刷新
 *
 * @param tmpReq PurgeCachesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PurgeCachesResponse
 */
async function purgeCachesWithOptions(tmpReq: PurgeCachesRequest, runtime: Util.RuntimeOptions): PurgeCachesResponse {
  Util.validateModel(tmpReq);
  var request = new PurgeCachesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!Util.isUnset(request.edgeComputePurge)) {
    query['EdgeComputePurge'] = request.edgeComputePurge;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurgeCaches',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 缓存刷新
 *
 * @param request PurgeCachesRequest
 * @return PurgeCachesResponse
 */
async function purgeCaches(request: PurgeCachesRequest): PurgeCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return purgeCachesWithOptions(request, runtime);
}

model PutKvRequest {
  base64?: boolean(name='Base64', example='true'),
  expiration?: long(name='Expiration', example='1690081381'),
  expirationTtl?: long(name='ExpirationTtl', example='3600'),
  key?: string(name='Key', description='This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namespace'),
  value?: string(name='Value', description='This parameter is required.', example='test_value'),
}

model PutKvResponseBody = {
  length?: string(name='Length', example='4'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', example='test'),
}

model PutKvResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvResponseBody(name='body'),
}

/**
 * @summary 设置Namespace的Key-Value对
 *
 * @param request PutKvRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutKvResponse
 */
async function putKvWithOptions(request: PutKvRequest, runtime: Util.RuntimeOptions): PutKvResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.base64)) {
    query['Base64'] = request.base64;
  }
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.expirationTtl)) {
    query['ExpirationTtl'] = request.expirationTtl;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.value)) {
    body['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutKv',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置Namespace的Key-Value对
 *
 * @param request PutKvRequest
 * @return PutKvResponse
 */
async function putKv(request: PutKvRequest): PutKvResponse {
  var runtime = new Util.RuntimeOptions{};
  return putKvWithOptions(request, runtime);
}

model PutKvWithHighCapacityRequest {
  key?: string(name='Key', description='This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namesapce'),
  url?: string(name='Url', description='This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model PutKvWithHighCapacityAdvanceRequest {
  key?: string(name='Key', description='This parameter is required.', example='test_key'),
  namespace?: string(name='Namespace', description='This parameter is required.', example='test_namesapce'),
  urlObject?: readable(name='Url', description='This parameter is required.', example='https://xxxobject.oss-cn-reginon.aliyuncs.com/9d91_xxxxxxxxxxx_158bb6e0f97c477791209bb46bd599f7'),
}

model PutKvWithHighCapacityResponseBody = {
  length?: string(name='Length', example='4'),
  requestId?: string(name='RequestId', description='Id of the request', example='EEEBE525-F576-1196-8DAF-2D70CA3F4D2F'),
  value?: string(name='Value', example='test'),
}

model PutKvWithHighCapacityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutKvWithHighCapacityResponseBody(name='body'),
}

/**
 * @summary 设置Namespace的Key-Value对，支持最大25M的Body
 *
 * @param request PutKvWithHighCapacityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutKvWithHighCapacityResponse
 */
async function putKvWithHighCapacityWithOptions(request: PutKvWithHighCapacityRequest, runtime: Util.RuntimeOptions): PutKvWithHighCapacityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutKvWithHighCapacity',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置Namespace的Key-Value对，支持最大25M的Body
 *
 * @param request PutKvWithHighCapacityRequest
 * @return PutKvWithHighCapacityResponse
 */
async function putKvWithHighCapacity(request: PutKvWithHighCapacityRequest): PutKvWithHighCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return putKvWithHighCapacityWithOptions(request, runtime);
}

async function putKvWithHighCapacityAdvance(request: PutKvWithHighCapacityAdvanceRequest, runtime: Util.RuntimeOptions): PutKvWithHighCapacityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var putKvWithHighCapacityReq = new PutKvWithHighCapacityRequest{};
  OpenApiUtil.convert(request, putKvWithHighCapacityReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    putKvWithHighCapacityReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var putKvWithHighCapacityResp = putKvWithHighCapacityWithOptions(putKvWithHighCapacityReq, runtime);
  return putKvWithHighCapacityResp;
}

model ResetScheduledPreloadJobRequest {
  id?: string(name='Id', example='ResetScheduledPreloadJob'),
}

model ResetScheduledPreloadJobResponseBody = {
  aliUid?: string(name='AliUid'),
  createdAt?: string(name='CreatedAt'),
  domains?: string(name='Domains'),
  errorInfo?: string(name='ErrorInfo'),
  failedFileOss?: string(name='FailedFileOss'),
  fileId?: string(name='FileId'),
  id?: string(name='Id'),
  insertWay?: string(name='InsertWay'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', description='Id of the request'),
  siteId?: long(name='SiteId'),
  taskSubmitted?: int32(name='TaskSubmitted'),
  taskType?: string(name='TaskType'),
  urlCount?: int32(name='UrlCount'),
  urlSubmitted?: int32(name='UrlSubmitted'),
}

model ResetScheduledPreloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetScheduledPreloadJobResponseBody(name='body'),
}

/**
 * @summary 重置定时预热任务的进度，从头开始预热
 *
 * @param request ResetScheduledPreloadJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetScheduledPreloadJobResponse
 */
async function resetScheduledPreloadJobWithOptions(request: ResetScheduledPreloadJobRequest, runtime: Util.RuntimeOptions): ResetScheduledPreloadJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetScheduledPreloadJob',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重置定时预热任务的进度，从头开始预热
 *
 * @param request ResetScheduledPreloadJobRequest
 * @return ResetScheduledPreloadJobResponse
 */
async function resetScheduledPreloadJob(request: ResetScheduledPreloadJobRequest): ResetScheduledPreloadJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetScheduledPreloadJobWithOptions(request, runtime);
}

model SetCertificateRequest {
  casId?: long(name='CasId', example='30000478'),
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE-----'),
  id?: string(name='Id', example='30001303'),
  name?: string(name='Name', example='yourCertName'),
  ownerId?: long(name='OwnerId'),
  privateKey?: string(name='PrivateKey', example='-----BEGIN PRIVATE KEY-----'),
  region?: string(name='Region', example='cn-hangzhou'),
  securityToken?: string(name='SecurityToken'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  type?: string(name='Type', description='This parameter is required.', example='cas'),
  update?: boolean(name='Update', example='true'),
}

model SetCertificateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
}

model SetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetCertificateResponseBody(name='body'),
}

/**
 * @summary 设置证书
 *
 * @param request SetCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetCertificateResponse
 */
async function setCertificateWithOptions(request: SetCertificateRequest, runtime: Util.RuntimeOptions): SetCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.casId)) {
    body['CasId'] = request.casId;
  }
  if (!Util.isUnset(request.certificate)) {
    body['Certificate'] = request.certificate;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.privateKey)) {
    body['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.update)) {
    body['Update'] = request.update;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetCertificate',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置证书
 *
 * @param request SetCertificateRequest
 * @return SetCertificateResponse
 */
async function setCertificate(request: SetCertificateRequest): SetCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCertificateWithOptions(request, runtime);
}

model SetHttpDDoSAttackIntelligentProtectionRequest {
  aiMode?: string(name='AiMode', description='This parameter is required.', example='defense'),
  aiTemplate?: string(name='AiTemplate', description='This parameter is required.', example='level60'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponseBody = {
  aiMode?: string(name='AiMode', example='defense'),
  aiTemplate?: string(name='AiTemplate', example='level60'),
  requestId?: string(name='RequestId', description='Id of the request', example='156A6B-677B1A-4297B7-9187B7-2B44792'),
  siteId?: long(name='SiteId', example='123456****'),
}

model SetHttpDDoSAttackIntelligentProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackIntelligentProtectionResponseBody(name='body'),
}

/**
 * @summary 设置HTTP DDoS智能防护配置信息
 *
 * @param request SetHttpDDoSAttackIntelligentProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
async function setHttpDDoSAttackIntelligentProtectionWithOptions(request: SetHttpDDoSAttackIntelligentProtectionRequest, runtime: Util.RuntimeOptions): SetHttpDDoSAttackIntelligentProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aiMode)) {
    query['AiMode'] = request.aiMode;
  }
  if (!Util.isUnset(request.aiTemplate)) {
    query['AiTemplate'] = request.aiTemplate;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetHttpDDoSAttackIntelligentProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置HTTP DDoS智能防护配置信息
 *
 * @param request SetHttpDDoSAttackIntelligentProtectionRequest
 * @return SetHttpDDoSAttackIntelligentProtectionResponse
 */
async function setHttpDDoSAttackIntelligentProtection(request: SetHttpDDoSAttackIntelligentProtectionRequest): SetHttpDDoSAttackIntelligentProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpDDoSAttackIntelligentProtectionWithOptions(request, runtime);
}

model SetHttpDDoSAttackProtectionRequest {
  globalMode?: string(name='GlobalMode', description='This parameter is required.', example='default'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponseBody = {
  globalMode?: string(name='GlobalMode', example='default'),
  requestId?: string(name='RequestId', description='Id of the request', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  siteId?: long(name='SiteId', example='123456****'),
}

model SetHttpDDoSAttackProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHttpDDoSAttackProtectionResponseBody(name='body'),
}

/**
 * @summary 设置HTTP DDoS攻击防护配置信息
 *
 * @param request SetHttpDDoSAttackProtectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetHttpDDoSAttackProtectionResponse
 */
async function setHttpDDoSAttackProtectionWithOptions(request: SetHttpDDoSAttackProtectionRequest, runtime: Util.RuntimeOptions): SetHttpDDoSAttackProtectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalMode)) {
    query['GlobalMode'] = request.globalMode;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetHttpDDoSAttackProtection',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置HTTP DDoS攻击防护配置信息
 *
 * @param request SetHttpDDoSAttackProtectionRequest
 * @return SetHttpDDoSAttackProtectionResponse
 */
async function setHttpDDoSAttackProtection(request: SetHttpDDoSAttackProtectionRequest): SetHttpDDoSAttackProtectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpDDoSAttackProtectionWithOptions(request, runtime);
}

model StartScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='This parameter is required.', example='StartScheduledPreloadExecution'),
}

model StartScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid'),
  endTime?: string(name='EndTime'),
  id?: string(name='Id'),
  interval?: int32(name='Interval', example='60'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model StartScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary 开始单个定时预热计划
 *
 * @param request StartScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartScheduledPreloadExecutionResponse
 */
async function startScheduledPreloadExecutionWithOptions(request: StartScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): StartScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开始单个定时预热计划
 *
 * @param request StartScheduledPreloadExecutionRequest
 * @return StartScheduledPreloadExecutionResponse
 */
async function startScheduledPreloadExecution(request: StartScheduledPreloadExecutionRequest): StartScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startScheduledPreloadExecutionWithOptions(request, runtime);
}

model StopScheduledPreloadExecutionRequest {
  id?: string(name='Id', description='This parameter is required.', example='StopScheduledPreloadExecution'),
}

model StopScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid'),
  endTime?: string(name='EndTime'),
  id?: string(name='Id'),
  interval?: int32(name='Interval'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model StopScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary 停止单个定时预热计划
 *
 * @param request StopScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopScheduledPreloadExecutionResponse
 */
async function stopScheduledPreloadExecutionWithOptions(request: StopScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): StopScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止单个定时预热计划
 *
 * @param request StopScheduledPreloadExecutionRequest
 * @return StopScheduledPreloadExecutionResponse
 */
async function stopScheduledPreloadExecution(request: StopScheduledPreloadExecutionRequest): StopScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopScheduledPreloadExecutionWithOptions(request, runtime);
}

model TransformExpressionToMatchRequest {
  expression?: string(name='Expression', example='http_bot'),
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
}

model TransformExpressionToMatchResponseBody = {
  match?: WafRuleMatch(name='Match'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model TransformExpressionToMatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransformExpressionToMatchResponseBody(name='body'),
}

/**
 * @summary 将表达式转换为匹配项
 *
 * @param request TransformExpressionToMatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TransformExpressionToMatchResponse
 */
async function transformExpressionToMatchWithOptions(request: TransformExpressionToMatchRequest, runtime: Util.RuntimeOptions): TransformExpressionToMatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.expression)) {
    body['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransformExpressionToMatch',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将表达式转换为匹配项
 *
 * @param request TransformExpressionToMatchRequest
 * @return TransformExpressionToMatchResponse
 */
async function transformExpressionToMatch(request: TransformExpressionToMatchRequest): TransformExpressionToMatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformExpressionToMatchWithOptions(request, runtime);
}

model TransformMatchToExpressionRequest {
  match?: WafRuleMatch(name='Match', example='http_bot'),
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
}

model TransformMatchToExpressionShrinkRequest {
  matchShrink?: string(name='Match', example='http_bot'),
  phase?: string(name='Phase', example='http_bot'),
  siteId?: long(name='SiteId', example='1'),
}

model TransformMatchToExpressionResponseBody = {
  expression?: string(name='Expression'),
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model TransformMatchToExpressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransformMatchToExpressionResponseBody(name='body'),
}

/**
 * @summary 将匹配项转换为表达式
 *
 * @param tmpReq TransformMatchToExpressionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TransformMatchToExpressionResponse
 */
async function transformMatchToExpressionWithOptions(tmpReq: TransformMatchToExpressionRequest, runtime: Util.RuntimeOptions): TransformMatchToExpressionResponse {
  Util.validateModel(tmpReq);
  var request = new TransformMatchToExpressionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.match)) {
    request.matchShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.match, 'Match', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.matchShrink)) {
    body['Match'] = request.matchShrink;
  }
  if (!Util.isUnset(request.phase)) {
    body['Phase'] = request.phase;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransformMatchToExpression',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 将匹配项转换为表达式
 *
 * @param request TransformMatchToExpressionRequest
 * @return TransformMatchToExpressionResponse
 */
async function transformMatchToExpression(request: TransformMatchToExpressionRequest): TransformMatchToExpressionResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformMatchToExpressionWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='是否全部删除，只针对TagKey.N为空时有效', example='false'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='要创建并绑定标签的资源所在的地域ID。

This parameter is required.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项

This parameter is required.'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='site'),
  securityToken?: string(name='SecurityToken'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='85H66C7B-671A-4297-9187-2C4477247A74'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @summary 为资源列表统一解绑标签
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 为资源列表统一解绑标签
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCustomScenePolicyRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', description='This parameter is required.', example='test'),
  objects?: string(name='Objects', example='123456****'),
  policyId?: long(name='PolicyId', description='This parameter is required.', example='1'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', description='This parameter is required.', example='promotion'),
}

model UpdateCustomScenePolicyResponseBody = {
  endTime?: string(name='EndTime', example='2023-04-03T19:00:00Z'),
  name?: string(name='Name', example='test'),
  objects?: [ string ](name='Objects'),
  policyId?: long(name='PolicyId', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  startTime?: string(name='StartTime', example='2023-04-03T16:00:00Z'),
  template?: string(name='Template', example='promotion'),
}

model UpdateCustomScenePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomScenePolicyResponseBody(name='body'),
}

/**
 * @summary 修改定制场景策略
 *
 * @param request UpdateCustomScenePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomScenePolicyResponse
 */
async function updateCustomScenePolicyWithOptions(request: UpdateCustomScenePolicyRequest, runtime: Util.RuntimeOptions): UpdateCustomScenePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.objects)) {
    query['Objects'] = request.objects;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomScenePolicy',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改定制场景策略
 *
 * @param request UpdateCustomScenePolicyRequest
 * @return UpdateCustomScenePolicyResponse
 */
async function updateCustomScenePolicy(request: UpdateCustomScenePolicyRequest): UpdateCustomScenePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomScenePolicyWithOptions(request, runtime);
}

model UpdateKvNamespaceRequest {
  namespace?: string(name='Namespace', description='This parameter is required.', example='ns1'),
  title?: string(name='Title', description='This parameter is required.', example='new_ns'),
}

model UpdateKvNamespaceResponseBody = {
  description?: string(name='Description', example='this is a test ns.'),
  namespace?: string(name='Namespace', example='new_ns1'),
  namespaceId?: string(name='NamespaceId', example='643355322374688768'),
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
  status?: string(name='Status', example='online'),
}

model UpdateKvNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateKvNamespaceResponseBody(name='body'),
}

/**
 * @summary 重命名账号下的Namespace
 *
 * @param request UpdateKvNamespaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateKvNamespaceResponse
 */
async function updateKvNamespaceWithOptions(request: UpdateKvNamespaceRequest, runtime: Util.RuntimeOptions): UpdateKvNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateKvNamespace',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重命名账号下的Namespace
 *
 * @param request UpdateKvNamespaceRequest
 * @return UpdateKvNamespaceResponse
 */
async function updateKvNamespace(request: UpdateKvNamespaceRequest): UpdateKvNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateKvNamespaceWithOptions(request, runtime);
}

model UpdateListRequest {
  description?: string(name='Description', example='a custom list'),
  id?: long(name='Id', description='This parameter is required.', example='40000001'),
  items?: [ string ](name='Items', example='a custom list'),
  name?: string(name='Name', example='example'),
}

model UpdateListShrinkRequest {
  description?: string(name='Description', example='a custom list'),
  id?: long(name='Id', description='This parameter is required.', example='40000001'),
  itemsShrink?: string(name='Items', example='a custom list'),
  name?: string(name='Name', example='example'),
}

model UpdateListResponseBody = {
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateListResponseBody(name='body'),
}

/**
 * @summary 更新自定义列表
 *
 * @param tmpReq UpdateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateListResponse
 */
async function updateListWithOptions(tmpReq: UpdateListRequest, runtime: Util.RuntimeOptions): UpdateListResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.items)) {
    request.itemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.items, 'Items', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.itemsShrink)) {
    body['Items'] = request.itemsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateList',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新自定义列表
 *
 * @param request UpdateListRequest
 * @return UpdateListResponse
 */
async function updateList(request: UpdateListRequest): UpdateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateListWithOptions(request, runtime);
}

model UpdatePageRequest {
  content?: string(name='Content', description='This parameter is required.', example='PGh0bWw+aGVsbG8gcGFnZTwvaHRtbD4='),
  contentType?: string(name='ContentType', description='This parameter is required.', example='text/html'),
  description?: string(name='Description', example='a custom deny page'),
  id?: long(name='Id', description='This parameter is required.', example='50000001'),
  name?: string(name='Name', description='This parameter is required.', example='example'),
}

model UpdatePageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdatePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePageResponseBody(name='body'),
}

/**
 * @summary 更新自定义响应页面
 *
 * @param request UpdatePageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePageResponse
 */
async function updatePageWithOptions(request: UpdatePageRequest, runtime: Util.RuntimeOptions): UpdatePageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新自定义响应页面
 *
 * @param request UpdatePageRequest
 * @return UpdatePageResponse
 */
async function updatePage(request: UpdatePageRequest): UpdatePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePageWithOptions(request, runtime);
}

model UpdateRecordRequest {
  authConf?: {
    accessKey?: string(name='AccessKey'),
    authType?: string(name='AuthType'),
    region?: string(name='Region'),
    secretKey?: string(name='SecretKey'),
    version?: string(name='Version'),
  }(name='AuthConf'),
  bizName?: string(name='BizName'),
  comment?: string(name='Comment'),
  data?: {
    algorithm?: int32(name='Algorithm'),
    certificate?: string(name='Certificate'),
    fingerprint?: string(name='Fingerprint'),
    flag?: int32(name='Flag'),
    keyTag?: int32(name='KeyTag'),
    matchingType?: int32(name='MatchingType'),
    port?: int32(name='Port'),
    priority?: int32(name='Priority'),
    selector?: int32(name='Selector'),
    tag?: string(name='Tag'),
    type?: int32(name='Type'),
    usage?: int32(name='Usage'),
    value?: string(name='Value'),
    weight?: int32(name='Weight'),
  }(name='Data', description='This parameter is required.'),
  hostPolicy?: string(name='HostPolicy'),
  proxied?: boolean(name='Proxied', description='是否代理加速'),
  recordId?: long(name='RecordId', description='This parameter is required.'),
  sourceType?: string(name='SourceType'),
  ttl?: int32(name='Ttl'),
}

model UpdateRecordShrinkRequest {
  authConfShrink?: string(name='AuthConf'),
  bizName?: string(name='BizName'),
  comment?: string(name='Comment'),
  dataShrink?: string(name='Data', description='This parameter is required.'),
  hostPolicy?: string(name='HostPolicy'),
  proxied?: boolean(name='Proxied', description='是否代理加速'),
  recordId?: long(name='RecordId', description='This parameter is required.'),
  sourceType?: string(name='SourceType'),
  ttl?: int32(name='Ttl'),
}

model UpdateRecordResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRecordResponseBody(name='body'),
}

/**
 * @summary 更新记录
 *
 * @param tmpReq UpdateRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRecordResponse
 */
async function updateRecordWithOptions(tmpReq: UpdateRecordRequest, runtime: Util.RuntimeOptions): UpdateRecordResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRecordShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authConf)) {
    request.authConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authConf, 'AuthConf', 'json');
  }
  if (!Util.isUnset(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.authConfShrink)) {
    query['AuthConf'] = request.authConfShrink;
  }
  if (!Util.isUnset(request.bizName)) {
    query['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!Util.isUnset(request.hostPolicy)) {
    query['HostPolicy'] = request.hostPolicy;
  }
  if (!Util.isUnset(request.proxied)) {
    query['Proxied'] = request.proxied;
  }
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecord',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新记录
 *
 * @param request UpdateRecordRequest
 * @return UpdateRecordResponse
 */
async function updateRecord(request: UpdateRecordRequest): UpdateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordWithOptions(request, runtime);
}

model UpdateScheduledPreloadExecutionRequest {
  endTime?: string(name='EndTime'),
  id?: string(name='Id', description='This parameter is required.', example='UpdateScheduledPreloadExecution'),
  interval?: int32(name='Interval'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
}

model UpdateScheduledPreloadExecutionResponseBody = {
  aliUid?: string(name='AliUid'),
  endTime?: string(name='EndTime'),
  id?: string(name='Id'),
  interval?: int32(name='Interval'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId', description='Id of the request'),
  sliceLen?: int32(name='SliceLen'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model UpdateScheduledPreloadExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScheduledPreloadExecutionResponseBody(name='body'),
}

/**
 * @summary 更新单个定时预热计划
 *
 * @param request UpdateScheduledPreloadExecutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateScheduledPreloadExecutionResponse
 */
async function updateScheduledPreloadExecutionWithOptions(request: UpdateScheduledPreloadExecutionRequest, runtime: Util.RuntimeOptions): UpdateScheduledPreloadExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    body['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.sliceLen)) {
    body['SliceLen'] = request.sliceLen;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScheduledPreloadExecution',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新单个定时预热计划
 *
 * @param request UpdateScheduledPreloadExecutionRequest
 * @return UpdateScheduledPreloadExecutionResponse
 */
async function updateScheduledPreloadExecution(request: UpdateScheduledPreloadExecutionRequest): UpdateScheduledPreloadExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduledPreloadExecutionWithOptions(request, runtime);
}

model UpdateSiteAccessTypeRequest {
  accessType?: string(name='AccessType', description='This parameter is required.', example='NS'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890'),
}

model UpdateSiteAccessTypeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateSiteAccessTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteAccessTypeResponseBody(name='body'),
}

/**
 * @summary 修改站点接入方式
 *
 * @param request UpdateSiteAccessTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteAccessTypeResponse
 */
async function updateSiteAccessTypeWithOptions(request: UpdateSiteAccessTypeRequest, runtime: Util.RuntimeOptions): UpdateSiteAccessTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteAccessType',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改站点接入方式
 *
 * @param request UpdateSiteAccessTypeRequest
 * @return UpdateSiteAccessTypeResponse
 */
async function updateSiteAccessType(request: UpdateSiteAccessTypeRequest): UpdateSiteAccessTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteAccessTypeWithOptions(request, runtime);
}

model UpdateSiteCoverageRequest {
  coverage?: string(name='Coverage', description='This parameter is required.', example='global'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model UpdateSiteCoverageResponseBody = {
  requestId?: string(name='RequestId', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model UpdateSiteCoverageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCoverageResponseBody(name='body'),
}

/**
 * @summary 更新站点加速区域
 *
 * @param request UpdateSiteCoverageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteCoverageResponse
 */
async function updateSiteCoverageWithOptions(request: UpdateSiteCoverageRequest, runtime: Util.RuntimeOptions): UpdateSiteCoverageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteCoverage',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新站点加速区域
 *
 * @param request UpdateSiteCoverageRequest
 * @return UpdateSiteCoverageResponse
 */
async function updateSiteCoverage(request: UpdateSiteCoverageRequest): UpdateSiteCoverageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteCoverageWithOptions(request, runtime);
}

model UpdateSiteCustomLogRequest {
  cookies?: [ string ](name='Cookies'),
  requestHeaders?: [ string ](name='RequestHeaders'),
  responseHeaders?: [ string ](name='ResponseHeaders'),
  siteId?: long(name='SiteId', description='site id', example='11223****'),
}

model UpdateSiteCustomLogShrinkRequest {
  cookiesShrink?: string(name='Cookies'),
  requestHeadersShrink?: string(name='RequestHeaders'),
  responseHeadersShrink?: string(name='ResponseHeaders'),
  siteId?: long(name='SiteId', description='site id', example='11223****'),
}

model UpdateSiteCustomLogResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='ET5BF670-09D5-4D0B-BEBY-D96A2A528000'),
}

model UpdateSiteCustomLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteCustomLogResponseBody(name='body'),
}

/**
 * @summary 修改自定义字段
 *
 * @param tmpReq UpdateSiteCustomLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteCustomLogResponse
 */
async function updateSiteCustomLogWithOptions(tmpReq: UpdateSiteCustomLogRequest, runtime: Util.RuntimeOptions): UpdateSiteCustomLogResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSiteCustomLogShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cookies)) {
    request.cookiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cookies, 'Cookies', 'json');
  }
  if (!Util.isUnset(tmpReq.requestHeaders)) {
    request.requestHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestHeaders, 'RequestHeaders', 'json');
  }
  if (!Util.isUnset(tmpReq.responseHeaders)) {
    request.responseHeadersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.responseHeaders, 'ResponseHeaders', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cookiesShrink)) {
    body['Cookies'] = request.cookiesShrink;
  }
  if (!Util.isUnset(request.requestHeadersShrink)) {
    body['RequestHeaders'] = request.requestHeadersShrink;
  }
  if (!Util.isUnset(request.responseHeadersShrink)) {
    body['ResponseHeaders'] = request.responseHeadersShrink;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteCustomLog',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改自定义字段
 *
 * @param request UpdateSiteCustomLogRequest
 * @return UpdateSiteCustomLogResponse
 */
async function updateSiteCustomLog(request: UpdateSiteCustomLogRequest): UpdateSiteCustomLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteCustomLogWithOptions(request, runtime);
}

model UpdateSiteDeliveryTaskRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_er'),
  discardRate?: float(name='DiscardRate', example='0.0'),
  fieldName?: string(name='FieldName', description='This parameter is required.', example='ClientIP,UserAgent'),
  siteId?: long(name='SiteId', example='123456****'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateSiteDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 修改一个任务投递
 *
 * @param request UpdateSiteDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteDeliveryTaskResponse
 */
async function updateSiteDeliveryTaskWithOptions(request: UpdateSiteDeliveryTaskRequest, runtime: Util.RuntimeOptions): UpdateSiteDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.siteId)) {
    body['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改一个任务投递
 *
 * @param request UpdateSiteDeliveryTaskRequest
 * @return UpdateSiteDeliveryTaskResponse
 */
async function updateSiteDeliveryTask(request: UpdateSiteDeliveryTaskRequest): UpdateSiteDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteDeliveryTaskWithOptions(request, runtime);
}

model UpdateSiteDeliveryTaskStatusRequest {
  method?: string(name='Method', description='This parameter is required.', example='online'),
  siteId?: long(name='SiteId', example='123456****'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='cdn-test-task'),
}

model UpdateSiteDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteDeliveryTaskStatusResponseBody(name='body'),
}

/**
 * @summary 上下线一个任务投递
 *
 * @param request UpdateSiteDeliveryTaskStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteDeliveryTaskStatusResponse
 */
async function updateSiteDeliveryTaskStatusWithOptions(request: UpdateSiteDeliveryTaskStatusRequest, runtime: Util.RuntimeOptions): UpdateSiteDeliveryTaskStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteDeliveryTaskStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上下线一个任务投递
 *
 * @param request UpdateSiteDeliveryTaskStatusRequest
 * @return UpdateSiteDeliveryTaskStatusResponse
 */
async function updateSiteDeliveryTaskStatus(request: UpdateSiteDeliveryTaskStatusRequest): UpdateSiteDeliveryTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteDeliveryTaskStatusWithOptions(request, runtime);
}

model UpdateSiteVanityNSRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
  vanityNSList?: string(name='VanityNSList', example='ns1.example.com,ns2.example.com'),
}

model UpdateSiteVanityNSResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model UpdateSiteVanityNSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSiteVanityNSResponseBody(name='body'),
}

/**
 * @summary 修改站点自定义NS
 *
 * @param request UpdateSiteVanityNSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSiteVanityNSResponse
 */
async function updateSiteVanityNSWithOptions(request: UpdateSiteVanityNSRequest, runtime: Util.RuntimeOptions): UpdateSiteVanityNSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.vanityNSList)) {
    query['VanityNSList'] = request.vanityNSList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSiteVanityNS',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改站点自定义NS
 *
 * @param request UpdateSiteVanityNSRequest
 * @return UpdateSiteVanityNSResponse
 */
async function updateSiteVanityNS(request: UpdateSiteVanityNSRequest): UpdateSiteVanityNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSiteVanityNSWithOptions(request, runtime);
}

model UpdateUserDeliveryTaskRequest {
  businessType?: string(name='BusinessType', example='dcdn_log_er'),
  discardRate?: float(name='DiscardRate', example='0'),
  fieldName?: string(name='FieldName', description='This parameter is required.', example='ClientRequestID,ClientRequestHost'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='test_project'),
}

model UpdateUserDeliveryTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
}

model UpdateUserDeliveryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskResponseBody(name='body'),
}

/**
 * @summary 修改一个用户粒度任务投递
 *
 * @param request UpdateUserDeliveryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserDeliveryTaskResponse
 */
async function updateUserDeliveryTaskWithOptions(request: UpdateUserDeliveryTaskRequest, runtime: Util.RuntimeOptions): UpdateUserDeliveryTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.discardRate)) {
    body['DiscardRate'] = request.discardRate;
  }
  if (!Util.isUnset(request.fieldName)) {
    body['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserDeliveryTask',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改一个用户粒度任务投递
 *
 * @param request UpdateUserDeliveryTaskRequest
 * @return UpdateUserDeliveryTaskResponse
 */
async function updateUserDeliveryTask(request: UpdateUserDeliveryTaskRequest): UpdateUserDeliveryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserDeliveryTaskWithOptions(request, runtime);
}

model UpdateUserDeliveryTaskStatusRequest {
  method?: string(name='Method', description='This parameter is required.', example='online'),
  taskName?: string(name='TaskName', description='This parameter is required.', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='34DCBC8A-****-****-****-6DAA11D7DDBD'),
  status?: string(name='Status', example='online'),
  taskName?: string(name='TaskName', example='test_project'),
}

model UpdateUserDeliveryTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDeliveryTaskStatusResponseBody(name='body'),
}

/**
 * @summary 上下线一个用户任务投递
 *
 * @param request UpdateUserDeliveryTaskStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserDeliveryTaskStatusResponse
 */
async function updateUserDeliveryTaskStatusWithOptions(request: UpdateUserDeliveryTaskStatusRequest, runtime: Util.RuntimeOptions): UpdateUserDeliveryTaskStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserDeliveryTaskStatus',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上下线一个用户任务投递
 *
 * @param request UpdateUserDeliveryTaskStatusRequest
 * @return UpdateUserDeliveryTaskStatusResponse
 */
async function updateUserDeliveryTaskStatus(request: UpdateUserDeliveryTaskStatusRequest): UpdateUserDeliveryTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserDeliveryTaskStatusWithOptions(request, runtime);
}

model UpdateWafRuleRequest {
  config?: WafRuleConfig(name='Config'),
  id?: long(name='Id', description='This parameter is required.', example='20000001'),
  position?: long(name='Position', example='1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion'),
  status?: string(name='Status', example='on'),
}

model UpdateWafRuleShrinkRequest {
  configShrink?: string(name='Config'),
  id?: long(name='Id', description='This parameter is required.', example='20000001'),
  position?: long(name='Position', example='1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='1'),
  siteVersion?: int32(name='SiteVersion'),
  status?: string(name='Status', example='on'),
}

model UpdateWafRuleResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateWafRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWafRuleResponseBody(name='body'),
}

/**
 * @summary 更新WAF规则页面
 *
 * @param tmpReq UpdateWafRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWafRuleResponse
 */
async function updateWafRuleWithOptions(tmpReq: UpdateWafRuleRequest, runtime: Util.RuntimeOptions): UpdateWafRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWafRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configShrink)) {
    body['Config'] = request.configShrink;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.position)) {
    body['Position'] = request.position;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWafRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新WAF规则页面
 *
 * @param request UpdateWafRuleRequest
 * @return UpdateWafRuleResponse
 */
async function updateWafRule(request: UpdateWafRuleRequest): UpdateWafRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWafRuleWithOptions(request, runtime);
}

model UpdateWafRulesetRequest {
  id?: long(name='Id', description='This parameter is required.', example='10000001'),
  siteId?: long(name='SiteId', example='1'),
  siteVersion?: int32(name='SiteVersion', example='1'),
  status?: string(name='Status', example='on'),
}

model UpdateWafRulesetResponseBody = {
  requestId?: string(name='RequestId', example='36af3fcc-43d0-441c-86b1-428951dc8225'),
}

model UpdateWafRulesetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWafRulesetResponseBody(name='body'),
}

/**
 * @summary 更新WAF规则集
 *
 * @param request UpdateWafRulesetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWafRulesetResponse
 */
async function updateWafRulesetWithOptions(request: UpdateWafRulesetRequest, runtime: Util.RuntimeOptions): UpdateWafRulesetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.siteVersion)) {
    query['SiteVersion'] = request.siteVersion;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWafRuleset',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新WAF规则集
 *
 * @param request UpdateWafRulesetRequest
 * @return UpdateWafRulesetResponse
 */
async function updateWafRuleset(request: UpdateWafRulesetRequest): UpdateWafRulesetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWafRulesetWithOptions(request, runtime);
}

model UpdateWaitingRoomRequest {
  cookieName?: string(name='CookieName', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!'),
  description?: string(name='Description'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
  enable?: string(name='Enable', example='on'),
  hostNameAndPath?: [ 
    {
      domain?: string(name='Domain', example='example.com'),
      path?: string(name='Path', example='/test'),
      subdomain?: string(name='Subdomain', example='test.'),
    }
  ](name='HostNameAndPath'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
  language?: string(name='Language', example='zhcn'),
  name?: string(name='Name'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', example='on'),
  queuingMethod?: string(name='QueuingMethod', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
  sessionDuration?: string(name='SessionDuration', example='5'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='7096621098****'),
  totalActiveUsers?: string(name='TotalActiveUsers', example='300'),
  waitingRoomId?: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomType?: string(name='WaitingRoomType', example='default'),
}

model UpdateWaitingRoomShrinkRequest {
  cookieName?: string(name='CookieName', example='__aliwaitingroom_example'),
  customPageHtml?: string(name='CustomPageHtml', example='Hello%20world!'),
  description?: string(name='Description'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='on'),
  enable?: string(name='Enable', example='on'),
  hostNameAndPathShrink?: string(name='HostNameAndPath'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='on'),
  language?: string(name='Language', example='zhcn'),
  name?: string(name='Name'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', example='200'),
  queueAllEnable?: string(name='QueueAllEnable', example='on'),
  queuingMethod?: string(name='QueuingMethod', example='random'),
  queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
  sessionDuration?: string(name='SessionDuration', example='5'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='7096621098****'),
  totalActiveUsers?: string(name='TotalActiveUsers', example='300'),
  waitingRoomId?: string(name='WaitingRoomId', description='This parameter is required.', example='6a51d5bc6460887abd129****'),
  waitingRoomType?: string(name='WaitingRoomType', example='default'),
}

model UpdateWaitingRoomResponseBody = {
  requestId?: string(name='RequestId', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomResponseBody(name='body'),
}

/**
 * @summary 修改等候室
 *
 * @param tmpReq UpdateWaitingRoomRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomResponse
 */
async function updateWaitingRoomWithOptions(tmpReq: UpdateWaitingRoomRequest, runtime: Util.RuntimeOptions): UpdateWaitingRoomResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWaitingRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hostNameAndPath)) {
    request.hostNameAndPathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostNameAndPath, 'HostNameAndPath', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cookieName)) {
    query['CookieName'] = request.cookieName;
  }
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.hostNameAndPathShrink)) {
    query['HostNameAndPath'] = request.hostNameAndPathShrink;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.queueAllEnable)) {
    query['QueueAllEnable'] = request.queueAllEnable;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomId)) {
    query['WaitingRoomId'] = request.waitingRoomId;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWaitingRoom',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改等候室
 *
 * @param request UpdateWaitingRoomRequest
 * @return UpdateWaitingRoomResponse
 */
async function updateWaitingRoom(request: UpdateWaitingRoomRequest): UpdateWaitingRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWaitingRoomWithOptions(request, runtime);
}

model UpdateWaitingRoomEventRequest {
  customPageHtml?: string(name='CustomPageHtml', example='html-yets-maqi1111'),
  description?: string(name='Description', example='http://yywyyw.com'),
  disableSessionRenewalEnable?: string(name='DisableSessionRenewalEnable', example='off'),
  enable?: string(name='Enable', example='on'),
  endTime?: string(name='EndTime', example='1719849600'),
  jsonResponseEnable?: string(name='JsonResponseEnable', example='off'),
  language?: string(name='Language', example='enus'),
  name?: string(name='Name'),
  newUsersPerMinute?: string(name='NewUsersPerMinute', example='300'),
  preQueueEnable?: string(name='PreQueueEnable', example='on'),
  preQueueStartTime?: string(name='PreQueueStartTime', example='1719763200'),
  queuingMethod?: string(name='QueuingMethod', example='fifo'),
  queuingStatusCode?: string(name='QueuingStatusCode', example='200'),
  randomPreQueueEnable?: string(name='RandomPreQueueEnable', example='on'),
  sessionDuration?: string(name='SessionDuration', example='5'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  startTime?: string(name='StartTime', example='1719763200'),
  totalActiveUsers?: string(name='TotalActiveUsers', example='200'),
  waitingRoomEventId?: long(name='WaitingRoomEventId', example='89677721098****'),
  waitingRoomType?: string(name='WaitingRoomType', example='custom'),
}

model UpdateWaitingRoomEventResponseBody = {
  requestId?: string(name='RequestId', example='0195619f-eab3-4a66-ac00-ed53d913e72e'),
}

model UpdateWaitingRoomEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomEventResponseBody(name='body'),
}

/**
 * @summary 修改等候室事件
 *
 * @param request UpdateWaitingRoomEventRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomEventResponse
 */
async function updateWaitingRoomEventWithOptions(request: UpdateWaitingRoomEventRequest, runtime: Util.RuntimeOptions): UpdateWaitingRoomEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customPageHtml)) {
    query['CustomPageHtml'] = request.customPageHtml;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableSessionRenewalEnable)) {
    query['DisableSessionRenewalEnable'] = request.disableSessionRenewalEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jsonResponseEnable)) {
    query['JsonResponseEnable'] = request.jsonResponseEnable;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newUsersPerMinute)) {
    query['NewUsersPerMinute'] = request.newUsersPerMinute;
  }
  if (!Util.isUnset(request.preQueueEnable)) {
    query['PreQueueEnable'] = request.preQueueEnable;
  }
  if (!Util.isUnset(request.preQueueStartTime)) {
    query['PreQueueStartTime'] = request.preQueueStartTime;
  }
  if (!Util.isUnset(request.queuingMethod)) {
    query['QueuingMethod'] = request.queuingMethod;
  }
  if (!Util.isUnset(request.queuingStatusCode)) {
    query['QueuingStatusCode'] = request.queuingStatusCode;
  }
  if (!Util.isUnset(request.randomPreQueueEnable)) {
    query['RandomPreQueueEnable'] = request.randomPreQueueEnable;
  }
  if (!Util.isUnset(request.sessionDuration)) {
    query['SessionDuration'] = request.sessionDuration;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.totalActiveUsers)) {
    query['TotalActiveUsers'] = request.totalActiveUsers;
  }
  if (!Util.isUnset(request.waitingRoomEventId)) {
    query['WaitingRoomEventId'] = request.waitingRoomEventId;
  }
  if (!Util.isUnset(request.waitingRoomType)) {
    query['WaitingRoomType'] = request.waitingRoomType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWaitingRoomEvent',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改等候室事件
 *
 * @param request UpdateWaitingRoomEventRequest
 * @return UpdateWaitingRoomEventResponse
 */
async function updateWaitingRoomEvent(request: UpdateWaitingRoomEventRequest): UpdateWaitingRoomEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWaitingRoomEventWithOptions(request, runtime);
}

model UpdateWaitingRoomRuleRequest {
  rule?: string(name='Rule', description='This parameter is required.', example='(http.request.uri.path.file_name eq \\\\"jpg\\\\")'),
  ruleEnable?: string(name='RuleEnable', description='This parameter is required.', example='on'),
  ruleName?: string(name='RuleName', description='This parameter is required.', example='test1'),
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456****'),
  waitingRoomRuleId?: long(name='WaitingRoomRuleId', example='8987739839****'),
}

model UpdateWaitingRoomRuleResponseBody = {
  requestId?: string(name='RequestId', example='9bfe9d95-7bf6-469d-a628-ed7bc9f25073'),
}

model UpdateWaitingRoomRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWaitingRoomRuleResponseBody(name='body'),
}

/**
 * @summary 修改等候室规则
 *
 * @param request UpdateWaitingRoomRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWaitingRoomRuleResponse
 */
async function updateWaitingRoomRuleWithOptions(request: UpdateWaitingRoomRuleRequest, runtime: Util.RuntimeOptions): UpdateWaitingRoomRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.ruleEnable)) {
    query['RuleEnable'] = request.ruleEnable;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.waitingRoomRuleId)) {
    query['WaitingRoomRuleId'] = request.waitingRoomRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWaitingRoomRule',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改等候室规则
 *
 * @param request UpdateWaitingRoomRuleRequest
 * @return UpdateWaitingRoomRuleResponse
 */
async function updateWaitingRoomRule(request: UpdateWaitingRoomRuleRequest): UpdateWaitingRoomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWaitingRoomRuleWithOptions(request, runtime);
}

model UploadFileRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='This parameter is required.', example='file'),
  uploadTaskName?: string(name='UploadTaskName', description='This parameter is required.', example='purge_task_2024_11_11'),
  url?: string(name='Url', description='This parameter is required.', example='https://xxxxx.oss-cn-shenzhen.aliyuncs.com/test_oss_file?Expires=1708659191&OSSAccessKeyId=**********&Signature=**********'),
}

model UploadFileAdvanceRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='123456789****'),
  type?: string(name='Type', description='This parameter is required.', example='file'),
  uploadTaskName?: string(name='UploadTaskName', description='This parameter is required.', example='purge_task_2024_11_11'),
  urlObject?: readable(name='Url', description='This parameter is required.', example='https://xxxxx.oss-cn-shenzhen.aliyuncs.com/test_oss_file?Expires=1708659191&OSSAccessKeyId=**********&Signature=**********'),
}

model UploadFileResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  uploadId?: long(name='UploadId', example='159253299357****'),
}

model UploadFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadFileResponseBody(name='body'),
}

/**
 * @summary 缓存刷新文件上传
 *
 * @param request UploadFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadFileResponse
 */
async function uploadFileWithOptions(request: UploadFileRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uploadTaskName)) {
    query['UploadTaskName'] = request.uploadTaskName;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadFile',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 缓存刷新文件上传
 *
 * @param request UploadFileRequest
 * @return UploadFileResponse
 */
async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadFileWithOptions(request, runtime);
}

async function uploadFileAdvance(request: UploadFileAdvanceRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ESA',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var uploadFileReq = new UploadFileRequest{};
  OpenApiUtil.convert(request, uploadFileReq);

  if(!Util.isUnset(request.urlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    uploadFileReq.url = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var uploadFileResp = uploadFileWithOptions(uploadFileReq, runtime);
  return uploadFileResp;
}

model VerifySiteRequest {
  siteId?: long(name='SiteId', description='This parameter is required.', example='1234567890123'),
}

model VerifySiteResponseBody = {
  passed?: boolean(name='Passed', example='true'),
  requestId?: string(name='RequestId', example='65C66B7B-671A-8297-9187-2R5477247B76'),
}

model VerifySiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifySiteResponseBody(name='body'),
}

/**
 * @summary 校验站点的归属
 *
 * @param request VerifySiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return VerifySiteResponse
 */
async function verifySiteWithOptions(request: VerifySiteRequest, runtime: Util.RuntimeOptions): VerifySiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifySite',
    version = '2024-09-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 校验站点的归属
 *
 * @param request VerifySiteRequest
 * @return VerifySiteResponse
 */
async function verifySite(request: VerifySiteRequest): VerifySiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifySiteWithOptions(request, runtime);
}

