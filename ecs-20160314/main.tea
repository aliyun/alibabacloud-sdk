/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'ecs.aliyuncs.com',
    ap-northeast-2-pop = 'ecs.aliyuncs.com',
    cn-beijing-finance-pop = 'ecs.aliyuncs.com',
    cn-beijing-gov-1 = 'ecs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-edge-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-finance = 'ecs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-test-306 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong-finance-pop = 'ecs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-inner = 'ecs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-inner = 'ecs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-wuhan = 'ecs.aliyuncs.com',
    cn-yushanfang = 'ecs.aliyuncs.com',
    cn-zhangbei = 'ecs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ecs.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'ecs.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'ecs.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ecs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddMigratableInstancesRequest {
  businessMigrationType?: int32(name='BusinessMigrationType'),
  instanceId?: [ string ](name='InstanceId'),
  networkMigrationType?: int32(name='NetworkMigrationType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model AddMigratableInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddMigratableInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMigratableInstancesResponseBody(name='body'),
}

async function addMigratableInstancesWithOptions(request: AddMigratableInstancesRequest, runtime: Util.RuntimeOptions): AddMigratableInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessMigrationType)) {
    query['BusinessMigrationType'] = request.businessMigrationType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkMigrationType)) {
    query['NetworkMigrationType'] = request.networkMigrationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMigratableInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMigratableInstances(request: AddMigratableInstancesRequest): AddMigratableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMigratableInstancesWithOptions(request, runtime);
}

model AllocateDedicatedHostsRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout'),
    udpTimeout?: int32(name='UdpTimeout'),
  }(name='NetworkAttributes'),
  schedulerOptions?: {
    managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
  }(name='SchedulerOptions'),
  actionOnMaintenance?: string(name='ActionOnMaintenance'),
  autoPlacement?: string(name='AutoPlacement'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  businessInfo?: string(name='BusinessInfo'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  dedicatedHostType?: string(name='DedicatedHostType'),
  description?: string(name='Description'),
  fromApp?: string(name='FromApp'),
  minQuantity?: int32(name='MinQuantity'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  quantity?: int32(name='Quantity'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model AllocateDedicatedHostsResponseBody = {
  dedicatedHostIdSets?: {
    dedicatedHostId?: [ string ](name='DedicatedHostId')
  }(name='DedicatedHostIdSets'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model AllocateDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateDedicatedHostsResponseBody(name='body'),
}

async function allocateDedicatedHostsWithOptions(request: AllocateDedicatedHostsRequest, runtime: Util.RuntimeOptions): AllocateDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionOnMaintenance)) {
    query['ActionOnMaintenance'] = request.actionOnMaintenance;
  }
  if (!Util.isUnset(request.autoPlacement)) {
    query['AutoPlacement'] = request.autoPlacement;
  }
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.cpuOverCommitRatio)) {
    query['CpuOverCommitRatio'] = request.cpuOverCommitRatio;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.minQuantity)) {
    query['MinQuantity'] = request.minQuantity;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.networkAttributes)) {
    query['NetworkAttributes'] = request.networkAttributes;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateDedicatedHosts',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateDedicatedHosts(request: AllocateDedicatedHostsRequest): AllocateDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateDedicatedHostsWithOptions(request, runtime);
}

model CancelMigrationInstancesRequest {
  instanceId?: [ string ](name='InstanceId'),
  networkMigrationType?: string(name='NetworkMigrationType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelMigrationInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelMigrationInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelMigrationInstancesResponseBody(name='body'),
}

async function cancelMigrationInstancesWithOptions(request: CancelMigrationInstancesRequest, runtime: Util.RuntimeOptions): CancelMigrationInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkMigrationType)) {
    query['NetworkMigrationType'] = request.networkMigrationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelMigrationInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelMigrationInstances(request: CancelMigrationInstancesRequest): CancelMigrationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelMigrationInstancesWithOptions(request, runtime);
}

model CancelMigrationPlanRequest {
  migrationPlanId?: string(name='MigrationPlanId'),
  onlyCancelPlan?: boolean(name='OnlyCancelPlan'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelMigrationPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelMigrationPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelMigrationPlanResponseBody(name='body'),
}

async function cancelMigrationPlanWithOptions(request: CancelMigrationPlanRequest, runtime: Util.RuntimeOptions): CancelMigrationPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.migrationPlanId)) {
    query['MigrationPlanId'] = request.migrationPlanId;
  }
  if (!Util.isUnset(request.onlyCancelPlan)) {
    query['OnlyCancelPlan'] = request.onlyCancelPlan;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelMigrationPlan',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelMigrationPlan(request: CancelMigrationPlanRequest): CancelMigrationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelMigrationPlanWithOptions(request, runtime);
}

model ConfigureSecurityGroupPermissionsRequest {
  authorizePermission?: [ 
    {
      description?: string(name='Description'),
      destCidrIp?: string(name='DestCidrIp'),
      destGroupId?: string(name='DestGroupId'),
      destPrefixListId?: string(name='DestPrefixListId'),
      direction?: string(name='Direction'),
      gressFlow?: string(name='GressFlow'),
      groupOwnerAccount?: string(name='GroupOwnerAccount'),
      groupOwnerId?: long(name='GroupOwnerId'),
      ipProtocol?: string(name='IpProtocol'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
      nicType?: string(name='NicType'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      sourceGroupId?: string(name='SourceGroupId'),
      sourcePortRange?: string(name='SourcePortRange'),
      sourcePrefixListId?: string(name='SourcePrefixListId'),
    }
  ](name='AuthorizePermission'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  revokePermission?: [ 
    {
      description?: string(name='Description'),
      destCidrIp?: string(name='DestCidrIp'),
      destGroupId?: string(name='DestGroupId'),
      destPrefixListId?: string(name='DestPrefixListId'),
      direction?: string(name='Direction'),
      gressFlow?: string(name='GressFlow'),
      groupOwnerAccount?: string(name='GroupOwnerAccount'),
      groupOwnerId?: long(name='GroupOwnerId'),
      ipProtocol?: string(name='IpProtocol'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
      nicType?: string(name='NicType'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      sourceGroupId?: string(name='SourceGroupId'),
      sourcePortRange?: string(name='SourcePortRange'),
      sourcePrefixListId?: string(name='SourcePrefixListId'),
    }
  ](name='RevokePermission'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model ConfigureSecurityGroupPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigureSecurityGroupPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigureSecurityGroupPermissionsResponseBody(name='body'),
}

async function configureSecurityGroupPermissionsWithOptions(request: ConfigureSecurityGroupPermissionsRequest, runtime: Util.RuntimeOptions): ConfigureSecurityGroupPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizePermission)) {
    query['AuthorizePermission'] = request.authorizePermission;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.revokePermission)) {
    query['RevokePermission'] = request.revokePermission;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigureSecurityGroupPermissions',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configureSecurityGroupPermissions(request: ConfigureSecurityGroupPermissionsRequest): ConfigureSecurityGroupPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return configureSecurityGroupPermissionsWithOptions(request, runtime);
}

model ConfirmReservationDemandRequest {
  demandId?: string(name='DemandId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ConfirmReservationDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfirmReservationDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmReservationDemandResponseBody(name='body'),
}

async function confirmReservationDemandWithOptions(request: ConfirmReservationDemandRequest, runtime: Util.RuntimeOptions): ConfirmReservationDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmReservationDemand',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmReservationDemand(request: ConfirmReservationDemandRequest): ConfirmReservationDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmReservationDemandWithOptions(request, runtime);
}

model CreateCapacityReservationRequest {
  capacityReservationName?: string(name='CapacityReservationName'),
  description?: string(name='Description'),
  endDateType?: string(name='EndDateType'),
  instanceCount?: string(name='InstanceCount'),
  instanceMatchCriteria?: string(name='InstanceMatchCriteria'),
  instancePlatform?: string(name='InstancePlatform'),
  instanceType?: string(name='InstanceType'),
  networkType?: string(name='NetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  timeSlot?: string(name='TimeSlot'),
  zoneId?: string(name='ZoneId'),
}

model CreateCapacityReservationResponseBody = {
  capacityReservationId?: string(name='CapacityReservationId'),
  requestId?: string(name='RequestId'),
}

model CreateCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCapacityReservationResponseBody(name='body'),
}

async function createCapacityReservationWithOptions(request: CreateCapacityReservationRequest, runtime: Util.RuntimeOptions): CreateCapacityReservationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacityReservationName)) {
    query['CapacityReservationName'] = request.capacityReservationName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endDateType)) {
    query['EndDateType'] = request.endDateType;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.instanceMatchCriteria)) {
    query['InstanceMatchCriteria'] = request.instanceMatchCriteria;
  }
  if (!Util.isUnset(request.instancePlatform)) {
    query['InstancePlatform'] = request.instancePlatform;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timeSlot)) {
    query['TimeSlot'] = request.timeSlot;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCapacityReservation',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCapacityReservation(request: CreateCapacityReservationRequest): CreateCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCapacityReservationWithOptions(request, runtime);
}

model CreateDedicatedBlockStorageClusterRequest {
  capacity?: int32(name='Capacity'),
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  dedicatedBlockStorageClusterName?: string(name='DedicatedBlockStorageClusterName'),
  description?: string(name='Description'),
  fromApp?: string(name='FromApp'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type'),
  zoneId?: string(name='ZoneId'),
}

model CreateDedicatedBlockStorageClusterResponseBody = {
  dedicatedBlockStorageClusterId?: string(name='DedicatedBlockStorageClusterId'),
  dedicatedBlockStorageClusterOrderId?: string(name='DedicatedBlockStorageClusterOrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedBlockStorageClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedBlockStorageClusterResponseBody(name='body'),
}

async function createDedicatedBlockStorageClusterWithOptions(request: CreateDedicatedBlockStorageClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedBlockStorageClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedBlockStorageClusterName)) {
    query['DedicatedBlockStorageClusterName'] = request.dedicatedBlockStorageClusterName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedBlockStorageCluster',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedBlockStorageCluster(request: CreateDedicatedBlockStorageClusterRequest): CreateDedicatedBlockStorageClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedBlockStorageClusterWithOptions(request, runtime);
}

model CreateDedicatedHostClusterRequest {
  schedulerOptions?: {
    managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
  }(name='SchedulerOptions'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model CreateDedicatedHostClusterResponseBody = {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedHostClusterResponseBody(name='body'),
}

async function createDedicatedHostClusterWithOptions(request: CreateDedicatedHostClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterName)) {
    query['DedicatedHostClusterName'] = request.dedicatedHostClusterName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHostCluster',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHostCluster(request: CreateDedicatedHostClusterRequest): CreateDedicatedHostClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostClusterWithOptions(request, runtime);
}

model CreateDefaultAutoSnapshotPolicyRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateDefaultAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
  repeatWeekdays?: string(name='RepeatWeekdays'),
  requestId?: string(name='RequestId'),
  retentionDays?: int32(name='RetentionDays'),
  timePoints?: string(name='TimePoints'),
}

model CreateDefaultAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefaultAutoSnapshotPolicyResponseBody(name='body'),
}

async function createDefaultAutoSnapshotPolicyWithOptions(request: CreateDefaultAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateDefaultAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefaultAutoSnapshotPolicy',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefaultAutoSnapshotPolicy(request: CreateDefaultAutoSnapshotPolicyRequest): CreateDefaultAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefaultAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateDiagnoseRequest {
  amount?: int32(name='Amount'),
  diagnoseAction?: string(name='DiagnoseAction'),
  diagnoseErrorCode?: string(name='DiagnoseErrorCode'),
  diagnoseProduct?: string(name='DiagnoseProduct'),
  diagnoseRequestId?: string(name='DiagnoseRequestId'),
  diagnoseRequestParams?: string(name='DiagnoseRequestParams'),
  diagnoseResponse?: string(name='DiagnoseResponse'),
  diskCategory?: string(name='DiskCategory'),
  expireTime?: string(name='ExpireTime'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceTypeName?: string(name='InstanceTypeName'),
  izNo?: string(name='IzNo'),
  mark?: string(name='Mark'),
  networkType?: string(name='NetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  type?: int32(name='Type'),
}

model CreateDiagnoseResponseBody = {
  diagnoseId?: string(name='DiagnoseId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiagnoseResponseBody(name='body'),
}

async function createDiagnoseWithOptions(request: CreateDiagnoseRequest, runtime: Util.RuntimeOptions): CreateDiagnoseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.diagnoseAction)) {
    query['DiagnoseAction'] = request.diagnoseAction;
  }
  if (!Util.isUnset(request.diagnoseErrorCode)) {
    query['DiagnoseErrorCode'] = request.diagnoseErrorCode;
  }
  if (!Util.isUnset(request.diagnoseProduct)) {
    query['DiagnoseProduct'] = request.diagnoseProduct;
  }
  if (!Util.isUnset(request.diagnoseRequestId)) {
    query['DiagnoseRequestId'] = request.diagnoseRequestId;
  }
  if (!Util.isUnset(request.diagnoseRequestParams)) {
    query['DiagnoseRequestParams'] = request.diagnoseRequestParams;
  }
  if (!Util.isUnset(request.diagnoseResponse)) {
    query['DiagnoseResponse'] = request.diagnoseResponse;
  }
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceTypeName)) {
    query['InstanceTypeName'] = request.instanceTypeName;
  }
  if (!Util.isUnset(request.izNo)) {
    query['IzNo'] = request.izNo;
  }
  if (!Util.isUnset(request.mark)) {
    query['Mark'] = request.mark;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiagnose',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiagnose(request: CreateDiagnoseRequest): CreateDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnoseWithOptions(request, runtime);
}

model CreateDiagnosisOperateRecordsRequest {
  errorCode?: string(name='ErrorCode'),
  instanceType?: string(name='InstanceType'),
  newInstanceType?: string(name='NewInstanceType'),
  newZoneId?: string(name='NewZoneId'),
  operateRecordType?: string(name='OperateRecordType'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model CreateDiagnosisOperateRecordsResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDiagnosisOperateRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiagnosisOperateRecordsResponseBody(name='body'),
}

async function createDiagnosisOperateRecordsWithOptions(request: CreateDiagnosisOperateRecordsRequest, runtime: Util.RuntimeOptions): CreateDiagnosisOperateRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.newInstanceType)) {
    query['NewInstanceType'] = request.newInstanceType;
  }
  if (!Util.isUnset(request.newZoneId)) {
    query['NewZoneId'] = request.newZoneId;
  }
  if (!Util.isUnset(request.operateRecordType)) {
    query['OperateRecordType'] = request.operateRecordType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiagnosisOperateRecords',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiagnosisOperateRecords(request: CreateDiagnosisOperateRecordsRequest): CreateDiagnosisOperateRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosisOperateRecordsWithOptions(request, runtime);
}

model CreateDiagnosticReportRequest {
  clientToken?: string(name='ClientToken'),
  commandName?: [ string ](name='CommandName'),
  commandType?: string(name='CommandType'),
  diagnosticCategory?: string(name='DiagnosticCategory'),
  endTime?: string(name='EndTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pluginVersion?: string(name='PluginVersion'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  sourceSystem?: string(name='SourceSystem'),
  startTime?: string(name='StartTime'),
}

model CreateDiagnosticReportResponseBody = {
  commandInvokeResults?: {
    invokeResult?: [ 
    {
      commandName?: string(name='CommandName'),
      dataFileDir?: string(name='DataFileDir'),
      invokeResult?: string(name='InvokeResult'),
    }
  ](name='InvokeResult')
  }(name='CommandInvokeResults'),
  createTime?: string(name='CreateTime'),
  reportId?: string(name='ReportId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commandName)) {
    query['CommandName'] = request.commandName;
  }
  if (!Util.isUnset(request.commandType)) {
    query['CommandType'] = request.commandType;
  }
  if (!Util.isUnset(request.diagnosticCategory)) {
    query['DiagnosticCategory'] = request.diagnosticCategory;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pluginVersion)) {
    query['PluginVersion'] = request.pluginVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.sourceSystem)) {
    query['SourceSystem'] = request.sourceSystem;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.sourceSystem)) {
    query['sourceSystem'] = request.sourceSystem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiagnosticReport',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model CreateDisksRequest {
  amount?: int32(name='Amount'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  burstingEnabled?: boolean(name='BurstingEnabled'),
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  diskName?: string(name='DiskName'),
  encryptAlgorithm?: string(name='EncryptAlgorithm'),
  encrypted?: boolean(name='Encrypted'),
  KMSKeyId?: string(name='KMSKeyId'),
  multiAttach?: string(name='MultiAttach'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  performanceLevel?: string(name='PerformanceLevel'),
  provisionedIops?: long(name='ProvisionedIops'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  size?: int32(name='Size'),
  snapshotId?: string(name='SnapshotId'),
  storageClusterId?: string(name='StorageClusterId'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model CreateDisksResponseBody = {
  diskId?: {
    diskIds?: [ string ](name='DiskIds')
  }(name='DiskId'),
  requestId?: string(name='RequestId'),
}

model CreateDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDisksResponseBody(name='body'),
}

async function createDisksWithOptions(request: CreateDisksRequest, runtime: Util.RuntimeOptions): CreateDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.burstingEnabled)) {
    query['BurstingEnabled'] = request.burstingEnabled;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.diskName)) {
    query['DiskName'] = request.diskName;
  }
  if (!Util.isUnset(request.encryptAlgorithm)) {
    query['EncryptAlgorithm'] = request.encryptAlgorithm;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.multiAttach)) {
    query['MultiAttach'] = request.multiAttach;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.performanceLevel)) {
    query['PerformanceLevel'] = request.performanceLevel;
  }
  if (!Util.isUnset(request.provisionedIops)) {
    query['ProvisionedIops'] = request.provisionedIops;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.storageClusterId)) {
    query['StorageClusterId'] = request.storageClusterId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDisks',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDisks(request: CreateDisksRequest): CreateDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDisksWithOptions(request, runtime);
}

model CreateElasticityAssuranceRequest {
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    name?: string(name='Name'),
  }(name='PrivatePoolOptions'),
  assuranceTimes?: string(name='AssuranceTimes'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  instanceAmount?: int32(name='InstanceAmount'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount'),
  instanceType?: [ string ](name='InstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: [ string ](name='ZoneId'),
}

model CreateElasticityAssuranceResponseBody = {
  orderId?: string(name='OrderId'),
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
  requestId?: string(name='RequestId'),
}

model CreateElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateElasticityAssuranceResponseBody(name='body'),
}

async function createElasticityAssuranceWithOptions(request: CreateElasticityAssuranceRequest, runtime: Util.RuntimeOptions): CreateElasticityAssuranceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assuranceTimes)) {
    query['AssuranceTimes'] = request.assuranceTimes;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceCpuCoreCount)) {
    query['InstanceCpuCoreCount'] = request.instanceCpuCoreCount;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateElasticityAssurance',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createElasticityAssurance(request: CreateElasticityAssuranceRequest): CreateElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createElasticityAssuranceWithOptions(request, runtime);
}

model CreateEniQosGroupRequest {
  instanceId?: string(name='InstanceId'),
  ownerId?: long(name='OwnerId'),
  qosGroupName?: string(name='QosGroupName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rx?: int32(name='Rx'),
  rxPps?: int32(name='RxPps'),
  tx?: int32(name='Tx'),
  txPps?: int32(name='TxPps'),
}

model CreateEniQosGroupResponseBody = {
  qosGroupName?: string(name='QosGroupName'),
  requestId?: string(name='RequestId'),
}

model CreateEniQosGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEniQosGroupResponseBody(name='body'),
}

async function createEniQosGroupWithOptions(request: CreateEniQosGroupRequest, runtime: Util.RuntimeOptions): CreateEniQosGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosGroupName)) {
    query['QosGroupName'] = request.qosGroupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.rx)) {
    query['Rx'] = request.rx;
  }
  if (!Util.isUnset(request.rxPps)) {
    query['RxPps'] = request.rxPps;
  }
  if (!Util.isUnset(request.tx)) {
    query['Tx'] = request.tx;
  }
  if (!Util.isUnset(request.txPps)) {
    query['TxPps'] = request.txPps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEniQosGroup',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEniQosGroup(request: CreateEniQosGroupRequest): CreateEniQosGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEniQosGroupWithOptions(request, runtime);
}

model CreateFunctionFeedbackRequest {
  category?: string(name='Category'),
  feedback?: string(name='Feedback'),
  functionName?: string(name='FunctionName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  suggestion?: string(name='Suggestion'),
}

model CreateFunctionFeedbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateFunctionFeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFunctionFeedbackResponseBody(name='body'),
}

async function createFunctionFeedbackWithOptions(request: CreateFunctionFeedbackRequest, runtime: Util.RuntimeOptions): CreateFunctionFeedbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.suggestion)) {
    query['Suggestion'] = request.suggestion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFunctionFeedback',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFunctionFeedback(request: CreateFunctionFeedbackRequest): CreateFunctionFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFunctionFeedbackWithOptions(request, runtime);
}

model CreateImageCacheRequest {
  clientToken?: string(name='ClientToken'),
  imageId?: string(name='ImageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model CreateImageCacheResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateImageCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageCacheResponseBody(name='body'),
}

async function createImageCacheWithOptions(request: CreateImageCacheRequest, runtime: Util.RuntimeOptions): CreateImageCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageCache',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageCache(request: CreateImageCacheRequest): CreateImageCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageCacheWithOptions(request, runtime);
}

model CreateIssueCategoryReportRelationRequest {
  regionId?: string(name='RegionId'),
  relationModelList?: [ 
    {
      customerInputContent?: string(name='CustomerInputContent'),
      issueCategoryId?: long(name='IssueCategoryId'),
      issueCategoryName?: string(name='IssueCategoryName'),
      mappingTools?: string(name='MappingTools'),
      reportId?: string(name='ReportId'),
    }
  ](name='RelationModelList'),
}

model CreateIssueCategoryReportRelationResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateIssueCategoryReportRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIssueCategoryReportRelationResponseBody(name='body'),
}

async function createIssueCategoryReportRelationWithOptions(request: CreateIssueCategoryReportRelationRequest, runtime: Util.RuntimeOptions): CreateIssueCategoryReportRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.relationModelList)) {
    query['RelationModelList'] = request.relationModelList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIssueCategoryReportRelation',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIssueCategoryReportRelation(request: CreateIssueCategoryReportRelationRequest): CreateIssueCategoryReportRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIssueCategoryReportRelationWithOptions(request, runtime);
}

model CreateMigrationPlanRequest {
  customMigrationTimes?: [ 
    {
      instanceId?: string(name='InstanceId'),
      migrationTime?: string(name='MigrationTime'),
    }
  ](name='CustomMigrationTimes'),
  dryRun?: boolean(name='DryRun'),
  enableAutoCreateVSwitch?: boolean(name='EnableAutoCreateVSwitch'),
  ensureNetworkConnectivity?: boolean(name='EnsureNetworkConnectivity'),
  globalMigrationTime?: string(name='GlobalMigrationTime'),
  instanceIds?: [ string ](name='InstanceIds'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  remainPrivateIp?: boolean(name='RemainPrivateIp'),
  remainPublicMacAsPriority?: boolean(name='RemainPublicMacAsPriority'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  targetSecurityGroupIds?: [ string ](name='TargetSecurityGroupIds'),
  targetVSwitchId?: string(name='TargetVSwitchId'),
  targetVpcId?: string(name='TargetVpcId'),
  targetZoneId?: string(name='TargetZoneId'),
  type?: string(name='Type'),
}

model CreateMigrationPlanResponseBody = {
  instancesFailModels?: {
    instancesFailModel?: [ 
    {
      failModels?: {
        failModel?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
        }
      ](name='FailModel')
      }(name='FailModels'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstancesFailModel')
  }(name='InstancesFailModels'),
  migrationPlanId?: string(name='MigrationPlanId'),
  planFailModels?: {
    planFailModel?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
    }
  ](name='PlanFailModel')
  }(name='PlanFailModels'),
  requestId?: string(name='RequestId'),
  sgFailModels?: {
    sgFailModel?: [ 
    {
      failModels?: {
        failModel?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
        }
      ](name='FailModel')
      }(name='FailModels'),
      groupNo?: string(name='GroupNo'),
    }
  ](name='SgFailModel')
  }(name='SgFailModels'),
}

model CreateMigrationPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMigrationPlanResponseBody(name='body'),
}

async function createMigrationPlanWithOptions(request: CreateMigrationPlanRequest, runtime: Util.RuntimeOptions): CreateMigrationPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customMigrationTimes)) {
    query['CustomMigrationTimes'] = request.customMigrationTimes;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.enableAutoCreateVSwitch)) {
    query['EnableAutoCreateVSwitch'] = request.enableAutoCreateVSwitch;
  }
  if (!Util.isUnset(request.ensureNetworkConnectivity)) {
    query['EnsureNetworkConnectivity'] = request.ensureNetworkConnectivity;
  }
  if (!Util.isUnset(request.globalMigrationTime)) {
    query['GlobalMigrationTime'] = request.globalMigrationTime;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remainPrivateIp)) {
    query['RemainPrivateIp'] = request.remainPrivateIp;
  }
  if (!Util.isUnset(request.remainPublicMacAsPriority)) {
    query['RemainPublicMacAsPriority'] = request.remainPublicMacAsPriority;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.targetSecurityGroupIds)) {
    query['TargetSecurityGroupIds'] = request.targetSecurityGroupIds;
  }
  if (!Util.isUnset(request.targetVSwitchId)) {
    query['TargetVSwitchId'] = request.targetVSwitchId;
  }
  if (!Util.isUnset(request.targetVpcId)) {
    query['TargetVpcId'] = request.targetVpcId;
  }
  if (!Util.isUnset(request.targetZoneId)) {
    query['TargetZoneId'] = request.targetZoneId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMigrationPlan',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMigrationPlan(request: CreateMigrationPlanRequest): CreateMigrationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrationPlanWithOptions(request, runtime);
}

model CreateNetworkInsightsPathRequest {
  clientToken?: string(name='ClientToken'),
  destination?: string(name='Destination'),
  destinationPort?: string(name='DestinationPort'),
  destinationType?: string(name='DestinationType'),
  dryRun?: boolean(name='DryRun'),
  needDiagnoseGuest?: boolean(name='NeedDiagnoseGuest'),
  networkInsightsPathName?: string(name='NetworkInsightsPathName'),
  protocol?: string(name='Protocol'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
}

model CreateNetworkInsightsPathResponseBody = {
  networkInsightsPathId?: string(name='NetworkInsightsPathId'),
  requestId?: string(name='RequestId'),
}

model CreateNetworkInsightsPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkInsightsPathResponseBody(name='body'),
}

async function createNetworkInsightsPathWithOptions(request: CreateNetworkInsightsPathRequest, runtime: Util.RuntimeOptions): CreateNetworkInsightsPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationPort)) {
    query['DestinationPort'] = request.destinationPort;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.needDiagnoseGuest)) {
    query['NeedDiagnoseGuest'] = request.needDiagnoseGuest;
  }
  if (!Util.isUnset(request.networkInsightsPathName)) {
    query['NetworkInsightsPathName'] = request.networkInsightsPathName;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkInsightsPath',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNetworkInsightsPath(request: CreateNetworkInsightsPathRequest): CreateNetworkInsightsPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInsightsPathWithOptions(request, runtime);
}

model CreateOrderRequest {
  affinity?: string(name='Affinity'),
  asyncPattern?: boolean(name='AsyncPattern'),
  businessInfo?: string(name='BusinessInfo'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  commodity?: string(name='Commodity'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  fromApp?: string(name='FromApp'),
  orderType?: string(name='OrderType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tenancy?: string(name='Tenancy'),
}

model CreateOrderResponseBody = {
  orderId?: string(name='OrderId'),
  orderParams?: {
    orderParam?: [ string ](name='OrderParam')
  }(name='OrderParams'),
  relatedOrderItemSets?: {
    relatedOrderItemSet?: [ 
    {
      instanceIdSet?: {
        instanceIds?: [ string ](name='InstanceIds')
      }(name='InstanceIdSet'),
      relatedOrderIds?: {
        relatedOrderId?: [ string ](name='RelatedOrderId')
      }(name='RelatedOrderIds'),
    }
  ](name='RelatedOrderItemSet')
  }(name='RelatedOrderItemSets'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  tradePrice?: float(name='TradePrice'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrderWithOptions(request: CreateOrderRequest, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.asyncPattern)) {
    query['AsyncPattern'] = request.asyncPattern;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrder',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model CreateReservationDemandRequest {
  clientToken?: string(name='ClientToken'),
  confirmType?: string(name='ConfirmType'),
  couponAuto?: boolean(name='CouponAuto'),
  couponType?: string(name='CouponType'),
  description?: string(name='Description'),
  endTime?: string(name='EndTime'),
  instanceAmount?: int32(name='InstanceAmount'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  instanceTypes?: string(name='InstanceTypes'),
  matchCriteria?: string(name='MatchCriteria'),
  name?: string(name='Name'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  phoneNumber?: string(name='PhoneNumber'),
  platform?: string(name='Platform'),
  privatePoolOptions?: [ 
    {
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      matchCriteria?: string(name='MatchCriteria'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='PrivatePoolOptions'),
  productType?: string(name='ProductType'),
  regionId?: string(name='RegionId'),
  reservedInstanceDescription?: string(name='ReservedInstanceDescription'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  reservedInstanceOfferingType?: string(name='ReservedInstanceOfferingType'),
  reservedInstanceScope?: string(name='ReservedInstanceScope'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceSupplyType?: string(name='ResourceSupplyType'),
  savingPlanDescription?: string(name='SavingPlanDescription'),
  savingPlanHourFee?: float(name='SavingPlanHourFee'),
  savingPlanId?: string(name='SavingPlanId'),
  savingPlanInstanceTypeFamilyGroup?: string(name='SavingPlanInstanceTypeFamilyGroup'),
  savingPlanName?: string(name='SavingPlanName'),
  savingPlanPayMode?: string(name='SavingPlanPayMode'),
  savingPlanSavingType?: string(name='SavingPlanSavingType'),
  startTime?: string(name='StartTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneIds?: string(name='ZoneIds'),
}

model CreateReservationDemandResponseBody = {
  demandId?: string(name='DemandId'),
  requestId?: string(name='RequestId'),
}

model CreateReservationDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateReservationDemandResponseBody(name='body'),
}

async function createReservationDemandWithOptions(request: CreateReservationDemandRequest, runtime: Util.RuntimeOptions): CreateReservationDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.confirmType)) {
    query['ConfirmType'] = request.confirmType;
  }
  if (!Util.isUnset(request.couponAuto)) {
    query['CouponAuto'] = request.couponAuto;
  }
  if (!Util.isUnset(request.couponType)) {
    query['CouponType'] = request.couponType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceCpuCoreCount)) {
    query['InstanceCpuCoreCount'] = request.instanceCpuCoreCount;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.matchCriteria)) {
    query['MatchCriteria'] = request.matchCriteria;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceDescription)) {
    query['ReservedInstanceDescription'] = request.reservedInstanceDescription;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.reservedInstanceOfferingType)) {
    query['ReservedInstanceOfferingType'] = request.reservedInstanceOfferingType;
  }
  if (!Util.isUnset(request.reservedInstanceScope)) {
    query['ReservedInstanceScope'] = request.reservedInstanceScope;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceSupplyType)) {
    query['ResourceSupplyType'] = request.resourceSupplyType;
  }
  if (!Util.isUnset(request.savingPlanDescription)) {
    query['SavingPlanDescription'] = request.savingPlanDescription;
  }
  if (!Util.isUnset(request.savingPlanHourFee)) {
    query['SavingPlanHourFee'] = request.savingPlanHourFee;
  }
  if (!Util.isUnset(request.savingPlanId)) {
    query['SavingPlanId'] = request.savingPlanId;
  }
  if (!Util.isUnset(request.savingPlanInstanceTypeFamilyGroup)) {
    query['SavingPlanInstanceTypeFamilyGroup'] = request.savingPlanInstanceTypeFamilyGroup;
  }
  if (!Util.isUnset(request.savingPlanName)) {
    query['SavingPlanName'] = request.savingPlanName;
  }
  if (!Util.isUnset(request.savingPlanPayMode)) {
    query['SavingPlanPayMode'] = request.savingPlanPayMode;
  }
  if (!Util.isUnset(request.savingPlanSavingType)) {
    query['SavingPlanSavingType'] = request.savingPlanSavingType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneIds)) {
    query['ZoneIds'] = request.zoneIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateReservationDemand',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createReservationDemand(request: CreateReservationDemandRequest): CreateReservationDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReservationDemandWithOptions(request, runtime);
}

model CreateStorageSetRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  maxPartitionNumber?: int32(name='MaxPartitionNumber'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSetName?: string(name='StorageSetName'),
  zoneId?: string(name='ZoneId'),
}

model CreateStorageSetResponseBody = {
  requestId?: string(name='RequestId'),
  storageSetId?: string(name='StorageSetId'),
}

model CreateStorageSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStorageSetResponseBody(name='body'),
}

async function createStorageSetWithOptions(request: CreateStorageSetRequest, runtime: Util.RuntimeOptions): CreateStorageSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.maxPartitionNumber)) {
    query['MaxPartitionNumber'] = request.maxPartitionNumber;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStorageSet',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStorageSet(request: CreateStorageSetRequest): CreateStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStorageSetWithOptions(request, runtime);
}

model CreateUserQuotaApplicationRequest {
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  instanceType?: string(name='InstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  quotaType?: string(name='QuotaType'),
  quotaValue?: int32(name='QuotaValue'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model CreateUserQuotaApplicationResponseBody = {
  applicationId?: string(name='ApplicationId'),
  requestId?: string(name='RequestId'),
}

model CreateUserQuotaApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserQuotaApplicationResponseBody(name='body'),
}

async function createUserQuotaApplicationWithOptions(request: CreateUserQuotaApplicationRequest, runtime: Util.RuntimeOptions): CreateUserQuotaApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.quotaType)) {
    query['QuotaType'] = request.quotaType;
  }
  if (!Util.isUnset(request.quotaValue)) {
    query['QuotaValue'] = request.quotaValue;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserQuotaApplication',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserQuotaApplication(request: CreateUserQuotaApplicationRequest): CreateUserQuotaApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserQuotaApplicationWithOptions(request, runtime);
}

model CreateVolumesRequest {
  amount?: int32(name='Amount'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  KMSKeyId?: string(name='KMSKeyId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  size?: int32(name='Size'),
  snapshotId?: string(name='SnapshotId'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  volumeCategory?: string(name='VolumeCategory'),
  volumeEncrypted?: boolean(name='VolumeEncrypted'),
  volumeName?: string(name='VolumeName'),
  zoneId?: string(name='ZoneId'),
}

model CreateVolumesResponseBody = {
  requestId?: string(name='RequestId'),
  volumeIds?: {
    volumeId?: [ string ](name='VolumeId')
  }(name='VolumeIds'),
}

model CreateVolumesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVolumesResponseBody(name='body'),
}

async function createVolumesWithOptions(request: CreateVolumesRequest, runtime: Util.RuntimeOptions): CreateVolumesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.volumeCategory)) {
    query['VolumeCategory'] = request.volumeCategory;
  }
  if (!Util.isUnset(request.volumeEncrypted)) {
    query['VolumeEncrypted'] = request.volumeEncrypted;
  }
  if (!Util.isUnset(request.volumeName)) {
    query['VolumeName'] = request.volumeName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVolumes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVolumes(request: CreateVolumesRequest): CreateVolumesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVolumesWithOptions(request, runtime);
}

model CreateWaitingOrderRequest {
  cpuOptions?: {
    core?: int32(name='Core'),
    numa?: string(name='Numa'),
    threadsPerCore?: int32(name='ThreadsPerCore'),
  }(name='CpuOptions'),
  hibernationOptions?: {
    configured?: boolean(name='Configured'),
  }(name='HibernationOptions'),
  privatePoolOptions?: {
    id?: string(name='Id'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions'),
  schedulerOptions?: {
    dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  }(name='SchedulerOptions'),
  securityOptions?: {
    confidentialComputingMode?: string(name='ConfidentialComputingMode'),
    trustedSystemMode?: string(name='TrustedSystemMode'),
  }(name='SecurityOptions'),
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    category?: string(name='Category'),
    description?: string(name='Description'),
    diskName?: string(name='DiskName'),
    performanceLevel?: string(name='PerformanceLevel'),
    size?: string(name='Size'),
    storageClusterId?: string(name='StorageClusterId'),
  }(name='SystemDisk'),
  affinity?: string(name='Affinity'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor'),
      roleType?: string(name='RoleType'),
      rolearn?: string(name='Rolearn'),
    }
  ](name='Arn'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  clientToken?: string(name='ClientToken'),
  creditSpecification?: string(name='CreditSpecification'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      description?: string(name='Description'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      encryptAlgorithm?: string(name='EncryptAlgorithm'),
      encrypted?: string(name='Encrypted'),
      KMSKeyId?: string(name='KMSKeyId'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
      snapshotId?: string(name='SnapshotId'),
      storageClusterId?: string(name='StorageClusterId'),
    }
  ](name='DataDisk'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  deletionProtection?: boolean(name='DeletionProtection'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo'),
  deploymentSetId?: string(name='DeploymentSetId'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  expiredTime?: string(name='ExpiredTime'),
  hostName?: string(name='HostName'),
  hostNames?: [ string ](name='HostNames'),
  hpcClusterId?: string(name='HpcClusterId'),
  httpEndpoint?: string(name='HttpEndpoint'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
  httpTokens?: string(name='HttpTokens'),
  imageFamily?: string(name='ImageFamily'),
  imageId?: string(name='ImageId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  ioOptimized?: string(name='IoOptimized'),
  ipv6Address?: [ string ](name='Ipv6Address'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  isp?: string(name='Isp'),
  keyPairName?: string(name='KeyPairName'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  launchTemplateVersion?: long(name='LaunchTemplateVersion'),
  maxAmount?: int32(name='MaxAmount'),
  minAmount?: int32(name='MinAmount'),
  networkInterface?: [ 
    {
      description?: string(name='Description'),
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      primaryIpAddress?: string(name='PrimaryIpAddress'),
      queueNumber?: int32(name='QueueNumber'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='NetworkInterface'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  passwordInherit?: boolean(name='PasswordInherit'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  ramRoleName?: string(name='RamRoleName'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  securityGroupId?: string(name='SecurityGroupId'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotStrategy?: string(name='SpotStrategy'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tenancy?: string(name='Tenancy'),
  uniqueSuffix?: boolean(name='UniqueSuffix'),
  userData?: string(name='UserData'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateWaitingOrderResponseBody = {
  dryRunResult?: string(name='DryRunResult'),
  requestId?: string(name='RequestId'),
  waitTimeCycle?: string(name='WaitTimeCycle'),
  waitTimeValue?: int32(name='WaitTimeValue'),
  waitingOrderId?: string(name='WaitingOrderId'),
}

model CreateWaitingOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWaitingOrderResponseBody(name='body'),
}

async function createWaitingOrderWithOptions(request: CreateWaitingOrderRequest, runtime: Util.RuntimeOptions): CreateWaitingOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.creditSpecification)) {
    query['CreditSpecification'] = request.creditSpecification;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.deploymentSetGroupNo)) {
    query['DeploymentSetGroupNo'] = request.deploymentSetGroupNo;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.hostNames)) {
    query['HostNames'] = request.hostNames;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.httpEndpoint)) {
    query['HttpEndpoint'] = request.httpEndpoint;
  }
  if (!Util.isUnset(request.httpPutResponseHopLimit)) {
    query['HttpPutResponseHopLimit'] = request.httpPutResponseHopLimit;
  }
  if (!Util.isUnset(request.httpTokens)) {
    query['HttpTokens'] = request.httpTokens;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.launchTemplateVersion)) {
    query['LaunchTemplateVersion'] = request.launchTemplateVersion;
  }
  if (!Util.isUnset(request.maxAmount)) {
    query['MaxAmount'] = request.maxAmount;
  }
  if (!Util.isUnset(request.minAmount)) {
    query['MinAmount'] = request.minAmount;
  }
  if (!Util.isUnset(request.networkInterface)) {
    query['NetworkInterface'] = request.networkInterface;
  }
  if (!Util.isUnset(request.networkInterfaceQueueNumber)) {
    query['NetworkInterfaceQueueNumber'] = request.networkInterfaceQueueNumber;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotInterruptionBehavior)) {
    query['SpotInterruptionBehavior'] = request.spotInterruptionBehavior;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  if (!Util.isUnset(request.uniqueSuffix)) {
    query['UniqueSuffix'] = request.uniqueSuffix;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.cpuOptions)) {
    query['CpuOptions'] = request.cpuOptions;
  }
  if (!Util.isUnset(request.hibernationOptions)) {
    query['HibernationOptions'] = request.hibernationOptions;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  if (!Util.isUnset(request.securityOptions)) {
    query['SecurityOptions'] = request.securityOptions;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWaitingOrder',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWaitingOrder(request: CreateWaitingOrderRequest): CreateWaitingOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWaitingOrderWithOptions(request, runtime);
}

model DeleteDedicatedHostClusterRequest {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDedicatedHostClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDedicatedHostClusterResponseBody(name='body'),
}

async function deleteDedicatedHostClusterWithOptions(request: DeleteDedicatedHostClusterRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDedicatedHostCluster',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDedicatedHostCluster(request: DeleteDedicatedHostClusterRequest): DeleteDedicatedHostClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostClusterWithOptions(request, runtime);
}

model DeleteEniQosGroupRequest {
  ownerId?: long(name='OwnerId'),
  qosGroupName?: string(name='QosGroupName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteEniQosGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEniQosGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEniQosGroupResponseBody(name='body'),
}

async function deleteEniQosGroupWithOptions(request: DeleteEniQosGroupRequest, runtime: Util.RuntimeOptions): DeleteEniQosGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosGroupName)) {
    query['QosGroupName'] = request.qosGroupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEniQosGroup',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEniQosGroup(request: DeleteEniQosGroupRequest): DeleteEniQosGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEniQosGroupWithOptions(request, runtime);
}

model DeleteImageCacheRequest {
  clientToken?: string(name='ClientToken'),
  imageId?: string(name='ImageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model DeleteImageCacheResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImageCacheResponseBody(name='body'),
}

async function deleteImageCacheWithOptions(request: DeleteImageCacheRequest, runtime: Util.RuntimeOptions): DeleteImageCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImageCache',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteImageCache(request: DeleteImageCacheRequest): DeleteImageCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageCacheWithOptions(request, runtime);
}

model DeleteMigratableInstancesRequest {
  instanceId?: [ string ](name='InstanceId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteMigratableInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMigratableInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMigratableInstancesResponseBody(name='body'),
}

async function deleteMigratableInstancesWithOptions(request: DeleteMigratableInstancesRequest, runtime: Util.RuntimeOptions): DeleteMigratableInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMigratableInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMigratableInstances(request: DeleteMigratableInstancesRequest): DeleteMigratableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMigratableInstancesWithOptions(request, runtime);
}

model DeleteNetworkInsightsAnalysisRequest {
  dryRun?: boolean(name='DryRun'),
  networkInsightsAnalysisId?: [ string ](name='NetworkInsightsAnalysisId'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNetworkInsightsAnalysisResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkInsightsAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkInsightsAnalysisResponseBody(name='body'),
}

async function deleteNetworkInsightsAnalysisWithOptions(request: DeleteNetworkInsightsAnalysisRequest, runtime: Util.RuntimeOptions): DeleteNetworkInsightsAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.networkInsightsAnalysisId)) {
    query['NetworkInsightsAnalysisId'] = request.networkInsightsAnalysisId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkInsightsAnalysis',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkInsightsAnalysis(request: DeleteNetworkInsightsAnalysisRequest): DeleteNetworkInsightsAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInsightsAnalysisWithOptions(request, runtime);
}

model DeleteNetworkInsightsPathRequest {
  dryRun?: boolean(name='DryRun'),
  networkInsightsPathId?: [ string ](name='NetworkInsightsPathId'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNetworkInsightsPathResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkInsightsPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkInsightsPathResponseBody(name='body'),
}

async function deleteNetworkInsightsPathWithOptions(request: DeleteNetworkInsightsPathRequest, runtime: Util.RuntimeOptions): DeleteNetworkInsightsPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.networkInsightsPathId)) {
    query['NetworkInsightsPathId'] = request.networkInsightsPathId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkInsightsPath',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkInsightsPath(request: DeleteNetworkInsightsPathRequest): DeleteNetworkInsightsPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInsightsPathWithOptions(request, runtime);
}

model DeleteReservationDemandRequest {
  demandId?: string(name='DemandId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteReservationDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteReservationDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteReservationDemandResponseBody(name='body'),
}

async function deleteReservationDemandWithOptions(request: DeleteReservationDemandRequest, runtime: Util.RuntimeOptions): DeleteReservationDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteReservationDemand',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteReservationDemand(request: DeleteReservationDemandRequest): DeleteReservationDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteReservationDemandWithOptions(request, runtime);
}

model DeleteStorageSetRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSetId?: string(name='StorageSetId'),
}

model DeleteStorageSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStorageSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStorageSetResponseBody(name='body'),
}

async function deleteStorageSetWithOptions(request: DeleteStorageSetRequest, runtime: Util.RuntimeOptions): DeleteStorageSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStorageSet',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStorageSet(request: DeleteStorageSetRequest): DeleteStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStorageSetWithOptions(request, runtime);
}

model DeleteUserQuotaApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteUserQuotaApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserQuotaApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserQuotaApplicationResponseBody(name='body'),
}

async function deleteUserQuotaApplicationWithOptions(request: DeleteUserQuotaApplicationRequest, runtime: Util.RuntimeOptions): DeleteUserQuotaApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserQuotaApplication',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserQuotaApplication(request: DeleteUserQuotaApplicationRequest): DeleteUserQuotaApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserQuotaApplicationWithOptions(request, runtime);
}

model DeleteWaitingOrdersRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: long(name='ResourceGroupId'),
  waitingOrderId?: [ string ](name='WaitingOrderId'),
}

model DeleteWaitingOrdersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWaitingOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWaitingOrdersResponseBody(name='body'),
}

async function deleteWaitingOrdersWithOptions(request: DeleteWaitingOrdersRequest, runtime: Util.RuntimeOptions): DeleteWaitingOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.waitingOrderId)) {
    query['WaitingOrderId'] = request.waitingOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWaitingOrders',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWaitingOrders(request: DeleteWaitingOrdersRequest): DeleteWaitingOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWaitingOrdersWithOptions(request, runtime);
}

model DescribeAccountAttributesRequest {
  attributeName?: [ string ](name='AttributeName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeAccountAttributesResponseBody = {
  accountAttributeItems?: {
    accountAttributeItem?: [ 
    {
      attributeName?: string(name='AttributeName'),
      attributeValues?: {
        valueItem?: [ 
        {
          count?: int32(name='Count'),
          diskCategory?: string(name='DiskCategory'),
          expiredTime?: string(name='ExpiredTime'),
          instanceChargeType?: string(name='InstanceChargeType'),
          instanceType?: string(name='InstanceType'),
          value?: string(name='Value'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='ValueItem')
      }(name='AttributeValues'),
    }
  ](name='AccountAttributeItem')
  }(name='AccountAttributeItems'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountAttributesResponseBody(name='body'),
}

async function describeAccountAttributesWithOptions(request: DescribeAccountAttributesRequest, runtime: Util.RuntimeOptions): DescribeAccountAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attributeName)) {
    query['AttributeName'] = request.attributeName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountAttributes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccountAttributes(request: DescribeAccountAttributesRequest): DescribeAccountAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAttributesWithOptions(request, runtime);
}

model DescribeAccountLimitsRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAccountLimitsResponseBody = {
  accountLimitTypeSet?: {
    accountLimit?: [ 
    {
      limitName?: string(name='LimitName'),
      limitValueSet?: {
        limitValue?: [ string ](name='LimitValue')
      }(name='LimitValueSet'),
    }
  ](name='AccountLimit')
  }(name='AccountLimitTypeSet'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountLimitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountLimitsResponseBody(name='body'),
}

async function describeAccountLimitsWithOptions(request: DescribeAccountLimitsRequest, runtime: Util.RuntimeOptions): DescribeAccountLimitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountLimits',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccountLimits(request: DescribeAccountLimitsRequest): DescribeAccountLimitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountLimitsWithOptions(request, runtime);
}

model DescribeAccountQuotaAttributesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAccountQuotaAttributesResponseBody = {
  quotaAttributes?: {
    ecsElasticQuotaEnable?: boolean(name='EcsElasticQuotaEnable'),
  }(name='QuotaAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountQuotaAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountQuotaAttributesResponseBody(name='body'),
}

async function describeAccountQuotaAttributesWithOptions(request: DescribeAccountQuotaAttributesRequest, runtime: Util.RuntimeOptions): DescribeAccountQuotaAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountQuotaAttributes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccountQuotaAttributes(request: DescribeAccountQuotaAttributesRequest): DescribeAccountQuotaAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountQuotaAttributesWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupCapacitiesRequest {
  autoProvisioningGroupId?: [ string ](name='AutoProvisioningGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAutoProvisioningGroupCapacitiesResponseBody = {
  capacities?: {
    capacity?: [ 
    {
      autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
      payAsYouGoCapacity?: string(name='PayAsYouGoCapacity'),
      spotCapacity?: string(name='SpotCapacity'),
      totalCapacity?: string(name='TotalCapacity'),
    }
  ](name='Capacity')
  }(name='Capacities'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAutoProvisioningGroupCapacitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoProvisioningGroupCapacitiesResponseBody(name='body'),
}

async function describeAutoProvisioningGroupCapacitiesWithOptions(request: DescribeAutoProvisioningGroupCapacitiesRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupCapacitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupId)) {
    query['AutoProvisioningGroupId'] = request.autoProvisioningGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoProvisioningGroupCapacities',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoProvisioningGroupCapacities(request: DescribeAutoProvisioningGroupCapacitiesRequest): DescribeAutoProvisioningGroupCapacitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupCapacitiesWithOptions(request, runtime);
}

model DescribeBandwidthPriceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priceUnit?: string(name='PriceUnit'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verbose?: boolean(name='Verbose'),
}

model DescribeBandwidthPriceResponseBody = {
  priceInfo?: {
    order?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      ruleIdSet?: {
        ruleId?: [ string ](name='RuleId')
      }(name='RuleIdSet'),
      tradePrice?: float(name='TradePrice'),
    }(name='Order'),
    rules?: {
      rule?: [ 
      {
        name?: string(name='Name'),
        ruleId?: long(name='RuleId'),
        title?: string(name='Title'),
      }
    ](name='Rule')
    }(name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBandwidthPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBandwidthPriceResponseBody(name='body'),
}

async function describeBandwidthPriceWithOptions(request: DescribeBandwidthPriceRequest, runtime: Util.RuntimeOptions): DescribeBandwidthPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priceUnit)) {
    query['PriceUnit'] = request.priceUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBandwidthPrice',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBandwidthPrice(request: DescribeBandwidthPriceRequest): DescribeBandwidthPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthPriceWithOptions(request, runtime);
}

model DescribeCapacityReservationsRequest {
  capacityReservationIds?: string(name='CapacityReservationIds'),
  capacityReservationName?: string(name='CapacityReservationName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeCapacityReservationsResponseBody = {
  capacityReservations?: {
    capacityReservation?: [ 
    {
      availableInstanceCount?: int32(name='AvailableInstanceCount'),
      capacityReservationId?: string(name='CapacityReservationId'),
      capacityReservationName?: string(name='CapacityReservationName'),
      description?: string(name='Description'),
      endDateType?: string(name='EndDateType'),
      instanceMatchCriteria?: string(name='InstanceMatchCriteria'),
      instancePlatform?: string(name='InstancePlatform'),
      instanceType?: string(name='InstanceType'),
      networkType?: string(name='NetworkType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      timeSlot?: string(name='TimeSlot'),
      totalInstanceCount?: int32(name='TotalInstanceCount'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='CapacityReservation')
  }(name='CapacityReservations'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCapacityReservationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCapacityReservationsResponseBody(name='body'),
}

async function describeCapacityReservationsWithOptions(request: DescribeCapacityReservationsRequest, runtime: Util.RuntimeOptions): DescribeCapacityReservationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacityReservationIds)) {
    query['CapacityReservationIds'] = request.capacityReservationIds;
  }
  if (!Util.isUnset(request.capacityReservationName)) {
    query['CapacityReservationName'] = request.capacityReservationName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCapacityReservations',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCapacityReservations(request: DescribeCapacityReservationsRequest): DescribeCapacityReservationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapacityReservationsWithOptions(request, runtime);
}

model DescribeCustomerIssueCategoryRequest {
  layer?: long(name='Layer'),
  regionId?: string(name='RegionId'),
}

model DescribeCustomerIssueCategoryResponseBody = {
  issueCategoryModelList?: [ 
    {
      issueCategoryId?: long(name='IssueCategoryId'),
      issueCategoryName?: string(name='IssueCategoryName'),
      issueCategoryParentId?: long(name='IssueCategoryParentId'),
      layer?: long(name='Layer'),
      mappingTools?: string(name='MappingTools'),
      metricSetId?: string(name='MetricSetId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='IssueCategoryModelList'),
  requestId?: string(name='RequestId'),
}

model DescribeCustomerIssueCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomerIssueCategoryResponseBody(name='body'),
}

async function describeCustomerIssueCategoryWithOptions(request: DescribeCustomerIssueCategoryRequest, runtime: Util.RuntimeOptions): DescribeCustomerIssueCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomerIssueCategory',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomerIssueCategory(request: DescribeCustomerIssueCategoryRequest): DescribeCustomerIssueCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomerIssueCategoryWithOptions(request, runtime);
}

model DescribeDedicatedHostAutoRenewRequest {
  instanceIds?: string(name='InstanceIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeDedicatedHostAutoRenewResponseBody = {
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
      duration?: int32(name='Duration'),
      instanceId?: string(name='InstanceId'),
      periodUnit?: string(name='PeriodUnit'),
      renewalStatus?: string(name='RenewalStatus'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedHostAutoRenewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostAutoRenewResponseBody(name='body'),
}

async function describeDedicatedHostAutoRenewWithOptions(request: DescribeDedicatedHostAutoRenewRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAutoRenewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostAutoRenew',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostAutoRenew(request: DescribeDedicatedHostAutoRenewRequest): DescribeDedicatedHostAutoRenewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAutoRenewWithOptions(request, runtime);
}

model DescribeDedicatedHostClustersRequest {
  schedulerOptions?: {
    managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
  }(name='SchedulerOptions'),
  dedicatedHostClusterIds?: string(name='DedicatedHostClusterIds'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
  lockReason?: string(name='LockReason'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDedicatedHostClustersResponseBody = {
  dedicatedHostClusters?: {
    dedicatedHostCluster?: [ 
    {
      schedulerOptions: {
        managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
      }(name='SchedulerOptions'),
      dedicatedHostClusterCapacity?: {
        availableInstanceTypes?: {
          availableInstanceType?: [ 
          {
            availableInstanceCapacity?: int32(name='AvailableInstanceCapacity'),
            instanceType?: string(name='InstanceType'),
          }
        ](name='AvailableInstanceType')
        }(name='AvailableInstanceTypes'),
        availableMemory?: int32(name='AvailableMemory'),
        availableVcpus?: int32(name='AvailableVcpus'),
        localStorageCapacities?: {
          localStorageCapacity?: [ 
          {
            availableDisk?: int32(name='AvailableDisk'),
            dataDiskCategory?: string(name='DataDiskCategory'),
            totalDisk?: int32(name='TotalDisk'),
          }
        ](name='LocalStorageCapacity')
        }(name='LocalStorageCapacities'),
        totalMemory?: int32(name='TotalMemory'),
        totalVcpus?: int32(name='TotalVcpus'),
      }(name='DedicatedHostClusterCapacity'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
      dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
      dedicatedHostIds?: {
        dedicatedHostId?: [ string ](name='DedicatedHostId')
      }(name='DedicatedHostIds'),
      description?: string(name='Description'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DedicatedHostCluster')
  }(name='DedicatedHostClusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDedicatedHostClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostClustersResponseBody(name='body'),
}

async function describeDedicatedHostClustersWithOptions(request: DescribeDedicatedHostClustersRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterIds)) {
    query['DedicatedHostClusterIds'] = request.dedicatedHostClusterIds;
  }
  if (!Util.isUnset(request.dedicatedHostClusterName)) {
    query['DedicatedHostClusterName'] = request.dedicatedHostClusterName;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostClusters',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostClusters(request: DescribeDedicatedHostClustersRequest): DescribeDedicatedHostClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostClustersWithOptions(request, runtime);
}

model DescribeDedicatedHostTypesRequest {
  dedicatedHostType?: string(name='DedicatedHostType'),
  generation?: string(name='Generation'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  supportInstanceTypeFamily?: string(name='SupportInstanceTypeFamily'),
}

model DescribeDedicatedHostTypesResponseBody = {
  dedicatedHostTypes?: {
    dedicatedHostType?: [ 
    {
      cpuOverCommitRatioRange?: string(name='CpuOverCommitRatioRange'),
      dedicatedHostType?: string(name='DedicatedHostType'),
      GPUSpec?: string(name='GPUSpec'),
      generation?: string(name='Generation'),
      localStorageAmount?: int32(name='LocalStorageAmount'),
      localStorageCapacity?: long(name='LocalStorageCapacity'),
      localStorageCategory?: string(name='LocalStorageCategory'),
      memorySize?: float(name='MemorySize'),
      physicalGpus?: int32(name='PhysicalGpus'),
      supportCpuOverCommitRatio?: boolean(name='SupportCpuOverCommitRatio'),
      supportInstanceTypeFamilies?: {
        supportInstanceTypeFamily?: [ string ](name='SupportInstanceTypeFamily')
      }(name='SupportInstanceTypeFamilies'),
      supportInstanceTypesList?: {
        supportInstanceTypesList?: [ string ](name='SupportInstanceTypesList')
      }(name='SupportInstanceTypesList'),
      totalPhysicalCores?: int32(name='TotalPhysicalCores'),
      totalSockets?: int32(name='TotalSockets'),
      totalVcpus?: int32(name='TotalVcpus'),
      totalVgpus?: int32(name='TotalVgpus'),
    }
  ](name='DedicatedHostType')
  }(name='DedicatedHostTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedHostTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostTypesResponseBody(name='body'),
}

async function describeDedicatedHostTypesWithOptions(request: DescribeDedicatedHostTypesRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.generation)) {
    query['Generation'] = request.generation;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.supportInstanceTypeFamily)) {
    query['SupportInstanceTypeFamily'] = request.supportInstanceTypeFamily;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostTypes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostTypes(request: DescribeDedicatedHostTypesRequest): DescribeDedicatedHostTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostTypesWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  schedulerOptions?: {
    managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
  }(name='SchedulerOptions'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  dedicatedHostType?: string(name='DedicatedHostType'),
  lockReason?: string(name='LockReason'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHosts?: {
    dedicatedHost?: [ 
    {
      schedulerOptions: {
        managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
      }(name='SchedulerOptions'),
      actionOnMaintenance?: string(name='ActionOnMaintenance'),
      autoPlacement?: string(name='AutoPlacement'),
      autoReleaseTime?: string(name='AutoReleaseTime'),
      capacity?: {
        availableLocalStorage?: int32(name='AvailableLocalStorage'),
        availableMemory?: float(name='AvailableMemory'),
        availableVcpus?: int32(name='AvailableVcpus'),
        availableVgpus?: int32(name='AvailableVgpus'),
        localStorageCategory?: string(name='LocalStorageCategory'),
        totalLocalStorage?: int32(name='TotalLocalStorage'),
        totalMemory?: float(name='TotalMemory'),
        totalVcpus?: int32(name='TotalVcpus'),
        totalVgpus?: int32(name='TotalVgpus'),
      }(name='Capacity'),
      chargeType?: string(name='ChargeType'),
      cpuOverCommitRatio?: float(name='CpuOverCommitRatio'),
      creationTime?: string(name='CreationTime'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      dedicatedHostName?: string(name='DedicatedHostName'),
      dedicatedHostType?: string(name='DedicatedHostType'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      GPUSpec?: string(name='GPUSpec'),
      hostDetailInfo?: {
        serialNumber?: string(name='SerialNumber'),
      }(name='HostDetailInfo'),
      instances?: {
        instance?: [ 
        {
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='Instance')
      }(name='Instances'),
      machineId?: string(name='MachineId'),
      networkAttributes?: {
        slbUdpTimeout?: int32(name='SlbUdpTimeout'),
        udpTimeout?: int32(name='UdpTimeout'),
      }(name='NetworkAttributes'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='OperationLock')
      }(name='OperationLocks'),
      physicalGpus?: int32(name='PhysicalGpus'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      saleCycle?: string(name='SaleCycle'),
      status?: string(name='Status'),
      supportInstanceTypeFamilies?: {
        supportInstanceTypeFamily?: [ string ](name='SupportInstanceTypeFamily')
      }(name='SupportInstanceTypeFamilies'),
      supportInstanceTypesList?: {
        supportInstanceTypesList?: [ string ](name='SupportInstanceTypesList')
      }(name='SupportInstanceTypesList'),
      supportedCustomInstanceTypeFamilies?: {
        supportedCustomInstanceTypeFamily?: [ string ](name='SupportedCustomInstanceTypeFamily')
      }(name='SupportedCustomInstanceTypeFamilies'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      totalPhysicalCores?: int32(name='TotalPhysicalCores'),
      totalSockets?: int32(name='TotalSockets'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DedicatedHost')
  }(name='DedicatedHosts'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHosts',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDiagnoseRequest {
  diagnoseAction?: string(name='DiagnoseAction'),
  diagnoseId?: string(name='DiagnoseId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  type?: int32(name='Type'),
}

model DescribeDiagnoseResponseBody = {
  diagnoseInstances?: {
    diagnoseInstance?: [ 
    {
      amount?: int32(name='Amount'),
      creationTime?: string(name='CreationTime'),
      diagnoseAction?: string(name='DiagnoseAction'),
      diagnoseId?: string(name='DiagnoseId'),
      diagnoseRequestId?: string(name='DiagnoseRequestId'),
      diskCategory?: string(name='DiskCategory'),
      errorCode?: string(name='ErrorCode'),
      expireTime?: string(name='ExpireTime'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceTypeName?: string(name='InstanceTypeName'),
      izNo?: string(name='IzNo'),
      mark?: string(name='Mark'),
      modificationTime?: string(name='ModificationTime'),
      networkType?: string(name='NetworkType'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      product?: string(name='Product'),
      regionId?: string(name='RegionId'),
      solutions?: string(name='Solutions'),
      star?: int32(name='Star'),
      status?: string(name='Status'),
    }
  ](name='DiagnoseInstance')
  }(name='DiagnoseInstances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnoseResponseBody(name='body'),
}

async function describeDiagnoseWithOptions(request: DescribeDiagnoseRequest, runtime: Util.RuntimeOptions): DescribeDiagnoseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diagnoseAction)) {
    query['DiagnoseAction'] = request.diagnoseAction;
  }
  if (!Util.isUnset(request.diagnoseId)) {
    query['DiagnoseId'] = request.diagnoseId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnose',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnose(request: DescribeDiagnoseRequest): DescribeDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnoseWithOptions(request, runtime);
}

model DescribeDiagnosisOperateRecordsRequest {
  errorCode?: string(name='ErrorCode'),
  instanceType?: string(name='InstanceType'),
  operateRecordType?: string(name='OperateRecordType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDiagnosisOperateRecordsResponseBody = {
  diagnosisOperateRecordModels?: [ 
    {
      instanceType?: string(name='InstanceType'),
      newInstanceType?: string(name='NewInstanceType'),
      newZoneId?: string(name='NewZoneId'),
      operateDate?: string(name='OperateDate'),
      operateRecordType?: string(name='OperateRecordType'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DiagnosisOperateRecordModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDiagnosisOperateRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisOperateRecordsResponseBody(name='body'),
}

async function describeDiagnosisOperateRecordsWithOptions(request: DescribeDiagnosisOperateRecordsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisOperateRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.operateRecordType)) {
    query['OperateRecordType'] = request.operateRecordType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisOperateRecords',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisOperateRecords(request: DescribeDiagnosisOperateRecordsRequest): DescribeDiagnosisOperateRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisOperateRecordsWithOptions(request, runtime);
}

model DescribeDiagnosticReportsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  reportId?: [ string ](name='ReportId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  severity?: string(name='Severity'),
  sourceSystem?: string(name='SourceSystem'),
  status?: string(name='Status'),
}

model DescribeDiagnosticReportsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  reports?: {
    report?: [ 
    {
      creationTime?: string(name='CreationTime'),
      diagnosticCategory?: string(name='DiagnosticCategory'),
      endTime?: string(name='EndTime'),
      finishedTime?: string(name='FinishedTime'),
      invokeSystem?: string(name='InvokeSystem'),
      issueCategoryId?: string(name='IssueCategoryId'),
      issues?: {
        issue?: [ 
        {
          issueCategory?: string(name='IssueCategory'),
          issueCode?: string(name='IssueCode'),
          message?: string(name='Message'),
          occurrenceTime?: string(name='OccurrenceTime'),
          recommendedActions?: {
            recommendedAction?: [ 
            {
              actionCode?: string(name='ActionCode'),
              parameters?: {
                parameter?: [ 
                {
                  key?: string(name='Key'),
                  value?: string(name='Value'),
                }
              ](name='Parameter')
              }(name='Parameters'),
              url?: string(name='Url'),
            }
          ](name='RecommendedAction')
          }(name='RecommendedActions'),
          severity?: string(name='Severity'),
        }
      ](name='Issue')
      }(name='Issues'),
      items?: {
        item?: [ 
        {
          itemCategory?: string(name='ItemCategory'),
          itemCode?: string(name='ItemCode'),
          itemDatas?: {
            itemData?: [ 
            {
              name?: string(name='Name'),
              value?: string(name='Value'),
            }
          ](name='ItemData')
          }(name='ItemDatas'),
          occurrenceTime?: string(name='OccurrenceTime'),
          severity?: string(name='Severity'),
          status?: string(name='Status'),
        }
      ](name='Item')
      }(name='Items'),
      offlineDiagReportStatus?: string(name='OfflineDiagReportStatus'),
      pePassword?: string(name='PePassword'),
      recentEvents?: {
        recentEvent?: [ 
        {
          eventID?: string(name='EventID'),
          eventName?: string(name='EventName'),
          publishTime?: string(name='PublishTime'),
        }
      ](name='RecentEvent')
      }(name='RecentEvents'),
      reportId?: string(name='ReportId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      severity?: string(name='Severity'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Report')
  }(name='Reports'),
  requestId?: string(name='RequestId'),
}

model DescribeDiagnosticReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosticReportsResponseBody(name='body'),
}

async function describeDiagnosticReportsWithOptions(request: DescribeDiagnosticReportsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.severity)) {
    query['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.sourceSystem)) {
    query['SourceSystem'] = request.sourceSystem;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosticReports',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosticReports(request: DescribeDiagnosticReportsRequest): DescribeDiagnosticReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportsWithOptions(request, runtime);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDiskReplicaPairsResponseBody = {
  diskReplicaPairs?: {
    diskReplicaPair?: [ 
    {
      asyncCycle?: int32(name='AsyncCycle'),
      bandwidth?: int32(name='Bandwidth'),
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      healthStatus?: string(name='HealthStatus'),
      pairName?: string(name='PairName'),
      replicaPairId?: string(name='ReplicaPairId'),
      rpoTime?: string(name='RpoTime'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      status?: string(name='Status'),
      totalCopiedSize?: long(name='TotalCopiedSize'),
    }
  ](name='DiskReplicaPair')
  }(name='DiskReplicaPairs'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairsWithOptions(request: DescribeDiskReplicaPairsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairs',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairsWithOptions(request, runtime);
}

model DescribeEcsScenarioFacadeRequest {
  extMap?: map[string]string(name='ExtMap'),
  extParam?: string(name='ExtParam'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scenarioList?: [ 
    {
      scenario?: string(name='Scenario'),
      scenarioResources?: [ 
        {
          type?: string(name='Type'),
          values?: [ string ](name='Values'),
        }
      ](name='ScenarioResources'),
    }
  ](name='ScenarioList'),
}

model DescribeEcsScenarioFacadeResponseBody = {
  requestId?: string(name='RequestId'),
  scenarios?: [ 
    {
      contents?: [ 
        {
          action?: map[string]string(name='Action'),
          attributes?: map[string]string(name='Attributes'),
          colorLevel?: string(name='ColorLevel'),
          description?: string(name='Description'),
          ecsScenarioContentData?: [ 
            {
              type?: string(name='Type'),
              values?: [ string ](name='Values'),
            }
          ](name='EcsScenarioContentData'),
          icon?: string(name='Icon'),
          supportCancel?: string(name='SupportCancel'),
          tips?: string(name='Tips'),
          title?: string(name='Title'),
          track?: map[string]string(name='Track'),
        }
      ](name='Contents'),
      scenario?: string(name='Scenario'),
    }
  ](name='Scenarios'),
}

model DescribeEcsScenarioFacadeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEcsScenarioFacadeResponseBody(name='body'),
}

async function describeEcsScenarioFacadeWithOptions(request: DescribeEcsScenarioFacadeRequest, runtime: Util.RuntimeOptions): DescribeEcsScenarioFacadeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extMap)) {
    query['ExtMap'] = request.extMap;
  }
  if (!Util.isUnset(request.extParam)) {
    query['ExtParam'] = request.extParam;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scenarioList)) {
    query['ScenarioList'] = request.scenarioList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEcsScenarioFacade',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEcsScenarioFacade(request: DescribeEcsScenarioFacadeRequest): DescribeEcsScenarioFacadeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEcsScenarioFacadeWithOptions(request, runtime);
}

model DescribeEniQosGroupInfoRequest {
  ownerId?: long(name='OwnerId'),
  qosGroupName?: string(name='QosGroupName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeEniQosGroupInfoResponseBody = {
  qosGroupInfo?: {
    instanceId?: string(name='InstanceId'),
    networkInterfaceIds?: {
      networkInterfaceId?: [ string ](name='NetworkInterfaceId')
    }(name='NetworkInterfaceIds'),
    qosGroup?: {
      gmtCreate?: string(name='GmtCreate'),
      gmtModify?: string(name='GmtModify'),
      qosGroupName?: string(name='QosGroupName'),
      rx?: string(name='Rx'),
      rxPps?: string(name='RxPps'),
      tx?: string(name='Tx'),
      txPps?: string(name='TxPps'),
      type?: string(name='Type'),
    }(name='QosGroup'),
  }(name='QosGroupInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeEniQosGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEniQosGroupInfoResponseBody(name='body'),
}

async function describeEniQosGroupInfoWithOptions(request: DescribeEniQosGroupInfoRequest, runtime: Util.RuntimeOptions): DescribeEniQosGroupInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosGroupName)) {
    query['QosGroupName'] = request.qosGroupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEniQosGroupInfo',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEniQosGroupInfo(request: DescribeEniQosGroupInfoRequest): DescribeEniQosGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEniQosGroupInfoWithOptions(request, runtime);
}

model DescribeFunctionFeedbackRequest {
  category?: string(name='Category'),
  feedback?: string(name='Feedback'),
  functionName?: [ string ](name='FunctionName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeFunctionFeedbackResponseBody = {
  data?: {
    feedback?: [ 
    {
      category?: string(name='Category'),
      creationTime?: string(name='CreationTime'),
      feedback?: string(name='Feedback'),
      finishedTime?: string(name='FinishedTime'),
      functionName?: string(name='FunctionName'),
      suggestion?: string(name='Suggestion'),
    }
  ](name='feedback')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeFunctionFeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFunctionFeedbackResponseBody(name='body'),
}

async function describeFunctionFeedbackWithOptions(request: DescribeFunctionFeedbackRequest, runtime: Util.RuntimeOptions): DescribeFunctionFeedbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFunctionFeedback',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFunctionFeedback(request: DescribeFunctionFeedbackRequest): DescribeFunctionFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFunctionFeedbackWithOptions(request, runtime);
}

model DescribeHavsInstanceTypesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeHavsInstanceTypesResponseBody = {
  describeHavsInstanceTypesResponse?: {
    havsInstanceTypes?: {
      havsInstanceTypes?: [ string ](name='HavsInstanceTypes')
    }(name='HavsInstanceTypes'),
  }(name='DescribeHavsInstanceTypesResponse'),
  requestId?: string(name='RequestId'),
}

model DescribeHavsInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHavsInstanceTypesResponseBody(name='body'),
}

async function describeHavsInstanceTypesWithOptions(request: DescribeHavsInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeHavsInstanceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHavsInstanceTypes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHavsInstanceTypes(request: DescribeHavsInstanceTypesRequest): DescribeHavsInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHavsInstanceTypesWithOptions(request, runtime);
}

model DescribeImageAgreementRequest {
  agreementType?: string(name='AgreementType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeImageAgreementResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeImageAgreementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageAgreementResponseBody(name='body'),
}

async function describeImageAgreementWithOptions(request: DescribeImageAgreementRequest, runtime: Util.RuntimeOptions): DescribeImageAgreementResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agreementType)) {
    query['AgreementType'] = request.agreementType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageAgreement',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageAgreement(request: DescribeImageAgreementRequest): DescribeImageAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageAgreementWithOptions(request, runtime);
}

model DescribeImageCachesRequest {
  clientToken?: string(name='ClientToken'),
  imageId?: string(name='ImageId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeImageCachesResponseBody = {
  imageCaches?: {
    imageCache?: [ 
    {
      creationTime?: string(name='CreationTime'),
      imageId?: string(name='ImageId'),
      progress?: string(name='Progress'),
      status?: string(name='Status'),
    }
  ](name='ImageCache')
  }(name='ImageCaches'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImageCachesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageCachesResponseBody(name='body'),
}

async function describeImageCachesWithOptions(request: DescribeImageCachesRequest, runtime: Util.RuntimeOptions): DescribeImageCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageCaches',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageCaches(request: DescribeImageCachesRequest): DescribeImageCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageCachesWithOptions(request, runtime);
}

model DescribeImageFamiliesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeImageFamiliesResponseBody = {
  imageFamilies?: {
    imageFamily?: [ string ](name='ImageFamily')
  }(name='ImageFamilies'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImageFamiliesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageFamiliesResponseBody(name='body'),
}

async function describeImageFamiliesWithOptions(request: DescribeImageFamiliesRequest, runtime: Util.RuntimeOptions): DescribeImageFamiliesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageFamilies',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageFamilies(request: DescribeImageFamiliesRequest): DescribeImageFamiliesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFamiliesWithOptions(request, runtime);
}

model DescribeInstanceAutoRebootTimeRequest {
  autoRebootTimeFrom?: string(name='AutoRebootTimeFrom'),
  autoRebootTimeTo?: string(name='AutoRebootTimeTo'),
  instanceIds?: [ string ](name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceAutoRebootTimeResponseBody = {
  autoRebootInfos?: {
    autoRebootInfo?: [ 
    {
      instanceId?: string(name='InstanceId'),
      limitRebootTime?: string(name='LimitRebootTime'),
      orderType?: string(name='OrderType'),
      rebootTime?: string(name='RebootTime'),
    }
  ](name='AutoRebootInfo')
  }(name='AutoRebootInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceAutoRebootTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAutoRebootTimeResponseBody(name='body'),
}

async function describeInstanceAutoRebootTimeWithOptions(request: DescribeInstanceAutoRebootTimeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRebootTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRebootTimeFrom)) {
    query['AutoRebootTimeFrom'] = request.autoRebootTimeFrom;
  }
  if (!Util.isUnset(request.autoRebootTimeTo)) {
    query['AutoRebootTimeTo'] = request.autoRebootTimeTo;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAutoRebootTime',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAutoRebootTime(request: DescribeInstanceAutoRebootTimeRequest): DescribeInstanceAutoRebootTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRebootTimeWithOptions(request, runtime);
}

model DescribeInstanceHealthStatusRequest {
  instanceId?: [ string ](name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeInstanceHealthStatusResponseBody = {
  healthStatusModel?: [ 
    {
      healthStatus?: {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }(name='HealthStatus'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='HealthStatusModel'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceHealthStatusResponseBody(name='body'),
}

async function describeInstanceHealthStatusWithOptions(request: DescribeInstanceHealthStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceHealthStatus',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceHealthStatus(request: DescribeInstanceHealthStatusRequest): DescribeInstanceHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceHealthStatusWithOptions(request, runtime);
}

model DescribeInstanceMaintenanceAttributesRequest {
  instanceId?: [ string ](name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceMaintenanceAttributesResponseBody = {
  maintenanceAttributes?: {
    maintenanceAttribute?: [ 
    {
      actionOnMaintenance?: {
        defaultValue?: string(name='DefaultValue'),
        supportedValues?: {
          supportedValue?: [ string ](name='SupportedValue')
        }(name='SupportedValues'),
        value?: string(name='Value'),
      }(name='ActionOnMaintenance'),
      instanceId?: string(name='InstanceId'),
      liveMigration?: boolean(name='LiveMigration'),
      maintenanceWindows?: {
        maintenanceWindow?: [ 
        {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }
      ](name='MaintenanceWindow')
      }(name='MaintenanceWindows'),
    }
  ](name='MaintenanceAttribute')
  }(name='MaintenanceAttributes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceMaintenanceAttributesResponseBody(name='body'),
}

async function describeInstanceMaintenanceAttributesWithOptions(request: DescribeInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): DescribeInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceMaintenanceAttributes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceMaintenanceAttributes(request: DescribeInstanceMaintenanceAttributesRequest): DescribeInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model DescribeInstanceModificationPriceRequest {
  systemDisk?: {
    category?: string(name='Category'),
  }(name='SystemDisk'),
  dataDisk?: [ 
    {
      category?: string(name='Category'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
    }
  ](name='DataDisk'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceModificationPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      tradePrice?: float(name='TradePrice'),
    }(name='Price'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rule')
    }(name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceModificationPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceModificationPriceResponseBody(name='body'),
}

async function describeInstanceModificationPriceWithOptions(request: DescribeInstanceModificationPriceRequest, runtime: Util.RuntimeOptions): DescribeInstanceModificationPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceModificationPrice',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceModificationPrice(request: DescribeInstanceModificationPriceRequest): DescribeInstanceModificationPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceModificationPriceWithOptions(request, runtime);
}

model DescribeInstanceNeedRebootRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceNeedRebootResponseBody = {
  instanceInfo?: {
    instanceInfo?: [ string ](name='InstanceInfo')
  }(name='InstanceInfo'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstanceNeedRebootResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceNeedRebootResponseBody(name='body'),
}

async function describeInstanceNeedRebootWithOptions(request: DescribeInstanceNeedRebootRequest, runtime: Util.RuntimeOptions): DescribeInstanceNeedRebootResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceNeedReboot',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceNeedReboot(request: DescribeInstanceNeedRebootRequest): DescribeInstanceNeedRebootResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceNeedRebootWithOptions(request, runtime);
}

model DescribeInstancePerformanceRestrictHistoryRequest {
  instanceId?: [ string ](name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstancePerformanceRestrictHistoryResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  performanceRestrictHistories?: {
    performanceRestrictHistory?: [ 
    {
      instanceId?: string(name='InstanceId'),
      intervals?: {
        interval?: [ string ](name='Interval')
      }(name='Intervals'),
    }
  ](name='PerformanceRestrictHistory')
  }(name='PerformanceRestrictHistories'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstancePerformanceRestrictHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancePerformanceRestrictHistoryResponseBody(name='body'),
}

async function describeInstancePerformanceRestrictHistoryWithOptions(request: DescribeInstancePerformanceRestrictHistoryRequest, runtime: Util.RuntimeOptions): DescribeInstancePerformanceRestrictHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstancePerformanceRestrictHistory',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstancePerformanceRestrictHistory(request: DescribeInstancePerformanceRestrictHistoryRequest): DescribeInstancePerformanceRestrictHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancePerformanceRestrictHistoryWithOptions(request, runtime);
}

model DescribeInstanceTypeResourceRequest {
  cores?: int32(name='Cores'),
  instanceTypeFamilies?: [ string ](name='InstanceTypeFamilies'),
  instanceTypeMatchMode?: string(name='InstanceTypeMatchMode'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  memories?: [ double ](name='Memories'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  searchTypes?: [ string ](name='SearchTypes'),
  zoneIds?: [ string ](name='ZoneIds'),
}

model DescribeInstanceTypeResourceResponseBody = {
  instanceTypeResources?: {
    instanceTypeResource?: [ 
    {
      instanceType?: string(name='InstanceType'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      regionId?: string(name='RegionId'),
      searchType?: string(name='SearchType'),
      stockHealth?: {
        adequacyScore?: int32(name='AdequacyScore'),
        healthScore?: int32(name='HealthScore'),
        hotScore?: int32(name='HotScore'),
        supplyScore?: int32(name='SupplyScore'),
      }(name='StockHealth'),
      totalQuota?: long(name='TotalQuota'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='InstanceTypeResource')
  }(name='InstanceTypeResources'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstanceTypeResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTypeResourceResponseBody(name='body'),
}

async function describeInstanceTypeResourceWithOptions(request: DescribeInstanceTypeResourceRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypeResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.instanceTypeFamilies)) {
    query['InstanceTypeFamilies'] = request.instanceTypeFamilies;
  }
  if (!Util.isUnset(request.instanceTypeMatchMode)) {
    query['InstanceTypeMatchMode'] = request.instanceTypeMatchMode;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.memories)) {
    query['Memories'] = request.memories;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.searchTypes)) {
    query['SearchTypes'] = request.searchTypes;
  }
  if (!Util.isUnset(request.zoneIds)) {
    query['ZoneIds'] = request.zoneIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTypeResource',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceTypeResource(request: DescribeInstanceTypeResourceRequest): DescribeInstanceTypeResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypeResourceWithOptions(request, runtime);
}

model DescribeKMSKeyAttributeRequest {
  KMSKeyId?: string(name='KMSKeyId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  appKey?: string(name='appKey'),
  channel?: string(name='channel'),
  operator?: string(name='operator'),
  proxyId?: string(name='proxyId'),
  token?: string(name='token'),
}

model DescribeKMSKeyAttributeResponseBody = {
  alias?: string(name='Alias'),
  creator?: string(name='Creator'),
  ecsTagged?: boolean(name='EcsTagged'),
  KMSKeyId?: string(name='KMSKeyId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeKMSKeyAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeKMSKeyAttributeResponseBody(name='body'),
}

async function describeKMSKeyAttributeWithOptions(request: DescribeKMSKeyAttributeRequest, runtime: Util.RuntimeOptions): DescribeKMSKeyAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.appKey)) {
    query['appKey'] = request.appKey;
  }
  if (!Util.isUnset(request.channel)) {
    query['channel'] = request.channel;
  }
  if (!Util.isUnset(request.operator)) {
    query['operator'] = request.operator;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['proxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKMSKeyAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKMSKeyAttribute(request: DescribeKMSKeyAttributeRequest): DescribeKMSKeyAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKMSKeyAttributeWithOptions(request, runtime);
}

model DescribeKMSKeysRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  appKey?: string(name='appKey'),
  channel?: string(name='channel'),
  operator?: string(name='operator'),
  proxyId?: string(name='proxyId'),
  token?: string(name='token'),
}

model DescribeKMSKeysResponseBody = {
  KMSKeyIds?: {
    kmsKeyId?: [ string ](name='kmsKeyId')
  }(name='KMSKeyIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeKMSKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeKMSKeysResponseBody(name='body'),
}

async function describeKMSKeysWithOptions(request: DescribeKMSKeysRequest, runtime: Util.RuntimeOptions): DescribeKMSKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.appKey)) {
    query['appKey'] = request.appKey;
  }
  if (!Util.isUnset(request.channel)) {
    query['channel'] = request.channel;
  }
  if (!Util.isUnset(request.operator)) {
    query['operator'] = request.operator;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['proxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKMSKeys',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKMSKeys(request: DescribeKMSKeysRequest): DescribeKMSKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKMSKeysWithOptions(request, runtime);
}

model DescribeLinkedKMSKeysRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  appKey?: string(name='appKey'),
  channel?: string(name='channel'),
  operator?: string(name='operator'),
  proxyId?: string(name='proxyId'),
  token?: string(name='token'),
}

model DescribeLinkedKMSKeysResponseBody = {
  KMSKeys?: {
    KMSKey?: [ 
    {
      alias?: string(name='Alias'),
      KMSKeyId?: string(name='KMSKeyId'),
    }
  ](name='KMSKey')
  }(name='KMSKeys'),
  requestId?: string(name='RequestId'),
}

model DescribeLinkedKMSKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLinkedKMSKeysResponseBody(name='body'),
}

async function describeLinkedKMSKeysWithOptions(request: DescribeLinkedKMSKeysRequest, runtime: Util.RuntimeOptions): DescribeLinkedKMSKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.appKey)) {
    query['appKey'] = request.appKey;
  }
  if (!Util.isUnset(request.channel)) {
    query['channel'] = request.channel;
  }
  if (!Util.isUnset(request.operator)) {
    query['operator'] = request.operator;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['proxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLinkedKMSKeys',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLinkedKMSKeys(request: DescribeLinkedKMSKeysRequest): DescribeLinkedKMSKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLinkedKMSKeysWithOptions(request, runtime);
}

model DescribeLocalDiskRepairActivitiesRequest {
  diskId?: [ string ](name='DiskId'),
  includeHistory?: boolean(name='IncludeHistory'),
  instanceId?: [ string ](name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeLocalDiskRepairActivitiesResponseBody = {
  localDiskRepairActivities?: {
    localDiskRepairActivity?: [ 
    {
      diskEvent?: {
        eventEndTime?: string(name='EventEndTime'),
        eventId?: string(name='EventId'),
        eventTime?: string(name='EventTime'),
        eventType?: {
          code?: int32(name='Code'),
          name?: string(name='Name'),
        }(name='EventType'),
      }(name='DiskEvent'),
      diskId?: string(name='DiskId'),
      instanceEvents?: {
        instanceEvent?: [ 
        {
          eventCycleStatus?: {
            code?: int32(name='Code'),
            name?: string(name='Name'),
          }(name='EventCycleStatus'),
          eventFinishTime?: string(name='EventFinishTime'),
          eventId?: string(name='EventId'),
          eventPublishTime?: string(name='EventPublishTime'),
          eventType?: {
            code?: int32(name='Code'),
            name?: string(name='Name'),
          }(name='EventType'),
          extendedAttribute?: {
            device?: string(name='Device'),
            diskId?: string(name='DiskId'),
            onlineRepairPolicy?: string(name='OnlineRepairPolicy'),
          }(name='ExtendedAttribute'),
          instanceId?: string(name='InstanceId'),
          reason?: string(name='Reason'),
        }
      ](name='InstanceEvent')
      }(name='InstanceEvents'),
      instanceId?: string(name='InstanceId'),
      progress?: string(name='Progress'),
    }
  ](name='LocalDiskRepairActivity')
  }(name='LocalDiskRepairActivities'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLocalDiskRepairActivitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLocalDiskRepairActivitiesResponseBody(name='body'),
}

async function describeLocalDiskRepairActivitiesWithOptions(request: DescribeLocalDiskRepairActivitiesRequest, runtime: Util.RuntimeOptions): DescribeLocalDiskRepairActivitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.includeHistory)) {
    query['IncludeHistory'] = request.includeHistory;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLocalDiskRepairActivities',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLocalDiskRepairActivities(request: DescribeLocalDiskRepairActivitiesRequest): DescribeLocalDiskRepairActivitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLocalDiskRepairActivitiesWithOptions(request, runtime);
}

model DescribeMigrationInstancesRequest {
  businessMigrationType?: string(name='BusinessMigrationType'),
  hostname?: string(name='Hostname'),
  instanceId?: [ string ](name='InstanceId'),
  migrationPlanId?: string(name='MigrationPlanId'),
  migrationStatus?: string(name='MigrationStatus'),
  networkMigrationType?: string(name='NetworkMigrationType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeMigrationInstancesResponseBody = {
  migrationInstanceSet?: {
    migrationInstance?: [ 
    {
      businessMigrationType?: string(name='BusinessMigrationType'),
      businessStatus?: string(name='BusinessStatus'),
      changePublicIp?: boolean(name='ChangePublicIp'),
      finishTime?: string(name='FinishTime'),
      hasLocalDisk?: boolean(name='HasLocalDisk'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      internetIp?: string(name='InternetIp'),
      internetIpAfterTransition?: string(name='InternetIpAfterTransition'),
      intranetIp?: string(name='IntranetIp'),
      intranetIpAfterTransition?: string(name='IntranetIpAfterTransition'),
      loadProgress?: string(name='LoadProgress'),
      macAddressAfterTransition?: string(name='MacAddressAfterTransition'),
      mergeProgress?: string(name='MergeProgress'),
      migrationPlanId?: string(name='MigrationPlanId'),
      migrationStatus?: string(name='MigrationStatus'),
      name?: string(name='Name'),
      networkConnectivityStatus?: boolean(name='NetworkConnectivityStatus'),
      networkMigrationType?: int32(name='NetworkMigrationType'),
      nonStandardInstanceType?: boolean(name='NonStandardInstanceType'),
      privateMacAddress?: string(name='PrivateMacAddress'),
      publicMacAddress?: string(name='PublicMacAddress'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      securityGroupIdSets?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIdSets'),
      securityGroupIdSetsAfterTransition?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIdSetsAfterTransition'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      targetVSwitchId?: string(name='TargetVSwitchId'),
      targetVpcId?: string(name='TargetVpcId'),
      targetZoneId?: string(name='TargetZoneId'),
      transitionTime?: string(name='TransitionTime'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='MigrationInstance')
  }(name='MigrationInstanceSet'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeMigrationInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMigrationInstancesResponseBody(name='body'),
}

async function describeMigrationInstancesWithOptions(request: DescribeMigrationInstancesRequest, runtime: Util.RuntimeOptions): DescribeMigrationInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessMigrationType)) {
    query['BusinessMigrationType'] = request.businessMigrationType;
  }
  if (!Util.isUnset(request.hostname)) {
    query['Hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.migrationPlanId)) {
    query['MigrationPlanId'] = request.migrationPlanId;
  }
  if (!Util.isUnset(request.migrationStatus)) {
    query['MigrationStatus'] = request.migrationStatus;
  }
  if (!Util.isUnset(request.networkMigrationType)) {
    query['NetworkMigrationType'] = request.networkMigrationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationInstances(request: DescribeMigrationInstancesRequest): DescribeMigrationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationInstancesWithOptions(request, runtime);
}

model DescribeMigrationPlansRequest {
  migrationPlanId?: string(name='MigrationPlanId'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  type?: string(name='Type'),
}

model DescribeMigrationPlansResponseBody = {
  migrationPlanSet?: {
    migrationPlan?: [ 
    {
      createTime?: string(name='CreateTime'),
      enableAutoCreateVSwitch?: boolean(name='EnableAutoCreateVSwitch'),
      enableNetworkConnectivity?: boolean(name='EnableNetworkConnectivity'),
      finishInstanceCount?: int32(name='FinishInstanceCount'),
      migrationPlanId?: string(name='MigrationPlanId'),
      name?: string(name='Name'),
      remainPrivateIp?: boolean(name='RemainPrivateIp'),
      remainPublicMacAsPriority?: boolean(name='RemainPublicMacAsPriority'),
      securityGroupNos?: {
        securityGroupNo?: [ string ](name='SecurityGroupNo')
      }(name='SecurityGroupNos'),
      status?: string(name='Status'),
      targetVSwitchId?: string(name='TargetVSwitchId'),
      targetVpcId?: string(name='TargetVpcId'),
      targetZoneId?: string(name='TargetZoneId'),
      totalInstanceCount?: int32(name='TotalInstanceCount'),
      type?: string(name='Type'),
    }
  ](name='MigrationPlan')
  }(name='MigrationPlanSet'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeMigrationPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMigrationPlansResponseBody(name='body'),
}

async function describeMigrationPlansWithOptions(request: DescribeMigrationPlansRequest, runtime: Util.RuntimeOptions): DescribeMigrationPlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.migrationPlanId)) {
    query['MigrationPlanId'] = request.migrationPlanId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationPlans',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationPlans(request: DescribeMigrationPlansRequest): DescribeMigrationPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationPlansWithOptions(request, runtime);
}

model DescribeMigrationPreferencesRequest {
  migrationNetworkType?: string(name='MigrationNetworkType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeMigrationPreferencesResponseBody = {
  migrationNetworkType?: string(name='MigrationNetworkType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  targetZoneIdSet?: {
    targetZoneId?: [ string ](name='TargetZoneId')
  }(name='TargetZoneIdSet'),
}

model DescribeMigrationPreferencesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMigrationPreferencesResponseBody(name='body'),
}

async function describeMigrationPreferencesWithOptions(request: DescribeMigrationPreferencesRequest, runtime: Util.RuntimeOptions): DescribeMigrationPreferencesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.migrationNetworkType)) {
    query['MigrationNetworkType'] = request.migrationNetworkType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMigrationPreferences',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMigrationPreferences(request: DescribeMigrationPreferencesRequest): DescribeMigrationPreferencesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrationPreferencesWithOptions(request, runtime);
}

model DescribeNetworkInsightsAnalysisResultRequest {
  dryRun?: boolean(name='DryRun'),
  networkInsightsAnalysisId?: string(name='NetworkInsightsAnalysisId'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeNetworkInsightsAnalysisResultResponseBody = {
  creationTime?: string(name='CreationTime'),
  destination?: string(name='Destination'),
  destinationIp?: string(name='DestinationIp'),
  destinationPort?: string(name='DestinationPort'),
  destinationType?: string(name='DestinationType'),
  networkInsightsAnalysisComponents?: {
    networkInsightsAnalysisComponent?: [ 
    {
      code?: string(name='Code'),
      diagnoseCategories?: {
        diagnoseCategory?: [ 
        {
          categoryItems?: {
            categoryItem?: [ 
            {
              code?: string(name='Code'),
              explanations?: {
                actualIP?: string(name='ActualIP'),
                actualPort?: long(name='ActualPort'),
                expectIP?: string(name='ExpectIP'),
                expectPort?: long(name='ExpectPort'),
                expireDate?: string(name='ExpireDate'),
                groupId?: string(name='GroupId'),
                header?: string(name='Header'),
                ip?: string(name='Ip'),
                missingFiles?: string(name='MissingFiles'),
                netmask?: string(name='Netmask'),
                networkAclEntry?: {
                  direction?: string(name='Direction'),
                  networkAclEntryId?: string(name='NetworkAclEntryId'),
                  networkAclId?: string(name='NetworkAclId'),
                  networkAclName?: string(name='NetworkAclName'),
                  policy?: string(name='Policy'),
                  port?: string(name='Port'),
                  protocol?: string(name='Protocol'),
                  sourceCidrIp?: string(name='SourceCidrIp'),
                  vpcId?: string(name='VpcId'),
                }(name='NetworkAclEntry'),
                networkInterfaceName?: string(name='NetworkInterfaceName'),
                port?: long(name='Port'),
                processName?: string(name='ProcessName'),
                relativeGroupIds?: {
                  relativeGroupId?: [ string ](name='RelativeGroupId')
                }(name='RelativeGroupIds'),
                rule?: string(name='Rule'),
                securityGroupAcl?: {
                  createTime?: string(name='CreateTime'),
                  description?: string(name='Description'),
                  destCidrIp?: string(name='DestCidrIp'),
                  destGroupId?: string(name='DestGroupId'),
                  destPortRange?: string(name='DestPortRange'),
                  innerAccessPolicy?: string(name='InnerAccessPolicy'),
                  nicType?: string(name='NicType'),
                  policy?: string(name='Policy'),
                  sourceCidrIp?: string(name='SourceCidrIp'),
                  sourcePortRange?: string(name='SourcePortRange'),
                }(name='SecurityGroupAcl'),
                topProcesses?: {
                  topProcess?: [ string ](name='TopProcess')
                }(name='TopProcesses'),
                usePercent?: string(name='UsePercent'),
              }(name='Explanations'),
              itemName?: string(name='ItemName'),
              reachable?: string(name='Reachable'),
            }
          ](name='CategoryItem')
          }(name='CategoryItems'),
          categoryName?: string(name='CategoryName'),
          reachable?: string(name='Reachable'),
        }
      ](name='DiagnoseCategory')
      }(name='DiagnoseCategories'),
      message?: string(name='Message'),
      networkAclEntry?: {
        creationTime?: string(name='CreationTime'),
        destinationCidrIp?: string(name='DestinationCidrIp'),
        direction?: string(name='Direction'),
        networkAclEntryId?: string(name='NetworkAclEntryId'),
        networkAclEntryName?: string(name='NetworkAclEntryName'),
        networkAclId?: string(name='NetworkAclId'),
        networkAclName?: string(name='NetworkAclName'),
        policy?: string(name='Policy'),
        port?: string(name='Port'),
        protocol?: string(name='Protocol'),
        sourceCidrIp?: string(name='SourceCidrIp'),
        vpcId?: string(name='VpcId'),
      }(name='NetworkAclEntry'),
      reachable?: string(name='Reachable'),
      relativeGroupIds?: {
        relativeGroupId?: [ string ](name='RelativeGroupId')
      }(name='RelativeGroupIds'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      securityGroupAcl?: {
        createTime?: string(name='CreateTime'),
        description?: string(name='Description'),
        destCidrIp?: string(name='DestCidrIp'),
        destGroupId?: string(name='DestGroupId'),
        destGroupName?: string(name='DestGroupName'),
        destPortRange?: string(name='DestPortRange'),
        direction?: string(name='Direction'),
        innerAccessPolicy?: string(name='InnerAccessPolicy'),
        ipProtocol?: string(name='IpProtocol'),
        ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
        ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
        nicType?: string(name='NicType'),
        permissionDescription?: string(name='PermissionDescription'),
        policy?: string(name='Policy'),
        priority?: string(name='Priority'),
        securityGroupId?: string(name='SecurityGroupId'),
        sourceCidrIp?: string(name='SourceCidrIp'),
        sourceGroupId?: string(name='SourceGroupId'),
        sourceGroupName?: string(name='SourceGroupName'),
        sourcePortRange?: string(name='SourcePortRange'),
      }(name='SecurityGroupAcl'),
      sequence?: int32(name='Sequence'),
    }
  ](name='NetworkInsightsAnalysisComponent')
  }(name='NetworkInsightsAnalysisComponents'),
  networkInsightsAnalysisId?: string(name='NetworkInsightsAnalysisId'),
  networkInsightsPathId?: string(name='NetworkInsightsPathId'),
  networkPathFound?: string(name='NetworkPathFound'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp'),
  sourceType?: string(name='SourceType'),
  status?: string(name='Status'),
}

model DescribeNetworkInsightsAnalysisResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkInsightsAnalysisResultResponseBody(name='body'),
}

async function describeNetworkInsightsAnalysisResultWithOptions(request: DescribeNetworkInsightsAnalysisResultRequest, runtime: Util.RuntimeOptions): DescribeNetworkInsightsAnalysisResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInsightsAnalysisResult',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkInsightsAnalysisResult(request: DescribeNetworkInsightsAnalysisResultRequest): DescribeNetworkInsightsAnalysisResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInsightsAnalysisResultWithOptions(request, runtime);
}

model DescribeNetworkInsightsAnalysisesRequest {
  dryRun?: boolean(name='DryRun'),
  maxResults?: int32(name='MaxResults'),
  networkInsightsAnalysisId?: [ string ](name='NetworkInsightsAnalysisId'),
  networkInsightsPathId?: string(name='NetworkInsightsPathId'),
  networkPathFound?: string(name='NetworkPathFound'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeNetworkInsightsAnalysisesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  networkInsightsAnalysisSets?: {
    networkInsightsAnalysisSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      networkInsightsAnalysisId?: string(name='NetworkInsightsAnalysisId'),
      networkInsightsPathId?: string(name='NetworkInsightsPathId'),
      networkPathFound?: string(name='NetworkPathFound'),
      status?: string(name='Status'),
    }
  ](name='NetworkInsightsAnalysisSet')
  }(name='NetworkInsightsAnalysisSets'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkInsightsAnalysisesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkInsightsAnalysisesResponseBody(name='body'),
}

async function describeNetworkInsightsAnalysisesWithOptions(request: DescribeNetworkInsightsAnalysisesRequest, runtime: Util.RuntimeOptions): DescribeNetworkInsightsAnalysisesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInsightsAnalysises',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkInsightsAnalysises(request: DescribeNetworkInsightsAnalysisesRequest): DescribeNetworkInsightsAnalysisesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInsightsAnalysisesWithOptions(request, runtime);
}

model DescribeNetworkInsightsPathsRequest {
  dryRun?: boolean(name='DryRun'),
  maxResults?: int32(name='MaxResults'),
  networkInsightsPathId?: [ string ](name='NetworkInsightsPathId'),
  networkPathFound?: string(name='NetworkPathFound'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeNetworkInsightsPathsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  networkInsightsPathSets?: {
    networkInsightsPathSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      destination?: string(name='Destination'),
      destinationPort?: string(name='DestinationPort'),
      destinationType?: string(name='DestinationType'),
      networkInsightsPathId?: string(name='NetworkInsightsPathId'),
      networkInsightsPathName?: string(name='NetworkInsightsPathName'),
      networkPathFound?: string(name='NetworkPathFound'),
      protocol?: string(name='Protocol'),
      source?: string(name='Source'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
    }
  ](name='NetworkInsightsPathSet')
  }(name='NetworkInsightsPathSets'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkInsightsPathsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkInsightsPathsResponseBody(name='body'),
}

async function describeNetworkInsightsPathsWithOptions(request: DescribeNetworkInsightsPathsRequest, runtime: Util.RuntimeOptions): DescribeNetworkInsightsPathsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.networkInsightsPathId)) {
    query['NetworkInsightsPathId'] = request.networkInsightsPathId;
  }
  if (!Util.isUnset(request.networkPathFound)) {
    query['NetworkPathFound'] = request.networkPathFound;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInsightsPaths',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkInsightsPaths(request: DescribeNetworkInsightsPathsRequest): DescribeNetworkInsightsPathsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInsightsPathsWithOptions(request, runtime);
}

model DescribeOrderAutoRebootTimeRequest {
  orderId?: long(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeOrderAutoRebootTimeResponseBody = {
  describeOrderAutoRebootTimeInfo?: {
    autoRebootTime?: string(name='AutoRebootTime'),
    instanceId?: string(name='InstanceId'),
    orderId?: long(name='OrderId'),
  }(name='DescribeOrderAutoRebootTimeInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeOrderAutoRebootTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOrderAutoRebootTimeResponseBody(name='body'),
}

async function describeOrderAutoRebootTimeWithOptions(request: DescribeOrderAutoRebootTimeRequest, runtime: Util.RuntimeOptions): DescribeOrderAutoRebootTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOrderAutoRebootTime',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOrderAutoRebootTime(request: DescribeOrderAutoRebootTimeRequest): DescribeOrderAutoRebootTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOrderAutoRebootTimeWithOptions(request, runtime);
}

model DescribePrePaidResourceRefundPriceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribePrePaidResourceRefundPriceResponseBody = {
  currency?: string(name='Currency'),
  refunds?: float(name='Refunds'),
  requestId?: string(name='RequestId'),
}

model DescribePrePaidResourceRefundPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePrePaidResourceRefundPriceResponseBody(name='body'),
}

async function describePrePaidResourceRefundPriceWithOptions(request: DescribePrePaidResourceRefundPriceRequest, runtime: Util.RuntimeOptions): DescribePrePaidResourceRefundPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrePaidResourceRefundPrice',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrePaidResourceRefundPrice(request: DescribePrePaidResourceRefundPriceRequest): DescribePrePaidResourceRefundPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrePaidResourceRefundPriceWithOptions(request, runtime);
}

model DescribePriceRequest {
  businessInfo?: string(name='BusinessInfo'),
  commodity?: string(name='Commodity'),
  defaultVpc?: string(name='DefaultVpc'),
  fromApp?: string(name='FromApp'),
  needSpotPrice?: boolean(name='NeedSpotPrice'),
  networkType?: string(name='NetworkType'),
  orderType?: string(name='OrderType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verbose?: boolean(name='Verbose'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    order?: {
      coupons?: {
        coupon?: [ 
        {
          couponNo?: string(name='CouponNo'),
          description?: string(name='Description'),
          discountOff?: float(name='DiscountOff'),
          isSelected?: boolean(name='IsSelected'),
          name?: string(name='Name'),
        }
      ](name='Coupon')
      }(name='Coupons'),
      currency?: string(name='Currency'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          discountPrice?: float(name='DiscountPrice'),
          originalPrice?: float(name='OriginalPrice'),
          resource?: string(name='Resource'),
          subRules?: {
            rule?: [ 
            {
              name?: string(name='Name'),
              ruleId?: long(name='RuleId'),
              title?: string(name='Title'),
            }
          ](name='Rule')
          }(name='SubRules'),
          tradePrice?: float(name='TradePrice'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      ruleIdSet?: {
        ruleId?: [ string ](name='RuleId')
      }(name='RuleIdSet'),
      spotInstanceTypeOriginalPrice?: float(name='SpotInstanceTypeOriginalPrice'),
      spotInstanceTypePrice?: float(name='SpotInstanceTypePrice'),
      subOrders?: {
        subOrder?: [ 
        {
          discountPrice?: float(name='DiscountPrice'),
          instanceId?: string(name='InstanceId'),
          originalPrice?: float(name='OriginalPrice'),
          ruleIdSet?: {
            ruleId?: [ string ](name='RuleId')
          }(name='RuleIdSet'),
          tradePrice?: float(name='TradePrice'),
        }
      ](name='SubOrder')
      }(name='SubOrders'),
      tradePrice?: float(name='TradePrice'),
    }(name='Order'),
    orderParams?: {
      orderParam?: [ string ](name='OrderParam')
    }(name='OrderParams'),
    priceWarning?: {
      code?: string(name='Code'),
      msg?: string(name='Msg'),
    }(name='PriceWarning'),
    rules?: {
      rule?: [ 
      {
        name?: string(name='Name'),
        ruleId?: long(name='RuleId'),
        title?: string(name='Title'),
      }
    ](name='Rule')
    }(name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!Util.isUnset(request.defaultVpc)) {
    query['DefaultVpc'] = request.defaultVpc;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.needSpotPrice)) {
    query['NeedSpotPrice'] = request.needSpotPrice;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribePrivatePoolsRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids'),
    type?: string(name='Type'),
  }(name='PrivatePoolOptions'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceType?: string(name='InstanceType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTimeType?: string(name='StartTimeType'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribePrivatePoolsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  privatePoolSet?: {
    privatePoolItem?: [ 
    {
      allocatedResources?: {
        allocatedResource?: [ 
        {
          instanceType?: string(name='InstanceType'),
          totalAmount?: int32(name='TotalAmount'),
          usedAmount?: int32(name='UsedAmount'),
          zoneId?: string(name='zoneId'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      endTimeType?: string(name='EndTimeType'),
      instanceChargeType?: string(name='InstanceChargeType'),
      latestStartTime?: string(name='LatestStartTime'),
      platform?: string(name='Platform'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName'),
      privatePoolOptionsType?: string(name='PrivatePoolOptionsType'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      startTime?: string(name='StartTime'),
      startTimeType?: string(name='StartTimeType'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      totalAssuranceTimes?: string(name='TotalAssuranceTimes'),
      usedAssuranceTimes?: int32(name='UsedAssuranceTimes'),
    }
  ](name='PrivatePoolItem')
  }(name='PrivatePoolSet'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePrivatePoolsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePrivatePoolsResponseBody(name='body'),
}

async function describePrivatePoolsWithOptions(request: DescribePrivatePoolsRequest, runtime: Util.RuntimeOptions): DescribePrivatePoolsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTimeType)) {
    query['StartTimeType'] = request.startTimeType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrivatePools',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrivatePools(request: DescribePrivatePoolsRequest): DescribePrivatePoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrivatePoolsWithOptions(request, runtime);
}

model DescribeRecommendProductRequest {
  amount?: int32(name='Amount'),
  cores?: int32(name='Cores'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
  instanceType?: string(name='InstanceType'),
  instanceTypeFamily?: [ string ](name='InstanceTypeFamily'),
  instanceTypeSupportIPv6?: boolean(name='InstanceTypeSupportIPv6'),
  ioOptimized?: string(name='IoOptimized'),
  maxPrice?: float(name='MaxPrice'),
  memory?: float(name='Memory'),
  networkType?: string(name='NetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priorityStrategy?: string(name='PriorityStrategy'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotStrategy?: string(name='SpotStrategy'),
  systemDiskCategory?: string(name='SystemDiskCategory'),
  zoneId?: string(name='ZoneId'),
  zoneMatchMode?: string(name='ZoneMatchMode'),
}

model DescribeRecommendProductResponseBody = {
  recommendProducts?: {
    recommendProduct?: [ 
    {
      recommendInstanceTypes?: {
        recommendInstanceType?: [ 
        {
          capacitySpecification?: string(name='CapacitySpecification'),
          instanceChargeType?: string(name='InstanceChargeType'),
          instanceType?: {
            cores?: int32(name='Cores'),
            generation?: string(name='Generation'),
            instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
            instanceType?: string(name='InstanceType'),
            instanceTypeFamily?: string(name='InstanceTypeFamily'),
            memory?: int32(name='Memory'),
            supportIoOptimized?: string(name='SupportIoOptimized'),
          }(name='InstanceType'),
          networkType?: string(name='NetworkType'),
          price?: float(name='Price'),
          priority?: int32(name='Priority'),
          spotStrategy?: string(name='SpotStrategy'),
        }
      ](name='RecommendInstanceType')
      }(name='RecommendInstanceTypes'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='RecommendProduct')
  }(name='RecommendProducts'),
  requestId?: string(name='RequestId'),
}

model DescribeRecommendProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecommendProductResponseBody(name='body'),
}

async function describeRecommendProductWithOptions(request: DescribeRecommendProductRequest, runtime: Util.RuntimeOptions): DescribeRecommendProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceFamilyLevel)) {
    query['InstanceFamilyLevel'] = request.instanceFamilyLevel;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.instanceTypeSupportIPv6)) {
    query['InstanceTypeSupportIPv6'] = request.instanceTypeSupportIPv6;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.maxPrice)) {
    query['MaxPrice'] = request.maxPrice;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priorityStrategy)) {
    query['PriorityStrategy'] = request.priorityStrategy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.systemDiskCategory)) {
    query['SystemDiskCategory'] = request.systemDiskCategory;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.zoneMatchMode)) {
    query['ZoneMatchMode'] = request.zoneMatchMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecommendProduct',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecommendProduct(request: DescribeRecommendProductRequest): DescribeRecommendProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecommendProductWithOptions(request, runtime);
}

model DescribeReservationDemandCommittedAmountRequest {
  demandPlan?: [ 
    {
      amount?: long(name='Amount'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='DemandPlan'),
  instanceFamily?: string(name='InstanceFamily'),
  instanceFamilySet?: string(name='InstanceFamilySet'),
  offeringType?: string(name='OfferingType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  planType?: string(name='PlanType'),
  platform?: string(name='Platform'),
  purchaseMethod?: string(name='PurchaseMethod'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeReservationDemandCommittedAmountResponseBody = {
  committedAmountInfo?: {
    committedAmount?: float(name='CommittedAmount'),
    currency?: string(name='Currency'),
  }(name='CommittedAmountInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeReservationDemandCommittedAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservationDemandCommittedAmountResponseBody(name='body'),
}

async function describeReservationDemandCommittedAmountWithOptions(request: DescribeReservationDemandCommittedAmountRequest, runtime: Util.RuntimeOptions): DescribeReservationDemandCommittedAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demandPlan)) {
    query['DemandPlan'] = request.demandPlan;
  }
  if (!Util.isUnset(request.instanceFamily)) {
    query['InstanceFamily'] = request.instanceFamily;
  }
  if (!Util.isUnset(request.instanceFamilySet)) {
    query['InstanceFamilySet'] = request.instanceFamilySet;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.purchaseMethod)) {
    query['PurchaseMethod'] = request.purchaseMethod;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservationDemandCommittedAmount',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservationDemandCommittedAmount(request: DescribeReservationDemandCommittedAmountRequest): DescribeReservationDemandCommittedAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservationDemandCommittedAmountWithOptions(request, runtime);
}

model DescribeReservationDemandsRequest {
  demandId?: [ string ](name='DemandId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeReservationDemandsResponseBody = {
  data?: {
    demandOrders?: [ 
    {
      confirmType?: string(name='ConfirmType'),
      couponAuto?: string(name='CouponAuto'),
      couponType?: string(name='CouponType'),
      demandId?: string(name='DemandId'),
      description?: string(name='Description'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount'),
      instanceTypes?: string(name='InstanceTypes'),
      matchCriteria?: string(name='MatchCriteria'),
      name?: string(name='Name'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      phoneNumber?: string(name='PhoneNumber'),
      platform?: string(name='Platform'),
      productType?: string(name='ProductType'),
      recommendResource?: {
        capacityReservations?: [ 
        {
          instanceAmount?: int32(name='InstanceAmount'),
          instanceType?: string(name='InstanceType'),
          matchCriteria?: string(name='MatchCriteria'),
          planId?: string(name='PlanId'),
          privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
          startTime?: string(name='StartTime'),
          status?: string(name='Status'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='CapacityReservations')
      }(name='RecommendResource'),
      regionId?: string(name='RegionId'),
      reservationResource?: {
        capacityReservations?: [ 
        {
          approveCode?: string(name='ApproveCode'),
          approveNotes?: string(name='ApproveNotes'),
          instanceAmount?: int32(name='InstanceAmount'),
          instanceType?: string(name='InstanceType'),
          matchCriteria?: string(name='MatchCriteria'),
          planId?: string(name='PlanId'),
          privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
          startTime?: string(name='StartTime'),
          status?: string(name='Status'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='CapacityReservations')
      }(name='ReservationResource'),
      reservedInstanceDescription?: string(name='ReservedInstanceDescription'),
      reservedInstanceId?: string(name='ReservedInstanceId'),
      reservedInstanceName?: string(name='ReservedInstanceName'),
      reservedInstanceOfferingType?: string(name='ReservedInstanceOfferingType'),
      resourceSupplyType?: string(name='ResourceSupplyType'),
      savingPlanDescription?: string(name='SavingPlanDescription'),
      savingPlanHourFee?: float(name='SavingPlanHourFee'),
      savingPlanId?: string(name='SavingPlanId'),
      savingPlanInstanceTypeFamilyGroup?: string(name='SavingPlanInstanceTypeFamilyGroup'),
      savingPlanName?: string(name='SavingPlanName'),
      savingPlanPayMode?: string(name='SavingPlanPayMode'),
      savingPlanSavingType?: string(name='SavingPlanSavingType'),
      savingPlanSpecType?: string(name='SavingPlanSpecType'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      zoneIds?: string(name='ZoneIds'),
    }
  ](name='DemandOrders')
  }(name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReservationDemandsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservationDemandsResponseBody(name='body'),
}

async function describeReservationDemandsWithOptions(request: DescribeReservationDemandsRequest, runtime: Util.RuntimeOptions): DescribeReservationDemandsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservationDemands',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservationDemands(request: DescribeReservationDemandsRequest): DescribeReservationDemandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservationDemandsWithOptions(request, runtime);
}

model DescribeReservedInstanceAllocationsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: string(name='ReservedInstanceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeReservedInstanceAllocationsResponseBody = {
  allocations?: {
    allocation?: [ 
    {
      beAllocatedAccountId?: string(name='BeAllocatedAccountId'),
      reservedInstanceId?: string(name='ReservedInstanceId'),
      resourceOwnerId?: string(name='ResourceOwnerId'),
    }
  ](name='Allocation')
  }(name='Allocations'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReservedInstanceAllocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservedInstanceAllocationsResponseBody(name='body'),
}

async function describeReservedInstanceAllocationsWithOptions(request: DescribeReservedInstanceAllocationsRequest, runtime: Util.RuntimeOptions): DescribeReservedInstanceAllocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservedInstanceAllocations',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservedInstanceAllocations(request: DescribeReservedInstanceAllocationsRequest): DescribeReservedInstanceAllocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstanceAllocationsWithOptions(request, runtime);
}

model DescribeReservedInstanceCategoriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scope?: string(name='Scope'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeReservedInstanceCategoriesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  reservedInstanceCategories?: {
    reservedInstanceCategory?: [ 
    {
      amount?: int32(name='Amount'),
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      platform?: string(name='Platform'),
      regionId?: string(name='RegionId'),
      scope?: string(name='Scope'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ReservedInstanceCategory')
  }(name='ReservedInstanceCategories'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReservedInstanceCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservedInstanceCategoriesResponseBody(name='body'),
}

async function describeReservedInstanceCategoriesWithOptions(request: DescribeReservedInstanceCategoriesRequest, runtime: Util.RuntimeOptions): DescribeReservedInstanceCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservedInstanceCategories',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservedInstanceCategories(request: DescribeReservedInstanceCategoriesRequest): DescribeReservedInstanceCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstanceCategoriesWithOptions(request, runtime);
}

model DescribeReservedInstancePriceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeReservedInstancePriceResponseBody = {
  priceInfo?: {
    order?: {
      currency?: string(name='Currency'),
      reservedInstanceHourPrice?: float(name='ReservedInstanceHourPrice'),
      tradePrice?: float(name='TradePrice'),
    }(name='Order'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeReservedInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservedInstancePriceResponseBody(name='body'),
}

async function describeReservedInstancePriceWithOptions(request: DescribeReservedInstancePriceRequest, runtime: Util.RuntimeOptions): DescribeReservedInstancePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservedInstancePrice',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservedInstancePrice(request: DescribeReservedInstancePriceRequest): DescribeReservedInstancePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstancePriceWithOptions(request, runtime);
}

model DescribeReservedInstancesRequest {
  allocationType?: string(name='AllocationType'),
  expiredTime?: string(name='ExpiredTime'),
  instanceType?: string(name='InstanceType'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  lockReason?: string(name='LockReason'),
  offeringType?: string(name='OfferingType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scope?: string(name='Scope'),
  status?: [ string ](name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeReservedInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  reservedInstances?: {
    reservedInstance?: [ 
    {
      allocationStatus?: string(name='AllocationStatus'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      offeringType?: string(name='OfferingType'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='OperationLock')
      }(name='OperationLocks'),
      platform?: string(name='Platform'),
      regionId?: string(name='RegionId'),
      reservedInstanceId?: string(name='ReservedInstanceId'),
      reservedInstanceName?: string(name='ReservedInstanceName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      scope?: string(name='Scope'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ReservedInstance')
  }(name='ReservedInstances'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservedInstancesResponseBody(name='body'),
}

async function describeReservedInstancesWithOptions(request: DescribeReservedInstancesRequest, runtime: Util.RuntimeOptions): DescribeReservedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationType)) {
    query['AllocationType'] = request.allocationType;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservedInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservedInstances(request: DescribeReservedInstancesRequest): DescribeReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstancesWithOptions(request, runtime);
}

model DescribeResourceAggregationsRequest {
  aggregators?: [ string ](name='Aggregators'),
  filter?: [ 
    {
      attributeName?: string(name='AttributeName'),
      attributeValue?: string(name='AttributeValue'),
      operation?: string(name='Operation'),
    }
  ](name='Filter'),
  global?: string(name='Global'),
  keyword?: string(name='Keyword'),
  marker?: string(name='Marker'),
  maxItems?: int32(name='MaxItems'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  product?: string(name='Product'),
  regionId?: string(name='RegionId'),
  regionNo?: string(name='RegionNo'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagFilter?: [ 
    {
      operation?: string(name='Operation'),
      tagKey?: string(name='TagKey'),
      tagValues?: [ string ](name='TagValues'),
    }
  ](name='TagFilter'),
}

model DescribeResourceAggregationsResponseBody = {
  aggregations?: {
    aggregation?: [ 
    {
      count?: string(name='Count'),
      keys?: string(name='Keys'),
    }
  ](name='Aggregation')
  }(name='Aggregations'),
  requestId?: string(name='RequestId'),
}

model DescribeResourceAggregationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceAggregationsResponseBody(name='body'),
}

async function describeResourceAggregationsWithOptions(request: DescribeResourceAggregationsRequest, runtime: Util.RuntimeOptions): DescribeResourceAggregationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregators)) {
    query['Aggregators'] = request.aggregators;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.global)) {
    query['Global'] = request.global;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItems)) {
    query['MaxItems'] = request.maxItems;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceAggregations',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceAggregations(request: DescribeResourceAggregationsRequest): DescribeResourceAggregationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceAggregationsWithOptions(request, runtime);
}

model DescribeResourceAllocationRequest {
  cores?: int32(name='Cores'),
  dataDiskCategory?: [ string ](name='DataDiskCategory'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
  instanceTypeModel?: [ 
    {
      instanceType?: string(name='InstanceType'),
      maxPrice?: float(name='MaxPrice'),
      spotStrategy?: string(name='SpotStrategy'),
      weightedCapacity?: float(name='WeightedCapacity'),
    }
  ](name='InstanceTypeModel'),
  instanceTypeSupportIPv6?: boolean(name='InstanceTypeSupportIPv6'),
  ioOptimized?: string(name='IoOptimized'),
  maxPrice?: float(name='MaxPrice'),
  memory?: float(name='Memory'),
  networkType?: string(name='NetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  postPaidBaseCapacity?: int32(name='PostPaidBaseCapacity'),
  priorityStrategy?: string(name='PriorityStrategy'),
  regionId?: string(name='RegionId'),
  resourceAmountType?: string(name='ResourceAmountType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotBaseCapacity?: int32(name='SpotBaseCapacity'),
  spotInstancePools?: int32(name='SpotInstancePools'),
  spotStrategy?: string(name='SpotStrategy'),
  strictSatisfiedTargetCapacity?: boolean(name='StrictSatisfiedTargetCapacity'),
  systemDiskCategory?: string(name='SystemDiskCategory'),
  targetCapacity?: int32(name='TargetCapacity'),
  zoneId?: [ string ](name='ZoneId'),
}

model DescribeResourceAllocationResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePlanningResponse?: {
    resourceModels?: {
      resourceModel?: [ 
      {
        amount?: int32(name='Amount'),
        instanceChargeType?: string(name='InstanceChargeType'),
        instanceType?: string(name='InstanceType'),
        ioOptimized?: string(name='IoOptimized'),
        networkType?: string(name='NetworkType'),
        price?: float(name='Price'),
        regionId?: string(name='RegionId'),
        spotStrategy?: string(name='SpotStrategy'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='ResourceModel')
    }(name='ResourceModels'),
    satisfiedAmount?: int32(name='SatisfiedAmount'),
  }(name='ResourcePlanningResponse'),
}

model DescribeResourceAllocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceAllocationResponseBody(name='body'),
}

async function describeResourceAllocationWithOptions(request: DescribeResourceAllocationRequest, runtime: Util.RuntimeOptions): DescribeResourceAllocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.dataDiskCategory)) {
    query['DataDiskCategory'] = request.dataDiskCategory;
  }
  if (!Util.isUnset(request.defaultTargetCapacityType)) {
    query['DefaultTargetCapacityType'] = request.defaultTargetCapacityType;
  }
  if (!Util.isUnset(request.instanceFamilyLevel)) {
    query['InstanceFamilyLevel'] = request.instanceFamilyLevel;
  }
  if (!Util.isUnset(request.instanceTypeModel)) {
    query['InstanceTypeModel'] = request.instanceTypeModel;
  }
  if (!Util.isUnset(request.instanceTypeSupportIPv6)) {
    query['InstanceTypeSupportIPv6'] = request.instanceTypeSupportIPv6;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.maxPrice)) {
    query['MaxPrice'] = request.maxPrice;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.postPaidBaseCapacity)) {
    query['PostPaidBaseCapacity'] = request.postPaidBaseCapacity;
  }
  if (!Util.isUnset(request.priorityStrategy)) {
    query['PriorityStrategy'] = request.priorityStrategy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceAmountType)) {
    query['ResourceAmountType'] = request.resourceAmountType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotBaseCapacity)) {
    query['SpotBaseCapacity'] = request.spotBaseCapacity;
  }
  if (!Util.isUnset(request.spotInstancePools)) {
    query['SpotInstancePools'] = request.spotInstancePools;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.strictSatisfiedTargetCapacity)) {
    query['StrictSatisfiedTargetCapacity'] = request.strictSatisfiedTargetCapacity;
  }
  if (!Util.isUnset(request.systemDiskCategory)) {
    query['SystemDiskCategory'] = request.systemDiskCategory;
  }
  if (!Util.isUnset(request.targetCapacity)) {
    query['TargetCapacity'] = request.targetCapacity;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceAllocation',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceAllocation(request: DescribeResourceAllocationRequest): DescribeResourceAllocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceAllocationWithOptions(request, runtime);
}

model DescribeResourceDisplayRequest {
  chargeType?: string(name='ChargeType'),
  firstBizLevel?: string(name='FirstBizLevel'),
  instanceCategoryType?: [ string ](name='InstanceCategoryType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondBizLevel?: string(name='SecondBizLevel'),
  spotStrategy?: string(name='SpotStrategy'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  zoneId?: string(name='ZoneId'),
}

model DescribeResourceDisplayResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDisplay?: {
    instanceCategories?: {
      instanceCategory?: [ 
      {
        categoryType?: string(name='CategoryType'),
        instanceTopCategories?: {
          instanceTopCategory?: [ 
          {
            instanceSecondCategories?: {
              instanceSecondCategory?: [ 
              {
                instanceTypeFamilies?: {
                  instanceTypeFamily?: [ 
                  {
                    instanceTypeFamilyId?: string(name='InstanceTypeFamilyId'),
                    tags?: {
                      tag?: [ string ](name='Tag')
                    }(name='Tags'),
                  }
                ](name='InstanceTypeFamily')
                }(name='InstanceTypeFamilies'),
                secondCategoryLevel?: string(name='SecondCategoryLevel'),
              }
            ](name='InstanceSecondCategory')
            }(name='InstanceSecondCategories'),
            topCategoryLevel?: string(name='TopCategoryLevel'),
          }
        ](name='InstanceTopCategory')
        }(name='InstanceTopCategories'),
        zoneIds?: {
          zoneId?: [ string ](name='ZoneId')
        }(name='ZoneIds'),
      }
    ](name='InstanceCategory')
    }(name='InstanceCategories'),
    instanceChargeTypes?: {
      instanceChargeType?: [ 
      {
        chargeType?: string(name='ChargeType'),
        spotStrategy?: string(name='SpotStrategy'),
        tags?: {
          tag?: [ string ](name='Tag')
        }(name='Tags'),
      }
    ](name='InstanceChargeType')
    }(name='InstanceChargeTypes'),
    productCategories?: {
      productCategory?: [ 
      {
        instanceFamilyGroups?: {
          instanceFamilyGroup?: [ 
          {
            instanceFamilyGroupName?: string(name='InstanceFamilyGroupName'),
            instanceTypeFamilies?: {
              instanceTypeFamily?: [ 
              {
                instanceTypeFamilyId?: string(name='InstanceTypeFamilyId'),
                tags?: {
                  tag?: [ string ](name='Tag')
                }(name='Tags'),
              }
            ](name='InstanceTypeFamily')
            }(name='InstanceTypeFamilies'),
          }
        ](name='InstanceFamilyGroup')
        }(name='InstanceFamilyGroups'),
        productName?: string(name='ProductName'),
      }
    ](name='ProductCategory')
    }(name='ProductCategories'),
    zones?: {
      zone?: [ 
      {
        tags?: {
          tag?: [ string ](name='Tag')
        }(name='Tags'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Zone')
    }(name='Zones'),
  }(name='ResourceDisplay'),
}

model DescribeResourceDisplayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceDisplayResponseBody(name='body'),
}

async function describeResourceDisplayWithOptions(request: DescribeResourceDisplayRequest, runtime: Util.RuntimeOptions): DescribeResourceDisplayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.firstBizLevel)) {
    query['FirstBizLevel'] = request.firstBizLevel;
  }
  if (!Util.isUnset(request.instanceCategoryType)) {
    query['InstanceCategoryType'] = request.instanceCategoryType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondBizLevel)) {
    query['SecondBizLevel'] = request.secondBizLevel;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceDisplay',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceDisplay(request: DescribeResourceDisplayRequest): DescribeResourceDisplayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceDisplayWithOptions(request, runtime);
}

model DescribeResourceFilterAttributesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  product?: string(name='Product'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
}

model DescribeResourceFilterAttributesResponseBody = {
  filterAttributes?: {
    filterAttribute?: [ 
    {
      name?: string(name='Name'),
      supportOperations?: {
        supportOperation?: [ string ](name='SupportOperation')
      }(name='SupportOperations'),
      type?: string(name='Type'),
      values?: {
        value?: [ string ](name='Value')
      }(name='Values'),
    }
  ](name='FilterAttribute')
  }(name='FilterAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeResourceFilterAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceFilterAttributesResponseBody(name='body'),
}

async function describeResourceFilterAttributesWithOptions(request: DescribeResourceFilterAttributesRequest, runtime: Util.RuntimeOptions): DescribeResourceFilterAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceFilterAttributes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceFilterAttributes(request: DescribeResourceFilterAttributesRequest): DescribeResourceFilterAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceFilterAttributesWithOptions(request, runtime);
}

model DescribeResourceRecommendFiltersRequest {
  attributeName?: string(name='AttributeName'),
  attributeValue?: string(name='AttributeValue'),
  global?: string(name='Global'),
  maxItems?: int32(name='MaxItems'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  product?: string(name='Product'),
  regionId?: string(name='RegionId'),
  regionNo?: string(name='RegionNo'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
}

model DescribeResourceRecommendFiltersResponseBody = {
  recommendFilters?: {
    recommendFilter?: [ 
    {
      attributeName?: string(name='AttributeName'),
      attributeValue?: string(name='AttributeValue'),
      product?: string(name='Product'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='RecommendFilter')
  }(name='RecommendFilters'),
  requestId?: string(name='RequestId'),
}

model DescribeResourceRecommendFiltersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceRecommendFiltersResponseBody(name='body'),
}

async function describeResourceRecommendFiltersWithOptions(request: DescribeResourceRecommendFiltersRequest, runtime: Util.RuntimeOptions): DescribeResourceRecommendFiltersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attributeName)) {
    query['AttributeName'] = request.attributeName;
  }
  if (!Util.isUnset(request.attributeValue)) {
    query['AttributeValue'] = request.attributeValue;
  }
  if (!Util.isUnset(request.global)) {
    query['Global'] = request.global;
  }
  if (!Util.isUnset(request.maxItems)) {
    query['MaxItems'] = request.maxItems;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceRecommendFilters',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceRecommendFilters(request: DescribeResourceRecommendFiltersRequest): DescribeResourceRecommendFiltersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceRecommendFiltersWithOptions(request, runtime);
}

model DescribeResourceSolutionsRequest {
  cores?: int32(name='Cores'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
  instanceTypeModel?: [ 
    {
      instanceType?: string(name='InstanceType'),
      weightedCapacity?: float(name='WeightedCapacity'),
    }
  ](name='InstanceTypeModel'),
  instanceTypeSupportIPv6?: boolean(name='InstanceTypeSupportIPv6'),
  matchOpenInstances?: boolean(name='MatchOpenInstances'),
  maxPrice?: float(name='MaxPrice'),
  memory?: float(name='Memory'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceAmountType?: string(name='ResourceAmountType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotStrategy?: string(name='SpotStrategy'),
  systemDiskCategory?: string(name='SystemDiskCategory'),
  targetCapacity?: int32(name='TargetCapacity'),
  zoneId?: [ string ](name='ZoneId'),
}

model DescribeResourceSolutionsResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePlanningResponses?: {
    resourcePlanningResponse?: [ 
    {
      recommendReasons?: {
        recommendReason?: [ string ](name='RecommendReason')
      }(name='RecommendReasons'),
      resourceModels?: {
        resourceModel?: [ 
        {
          amount?: int32(name='Amount'),
          deliveryTime?: string(name='DeliveryTime'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='ResourceModel')
      }(name='ResourceModels'),
      satisfiedAmount?: int32(name='SatisfiedAmount'),
    }
  ](name='ResourcePlanningResponse')
  }(name='ResourcePlanningResponses'),
}

model DescribeResourceSolutionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceSolutionsResponseBody(name='body'),
}

async function describeResourceSolutionsWithOptions(request: DescribeResourceSolutionsRequest, runtime: Util.RuntimeOptions): DescribeResourceSolutionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceFamilyLevel)) {
    query['InstanceFamilyLevel'] = request.instanceFamilyLevel;
  }
  if (!Util.isUnset(request.instanceTypeModel)) {
    query['InstanceTypeModel'] = request.instanceTypeModel;
  }
  if (!Util.isUnset(request.instanceTypeSupportIPv6)) {
    query['InstanceTypeSupportIPv6'] = request.instanceTypeSupportIPv6;
  }
  if (!Util.isUnset(request.matchOpenInstances)) {
    query['MatchOpenInstances'] = request.matchOpenInstances;
  }
  if (!Util.isUnset(request.maxPrice)) {
    query['MaxPrice'] = request.maxPrice;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceAmountType)) {
    query['ResourceAmountType'] = request.resourceAmountType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.systemDiskCategory)) {
    query['SystemDiskCategory'] = request.systemDiskCategory;
  }
  if (!Util.isUnset(request.targetCapacity)) {
    query['TargetCapacity'] = request.targetCapacity;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceSolutions',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceSolutions(request: DescribeResourceSolutionsRequest): DescribeResourceSolutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceSolutionsWithOptions(request, runtime);
}

model DescribeResourcesRequest {
  filter?: [ 
    {
      attributeName?: string(name='AttributeName'),
      attributeValue?: string(name='AttributeValue'),
      operation?: string(name='Operation'),
    }
  ](name='Filter'),
  global?: string(name='Global'),
  keyword?: string(name='Keyword'),
  marker?: string(name='Marker'),
  maxItems?: int32(name='MaxItems'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  product?: string(name='Product'),
  regionId?: string(name='RegionId'),
  regionNo?: string(name='RegionNo'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagFilter?: [ 
    {
      operation?: string(name='Operation'),
      tagKey?: string(name='TagKey'),
      tagValues?: [ string ](name='TagValues'),
    }
  ](name='TagFilter'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
}

model DescribeResourcesResponseBody = {
  estimatedTotal?: int32(name='EstimatedTotal'),
  marker?: string(name='Marker'),
  requestId?: string(name='RequestId'),
  resources?: {
    resource?: [ 
    {
      arn?: string(name='Arn'),
      createTime?: string(name='CreateTime'),
      matchedAttributes?: string(name='MatchedAttributes'),
      product?: string(name='Product'),
      regionId?: string(name='RegionId'),
      resourceId?: string(name='ResourceId'),
      resourceName?: string(name='ResourceName'),
      resourceType?: string(name='ResourceType'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Resource')
  }(name='Resources'),
  truncated?: boolean(name='Truncated'),
}

model DescribeResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourcesResponseBody(name='body'),
}

async function describeResourcesWithOptions(request: DescribeResourcesRequest, runtime: Util.RuntimeOptions): DescribeResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.global)) {
    query['Global'] = request.global;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItems)) {
    query['MaxItems'] = request.maxItems;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResources',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResources(request: DescribeResourcesRequest): DescribeResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcesWithOptions(request, runtime);
}

model DescribeRiUtilizationRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeRiUtilizationResponseBody = {
  requestId?: string(name='RequestId'),
  utilizations?: {
    utilization?: [ 
    {
      reservedInstanceId?: string(name='ReservedInstanceId'),
      utilization?: string(name='Utilization'),
    }
  ](name='Utilization')
  }(name='Utilizations'),
}

model DescribeRiUtilizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiUtilizationResponseBody(name='body'),
}

async function describeRiUtilizationWithOptions(request: DescribeRiUtilizationRequest, runtime: Util.RuntimeOptions): DescribeRiUtilizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiUtilization',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRiUtilization(request: DescribeRiUtilizationRequest): DescribeRiUtilizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiUtilizationWithOptions(request, runtime);
}

model DescribeScenePurchaseRecommendRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions'),
  schedulerOptions?: {
    dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  }(name='SchedulerOptions'),
  amount?: int32(name='Amount'),
  dataDisk?: [ 
    {
      category?: string(name='Category'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
    }
  ](name='DataDisk'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  imageId?: string(name='ImageId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceType?: string(name='InstanceType'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  ioOptimized?: string(name='IoOptimized'),
  networkType?: string(name='NetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  productId?: int32(name='ProductId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneId?: int32(name='SceneId'),
  spotStrategy?: string(name='SpotStrategy'),
  systemDisk?: {
    storageClusterId?: string(name='StorageClusterId'),
  }(name='SystemDisk'),
  tenancy?: string(name='Tenancy'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeScenePurchaseRecommendResponseBody = {
  recommendProducts?: {
    recommendProduct?: [ 
    {
      recommendSpSpecs?: {
        recommendSpSpec?: [ 
        {
          duration?: int32(name='Duration'),
          effectiveDate?: string(name='EffectiveDate'),
          payMode?: string(name='PayMode'),
          pricingCycle?: string(name='PricingCycle'),
          recommendReason?: string(name='RecommendReason'),
          type?: string(name='Type'),
        }
      ](name='RecommendSpSpec')
      }(name='RecommendSpSpecs'),
      regionId?: string(name='RegionId'),
    }
  ](name='RecommendProduct')
  }(name='RecommendProducts'),
  requestId?: string(name='RequestId'),
}

model DescribeScenePurchaseRecommendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScenePurchaseRecommendResponseBody(name='body'),
}

async function describeScenePurchaseRecommendWithOptions(request: DescribeScenePurchaseRecommendRequest, runtime: Util.RuntimeOptions): DescribeScenePurchaseRecommendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScenePurchaseRecommend',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScenePurchaseRecommend(request: DescribeScenePurchaseRecommendRequest): DescribeScenePurchaseRecommendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScenePurchaseRecommendWithOptions(request, runtime);
}

model DescribeSceneResourceRecommendRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  productId?: int32(name='ProductId'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneId?: int32(name='SceneId'),
}

model DescribeSceneResourceRecommendResponseBody = {
  recommendProducts?: {
    recommendProduct?: [ 
    {
      recommendInstanceSpecs?: {
        recommendInstanceSpec?: [ 
        {
          cores?: int32(name='Cores'),
          instanceTypes?: {
            instanceType?: [ 
            {
              instanceTypeFamily?: string(name='InstanceTypeFamily'),
              instanceTypeName?: string(name='InstanceTypeName'),
              priority?: int32(name='Priority'),
            }
          ](name='InstanceType')
          }(name='InstanceTypes'),
          memory?: float(name='Memory'),
        }
      ](name='RecommendInstanceSpec')
      }(name='RecommendInstanceSpecs'),
      recommendReason?: string(name='RecommendReason'),
      regionId?: string(name='RegionId'),
      resourceId?: string(name='ResourceId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='RecommendProduct')
  }(name='RecommendProducts'),
  requestId?: string(name='RequestId'),
}

model DescribeSceneResourceRecommendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSceneResourceRecommendResponseBody(name='body'),
}

async function describeSceneResourceRecommendWithOptions(request: DescribeSceneResourceRecommendRequest, runtime: Util.RuntimeOptions): DescribeSceneResourceRecommendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSceneResourceRecommend',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSceneResourceRecommend(request: DescribeSceneResourceRecommendRequest): DescribeSceneResourceRecommendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSceneResourceRecommendWithOptions(request, runtime);
}

model DescribeSpotInstanceAdviceRequest {
  cores?: int32(name='Cores'),
  ioOptimized?: string(name='IoOptimized'),
  memory?: float(name='Memory'),
  minCores?: int32(name='MinCores'),
  minMemory?: float(name='MinMemory'),
  networkType?: string(name='NetworkType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeSpotInstanceAdviceResponseBody = {
  availableSpotZones?: {
    availableSpotZone?: [ string ](name='AvailableSpotZone')
  }(name='AvailableSpotZones'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
}

model DescribeSpotInstanceAdviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSpotInstanceAdviceResponseBody(name='body'),
}

async function describeSpotInstanceAdviceWithOptions(request: DescribeSpotInstanceAdviceRequest, runtime: Util.RuntimeOptions): DescribeSpotInstanceAdviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.minCores)) {
    query['MinCores'] = request.minCores;
  }
  if (!Util.isUnset(request.minMemory)) {
    query['MinMemory'] = request.minMemory;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSpotInstanceAdvice',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSpotInstanceAdvice(request: DescribeSpotInstanceAdviceRequest): DescribeSpotInstanceAdviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpotInstanceAdviceWithOptions(request, runtime);
}

model DescribeStorageCapacityUnitAllocationsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageCapacityUnitId?: string(name='StorageCapacityUnitId'),
}

model DescribeStorageCapacityUnitAllocationsResponseBody = {
  allocations?: {
    allocation?: [ 
    {
      beAllocatedAccountId?: string(name='BeAllocatedAccountId'),
      resourceOwnerId?: string(name='ResourceOwnerId'),
      storageCapacityUnitId?: string(name='StorageCapacityUnitId'),
    }
  ](name='Allocation')
  }(name='Allocations'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStorageCapacityUnitAllocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageCapacityUnitAllocationsResponseBody(name='body'),
}

async function describeStorageCapacityUnitAllocationsWithOptions(request: DescribeStorageCapacityUnitAllocationsRequest, runtime: Util.RuntimeOptions): DescribeStorageCapacityUnitAllocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageCapacityUnitId)) {
    query['StorageCapacityUnitId'] = request.storageCapacityUnitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageCapacityUnitAllocations',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageCapacityUnitAllocations(request: DescribeStorageCapacityUnitAllocationsRequest): DescribeStorageCapacityUnitAllocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageCapacityUnitAllocationsWithOptions(request, runtime);
}

model DescribeStorageCapacityUnitDeductFactorRequest {
  deductField?: string(name='DeductField'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  performanceLevel?: string(name='PerformanceLevel'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageType?: string(name='StorageType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeStorageCapacityUnitDeductFactorResponseBody = {
  deductFactor?: string(name='DeductFactor'),
  requestId?: string(name='RequestId'),
}

model DescribeStorageCapacityUnitDeductFactorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageCapacityUnitDeductFactorResponseBody(name='body'),
}

async function describeStorageCapacityUnitDeductFactorWithOptions(request: DescribeStorageCapacityUnitDeductFactorRequest, runtime: Util.RuntimeOptions): DescribeStorageCapacityUnitDeductFactorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deductField)) {
    query['DeductField'] = request.deductField;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.performanceLevel)) {
    query['PerformanceLevel'] = request.performanceLevel;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageCapacityUnitDeductFactor',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageCapacityUnitDeductFactor(request: DescribeStorageCapacityUnitDeductFactorRequest): DescribeStorageCapacityUnitDeductFactorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageCapacityUnitDeductFactorWithOptions(request, runtime);
}

model DescribeStorageSetDetailsRequest {
  clientToken?: string(name='ClientToken'),
  diskIds?: string(name='DiskIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
}

model DescribeStorageSetDetailsResponseBody = {
  disks?: {
    disk?: [ 
    {
      category?: string(name='Category'),
      creationTime?: string(name='CreationTime'),
      diskId?: string(name='DiskId'),
      diskName?: string(name='DiskName'),
      regionId?: string(name='RegionId'),
      storageSetId?: string(name='StorageSetId'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Disk')
  }(name='Disks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStorageSetDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageSetDetailsResponseBody(name='body'),
}

async function describeStorageSetDetailsWithOptions(request: DescribeStorageSetDetailsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageSetDetails',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageSetDetails(request: DescribeStorageSetDetailsRequest): DescribeStorageSetDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetDetailsWithOptions(request, runtime);
}

model DescribeStorageSetsRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSetIds?: string(name='StorageSetIds'),
  storageSetName?: string(name='StorageSetName'),
  zoneId?: string(name='ZoneId'),
}

model DescribeStorageSetsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  storageSets?: {
    storageSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      regionId?: string(name='RegionId'),
      storageSetId?: string(name='StorageSetId'),
      storageSetName?: string(name='StorageSetName'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='StorageSet')
  }(name='StorageSets'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStorageSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageSetsResponseBody(name='body'),
}

async function describeStorageSetsWithOptions(request: DescribeStorageSetsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetIds)) {
    query['StorageSetIds'] = request.storageSetIds;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageSets',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageSets(request: DescribeStorageSetsRequest): DescribeStorageSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetsWithOptions(request, runtime);
}

model DescribeTransitionVSwitchesRequest {
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  vpcId?: string(name='VpcId'),
}

model DescribeTransitionVSwitchesResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vSwitchModels?: {
    model?: [ 
    {
      CIDR?: string(name='CIDR'),
      description?: string(name='Description'),
      izNo?: string(name='IzNo'),
      name?: string(name='Name'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Model')
  }(name='VSwitchModels'),
}

model DescribeTransitionVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTransitionVSwitchesResponseBody(name='body'),
}

async function describeTransitionVSwitchesWithOptions(request: DescribeTransitionVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeTransitionVSwitchesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTransitionVSwitches',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTransitionVSwitches(request: DescribeTransitionVSwitchesRequest): DescribeTransitionVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransitionVSwitchesWithOptions(request, runtime);
}

model DescribeTransitionVpcAndVSwitchRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTransitionVpcAndVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  vmTransitionModels?: {
    model?: [ 
    {
      code?: string(name='Code'),
      instanceId?: string(name='InstanceId'),
      message?: string(name='Message'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Model')
  }(name='VmTransitionModels'),
}

model DescribeTransitionVpcAndVSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTransitionVpcAndVSwitchResponseBody(name='body'),
}

async function describeTransitionVpcAndVSwitchWithOptions(request: DescribeTransitionVpcAndVSwitchRequest, runtime: Util.RuntimeOptions): DescribeTransitionVpcAndVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTransitionVpcAndVSwitch',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTransitionVpcAndVSwitch(request: DescribeTransitionVpcAndVSwitchRequest): DescribeTransitionVpcAndVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransitionVpcAndVSwitchWithOptions(request, runtime);
}

model DescribeTransitionVpcsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTransitionVpcsResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vpcModels?: {
    model?: [ 
    {
      config?: string(name='Config'),
      regionId?: string(name='RegionId'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='Model')
  }(name='VpcModels'),
}

model DescribeTransitionVpcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTransitionVpcsResponseBody(name='body'),
}

async function describeTransitionVpcsWithOptions(request: DescribeTransitionVpcsRequest, runtime: Util.RuntimeOptions): DescribeTransitionVpcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTransitionVpcs',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTransitionVpcs(request: DescribeTransitionVpcsRequest): DescribeTransitionVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransitionVpcsWithOptions(request, runtime);
}

model DescribeUserAvailableIpServiceProvidersRequest {
  aliUid?: long(name='AliUid'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeUserAvailableIpServiceProvidersResponseBody = {
  ipServiceProviders?: {
    ipServiceProvider?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='IpServiceProvider')
  }(name='IpServiceProviders'),
  requestId?: string(name='RequestId'),
}

model DescribeUserAvailableIpServiceProvidersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserAvailableIpServiceProvidersResponseBody(name='body'),
}

async function describeUserAvailableIpServiceProvidersWithOptions(request: DescribeUserAvailableIpServiceProvidersRequest, runtime: Util.RuntimeOptions): DescribeUserAvailableIpServiceProvidersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserAvailableIpServiceProviders',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserAvailableIpServiceProviders(request: DescribeUserAvailableIpServiceProvidersRequest): DescribeUserAvailableIpServiceProvidersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserAvailableIpServiceProvidersWithOptions(request, runtime);
}

model DescribeUserQuotaApplicationsRequest {
  applicationId?: string(name='ApplicationId'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  instanceType?: string(name='InstanceType'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  quotaType?: string(name='QuotaType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  zoneId?: string(name='ZoneId'),
  pageSize?: int32(name='pageSize'),
}

model DescribeUserQuotaApplicationsResponseBody = {
  nextToken?: string(name='NextToken'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  userQuotaApplications?: {
    userQuotaApplication?: [ 
    {
      applicationId?: string(name='ApplicationId'),
      chargeType?: string(name='ChargeType'),
      comment?: string(name='Comment'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      expireTime?: string(name='ExpireTime'),
      instanceType?: string(name='InstanceType'),
      quotaType?: string(name='QuotaType'),
      quotaValue?: long(name='QuotaValue'),
      resultCode?: string(name='ResultCode'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='UserQuotaApplication')
  }(name='UserQuotaApplications'),
}

model DescribeUserQuotaApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserQuotaApplicationsResponseBody(name='body'),
}

async function describeUserQuotaApplicationsWithOptions(request: DescribeUserQuotaApplicationsRequest, runtime: Util.RuntimeOptions): DescribeUserQuotaApplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.quotaType)) {
    query['QuotaType'] = request.quotaType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserQuotaApplications',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserQuotaApplications(request: DescribeUserQuotaApplicationsRequest): DescribeUserQuotaApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserQuotaApplicationsWithOptions(request, runtime);
}

model DescribeVpcHavsInstancesRequest {
  maxResultSize?: int32(name='MaxResultSize'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcIdList?: [ string ](name='VpcIdList'),
}

model DescribeVpcHavsInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  vpcHavsInstances?: {
    vpcHavsInstance?: [ 
    {
      havsInstances?: {
        havsInstance?: [ 
        {
          ecsInstanceId?: string(name='EcsInstanceId'),
          reason?: string(name='Reason'),
        }
      ](name='HavsInstance')
      }(name='HavsInstances'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcHavsInstance')
  }(name='VpcHavsInstances'),
}

model DescribeVpcHavsInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHavsInstancesResponseBody(name='body'),
}

async function describeVpcHavsInstancesWithOptions(request: DescribeVpcHavsInstancesRequest, runtime: Util.RuntimeOptions): DescribeVpcHavsInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResultSize)) {
    query['MaxResultSize'] = request.maxResultSize;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcIdList)) {
    query['VpcIdList'] = request.vpcIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcHavsInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcHavsInstances(request: DescribeVpcHavsInstancesRequest): DescribeVpcHavsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHavsInstancesWithOptions(request, runtime);
}

model DescribeWaitingOrdersRequest {
  clientToken?: string(name='ClientToken'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  waitingOrderId?: [ string ](name='WaitingOrderId'),
}

model DescribeWaitingOrdersResponseBody = {
  data?: [ 
    {
      chargeType?: string(name='ChargeType'),
      createTime?: string(name='CreateTime'),
      expireTime?: string(name='ExpireTime'),
      failedMessage?: string(name='FailedMessage'),
      instanceAmount?: long(name='InstanceAmount'),
      instanceInfos?: [ 
        {
          instanceId?: string(name='InstanceId'),
          resultCode?: string(name='ResultCode'),
        }
      ](name='InstanceInfos'),
      instanceType?: string(name='InstanceType'),
      lxCreateParam?: string(name='LxCreateParam'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      successAmount?: long(name='SuccessAmount'),
      waitingOrderId?: string(name='WaitingOrderId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeWaitingOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingOrdersResponseBody(name='body'),
}

async function describeWaitingOrdersWithOptions(request: DescribeWaitingOrdersRequest, runtime: Util.RuntimeOptions): DescribeWaitingOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.waitingOrderId)) {
    query['WaitingOrderId'] = request.waitingOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingOrders',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWaitingOrders(request: DescribeWaitingOrdersRequest): DescribeWaitingOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingOrdersWithOptions(request, runtime);
}

model FeedbackDiagnoseRequest {
  diagnoseId?: string(name='DiagnoseId'),
  mark?: string(name='Mark'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  star?: int32(name='Star'),
}

model FeedbackDiagnoseResponseBody = {
  requestId?: string(name='RequestId'),
}

model FeedbackDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FeedbackDiagnoseResponseBody(name='body'),
}

async function feedbackDiagnoseWithOptions(request: FeedbackDiagnoseRequest, runtime: Util.RuntimeOptions): FeedbackDiagnoseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diagnoseId)) {
    query['DiagnoseId'] = request.diagnoseId;
  }
  if (!Util.isUnset(request.mark)) {
    query['Mark'] = request.mark;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.star)) {
    query['Star'] = request.star;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FeedbackDiagnose',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function feedbackDiagnose(request: FeedbackDiagnoseRequest): FeedbackDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return feedbackDiagnoseWithOptions(request, runtime);
}

model GetLaunchTemplateDataRequest {
  instanceId?: string(name='InstanceId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetLaunchTemplateDataResponseBody = {
  launchTemplateData?: {
    systemDisk: {
      category?: string(name='Category'),
      description?: string(name='Description'),
      diskName?: string(name='DiskName'),
      iops?: int32(name='Iops'),
      size?: int32(name='Size'),
    }(name='SystemDisk'),
    autoReleaseTime?: string(name='AutoReleaseTime'),
    dataDisks?: {
      dataDisk?: [ 
      {
        category?: string(name='Category'),
        deleteWithInstance?: boolean(name='DeleteWithInstance'),
        description?: string(name='Description'),
        device?: string(name='Device'),
        diskName?: string(name='DiskName'),
        encrypted?: string(name='Encrypted'),
        size?: int32(name='Size'),
        snapshotId?: string(name='SnapshotId'),
      }
    ](name='DataDisk')
    }(name='DataDisks'),
    description?: string(name='Description'),
    enableVmOsConfig?: boolean(name='EnableVmOsConfig'),
    hostName?: string(name='HostName'),
    imageId?: string(name='ImageId'),
    imageOwnerAlias?: string(name='ImageOwnerAlias'),
    instanceChargeType?: string(name='InstanceChargeType'),
    instanceName?: string(name='InstanceName'),
    instanceType?: string(name='InstanceType'),
    internetChargeType?: string(name='InternetChargeType'),
    internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
    ioOptimized?: string(name='IoOptimized'),
    keyPairName?: string(name='KeyPairName'),
    networkInterfaces?: {
      networkInterface?: [ 
      {
        description?: string(name='Description'),
        networkInterfaceName?: string(name='NetworkInterfaceName'),
        primaryIpAddress?: string(name='PrimaryIpAddress'),
        securityGroupId?: string(name='SecurityGroupId'),
        vSwitchId?: string(name='VSwitchId'),
      }
    ](name='NetworkInterface')
    }(name='NetworkInterfaces'),
    networkType?: string(name='NetworkType'),
    passwordInherit?: boolean(name='PasswordInherit'),
    period?: int32(name='Period'),
    ramRoleName?: string(name='RamRoleName'),
    resourceGroupId?: string(name='ResourceGroupId'),
    securityEnhancementStrategy?: boolean(name='SecurityEnhancementStrategy'),
    securityGroupId?: string(name='SecurityGroupId'),
    spotDuration?: int32(name='SpotDuration'),
    spotPriceLimit?: float(name='SpotPriceLimit'),
    spotStrategy?: string(name='SpotStrategy'),
    tags?: {
      instanceTag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='InstanceTag')
    }(name='Tags'),
    userData?: string(name='UserData'),
    vSwitchId?: string(name='VSwitchId'),
    vpcId?: string(name='VpcId'),
    zoneId?: string(name='ZoneId'),
  }(name='LaunchTemplateData'),
  requestId?: string(name='RequestId'),
}

model GetLaunchTemplateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLaunchTemplateDataResponseBody(name='body'),
}

async function getLaunchTemplateDataWithOptions(request: GetLaunchTemplateDataRequest, runtime: Util.RuntimeOptions): GetLaunchTemplateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLaunchTemplateData',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLaunchTemplateData(request: GetLaunchTemplateDataRequest): GetLaunchTemplateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLaunchTemplateDataWithOptions(request, runtime);
}

model InnerDescribeNetworkInterfaceInGroupRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
  type?: string(name='Type'),
}

model InnerDescribeNetworkInterfaceInGroupResponseBody = {
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId'),
        publicIpAddress?: string(name='PublicIpAddress'),
      }(name='AssociatedPublicIp'),
      attachment?: {
        deviceIndex?: int32(name='DeviceIndex'),
        instanceId?: string(name='InstanceId'),
        trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId'),
      }(name='Attachment'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId'),
      ipv6Sets?: {
        ipv6Set?: [ 
        {
          ipv6Address?: string(name='Ipv6Address'),
        }
      ](name='Ipv6Set')
      }(name='Ipv6Sets'),
      macAddress?: string(name='MacAddress'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode'),
      ownerId?: string(name='OwnerId'),
      privateIpAddress?: string(name='PrivateIpAddress'),
      privateIpSets?: {
        privateIpSet?: [ 
        {
          associatedPublicIp?: {
            allocationId?: string(name='AllocationId'),
            publicIpAddress?: string(name='PublicIpAddress'),
          }(name='AssociatedPublicIp'),
          primary?: boolean(name='Primary'),
          privateIpAddress?: string(name='PrivateIpAddress'),
        }
      ](name='PrivateIpSet')
      }(name='PrivateIpSets'),
      queueNumber?: int32(name='QueueNumber'),
      queuePairNumber?: int32(name='QueuePairNumber'),
      resourceGroupId?: string(name='ResourceGroupId'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds'),
      serviceID?: long(name='ServiceID'),
      serviceManaged?: boolean(name='ServiceManaged'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      type?: string(name='Type'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model InnerDescribeNetworkInterfaceInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InnerDescribeNetworkInterfaceInGroupResponseBody(name='body'),
}

async function innerDescribeNetworkInterfaceInGroupWithOptions(request: InnerDescribeNetworkInterfaceInGroupRequest, runtime: Util.RuntimeOptions): InnerDescribeNetworkInterfaceInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InnerDescribeNetworkInterfaceInGroup',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function innerDescribeNetworkInterfaceInGroup(request: InnerDescribeNetworkInterfaceInGroupRequest): InnerDescribeNetworkInterfaceInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return innerDescribeNetworkInterfaceInGroupWithOptions(request, runtime);
}

model JoinEniQosGroupRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  ownerId?: long(name='OwnerId'),
  qosGroupName?: string(name='QosGroupName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model JoinEniQosGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinEniQosGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinEniQosGroupResponseBody(name='body'),
}

async function joinEniQosGroupWithOptions(request: JoinEniQosGroupRequest, runtime: Util.RuntimeOptions): JoinEniQosGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosGroupName)) {
    query['QosGroupName'] = request.qosGroupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinEniQosGroup',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinEniQosGroup(request: JoinEniQosGroupRequest): JoinEniQosGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinEniQosGroupWithOptions(request, runtime);
}

model LeaveEniQosGroupRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model LeaveEniQosGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model LeaveEniQosGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LeaveEniQosGroupResponseBody(name='body'),
}

async function leaveEniQosGroupWithOptions(request: LeaveEniQosGroupRequest, runtime: Util.RuntimeOptions): LeaveEniQosGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LeaveEniQosGroup',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function leaveEniQosGroup(request: LeaveEniQosGroupRequest): LeaveEniQosGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return leaveEniQosGroupWithOptions(request, runtime);
}

model ListAccountEcsQuotasRequest {
  chargeType?: string(name='ChargeType'),
  networkType?: string(name='NetworkType'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  quotaResourceName?: string(name='QuotaResourceName'),
  quotaResourceType?: string(name='QuotaResourceType'),
  quotaUnit?: string(name='QuotaUnit'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sortField?: string(name='SortField'),
  sortOrder?: string(name='SortOrder'),
  zoneId?: string(name='ZoneId'),
}

model ListAccountEcsQuotasResponseBody = {
  ecsQuotas?: {
    ecsQuota?: [ 
    {
      applicationStatus?: string(name='ApplicationStatus'),
      baseQuota?: long(name='BaseQuota'),
      baseQuotaUsage?: long(name='BaseQuotaUsage'),
      chargeType?: string(name='ChargeType'),
      networkType?: string(name='NetworkType'),
      quotaResourceName?: string(name='QuotaResourceName'),
      quotaResourceType?: string(name='QuotaResourceType'),
      quotaUnit?: string(name='QuotaUnit'),
      regionId?: string(name='RegionId'),
      reservedQuota?: long(name='ReservedQuota'),
      reservedQuotaUsage?: long(name='ReservedQuotaUsage'),
      totalQuota?: long(name='TotalQuota'),
      totalQuotaUsage?: long(name='TotalQuotaUsage'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='EcsQuota')
  }(name='EcsQuotas'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListAccountEcsQuotasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountEcsQuotasResponseBody(name='body'),
}

async function listAccountEcsQuotasWithOptions(request: ListAccountEcsQuotasRequest, runtime: Util.RuntimeOptions): ListAccountEcsQuotasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.quotaResourceName)) {
    query['QuotaResourceName'] = request.quotaResourceName;
  }
  if (!Util.isUnset(request.quotaResourceType)) {
    query['QuotaResourceType'] = request.quotaResourceType;
  }
  if (!Util.isUnset(request.quotaUnit)) {
    query['QuotaUnit'] = request.quotaUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sortField)) {
    query['SortField'] = request.sortField;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountEcsQuotas',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountEcsQuotas(request: ListAccountEcsQuotasRequest): ListAccountEcsQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountEcsQuotasWithOptions(request, runtime);
}

model ListServiceSettingsRequest {
  cloudAssistantDeliverySettings?: boolean(name='CloudAssistantDeliverySettings'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListServiceSettingsResponseBody = {
  cloudAssistantDeliverySettings?: {
    ossBucketName?: string(name='OssBucketName'),
    ossEnabled?: boolean(name='OssEnabled'),
    ossKeyPrefix?: string(name='OssKeyPrefix'),
    slsEnabled?: boolean(name='SlsEnabled'),
    slsLogstoreName?: string(name='SlsLogstoreName'),
    slsProjectName?: string(name='SlsProjectName'),
  }(name='CloudAssistantDeliverySettings'),
  requestId?: string(name='RequestId'),
}

model ListServiceSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceSettingsResponseBody(name='body'),
}

async function listServiceSettingsWithOptions(request: ListServiceSettingsRequest, runtime: Util.RuntimeOptions): ListServiceSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cloudAssistantDeliverySettings)) {
    query['CloudAssistantDeliverySettings'] = request.cloudAssistantDeliverySettings;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceSettings',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceSettings(request: ListServiceSettingsRequest): ListServiceSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceSettingsWithOptions(request, runtime);
}

model ModifyCapacityReservationRequest {
  capacityReservationId?: string(name='CapacityReservationId'),
  instanceCount?: int32(name='InstanceCount'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  token?: string(name='Token'),
}

model ModifyCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCapacityReservationResponseBody(name='body'),
}

async function modifyCapacityReservationWithOptions(request: ModifyCapacityReservationRequest, runtime: Util.RuntimeOptions): ModifyCapacityReservationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacityReservationId)) {
    query['CapacityReservationId'] = request.capacityReservationId;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCapacityReservation',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCapacityReservation(request: ModifyCapacityReservationRequest): ModifyCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCapacityReservationWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout'),
    udpTimeout?: int32(name='UdpTimeout'),
  }(name='NetworkAttributes'),
  actionOnMaintenance?: string(name='ActionOnMaintenance'),
  autoPlacement?: string(name='AutoPlacement'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionOnMaintenance)) {
    query['ActionOnMaintenance'] = request.actionOnMaintenance;
  }
  if (!Util.isUnset(request.autoPlacement)) {
    query['AutoPlacement'] = request.autoPlacement;
  }
  if (!Util.isUnset(request.cpuOverCommitRatio)) {
    query['CpuOverCommitRatio'] = request.cpuOverCommitRatio;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.networkAttributes)) {
    query['NetworkAttributes'] = request.networkAttributes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoReleaseTimeRequest {
  autoReleaseTime?: string(name='AutoReleaseTime'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAutoReleaseTimeResponseBody(name='body'),
}

async function modifyDedicatedHostAutoReleaseTimeWithOptions(request: ModifyDedicatedHostAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoReleaseTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAutoReleaseTime',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAutoReleaseTime(request: ModifyDedicatedHostAutoReleaseTimeRequest): ModifyDedicatedHostAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoRenewAttributeRequest {
  autoRenew?: boolean(name='AutoRenew'),
  duration?: int32(name='Duration'),
  instanceIds?: string(name='InstanceIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  renewalStatus?: string(name='RenewalStatus'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model ModifyDedicatedHostAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAutoRenewAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAutoRenewAttributeWithOptions(request: ModifyDedicatedHostAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAutoRenewAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAutoRenewAttribute(request: ModifyDedicatedHostAutoRenewAttributeRequest): ModifyDedicatedHostAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostClusterAttributeRequest {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostClusterAttributeWithOptions(request: ModifyDedicatedHostClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostClusterName)) {
    query['DedicatedHostClusterName'] = request.dedicatedHostClusterName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostClusterAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostClusterAttribute(request: ModifyDedicatedHostClusterAttributeRequest): ModifyDedicatedHostClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostClusterAttributeWithOptions(request, runtime);
}

model ModifyDiagnoseRequest {
  diagnoseId?: string(name='DiagnoseId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model ModifyDiagnoseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: int32(name='data'),
}

model ModifyDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiagnoseResponseBody(name='body'),
}

async function modifyDiagnoseWithOptions(request: ModifyDiagnoseRequest, runtime: Util.RuntimeOptions): ModifyDiagnoseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diagnoseId)) {
    query['DiagnoseId'] = request.diagnoseId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiagnose',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiagnose(request: ModifyDiagnoseRequest): ModifyDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiagnoseWithOptions(request, runtime);
}

model ModifyDiskSpecRequest {
  autoPay?: boolean(name='AutoPay'),
  diskCategory?: string(name='DiskCategory'),
  diskId?: string(name='DiskId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  performanceLevel?: string(name='PerformanceLevel'),
  provisionedIops?: long(name='ProvisionedIops'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDiskSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDiskSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskSpecResponseBody(name='body'),
}

async function modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: Util.RuntimeOptions): ModifyDiskSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.performanceLevel)) {
    query['PerformanceLevel'] = request.performanceLevel;
  }
  if (!Util.isUnset(request.provisionedIops)) {
    query['ProvisionedIops'] = request.provisionedIops;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskSpec',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskSpecWithOptions(request, runtime);
}

model ModifyEniQosGroupRequest {
  ownerId?: long(name='OwnerId'),
  qosGroupName?: string(name='QosGroupName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rx?: int32(name='Rx'),
  rxPps?: int32(name='RxPps'),
  tx?: int32(name='Tx'),
  txPps?: int32(name='TxPps'),
}

model ModifyEniQosGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEniQosGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEniQosGroupResponseBody(name='body'),
}

async function modifyEniQosGroupWithOptions(request: ModifyEniQosGroupRequest, runtime: Util.RuntimeOptions): ModifyEniQosGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosGroupName)) {
    query['QosGroupName'] = request.qosGroupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.rx)) {
    query['Rx'] = request.rx;
  }
  if (!Util.isUnset(request.rxPps)) {
    query['RxPps'] = request.rxPps;
  }
  if (!Util.isUnset(request.tx)) {
    query['Tx'] = request.tx;
  }
  if (!Util.isUnset(request.txPps)) {
    query['TxPps'] = request.txPps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEniQosGroup',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyEniQosGroup(request: ModifyEniQosGroupRequest): ModifyEniQosGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEniQosGroupWithOptions(request, runtime);
}

model ModifyImageAdvancedAttributeRequest {
  flag?: [ 
    {
      name?: string(name='Name'),
      value?: boolean(name='Value'),
    }
  ](name='Flag'),
  imageId?: string(name='ImageId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  supportIoOptimized?: string(name='SupportIoOptimized'),
}

model ModifyImageAdvancedAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageAdvancedAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageAdvancedAttributeResponseBody(name='body'),
}

async function modifyImageAdvancedAttributeWithOptions(request: ModifyImageAdvancedAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAdvancedAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flag)) {
    query['Flag'] = request.flag;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.supportIoOptimized)) {
    query['SupportIoOptimized'] = request.supportIoOptimized;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageAdvancedAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyImageAdvancedAttribute(request: ModifyImageAdvancedAttributeRequest): ModifyImageAdvancedAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAdvancedAttributeWithOptions(request, runtime);
}

model ModifyInstanceAutoRebootTimeRequest {
  autoRebootTime?: string(name='AutoRebootTime'),
  instanceIds?: [ string ](name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceAutoRebootTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRebootTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAutoRebootTimeResponseBody(name='body'),
}

async function modifyInstanceAutoRebootTimeWithOptions(request: ModifyInstanceAutoRebootTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRebootTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRebootTime)) {
    query['AutoRebootTime'] = request.autoRebootTime;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAutoRebootTime',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceAutoRebootTime(request: ModifyInstanceAutoRebootTimeRequest): ModifyInstanceAutoRebootTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRebootTimeWithOptions(request, runtime);
}

model ModifyInstanceCapacityReservationAttributesRequest {
  capacityReservationId?: string(name='CapacityReservationId'),
  capacityReservationPreference?: string(name='CapacityReservationPreference'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceCapacityReservationAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceCapacityReservationAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceCapacityReservationAttributesResponseBody(name='body'),
}

async function modifyInstanceCapacityReservationAttributesWithOptions(request: ModifyInstanceCapacityReservationAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceCapacityReservationAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacityReservationId)) {
    query['CapacityReservationId'] = request.capacityReservationId;
  }
  if (!Util.isUnset(request.capacityReservationPreference)) {
    query['CapacityReservationPreference'] = request.capacityReservationPreference;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceCapacityReservationAttributes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceCapacityReservationAttributes(request: ModifyInstanceCapacityReservationAttributesRequest): ModifyInstanceCapacityReservationAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceCapacityReservationAttributesWithOptions(request, runtime);
}

model ModifyInstanceChargeTypeRequest {
  autoPay?: boolean(name='AutoPay'),
  clientToken?: string(name='ClientToken'),
  couponNo?: string(name='CouponNo'),
  dryRun?: boolean(name='DryRun'),
  includeDataDisks?: boolean(name='IncludeDataDisks'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceIds?: string(name='InstanceIds'),
  isDetailFee?: boolean(name='IsDetailFee'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      currency?: string(name='Currency'),
      fee?: string(name='Fee'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceChargeTypeResponseBody(name='body'),
}

async function modifyInstanceChargeTypeWithOptions(request: ModifyInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyInstanceChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.includeDataDisks)) {
    query['IncludeDataDisks'] = request.includeDataDisks;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.isDetailFee)) {
    query['IsDetailFee'] = request.isDetailFee;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceChargeType',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceChargeType(request: ModifyInstanceChargeTypeRequest): ModifyInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceChargeTypeWithOptions(request, runtime);
}

model ModifyInstanceDeploymentRequest {
  affinity?: string(name='Affinity'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  instanceId?: string(name='InstanceId'),
  migrationType?: string(name='MigrationType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tenancy?: string(name='Tenancy'),
}

model ModifyInstanceDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceDeploymentResponseBody(name='body'),
}

async function modifyInstanceDeploymentWithOptions(request: ModifyInstanceDeploymentRequest, runtime: Util.RuntimeOptions): ModifyInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.migrationType)) {
    query['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceDeployment',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceDeployment(request: ModifyInstanceDeploymentRequest): ModifyInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceDeploymentWithOptions(request, runtime);
}

model ModifyInstanceMaintenanceAttributesRequest {
  actionOnMaintenance?: string(name='ActionOnMaintenance'),
  instanceId?: [ string ](name='InstanceId'),
  liveMigration?: boolean(name='LiveMigration'),
  maintenanceWindow?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
    }
  ](name='MaintenanceWindow'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceMaintenanceAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMaintenanceAttributesResponseBody(name='body'),
}

async function modifyInstanceMaintenanceAttributesWithOptions(request: ModifyInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionOnMaintenance)) {
    query['ActionOnMaintenance'] = request.actionOnMaintenance;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.liveMigration)) {
    query['LiveMigration'] = request.liveMigration;
  }
  if (!Util.isUnset(request.maintenanceWindow)) {
    query['MaintenanceWindow'] = request.maintenanceWindow;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMaintenanceAttributes',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceMaintenanceAttributes(request: ModifyInstanceMaintenanceAttributesRequest): ModifyInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model ModifyMigratableInstancesRequest {
  businessMigrationType?: int32(name='BusinessMigrationType'),
  instanceId?: [ string ](name='InstanceId'),
  networkMigrationType?: int32(name='NetworkMigrationType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model ModifyMigratableInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMigratableInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMigratableInstancesResponseBody(name='body'),
}

async function modifyMigratableInstancesWithOptions(request: ModifyMigratableInstancesRequest, runtime: Util.RuntimeOptions): ModifyMigratableInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessMigrationType)) {
    query['BusinessMigrationType'] = request.businessMigrationType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkMigrationType)) {
    query['NetworkMigrationType'] = request.networkMigrationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMigratableInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMigratableInstances(request: ModifyMigratableInstancesRequest): ModifyMigratableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMigratableInstancesWithOptions(request, runtime);
}

model ModifyMigrationInstancesRequest {
  globalMigrationTime?: string(name='GlobalMigrationTime'),
  instanceId?: [ string ](name='InstanceId'),
  networkMigrationType?: string(name='NetworkMigrationType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyMigrationInstancesResponseBody = {
  instancesFailModels?: {
    instancesFailModel?: [ 
    {
      failModels?: {
        failModel?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
        }
      ](name='FailModel')
      }(name='FailModels'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstancesFailModel')
  }(name='InstancesFailModels'),
  requestId?: string(name='RequestId'),
}

model ModifyMigrationInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMigrationInstancesResponseBody(name='body'),
}

async function modifyMigrationInstancesWithOptions(request: ModifyMigrationInstancesRequest, runtime: Util.RuntimeOptions): ModifyMigrationInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalMigrationTime)) {
    query['GlobalMigrationTime'] = request.globalMigrationTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkMigrationType)) {
    query['NetworkMigrationType'] = request.networkMigrationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMigrationInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMigrationInstances(request: ModifyMigrationInstancesRequest): ModifyMigrationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMigrationInstancesWithOptions(request, runtime);
}

model ModifyMigrationPlanRequest {
  migrationPlanId?: string(name='MigrationPlanId'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyMigrationPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMigrationPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMigrationPlanResponseBody(name='body'),
}

async function modifyMigrationPlanWithOptions(request: ModifyMigrationPlanRequest, runtime: Util.RuntimeOptions): ModifyMigrationPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.migrationPlanId)) {
    query['MigrationPlanId'] = request.migrationPlanId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMigrationPlan',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMigrationPlan(request: ModifyMigrationPlanRequest): ModifyMigrationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMigrationPlanWithOptions(request, runtime);
}

model ModifyOrderAutoRebootTimeRequest {
  autoRebootTime?: string(name='AutoRebootTime'),
  orderId?: long(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyOrderAutoRebootTimeResponseBody = {
  modifyOrderAutoRebootTimeInfo?: {
    autoRebootTime?: string(name='AutoRebootTime'),
    orderId?: long(name='OrderId'),
  }(name='ModifyOrderAutoRebootTimeInfo'),
  requestId?: string(name='RequestId'),
}

model ModifyOrderAutoRebootTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOrderAutoRebootTimeResponseBody(name='body'),
}

async function modifyOrderAutoRebootTimeWithOptions(request: ModifyOrderAutoRebootTimeRequest, runtime: Util.RuntimeOptions): ModifyOrderAutoRebootTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRebootTime)) {
    query['AutoRebootTime'] = request.autoRebootTime;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOrderAutoRebootTime',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOrderAutoRebootTime(request: ModifyOrderAutoRebootTimeRequest): ModifyOrderAutoRebootTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOrderAutoRebootTimeWithOptions(request, runtime);
}

model ModifyPrivatePoolRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='PrivatePoolOptions'),
  description?: string(name='Description'),
  endTime?: string(name='EndTime'),
  endTimeType?: string(name='EndTimeType'),
  instanceAmount?: int32(name='InstanceAmount'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model ModifyPrivatePoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPrivatePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPrivatePoolResponseBody(name='body'),
}

async function modifyPrivatePoolWithOptions(request: ModifyPrivatePoolRequest, runtime: Util.RuntimeOptions): ModifyPrivatePoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endTimeType)) {
    query['EndTimeType'] = request.endTimeType;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrivatePool',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPrivatePool(request: ModifyPrivatePoolRequest): ModifyPrivatePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrivatePoolWithOptions(request, runtime);
}

model ModifyReservationDemandRequest {
  clientToken?: string(name='ClientToken'),
  confirmType?: string(name='ConfirmType'),
  couponAuto?: boolean(name='CouponAuto'),
  couponType?: string(name='CouponType'),
  demandId?: string(name='DemandId'),
  description?: string(name='Description'),
  instanceAmount?: int32(name='InstanceAmount'),
  instanceChargeType?: string(name='InstanceChargeType'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  instanceTypes?: string(name='InstanceTypes'),
  matchCriteria?: string(name='MatchCriteria'),
  name?: string(name='Name'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  phoneNumber?: string(name='PhoneNumber'),
  platform?: string(name='Platform'),
  privatePoolOptions?: [ 
    {
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      matchCriteria?: string(name='MatchCriteria'),
      planId?: string(name='PlanId'),
      startTime?: string(name='StartTime'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='PrivatePoolOptions'),
  productType?: string(name='ProductType'),
  regionId?: string(name='RegionId'),
  reservedInstanceDescription?: string(name='ReservedInstanceDescription'),
  reservedInstanceGroupId?: string(name='ReservedInstanceGroupId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  reservedInstanceOfferingType?: string(name='ReservedInstanceOfferingType'),
  reservedInstanceScope?: string(name='ReservedInstanceScope'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceSupplyType?: string(name='ResourceSupplyType'),
  savingPlanDescription?: string(name='SavingPlanDescription'),
  savingPlanHourFee?: float(name='SavingPlanHourFee'),
  savingPlanId?: string(name='SavingPlanId'),
  savingPlanInstanceTypeFamilyGroup?: string(name='SavingPlanInstanceTypeFamilyGroup'),
  savingPlanName?: string(name='SavingPlanName'),
  savingPlanPayMode?: string(name='SavingPlanPayMode'),
  savingPlanSavingType?: string(name='SavingPlanSavingType'),
  startTime?: string(name='StartTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneIds?: string(name='ZoneIds'),
}

model ModifyReservationDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReservationDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyReservationDemandResponseBody(name='body'),
}

async function modifyReservationDemandWithOptions(request: ModifyReservationDemandRequest, runtime: Util.RuntimeOptions): ModifyReservationDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.confirmType)) {
    query['ConfirmType'] = request.confirmType;
  }
  if (!Util.isUnset(request.couponAuto)) {
    query['CouponAuto'] = request.couponAuto;
  }
  if (!Util.isUnset(request.couponType)) {
    query['CouponType'] = request.couponType;
  }
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceCpuCoreCount)) {
    query['InstanceCpuCoreCount'] = request.instanceCpuCoreCount;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.matchCriteria)) {
    query['MatchCriteria'] = request.matchCriteria;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceDescription)) {
    query['ReservedInstanceDescription'] = request.reservedInstanceDescription;
  }
  if (!Util.isUnset(request.reservedInstanceGroupId)) {
    query['ReservedInstanceGroupId'] = request.reservedInstanceGroupId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.reservedInstanceOfferingType)) {
    query['ReservedInstanceOfferingType'] = request.reservedInstanceOfferingType;
  }
  if (!Util.isUnset(request.reservedInstanceScope)) {
    query['ReservedInstanceScope'] = request.reservedInstanceScope;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceSupplyType)) {
    query['ResourceSupplyType'] = request.resourceSupplyType;
  }
  if (!Util.isUnset(request.savingPlanDescription)) {
    query['SavingPlanDescription'] = request.savingPlanDescription;
  }
  if (!Util.isUnset(request.savingPlanHourFee)) {
    query['SavingPlanHourFee'] = request.savingPlanHourFee;
  }
  if (!Util.isUnset(request.savingPlanId)) {
    query['SavingPlanId'] = request.savingPlanId;
  }
  if (!Util.isUnset(request.savingPlanInstanceTypeFamilyGroup)) {
    query['SavingPlanInstanceTypeFamilyGroup'] = request.savingPlanInstanceTypeFamilyGroup;
  }
  if (!Util.isUnset(request.savingPlanName)) {
    query['SavingPlanName'] = request.savingPlanName;
  }
  if (!Util.isUnset(request.savingPlanPayMode)) {
    query['SavingPlanPayMode'] = request.savingPlanPayMode;
  }
  if (!Util.isUnset(request.savingPlanSavingType)) {
    query['SavingPlanSavingType'] = request.savingPlanSavingType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneIds)) {
    query['ZoneIds'] = request.zoneIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReservationDemand',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyReservationDemand(request: ModifyReservationDemandRequest): ModifyReservationDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservationDemandWithOptions(request, runtime);
}

model ModifyReservedInstanceAttributeRequest {
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: string(name='ReservedInstanceId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyReservedInstanceAttributeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyReservedInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyReservedInstanceAttributeResponseBody(name='body'),
}

async function modifyReservedInstanceAttributeWithOptions(request: ModifyReservedInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyReservedInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReservedInstanceAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyReservedInstanceAttribute(request: ModifyReservedInstanceAttributeRequest): ModifyReservedInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstanceAttributeWithOptions(request, runtime);
}

model ModifyReservedInstancesRequest {
  configuration?: [ 
    {
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      reservedInstanceName?: string(name='ReservedInstanceName'),
      scope?: string(name='Scope'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Configuration'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ModifyReservedInstancesResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
}

model ModifyReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyReservedInstancesResponseBody(name='body'),
}

async function modifyReservedInstancesWithOptions(request: ModifyReservedInstancesRequest, runtime: Util.RuntimeOptions): ModifyReservedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReservedInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyReservedInstances(request: ModifyReservedInstancesRequest): ModifyReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstancesWithOptions(request, runtime);
}

model ModifyResourceDiagnosisStatusRequest {
  diagnosisStatus?: string(name='DiagnosisStatus'),
  errorCode?: string(name='ErrorCode'),
  instanceType?: string(name='InstanceType'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model ModifyResourceDiagnosisStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyResourceDiagnosisStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyResourceDiagnosisStatusResponseBody(name='body'),
}

async function modifyResourceDiagnosisStatusWithOptions(request: ModifyResourceDiagnosisStatusRequest, runtime: Util.RuntimeOptions): ModifyResourceDiagnosisStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diagnosisStatus)) {
    query['DiagnosisStatus'] = request.diagnosisStatus;
  }
  if (!Util.isUnset(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyResourceDiagnosisStatus',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyResourceDiagnosisStatus(request: ModifyResourceDiagnosisStatusRequest): ModifyResourceDiagnosisStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceDiagnosisStatusWithOptions(request, runtime);
}

model ModifyResourceMetaRequest {
  meta?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='Meta'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model ModifyResourceMetaResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyResourceMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyResourceMetaResponseBody(name='body'),
}

async function modifyResourceMetaWithOptions(request: ModifyResourceMetaRequest, runtime: Util.RuntimeOptions): ModifyResourceMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyResourceMeta',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyResourceMeta(request: ModifyResourceMetaRequest): ModifyResourceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceMetaWithOptions(request, runtime);
}

model ModifyStorageSetAttributeRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSetId?: string(name='StorageSetId'),
  storageSetName?: string(name='StorageSetName'),
}

model ModifyStorageSetAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStorageSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStorageSetAttributeResponseBody(name='body'),
}

async function modifyStorageSetAttributeWithOptions(request: ModifyStorageSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageSetAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStorageSetAttribute',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStorageSetAttribute(request: ModifyStorageSetAttributeRequest): ModifyStorageSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageSetAttributeWithOptions(request, runtime);
}

model ModifyWaitingOrderRequest {
  clientToken?: string(name='ClientToken'),
  instanceAmount?: long(name='InstanceAmount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  waitingOrderId?: string(name='WaitingOrderId'),
}

model ModifyWaitingOrderResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWaitingOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWaitingOrderResponseBody(name='body'),
}

async function modifyWaitingOrderWithOptions(request: ModifyWaitingOrderRequest, runtime: Util.RuntimeOptions): ModifyWaitingOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.waitingOrderId)) {
    query['WaitingOrderId'] = request.waitingOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWaitingOrder',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWaitingOrder(request: ModifyWaitingOrderRequest): ModifyWaitingOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWaitingOrderWithOptions(request, runtime);
}

model PurchaseReservedInstancesOfferingRequest {
  autoPay?: boolean(name='AutoPay'),
  businessInfo?: string(name='BusinessInfo'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  fromApp?: string(name='FromApp'),
  instanceAmount?: int32(name='InstanceAmount'),
  instanceType?: string(name='InstanceType'),
  offeringType?: string(name='OfferingType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  platform?: string(name='Platform'),
  regionId?: string(name='RegionId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scope?: string(name='Scope'),
  startTime?: string(name='StartTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
}

model PurchaseReservedInstancesOfferingResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
}

model PurchaseReservedInstancesOfferingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseReservedInstancesOfferingResponseBody(name='body'),
}

async function purchaseReservedInstancesOfferingWithOptions(request: PurchaseReservedInstancesOfferingRequest, runtime: Util.RuntimeOptions): PurchaseReservedInstancesOfferingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurchaseReservedInstancesOffering',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function purchaseReservedInstancesOffering(request: PurchaseReservedInstancesOfferingRequest): PurchaseReservedInstancesOfferingResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseReservedInstancesOfferingWithOptions(request, runtime);
}

model PurchaseSavingPlanOfferingRequest {
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  committedAmount?: string(name='CommittedAmount'),
  description?: string(name='Description'),
  instanceFamily?: string(name='InstanceFamily'),
  instanceFamilySet?: string(name='InstanceFamilySet'),
  name?: string(name='Name'),
  offeringType?: string(name='OfferingType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  planType?: string(name='PlanType'),
  purchaseMethod?: string(name='PurchaseMethod'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  startTime?: string(name='StartTime'),
}

model PurchaseSavingPlanOfferingResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  savingPlanIdSets?: [ string ](name='SavingPlanIdSets'),
}

model PurchaseSavingPlanOfferingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseSavingPlanOfferingResponseBody(name='body'),
}

async function purchaseSavingPlanOfferingWithOptions(request: PurchaseSavingPlanOfferingRequest, runtime: Util.RuntimeOptions): PurchaseSavingPlanOfferingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.committedAmount)) {
    query['CommittedAmount'] = request.committedAmount;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceFamily)) {
    query['InstanceFamily'] = request.instanceFamily;
  }
  if (!Util.isUnset(request.instanceFamilySet)) {
    query['InstanceFamilySet'] = request.instanceFamilySet;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  if (!Util.isUnset(request.purchaseMethod)) {
    query['PurchaseMethod'] = request.purchaseMethod;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurchaseSavingPlanOffering',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function purchaseSavingPlanOffering(request: PurchaseSavingPlanOfferingRequest): PurchaseSavingPlanOfferingResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseSavingPlanOfferingWithOptions(request, runtime);
}

model PurchaseStorageCapacityUnitRequest {
  amount?: int32(name='Amount'),
  capacity?: int32(name='Capacity'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  extendParams?: string(name='ExtendParams'),
  fromApp?: string(name='FromApp'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model PurchaseStorageCapacityUnitResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  storageCapacityUnitIds?: {
    storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId')
  }(name='StorageCapacityUnitIds'),
}

model PurchaseStorageCapacityUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseStorageCapacityUnitResponseBody(name='body'),
}

async function purchaseStorageCapacityUnitWithOptions(request: PurchaseStorageCapacityUnitRequest, runtime: Util.RuntimeOptions): PurchaseStorageCapacityUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.extendParams)) {
    query['ExtendParams'] = request.extendParams;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurchaseStorageCapacityUnit',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function purchaseStorageCapacityUnit(request: PurchaseStorageCapacityUnitRequest): PurchaseStorageCapacityUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseStorageCapacityUnitWithOptions(request, runtime);
}

model QueryEniQosGroupByEniRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryEniQosGroupByEniResponseBody = {
  qosGroupName?: string(name='QosGroupName'),
  requestId?: string(name='RequestId'),
}

model QueryEniQosGroupByEniResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEniQosGroupByEniResponseBody(name='body'),
}

async function queryEniQosGroupByEniWithOptions(request: QueryEniQosGroupByEniRequest, runtime: Util.RuntimeOptions): QueryEniQosGroupByEniResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEniQosGroupByEni',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEniQosGroupByEni(request: QueryEniQosGroupByEniRequest): QueryEniQosGroupByEniResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEniQosGroupByEniWithOptions(request, runtime);
}

model QueryEniQosGroupByInstanceRequest {
  instanceId?: string(name='InstanceId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryEniQosGroupByInstanceResponseBody = {
  data?: {
    eniQosGroups?: [ string ](name='EniQosGroups')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryEniQosGroupByInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEniQosGroupByInstanceResponseBody(name='body'),
}

async function queryEniQosGroupByInstanceWithOptions(request: QueryEniQosGroupByInstanceRequest, runtime: Util.RuntimeOptions): QueryEniQosGroupByInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEniQosGroupByInstance',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEniQosGroupByInstance(request: QueryEniQosGroupByInstanceRequest): QueryEniQosGroupByInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEniQosGroupByInstanceWithOptions(request, runtime);
}

model ReAddMigrationTaskInPlanRequest {
  instanceId?: string(name='InstanceId'),
  migrationPlanId?: string(name='MigrationPlanId'),
  migrationTime?: string(name='MigrationTime'),
  networkMigrationType?: string(name='NetworkMigrationType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReAddMigrationTaskInPlanResponseBody = {
  failModels?: {
    failModels?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
    }
  ](name='FailModels')
  }(name='FailModels'),
  requestId?: string(name='RequestId'),
}

model ReAddMigrationTaskInPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReAddMigrationTaskInPlanResponseBody(name='body'),
}

async function reAddMigrationTaskInPlanWithOptions(request: ReAddMigrationTaskInPlanRequest, runtime: Util.RuntimeOptions): ReAddMigrationTaskInPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.migrationPlanId)) {
    query['MigrationPlanId'] = request.migrationPlanId;
  }
  if (!Util.isUnset(request.migrationTime)) {
    query['MigrationTime'] = request.migrationTime;
  }
  if (!Util.isUnset(request.networkMigrationType)) {
    query['NetworkMigrationType'] = request.networkMigrationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReAddMigrationTaskInPlan',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reAddMigrationTaskInPlan(request: ReAddMigrationTaskInPlanRequest): ReAddMigrationTaskInPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return reAddMigrationTaskInPlanWithOptions(request, runtime);
}

model ReleaseCapacityReservationRequest {
  capacityReservationId?: string(name='CapacityReservationId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  token?: string(name='Token'),
}

model ReleaseCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseCapacityReservationResponseBody(name='body'),
}

async function releaseCapacityReservationWithOptions(request: ReleaseCapacityReservationRequest, runtime: Util.RuntimeOptions): ReleaseCapacityReservationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.capacityReservationId)) {
    query['CapacityReservationId'] = request.capacityReservationId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseCapacityReservation',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseCapacityReservation(request: ReleaseCapacityReservationRequest): ReleaseCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseCapacityReservationWithOptions(request, runtime);
}

model ReleaseDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  force?: boolean(name='Force'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  token?: string(name='Token'),
}

model ReleaseDedicatedHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseDedicatedHostResponseBody(name='body'),
}

async function releaseDedicatedHostWithOptions(request: ReleaseDedicatedHostRequest, runtime: Util.RuntimeOptions): ReleaseDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseDedicatedHost',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseDedicatedHost(request: ReleaseDedicatedHostRequest): ReleaseDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseDedicatedHostWithOptions(request, runtime);
}

model RenewDedicatedHostsRequest {
  businessInfo?: string(name='BusinessInfo'),
  clientToken?: string(name='ClientToken'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  fromApp?: string(name='FromApp'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RenewDedicatedHostsResponseBody = {
  dedicatedHostIdSets?: {
    dedicatedHostId?: [ string ](name='DedicatedHostId')
  }(name='DedicatedHostIdSets'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewDedicatedHostsResponseBody(name='body'),
}

async function renewDedicatedHostsWithOptions(request: RenewDedicatedHostsRequest, runtime: Util.RuntimeOptions): RenewDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewDedicatedHosts',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewDedicatedHosts(request: RenewDedicatedHostsRequest): RenewDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDedicatedHostsWithOptions(request, runtime);
}

model ReviewDiagnosticReportRequest {
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceSystem?: string(name='SourceSystem'),
  status?: string(name='Status'),
}

model ReviewDiagnosticReportResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model ReviewDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReviewDiagnosticReportResponseBody(name='body'),
}

async function reviewDiagnosticReportWithOptions(request: ReviewDiagnosticReportRequest, runtime: Util.RuntimeOptions): ReviewDiagnosticReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceSystem)) {
    query['SourceSystem'] = request.sourceSystem;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReviewDiagnosticReport',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reviewDiagnosticReport(request: ReviewDiagnosticReportRequest): ReviewDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return reviewDiagnosticReportWithOptions(request, runtime);
}

model RunInstancesRequest {
  hibernationOptions?: {
    configured?: boolean(name='Configured'),
  }(name='HibernationOptions'),
  privatePoolOptions?: {
    id?: string(name='Id'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions'),
  schedulerOptions?: {
    managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
  }(name='SchedulerOptions'),
  securityOptions?: {
    confidentialComputingMode?: string(name='ConfidentialComputingMode'),
    trustedSystemMode?: string(name='TrustedSystemMode'),
  }(name='SecurityOptions'),
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    category?: string(name='Category'),
    deleteWithInstance?: boolean(name='DeleteWithInstance'),
    description?: string(name='Description'),
    diskName?: string(name='DiskName'),
    performanceLevel?: string(name='PerformanceLevel'),
    size?: string(name='Size'),
    burstingEnabled?: boolean(name='BurstingEnabled'),
    encryptAlgorithm?: string(name='EncryptAlgorithm'),
    encrypted?: boolean(name='Encrypted'),
    KMSKeyId?: string(name='KMSKeyId'),
    provisionedIops?: long(name='ProvisionedIops'),
    storageClusterId?: string(name='StorageClusterId'),
  }(name='SystemDisk'),
  affinity?: string(name='Affinity'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  businessInfo?: string(name='BusinessInfo'),
  clientToken?: string(name='ClientToken'),
  clusterId?: string(name='ClusterId'),
  creditSpecification?: string(name='CreditSpecification'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      burstingEnabled?: boolean(name='BurstingEnabled'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      description?: string(name='Description'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      encryptAlgorithm?: string(name='EncryptAlgorithm'),
      encrypted?: boolean(name='Encrypted'),
      KMSKeyId?: string(name='KMSKeyId'),
      performanceLevel?: string(name='PerformanceLevel'),
      provisionedIops?: long(name='ProvisionedIops'),
      size?: int32(name='Size'),
      snapshotId?: string(name='SnapshotId'),
      storageClusterId?: string(name='StorageClusterId'),
    }
  ](name='DataDisk'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  defaultVpc?: string(name='DefaultVpc'),
  deletionProtection?: boolean(name='DeletionProtection'),
  deploymentSetGroupNo?: string(name='DeploymentSetGroupNo'),
  deploymentSetId?: string(name='DeploymentSetId'),
  description?: string(name='Description'),
  dryRun?: boolean(name='DryRun'),
  fromApp?: string(name='FromApp'),
  hostName?: string(name='HostName'),
  hostNames?: [ string ](name='HostNames'),
  hpcClusterId?: string(name='HpcClusterId'),
  httpEndpoint?: string(name='HttpEndpoint'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
  httpTokens?: string(name='HttpTokens'),
  imageFamily?: string(name='ImageFamily'),
  imageId?: string(name='ImageId'),
  imageOptions?: {
    loginAsNonRoot?: boolean(name='LoginAsNonRoot'),
  }(name='ImageOptions'),
  instance?: [ 
    {
      privateIpAddress?: string(name='PrivateIpAddress'),
    }
  ](name='Instance'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  ioOptimized?: string(name='IoOptimized'),
  ipv6Address?: [ string ](name='Ipv6Address'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  isp?: string(name='Isp'),
  keyPairName?: string(name='KeyPairName'),
  maxAmount?: int32(name='MaxAmount'),
  minAmount?: int32(name='MinAmount'),
  networkInterface?: [ 
    {
      description?: string(name='Description'),
      instanceType?: string(name='InstanceType'),
      ipv6Address?: [ string ](name='Ipv6Address'),
      ipv6AddressCount?: long(name='Ipv6AddressCount'),
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode'),
      primaryIpAddress?: string(name='PrimaryIpAddress'),
      queuePairNumber?: long(name='QueuePairNumber'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='NetworkInterface'),
  networkType?: string(name='NetworkType'),
  nodeControllerId?: string(name='NodeControllerId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  passwordInherit?: boolean(name='PasswordInherit'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  ramRoleName?: string(name='RamRoleName'),
  recycleBinResourceId?: string(name='RecycleBinResourceId'),
  regionId?: string(name='RegionId'),
  relationOrderId?: string(name='RelationOrderId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  securityGroupId?: string(name='SecurityGroupId'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
  securityGroupRule?: [ 
    {
      ipProtocol?: string(name='IpProtocol'),
      nicType?: string(name='NicType'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
    }
  ](name='SecurityGroupRule'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotStrategy?: string(name='SpotStrategy'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tenancy?: string(name='Tenancy'),
  uniqueSuffix?: boolean(name='UniqueSuffix'),
  userData?: string(name='UserData'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model RunInstancesResponseBody = {
  instanceIdSets?: {
    instanceIdSet?: [ string ](name='InstanceIdSet')
  }(name='InstanceIdSets'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model RunInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunInstancesResponseBody(name='body'),
}

async function runInstancesWithOptions(request: RunInstancesRequest, runtime: Util.RuntimeOptions): RunInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.creditSpecification)) {
    query['CreditSpecification'] = request.creditSpecification;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.defaultVpc)) {
    query['DefaultVpc'] = request.defaultVpc;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.deploymentSetGroupNo)) {
    query['DeploymentSetGroupNo'] = request.deploymentSetGroupNo;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.hostNames)) {
    query['HostNames'] = request.hostNames;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.httpEndpoint)) {
    query['HttpEndpoint'] = request.httpEndpoint;
  }
  if (!Util.isUnset(request.httpPutResponseHopLimit)) {
    query['HttpPutResponseHopLimit'] = request.httpPutResponseHopLimit;
  }
  if (!Util.isUnset(request.httpTokens)) {
    query['HttpTokens'] = request.httpTokens;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageOptions)) {
    query['ImageOptions'] = request.imageOptions;
  }
  if (!Util.isUnset(request.instance)) {
    query['Instance'] = request.instance;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.maxAmount)) {
    query['MaxAmount'] = request.maxAmount;
  }
  if (!Util.isUnset(request.minAmount)) {
    query['MinAmount'] = request.minAmount;
  }
  if (!Util.isUnset(request.networkInterface)) {
    query['NetworkInterface'] = request.networkInterface;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.nodeControllerId)) {
    query['NodeControllerId'] = request.nodeControllerId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.recycleBinResourceId)) {
    query['RecycleBinResourceId'] = request.recycleBinResourceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.relationOrderId)) {
    query['RelationOrderId'] = request.relationOrderId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.securityGroupRule)) {
    query['SecurityGroupRule'] = request.securityGroupRule;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotInterruptionBehavior)) {
    query['SpotInterruptionBehavior'] = request.spotInterruptionBehavior;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  if (!Util.isUnset(request.uniqueSuffix)) {
    query['UniqueSuffix'] = request.uniqueSuffix;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.hibernationOptions)) {
    query['HibernationOptions'] = request.hibernationOptions;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  if (!Util.isUnset(request.securityOptions)) {
    query['SecurityOptions'] = request.securityOptions;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunInstances',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runInstancesWithOptions(request, runtime);
}

model SetInstanceAutoReleaseTimeRequest {
  autoReleaseTime?: string(name='AutoReleaseTime'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SetInstanceAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetInstanceAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetInstanceAutoReleaseTimeResponseBody(name='body'),
}

async function setInstanceAutoReleaseTimeWithOptions(request: SetInstanceAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): SetInstanceAutoReleaseTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetInstanceAutoReleaseTime',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setInstanceAutoReleaseTime(request: SetInstanceAutoReleaseTimeRequest): SetInstanceAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstanceAutoReleaseTimeWithOptions(request, runtime);
}

model StartNetworkInsightsAnalysisRequest {
  dryRun?: boolean(name='DryRun'),
  networkInsightsPathId?: string(name='NetworkInsightsPathId'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartNetworkInsightsAnalysisResponseBody = {
  networkInsightsAnalysisId?: string(name='NetworkInsightsAnalysisId'),
  requestId?: string(name='RequestId'),
}

model StartNetworkInsightsAnalysisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartNetworkInsightsAnalysisResponseBody(name='body'),
}

async function startNetworkInsightsAnalysisWithOptions(request: StartNetworkInsightsAnalysisRequest, runtime: Util.RuntimeOptions): StartNetworkInsightsAnalysisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.networkInsightsPathId)) {
    query['NetworkInsightsPathId'] = request.networkInsightsPathId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartNetworkInsightsAnalysis',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startNetworkInsightsAnalysis(request: StartNetworkInsightsAnalysisRequest): StartNetworkInsightsAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return startNetworkInsightsAnalysisWithOptions(request, runtime);
}

model UpdateServiceSettingsRequest {
  cloudAssistantDeliverySettings?: {
    ossBucketName?: string(name='OssBucketName'),
    ossEnabled?: boolean(name='OssEnabled'),
    ossKeyPrefix?: string(name='OssKeyPrefix'),
    slsEnabled?: boolean(name='SlsEnabled'),
    slsLogstoreName?: string(name='SlsLogstoreName'),
    slsProjectName?: string(name='SlsProjectName'),
  }(name='CloudAssistantDeliverySettings'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateServiceSettingsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateServiceSettingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceSettingsResponseBody(name='body'),
}

async function updateServiceSettingsWithOptions(request: UpdateServiceSettingsRequest, runtime: Util.RuntimeOptions): UpdateServiceSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.cloudAssistantDeliverySettings)) {
    query['CloudAssistantDeliverySettings'] = request.cloudAssistantDeliverySettings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceSettings',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceSettings(request: UpdateServiceSettingsRequest): UpdateServiceSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceSettingsWithOptions(request, runtime);
}

model UnmountPEDiskRequest {
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceSystem?: string(name='SourceSystem'),
  status?: string(name='Status'),
}

model UnmountPEDiskResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UnmountPEDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnmountPEDiskResponseBody(name='body'),
}

async function unmountPEDiskWithOptions(request: UnmountPEDiskRequest, runtime: Util.RuntimeOptions): UnmountPEDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceSystem)) {
    query['SourceSystem'] = request.sourceSystem;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'unmountPEDisk',
    version = '2016-03-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unmountPEDisk(request: UnmountPEDiskRequest): UnmountPEDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return unmountPEDiskWithOptions(request, runtime);
}

