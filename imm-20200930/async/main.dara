/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'imm';
  @version = '2020-09-30';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing-gov-1 = 'imm-vpc.cn-beijing-gov-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model Address {
  addressLine?: string(name='AddressLine', description='AddressLine'),
  city?: string(name='City', description='City'),
  country?: string(name='Country', description='Country'),
  district?: string(name='District', description='District'),
  language?: string(name='Language', description='Language'),
  province?: string(name='Province', description='Province'),
  township?: string(name='Township', description='Township'),
}

model AddressForStory {
  city?: string(name='City', description='城市'),
  country?: string(name='Country', description='国家'),
  district?: string(name='District', description='地区'),
  province?: string(name='Province', description='省'),
  township?: string(name='Township', description='乡镇'),
}

model AssumeRoleChain {
  chain?: [
    AssumeRoleChainNode
  ](name='Chain', description='链式授权节点'),
  policy?: string(name='Policy', description='当前用户 policy'),
}

model AssumeRoleChainNode {
  ownerId: string(name='OwnerId', description='账号id', example='1023210024677934'),
  role: string(name='Role', description='授权角色名', example='test-role'),
  type: string(name='Type', description='账号类型，普通账号填 user，服务账号填 service', example='user'),
}

model AudioStream {
  bitrate?: long(name='Bitrate', description='Bitrate'),
  channelLayout?: string(name='ChannelLayout', description='ChannelLayout'),
  channels?: long(name='Channels', description='Channels'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  codecTimeBase?: string(name='CodecTimeBase', description='CodecTimeBase'),
  duration?: double(name='Duration', description='Duration'),
  frameCount?: long(name='FrameCount', description='FrameCount'),
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  lyric?: string(name='Lyric', description='Lyric'),
  sampleFormat?: string(name='SampleFormat', description='SampleFormat'),
  sampleRate?: long(name='SampleRate', description='SampleRate'),
  startTime?: double(name='StartTime', description='StartTime'),
  timeBase?: string(name='TimeBase', description='TimeBase'),
}

model Binding {
  createTime?: string(name='CreateTime', description='CreateTime'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  detail?: string(name='Detail', description='Detail'),
  phase?: string(name='Phase', description='Phase'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  state?: string(name='State', description='State'),
  URI?: string(name='URI', description='URI'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
}

model Body {
  boundary?: Boundary(name='Boundary', description='Boundary'),
  confidence?: float(name='Confidence', description='Confidence'),
}

model Boundary {
  height?: long(name='Height', description='Height'),
  left?: long(name='Left', description='Left'),
  top?: long(name='Top', description='Top'),
  width?: long(name='Width', description='Width'),
}

model ClusterForReq {
  cover?: {
    figures?: [ 
      {
        figureId?: string(name='FigureId', description='FigureId'),
      }
    ](name='Figures', description='Figures'),
  }(name='Cover', description='Cover'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  name?: string(name='Name', description='Name'),
  objectId?: string(name='ObjectId', description='ObjectId'),
}

model Codes {
  boundary?: Boundary(name='Boundary', description='Boundary'),
  confidence?: float(name='Confidence', description='Confidence'),
  content?: string(name='Content', description='Content'),
  type?: string(name='Type', description='Type'),
}

model CredentialConfig {
  chain?: [ 
    {
      assumeRoleFor?: string(name='AssumeRoleFor', description='授权对象'),
      role?: string(name='Role', description='授权角色'),
      roleType?: string(name='RoleType', description='授权方类型'),
    }
  ](name='Chain', description='授权链'),
  policy?: string(name='Policy', description='权限策略'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
}

model CroppingSuggestion {
  aspectRatio?: string(name='AspectRatio', description='AspectRatio'),
  boundary?: Boundary(name='Boundary', description='Boundary'),
  confidence?: float(name='Confidence', description='Confidence'),
}

model DataIngestion {
  actions?: [ 
    {
      name?: string(name='Name', description='动作名称'),
      parameters?: [ string ](name='Parameters', description='动作参数'),
    }
  ](name='Actions', description='运行模板'),
  createTime?: string(name='CreateTime', description='任务创建时间'),
  error?: string(name='Error', description='错误信息'),
  id?: string(name='Id', description='数据接入唯一标识'),
  input?: Input(name='Input', description='数据源信息'),
  marker?: string(name='Marker', description='任务执行进度'),
  notification?: {
    endpoint?: string(name='Endpoint', description='MNS 地址'),
    topic?: string(name='Topic', description='MNS 主题'),
  }(name='Notification', description='通知地址'),
  state?: string(name='State', description='任务执行状态'),
  statistic?: {
    submitFailure?: long(name='SubmitFailure', description='提交失败个数'),
    submitSuccess?: long(name='SubmitSuccess', description='提交成功个数'),
  }(name='Statistic', description='统计信息'),
  tags?: map[string]any(name='Tags', description='标签'),
  updateTime?: string(name='UpdateTime', description='任务更新时间'),
}

model Dataset {
  bindCount?: long(name='BindCount', description='媒体集当前绑定数'),
  createTime?: string(name='CreateTime', description='创建时间'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最大绑定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数量'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数量'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数量'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小'),
  datasetName?: string(name='DatasetName', description='媒体集名称'),
  description?: string(name='Description', description='描述'),
  fileCount?: long(name='FileCount', description='媒体集当前文件数'),
  projectName?: string(name='ProjectName', description='项目名称'),
  templateId?: string(name='TemplateId', description='模板Id'),
  totalFileSize?: long(name='TotalFileSize', description='媒体集当前文件总大小'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model Figure {
  age?: long(name='Age', description='Age'),
  ageSD?: float(name='AgeSD', description='AgeSD'),
  attractive?: float(name='Attractive', description='Attractive'),
  beard?: string(name='Beard', description='Beard'),
  beardConfidence?: float(name='BeardConfidence', description='BeardConfidence'),
  boundary?: Boundary(name='Boundary', description='Boundary'),
  emotion?: string(name='Emotion', description='Emotion'),
  emotionConfidence?: float(name='EmotionConfidence', description='EmotionConfidence'),
  faceQuality?: float(name='FaceQuality', description='FaceQuality'),
  figureClusterConfidence?: float(name='FigureClusterConfidence', description='FigureClusterConfidence'),
  figureClusterId?: string(name='FigureClusterId', description='FigureClusterId'),
  figureConfidence?: float(name='FigureConfidence', description='FigureConfidence'),
  figureId?: string(name='FigureId', description='FigureId'),
  figureType?: string(name='FigureType', description='FigureType'),
  gender?: string(name='Gender', description='Gender'),
  genderConfidence?: float(name='GenderConfidence', description='GenderConfidence'),
  glasses?: string(name='Glasses', description='Glasses'),
  glassesConfidence?: float(name='GlassesConfidence', description='GlassesConfidence'),
  hat?: string(name='Hat', description='Hat'),
  hatConfidence?: float(name='HatConfidence', description='HatConfidence'),
  headPose?: HeadPose(name='HeadPose'),
  mask?: string(name='Mask', description='Mask'),
  maskConfidence?: float(name='MaskConfidence', description='MaskConfidence'),
  mouth?: string(name='Mouth', description='Mouth'),
  mouthConfidence?: float(name='MouthConfidence', description='MouthConfidence'),
  sharpness?: float(name='Sharpness', description='Sharpness'),
}

model FigureCluster {
  averageAge?: float(name='AverageAge', description='AverageAge'),
  cover?: File(name='Cover', description='Cover'),
  createTime?: string(name='CreateTime', description='CreateTime'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  faceCount?: long(name='FaceCount', description='FaceCount'),
  gender?: string(name='Gender', description='Gender'),
  imageCount?: long(name='ImageCount', description='ImageCount'),
  maxAge?: float(name='MaxAge', description='MaxAge'),
  metaLockVersion?: long(name='MetaLockVersion', description='MetaLockVersion'),
  minAge?: float(name='MinAge', description='MinAge'),
  name?: string(name='Name', description='Name'),
  objectId?: string(name='ObjectId', description='ObjectId'),
  objectType?: string(name='ObjectType', description='ObjectType'),
  ownerId?: string(name='OwnerId', description='OwnerId'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
  videoCount?: long(name='VideoCount', description='VideoCount'),
}

model FigureClusterForReq {
  cover?: {
    figures?: [ 
      {
        figureId?: string(name='FigureId', description='FigureId'),
      }
    ](name='Figures', description='Figures'),
  }(name='Cover', description='Cover'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  metaLockVersion?: long(name='MetaLockVersion', description='MetaLockVersion'),
  name?: string(name='Name', description='Name'),
  objectId?: string(name='ObjectId', description='ObjectId'),
}

model File {
  accessControlAllowOrigin?: string(name='AccessControlAllowOrigin', description='AccessControlAllowOrigin'),
  accessControlRequestMethod?: string(name='AccessControlRequestMethod', description='AccessControlRequestMethod'),
  addresses?: [
    Address
  ](name='Addresses', description='Addresses'),
  album?: string(name='Album', description='Album'),
  albumArtist?: string(name='AlbumArtist', description='AlbumArtist'),
  artist?: string(name='Artist', description='Artist'),
  audioCovers?: [
    Image
  ](name='AudioCovers', description='AudioCovers'),
  audioStreams?: [
    AudioStream
  ](name='AudioStreams', description='AudioStreams'),
  bitrate?: long(name='Bitrate', description='Bitrate'),
  cacheControl?: string(name='CacheControl', description='CacheControl'),
  composer?: string(name='Composer', description='Composer'),
  contentDisposition?: string(name='ContentDisposition', description='ContentDisposition'),
  contentEncoding?: string(name='ContentEncoding', description='ContentEncoding'),
  contentLanguage?: string(name='ContentLanguage', description='ContentLanguage'),
  contentMd5?: string(name='ContentMd5', description='ContentMd5'),
  contentType?: string(name='ContentType', description='ContentType'),
  createTime?: string(name='CreateTime', description='CreateTime'),
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions', description='CroppingSuggestions'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  documentContent?: string(name='DocumentContent', description='DocumentContent'),
  documentLanguage?: string(name='DocumentLanguage', description='DocumentLanguage'),
  duration?: double(name='Duration', description='Duration'),
  eTag?: string(name='ETag', description='ETag'),
  EXIF?: string(name='EXIF', description='EXIF'),
  figureCount?: long(name='FigureCount', description='FigureCount'),
  figures?: [
    Figure
  ](name='Figures', description='Figures'),
  fileAccessTime?: string(name='FileAccessTime', description='FileAccessTime'),
  fileCreateTime?: string(name='FileCreateTime', description='FileCreateTime'),
  fileHash?: string(name='FileHash', description='FileHash'),
  fileModifiedTime?: string(name='FileModifiedTime', description='FileModifiedTime'),
  filename?: string(name='Filename', description='Filename'),
  formatLongName?: string(name='FormatLongName', description='FormatLongName'),
  formatName?: string(name='FormatName', description='FormatName'),
  imageHeight?: long(name='ImageHeight', description='ImageHeight'),
  imageScore?: ImageScore(name='ImageScore'),
  imageWidth?: long(name='ImageWidth', description='ImageWidth'),
  labels?: [
    Label
  ](name='Labels', description='Labels'),
  language?: string(name='Language', description='Language'),
  latLong?: string(name='LatLong', description='LatLong'),
  mediaType?: string(name='MediaType', description='MediaType'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents', description='OCRContents'),
  OSSCRC64?: string(name='OSSCRC64', description='OSSCRC64'),
  OSSDeleteMarker?: string(name='OSSDeleteMarker', description='OSSDeleteMarker'),
  OSSExpiration?: string(name='OSSExpiration', description='OSSExpiration'),
  OSSObjectType?: string(name='OSSObjectType', description='OSSObjectType'),
  OSSStorageClass?: string(name='OSSStorageClass', description='OSSStorageClass'),
  OSSTagging?: map[string]any(name='OSSTagging', description='OSSTagging'),
  OSSTaggingCount?: long(name='OSSTaggingCount', description='OSSTaggingCount'),
  OSSURI?: string(name='OSSURI', description='OSSURI'),
  OSSUserMeta?: map[string]any(name='OSSUserMeta', description='OSSUserMeta'),
  OSSVersionId?: string(name='OSSVersionId', description='OSSVersionId'),
  objectACL?: string(name='ObjectACL', description='ObjectACL'),
  objectId?: string(name='ObjectId', description='ObjectId'),
  objectType?: string(name='ObjectType', description='ObjectType'),
  orientation?: long(name='Orientation', description='Orientation'),
  ownerId?: string(name='OwnerId', description='OwnerId'),
  pageCount?: long(name='PageCount', description='PageCount'),
  performer?: string(name='Performer', description='Performer'),
  produceTime?: string(name='ProduceTime', description='ProduceTime'),
  programCount?: long(name='ProgramCount', description='ProgramCount'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  serverSideDataEncryption?: string(name='ServerSideDataEncryption', description='ServerSideDataEncryption'),
  serverSideEncryption?: string(name='ServerSideEncryption', description='ServerSideEncryption'),
  serverSideEncryptionCustomerAlgorithm?: string(name='ServerSideEncryptionCustomerAlgorithm', description='ServerSideEncryptionCustomerAlgorithm'),
  serverSideEncryptionKeyId?: string(name='ServerSideEncryptionKeyId', description='ServerSideEncryptionKeyId'),
  size?: long(name='Size', description='Size'),
  startTime?: double(name='StartTime', description='StartTime'),
  streamCount?: long(name='StreamCount', description='StreamCount'),
  subtitles?: [
    SubtitleStream
  ](name='Subtitles', description='Subtitles'),
  timezone?: string(name='Timezone', description='Timezone'),
  title?: string(name='Title', description='Title'),
  travelClusterId?: string(name='TravelClusterId', description='TravelClusterId'),
  URI?: string(name='URI', description='URI'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
  videoHeight?: long(name='VideoHeight', description='VideoHeight'),
  videoStreams?: [
    VideoStream
  ](name='VideoStreams', description='VideoStreams'),
  videoWidth?: long(name='VideoWidth', description='VideoWidth'),
}

model FileForReq {
  contentType?: string(name='ContentType', description='ContentType'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  figures?: [ 
    {
      figureClusterId?: string(name='FigureClusterId', description='FigureClusterId'),
      figureId?: string(name='FigureId', description='FigureId'),
      figureType?: string(name='FigureType', description='FigureType'),
    }
  ](name='Figures', description='Figures'),
  fileHash?: string(name='FileHash', description='FileHash'),
  mediaType?: string(name='MediaType', description='MediaType'),
  OSSURI?: string(name='OSSURI', description='OSSURI'),
  URI?: string(name='URI', description='URI'),
}

model HeadPose {
  pitch?: float(name='Pitch', description='Pitch'),
  roll?: float(name='Roll', description='Roll'),
  yaw?: float(name='Yaw', description='Yaw'),
}

model Image {
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions', description='CroppingSuggestions'),
  EXIF?: string(name='EXIF', description='EXIF'),
  imageHeight?: long(name='ImageHeight', description='ImageHeight'),
  imageScore?: ImageScore(name='ImageScore'),
  imageWidth?: long(name='ImageWidth', description='ImageWidth'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents', description='OCRContents'),
}

model ImageScore {
  overallQualityScore?: float(name='OverallQualityScore', description='OverallQualityScore'),
}

model Input {
  OSS?: InputOSS(name='OSS'),
}

model InputFile {
  contentType?: string(name='ContentType', description='ContentType'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  figures?: [ 
    {
      figureClusterId?: string(name='FigureClusterId', description='FigureClusterId'),
      figureId?: string(name='FigureId', description='FigureId'),
      figureType?: string(name='FigureType', description='FigureType'),
    }
  ](name='Figures', description='Figures'),
  fileHash?: string(name='FileHash', description='FileHash'),
  mediaType?: string(name='MediaType', description='MediaType'),
  OSSURI?: string(name='OSSURI', description='OSSURI'),
  URI?: string(name='URI', description='URI'),
}

model InputOSS {
  bucket: string(name='Bucket', description='OSS Bucket 名字'),
  matchExpressions?: [ string ](name='MatchExpressions', description='过滤表达式'),
  prefix?: string(name='Prefix', description='对象 Key 的前缀'),
}

model KdtreeOption {
  compressionLevel?: int32(name='CompressionLevel', description='CompressionLevel', minimum=0, maximum=10),
  libraryName?: string(name='LibraryName', description='LibraryName', example='draco'),
  quantizationBits?: int32(name='QuantizationBits', description='QuantizationBits', minimum=0, maximum=31),
}

model KeyValuePair {
  key?: string(name='Key', description='键'),
  value?: string(name='Value', description='值'),
}

model Label {
  centricScore?: float(name='CentricScore', description='CentricScore'),
  labelConfidence?: float(name='LabelConfidence', description='LabelConfidence'),
  labelLevel?: long(name='LabelLevel', description='LabelLevel'),
  labelName?: string(name='LabelName', description='LabelName'),
  language?: string(name='Language', description='Language'),
  parentLabelName?: string(name='ParentLabelName', description='ParentLabelName'),
}

model LocationDateCluster {
  addresses?: [
    Address
  ](name='Addresses', description='地址'),
  createTime?: string(name='CreateTime', description='创建时间'),
  customId?: string(name='CustomId', description='自定义ID'),
  customLabels?: map[string]any(name='CustomLabels', description='自定义标签'),
  locationDateClusterEndTime?: string(name='LocationDateClusterEndTime', description='结束时间'),
  locationDateClusterLevel?: string(name='LocationDateClusterLevel', description='级别'),
  locationDateClusterStartTime?: string(name='LocationDateClusterStartTime', description='开始时间'),
  objectId?: string(name='ObjectId', description='唯一ID'),
  title?: string(name='Title', description='标题'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model OCRContents {
  boundary?: Boundary(name='Boundary', description='Boundary'),
  confidence?: float(name='Confidence', description='Confidence'),
  contents?: string(name='Contents', description='Contents'),
  language?: string(name='Language', description='Language'),
}

model OctreeOption {
  doVoxelGridDownDownSampling?: boolean(name='DoVoxelGridDownDownSampling', description='DoVoxelGridDownDownSampling', example='false'),
  libraryName?: string(name='LibraryName', description='LibraryName', example='pcl'),
  octreeResolution?: double(name='OctreeResolution', description='OctreeResolution', example='0.01', minimum=0, maximum=1),
  pointResolution?: double(name='PointResolution', description='PointResolution', example='0.01', minimum=0, maximum=1),
}

model PresetReference {
  name: string(name='Name', description='名称'),
  type: string(name='Type', description='类型'),
}

model Project {
  createTime?: string(name='CreateTime', description='创建时间'),
  datasetCount?: long(name='DatasetCount', description='项目当前媒体集数'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='项目最多绑定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='项目最多实体数'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='项目最多文件数'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='项目最多关系数'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='项目最大文件总大小'),
  description?: string(name='Description', description='描述'),
  engineConcurrency?: long(name='EngineConcurrency', description='项目最大并发数'),
  fileCount?: long(name='FileCount', description='项目当前文件数'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', description='项目最多媒体集数量'),
  projectName?: string(name='ProjectName', description='项目名称'),
  projectQueriesPerSecond?: long(name='ProjectQueriesPerSecond', description='项目QPS'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  templateId?: string(name='TemplateId', description='模板Id'),
  totalFileSize?: long(name='TotalFileSize', description='项目当前文件总大小'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model RegionType {
  localName?: string(name='LocalName', description='LocalName'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model Row {
  customLabels?: [
    KeyValuePair
  ](name='CustomLabels', description='CustomLabels'),
  URI?: string(name='URI', description='URI'),
}

model SimilarImage {
  imageScore?: double(name='ImageScore', description='美学分数'),
  URI?: string(name='URI', description='图片URI'),
}

model SimilarImageCluster {
  createTime?: string(name='CreateTime', description='结束时间'),
  customLabels?: map[string]any(name='CustomLabels', description='自定义标签'),
  files?: [
    SimilarImage
  ](name='Files', description='相似图片文件'),
  objectId?: string(name='ObjectId', description='唯一ID'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model SimpleQuery {
  field?: string(name='Field', description='需要查询的字段名'),
  operation?: string(name='Operation', description='运算符', example='eq / gt / gte / lt / lte / match / prefix / and / or / not'),
  subQueries?: [
    SimpleQuery
  ](name='SubQueries', description='由 SimpleQuery 结构体组成的子查询数组'),
  value?: string(name='Value', description='需要查询的字段值'),
}

model Story {
  addresses?: [
    Address
  ](name='Addresses', description='Addresses'),
  cover?: File(name='Cover'),
  createTime?: string(name='CreateTime', description='CreateTime'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  figureClusterIds?: [ string ](name='FigureClusterIds', description='FigureClusterIds'),
  files?: [
    File
  ](name='Files', description='Files'),
  objectId?: string(name='ObjectId', description='ObjectId'),
  objectType?: string(name='ObjectType', description='ObjectType'),
  ownerId?: string(name='OwnerId', description='OwnerId'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  storyEndTime?: string(name='StoryEndTime', description='StoryEndTime'),
  storyName?: string(name='StoryName', description='StoryName'),
  storyStartTime?: string(name='StoryStartTime', description='StoryStartTime'),
  storySubType?: string(name='StorySubType', description='StorySubType'),
  storyType?: string(name='StoryType', description='StoryType'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
}

model SubtitleStream {
  bitrate?: long(name='Bitrate', description='Bitrate'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  content?: string(name='Content', description='Content'),
  duration?: double(name='Duration', description='Duration'),
  height?: long(name='Height', description='Height'),
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  startTime?: double(name='StartTime', description='StartTime'),
  width?: long(name='Width', description='Width'),
}

model TaskInfo {
  code?: string(name='Code', description='错误码'),
  endTime?: string(name='EndTime', description='任务结束时间'),
  message?: string(name='Message', description='错误消息'),
  startTime?: string(name='StartTime', description='任务开始时间'),
  status?: string(name='Status', description='任务状态'),
  tags?: map[string]any(name='Tags', description='标签'),
  taskId?: string(name='TaskId', description='任务唯一ID'),
  taskType?: string(name='TaskType', description='任务类型'),
  userData?: string(name='UserData', description='用户自定义信息'),
}

model TimeRange {
  end?: string(name='End', description='end time'),
  start?: string(name='Start', description='start time'),
}

model TrimPolicy {
  disableDeleteEmptyCell?: boolean(name='DisableDeleteEmptyCell', description='禁止删除所有空单元格'),
  disableDeleteRepeatedStyle?: boolean(name='DisableDeleteRepeatedStyle', description='禁止删除所有重复样式'),
  disableDeleteUnusedPicture?: boolean(name='DisableDeleteUnusedPicture', description='禁止删除未使用的单元格图片'),
  disableDeleteUnusedShape?: boolean(name='DisableDeleteUnusedShape', description='禁止删除没有使用的Shape'),
}

model VideoStream {
  averageFrameRate?: string(name='AverageFrameRate', description='AverageFrameRate'),
  bitDepth?: long(name='BitDepth', description='BitDepth'),
  bitrate?: long(name='Bitrate', description='Bitrate'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  codecTimeBase?: string(name='CodecTimeBase', description='CodecTimeBase'),
  colorPrimaries?: string(name='ColorPrimaries', description='ColorPrimaries'),
  colorRange?: string(name='ColorRange', description='ColorRange'),
  colorSpace?: string(name='ColorSpace', description='ColorSpace'),
  colorTransfer?: string(name='ColorTransfer', description='ColorTransfer'),
  displayAspectRatio?: string(name='DisplayAspectRatio', description='DisplayAspectRatio'),
  duration?: double(name='Duration', description='Duration'),
  frameCount?: long(name='FrameCount', description='FrameCount'),
  frameRate?: string(name='FrameRate', description='FrameRate'),
  hasBFrames?: long(name='HasBFrames', description='HasBFrames'),
  height?: long(name='Height', description='Height'),
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  level?: long(name='Level', description='Level'),
  pixelFormat?: string(name='PixelFormat', description='PixelFormat'),
  profile?: string(name='Profile', description='Profile'),
  rotate?: string(name='Rotate', description='Rotate'),
  sampleAspectRatio?: string(name='SampleAspectRatio', description='SampleAspectRatio'),
  startTime?: double(name='StartTime', description='StartTime'),
  timeBase?: string(name='TimeBase', description='TimeBase'),
  width?: long(name='Width', description='Width'),
}

model WebofficePermission {
  copy?: boolean(name='Copy', description='拷贝'),
  export?: boolean(name='Export', description='导出'),
  history?: boolean(name='History', description='查看历史版本'),
  print?: boolean(name='Print', description='打印'),
  readonly?: boolean(name='Readonly', description='只读模式'),
  rename?: boolean(name='Rename', description='重命名'),
}

model WebofficeUser {
  avatar?: string(name='Avatar', description='头像'),
  id?: string(name='Id', description='Id'),
  name?: string(name='Name', description='名字'),
}

model WebofficeWatermark {
  fillStyle?: string(name='FillStyle', description='字体颜色', example='rgba(192, 192, 192, 0.6)'),
  font?: string(name='Font', description='字体样式', example='bold 20px Serif'),
  horizontal?: long(name='Horizontal', description='水平间距'),
  rotate?: float(name='Rotate', description='旋转角度'),
  type?: long(name='Type', description='水印类型，目前仅支持文字水印，0: 无水印；1: 文字水印'),
  value?: string(name='Value', description='水印文字'),
  vertical?: long(name='Vertical', description='垂直间距'),
}

model AddImageMosaicRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  imageFormat?: string(name='ImageFormat', example='jpg', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  quality?: int32(name='Quality', example='80', position='Query'),
  sourceURI: string(name='SourceURI', example='oss://bucketname/objectname', position='Query'),
  targetURI: string(name='TargetURI', example='oss://bucketname/objectname', position='Query'),
  targets: [ 
    {
      blurRadius?: int32(name='BlurRadius', example='3'),
      boundary: {
        height: float(name='Height', example='200'),
        referPos?: string(name='ReferPos', example='topleft'),
        width: float(name='Width', example='200'),
        x: float(name='X', example='0'),
        y: float(name='Y', example='0'),
      }(name='Boundary'),
      color?: string(name='Color', example='#FFFFFF'),
      mosaicRadius?: int32(name='MosaicRadius', example='5'),
      sigma?: int32(name='Sigma', example='5'),
      type: string(name='Type', example='square'),
    }
  ](name='Targets', shrink='json', position='Query'),
}

model AddImageMosaicResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CA995EFD-083D-4F40-BE8A-BDF75FF*****'),
}

model AddImageMosaicResponse = {
  headers: map[string]string(name='headers'),
  body: AddImageMosaicResponseBody(name='body'),
}

async function addImageMosaic(request: AddImageMosaicRequest): AddImageMosaicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddImageMosaic', 'POST', '/', 'json', false, 'json', request);
}

model AddStoryFilesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Body'),
  files: [ 
    {
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Files', shrink='json', position='Body'),
  objectId: string(name='ObjectId', example='testid', position='Body'),
  projectName: string(name='ProjectName', description='A short description of struct', example='test-project', position='Body'),
}

model AddStoryFilesResponseBody = {
  files?: [ 
    {
      errorCode?: string(name='ErrorCode', example='ResourceNotFound'),
      errorMessage?: string(name='ErrorMessage', example='The specified resource %s is not found.'),
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Files'),
  requestId?: string(name='RequestId', description='Id of the request', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model AddStoryFilesResponse = {
  headers: map[string]string(name='headers'),
  body: AddStoryFilesResponseBody(name='body'),
}

async function addStoryFiles(request: AddStoryFilesRequest): AddStoryFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddStoryFiles', 'POST', '/', 'json', true, 'form', request);
}

model AttachOSSBucketRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  OSSBucket: string(name='OSSBucket', example='examplebucket', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
}

model AttachOSSBucketResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model AttachOSSBucketResponse = {
  headers: map[string]string(name='headers'),
  body: AttachOSSBucketResponseBody(name='body'),
}

async function attachOSSBucket(request: AttachOSSBucketRequest): AttachOSSBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachOSSBucket', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  URIs: [ string ](name='URIs', shrink='json', position='Query'),
}

model BatchDeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='3A82F6C9-5AC0-38F9-914F-F02623B3****'),
}

model BatchDeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteFileMetaResponseBody(name='body'),
}

async function batchDeleteFileMeta(request: BatchDeleteFileMetaRequest): BatchDeleteFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  URIs: [ string ](name='URIs', shrink='json', position='Query'),
}

model BatchGetFileMetaResponseBody = {
  files?: [
    File
  ](name='Files'),
  requestId?: string(name='RequestId', description='Id of the request', example='7F84C6D9-5AC0-49F9-914D-F02678E3****'),
}

model BatchGetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetFileMetaResponseBody(name='body'),
}

async function batchGetFileMeta(request: BatchGetFileMetaRequest): BatchGetFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model BatchIndexFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  files: [
    FileForReq
  ](name='Files', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
}

model BatchIndexFileMetaResponseBody = {
  eventId?: string(name='EventId', example='387-1DAPFFZplUZhuCuhnB6I9H****'),
  requestId?: string(name='RequestId', description='Id of the request', example='8F93E6D9-5AC0-49F9-914D-E02678A3****'),
}

model BatchIndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchIndexFileMetaResponseBody(name='body'),
}

async function batchIndexFileMeta(request: BatchIndexFileMetaRequest): BatchIndexFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchIndexFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model BatchUpdateFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  files: [
    FileForReq
  ](name='Files', shrink='json', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
}

model BatchUpdateFileMetaResponseBody = {
  files?: [ 
    {
      message?: string(name='Message', example='*error.OpError : InvalidArgument | Index KV count exceeded, should be no more than 100.'),
      success?: boolean(name='Success', example='true'),
      URI?: string(name='URI', example='oss://imm-test-co-cn-beijing/zqh/input/Image/indexImage/nn1.jpg'),
    }
  ](name='Files'),
  requestId?: string(name='RequestId', description='Id of the request', example='F5BF215E-3237-0852-B9C6-F233D44A****'),
}

model BatchUpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateFileMetaResponseBody(name='body'),
}

async function batchUpdateFileMeta(request: BatchUpdateFileMetaRequest): BatchUpdateFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model CompareImageFacesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  source?: {
    URI1?: string(name='URI1', example='oss://test-bucket/test-object1'),
    URI2?: string(name='URI2', example='oss://test-bucket/test-object2'),
  }(name='Source', shrink='json', position='Query'),
}

model CompareImageFacesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F73AC982-2B9E-4ECD-AED5-F8331C5******'),
  similarity?: float(name='Similarity', example='0.8848152756690983'),
}

model CompareImageFacesResponse = {
  headers: map[string]string(name='headers'),
  body: CompareImageFacesResponseBody(name='body'),
}

async function compareImageFaces(request: CompareImageFacesRequest): CompareImageFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompareImageFaces', 'POST', '/', 'json', false, 'json', request);
}

model CreateArchiveFileInspectionTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  password?: string(name='Password', example='123456', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  sourceURI?: string(name='SourceURI', example='oss://imm-apitest-fxf2/name.zip', position='Query'),
  targetURI: string(name='TargetURI', example='oss://bucket/bucket.json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateArchiveFileInspectionTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', description='请求 ID', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='ArchiveFileInspection-8475218e-d86e-4c66-b3cf-50e74d6c****'),
}

model CreateArchiveFileInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateArchiveFileInspectionTaskResponseBody(name='body'),
}

async function createArchiveFileInspectionTask(request: CreateArchiveFileInspectionTaskRequest): CreateArchiveFileInspectionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateArchiveFileInspectionTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateBatchRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  actions: [ 
    {
      name: string(name='Name', example='doc/convert'),
      parameters?: [ string ](name='Parameters'),
    }
  ](name='Actions', shrink='json', position='Body'),
  input: Input(name='Input', shrink='json', position='Body'),
  notification?: {
    endpoint?: string(name='Endpoint', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
    topic?: string(name='Topic', example='test-topic'),
  }(name='Notification', shrink='json', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
  serviceRole: string(name='ServiceRole', example='AliyunIMMDefaultRole', position='Body'),
  tags?: map[string]any(name='Tags', example='{"key": "val"}', shrink='json', position='Body'),
}

model CreateBatchResponseBody = {
  id?: string(name='Id', example='batch-4eb9223f-3e88-42d3-a578-3f2852******'),
  requestId?: string(name='RequestId', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
}

model CreateBatchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBatchResponseBody(name='body'),
}

async function createBatch(request: CreateBatchRequest): CreateBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBatch', 'POST', '/', 'json', true, 'form', request);
}

model CreateBindingRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', description='DatasetName', example='test-dataset', position='Query'),
  projectName: string(name='ProjectName', description='ProjectName', example='test-project', position='Query'),
  URI: string(name='URI', description='URI', example='oss://examplebucket', position='Query'),
}

model CreateBindingResponseBody = {
  binding?: Binding(name='Binding'),
  requestId?: string(name='RequestId', description='Id of the request', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model CreateBindingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBindingResponseBody(name='body'),
}

async function createBinding(request: CreateBindingRequest): CreateBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBinding', 'POST', '/', 'json', false, 'json', request);
}

model CreateCompressPointCloudTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  compressMethod: string(name='CompressMethod', example='octree', position='Query'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  kdtreeOption?: KdtreeOption(name='KdtreeOption', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='imm-regression-test-1', position='Query'),
  octreeOption?: OctreeOption(name='OctreeOption', shrink='json', position='Query'),
  pointCloudFields: [ string ](name='PointCloudFields', shrink='json', position='Query'),
  pointCloudFileFormat?: string(name='PointCloudFileFormat', example='pcd', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sourceURI: string(name='SourceURI', description='A short description of struct', example='oss://test/src/test.pcd', position='Query'),
  tags?: map[string]any(name='Tags', example='{"LabelKey": "Value"}', shrink='json', position='Query'),
  targetURI: string(name='TargetURI', example='oss://test/tgt', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateCompressPointCloudTaskResponseBody = {
  eventId?: string(name='EventId', example='0B7-1LR4Wcue1aBhk2xT85MfL*****'),
  requestId?: string(name='RequestId', description='Id of the request', example='CA995EFD-083D-4F40-BE8A-BDF75FFF****'),
  taskId?: string(name='TaskId', example='PointCloudCompress-badda57d-a3ab-4e6d-938f-49b77ce****'),
}

model CreateCompressPointCloudTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCompressPointCloudTaskResponseBody(name='body'),
}

async function createCompressPointCloudTask(request: CreateCompressPointCloudTaskRequest): CreateCompressPointCloudTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCompressPointCloudTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomizedStoryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  cover: {
    URI: string(name='URI', example='oss://bucket1/cover'),
  }(name='Cover', shrink='json', position='Body'),
  customLabels?: map[string]any(name='CustomLabels', example='{"Bucket": "examplebucket"}', shrink='json', position='Body'),
  datasetName: string(name='DatasetName', example='dataset001', position='Body'),
  files: [ 
    {
      URI: string(name='URI', example='[{"URI":"oss://bucket1/file1"}]'),
    }
  ](name='Files', shrink='json', position='Body'),
  projectName: string(name='ProjectName', example='immtest', position='Body'),
  storyName: string(name='StoryName', example='name1', position='Body'),
  storySubType: string(name='StorySubType', example='Solo', position='Body'),
  storyType: string(name='StoryType', example='PeopleMemory', position='Body'),
}

model CreateCustomizedStoryResponseBody = {
  objectId?: string(name='ObjectId', example='563062c0b085733f34ab****'),
  requestId?: string(name='RequestId', example='BC91D091-D49F-0ACD-95D5-F0621045****'),
}

model CreateCustomizedStoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomizedStoryResponseBody(name='body'),
}

async function createCustomizedStory(request: CreateCustomizedStoryRequest): CreateCustomizedStoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomizedStory', 'POST', '/', 'json', true, 'form', request);
}

model CreateDatasetRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最多帮定数', example='10', position='Query'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数', example='10000000000', position='Query'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数', example='100000000', position='Query'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数', example='100000000000', position='Query'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小', example='90000000000000000', position='Query'),
  datasetName: string(name='DatasetName', description='数据集名称', example='dataset001', position='Query'),
  description?: string(name='Description', description='对数据集的描述', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id', example='Official:AllFunction', position='Query'),
}

model CreateDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', description='请求 ID', example='6D74B3A9-5AC0-49F9-914D-E01589D3****'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataset', 'POST', '/', 'json', false, 'json', request);
}

model CreateFacesSearchingTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  maxResult?: string(name='MaxResult', example='100', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sources?: [ 
    {
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Sources', shrink='json', position='Query'),
  topK?: long(name='TopK', example='1', position='Query'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}', position='Query'),
}

model CreateFacesSearchingTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16****'),
  requestId?: string(name='RequestId', description='Id of the request', example='B1E79399-05F7-06D8-95FE-EBE17BA*****'),
  taskId?: string(name='TaskId', example='CreateFacesSearchingTask-00bec802-073a-4b61-ba*****'),
}

model CreateFacesSearchingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFacesSearchingTaskResponseBody(name='body'),
}

async function createFacesSearchingTask(request: CreateFacesSearchingTaskRequest): CreateFacesSearchingTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFacesSearchingTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateFigureClusteringTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateFigureClusteringTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16****'),
  requestId?: string(name='RequestId', description='Id of the request', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='formatconvert-00bec802-073a-4b61-ba3b-39bc****'),
}

model CreateFigureClusteringTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFigureClusteringTaskResponseBody(name='body'),
}

async function createFigureClusteringTask(request: CreateFigureClusteringTaskRequest): CreateFigureClusteringTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFigureClusteringTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateFigureClustersMergingTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  from: string(name='From', description='源cluster', example='Cluster-2ab85905-23ba-4632-b2d8-1c21cfe****', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}', shrink='json', position='Query'),
  to: string(name='To', description='目的cluster', example='Cluster-4a3a71c1-c092-4788-8826-2f65d17****', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateFigureClustersMergingTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16E****'),
  requestId?: string(name='RequestId', description='Id of the request', example='CA995EFD-083D-4F40-BE8A-BDF75FF****'),
  taskId?: string(name='TaskId', example='92376fbb-171f-4259-913f-705f7ee0****'),
}

model CreateFigureClustersMergingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFigureClustersMergingTaskResponseBody(name='body'),
}

async function createFigureClustersMergingTask(request: CreateFigureClustersMergingTaskRequest): CreateFigureClustersMergingTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFigureClustersMergingTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileCompressionTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  compressedFormat?: string(name='CompressedFormat', example='zip', position='Query'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  password?: string(name='Password', example='123456', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  sourceManifestURI?: string(name='SourceManifestURI', example='oss://test-bucket/test-object.json', position='Query'),
  sources?: [ 
    {
      alias?: string(name='Alias', example='/new-dir/'),
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Sources', shrink='json', position='Query'),
  targetURI: string(name='TargetURI', example='oss://test-bucket/test-target-object.zip', position='Query'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}', position='Query'),
}

model CreateFileCompressionTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', description='请求 ID', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='FileCompression-3579a380-6f7a-4a9d-b9d2-65996*****'),
}

model CreateFileCompressionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileCompressionTaskResponseBody(name='body'),
}

async function createFileCompressionTask(request: CreateFileCompressionTaskRequest): CreateFileCompressionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileCompressionTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileUncompressionTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  password?: string(name='Password', example='123456', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  selectedFiles?: [ string ](name='SelectedFiles', shrink='json', position='Query'),
  sourceURI?: string(name='SourceURI', example='oss://imm-apitest-fxf2/name.zip', position='Query'),
  target: {
    manifestURI?: string(name='ManifestURI', example='oss://imm-apitest-fxf1/test/TaskResultURI.json'),
    URI: string(name='URI', example='oss://imm-apitest-fxf1/test'),
  }(name='Target', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateFileUncompressionTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', description='请求 ID', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='FileUncompression-16ab5dd6-af02-480e-9ed7-a8d51b1*****'),
}

model CreateFileUncompressionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileUncompressionTaskResponseBody(name='body'),
}

async function createFileUncompressionTask(request: CreateFileUncompressionTaskRequest): CreateFileUncompressionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileUncompressionTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageModerationTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  interval?: long(name='Interval', example='2', position='Query'),
  maxFrames?: long(name='MaxFrames', example='10', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  reviewer?: string(name='Reviewer', example='auto', position='Query'),
  scenes?: [ string ](name='Scenes', shrink='json', position='Query'),
  sourceURI: string(name='SourceURI', example='oss://test-bucket/test-object', position='Query'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateImageModerationTaskResponseBody = {
  eventId?: string(name='EventId', example='2E6-1I0FGn0zFnl5AflRfhzClma*****'),
  requestId?: string(name='RequestId', description='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='ImageModeration-179ef4f8-d583-4f0c-a293-7c0889c*****'),
}

model CreateImageModerationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageModerationTaskResponseBody(name='body'),
}

async function createImageModerationTask(request: CreateImageModerationTaskRequest): CreateImageModerationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageModerationTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageSplicingTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  align?: long(name='Align', example='192', position='Query'),
  backgroundColor?: string(name='BackgroundColor', example='red', position='Query'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  direction?: string(name='Direction', example='vertical', position='Query'),
  imageFormat?: string(name='ImageFormat', example='jpg', position='Query'),
  margin?: long(name='Margin', example='2', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic', position='Query'),
  padding?: long(name='Padding', example='2', position='Query'),
  projectName: string(name='ProjectName', description='A short description of struct', example='test-project', position='Query'),
  quality?: long(name='Quality', example='80', position='Query'),
  scaleType?: string(name='ScaleType', example='stretch', position='Query'),
  sources: [ 
    {
      rotate?: long(name='Rotate', example='90'),
      URI: string(name='URI', example='oss://test-bucket/test-object.jpg'),
    }
  ](name='Sources', shrink='json', position='Query'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}', shrink='json', position='Query'),
  targetURI: string(name='TargetURI', example='oss://test-bucket/test-target-object.jpg', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateImageSplicingTaskResponseBody = {
  eventId?: string(name='EventId', example='10C-1R6p7Km0H5Ieg38LKXTIvw*****'),
  requestId?: string(name='RequestId', example='94D6F994-E298-037E-8E8B-0090F27*****'),
  taskId?: string(name='TaskId', example='ImageSplicing-537cc157-7645-444a-a631-c8db4d02*****'),
}

model CreateImageSplicingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageSplicingTaskResponseBody(name='body'),
}

async function createImageSplicingTask(request: CreateImageSplicingTaskRequest): CreateImageSplicingTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageSplicingTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageToPDFTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic', position='Query'),
  projectName: string(name='ProjectName', description='A short description of struct', example='test-project', position='Query'),
  sources: [ 
    {
      rotate?: long(name='Rotate', example='90'),
      URI: string(name='URI', example='oss://test-bucket/test-object.jpg'),
    }
  ](name='Sources', shrink='json', position='Query'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}', shrink='json', position='Query'),
  targetURI: string(name='TargetURI', example='oss://test-bucket/test-target-object.pdf', position='Query'),
  userData?: string(name='UserData', example='test', position='Query'),
}

model CreateImageToPDFTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', description='Id of the request', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='ImageToPDF-cbe6ae3e-f8dc-4566-9da7-535d5d*****'),
}

model CreateImageToPDFTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageToPDFTaskResponseBody(name='body'),
}

async function createImageToPDFTask(request: CreateImageToPDFTaskRequest): CreateImageToPDFTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageToPDFTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateLocationDateClusteringTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  dateOptions: {
    gapDays: long(name='GapDays', example='1'),
    maxDays: long(name='MaxDays', example='9999'),
    minDays: long(name='MinDays', example='1'),
  }(name='DateOptions', shrink='json', position='Query'),
  locationOptions: {
    locationDateClusterLevels: [ string ](name='LocationDateClusterLevels'),
  }(name='LocationOptions', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='NotifyTopicName1', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  tags?: map[string]any(name='Tags', example='\\"{"key":"value"}\\"', shrink='json', position='Query'),
  userData?: string(name='UserData', example='test', position='Query'),
}

model CreateLocationDateClusteringTaskResponseBody = {
  eventId?: string(name='EventId', example='9bab56e8****'),
  requestId?: string(name='RequestId', description='Id of the request', example='B121940C-9794-4EE3-8D6E-F8EC525F****'),
  taskId?: string(name='TaskId', example='SpaceTimeClustering-9bab56e8-e596-421a-b1f5-9ad1ab87****'),
}

model CreateLocationDateClusteringTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLocationDateClusteringTaskResponseBody(name='body'),
}

async function createLocationDateClusteringTask(request: CreateLocationDateClusteringTaskRequest): CreateLocationDateClusteringTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLocationDateClusteringTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateMediaConvertTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  sources: [ 
    {
      duration?: double(name='Duration', example='0'),
      startTime?: double(name='StartTime', example='0'),
      subtitles?: [ 
        {
          language?: string(name='Language', example='eng'),
          timeOffset?: double(name='TimeOffset', example='10.5'),
          URI?: string(name='URI', example='oss://test-bucket/subtitles'),
        }
      ](name='Subtitles'),
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Sources', shrink='json', position='Query'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}', shrink='json', position='Query'),
  targets: [ 
    {
      audio?: {
        disableAudio?: boolean(name='DisableAudio', example='false'),
        filterAudio?: {
          mixing?: boolean(name='Mixing', example='false'),
        }(name='FilterAudio'),
        transcodeAudio?: {
          bitrate?: int32(name='Bitrate', example='128000'),
          bitrateOption?: string(name='BitrateOption', example='fixed'),
          channel?: int32(name='Channel', example='2'),
          codec?: string(name='Codec', example='aac'),
          quality?: int32(name='Quality', example='1'),
          sampleRate?: int32(name='SampleRate', example='44100'),
          sampleRateOption?: string(name='SampleRateOption', example='fixed'),
        }(name='TranscodeAudio'),
      }(name='Audio'),
      container?: string(name='Container', example='mp4'),
      image?: {
        snapshots?: [ 
          {
            format?: string(name='Format', example='png'),
            height?: int32(name='Height', example='640'),
            interval?: double(name='Interval', example='0.5'),
            number?: int32(name='Number', example='5'),
            scaleType?: string(name='ScaleType', example='stretch'),
            startTime?: double(name='StartTime', example='0'),
            URI?: string(name='URI', example='oss://test-bucket/snapshots'),
            width?: int32(name='Width', example='640'),
          }
        ](name='Snapshots'),
        sprites?: [ 
          {
            format?: string(name='Format', example='png'),
            interval?: double(name='Interval', example='0.5'),
            margin?: int32(name='Margin', example='2'),
            number?: int32(name='Number', example='0'),
            pad?: int32(name='Pad', example='2'),
            scaleHeight?: float(name='ScaleHeight', example='1.0'),
            scaleType?: string(name='ScaleType', example='stretch'),
            scaleWidth?: float(name='ScaleWidth', example='1.0'),
            startTime?: double(name='StartTime', example='0'),
            tileHeight?: int32(name='TileHeight', example='6'),
            tileWidth?: int32(name='TileWidth', example='6'),
            URI?: string(name='URI', example='oss://test-bucket/sprites'),
          }
        ](name='Sprites'),
      }(name='Image'),
      preset?: PresetReference(name='Preset'),
      segment?: {
        duration?: double(name='Duration', example='30'),
        format?: string(name='Format', example='hls'),
        startNumber?: int32(name='StartNumber', example='5'),
      }(name='Segment'),
      speed?: float(name='Speed', example='1.0'),
      subtitle?: {
        disableSubtitle?: boolean(name='DisableSubtitle', example='false'),
        extractSubtitle?: {
          format?: string(name='Format', example='srt'),
          URI?: string(name='URI', example='oss://test-bucket/extractsubtitle'),
        }(name='ExtractSubtitle'),
      }(name='Subtitle'),
      URI?: string(name='URI', example='oss://test-bucket/targets'),
      video?: {
        disableVideo?: boolean(name='DisableVideo', example='false'),
        filterVideo?: {
          delogos?: [ 
            {
              duration?: double(name='Duration', example='15.23234'),
              dx?: float(name='Dx', example='0'),
              dy?: float(name='Dy', example='0'),
              height?: float(name='Height', example='2'),
              referPos?: string(name='ReferPos', example='topleft'),
              startTime?: double(name='StartTime', example='0'),
              width?: float(name='Width', example='2'),
            }
          ](name='Delogos'),
          watermarks?: [ 
            {
              borderColor?: string(name='BorderColor', example='#000000'),
              borderWidth?: int32(name='BorderWidth', example='0'),
              content?: string(name='Content', example='example'),
              duration?: double(name='Duration', example='0'),
              dx?: float(name='Dx', example='0'),
              dy?: float(name='Dy', example='0'),
              fontApha?: float(name='FontApha', example='1.0'),
              fontColor?: string(name='FontColor', example='#000000'),
              fontName?: string(name='FontName', example='SourceHanSans-Regular'),
              fontSize?: int32(name='FontSize', example='16'),
              height?: float(name='Height', example='2'),
              referPos?: string(name='ReferPos', example='topleft'),
              startTime?: double(name='StartTime', example='0'),
              type?: string(name='Type', example='text'),
              URI?: string(name='URI', example='oss://test-bucket/watermarks'),
              width?: float(name='Width', example='2'),
            }
          ](name='Watermarks'),
        }(name='FilterVideo'),
        transcodeVideo?: {
          adaptiveResolutionDirection?: boolean(name='AdaptiveResolutionDirection', example='true'),
          bFrames?: int32(name='BFrames', example='3'),
          bitrate?: int32(name='Bitrate', example='128000'),
          bitrateOption?: string(name='BitrateOption', example='fixed'),
          bufferSize?: int32(name='BufferSize', example='4000000'),
          CRF?: float(name='CRF', example='20'),
          codec?: string(name='Codec', example='h264'),
          frameRate?: float(name='FrameRate', example='25'),
          frameRateOption?: string(name='FrameRateOption', example='fixed'),
          GOPSize?: int32(name='GOPSize', example='60'),
          maxBitrate?: int32(name='MaxBitrate', example='1000000'),
          pixelFormat?: string(name='PixelFormat', example='yuv420p'),
          refs?: int32(name='Refs', example='2'),
          resolution?: string(name='Resolution', example='640x480'),
          resolutionOption?: string(name='ResolutionOption', example='fixed'),
          rotation?: int32(name='Rotation', example='0'),
          scaleType?: string(name='ScaleType', example='stretch'),
        }(name='TranscodeVideo'),
      }(name='Video'),
    }
  ](name='Targets', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateMediaConvertTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es****'),
  requestId?: string(name='RequestId', description='请求 ID', example='CA995EFD-083D-4F40-BE8A-BDF75FFFE0B6'),
  taskId?: string(name='TaskId', example='MediaConvert-adb1ee28-c4c9-42a7-9f54-3b8eadcb****'),
}

model CreateMediaConvertTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMediaConvertTaskResponseBody(name='body'),
}

async function createMediaConvertTask(request: CreateMediaConvertTaskRequest): CreateMediaConvertTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMediaConvertTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateOfficeConversionTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  endPage?: long(name='EndPage', description='转换终止页，包含终止页，默认转换到最后一页，表格转图片时需要指定 SheetIndex 才有效', example='-1', position='Query'),
  firstPage?: boolean(name='FirstPage', description='表格转图片参数，是否只返回表格的第一张图片，默认为否', example='false', position='Query'),
  fitToHeight?: boolean(name='FitToHeight', description='表格转图片参数，是否将所有行输出到一张图片，默认为否', example='false', position='Query'),
  fitToWidth?: boolean(name='FitToWidth', description='表格转图片参数，是否将所有列输出到一张图片，默认为否', example='false', position='Query'),
  holdLineFeed?: boolean(name='HoldLineFeed', description='转文本时是否保留文档中的换行符，默认不保留', example='false', position='Query'),
  imageDPI?: long(name='ImageDPI', description='输出图片 DPI，允许范围 96-600，默认 96', example='96', position='Query'),
  longPicture?: boolean(name='LongPicture', description='转图片时是否转换成一张长图，最多支持将 20 页合成一张长图，超过可能报错，默认为不转成长图', example='false', position='Query'),
  longText?: boolean(name='LongText', description='转文本时是否转换成长文本，默认每页是个独立的文本', example='false', position='Query'),
  maxSheetColumn?: long(name='MaxSheetColumn', description='表格转图片的最大列数，在 LongPicture 为 true 时生效，默认转所有列', example='10', position='Query'),
  maxSheetRow?: long(name='MaxSheetRow', description='表格转图片的最大行数，在 LongPicture 为 true 时生效，默认转所有行', example='10', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', description='mns 消息通知 topic', example='topic1', position='Query'),
  pages?: string(name='Pages', description='指定转换页码，优先级高于 StartPage/EndPage，格式：多个页码用 “," 拼接，连续页码用 "-" 连接，样例参考: 1,2-4,7', example='1,2-4,7', position='Query'),
  paperHorizontal?: boolean(name='PaperHorizontal', description='表格转图片纸张是否水平放置，默认为否', example='false', position='Query'),
  paperSize?: string(name='PaperSize', description='表格转图片纸张大小，支持 A4/A2/A0，默认A4，配合 FitToHeight 或 FitToWidth 一起使用才有效', example='A4', position='Query'),
  password?: string(name='Password', description='文档密码', example='********', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  quality?: long(name='Quality', description='质量参数，范围是0-100，越大质量越好，默认系统自动选择适合的分辨率', example='60', position='Query'),
  scalePercentage?: long(name='ScalePercentage', description='缩放参数，允许范围 20~200，100代表不缩放，小于100表示缩小，大于100表示放大，默认不缩放', example='100', position='Query'),
  sheetCount?: long(name='SheetCount', description='表格转图片参数，指定转换表格中的 sheet 数量，默认转换所有 sheet', example='1', position='Query'),
  sheetIndex?: long(name='SheetIndex', description='表格转图片参数，指定转换哪一个 sheet，从 1 开始，默认从起始页开始转', example='1', position='Query'),
  showComments?: boolean(name='ShowComments', description='文字转图片，是否显示批注，目前只支持文字转图片时携带批注，默认不显示批注', example='false', position='Query'),
  sourceType?: string(name='SourceType', description='输入文件格式，默认使用文件名后缀小写格式', example='doc', position='Query'),
  sourceURI: string(name='SourceURI', description='文档转换输入文件地址', example='oss://test-bucket/test-object', position='Query'),
  startPage?: long(name='StartPage', description='转换起始页，从 1 开始，包含起始页，默认从第一页开始转换，表格转图片时需要指定 SheetIndex 才有效', example='1', position='Query'),
  tags?: map[string]any(name='Tags', description='用户自定义标签', example='{"test":"val1"}', shrink='json', position='Query'),
  targetType: string(name='TargetType', description='输出文件格式', example='png', position='Query'),
  targetURI?: string(name='TargetURI', description='文档转换输出地址模式', example='oss://{bucket}/{tags.custom}/{dirname}/{barename}.{autoext}', position='Query'),
  targetURIPrefix?: string(name='TargetURIPrefix', description='文档转换输出文件地址前缀', example='oss://bucket1/', position='Query'),
  trimPolicy?: TrimPolicy(name='TrimPolicy', description='表格瘦身', shrink='json', position='Query'),
  userData?: string(name='UserData', description='用户自定义数据，在消息通知中返回', example='{"file_id": "abc"}', position='Query'),
}

model CreateOfficeConversionTaskResponseBody = {
  eventId?: string(name='EventId', example='2C2-1I0EG57VR37J4rQ8oKG6C9*****'),
  requestId?: string(name='RequestId', description='请求 id', example='FF3B7D81-66AE-47E0-BF69-157DCF18*****'),
  taskId?: string(name='TaskId', description='任务 id', example='formatconvert-00bec802-073a-4b61-ba3b-39bc2fdd*****'),
}

model CreateOfficeConversionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOfficeConversionTaskResponseBody(name='body'),
}

async function createOfficeConversionTask(request: CreateOfficeConversionTaskRequest): CreateOfficeConversionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOfficeConversionTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateProjectRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', example='10', position='Query'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', example='10000000000', position='Query'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', example='100000000', position='Query'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', example='100000000000', position='Query'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', example='90000000000000000', position='Query'),
  description?: string(name='Description', position='Query'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', example='1000000000', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  serviceRole?: string(name='ServiceRole', example='AliyunIMMDefaultRole', position='Query'),
  templateId?: string(name='TemplateId', example='Official:AllFunction', position='Query'),
}

model CreateProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID', example='7F7D235C-76FF-4B65-800C-8238AE3F****'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProject', 'POST', '/', 'json', false, 'json', request);
}

model CreateStoryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  address?: AddressForStory(name='Address', shrink='json', position='Body'),
  customId?: string(name='CustomId', example='test', position='Body'),
  customLabels?: map[string]any(name='CustomLabels', example='{"Bucket": "examplebucket"}', shrink='json', position='Body'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Body'),
  maxFileCount?: long(name='MaxFileCount', example='3', position='Body'),
  minFileCount?: long(name='MinFileCount', example='1', position='Body'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic', position='Body'),
  objectId?: string(name='ObjectId', example='id1', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
  storyEndTime?: string(name='StoryEndTime', example='2021-12-30T16:00:00Z', position='Body'),
  storyName?: string(name='StoryName', example='name1', position='Body'),
  storyStartTime?: string(name='StoryStartTime', example='2016-12-30T16:00:00Z', position='Body'),
  storySubType?: string(name='StorySubType', example='Solo', position='Body'),
  storyType: string(name='StoryType', example='PeopleMemory', position='Body'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}', position='Query'),
}

model CreateStoryResponseBody = {
  eventId?: string(name='EventId', example='392-1CqzvESGTEeNZ2OWFbRKIM****'),
  requestId?: string(name='RequestId', description='Id of the request', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='CreateStory-4ef6ff43-edf3-4612-9cc4-0c7f9e19****'),
}

model CreateStoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStoryResponseBody(name='body'),
}

async function createStory(request: CreateStoryRequest): CreateStoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStory', 'POST', '/', 'json', true, 'form', request);
}

model CreateTriggerRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  actions: [ 
    {
      name: string(name='Name', example='doc/convert'),
      parameters?: [ string ](name='Parameters'),
    }
  ](name='Actions', shrink='json', position='Body'),
  input: Input(name='Input', shrink='json', position='Body'),
  notification?: {
    endpoint?: string(name='Endpoint', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
    topic?: string(name='Topic', example='topic1'),
  }(name='Notification', shrink='json', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
  serviceRole: string(name='ServiceRole', example='AliyunIMMDefaultRole', position='Body'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}', shrink='json', position='Body'),
}

model CreateTriggerResponseBody = {
  id?: string(name='Id', example='50146'),
  requestId?: string(name='RequestId', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrigger', 'POST', '/', 'json', true, 'form', request);
}

model CreateVideoLabelClassificationTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', description='NotifyTopicName', example='topic1', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  sourceURI: string(name='SourceURI', description='SourceURI', example='oss://bucket1/object', position='Query'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}', shrink='json', position='Query'),
  userData?: string(name='UserData', description='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateVideoLabelClassificationTaskResponseBody = {
  eventId?: string(name='EventId', description='事件Id', example='03F-1Qt1Yn5RZZ0Zh3ZdYlDblv7****'),
  requestId?: string(name='RequestId', description='请求唯一Id', example='CA995EFD-083D-4F40-BE8A-BDF75FFFE0B6'),
  taskId?: string(name='TaskId', description='任务唯一ID', example='VideoLabelClassification-2f157087-91df-4fda-8c3e-232407ec*****'),
}

model CreateVideoLabelClassificationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVideoLabelClassificationTaskResponseBody(name='body'),
}

async function createVideoLabelClassificationTask(request: CreateVideoLabelClassificationTaskRequest): CreateVideoLabelClassificationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVideoLabelClassificationTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateVideoModerationTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  interval?: long(name='Interval', example='1', position='Query'),
  maxFrames?: long(name='MaxFrames', example='200', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  reviewer?: string(name='Reviewer', example='auto', position='Query'),
  scenes?: [ string ](name='Scenes', shrink='json', position='Query'),
  sourceURI: string(name='SourceURI', example='oss://test-bucket/test-object', position='Query'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}', shrink='json', position='Query'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}', position='Query'),
}

model CreateVideoModerationTaskResponseBody = {
  eventId?: string(name='EventId', example='2E6-1I0FGn0zFnl5AflRfhzClma*****'),
  requestId?: string(name='RequestId', description='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='VideoModeration-9442a216-4691-4a48-846d-76daccaf*****'),
}

model CreateVideoModerationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVideoModerationTaskResponseBody(name='body'),
}

async function createVideoModerationTask(request: CreateVideoModerationTaskRequest): CreateVideoModerationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVideoModerationTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBatchRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', description='A short description of struct', example='batch-4eb9223f-3e88-42d3-a578-3f2852******', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
}

model DeleteBatchResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='91AC8C98-0F36-49D2-8290-742E24******'),
}

model DeleteBatchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBatchResponseBody(name='body'),
}

async function deleteBatch(request: DeleteBatchRequest): DeleteBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBatch', 'POST', '/', 'json', true, 'form', request);
}

model DeleteBindingRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  cleanup?: boolean(name='Cleanup', example='false', position='Query'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', description='A short description of struct', example='immtest', position='Query'),
  URI: string(name='URI', example='oss://examplebucket', position='Query'),
}

model DeleteBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='ACDFE467-C817-4B36-951A-6EB5A592****'),
}

model DeleteBindingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBindingResponseBody(name='body'),
}

async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBinding', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatasetRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EC564B8B-BA5C-4499-B196-D9B9E76E****'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataset', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  URI: string(name='URI', example='oss://examplebucket/exampleobject.txt', position='Query'),
}

model DeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7F82D6C9-5AC0-49F9-914D-F02678F3****'),
}

model DeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileMetaResponseBody(name='body'),
}

async function deleteFileMeta(request: DeleteFileMetaRequest): DeleteFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLocationDateClusterRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  objectId: string(name='ObjectId', example='id1', position='Body'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
}

model DeleteLocationDateClusterResponseBody = {
  requestId?: string(name='RequestId', example='B121940C-9794-4EE3-8D6E-F8EC525F****'),
}

model DeleteLocationDateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLocationDateClusterResponseBody(name='body'),
}

async function deleteLocationDateCluster(request: DeleteLocationDateClusterRequest): DeleteLocationDateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLocationDateCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProjectRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', description='本次请求的唯一 ID', example='FEDC9B1F-30F2-4C1F-8ED2-B7860187****'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProject', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStoryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  objectId: string(name='ObjectId', example='id1', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
}

model DeleteStoryResponseBody = {
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
}

model DeleteStoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStoryResponseBody(name='body'),
}

async function deleteStory(request: DeleteStoryRequest): DeleteStoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTriggerRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', description='A short description of struct', example='trigger-9f72636a-0f0c-4baf-ae78-38b27b******', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
}

model DeleteTriggerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FEDC9B1F-30F2-4C1F-8ED2-B7860187****'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTriggerResponseBody(name='body'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrigger', 'POST', '/', 'json', true, 'form', request);
}

model DetachOSSBucketRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  OSSBucket: string(name='OSSBucket', example='examplebucket', position='Query'),
}

model DetachOSSBucketResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model DetachOSSBucketResponse = {
  headers: map[string]string(name='headers'),
  body: DetachOSSBucketResponseBody(name='body'),
}

async function detachOSSBucket(request: DetachOSSBucketRequest): DetachOSSBucketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachOSSBucket', 'POST', '/', 'json', false, 'json', request);
}

model DetectImageBodiesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='test-project', position='Query'),
  sensitivity?: float(name='Sensitivity', example='0.6', position='Query'),
  sourceURI?: string(name='SourceURI', description='SourceURI', example='oss://test-bucket/test-object', position='Query'),
}

model DetectImageBodiesResponseBody = {
  bodies?: [
    Body
  ](name='Bodies', description='图片裁剪结果'),
  requestId?: string(name='RequestId', description='请求唯一ID', example='501339F9-4B70-0CE2-AB8C-866C********'),
}

model DetectImageBodiesResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageBodiesResponseBody(name='body'),
}

async function detectImageBodies(request: DetectImageBodiesRequest): DetectImageBodiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectImageBodies', 'POST', '/', 'json', false, 'json', request);
}

model DetectImageCodesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  sourceURI: string(name='SourceURI', description='SourceURI', example='oss://bucketname/objectname', position='Query'),
}

model DetectImageCodesResponseBody = {
  codes: [
    Codes
  ](name='Codes', description='二维码检测结果'),
  requestId?: string(name='RequestId', description='请求唯一ID', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model DetectImageCodesResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageCodesResponseBody(name='body'),
}

async function detectImageCodes(request: DetectImageCodesRequest): DetectImageCodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectImageCodes', 'POST', '/', 'json', false, 'json', request);
}

model DetectImageCroppingRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  aspectRatios?: string(name='AspectRatios', example='["1:1"]', position='Query'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  sourceURI?: string(name='SourceURI', description='SourceURI', example='oss://imm-test/testcases/facetest.jpg', position='Query'),
}

model DetectImageCroppingResponseBody = {
  croppings?: [
    CroppingSuggestion
  ](name='Croppings', description='图片裁剪结果'),
  requestId?: string(name='RequestId', description='请求唯一ID', example='91AC8C98-0F36-49D2-8290-742E24D*****'),
}

model DetectImageCroppingResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageCroppingResponseBody(name='body'),
}

async function detectImageCropping(request: DetectImageCroppingRequest): DetectImageCroppingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectImageCropping', 'POST', '/', 'json', false, 'json', request);
}

model DetectImageFacesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  sourceURI?: string(name='SourceURI', example='oss://bucket1/object', position='Query'),
}

model DetectImageFacesResponseBody = {
  faces?: [
    Figure
  ](name='Faces'),
  requestId?: string(name='RequestId', description='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model DetectImageFacesResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageFacesResponseBody(name='body'),
}

async function detectImageFaces(request: DetectImageFacesRequest): DetectImageFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectImageFaces', 'POST', '/', 'json', false, 'json', request);
}

model DetectImageLabelsRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immimagetest', position='Query'),
  sourceURI: string(name='SourceURI', description='SourceURI', example='oss://imm-test/testcases/facetest.jpg', position='Query'),
  threshold?: float(name='Threshold', description='Threshold', example='1', position='Query'),
}

model DetectImageLabelsResponseBody = {
  labels?: [
    Label
  ](name='Labels', description='内容标签列表'),
  requestId?: string(name='RequestId', description='请求唯一ID', example='91AC8C98-0F36-49D2-8290-742E24DF1F69'),
}

model DetectImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageLabelsResponseBody(name='body'),
}

async function detectImageLabels(request: DetectImageLabelsRequest): DetectImageLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectImageLabels', 'POST', '/', 'json', false, 'json', request);
}

model DetectImageScoreRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname', position='Query'),
}

model DetectImageScoreResponseBody = {
  imageScore?: {
    overallQualityScore?: float(name='OverallQualityScore', example='0.6'),
  }(name='ImageScore'),
  requestId?: string(name='RequestId', description='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model DetectImageScoreResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageScoreResponseBody(name='body'),
}

async function detectImageScore(request: DetectImageScoreRequest): DetectImageScoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectImageScore', 'POST', '/', 'json', false, 'json', request);
}

model DetectMediaMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName?: string(name='ProjectName', example='immtest', position='Query'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/video.mp4', position='Query'),
}

model DetectMediaMetaResponseBody = {
  addresses?: [
    Address
  ](name='Addresses'),
  album?: string(name='Album', example='unable'),
  albumArtist?: string(name='AlbumArtist', example='unable'),
  artist?: string(name='Artist', example='unable'),
  audioStreams?: [
    AudioStream
  ](name='AudioStreams'),
  bitrate?: long(name='Bitrate', example='13164131'),
  composer?: string(name='Composer', example='unable'),
  duration?: double(name='Duration', example='15.263000'),
  formatLongName?: string(name='FormatLongName', example='QuickTime / MOV'),
  formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
  language?: string(name='Language', example='eng'),
  latLong?: string(name='LatLong', example='+120.029003,+30.283095'),
  performer?: string(name='Performer', example='unable'),
  produceTime?: string(name='ProduceTime', example='2022-04-24T02:39:57Z'),
  programCount?: long(name='ProgramCount', example='2'),
  requestId?: string(name='RequestId', example='2213B1A9-EB3D-4666-84E0-24980BC*****'),
  size?: long(name='Size', example='25115517'),
  startTime?: double(name='StartTime', example='0.000000'),
  streamCount?: long(name='StreamCount', example='2'),
  subtitles?: [
    SubtitleStream
  ](name='Subtitles'),
  title?: string(name='Title', example='test'),
  videoHeight?: long(name='VideoHeight', example='1920'),
  videoStreams?: [
    VideoStream
  ](name='VideoStreams'),
  videoWidth?: long(name='VideoWidth', example='1080'),
}

model DetectMediaMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DetectMediaMetaResponseBody(name='body'),
}

async function detectMediaMeta(request: DetectMediaMetaRequest): DetectMediaMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectMediaMeta', 'POST', '/', 'json', false, 'json', request);
}

model DetectTextAnomalyRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  content: string(name='Content', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
}

model DetectTextAnomalyResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='91AC8C98-0F36-49D2-8290-742E24DF*****'),
  suggestion?: string(name='Suggestion', example='pass'),
}

model DetectTextAnomalyResponse = {
  headers: map[string]string(name='headers'),
  body: DetectTextAnomalyResponseBody(name='body'),
}

async function detectTextAnomaly(request: DetectTextAnomalyRequest): DetectTextAnomalyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetectTextAnomaly', 'POST', '/', 'json', false, 'json', request);
}

model FuzzyQueryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', description='Dataset 名称', example='test-dataset', position='Query'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据记录数量', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw==', position='Query'),
  order?: string(name='Order', example='asc,desc', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='test-project', position='Query'),
  query: string(name='Query', description='用于搜索的字符串', example='examplebucket', position='Query'),
  sort?: string(name='Sort', example='Size,Filename', position='Query'),
}

model FuzzyQueryResponseBody = {
  files?: [
    File
  ](name='Files'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
}

model FuzzyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FuzzyQueryResponseBody(name='body'),
}

async function fuzzyQuery(request: FuzzyQueryRequest): FuzzyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FuzzyQuery', 'POST', '/', 'json', false, 'json', request);
}

model GenerateWebofficeTokenRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  cachePreview?: boolean(name='CachePreview', description='缓存预览标识', example='false', position='Query'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  externalUploaded?: boolean(name='ExternalUploaded', description='是否支持外部上传', example='false', position='Query'),
  filename?: string(name='Filename', description='文件名，必须带文件名后缀，默认是 SourceUri 的最后一级', example='test.pptx', position='Query'),
  hidecmb?: boolean(name='Hidecmb', description='隐藏工具栏，预览模式下使用', example='false', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', description='mns 消息通知 topic', example='topic1', position='Query'),
  password?: string(name='Password', description='文件密码', example='123456', position='Query'),
  permission?: WebofficePermission(name='Permission', description='权限', shrink='json', position='Query'),
  previewPages?: long(name='PreviewPages', description='预览前几页', example='5', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  referer?: string(name='Referer', description='oss 防盗链 referer', example='*', position='Query'),
  sourceURI: string(name='SourceURI', description='预览编辑地址', example='oss://imm-test/test.pptx', position='Query'),
  user?: WebofficeUser(name='User', description='用户', shrink='json', position='Query'),
  userData?: string(name='UserData', description='用户自定义数据，在消息通知中返回', example='{"file_id": "abc"}', position='Query'),
  watermark?: WebofficeWatermark(name='Watermark', description='水印', shrink='json', position='Query'),
}

model GenerateWebofficeTokenResponseBody = {
  accessToken?: string(name='AccessToken', description='access token', example='2d73dd5d87524c5e8a194c3eb5********'),
  accessTokenExpiredTime?: string(name='AccessTokenExpiredTime', description='access token 过期时间', example='2021-08-30T13:13:11.347146982Z'),
  refreshToken?: string(name='RefreshToken', description='refresh token', example='e374995ec532432bb678074d36********'),
  refreshTokenExpiredTime?: string(name='RefreshTokenExpiredTime', description='refresh token 过期时间', example='2021-08-31T12:43:11.347146982Z'),
  requestId?: string(name='RequestId', description='请求 id', example='1759315A-CB33-0A75-A72B-62D7********'),
  webofficeURL?: string(name='WebofficeURL', description='预览编辑地址', example='https://office-hl.imm.aliyuncs.com/office/s/dd221b2cdb44fb66e9070d1d70a8b9bbb6d6fff7?_w_tokentype=1'),
}

model GenerateWebofficeTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateWebofficeTokenResponseBody(name='body'),
}

async function generateWebofficeToken(request: GenerateWebofficeTokenRequest): GenerateWebofficeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateWebofficeToken', 'POST', '/', 'json', false, 'json', request);
}

model GetBatchRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', description='A short description of struct', example='batch-4eb9223f-3e88-42d3-a578-3f2852******', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
}

model GetBatchResponseBody = {
  batch?: DataIngestion(name='Batch'),
  requestId?: string(name='RequestId', description='Id of the request', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model GetBatchResponse = {
  headers: map[string]string(name='headers'),
  body: GetBatchResponseBody(name='body'),
}

async function getBatch(request: GetBatchRequest): GetBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatch', 'POST', '/', 'json', false, 'json', request);
}

model GetBindingRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  URI: string(name='URI', example='oss://examplebucket', position='Query'),
}

model GetBindingResponseBody = {
  binding?: Binding(name='Binding'),
  requestId?: string(name='RequestId', description='Id of the request', example='AEFCD467-C928-4A36-951A-6EB5A592****'),
}

model GetBindingResponse = {
  headers: map[string]string(name='headers'),
  body: GetBindingResponseBody(name='body'),
}

async function getBinding(request: GetBindingRequest): GetBindingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBinding', 'POST', '/', 'json', false, 'json', request);
}

model GetDatasetRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  withStatistics?: boolean(name='WithStatistics', example='true', position='Query'),
}

model GetDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', example='6D74B3A9-5AC0-49F9-914D-E01589D3****'),
}

model GetDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatasetResponseBody(name='body'),
}

async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataset', 'POST', '/', 'json', false, 'json', request);
}

model GetFigureClusterRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  objectId: string(name='ObjectId', example='Cluster-1f2e1a2c-d5ee-4bc5-84f6-fef94ea****', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
}

model GetFigureClusterResponseBody = {
  figureCluster?: FigureCluster(name='FigureCluster'),
  requestId?: string(name='RequestId', description='Id of the request', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model GetFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  body: GetFigureClusterResponseBody(name='body'),
}

async function getFigureCluster(request: GetFigureClusterRequest): GetFigureClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFigureCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  URI: string(name='URI', example='oss://examplebucket/exampleobject.jpg', position='Query'),
}

model GetFileMetaResponseBody = {
  files?: [
    File
  ](name='Files', description='File list.'),
  requestId?: string(name='RequestId', description='Id of the request', example='7F84C6D9-5AC0-49F9-914D-F02678E3****'),
}

model GetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileMetaResponseBody(name='body'),
}

async function getFileMeta(request: GetFileMetaRequest): GetFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetOSSBucketAttachmentRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  OSSBucket: string(name='OSSBucket', example='examplebucket', position='Query'),
}

model GetOSSBucketAttachmentResponseBody = {
  projectName?: string(name='ProjectName', example='immtest'),
  requestId?: string(name='RequestId', description='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model GetOSSBucketAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetOSSBucketAttachmentResponseBody(name='body'),
}

async function getOSSBucketAttachment(request: GetOSSBucketAttachmentRequest): GetOSSBucketAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOSSBucketAttachment', 'POST', '/', 'json', false, 'json', request);
}

model GetProjectRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  projectName: string(name='ProjectName', description='项目名称', example='test-project', position='Query'),
  withStatistics?: boolean(name='WithStatistics', description='是否获取详细信息', example='true', position='Query'),
}

model GetProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', description='RequestId', example='5A022F78-B9A8-4ACC-BB6B-B3597553'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectResponseBody(name='body'),
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProject', 'POST', '/', 'json', false, 'json', request);
}

model GetStoryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  objectId: string(name='ObjectId', example='id1', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
}

model GetStoryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  story?: Story(name='Story'),
}

model GetStoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetStoryResponseBody(name='body'),
}

async function getStory(request: GetStoryRequest): GetStoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStory', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  taskId: string(name='TaskId', description='TaskId', example='c2b277b9-0d30-4882-ad6d-ad661382****', position='Query'),
  taskType: string(name='TaskType', description='TaskType', example='VideoLabelClassification', position='Query'),
}

model GetTaskResponseBody = {
  code?: string(name='Code', description='任务错误码', example='ResourceNotFound'),
  endTime?: string(name='EndTime', description='任务结束时间', example='2021-12-24T03:01:49.480109219Z'),
  eventId?: string(name='EventId', description='事件Id', example='2F6-1Bz99Xi93EnRpNEyLudILJm****'),
  message?: string(name='Message', description='任务错误消息', example='The specified resource project is not found.'),
  projectName?: string(name='ProjectName', description='项目名称', example='immtest'),
  requestId?: string(name='RequestId', description='请求唯一Id', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
  startTime?: string(name='StartTime', description='任务开始时间', example='2021-12-24T03:01:41.662060377Z'),
  status?: string(name='Status', description='任务运行状态', example='Running'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}'),
  taskId?: string(name='TaskId', description='任务唯一ID', example='c2b277b9-0d30-4882-ad6d-ad661382****'),
  taskType?: string(name='TaskType', description='任务类型', example='VideoLabelClassification'),
  userData?: string(name='UserData', description='用户自定义信息', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'POST', '/', 'json', false, 'json', request);
}

model GetTriggerRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', description='A short description of struct', example='trigger-9f72636a-0f0c-4baf-ae78-38b27b******', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
}

model GetTriggerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4A7A2D0E-D8B8-4DA0-8127-EB32C6******'),
  trigger?: DataIngestion(name='Trigger'),
}

model GetTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: GetTriggerResponseBody(name='body'),
}

async function getTrigger(request: GetTriggerRequest): GetTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrigger', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoLabelClassificationResultRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  taskId: string(name='TaskId', description='TaskId', example='VideoLabelClassification-2f157087-91df-4fda-8c3e-232407ec****', position='Query'),
  taskType: string(name='TaskType', description='TaskType', example='VideoLabelClassification', position='Query'),
}

model GetVideoLabelClassificationResultResponseBody = {
  code?: string(name='Code', description='任务错误码', example='ResourceNotFound'),
  endTime?: string(name='EndTime', description='任务结束时间', example='2021-12-24T03:00:42.134971294Z'),
  eventId?: string(name='EventId', description='事件Id', example='2F6-1Bz99Xi93EnRpNEyLudILJm****'),
  labels?: [
    Label
  ](name='Labels', description='标签列表'),
  message?: string(name='Message', description='任务错误消息', example='The specified resource project is not found.'),
  projectName?: string(name='ProjectName', description='项目名称', example='immtest'),
  requestId?: string(name='RequestId', description='请求唯一Id', example='7F84C6D9-5AC0-49F9-914D-F02678E3****'),
  startTime?: string(name='StartTime', description='任务开始时间', example='2021-12-24T03:00:38.892462383Z'),
  status?: string(name='Status', description='任务运行状态', example='Succeeded'),
  taskId?: string(name='TaskId', description='任务唯一ID', example='VideoLabelClassification-2f157087-91df-4fda-8c3e-232407ec****'),
  taskType?: string(name='TaskType', description='任务类型', example='VideoLabelClassification'),
  userData?: string(name='UserData', description='用户自定义信息', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model GetVideoLabelClassificationResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoLabelClassificationResultResponseBody(name='body'),
}

async function getVideoLabelClassificationResult(request: GetVideoLabelClassificationResultRequest): GetVideoLabelClassificationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoLabelClassificationResult', 'POST', '/', 'json', false, 'json', request);
}

model IndexFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  file: FileForReq(name='File', shrink='json', position='Query'),
  notifyTopicName?: string(name='NotifyTopicName', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
}

model IndexFileMetaResponseBody = {
  eventId?: string(name='EventId', example='30F-1D8FxFzDXKJH9YQdve4CjR****'),
  requestId?: string(name='RequestId', description='Id of the request', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model IndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: IndexFileMetaResponseBody(name='body'),
}

async function indexFileMeta(request: IndexFileMetaRequest): IndexFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IndexFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model ListBatchesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw==', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sort?: string(name='Sort', example='2020-11-11T06:51:17.5Z', position='Query'),
  state?: string(name='State', example='Succeed', position='Query'),
  tagSelector?: string(name='TagSelector', example='test=val1', position='Query'),
}

model ListBatchesResponseBody = {
  batches?: [
    DataIngestion
  ](name='Batches'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpw****'),
  requestId?: string(name='RequestId', example='FEDC9B1F-30F2-4C1F-8ED2-B7860187****'),
}

model ListBatchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListBatchesResponseBody(name='body'),
}

async function listBatches(request: ListBatchesRequest): ListBatchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBatches', 'POST', '/', 'json', false, 'json', request);
}

model ListBindingsRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  maxResults?: long(name='MaxResults', example='1', position='Query'),
  nextToken?: string(name='NextToken', example='immtest:dataset001:examplebucket01', position='Query'),
  projectName: string(name='ProjectName', description='A short description of struct', example='test-project', position='Query'),
}

model ListBindingsResponseBody = {
  bindings?: [
    Binding
  ](name='Bindings'),
  nextToken?: string(name='NextToken', example='immtest:dataset001:examplebucket01'),
  requestId?: string(name='RequestId', description='Id of the request', example='EFDFD356-C928-4A36-951A-6EB5A592****'),
}

model ListBindingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBindingsResponseBody(name='body'),
}

async function listBindings(request: ListBindingsRequest): ListBindingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindings', 'POST', '/', 'json', false, 'json', request);
}

model ListDatasetsRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  maxResults?: long(name='MaxResults', description='返回最大个数', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token', example='12345678:immtest:dataset002', position='Query'),
  prefix?: string(name='Prefix', example='dataset', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='test-project', position='Query'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets', description='Datasets'),
  nextToken?: string(name='NextToken', example='12345678:immtest:dataset002'),
  requestId?: string(name='RequestId', description='Id of the request', example='FEEDE356-C928-4A36-951A-6EB5A592****'),
}

model ListDatasetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatasetsResponseBody(name='body'),
}

async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatasets', 'POST', '/', 'json', false, 'json', request);
}

model ListProjectsRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  maxResults?: long(name='MaxResults', description='返回结果的最大个数', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token', example='12345678:immtest01', position='Query'),
  prefix?: string(name='Prefix', description='列出包含某前缀的project', example='immtest', position='Query'),
}

model ListProjectsResponseBody = {
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token', example='12345678:immtest01'),
  projects?: [
    Project
  ](name='Projects', description='由ProjectItem组成的数组'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID', example='4A7A2D0E-D8B8-4DA0-8127-EB32C660'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjects', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  acceptLanguage: string(name='AcceptLanguage', example='zh-CN', position='Query'),
}

model ListRegionsResponseBody = {
  regions?: [
    RegionType
  ](name='Regions'),
  requestId?: string(name='RequestId', description='RequestId', example='7F7D235C-76FF-4B65-800C-8238AE3F****'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListTasksRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  endTimeRange?: TimeRange(name='EndTimeRange', shrink='json', position='Query'),
  maxResults?: long(name='MaxResults', description='MaxResults', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw==', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  sort?: string(name='Sort', example='TaskId', position='Query'),
  startTimeRange?: TimeRange(name='StartTimeRange', shrink='json', position='Query'),
  status?: string(name='Status', example='Succeeded', position='Query'),
  tagSelector?: string(name='TagSelector', example='test=val1', position='Query'),
  taskTypes?: [ string ](name='TaskTypes', shrink='json', position='Query'),
}

model ListTasksResponseBody = {
  maxResults?: string(name='MaxResults', description='最大结果数量', example='1'),
  nextToken?: string(name='NextToken', description='翻页标记', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  projectName?: string(name='ProjectName', description='项目名称', example='immtest'),
  requestId?: string(name='RequestId', description='请求唯一Id', example='9847E7D0-A9A3-0053-84C6-BA16FFFA726E'),
  tasks?: [
    TaskInfo
  ](name='Tasks', description='任务信息'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListTriggersRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw==', position='Query'),
  order?: string(name='Order', example='ASC', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sort?: string(name='Sort', example='2020-11-11T06:51:17.5Z', position='Query'),
  state?: string(name='State', example='Succeeded', position='Query'),
  tagSelector?: string(name='TagSelector', example='test=val1', position='Query'),
}

model ListTriggersResponseBody = {
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', example='F480BFAF-E778-5079-93AD-1E4631******'),
  triggers?: [
    DataIngestion
  ](name='Triggers'),
}

model ListTriggersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTriggersResponseBody(name='body'),
}

async function listTriggers(request: ListTriggersRequest): ListTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTriggers', 'POST', '/', 'json', false, 'json', request);
}

model QueryFigureClustersRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  createTimeRange?: TimeRange(name='CreateTimeRange', shrink='json', position='Query'),
  customLabels?: string(name='CustomLabels', example='{"Bucket": "examplebucket"}', position='Query'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  maxResults?: long(name='MaxResults', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3Qx****', position='Query'),
  nextToken?: string(name='NextToken', example='10', position='Query'),
  order?: string(name='Order', description='升降序', example='asc', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sort?: string(name='Sort', description='排序字段', example='ImageCount', position='Query'),
  updateTimeRange?: TimeRange(name='UpdateTimeRange', shrink='json', position='Query'),
}

model QueryFigureClustersResponseBody = {
  figureClusters?: [
    FigureCluster
  ](name='FigureClusters'),
  nextToken?: string(name='NextToken', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='CA995EFD-083D-4F40-BE8A-BDF75FFF****'),
}

model QueryFigureClustersResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFigureClustersResponseBody(name='body'),
}

async function queryFigureClusters(request: QueryFigureClustersRequest): QueryFigureClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFigureClusters', 'POST', '/', 'json', false, 'json', request);
}

model QueryLocationDateClustersRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  address?: Address(name='Address', shrink='json', position='Query'),
  createTimeRange?: TimeRange(name='CreateTimeRange', shrink='json', position='Query'),
  customLabels?: string(name='CustomLabels', example='key=value', position='Query'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  locationDateClusterEndTimeRange?: TimeRange(name='LocationDateClusterEndTimeRange', shrink='json', position='Query'),
  locationDateClusterLevels?: [ string ](name='LocationDateClusterLevels', shrink='json', position='Query'),
  locationDateClusterStartTimeRange?: TimeRange(name='LocationDateClusterStartTimeRange', shrink='json', position='Query'),
  maxResults?: int32(name='MaxResults', example='1', position='Query'),
  nextToken?: string(name='NextToken', example='MzQNjmY2MzYxNhNjk2ZNjEu****', position='Query'),
  objectId?: string(name='ObjectId', example='id1', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  sort?: string(name='Sort', example='LocationDateClusterStartTime', position='Query'),
  title?: string(name='Title', example='title1', position='Query'),
  updateTimeRange?: TimeRange(name='UpdateTimeRange', shrink='json', position='Query'),
}

model QueryLocationDateClustersResponseBody = {
  locationDateClusters?: [
    LocationDateCluster
  ](name='LocationDateClusters'),
  nextToken?: string(name='NextToken', example='MzQNjmY2MzYxNhNjk2ZNjEu****'),
  requestId?: string(name='RequestId', description='Id of the request', example='7055FCF7-4D7B-098E-BD4D-DD2932B0****'),
}

model QueryLocationDateClustersResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLocationDateClustersResponseBody(name='body'),
}

async function queryLocationDateClusters(request: QueryLocationDateClustersRequest): QueryLocationDateClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLocationDateClusters', 'POST', '/', 'json', false, 'json', request);
}

model QueryStoriesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  createTimeRange?: TimeRange(name='CreateTimeRange', shrink='json', position='Query'),
  customLabels?: string(name='CustomLabels', example='{"key": "val"}', position='Query'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  figureClusterIds?: [ string ](name='FigureClusterIds', shrink='json', position='Query'),
  maxResults?: long(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpw****', position='Query'),
  objectId?: string(name='ObjectId', example='id1', position='Query'),
  order?: string(name='Order', example='asc', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sort?: string(name='Sort', example='CreateTime', position='Query'),
  storyEndTimeRange?: TimeRange(name='StoryEndTimeRange', shrink='json', position='Query'),
  storyName?: string(name='StoryName', example='name1', position='Query'),
  storyStartTimeRange?: TimeRange(name='StoryStartTimeRange', shrink='json', position='Query'),
  storySubType?: string(name='StorySubType', example='SeasonHighlights', position='Query'),
  storyType?: string(name='StoryType', example='TimeMemory', position='Query'),
  withEmptyStories?: boolean(name='WithEmptyStories', example='true', position='Query'),
}

model QueryStoriesResponseBody = {
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3Qx****'),
  requestId?: string(name='RequestId', description='Id of the request', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
  stories?: [
    Story
  ](name='Stories'),
}

model QueryStoriesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStoriesResponseBody(name='body'),
}

async function queryStories(request: QueryStoriesRequest): QueryStoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStories', 'POST', '/', 'json', false, 'json', request);
}

model RefreshWebofficeTokenRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  accessToken: string(name='AccessToken', description='access token', example='99d1b8b478b641c1b3372f5bd6********', position='Query'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  refreshToken: string(name='RefreshToken', description='refresh token', example='a730ae0d7c6a487d87c661d199********', position='Query'),
}

model RefreshWebofficeTokenResponseBody = {
  accessToken?: string(name='AccessToken', description='access token', example='4996466c690a4902846ce00f96********'),
  accessTokenExpiredTime?: string(name='AccessTokenExpiredTime', description='access token 过期时间', example='2021-08-31T13:07:28.950065359Z'),
  refreshToken?: string(name='RefreshToken', description='refresh token', example='72a52ab3702a4123ab5594671a********'),
  refreshTokenExpiredTime?: string(name='RefreshTokenExpiredTime', description='refresh token 过期时间', example='2021-09-01T12:37:28.950065359Z'),
  requestId?: string(name='RequestId', description='请求 Id', example='501339F9-4B70-0CE2-AB8C-866C********'),
}

model RefreshWebofficeTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshWebofficeTokenResponseBody(name='body'),
}

async function refreshWebofficeToken(request: RefreshWebofficeTokenRequest): RefreshWebofficeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshWebofficeToken', 'POST', '/', 'json', false, 'json', request);
}

model RemoveStoryFilesRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='testdataset', position='Body'),
  files: [ 
    {
      URI?: string(name='URI', example='oss://bucket1/object'),
    }
  ](name='Files', shrink='json', position='Body'),
  objectId: string(name='ObjectId', example='testid', position='Body'),
  projectName: string(name='ProjectName', description='A short description of struct', example='immtest', position='Body'),
}

model RemoveStoryFilesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model RemoveStoryFilesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveStoryFilesResponseBody(name='body'),
}

async function removeStoryFiles(request: RemoveStoryFilesRequest): RemoveStoryFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveStoryFiles', 'POST', '/', 'json', true, 'form', request);
}

model ResumeBatchRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', example='batch-4eb9223f-3e88-42d3-a578-3f2852******', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
}

model ResumeBatchResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='D2C628B8-35DF-473C-8A41-757F30******'),
}

model ResumeBatchResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeBatchResponseBody(name='body'),
}

async function resumeBatch(request: ResumeBatchRequest): ResumeBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeBatch', 'POST', '/', 'json', true, 'form', request);
}

model ResumeTriggerRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', example='trigger-9f72636a-0f0c-4baf-ae78-38b27b******', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
}

model ResumeTriggerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FEDC9B1F-30F2-4C1F-8ED2-B7860187****'),
}

model ResumeTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeTriggerResponseBody(name='body'),
}

async function resumeTrigger(request: ResumeTriggerRequest): ResumeTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeTrigger', 'POST', '/', 'json', true, 'form', request);
}

model SearchImageFigureClusterRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  credentialConfig?: CredentialConfig(name='CredentialConfig', shrink='json', position='Query'),
  datasetName: string(name='DatasetName', example='test-dataset', position='Query'),
  projectName: string(name='ProjectName', example='test-project', position='Query'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object', position='Query'),
}

model SearchImageFigureClusterResponseBody = {
  clusters?: [ 
    {
      boundary?: Boundary(name='Boundary'),
      clusterId?: string(name='ClusterId', example='Cluster-ca730577-06b1-42c7-a25b-8f2c7******'),
      similarity?: float(name='Similarity', example='0.87413794'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId', description='Id of the request', example='C2734912-E6D5-052C-AC67-6A9FD02*****'),
}

model SearchImageFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  body: SearchImageFigureClusterResponseBody(name='body'),
}

async function searchImageFigureCluster(request: SearchImageFigureClusterRequest): SearchImageFigureClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchImageFigureCluster', 'POST', '/', 'json', false, 'json', request);
}

model SemanticQueryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', description='Dataset 名称', example='immDatatest', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw==', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  query: string(name='Query', description='需要搜索的内容，使用自然语言描述', position='Query'),
}

model SemanticQueryResponseBody = {
  files?: [
    File
  ](name='Files', description='文件列表'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
}

model SemanticQueryResponse = {
  headers: map[string]string(name='headers'),
  body: SemanticQueryResponseBody(name='body'),
}

async function semanticQuery(request: SemanticQueryRequest): SemanticQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SemanticQuery', 'POST', '/', 'json', false, 'json', request);
}

model SimpleQueryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段的字段名', example='Size'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符', example='sum'),
    }
  ](name='Aggregations', description='聚合字段', shrink='json', position='Query'),
  datasetName: string(name='DatasetName', description='Dataset 名称', example='test-dataset', position='Query'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量', example='1', position='Query'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw==', position='Query'),
  order?: string(name='Order', description='排序字段', example='asc,desc', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='test-project', position='Query'),
  query?: SimpleQuery(name='Query', shrink='json', position='Query'),
  sort?: string(name='Sort', description='排序方式，默认 DESC', example='Size,Filename', position='Query'),
  withFields?: [ string ](name='WithFields', description='仅返回哪些字段', shrink='json', position='Query'),
}

model SimpleQueryResponseBody = {
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段名', example='Size'),
      groups?: [ 
        {
          count?: long(name='Count', description='分组聚合的计数', example='5'),
          value?: string(name='Value', description='分组聚合的值', example='100'),
        }
      ](name='Groups', description='分组聚合的结果'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符', example='sum'),
      value?: double(name='Value', example='200'),
    }
  ](name='Aggregations', description='聚合字段的字段名'),
  files?: [
    File
  ](name='Files', description='文件列表'),
  nextToken: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
}

model SimpleQueryResponse = {
  headers: map[string]string(name='headers'),
  body: SimpleQueryResponseBody(name='body'),
}

async function simpleQuery(request: SimpleQueryRequest): SimpleQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SimpleQuery', 'POST', '/', 'json', false, 'json', request);
}

model SuspendBatchRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', example='batch-4eb9223f-3e88-42d3-a578-3f2852******', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
}

model SuspendBatchResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
}

model SuspendBatchResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendBatchResponseBody(name='body'),
}

async function suspendBatch(request: SuspendBatchRequest): SuspendBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendBatch', 'POST', '/', 'json', true, 'form', request);
}

model SuspendTriggerRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  id: string(name='Id', example='trigger-9f72636a-0f0c-4baf-ae78-38b27b******', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
}

model SuspendTriggerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0BC1F0C9-8E99-46C6-B502-10DED******'),
}

model SuspendTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendTriggerResponseBody(name='body'),
}

async function suspendTrigger(request: SuspendTriggerRequest): SuspendTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendTrigger', 'POST', '/', 'json', true, 'form', request);
}

model UpdateBatchRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  actions?: [ 
    {
      name?: string(name='Name', example='doc/convert'),
      parameters?: [ string ](name='Parameters'),
    }
  ](name='Actions', shrink='json', position='Body'),
  id: string(name='Id', example='batch-4eb9223f-3e88-42d3-a578-3f2852******', position='Body'),
  input?: Input(name='Input', shrink='json', position='Body'),
  notification?: {
    endpoint?: string(name='Endpoint', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
    topic?: string(name='Topic', example='topic1'),
  }(name='Notification', shrink='json', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}', shrink='json', position='Body'),
}

model UpdateBatchResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CB4D73A3-BAF4-4A9D-A631-15F219AF****'),
}

model UpdateBatchResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBatchResponseBody(name='body'),
}

async function updateBatch(request: UpdateBatchRequest): UpdateBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBatch', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDatasetRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最多绑定数', example='10', position='Query'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数', example='10000000000', position='Query'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数', example='100000000', position='Query'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数', example='100000000000', position='Query'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小', example='90000000000000000', position='Query'),
  datasetName: string(name='DatasetName', description='媒体集名称', example='dataset001', position='Query'),
  description?: string(name='Description', description='描述', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id', example='Official:AllFunction', position='Query'),
}

model UpdateDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', description='Id of the request', example='45234D4A-A3E3-4B23-AACA-8D897514****'),
}

model UpdateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDatasetResponseBody(name='body'),
}

async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataset', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFigureClusterRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  figureCluster: FigureClusterForReq(name='FigureCluster', shrink='json', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
}

model UpdateFigureClusterResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model UpdateFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFigureClusterResponseBody(name='body'),
}

async function updateFigureCluster(request: UpdateFigureClusterRequest): UpdateFigureClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFigureCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFileMetaRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  file: FileForReq(name='File', shrink='json', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
}

model UpdateFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6D53E6C9-5AC0-48F9-825F-D02678E3****'),
}

model UpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFileMetaResponseBody(name='body'),
}

async function updateFileMeta(request: UpdateFileMetaRequest): UpdateFileMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFileMeta', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLocationDateClusterRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  customId?: string(name='CustomId', example='customid1', position='Query'),
  customLabels?: map[string]any(name='CustomLabels', example='{"UserScore": "5"}', shrink='json', position='Query'),
  datasetName: string(name='DatasetName', example='dataset001', position='Query'),
  objectId: string(name='ObjectId', example='id1', position='Query'),
  projectName: string(name='ProjectName', example='immtest', position='Query'),
  title?: string(name='Title', example='title1', position='Query'),
}

model UpdateLocationDateClusterResponseBody = {
  requestId?: string(name='RequestId', example='52B017A8-FEF5-0A61-BAEE-234A8AD8****'),
}

model UpdateLocationDateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLocationDateClusterResponseBody(name='body'),
}

async function updateLocationDateCluster(request: UpdateLocationDateClusterRequest): UpdateLocationDateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLocationDateCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最多绑定数', example='10', position='Query'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数', example='10000000000', position='Query'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数', example='100000000', position='Query'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数', example='100000000000', position='Query'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小', example='90000000000000000', position='Query'),
  description?: string(name='Description', description='项目描述', position='Query'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', description='项目最多媒体集数', example='1000000000', position='Query'),
  projectName: string(name='ProjectName', description='项目名称', example='immtest', position='Query'),
  serviceRole?: string(name='ServiceRole', description='服务角色', example='AliyunIMMDefaultRole', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id', example='AliyunIMMDefaultRole', position='Query'),
}

model UpdateProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', description='请求ID', example='D33C3574-4093-448E-86E7-15BE2BD3****'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProject', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStoryRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  cover?: {
    URI?: string(name='URI', example='oss://bucket1/object'),
  }(name='Cover', shrink='json', position='Body'),
  customId?: string(name='CustomId', example='test', position='Body'),
  customLabels?: map[string]any(name='CustomLabels', example='{"key": "value"}', shrink='json', position='Body'),
  datasetName: string(name='DatasetName', example='testdata', position='Body'),
  objectId: string(name='ObjectId', example='testid', position='Body'),
  projectName: string(name='ProjectName', example='immtest', position='Body'),
  storyName?: string(name='StoryName', example='newstory', position='Body'),
}

model UpdateStoryResponseBody = {
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model UpdateStoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateStoryResponseBody(name='body'),
}

async function updateStory(request: UpdateStoryRequest): UpdateStoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStory', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTriggerRequest {
  regionId?: string(name='RegionId', description='RegionId', example='区域', position='Host'),
  actions?: [ 
    {
      name?: string(name='Name', example='doc/convert'),
      parameters?: [ string ](name='Parameters'),
    }
  ](name='Actions', shrink='json', position='Body'),
  id: string(name='Id', example='trigger-9f72636a-0f0c-4baf-ae78-38b27b******', position='Body'),
  input?: Input(name='Input', shrink='json', position='Body'),
  notification?: {
    endpoint?: string(name='Endpoint', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
    topic?: string(name='Topic', example='topic1'),
  }(name='Notification', shrink='json', position='Body'),
  projectName: string(name='ProjectName', example='test-project', position='Body'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}', shrink='json', position='Body'),
}

model UpdateTriggerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='5A022F78-B9A8-4ACC-BB6B-B35975******'),
}

model UpdateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTriggerResponseBody(name='body'),
}

async function updateTrigger(request: UpdateTriggerRequest): UpdateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrigger', 'POST', '/', 'json', true, 'form', request);
}

