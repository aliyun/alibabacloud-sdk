/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing-gov-1 = 'imm-vpc.cn-beijing-gov-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('imm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Address {
  addressLine?: string(name='AddressLine', description='AddressLine'),
  city?: string(name='City', description='City'),
  country?: string(name='Country', description='Country'),
  district?: string(name='District', description='District'),
  language?: string(name='Language', description='Language'),
  province?: string(name='Province', description='Province'),
  township?: string(name='Township', description='Township'),
}

model AssumeRoleChain {
  chain?: [
    AssumeRoleChainNode
  ](name='Chain', description='链式授权节点'),
  policy?: string(name='Policy', description='当前用户 policy'),
}

model AssumeRoleChainNode {
  ownerId?: string(name='OwnerId', description='账号id'),
  role?: string(name='Role', description='授权角色名'),
  type?: string(name='Type', description='账号类型，普通账号填 user，服务账号填 service'),
}

model AudioStream {
  bitrate?: long(name='Bitrate', description='Bitrate'),
  channelLayout?: string(name='ChannelLayout', description='ChannelLayout'),
  channels?: long(name='Channels', description='Channels'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  codecTimeBase?: string(name='CodecTimeBase', description='CodecTimeBase'),
  duration?: float(name='Duration', description='Duration'),
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  lyric?: string(name='Lyric', description='Lyric'),
  sampleFormat?: string(name='SampleFormat', description='SampleFormat'),
  sampleRate?: long(name='SampleRate', description='SampleRate'),
  startTime?: float(name='StartTime', description='StartTime'),
  timeBase?: string(name='TimeBase', description='TimeBase'),
}

model Binding {
  createTime?: string(name='CreateTime', description='CreateTime'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  detail?: string(name='Detail', description='Detail'),
  phase?: string(name='Phase', description='Phase'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  state?: string(name='State', description='State'),
  URI?: string(name='URI', description='URI'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
}

model Boundary {
  height?: long(name='Height', description='Height'),
  left?: long(name='Left', description='Left'),
  top?: long(name='Top', description='Top'),
  width?: long(name='Width', description='Width'),
}

model ClusterForReq {
  cover?: {
    figures?: [ 
      {
        figureId?: string(name='FigureId', description='FigureId'),
      }
    ](name='Figures', description='Figures'),
  }(name='Cover', description='Cover'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  name?: string(name='Name', description='Name'),
  objectId?: string(name='ObjectId', description='ObjectId'),
}

model CroppingSuggestion {
  aspectRatio?: string(name='AspectRatio', description='AspectRatio'),
  boundary?: Boundary(name='Boundary', description='Boundary'),
  confidence?: float(name='Confidence', description='Confidence'),
}

model Dataset {
  bindCount?: long(name='BindCount', description='媒体集当前绑定数'),
  createTime?: string(name='CreateTime', description='创建时间'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最大绑定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数量'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数量'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数量'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小'),
  datasetName?: string(name='DatasetName', description='媒体集名称'),
  description?: string(name='Description', description='描述'),
  fileCount?: long(name='FileCount', description='媒体集当前文件数'),
  projectName?: string(name='ProjectName', description='项目名称'),
  totalFileSize?: long(name='TotalFileSize', description='媒体集当前文件总大小'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model Face {
  age?: long(name='Age', description='Age'),
  ageConfidence?: float(name='AgeConfidence', description='AgeConfidence'),
  beard?: string(name='Beard', description='Beard'),
  beardConfidence?: float(name='BeardConfidence', description='BeardConfidence'),
  boundary?: Boundary(name='Boundary'),
  embeddingsFloat32?: [ float ](name='EmbeddingsFloat32', description='EmbeddingsFloat32'),
  embeddingsInt8?: [ int32 ](name='EmbeddingsInt8', description='EmbeddingsInt8'),
  emotion?: string(name='Emotion', description='Emotion'),
  emotionConfidence?: float(name='EmotionConfidence', description='EmotionConfidence'),
  faceClusterId?: string(name='FaceClusterId', description='FaceClusterId'),
  faceConfidence?: float(name='FaceConfidence', description='FaceConfidence'),
  faceId?: string(name='FaceId', description='FaceId'),
  gender?: string(name='Gender', description='Gender'),
  genderConfidence?: float(name='GenderConfidence', description='GenderConfidence'),
  glasses?: string(name='Glasses', description='Glasses'),
  glassesConfidence?: float(name='GlassesConfidence', description='GlassesConfidence'),
  hat?: string(name='Hat', description='Hat'),
  hatConfidence?: float(name='HatConfidence', description='HatConfidence'),
  headPose?: HeadPose(name='HeadPose'),
  leftEye?: string(name='LeftEye', description='LeftEye'),
  leftEyeConfidence?: float(name='LeftEyeConfidence', description='LeftEyeConfidence'),
  mask?: string(name='Mask', description='Mask'),
  maskConfidence?: float(name='MaskConfidence', description='MaskConfidence'),
  mouth?: string(name='Mouth', description='Mouth'),
  mouthConfidence?: float(name='MouthConfidence', description='MouthConfidence'),
  race?: string(name='Race', description='Race'),
  raceConfidence?: float(name='RaceConfidence', description='RaceConfidence'),
  rightEye?: string(name='RightEye', description='RightEye'),
  rightEyeConfidence?: float(name='RightEyeConfidence', description='RightEyeConfidence'),
}

model Figure {
  age?: long(name='Age', description='Age'),
  ageSD?: float(name='AgeSD', description='AgeSD'),
  attractive?: float(name='Attractive', description='Attractive'),
  beard?: string(name='Beard', description='Beard'),
  beardConfidence?: float(name='BeardConfidence', description='BeardConfidence'),
  boundary?: Boundary(name='Boundary', description='Boundary'),
  emotion?: string(name='Emotion', description='Emotion'),
  emotionConfidence?: float(name='EmotionConfidence', description='EmotionConfidence'),
  faceQuality?: float(name='FaceQuality', description='FaceQuality'),
  figureClusterConfidence?: float(name='FigureClusterConfidence', description='FigureClusterConfidence'),
  figureClusterId?: string(name='FigureClusterId', description='FigureClusterId'),
  figureConfidence?: float(name='FigureConfidence', description='FigureConfidence'),
  figureId?: string(name='FigureId', description='FigureId'),
  figureType?: string(name='FigureType', description='FigureType'),
  gender?: string(name='Gender', description='Gender'),
  genderConfidence?: float(name='GenderConfidence', description='GenderConfidence'),
  glasses?: string(name='Glasses', description='Glasses'),
  glassesConfidence?: float(name='GlassesConfidence', description='GlassesConfidence'),
  hat?: string(name='Hat', description='Hat'),
  hatConfidence?: float(name='HatConfidence', description='HatConfidence'),
  headPose?: HeadPose(name='HeadPose'),
  mask?: string(name='Mask', description='Mask'),
  maskConfidence?: float(name='MaskConfidence', description='MaskConfidence'),
  mouth?: string(name='Mouth', description='Mouth'),
  mouthConfidence?: float(name='MouthConfidence', description='MouthConfidence'),
  sharpness?: float(name='Sharpness', description='Sharpness'),
}

model FigureCluster {
  averageAge?: float(name='AverageAge', description='AverageAge'),
  cover?: File(name='Cover', description='Cover'),
  createTime?: string(name='CreateTime', description='CreateTime'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  faceCount?: long(name='FaceCount', description='FaceCount'),
  gender?: string(name='Gender', description='Gender'),
  imageCount?: long(name='ImageCount', description='ImageCount'),
  maxAge?: float(name='MaxAge', description='MaxAge'),
  minAge?: float(name='MinAge', description='MinAge'),
  name?: string(name='Name', description='Name'),
  objectId?: string(name='ObjectId', description='ObjectId'),
  objectType?: string(name='ObjectType', description='ObjectType'),
  ownerId?: string(name='OwnerId', description='OwnerId'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
  version?: string(name='Version', description='Version'),
}

model File {
  accessControlAllowOrigin?: string(name='AccessControlAllowOrigin', description='AccessControlAllowOrigin'),
  accessControlRequestMethod?: string(name='AccessControlRequestMethod', description='AccessControlRequestMethod'),
  addresses?: [
    Address
  ](name='Addresses', description='Addresses'),
  album?: string(name='Album', description='Album'),
  albumArtist?: string(name='AlbumArtist', description='AlbumArtist'),
  artists?: [ string ](name='Artists', description='Artists'),
  audioBitrate?: float(name='AudioBitrate', description='AudioBitrate'),
  audioCovers?: [
    Image
  ](name='AudioCovers', description='AudioCovers'),
  audioDuration?: float(name='AudioDuration', description='AudioDuration'),
  audioLanguage?: string(name='AudioLanguage', description='AudioLanguage'),
  audioStreams?: [
    AudioStream
  ](name='AudioStreams', description='AudioStreams'),
  audioTakenTime?: string(name='AudioTakenTime', description='AudioTakenTime'),
  cacheControl?: string(name='CacheControl', description='CacheControl'),
  composer?: string(name='Composer', description='Composer'),
  contentDisposition?: string(name='ContentDisposition', description='ContentDisposition'),
  contentEncoding?: string(name='ContentEncoding', description='ContentEncoding'),
  contentLanguage?: string(name='ContentLanguage', description='ContentLanguage'),
  contentMd5?: string(name='ContentMd5', description='ContentMd5'),
  contentType?: string(name='ContentType', description='ContentType'),
  createTime?: string(name='CreateTime', description='CreateTime'),
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions', description='CroppingSuggestions'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  documentContent?: string(name='DocumentContent', description='DocumentContent'),
  documentLanguage?: string(name='DocumentLanguage', description='DocumentLanguage'),
  ETag?: string(name='ETag', description='ETag'),
  EXIF?: string(name='EXIF', description='EXIF'),
  figureCount?: long(name='FigureCount', description='FigureCount'),
  figures?: [
    Figure
  ](name='Figures', description='Figures'),
  fileAccessTime?: string(name='FileAccessTime', description='FileAccessTime'),
  fileCreateTime?: string(name='FileCreateTime', description='FileCreateTime'),
  fileHash?: string(name='FileHash', description='FileHash'),
  fileModifiedTime?: string(name='FileModifiedTime', description='FileModifiedTime'),
  filename?: string(name='Filename', description='Filename'),
  imageHeight?: long(name='ImageHeight', description='ImageHeight'),
  imageScore?: ImageScore(name='ImageScore'),
  imageWidth?: long(name='ImageWidth', description='ImageWidth'),
  labels?: [
    Label
  ](name='Labels', description='Labels'),
  latLong?: string(name='LatLong', description='LatLong'),
  mediaType?: string(name='MediaType', description='MediaType'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents', description='OCRContents'),
  OSSCRC64?: string(name='OSSCRC64', description='OSSCRC64'),
  OSSDeleteMarker?: string(name='OSSDeleteMarker', description='OSSDeleteMarker'),
  OSSExpiration?: string(name='OSSExpiration', description='OSSExpiration'),
  OSSObjectType?: string(name='OSSObjectType', description='OSSObjectType'),
  OSSStorageClass?: string(name='OSSStorageClass', description='OSSStorageClass'),
  OSSTagging?: map[string]any(name='OSSTagging', description='OSSTagging'),
  OSSTaggingCount?: long(name='OSSTaggingCount', description='OSSTaggingCount'),
  OSSURI?: string(name='OSSURI', description='OSSURI'),
  OSSUserMeta?: map[string]any(name='OSSUserMeta', description='OSSUserMeta'),
  OSSVersionId?: string(name='OSSVersionId', description='OSSVersionId'),
  objectACL?: string(name='ObjectACL', description='ObjectACL'),
  objectId?: string(name='ObjectId', description='ObjectId'),
  objectType?: string(name='ObjectType', description='ObjectType'),
  orientation?: string(name='Orientation', description='Orientation'),
  ownerId?: string(name='OwnerId', description='OwnerId'),
  pageCount?: long(name='PageCount', description='PageCount'),
  performer?: string(name='Performer', description='Performer'),
  produceTime?: string(name='ProduceTime', description='ProduceTime'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  serverSideDataEncryption?: string(name='ServerSideDataEncryption', description='ServerSideDataEncryption'),
  serverSideEncryption?: string(name='ServerSideEncryption', description='ServerSideEncryption'),
  serverSideEncryptionCustomerAlgorithm?: string(name='ServerSideEncryptionCustomerAlgorithm', description='ServerSideEncryptionCustomerAlgorithm'),
  serverSideEncryptionKeyId?: string(name='ServerSideEncryptionKeyId', description='ServerSideEncryptionKeyId'),
  size?: long(name='Size', description='Size'),
  subtitles?: [
    SubtitleStream
  ](name='Subtitles', description='Subtitles'),
  timezone?: string(name='Timezone', description='Timezone'),
  title?: string(name='Title', description='Title'),
  travelClusterId?: string(name='TravelClusterId', description='TravelClusterId'),
  URI?: string(name='URI', description='URI'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
  videoBitrate?: long(name='VideoBitrate', description='VideoBitrate'),
  videoDuration?: float(name='VideoDuration', description='VideoDuration'),
  videoHeight?: long(name='VideoHeight', description='VideoHeight'),
  videoStartTime?: float(name='VideoStartTime', description='VideoStartTime'),
  videoStreams?: [
    VideoStream
  ](name='VideoStreams', description='VideoStreams'),
  videoTakenTime?: string(name='VideoTakenTime', description='VideoTakenTime'),
  videoWidth?: long(name='VideoWidth', description='VideoWidth'),
}

model FileForReq {
  contentType?: string(name='ContentType', description='ContentType'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
  figures?: [ 
    {
      figureClusterId?: string(name='FigureClusterId', description='FigureClusterId'),
      figureId?: string(name='FigureId', description='FigureId'),
      figureType?: string(name='FigureType', description='FigureType'),
    }
  ](name='Figures', description='Figures'),
  fileHash?: string(name='FileHash', description='FileHash'),
  mediaType?: string(name='MediaType', description='MediaType'),
  OSSURI?: string(name='OSSURI', description='OSSURI'),
  URI?: string(name='URI', description='URI'),
}

model HeadPose {
  pitch?: float(name='Pitch', description='Pitch'),
  roll?: float(name='Roll', description='Roll'),
  yaw?: float(name='Yaw', description='Yaw'),
}

model Image {
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions', description='CroppingSuggestions'),
  EXIF?: string(name='EXIF', description='EXIF'),
  imageHeight?: long(name='ImageHeight', description='ImageHeight'),
  imageScore?: ImageScore(name='ImageScore'),
  imageWidth?: long(name='ImageWidth', description='ImageWidth'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents', description='OCRContents'),
}

model ImageScore {
  overallQualityScore?: float(name='OverallQualityScore', description='OverallQualityScore'),
}

model KeyValuePair {
  key?: string(name='Key', description='键'),
  value?: string(name='Value', description='值'),
}

model Label {
  centricScore?: float(name='CentricScore', description='CentricScore'),
  labelConfidence?: float(name='LabelConfidence', description='LabelConfidence'),
  labelLevel?: long(name='LabelLevel', description='LabelLevel'),
  labelName?: string(name='LabelName', description='LabelName'),
  language?: string(name='Language', description='Language'),
  parentLabelName?: string(name='ParentLabelName', description='ParentLabelName'),
}

model OCRContents {
  boundary?: Boundary(name='Boundary', description='Boundary'),
  confidence?: float(name='Confidence', description='Confidence'),
  contents?: string(name='Contents', description='Contents'),
  language?: string(name='Language', description='Language'),
}

model Project {
  createTime?: string(name='CreateTime', description='创建时间'),
  datasetCount?: long(name='DatasetCount', description='项目当前媒体集数'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='项目最多绑定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='项目最多实体数'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='项目最多文件数'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='项目最多关系数'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='项目最大文件总大小'),
  description?: string(name='Description', description='描述'),
  engineConcurrency?: long(name='EngineConcurrency', description='项目最大并发数'),
  fileCount?: long(name='FileCount', description='项目当前文件数'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', description='项目最多媒体集数量'),
  projectName?: string(name='ProjectName', description='项目名称'),
  projectQueriesPerSecond?: long(name='ProjectQueriesPerSecond', description='项目QPS'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  totalFileSize?: long(name='TotalFileSize', description='项目当前文件总大小'),
  updateTime?: string(name='UpdateTime', description='更新时间'),
}

model Row {
  customLabels?: [
    KeyValuePair
  ](name='CustomLabels', description='CustomLabels'),
  URI?: string(name='URI', description='URI'),
}

model SimpleQuery {
  field?: string(name='Field', description='需要查询的字段名'),
  operation?: string(name='Operation', description='运算符'),
  subQueries?: [
    SimpleQuery
  ](name='SubQueries', description='由 SimpleQuery 结构体组成的子查询数组'),
  value?: string(name='Value', description='需要查询的字段值'),
}

model SubtitleStream {
  content?: string(name='Content', description='Content'),
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
}

model TaskInfo {
  code?: string(name='Code', description='错误码'),
  endTime?: string(name='EndTime', description='任务结束时间'),
  message?: string(name='Message', description='错误消息'),
  startTime?: string(name='StartTime', description='任务开始时间'),
  status?: string(name='Status', description='任务状态'),
  taskId?: string(name='TaskId', description='任务唯一ID'),
  taskType?: string(name='TaskType', description='任务类型'),
  userData?: string(name='UserData', description='用户自定义信息'),
}

model VideoStream {
  averageFrameRate?: float(name='AverageFrameRate', description='AverageFrameRate'),
  bitrate?: long(name='Bitrate', description='Bitrate'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  codecTimeBase?: string(name='CodecTimeBase', description='CodecTimeBase'),
  displayAspectRatio?: string(name='DisplayAspectRatio', description='DisplayAspectRatio'),
  duration?: float(name='Duration', description='Duration'),
  frameCount?: long(name='FrameCount', description='FrameCount'),
  frameRate?: float(name='FrameRate', description='FrameRate'),
  hasBFrames?: string(name='HasBFrames', description='HasBFrames'),
  height?: long(name='Height', description='Height'),
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  level?: long(name='Level', description='Level'),
  pixelFormat?: string(name='PixelFormat', description='PixelFormat'),
  profile?: string(name='Profile', description='Profile'),
  sampleAspectRatio?: string(name='SampleAspectRatio', description='SampleAspectRatio'),
  startTime?: float(name='StartTime', description='StartTime'),
  timeBase?: string(name='TimeBase', description='TimeBase'),
  width?: long(name='Width', description='Width'),
}

model WebofficePermission {
  copy?: boolean(name='Copy', description='拷贝'),
  export?: boolean(name='Export', description='导出'),
  history?: boolean(name='History', description='查看历史版本'),
  print?: boolean(name='Print', description='打印'),
  readonly?: boolean(name='Readonly', description='只读模式'),
  rename?: boolean(name='Rename', description='重命名'),
}

model WebofficeUser {
  avatar?: string(name='Avatar', description='头像'),
  id?: string(name='Id', description='Id'),
  name?: string(name='Name', description='名字'),
}

model WebofficeWatermark {
  fillStyle?: string(name='FillStyle', description='字体颜色'),
  font?: string(name='Font', description='字体样式'),
  horizontal?: long(name='Horizontal', description='水平间距'),
  rotate?: float(name='Rotate', description='旋转角度'),
  type?: long(name='Type', description='水印类型，目前仅支持文字水印，0: 无水印；1: 文字水印'),
  value?: string(name='Value', description='水印文字'),
  vertical?: long(name='Vertical', description='垂直间距'),
}

model BatchDeleteFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URIs?: [ string ](name='URIs'),
}

model BatchDeleteFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URIsShrink?: string(name='URIs'),
}

model BatchDeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchDeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteFileMetaResponseBody(name='body'),
}

async function batchDeleteFileMetaWithOptions(tmpReq: BatchDeleteFileMetaRequest, runtime: Util.RuntimeOptions): BatchDeleteFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.URIs)) {
    request.URIsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.URIs, 'URIs', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URIs'] = request.URIsShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteFileMeta(request: BatchDeleteFileMetaRequest): BatchDeleteFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteFileMetaWithOptions(request, runtime);
}

model BatchGetFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URIs?: [ string ](name='URIs'),
}

model BatchGetFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URIsShrink?: string(name='URIs'),
}

model BatchGetFileMetaResponseBody = {
  files?: [
    File
  ](name='Files'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchGetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetFileMetaResponseBody(name='body'),
}

async function batchGetFileMetaWithOptions(tmpReq: BatchGetFileMetaRequest, runtime: Util.RuntimeOptions): BatchGetFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchGetFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.URIs)) {
    request.URIsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.URIs, 'URIs', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URIs'] = request.URIsShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetFileMeta(request: BatchGetFileMetaRequest): BatchGetFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetFileMetaWithOptions(request, runtime);
}

model BatchIndexFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  files?: [
    FileForReq
  ](name='Files'),
  notifyEndpoint?: string(name='NotifyEndpoint'),
  notifyTopicName?: string(name='NotifyTopicName'),
  projectName?: string(name='ProjectName'),
}

model BatchIndexFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName'),
  filesShrink?: string(name='Files'),
  notifyEndpoint?: string(name='NotifyEndpoint'),
  notifyTopicName?: string(name='NotifyTopicName'),
  projectName?: string(name='ProjectName'),
}

model BatchIndexFileMetaResponseBody = {
  eventId?: string(name='EventId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchIndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchIndexFileMetaResponseBody(name='body'),
}

async function batchIndexFileMetaWithOptions(tmpReq: BatchIndexFileMetaRequest, runtime: Util.RuntimeOptions): BatchIndexFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchIndexFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['Files'] = request.filesShrink;
  query['NotifyEndpoint'] = request.notifyEndpoint;
  query['NotifyTopicName'] = request.notifyTopicName;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchIndexFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchIndexFileMeta(request: BatchIndexFileMetaRequest): BatchIndexFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchIndexFileMetaWithOptions(request, runtime);
}

model BatchUpdateFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  files?: [
    FileForReq
  ](name='Files'),
  projectName?: string(name='ProjectName'),
}

model BatchUpdateFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName'),
  filesShrink?: string(name='Files'),
  projectName?: string(name='ProjectName'),
}

model BatchUpdateFileMetaResponseBody = {
  files?: [ 
    {
      message?: string(name='Message'),
      success?: boolean(name='Success'),
      URI?: string(name='URI'),
    }
  ](name='Files'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchUpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateFileMetaResponseBody(name='body'),
}

async function batchUpdateFileMetaWithOptions(tmpReq: BatchUpdateFileMetaRequest, runtime: Util.RuntimeOptions): BatchUpdateFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['Files'] = request.filesShrink;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUpdateFileMeta(request: BatchUpdateFileMetaRequest): BatchUpdateFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateFileMetaWithOptions(request, runtime);
}

model ClusterFiguresRequest {
  customMessage?: string(name='CustomMessage'),
  datasetName?: string(name='DatasetName'),
  figureType?: string(name='FigureType'),
  notifyTopicEndpoint?: string(name='NotifyTopicEndpoint'),
  notifyTopicName?: string(name='NotifyTopicName'),
  projectName?: string(name='ProjectName'),
}

model ClusterFiguresResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  taskId?: string(name='TaskId'),
}

model ClusterFiguresResponse = {
  headers: map[string]string(name='headers'),
  body: ClusterFiguresResponseBody(name='body'),
}

async function clusterFiguresWithOptions(request: ClusterFiguresRequest, runtime: Util.RuntimeOptions): ClusterFiguresResponse {
  Util.validateModel(request);
  var query = {};
  query['CustomMessage'] = request.customMessage;
  query['DatasetName'] = request.datasetName;
  query['FigureType'] = request.figureType;
  query['NotifyTopicEndpoint'] = request.notifyTopicEndpoint;
  query['NotifyTopicName'] = request.notifyTopicName;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClusterFigures',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clusterFigures(request: ClusterFiguresRequest): ClusterFiguresResponse {
  var runtime = new Util.RuntimeOptions{};
  return clusterFiguresWithOptions(request, runtime);
}

model CreateBindingRequest {
  datasetName?: string(name='DatasetName', description='DatasetName'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  URI?: string(name='URI', description='URI'),
}

model CreateBindingResponseBody = {
  binding?: Binding(name='Binding'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateBindingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBindingResponseBody(name='body'),
}

async function createBindingWithOptions(request: CreateBindingRequest, runtime: Util.RuntimeOptions): CreateBindingResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBinding(request: CreateBindingRequest): CreateBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBindingWithOptions(request, runtime);
}

model CreateDatasetRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最多帮定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小'),
  datasetName?: string(name='DatasetName', description='数据集名称'),
  description?: string(name='Description', description='对数据集的描述'),
  projectName?: string(name='ProjectName', description='项目名称'),
  templateId?: string(name='TemplateId', description='模板Id'),
}

model CreateDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', description='请求 ID'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDatasetWithOptions(request: CreateDatasetRequest, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  query['DatasetName'] = request.datasetName;
  query['Description'] = request.description;
  query['ProjectName'] = request.projectName;
  query['TemplateId'] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetWithOptions(request, runtime);
}

model CreateDetectVideoLabelsTaskRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  sourceURI?: string(name='SourceURI', description='SourceURI'),
  userData?: string(name='UserData', description='UserData'),
}

model CreateDetectVideoLabelsTaskResponseBody = {
  code?: string(name='Code', description='任务错误码'),
  endTime?: string(name='EndTime', description='任务结束时间'),
  eventId?: string(name='EventId', description='事件Id'),
  message?: string(name='Message', description='任务错误消息'),
  projectName?: string(name='ProjectName', description='项目名称'),
  requestId?: string(name='RequestId', description='请求唯一Id'),
  startTime?: string(name='StartTime', description='任务开始时间'),
  status?: string(name='Status', description='任务运行状态'),
  taskId?: string(name='TaskId', description='任务唯一ID'),
  taskType?: string(name='TaskType', description='任务类型'),
  userData?: string(name='UserData', description='用户自定义信息'),
}

model CreateDetectVideoLabelsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDetectVideoLabelsTaskResponseBody(name='body'),
}

async function createDetectVideoLabelsTaskWithOptions(request: CreateDetectVideoLabelsTaskRequest, runtime: Util.RuntimeOptions): CreateDetectVideoLabelsTaskResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  query['SourceURI'] = request.sourceURI;
  query['UserData'] = request.userData;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDetectVideoLabelsTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDetectVideoLabelsTask(request: CreateDetectVideoLabelsTaskRequest): CreateDetectVideoLabelsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDetectVideoLabelsTaskWithOptions(request, runtime);
}

model CreateProjectRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
  description?: string(name='Description'),
  engineConcurrency?: long(name='EngineConcurrency'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount'),
  projectName?: string(name='ProjectName', description='项目名称'),
  projectQueriesPerSecond?: long(name='ProjectQueriesPerSecond'),
  serviceRole?: string(name='ServiceRole'),
  templateId?: string(name='TemplateId'),
}

model CreateProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  query['Description'] = request.description;
  query['EngineConcurrency'] = request.engineConcurrency;
  query['ProjectMaxDatasetCount'] = request.projectMaxDatasetCount;
  query['ProjectName'] = request.projectName;
  query['ProjectQueriesPerSecond'] = request.projectQueriesPerSecond;
  query['ServiceRole'] = request.serviceRole;
  query['TemplateId'] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model DeleteBindingRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName', description='A short description of struct'),
  URI?: string(name='URI'),
}

model DeleteBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteBindingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBindingResponseBody(name='body'),
}

async function deleteBindingWithOptions(request: DeleteBindingRequest, runtime: Util.RuntimeOptions): DeleteBindingResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBindingWithOptions(request, runtime);
}

model DeleteDatasetRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDatasetWithOptions(request: DeleteDatasetRequest, runtime: Util.RuntimeOptions): DeleteDatasetResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatasetWithOptions(request, runtime);
}

model DeleteFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URI?: string(name='URI'),
}

model DeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileMetaResponseBody(name='body'),
}

async function deleteFileMetaWithOptions(request: DeleteFileMetaRequest, runtime: Util.RuntimeOptions): DeleteFileMetaResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFileMeta(request: DeleteFileMetaRequest): DeleteFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileMetaWithOptions(request, runtime);
}

model DeleteProjectRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model DetectImageLabelsRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  sourceURI?: string(name='SourceURI', description='SourceURI'),
  threshold?: float(name='Threshold', description='Threshold'),
}

model DetectImageLabelsResponseBody = {
  labels?: [
    Label
  ](name='Labels', description='内容标签列表'),
  requestId?: string(name='RequestId', description='请求唯一ID'),
}

model DetectImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: DetectImageLabelsResponseBody(name='body'),
}

async function detectImageLabelsWithOptions(request: DetectImageLabelsRequest, runtime: Util.RuntimeOptions): DetectImageLabelsResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  query['SourceURI'] = request.sourceURI;
  query['Threshold'] = request.threshold;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageLabels',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageLabels(request: DetectImageLabelsRequest): DetectImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageLabelsWithOptions(request, runtime);
}

model FuzzyQueryRequest {
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  projectName?: string(name='ProjectName', description='项目名称'),
  query?: string(name='Query', description='用于搜索的字符串'),
}

model FuzzyQueryResponseBody = {
  files?: [
    File
  ](name='Files'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id'),
}

model FuzzyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FuzzyQueryResponseBody(name='body'),
}

async function fuzzyQueryWithOptions(request: FuzzyQueryRequest, runtime: Util.RuntimeOptions): FuzzyQueryResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['ProjectName'] = request.projectName;
  query['Query'] = request.query;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FuzzyQuery',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fuzzyQuery(request: FuzzyQueryRequest): FuzzyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return fuzzyQueryWithOptions(request, runtime);
}

model GetBindingRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URI?: string(name='URI'),
}

model GetBindingResponseBody = {
  binding?: Binding(name='Binding'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetBindingResponse = {
  headers: map[string]string(name='headers'),
  body: GetBindingResponseBody(name='body'),
}

async function getBindingWithOptions(request: GetBindingRequest, runtime: Util.RuntimeOptions): GetBindingResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBinding(request: GetBindingRequest): GetBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBindingWithOptions(request, runtime);
}

model GetDatasetRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  withStatistics?: boolean(name='WithStatistics'),
}

model GetDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId'),
}

model GetDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatasetResponseBody(name='body'),
}

async function getDatasetWithOptions(request: GetDatasetRequest, runtime: Util.RuntimeOptions): GetDatasetResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['WithStatistics'] = request.withStatistics;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatasetWithOptions(request, runtime);
}

model GetDetectVideoLabelsResultRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  taskId?: string(name='TaskId', description='TaskId'),
  taskType?: string(name='TaskType', description='TaskType'),
}

model GetDetectVideoLabelsResultResponseBody = {
  code?: string(name='Code', description='任务错误码'),
  endTime?: string(name='EndTime', description='任务结束时间'),
  eventId?: string(name='EventId', description='事件Id'),
  labels?: [
    Label
  ](name='Labels', description='标签列表'),
  message?: string(name='Message', description='任务错误消息'),
  projectName?: string(name='ProjectName', description='项目名称'),
  requestId?: string(name='RequestId', description='请求唯一Id'),
  startTime?: string(name='StartTime', description='任务开始时间'),
  status?: string(name='Status', description='任务运行状态'),
  taskId?: string(name='TaskId', description='任务唯一ID'),
  taskType?: string(name='TaskType', description='任务类型'),
  userData?: string(name='UserData', description='用户自定义信息'),
}

model GetDetectVideoLabelsResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectVideoLabelsResultResponseBody(name='body'),
}

async function getDetectVideoLabelsResultWithOptions(request: GetDetectVideoLabelsResultRequest, runtime: Util.RuntimeOptions): GetDetectVideoLabelsResultResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  query['TaskId'] = request.taskId;
  query['TaskType'] = request.taskType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDetectVideoLabelsResult',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDetectVideoLabelsResult(request: GetDetectVideoLabelsResultRequest): GetDetectVideoLabelsResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectVideoLabelsResultWithOptions(request, runtime);
}

model GetFigureClusterRequest {
  datasetName?: string(name='DatasetName'),
  figureClusterId?: string(name='FigureClusterId'),
  projectName?: string(name='ProjectName'),
}

model GetFigureClusterResponseBody = {
  figureCluster?: FigureCluster(name='FigureCluster'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  body: GetFigureClusterResponseBody(name='body'),
}

async function getFigureClusterWithOptions(request: GetFigureClusterRequest, runtime: Util.RuntimeOptions): GetFigureClusterResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['FigureClusterId'] = request.figureClusterId;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFigureCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFigureCluster(request: GetFigureClusterRequest): GetFigureClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFigureClusterWithOptions(request, runtime);
}

model GetFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URI?: string(name='URI'),
}

model GetFileMetaResponseBody = {
  files?: [
    File
  ](name='Files', description='File list.'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileMetaResponseBody(name='body'),
}

async function getFileMetaWithOptions(request: GetFileMetaRequest, runtime: Util.RuntimeOptions): GetFileMetaResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileMeta(request: GetFileMetaRequest): GetFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileMetaWithOptions(request, runtime);
}

model GetFileSignedURIRequest {
  projectName?: string(name='ProjectName'),
  URI?: string(name='URI'),
}

model GetFileSignedURIResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  URI?: string(name='URI', description='签名地址'),
}

model GetFileSignedURIResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileSignedURIResponseBody(name='body'),
}

async function getFileSignedURIWithOptions(request: GetFileSignedURIRequest, runtime: Util.RuntimeOptions): GetFileSignedURIResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileSignedURI',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileSignedURI(request: GetFileSignedURIRequest): GetFileSignedURIResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileSignedURIWithOptions(request, runtime);
}

model GetProjectRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  withStatistics?: boolean(name='WithStatistics', description='是否获取详细信息'),
}

model GetProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', description='RequestId'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  query['WithStatistics'] = request.withStatistics;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetTaskRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  taskId?: string(name='TaskId', description='TaskId'),
  taskType?: string(name='TaskType', description='TaskType'),
}

model GetTaskResponseBody = {
  code?: string(name='Code', description='任务错误码'),
  endTime?: string(name='EndTime', description='任务结束时间'),
  eventId?: string(name='EventId', description='事件Id'),
  message?: string(name='Message', description='任务错误消息'),
  projectName?: string(name='ProjectName', description='项目名称'),
  requestId?: string(name='RequestId', description='请求唯一Id'),
  startTime?: string(name='StartTime', description='任务开始时间'),
  status?: string(name='Status', description='任务运行状态'),
  taskId?: string(name='TaskId', description='任务唯一ID'),
  taskType?: string(name='TaskType', description='任务类型'),
  userData?: string(name='UserData', description='用户自定义信息'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResponseBody(name='body'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var query = {};
  query['ProjectName'] = request.projectName;
  query['TaskId'] = request.taskId;
  query['TaskType'] = request.taskType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetWebofficeURLRequest {
  assumeRoleChain?: AssumeRoleChain(name='AssumeRoleChain', description='链式授权'),
  externalUploaded?: boolean(name='ExternalUploaded', description='是否支持外部上传'),
  filename?: string(name='Filename', description='文件名，必须带文件名后缀，默认是 SourceUri 的最后一级'),
  hidecmb?: boolean(name='Hidecmb', description='隐藏工具栏，预览模式下使用'),
  notifyEndpoint?: string(name='NotifyEndpoint', description='mns 消息通知地址'),
  notifyTopicName?: string(name='NotifyTopicName', description='mns 消息通知 topic'),
  password?: string(name='Password', description='文件密码'),
  permission?: WebofficePermission(name='Permission', description='权限'),
  previewPages?: long(name='PreviewPages', description='预览前几页'),
  projectName?: string(name='ProjectName', description='项目名称'),
  referer?: string(name='Referer', description='oss 防盗链 referer'),
  sourceURI?: string(name='SourceURI', description='预览编辑地址'),
  user?: WebofficeUser(name='User', description='用户'),
  userData?: string(name='UserData', description='用户自定义数据，在消息通知中返回'),
  watermark?: WebofficeWatermark(name='Watermark', description='水印'),
}

model GetWebofficeURLShrinkRequest {
  assumeRoleChainShrink?: string(name='AssumeRoleChain', description='链式授权'),
  externalUploaded?: boolean(name='ExternalUploaded', description='是否支持外部上传'),
  filename?: string(name='Filename', description='文件名，必须带文件名后缀，默认是 SourceUri 的最后一级'),
  hidecmb?: boolean(name='Hidecmb', description='隐藏工具栏，预览模式下使用'),
  notifyEndpoint?: string(name='NotifyEndpoint', description='mns 消息通知地址'),
  notifyTopicName?: string(name='NotifyTopicName', description='mns 消息通知 topic'),
  password?: string(name='Password', description='文件密码'),
  permissionShrink?: string(name='Permission', description='权限'),
  previewPages?: long(name='PreviewPages', description='预览前几页'),
  projectName?: string(name='ProjectName', description='项目名称'),
  referer?: string(name='Referer', description='oss 防盗链 referer'),
  sourceURI?: string(name='SourceURI', description='预览编辑地址'),
  userShrink?: string(name='User', description='用户'),
  userData?: string(name='UserData', description='用户自定义数据，在消息通知中返回'),
  watermarkShrink?: string(name='Watermark', description='水印'),
}

model GetWebofficeURLResponseBody = {
  accessToken?: string(name='AccessToken', description='access token'),
  accessTokenExpiredTime?: string(name='AccessTokenExpiredTime', description='access token 过期时间'),
  refreshToken?: string(name='RefreshToken', description='refresh token'),
  refreshTokenExpiredTime?: string(name='RefreshTokenExpiredTime', description='refresh token 过期时间'),
  requestId?: string(name='RequestId', description='请求 id'),
  webofficeURL?: string(name='WebofficeURL', description='预览编辑地址'),
}

model GetWebofficeURLResponse = {
  headers: map[string]string(name='headers'),
  body: GetWebofficeURLResponseBody(name='body'),
}

async function getWebofficeURLWithOptions(tmpReq: GetWebofficeURLRequest, runtime: Util.RuntimeOptions): GetWebofficeURLResponse {
  Util.validateModel(tmpReq);
  var request = new GetWebofficeURLShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.assumeRoleChain)) {
    request.assumeRoleChainShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.assumeRoleChain, 'AssumeRoleChain', 'json');
  }
  if (!Util.isUnset(tmpReq.permission)) {
    request.permissionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.permission, 'Permission', 'json');
  }
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  if (!Util.isUnset(tmpReq.watermark)) {
    request.watermarkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.watermark, 'Watermark', 'json');
  }
  var query = {};
  query['AssumeRoleChain'] = request.assumeRoleChainShrink;
  query['ExternalUploaded'] = request.externalUploaded;
  query['Filename'] = request.filename;
  query['Hidecmb'] = request.hidecmb;
  query['NotifyEndpoint'] = request.notifyEndpoint;
  query['NotifyTopicName'] = request.notifyTopicName;
  query['Password'] = request.password;
  query['Permission'] = request.permissionShrink;
  query['PreviewPages'] = request.previewPages;
  query['ProjectName'] = request.projectName;
  query['Referer'] = request.referer;
  query['SourceURI'] = request.sourceURI;
  query['User'] = request.userShrink;
  query['UserData'] = request.userData;
  query['Watermark'] = request.watermarkShrink;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWebofficeURL',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWebofficeURL(request: GetWebofficeURLRequest): GetWebofficeURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebofficeURLWithOptions(request, runtime);
}

model IndexFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  file?: FileForReq(name='File'),
  notifyEndpoint?: string(name='NotifyEndpoint'),
  notifyTopicName?: string(name='NotifyTopicName'),
  projectName?: string(name='ProjectName'),
}

model IndexFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName'),
  fileShrink?: string(name='File'),
  notifyEndpoint?: string(name='NotifyEndpoint'),
  notifyTopicName?: string(name='NotifyTopicName'),
  projectName?: string(name='ProjectName'),
}

model IndexFileMetaResponseBody = {
  eventId?: string(name='EventId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model IndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: IndexFileMetaResponseBody(name='body'),
}

async function indexFileMetaWithOptions(tmpReq: IndexFileMetaRequest, runtime: Util.RuntimeOptions): IndexFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new IndexFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.file)) {
    request.fileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.file, 'File', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['File'] = request.fileShrink;
  query['NotifyEndpoint'] = request.notifyEndpoint;
  query['NotifyTopicName'] = request.notifyTopicName;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IndexFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function indexFileMeta(request: IndexFileMetaRequest): IndexFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return indexFileMetaWithOptions(request, runtime);
}

model ListBindingsRequest {
  datasetName?: string(name='DatasetName'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  projectName?: string(name='ProjectName', description='A short description of struct'),
}

model ListBindingsResponseBody = {
  bindings?: [
    Binding
  ](name='Bindings'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListBindingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBindingsResponseBody(name='body'),
}

async function listBindingsWithOptions(request: ListBindingsRequest, runtime: Util.RuntimeOptions): ListBindingsResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBindings',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBindings(request: ListBindingsRequest): ListBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindingsWithOptions(request, runtime);
}

model ListDatasetsRequest {
  maxResults?: long(name='MaxResults', description='返回最大个数'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token'),
  prefix?: string(name='Prefix'),
  projectName?: string(name='ProjectName', description='项目名称'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets', description='Datasets'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListDatasetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatasetsResponseBody(name='body'),
}

async function listDatasetsWithOptions(request: ListDatasetsRequest, runtime: Util.RuntimeOptions): ListDatasetsResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['Prefix'] = request.prefix;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatasets',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatasetsWithOptions(request, runtime);
}

model ListFigureClustersRequest {
  datasetName?: string(name='DatasetName'),
  labels?: string(name='Labels'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  order?: string(name='Order'),
  projectName?: string(name='ProjectName'),
  sort?: string(name='Sort'),
}

model ListFigureClustersResponseBody = {
  figureClusters?: [
    FigureCluster
  ](name='FigureClusters'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListFigureClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListFigureClustersResponseBody(name='body'),
}

async function listFigureClustersWithOptions(request: ListFigureClustersRequest, runtime: Util.RuntimeOptions): ListFigureClustersResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['Labels'] = request.labels;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['Order'] = request.order;
  query['ProjectName'] = request.projectName;
  query['Sort'] = request.sort;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFigureClusters',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFigureClusters(request: ListFigureClustersRequest): ListFigureClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFigureClustersWithOptions(request, runtime);
}

model ListProjectsRequest {
  maxResults?: long(name='MaxResults', description='返回结果的最大个数'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token'),
  prefix?: string(name='Prefix', description='列出包含某前缀的project'),
}

model ListProjectsResponseBody = {
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token'),
  projects?: [
    Project
  ](name='Projects', description='由ProjectItem组成的数组'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(request: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['Prefix'] = request.prefix;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListTasksRequest {
  maxResults?: long(name='MaxResults', description='MaxResults'),
  nextToken?: string(name='NextToken', description='NextToken'),
  projectName?: string(name='ProjectName', description='项目名称'),
  taskType?: string(name='TaskType', description='TaskType'),
}

model ListTasksResponseBody = {
  maxResults?: string(name='MaxResults', description='最大结果数量'),
  nextToken?: string(name='NextToken', description='翻页标记'),
  projectName?: string(name='ProjectName', description='项目名称'),
  requestId?: string(name='RequestId', description='请求唯一Id'),
  tasks?: [
    TaskInfo
  ](name='Tasks', description='任务信息'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasksWithOptions(request: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['ProjectName'] = request.projectName;
  query['TaskType'] = request.taskType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model MergeFigureClustersRequest {
  clusterIdFrom?: string(name='ClusterIdFrom'),
  clusterIdTo?: string(name='ClusterIdTo'),
  customMessage?: string(name='CustomMessage'),
  datasetName?: string(name='DatasetName'),
  figureType?: string(name='FigureType'),
  notifyTopicEndpoint?: string(name='NotifyTopicEndpoint'),
  notifyTopicName?: string(name='NotifyTopicName'),
  projectName?: string(name='ProjectName'),
}

model MergeFigureClustersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  taskId?: string(name='TaskId'),
}

model MergeFigureClustersResponse = {
  headers: map[string]string(name='headers'),
  body: MergeFigureClustersResponseBody(name='body'),
}

async function mergeFigureClustersWithOptions(request: MergeFigureClustersRequest, runtime: Util.RuntimeOptions): MergeFigureClustersResponse {
  Util.validateModel(request);
  var query = {};
  query['ClusterIdFrom'] = request.clusterIdFrom;
  query['ClusterIdTo'] = request.clusterIdTo;
  query['CustomMessage'] = request.customMessage;
  query['DatasetName'] = request.datasetName;
  query['FigureType'] = request.figureType;
  query['NotifyTopicEndpoint'] = request.notifyTopicEndpoint;
  query['NotifyTopicName'] = request.notifyTopicName;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MergeFigureClusters',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function mergeFigureClusters(request: MergeFigureClustersRequest): MergeFigureClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return mergeFigureClustersWithOptions(request, runtime);
}

model RefreshWebofficeTokenRequest {
  accessToken?: string(name='AccessToken', description='access token'),
  assumeRoleChain?: AssumeRoleChain(name='AssumeRoleChain', description='链式授权'),
  projectName?: string(name='ProjectName', description='项目名称'),
  refreshToken?: string(name='RefreshToken', description='refresh token'),
}

model RefreshWebofficeTokenShrinkRequest {
  accessToken?: string(name='AccessToken', description='access token'),
  assumeRoleChainShrink?: string(name='AssumeRoleChain', description='链式授权'),
  projectName?: string(name='ProjectName', description='项目名称'),
  refreshToken?: string(name='RefreshToken', description='refresh token'),
}

model RefreshWebofficeTokenResponseBody = {
  accessToken?: string(name='AccessToken', description='access token'),
  accessTokenExpiredTime?: string(name='AccessTokenExpiredTime', description='access token 过期时间'),
  refreshToken?: string(name='RefreshToken', description='refresh token'),
  refreshTokenExpiredTime?: string(name='RefreshTokenExpiredTime', description='refresh token 过期时间'),
  requestId?: string(name='RequestId', description='请求 Id'),
}

model RefreshWebofficeTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshWebofficeTokenResponseBody(name='body'),
}

async function refreshWebofficeTokenWithOptions(tmpReq: RefreshWebofficeTokenRequest, runtime: Util.RuntimeOptions): RefreshWebofficeTokenResponse {
  Util.validateModel(tmpReq);
  var request = new RefreshWebofficeTokenShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.assumeRoleChain)) {
    request.assumeRoleChainShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.assumeRoleChain, 'AssumeRoleChain', 'json');
  }
  var query = {};
  query['AccessToken'] = request.accessToken;
  query['AssumeRoleChain'] = request.assumeRoleChainShrink;
  query['ProjectName'] = request.projectName;
  query['RefreshToken'] = request.refreshToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshWebofficeToken',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshWebofficeToken(request: RefreshWebofficeTokenRequest): RefreshWebofficeTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshWebofficeTokenWithOptions(request, runtime);
}

model ResumeBindingRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  URI?: string(name='URI'),
}

model ResumeBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ResumeBindingResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeBindingResponseBody(name='body'),
}

async function resumeBindingWithOptions(request: ResumeBindingRequest, runtime: Util.RuntimeOptions): ResumeBindingResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeBinding(request: ResumeBindingRequest): ResumeBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeBindingWithOptions(request, runtime);
}

model SemanticQueryRequest {
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  projectName?: string(name='ProjectName', description='项目名称'),
  query?: string(name='Query', description='需要搜索的内容，使用自然语言描述'),
}

model SemanticQueryResponseBody = {
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段名'),
      groups?: [ 
        {
          count?: long(name='Count', description='分组聚合的计数'),
          value?: string(name='Value', description='分组聚合的值'),
        }
      ](name='Groups', description='分组聚合的结果'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符'),
      value?: float(name='Value', description='聚合的统计结果'),
    }
  ](name='Aggregations', description='聚合字段的字段名'),
  files?: [
    File
  ](name='Files', description='文件列表'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id'),
}

model SemanticQueryResponse = {
  headers: map[string]string(name='headers'),
  body: SemanticQueryResponseBody(name='body'),
}

async function semanticQueryWithOptions(request: SemanticQueryRequest, runtime: Util.RuntimeOptions): SemanticQueryResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['ProjectName'] = request.projectName;
  query['Query'] = request.query;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SemanticQuery',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function semanticQuery(request: SemanticQueryRequest): SemanticQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return semanticQueryWithOptions(request, runtime);
}

model SimpleQueryRequest {
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段的字段名'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符'),
    }
  ](name='Aggregations', description='聚合字段'),
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  order?: string(name='Order', description='排序字段'),
  projectName?: string(name='ProjectName', description='项目名称'),
  query?: SimpleQuery(name='Query'),
  sort?: string(name='Sort', description='排序方式，默认 DESC'),
}

model SimpleQueryShrinkRequest {
  aggregationsShrink?: string(name='Aggregations', description='聚合字段'),
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  order?: string(name='Order', description='排序字段'),
  projectName?: string(name='ProjectName', description='项目名称'),
  queryShrink?: string(name='Query'),
  sort?: string(name='Sort', description='排序方式，默认 DESC'),
}

model SimpleQueryResponseBody = {
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段名'),
      groups?: [ 
        {
          count?: long(name='Count', description='分组聚合的计数'),
          value?: string(name='Value', description='分组聚合的值'),
        }
      ](name='Groups', description='分组聚合的结果'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符'),
      value?: float(name='Value', description='聚合的统计结果'),
    }
  ](name='Aggregations', description='聚合字段的字段名'),
  files?: [
    File
  ](name='Files', description='文件列表'),
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id'),
}

model SimpleQueryResponse = {
  headers: map[string]string(name='headers'),
  body: SimpleQueryResponseBody(name='body'),
}

async function simpleQueryWithOptions(tmpReq: SimpleQueryRequest, runtime: Util.RuntimeOptions): SimpleQueryResponse {
  Util.validateModel(tmpReq);
  var request = new SimpleQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aggregations)) {
    request.aggregationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregations, 'Aggregations', 'json');
  }
  if (!Util.isUnset(tmpReq.query)) {
    request.queryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.query, 'Query', 'json');
  }
  var query = {};
  query['Aggregations'] = request.aggregationsShrink;
  query['DatasetName'] = request.datasetName;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['Order'] = request.order;
  query['ProjectName'] = request.projectName;
  query['Query'] = request.queryShrink;
  query['Sort'] = request.sort;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SimpleQuery',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function simpleQuery(request: SimpleQueryRequest): SimpleQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return simpleQueryWithOptions(request, runtime);
}

model StopBindingRequest {
  datasetName?: string(name='DatasetName'),
  projectName?: string(name='ProjectName'),
  reason?: string(name='Reason'),
  URI?: string(name='URI'),
}

model StopBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopBindingResponse = {
  headers: map[string]string(name='headers'),
  body: StopBindingResponseBody(name='body'),
}

async function stopBindingWithOptions(request: StopBindingRequest, runtime: Util.RuntimeOptions): StopBindingResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['ProjectName'] = request.projectName;
  query['Reason'] = request.reason;
  query['URI'] = request.URI;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopBinding(request: StopBindingRequest): StopBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopBindingWithOptions(request, runtime);
}

model UpdateDatasetRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最多绑定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小'),
  datasetName?: string(name='DatasetName', description='媒体集名称'),
  description?: string(name='Description', description='描述'),
  projectName?: string(name='ProjectName', description='项目名称'),
  templateId?: string(name='TemplateId', description='模板Id'),
}

model UpdateDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDatasetResponseBody(name='body'),
}

async function updateDatasetWithOptions(request: UpdateDatasetRequest, runtime: Util.RuntimeOptions): UpdateDatasetResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  query['DatasetName'] = request.datasetName;
  query['Description'] = request.description;
  query['ProjectName'] = request.projectName;
  query['TemplateId'] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDatasetWithOptions(request, runtime);
}

model UpdateFigureClusterRequest {
  datasetName?: string(name='DatasetName'),
  figureCluster?: FigureCluster(name='FigureCluster'),
  projectName?: string(name='ProjectName'),
}

model UpdateFigureClusterShrinkRequest {
  datasetName?: string(name='DatasetName'),
  figureClusterShrink?: string(name='FigureCluster'),
  projectName?: string(name='ProjectName'),
}

model UpdateFigureClusterResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFigureClusterResponseBody(name='body'),
}

async function updateFigureClusterWithOptions(tmpReq: UpdateFigureClusterRequest, runtime: Util.RuntimeOptions): UpdateFigureClusterResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFigureClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.figureCluster)) {
    request.figureClusterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.figureCluster, 'FigureCluster', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['FigureCluster'] = request.figureClusterShrink;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFigureCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFigureCluster(request: UpdateFigureClusterRequest): UpdateFigureClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFigureClusterWithOptions(request, runtime);
}

model UpdateFileMetaRequest {
  datasetName?: string(name='DatasetName'),
  file?: FileForReq(name='File'),
  projectName?: string(name='ProjectName'),
}

model UpdateFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName'),
  fileShrink?: string(name='File'),
  projectName?: string(name='ProjectName'),
}

model UpdateFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFileMetaResponseBody(name='body'),
}

async function updateFileMetaWithOptions(tmpReq: UpdateFileMetaRequest, runtime: Util.RuntimeOptions): UpdateFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.file)) {
    request.fileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.file, 'File', 'json');
  }
  var query = {};
  query['DatasetName'] = request.datasetName;
  query['File'] = request.fileShrink;
  query['ProjectName'] = request.projectName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFileMeta(request: UpdateFileMetaRequest): UpdateFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileMetaWithOptions(request, runtime);
}

model UpdateProjectRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', description='媒体集最多绑定数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='媒体集最多实体数'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='媒体集最多文件数'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='媒体集最多关系数'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='媒体集最大文件总大小'),
  description?: string(name='Description', description='项目描述'),
  engineConcurrency?: long(name='EngineConcurrency', description='项目并发数'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', description='项目最多媒体集数'),
  projectName?: string(name='ProjectName', description='项目名称'),
  projectQueriesPerSecond?: long(name='ProjectQueriesPerSecond', description='项目QPS'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  templateId?: string(name='TemplateId', description='模板Id'),
}

model UpdateProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProjectWithOptions(request: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var query = {};
  query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  query['Description'] = request.description;
  query['EngineConcurrency'] = request.engineConcurrency;
  query['ProjectMaxDatasetCount'] = request.projectMaxDatasetCount;
  query['ProjectName'] = request.projectName;
  query['ProjectQueriesPerSecond'] = request.projectQueriesPerSecond;
  query['ServiceRole'] = request.serviceRole;
  query['TemplateId'] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

