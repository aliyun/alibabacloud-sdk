/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-beijing-gov-1 = 'imm-vpc.cn-beijing-gov-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('imm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CroppingSuggestion {
  aspectRatio?: string(name='AspectRatio', description='AspectRatio'),
  confidence?: float(name='Confidence', description='Confidence'),
  boundary?: Boundary(name='Boundary', description='Boundary'),
}

model Address {
  language?: string(name='Language', description='Language'),
  addressLine?: string(name='AddressLine', description='AddressLine'),
  country?: string(name='Country', description='Country'),
  province?: string(name='Province', description='Province'),
  city?: string(name='City', description='City'),
  district?: string(name='District', description='District'),
  township?: string(name='Township', description='Township'),
}

model SubtitleStream {
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  content?: string(name='Content', description='Content'),
}

model HeadPose {
  pitch?: float(name='Pitch', description='Pitch'),
  roll?: float(name='Roll', description='Roll'),
  yaw?: float(name='Yaw', description='Yaw'),
}

model Label {
  language?: string(name='Language', description='Language'),
  labelName?: string(name='LabelName', description='LabelName'),
  labelLevel?: long(name='LabelLevel', description='LabelLevel'),
  labelConfidence?: float(name='LabelConfidence', description='LabelConfidence'),
}

model VideoStream {
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  profile?: string(name='Profile', description='Profile'),
  codecTimeBase?: string(name='CodecTimeBase', description='CodecTimeBase'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  width?: long(name='Width', description='Width'),
  height?: long(name='Height', description='Height'),
  hasBFrames?: string(name='HasBFrames', description='HasBFrames'),
  sampleAspectRatio?: string(name='SampleAspectRatio', description='SampleAspectRatio'),
  displayAspectRatio?: string(name='DisplayAspectRatio', description='DisplayAspectRatio'),
  pixelFormat?: string(name='PixelFormat', description='PixelFormat'),
  level?: long(name='Level', description='Level'),
  frameRate?: float(name='FrameRate', description='FrameRate'),
  averageFrameRate?: float(name='AverageFrameRate', description='AverageFrameRate'),
  timeBase?: string(name='TimeBase', description='TimeBase'),
  startTime?: float(name='StartTime', description='StartTime'),
  duration?: float(name='Duration', description='Duration'),
  bitrate?: long(name='Bitrate', description='Bitrate'),
  frameCount?: long(name='FrameCount', description='FrameCount'),
}

model Image {
  imageWidth?: long(name='ImageWidth', description='ImageWidth'),
  imageHeight?: long(name='ImageHeight', description='ImageHeight'),
  EXIF?: string(name='EXIF', description='EXIF'),
  imageScore?: ImageScore(name='ImageScore'),
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions', description='CroppingSuggestions'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents', description='OCRContents'),
}

model Boundary {
  width?: long(name='Width', description='Width'),
  height?: long(name='Height', description='Height'),
  left?: long(name='Left', description='Left'),
  top?: long(name='Top', description='Top'),
}

model AudioStream {
  index?: long(name='Index', description='Index'),
  language?: string(name='Language', description='Language'),
  codecName?: string(name='CodecName', description='CodecName'),
  codecLongName?: string(name='CodecLongName', description='CodecLongName'),
  codecTimeBase?: string(name='CodecTimeBase', description='CodecTimeBase'),
  codecTagString?: string(name='CodecTagString', description='CodecTagString'),
  codecTag?: string(name='CodecTag', description='CodecTag'),
  sampleFormat?: string(name='SampleFormat', description='SampleFormat'),
  sampleRate?: long(name='SampleRate', description='SampleRate'),
  channels?: long(name='Channels', description='Channels'),
  channelLayout?: string(name='ChannelLayout', description='ChannelLayout'),
  timeBase?: string(name='TimeBase', description='TimeBase'),
  startTime?: float(name='StartTime', description='StartTime'),
  duration?: float(name='Duration', description='Duration'),
  bitrate?: long(name='Bitrate', description='Bitrate'),
  lyric?: string(name='Lyric', description='Lyric'),
}

model ImageScore {
  overallQualityScore?: float(name='OverallQualityScore', description='OverallQualityScore'),
}

model OCRContents {
  language?: string(name='Language', description='Language'),
  contents?: string(name='Contents', description='Contents'),
  confidence?: float(name='Confidence', description='Confidence'),
  boundary?: Boundary(name='Boundary', description='Boundary'),
}

model Face {
  faceId?: string(name='FaceId', description='FaceId'),
  faceConfidence?: float(name='FaceConfidence', description='FaceConfidence'),
  age?: long(name='Age', description='Age'),
  ageConfidence?: float(name='AgeConfidence', description='AgeConfidence'),
  gender?: string(name='Gender', description='Gender'),
  genderConfidence?: float(name='GenderConfidence', description='GenderConfidence'),
  emotion?: string(name='Emotion', description='Emotion'),
  emotionConfidence?: float(name='EmotionConfidence', description='EmotionConfidence'),
  faceClusterId?: string(name='FaceClusterId', description='FaceClusterId'),
  mouth?: string(name='Mouth', description='Mouth'),
  mouthConfidence?: float(name='MouthConfidence', description='MouthConfidence'),
  beard?: string(name='Beard', description='Beard'),
  beardConfidence?: float(name='BeardConfidence', description='BeardConfidence'),
  hat?: string(name='Hat', description='Hat'),
  hatConfidence?: float(name='HatConfidence', description='HatConfidence'),
  race?: string(name='Race', description='Race'),
  raceConfidence?: float(name='RaceConfidence', description='RaceConfidence'),
  mask?: string(name='Mask', description='Mask'),
  maskConfidence?: float(name='MaskConfidence', description='MaskConfidence'),
  glasses?: string(name='Glasses', description='Glasses'),
  glassesConfidence?: float(name='GlassesConfidence', description='GlassesConfidence'),
  leftEye?: string(name='LeftEye', description='LeftEye'),
  leftEyeConfidence?: float(name='LeftEyeConfidence', description='LeftEyeConfidence'),
  rightEye?: string(name='RightEye', description='RightEye'),
  rightEyeConfidence?: float(name='RightEyeConfidence', description='RightEyeConfidence'),
  headPose?: HeadPose(name='HeadPose'),
  boundary?: Boundary(name='Boundary'),
  embeddingsFloat32?: [ float ](name='EmbeddingsFloat32', description='EmbeddingsFloat32'),
  embeddingsInt8?: [ int32 ](name='EmbeddingsInt8', description='EmbeddingsInt8'),
}

model File {
  ownerId?: string(name='OwnerId', description='OwnerId'),
  projectName?: string(name='ProjectName', description='ProjectName'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  objectType?: string(name='ObjectType', description='ObjectType'),
  objectId?: string(name='ObjectId', description='ObjectId'),
  updateTime?: string(name='UpdateTime', description='UpdateTime'),
  createTime?: string(name='CreateTime', description='CreateTime'),
  URI?: string(name='URI', description='URI'),
  filename?: string(name='Filename', description='Filename'),
  mediaType?: string(name='MediaType', description='MediaType'),
  contentType?: string(name='ContentType', description='ContentType'),
  size?: long(name='Size', description='Size'),
  fileHash?: string(name='FileHash', description='FileHash'),
  fileModifiedTime?: string(name='FileModifiedTime', description='FileModifiedTime'),
  fileCreateTime?: string(name='FileCreateTime', description='FileCreateTime'),
  fileAccessTime?: string(name='FileAccessTime', description='FileAccessTime'),
  produceTime?: string(name='ProduceTime', description='ProduceTime'),
  latLong?: string(name='LatLong', description='LatLong'),
  timezone?: string(name='Timezone', description='Timezone'),
  addresses?: [
    Address
  ](name='Addresses', description='Addresses'),
  travelClusterId?: string(name='TravelClusterId', description='TravelClusterId'),
  orientation?: string(name='Orientation', description='Orientation'),
  faces?: [
    Face
  ](name='Faces', description='Faces'),
  faceCount?: long(name='FaceCount', description='FaceCount'),
  labels?: [
    Label
  ](name='Labels', description='Labels'),
  title?: string(name='Title', description='Title'),
  imageWidth?: long(name='ImageWidth', description='ImageWidth'),
  imageHeight?: long(name='ImageHeight', description='ImageHeight'),
  EXIF?: string(name='EXIF', description='EXIF'),
  imageScore?: ImageScore(name='ImageScore'),
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions', description='CroppingSuggestions'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents', description='OCRContents'),
  imageEmbeddingsFloat32?: [ float ](name='ImageEmbeddingsFloat32', description='ImageEmbeddingsFloat32'),
  imageEmbeddingsInt8?: [ int32 ](name='ImageEmbeddingsInt8', description='ImageEmbeddingsInt8'),
  videoWidth?: long(name='VideoWidth', description='VideoWidth'),
  videoHeight?: long(name='VideoHeight', description='VideoHeight'),
  videoTakenTime?: string(name='VideoTakenTime', description='VideoTakenTime'),
  videoDuration?: float(name='VideoDuration', description='VideoDuration'),
  videoBitrate?: long(name='VideoBitrate', description='VideoBitrate'),
  videoStartTime?: float(name='VideoStartTime', description='VideoStartTime'),
  videoStreams?: [
    VideoStream
  ](name='VideoStreams', description='VideoStreams'),
  subtitles?: [
    SubtitleStream
  ](name='Subtitles', description='Subtitles'),
  videoEmbeddingsFloat32?: [ float ](name='VideoEmbeddingsFloat32', description='VideoEmbeddingsFloat32'),
  videoEmbeddingsInt8?: [ int32 ](name='VideoEmbeddingsInt8', description='VideoEmbeddingsInt8'),
  audioTakenTime?: string(name='AudioTakenTime', description='AudioTakenTime'),
  audioDuration?: float(name='AudioDuration', description='AudioDuration'),
  audioBitrate?: float(name='AudioBitrate', description='AudioBitrate'),
  audioStreams?: [
    AudioStream
  ](name='AudioStreams', description='AudioStreams'),
  artists?: [ string ](name='Artists', description='Artists'),
  audioCovers?: [
    Image
  ](name='AudioCovers', description='AudioCovers'),
  composer?: string(name='Composer', description='Composer'),
  performer?: string(name='Performer', description='Performer'),
  audioLanguage?: string(name='AudioLanguage', description='AudioLanguage'),
  album?: string(name='Album', description='Album'),
  albumArtist?: string(name='AlbumArtist', description='AlbumArtist'),
  audioEmbeddingsFloat32?: [ float ](name='AudioEmbeddingsFloat32', description='AudioEmbeddingsFloat32'),
  audioEmbeddingsInt8?: [ int32 ](name='AudioEmbeddingsInt8', description='AudioEmbeddingsInt8'),
  documentLanguage?: string(name='DocumentLanguage', description='DocumentLanguage'),
  pageCount?: long(name='PageCount', description='PageCount'),
  documentContent?: string(name='DocumentContent', description='DocumentContent'),
  documentEmbeddingsFloat32?: [ float ](name='DocumentEmbeddingsFloat32', description='DocumentEmbeddingsFloat32'),
  documentEmbeddingsInt8?: [ int32 ](name='DocumentEmbeddingsInt8', description='DocumentEmbeddingsInt8'),
  ETag?: string(name='ETag', description='ETag'),
  cacheControl?: string(name='CacheControl', description='CacheControl'),
  contentDisposition?: string(name='ContentDisposition', description='ContentDisposition'),
  contentEncoding?: string(name='ContentEncoding', description='ContentEncoding'),
  contentLanguage?: string(name='ContentLanguage', description='ContentLanguage'),
  accessControlAllowOrigin?: string(name='AccessControlAllowOrigin', description='AccessControlAllowOrigin'),
  accessControlRequestMethod?: string(name='AccessControlRequestMethod', description='AccessControlRequestMethod'),
  serverSideEncryptionCustomerAlgorithm?: string(name='ServerSideEncryptionCustomerAlgorithm', description='ServerSideEncryptionCustomerAlgorithm'),
  serverSideEncryption?: string(name='ServerSideEncryption', description='ServerSideEncryption'),
  serverSideDataEncryption?: string(name='ServerSideDataEncryption', description='ServerSideDataEncryption'),
  serverSideEncryptionKeyId?: string(name='ServerSideEncryptionKeyId', description='ServerSideEncryptionKeyId'),
  storageClass?: string(name='StorageClass', description='StorageClass'),
  objectACL?: string(name='ObjectACL', description='ObjectACL'),
  contentMd5?: string(name='ContentMd5', description='ContentMd5'),
  OSSUserMeta?: map[string]any(name='OSSUserMeta', description='OSSUserMeta'),
  OSSTaggingCount?: long(name='OSSTaggingCount', description='OSSTaggingCount'),
  OSSTagging?: map[string]any(name='OSSTagging', description='OSSTagging'),
  OSSExpiration?: string(name='OSSExpiration', description='OSSExpiration'),
  OSSVersionId?: string(name='OSSVersionId', description='OSSVersionId'),
  OSSDeleteMarker?: string(name='OSSDeleteMarker', description='OSSDeleteMarker'),
  OSSObjectType?: string(name='OSSObjectType', description='OSSObjectType'),
  customId?: string(name='CustomId', description='CustomId'),
  customLabels?: map[string]any(name='CustomLabels', description='CustomLabels'),
}

model SimpleQuery {
  field?: string(name='Field', description='需要查询的字段名'),
  value?: string(name='Value', description='需要查询的字段值'),
  operation?: string(name='Operation', description='运算符'),
  subQueries?: [
    SimpleQuery
  ](name='SubQueries', description='由 SimpleQuery 结构体组成的子查询数组'),
}

model BatchDeleteFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URIs?: [ string ](name='URIs'),
}

model BatchDeleteFileMetaShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URIsShrink?: string(name='URIs'),
}

model BatchDeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchDeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteFileMetaResponseBody(name='body'),
}

async function batchDeleteFileMetaWithOptions(tmpReq: BatchDeleteFileMetaRequest, runtime: Util.RuntimeOptions): BatchDeleteFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.URIs)) {
    request.URIsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.URIs, 'URIs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeleteFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeleteFileMeta(request: BatchDeleteFileMetaRequest): BatchDeleteFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteFileMetaWithOptions(request, runtime);
}

model BatchGetFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URIs?: [ string ](name='URIs'),
}

model BatchGetFileMetaShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URIsShrink?: string(name='URIs'),
}

model BatchGetFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  files?: [
    File
  ](name='Files'),
}

model BatchGetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetFileMetaResponseBody(name='body'),
}

async function batchGetFileMetaWithOptions(tmpReq: BatchGetFileMetaRequest, runtime: Util.RuntimeOptions): BatchGetFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchGetFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.URIs)) {
    request.URIsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.URIs, 'URIs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetFileMeta(request: BatchGetFileMetaRequest): BatchGetFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetFileMetaWithOptions(request, runtime);
}

model BatchIndexFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  files?: [ 
    {
      URI?: string(name='URI'),
      customLabels?: map[string]any(name='CustomLabels'),
    }
  ](name='Files'),
}

model BatchIndexFileMetaShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  filesShrink?: string(name='Files'),
}

model BatchIndexFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchIndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchIndexFileMetaResponseBody(name='body'),
}

async function batchIndexFileMetaWithOptions(tmpReq: BatchIndexFileMetaRequest, runtime: Util.RuntimeOptions): BatchIndexFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchIndexFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchIndexFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchIndexFileMeta(request: BatchIndexFileMetaRequest): BatchIndexFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchIndexFileMetaWithOptions(request, runtime);
}

model BatchUpdateFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  files?: [ 
    {
      URI?: string(name='URI'),
      customLabels?: map[string]any(name='CustomLabels'),
    }
  ](name='Files'),
}

model BatchUpdateFileMetaShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  filesShrink?: string(name='Files'),
}

model BatchUpdateFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BatchUpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateFileMetaResponseBody(name='body'),
}

async function batchUpdateFileMetaWithOptions(tmpReq: BatchUpdateFileMetaRequest, runtime: Util.RuntimeOptions): BatchUpdateFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchUpdateFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchUpdateFileMeta(request: BatchUpdateFileMetaRequest): BatchUpdateFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateFileMetaWithOptions(request, runtime);
}

model CreateBindingRequest {
  projectName?: string(name='ProjectName', description='ProjectName'),
  datasetName?: string(name='DatasetName', description='DatasetName'),
  URI?: string(name='URI', description='URI'),
}

model CreateBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateBindingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBindingResponseBody(name='body'),
}

async function createBindingWithOptions(request: CreateBindingRequest, runtime: Util.RuntimeOptions): CreateBindingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBinding', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBinding(request: CreateBindingRequest): CreateBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBindingWithOptions(request, runtime);
}

model CreateDatasetRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  datasetName?: string(name='DatasetName', description='数据集名称'),
  description?: string(name='Description', description='对数据集的描述'),
  templateId?: string(name='TemplateId'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
}

model CreateDatasetResponseBody = {
  requestId?: string(name='RequestId', description='请求 ID'),
  projectName?: string(name='ProjectName', description='项目名称'),
  datasetName?: string(name='DatasetName', description='数据集名称'),
  createTime?: long(name='CreateTime', description='数据集创建时间'),
  description?: string(name='Description'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDatasetWithOptions(request: CreateDatasetRequest, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDataset', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetWithOptions(request, runtime);
}

model CreateProjectRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  description?: string(name='Description', description='项目描述'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  templateId?: string(name='TemplateId'),
  projectQPS?: long(name='ProjectQPS'),
  projectTPS?: long(name='ProjectTPS'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
}

model CreateProjectResponseBody = {
  projectName?: string(name='ProjectName', description='项目名称'),
  createTime?: long(name='CreateTime', description='项目创建时间'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
  description?: string(name='Description'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProject', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model DeleteBindingRequest {
  projectName?: string(name='ProjectName', description='A short description of struct'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
}

model DeleteBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteBindingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBindingResponseBody(name='body'),
}

async function deleteBindingWithOptions(request: DeleteBindingRequest, runtime: Util.RuntimeOptions): DeleteBindingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBinding', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBindingWithOptions(request, runtime);
}

model DeleteDatasetRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDatasetWithOptions(request: DeleteDatasetRequest, runtime: Util.RuntimeOptions): DeleteDatasetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDataset', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatasetWithOptions(request, runtime);
}

model DeleteFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
}

model DeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileMetaResponseBody(name='body'),
}

async function deleteFileMetaWithOptions(request: DeleteFileMetaRequest, runtime: Util.RuntimeOptions): DeleteFileMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFileMeta(request: DeleteFileMetaRequest): DeleteFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileMetaWithOptions(request, runtime);
}

model DeleteProjectRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProject', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model FuzzyQueryRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: long(name='MaxResults', description='本次读取的最大数据记录数量'),
  projectName?: string(name='ProjectName', description='项目名称'),
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  query?: string(name='Query', description='用于搜索的字符串'),
}

model FuzzyQueryResponseBody = {
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id'),
  files?: [
    File
  ](name='Files'),
}

model FuzzyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FuzzyQueryResponseBody(name='body'),
}

async function fuzzyQueryWithOptions(request: FuzzyQueryRequest, runtime: Util.RuntimeOptions): FuzzyQueryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FuzzyQuery', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function fuzzyQuery(request: FuzzyQueryRequest): FuzzyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return fuzzyQueryWithOptions(request, runtime);
}

model GetBindingRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
}

model GetBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  binding?: {
    projectName?: string(name='ProjectName'),
    datasetName?: string(name='DatasetName'),
    URI?: string(name='URI'),
    state?: string(name='State'),
    phase?: string(name='Phase'),
    reason?: string(name='Reason'),
    createTime?: long(name='CreateTime'),
    updateTime?: long(name='UpdateTime'),
  }(name='Binding'),
}

model GetBindingResponse = {
  headers: map[string]string(name='headers'),
  body: GetBindingResponseBody(name='body'),
}

async function getBindingWithOptions(request: GetBindingRequest, runtime: Util.RuntimeOptions): GetBindingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBinding', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBinding(request: GetBindingRequest): GetBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBindingWithOptions(request, runtime);
}

model GetDatasetRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
}

model GetDatasetResponseBody = {
  requestId?: string(name='RequestId'),
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  templateId?: string(name='TemplateId'),
  createTime?: long(name='CreateTime'),
  updateTime?: long(name='UpdateTime'),
  description?: string(name='Description'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
  bindCount?: long(name='BindCount'),
  fileCount?: long(name='FileCount'),
  totalFileSize?: long(name='TotalFileSize'),
}

model GetDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: GetDatasetResponseBody(name='body'),
}

async function getDatasetWithOptions(request: GetDatasetRequest, runtime: Util.RuntimeOptions): GetDatasetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataset', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatasetWithOptions(request, runtime);
}

model GetFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
}

model GetFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  files?: [
    File
  ](name='Files', description='File list.'),
}

model GetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileMetaResponseBody(name='body'),
}

async function getFileMetaWithOptions(request: GetFileMetaRequest, runtime: Util.RuntimeOptions): GetFileMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getFileMeta(request: GetFileMetaRequest): GetFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileMetaWithOptions(request, runtime);
}

model GetFileSignedURIRequest {
  projectName?: string(name='ProjectName'),
  URI?: string(name='URI'),
}

model GetFileSignedURIResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  URI?: string(name='URI', description='签名地址'),
}

model GetFileSignedURIResponse = {
  headers: map[string]string(name='headers'),
  body: GetFileSignedURIResponseBody(name='body'),
}

async function getFileSignedURIWithOptions(request: GetFileSignedURIRequest, runtime: Util.RuntimeOptions): GetFileSignedURIResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetFileSignedURI', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getFileSignedURI(request: GetFileSignedURIRequest): GetFileSignedURIResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileSignedURIWithOptions(request, runtime);
}

model GetProjectRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
}

model GetProjectResponseBody = {
  projectName?: string(name='ProjectName', description='项目名称'),
  description?: string(name='Description', description='项目描述'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  templateId?: string(name='TemplateId', description='工作流'),
  createTime?: long(name='CreateTime', description='项目创建时间'),
  updateTime?: long(name='UpdateTime', description='项目修改时间'),
  projectQPS?: long(name='ProjectQPS', description='项目QPS'),
  projectTPS?: long(name='ProjectTPS', description='项目TPS'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', description='最大媒体集数量'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount', description='当前项目每个媒体集最大绑定数'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='当前项目每个媒体集最大文件数'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='当前项目每个媒体集最大实体数'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='当前项目每个媒体集最大关系数'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='当前项目每个媒体集最大文件总大小'),
  datasetCount?: long(name='DatasetCount', description='媒体集数量'),
  fileCount?: long(name='FileCount', description='项目当前文件数量'),
  totalFileSize?: long(name='TotalFileSize', description='项目当前文件总大小'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetProject', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model IndexFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
  customLabels?: map[string]any(name='CustomLabels'),
}

model IndexFileMetaShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
  customLabelsShrink?: string(name='CustomLabels'),
}

model IndexFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model IndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: IndexFileMetaResponseBody(name='body'),
}

async function indexFileMetaWithOptions(tmpReq: IndexFileMetaRequest, runtime: Util.RuntimeOptions): IndexFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new IndexFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.customLabels)) {
    request.customLabelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customLabels, 'CustomLabels', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IndexFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function indexFileMeta(request: IndexFileMetaRequest): IndexFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return indexFileMetaWithOptions(request, runtime);
}

model ListBindingsRequest {
  projectName?: string(name='ProjectName', description='A short description of struct'),
  datasetName?: string(name='DatasetName'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListBindingsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken'),
  bindings?: [ 
    {
      binding?: {
        projectName?: string(name='ProjectName'),
        datasetName?: string(name='DatasetName'),
        URI?: string(name='URI'),
        state?: string(name='State'),
        phase?: string(name='Phase'),
        reason?: string(name='Reason'),
        createTime?: long(name='CreateTime'),
        updateTime?: long(name='UpdateTime'),
      }(name='Binding'),
    }
  ](name='Bindings'),
}

model ListBindingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBindingsResponseBody(name='body'),
}

async function listBindingsWithOptions(request: ListBindingsRequest, runtime: Util.RuntimeOptions): ListBindingsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListBindings', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listBindings(request: ListBindingsRequest): ListBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindingsWithOptions(request, runtime);
}

model ListDatasetsRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  maxResults?: long(name='MaxResults', description='返回最大个数'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token'),
}

model ListDatasetsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  nextToken?: string(name='NextToken'),
  datasets?: [ 
    {
      projectName?: string(name='ProjectName', description='ProjectName'),
      datasetName?: string(name='DatasetName', description='DatasetName'),
      workflow?: string(name='Workflow'),
      createTime?: long(name='CreateTime'),
      updateTime?: long(name='UpdateTime'),
      description?: string(name='Description'),
      datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
      datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
      datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
      datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
      datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
      bindCount?: long(name='BindCount'),
    }
  ](name='Datasets', description='Responses'),
}

model ListDatasetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatasetsResponseBody(name='body'),
}

async function listDatasetsWithOptions(request: ListDatasetsRequest, runtime: Util.RuntimeOptions): ListDatasetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDatasets', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatasetsWithOptions(request, runtime);
}

model ListProjectsRequest {
  maxResults?: long(name='MaxResults', description='返回结果的最大个数'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token'),
}

model ListProjectsResponseBody = {
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token'),
  projects?: [ 
    {
      projectName?: string(name='ProjectName', description='项目名称'),
      serviceRole?: string(name='ServiceRole', description='服务角色'),
      workflow?: string(name='Workflow', description='工作流'),
      description?: string(name='Description', description='项目描述'),
      createTime?: long(name='CreateTime', description='项目创建时间'),
      updateTime?: long(name='UpdateTime', description='项目上次修改时间'),
      projectQPS?: long(name='ProjectQPS', description='项目QPS'),
      projectTPS?: long(name='ProjectTPS', description='项目TPS'),
      projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', description='最大媒体集数'),
      datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount', description='项目下每个媒体集最多绑定数'),
      datasetMaxFileCount?: long(name='DatasetMaxFileCount', description='项目下每个媒体集最大文件数量'),
      datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', description='项目下每个媒体集最大实体数'),
      datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', description='项目下每个媒体集最大关系数'),
      datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', description='项目下每个媒体集最大文件总大小'),
      datasetCount?: long(name='DatasetCount', description='媒体集数量'),
    }
  ](name='Projects', description='由ProjectItem组成的数组'),
  requestId?: string(name='RequestId', description='本次请求的唯一 ID'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(request: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListProjects', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ResumeBindingRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
}

model ResumeBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ResumeBindingResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeBindingResponseBody(name='body'),
}

async function resumeBindingWithOptions(request: ResumeBindingRequest, runtime: Util.RuntimeOptions): ResumeBindingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeBinding', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeBinding(request: ResumeBindingRequest): ResumeBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeBindingWithOptions(request, runtime);
}

model SimpleQueryRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  projectName?: string(name='ProjectName', description='项目名称'),
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  query?: SimpleQuery(name='Query'),
  sort?: string(name='Sort', description='排序方式，默认 DESC'),
  order?: string(name='Order', description='排序字段'),
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段的字段名'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符'),
    }
  ](name='Aggregations', description='聚合字段'),
}

model SimpleQueryShrinkRequest {
  nextToken?: string(name='NextToken', description='标记当前开始读取的位置，置空表示从头开始'),
  maxResults?: int32(name='MaxResults', description='本次读取的最大数据记录数量'),
  projectName?: string(name='ProjectName', description='项目名称'),
  datasetName?: string(name='DatasetName', description='Dataset 名称'),
  queryShrink?: string(name='Query'),
  sort?: string(name='Sort', description='排序方式，默认 DESC'),
  order?: string(name='Order', description='排序字段'),
  aggregationsShrink?: string(name='Aggregations', description='聚合字段'),
}

model SimpleQueryResponseBody = {
  nextToken?: string(name='NextToken', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='本次请求的唯一 Id'),
  files?: [
    File
  ](name='Files', description='文件列表'),
  aggregations?: [ 
    {
      field?: string(name='Field', description='聚合字段名'),
      operation?: string(name='Operation', description='聚合字段的聚合操作符'),
      value?: float(name='Value', description='聚合的统计结果'),
      groups?: [ 
        {
          value?: string(name='Value', description='分组聚合的值'),
          count?: long(name='Count', description='分组聚合的计数'),
        }
      ](name='Groups', description='分组聚合的结果'),
    }
  ](name='Aggregations', description='聚合字段的字段名'),
}

model SimpleQueryResponse = {
  headers: map[string]string(name='headers'),
  body: SimpleQueryResponseBody(name='body'),
}

async function simpleQueryWithOptions(tmpReq: SimpleQueryRequest, runtime: Util.RuntimeOptions): SimpleQueryResponse {
  Util.validateModel(tmpReq);
  var request = new SimpleQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.query)) {
    request.queryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.query, 'Query', 'json');
  }
  if (!Util.isUnset(tmpReq.aggregations)) {
    request.aggregationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregations, 'Aggregations', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SimpleQuery', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function simpleQuery(request: SimpleQueryRequest): SimpleQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return simpleQueryWithOptions(request, runtime);
}

model StopBindingRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
  reason?: string(name='Reason'),
}

model StopBindingResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopBindingResponse = {
  headers: map[string]string(name='headers'),
  body: StopBindingResponseBody(name='body'),
}

async function stopBindingWithOptions(request: StopBindingRequest, runtime: Util.RuntimeOptions): StopBindingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopBinding', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopBinding(request: StopBindingRequest): StopBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopBindingWithOptions(request, runtime);
}

model UpdateDatasetRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  description?: string(name='Description'),
  templateId?: string(name='TemplateId'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
  resetItems?: [ string ](name='ResetItems'),
}

model UpdateDatasetShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  description?: string(name='Description'),
  templateId?: string(name='TemplateId'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
  resetItemsShrink?: string(name='ResetItems'),
}

model UpdateDatasetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDatasetResponseBody(name='body'),
}

async function updateDatasetWithOptions(tmpReq: UpdateDatasetRequest, runtime: Util.RuntimeOptions): UpdateDatasetResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDatasetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resetItems)) {
    request.resetItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resetItems, 'ResetItems', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDataset', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDatasetWithOptions(request, runtime);
}

model UpdateFileMetaRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
  customLabels?: map[string]any(name='CustomLabels'),
}

model UpdateFileMetaShrinkRequest {
  projectName?: string(name='ProjectName'),
  datasetName?: string(name='DatasetName'),
  URI?: string(name='URI'),
  customLabelsShrink?: string(name='CustomLabels'),
}

model UpdateFileMetaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFileMetaResponseBody(name='body'),
}

async function updateFileMetaWithOptions(tmpReq: UpdateFileMetaRequest, runtime: Util.RuntimeOptions): UpdateFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.customLabels)) {
    request.customLabelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customLabels, 'CustomLabels', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFileMeta', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFileMeta(request: UpdateFileMetaRequest): UpdateFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileMetaWithOptions(request, runtime);
}

model UpdateProjectRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  description?: string(name='Description', description='项目描述'),
  templateId?: string(name='TemplateId'),
  projectQPS?: long(name='ProjectQPS'),
  projectTPS?: long(name='ProjectTPS'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  resetItems?: [ string ](name='ResetItems'),
}

model UpdateProjectShrinkRequest {
  projectName?: string(name='ProjectName', description='项目名称'),
  serviceRole?: string(name='ServiceRole', description='服务角色'),
  description?: string(name='Description', description='项目描述'),
  templateId?: string(name='TemplateId'),
  projectQPS?: long(name='ProjectQPS'),
  projectTPS?: long(name='ProjectTPS'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount'),
  datasetMaxOSSBindCount?: long(name='DatasetMaxOSSBindCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  resetItemsShrink?: string(name='ResetItems'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProjectWithOptions(tmpReq: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resetItems)) {
    request.resetItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resetItems, 'ResetItems', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProject', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

