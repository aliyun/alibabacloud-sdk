/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing-gov-1 = 'imm-vpc.cn-beijing-gov-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('imm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Address {
  addressLine?: string(name='AddressLine'),
  city?: string(name='City'),
  country?: string(name='Country'),
  district?: string(name='District'),
  language?: string(name='Language'),
  province?: string(name='Province'),
  township?: string(name='Township'),
}

model AddressForStory {
  city?: string(name='City'),
  country?: string(name='Country'),
  district?: string(name='District'),
  province?: string(name='Province'),
  township?: string(name='Township'),
}

model AssumeRoleChain {
  chain?: [
    AssumeRoleChainNode
  ](name='Chain'),
  policy?: string(name='Policy'),
}

model AssumeRoleChainNode {
  ownerId?: string(name='OwnerId', example='1023210024677934'),
  role?: string(name='Role', example='test-role'),
  type?: string(name='Type', example='user'),
}

model AudioStream {
  bitrate?: long(name='Bitrate'),
  channelLayout?: string(name='ChannelLayout'),
  channels?: long(name='Channels'),
  codecLongName?: string(name='CodecLongName'),
  codecName?: string(name='CodecName'),
  codecTag?: string(name='CodecTag'),
  codecTagString?: string(name='CodecTagString'),
  codecTimeBase?: string(name='CodecTimeBase'),
  duration?: double(name='Duration'),
  frameCount?: long(name='FrameCount'),
  index?: long(name='Index'),
  language?: string(name='Language'),
  lyric?: string(name='Lyric'),
  sampleFormat?: string(name='SampleFormat'),
  sampleRate?: long(name='SampleRate'),
  startTime?: double(name='StartTime'),
  timeBase?: string(name='TimeBase'),
}

model Binding {
  createTime?: string(name='CreateTime'),
  datasetName?: string(name='DatasetName'),
  detail?: string(name='Detail'),
  phase?: string(name='Phase'),
  projectName?: string(name='ProjectName'),
  state?: string(name='State'),
  URI?: string(name='URI'),
  updateTime?: string(name='UpdateTime'),
}

model Body {
  boundary?: Boundary(name='Boundary'),
  confidence?: float(name='Confidence'),
}

model Boundary {
  height?: long(name='Height'),
  left?: long(name='Left'),
  top?: long(name='Top'),
  width?: long(name='Width'),
}

model ClusterForReq {
  cover?: {
    figures?: [ 
      {
        figureId?: string(name='FigureId'),
      }
    ](name='Figures'),
  }(name='Cover'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  name?: string(name='Name'),
  objectId?: string(name='ObjectId'),
}

model Codes {
  boundary?: Boundary(name='Boundary'),
  confidence?: float(name='Confidence'),
  content?: string(name='Content'),
  type?: string(name='Type'),
}

model CredentialConfig {
  chain?: [ 
    {
      assumeRoleFor?: string(name='AssumeRoleFor'),
      role?: string(name='Role'),
      roleType?: string(name='RoleType'),
    }
  ](name='Chain'),
  policy?: string(name='Policy'),
  serviceRole?: string(name='ServiceRole'),
}

model CroppingSuggestion {
  aspectRatio?: string(name='AspectRatio'),
  boundary?: Boundary(name='Boundary'),
  confidence?: float(name='Confidence'),
}

model Dataset {
  bindCount?: long(name='BindCount'),
  createTime?: string(name='CreateTime'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
  datasetName?: string(name='DatasetName'),
  description?: string(name='Description'),
  fileCount?: long(name='FileCount'),
  projectName?: string(name='ProjectName'),
  templateId?: string(name='TemplateId'),
  totalFileSize?: long(name='TotalFileSize'),
  updateTime?: string(name='UpdateTime'),
}

model Figure {
  age?: long(name='Age'),
  ageSD?: float(name='AgeSD'),
  attractive?: float(name='Attractive'),
  beard?: string(name='Beard'),
  beardConfidence?: float(name='BeardConfidence'),
  boundary?: Boundary(name='Boundary'),
  emotion?: string(name='Emotion'),
  emotionConfidence?: float(name='EmotionConfidence'),
  faceQuality?: float(name='FaceQuality'),
  figureClusterConfidence?: float(name='FigureClusterConfidence'),
  figureClusterId?: string(name='FigureClusterId'),
  figureConfidence?: float(name='FigureConfidence'),
  figureId?: string(name='FigureId'),
  figureType?: string(name='FigureType'),
  gender?: string(name='Gender'),
  genderConfidence?: float(name='GenderConfidence'),
  glasses?: string(name='Glasses'),
  glassesConfidence?: float(name='GlassesConfidence'),
  hat?: string(name='Hat'),
  hatConfidence?: float(name='HatConfidence'),
  headPose?: HeadPose(name='HeadPose'),
  mask?: string(name='Mask'),
  maskConfidence?: float(name='MaskConfidence'),
  mouth?: string(name='Mouth'),
  mouthConfidence?: float(name='MouthConfidence'),
  sharpness?: float(name='Sharpness'),
}

model FigureCluster {
  averageAge?: float(name='AverageAge'),
  cover?: File(name='Cover'),
  createTime?: string(name='CreateTime'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  datasetName?: string(name='DatasetName'),
  faceCount?: long(name='FaceCount'),
  gender?: string(name='Gender'),
  imageCount?: long(name='ImageCount'),
  maxAge?: float(name='MaxAge'),
  metaLockVersion?: long(name='MetaLockVersion'),
  minAge?: float(name='MinAge'),
  name?: string(name='Name'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
  ownerId?: string(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  updateTime?: string(name='UpdateTime'),
  videoCount?: long(name='VideoCount'),
}

model FigureClusterForReq {
  cover?: {
    figures?: [ 
      {
        figureId?: string(name='FigureId'),
      }
    ](name='Figures'),
  }(name='Cover'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  metaLockVersion?: long(name='MetaLockVersion'),
  name?: string(name='Name'),
  objectId?: string(name='ObjectId'),
}

model File {
  accessControlAllowOrigin?: string(name='AccessControlAllowOrigin'),
  accessControlRequestMethod?: string(name='AccessControlRequestMethod'),
  addresses?: [
    Address
  ](name='Addresses'),
  album?: string(name='Album'),
  albumArtist?: string(name='AlbumArtist'),
  artist?: string(name='Artist'),
  audioCovers?: [
    Image
  ](name='AudioCovers'),
  audioStreams?: [
    AudioStream
  ](name='AudioStreams'),
  bitrate?: long(name='Bitrate'),
  cacheControl?: string(name='CacheControl'),
  composer?: string(name='Composer'),
  contentDisposition?: string(name='ContentDisposition'),
  contentEncoding?: string(name='ContentEncoding'),
  contentLanguage?: string(name='ContentLanguage'),
  contentMd5?: string(name='ContentMd5'),
  contentType?: string(name='ContentType'),
  createTime?: string(name='CreateTime'),
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  datasetName?: string(name='DatasetName'),
  documentContent?: string(name='DocumentContent'),
  documentLanguage?: string(name='DocumentLanguage'),
  duration?: double(name='Duration'),
  ETag?: string(name='ETag'),
  EXIF?: string(name='EXIF'),
  figureCount?: long(name='FigureCount'),
  figures?: [
    Figure
  ](name='Figures'),
  fileAccessTime?: string(name='FileAccessTime'),
  fileCreateTime?: string(name='FileCreateTime'),
  fileHash?: string(name='FileHash'),
  fileModifiedTime?: string(name='FileModifiedTime'),
  filename?: string(name='Filename'),
  formatLongName?: string(name='FormatLongName'),
  formatName?: string(name='FormatName'),
  imageHeight?: long(name='ImageHeight'),
  imageScore?: ImageScore(name='ImageScore'),
  imageWidth?: long(name='ImageWidth'),
  labels?: [
    Label
  ](name='Labels'),
  language?: string(name='Language'),
  latLong?: string(name='LatLong'),
  mediaType?: string(name='MediaType'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents'),
  OSSCRC64?: string(name='OSSCRC64'),
  OSSDeleteMarker?: string(name='OSSDeleteMarker'),
  OSSExpiration?: string(name='OSSExpiration'),
  OSSObjectType?: string(name='OSSObjectType'),
  OSSStorageClass?: string(name='OSSStorageClass'),
  OSSTagging?: map[string]any(name='OSSTagging'),
  OSSTaggingCount?: long(name='OSSTaggingCount'),
  OSSURI?: string(name='OSSURI'),
  OSSUserMeta?: map[string]any(name='OSSUserMeta'),
  OSSVersionId?: string(name='OSSVersionId'),
  objectACL?: string(name='ObjectACL'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
  orientation?: long(name='Orientation'),
  ownerId?: string(name='OwnerId'),
  pageCount?: long(name='PageCount'),
  performer?: string(name='Performer'),
  produceTime?: string(name='ProduceTime'),
  programCount?: long(name='ProgramCount'),
  projectName?: string(name='ProjectName'),
  serverSideDataEncryption?: string(name='ServerSideDataEncryption'),
  serverSideEncryption?: string(name='ServerSideEncryption'),
  serverSideEncryptionCustomerAlgorithm?: string(name='ServerSideEncryptionCustomerAlgorithm'),
  serverSideEncryptionKeyId?: string(name='ServerSideEncryptionKeyId'),
  size?: long(name='Size'),
  startTime?: double(name='StartTime'),
  streamCount?: long(name='StreamCount'),
  subtitles?: [
    SubtitleStream
  ](name='Subtitles'),
  timezone?: string(name='Timezone'),
  title?: string(name='Title'),
  travelClusterId?: string(name='TravelClusterId'),
  URI?: string(name='URI'),
  updateTime?: string(name='UpdateTime'),
  videoHeight?: long(name='VideoHeight'),
  videoStreams?: [
    VideoStream
  ](name='VideoStreams'),
  videoWidth?: long(name='VideoWidth'),
}

model FileForReq {
  contentType?: string(name='ContentType'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  figures?: [ 
    {
      figureClusterId?: string(name='FigureClusterId'),
      figureId?: string(name='FigureId'),
      figureType?: string(name='FigureType'),
    }
  ](name='Figures'),
  fileHash?: string(name='FileHash'),
  mediaType?: string(name='MediaType'),
  OSSURI?: string(name='OSSURI'),
  URI?: string(name='URI'),
}

model HeadPose {
  pitch?: float(name='Pitch'),
  roll?: float(name='Roll'),
  yaw?: float(name='Yaw'),
}

model Image {
  croppingSuggestions?: [
    CroppingSuggestion
  ](name='CroppingSuggestions'),
  EXIF?: string(name='EXIF'),
  imageHeight?: long(name='ImageHeight'),
  imageScore?: ImageScore(name='ImageScore'),
  imageWidth?: long(name='ImageWidth'),
  OCRContents?: [
    OCRContents
  ](name='OCRContents'),
}

model ImageScore {
  overallQualityScore?: float(name='OverallQualityScore'),
}

model KdtreeOption {
  compressionLevel?: int32(name='CompressionLevel'),
  libraryName?: string(name='LibraryName', example='draco'),
  quantizationBits?: int32(name='QuantizationBits'),
}

model KeyValuePair {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model Label {
  centricScore?: float(name='CentricScore'),
  labelConfidence?: float(name='LabelConfidence'),
  labelLevel?: long(name='LabelLevel'),
  labelName?: string(name='LabelName'),
  language?: string(name='Language'),
  parentLabelName?: string(name='ParentLabelName'),
}

model LocationDateCluster {
  addresses?: [
    Address
  ](name='Addresses'),
  createTime?: string(name='CreateTime'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  locationDateClusterEndTime?: string(name='LocationDateClusterEndTime'),
  locationDateClusterLevel?: string(name='LocationDateClusterLevel'),
  locationDateClusterStartTime?: string(name='LocationDateClusterStartTime'),
  objectId?: string(name='ObjectId'),
  title?: string(name='Title'),
  updateTime?: string(name='UpdateTime'),
}

model OCRContents {
  boundary?: Boundary(name='Boundary'),
  confidence?: float(name='Confidence'),
  contents?: string(name='Contents'),
  language?: string(name='Language'),
}

model OctreeOption {
  doVoxelGridDownDownSampling?: boolean(name='DoVoxelGridDownDownSampling', example='false'),
  libraryName?: string(name='LibraryName', example='pcl'),
  octreeResolution?: double(name='OctreeResolution', example='0.01'),
  pointResolution?: double(name='PointResolution', example='0.01'),
}

model PresetReference {
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model Project {
  createTime?: string(name='CreateTime'),
  datasetCount?: long(name='DatasetCount'),
  datasetMaxBindCount?: long(name='DatasetMaxBindCount'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize'),
  description?: string(name='Description'),
  engineConcurrency?: long(name='EngineConcurrency'),
  fileCount?: long(name='FileCount'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount'),
  projectName?: string(name='ProjectName'),
  projectQueriesPerSecond?: long(name='ProjectQueriesPerSecond'),
  serviceRole?: string(name='ServiceRole'),
  templateId?: string(name='TemplateId'),
  totalFileSize?: long(name='TotalFileSize'),
  updateTime?: string(name='UpdateTime'),
}

model RegionType {
  localName?: string(name='LocalName'),
  regionId?: string(name='RegionId'),
}

model Row {
  customLabels?: [
    KeyValuePair
  ](name='CustomLabels'),
  URI?: string(name='URI'),
}

model SimpleQuery {
  field?: string(name='Field'),
  operation?: string(name='Operation', example='eq / gt / gte / lt / lte / match / prefix / and / or / not'),
  subQueries?: [
    SimpleQuery
  ](name='SubQueries'),
  value?: string(name='Value'),
}

model Story {
  addresses?: [
    Address
  ](name='Addresses'),
  cover?: File(name='Cover'),
  createTime?: string(name='CreateTime'),
  customId?: string(name='CustomId'),
  customLabels?: map[string]any(name='CustomLabels'),
  datasetName?: string(name='DatasetName'),
  figureClusterIds?: [ string ](name='FigureClusterIds'),
  files?: [
    File
  ](name='Files'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
  ownerId?: string(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  storyEndTime?: string(name='StoryEndTime'),
  storyName?: string(name='StoryName'),
  storyStartTime?: string(name='StoryStartTime'),
  storySubType?: string(name='StorySubType'),
  storyType?: string(name='StoryType'),
  updateTime?: string(name='UpdateTime'),
}

model SubtitleStream {
  bitrate?: long(name='Bitrate'),
  codecLongName?: string(name='CodecLongName'),
  codecName?: string(name='CodecName'),
  codecTag?: string(name='CodecTag'),
  codecTagString?: string(name='CodecTagString'),
  content?: string(name='Content'),
  duration?: double(name='Duration'),
  height?: long(name='Height'),
  index?: long(name='Index'),
  language?: string(name='Language'),
  startTime?: double(name='StartTime'),
  width?: long(name='Width'),
}

model TaskInfo {
  code?: string(name='Code'),
  endTime?: string(name='EndTime'),
  message?: string(name='Message'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  tags?: map[string]any(name='Tags'),
  taskId?: string(name='TaskId'),
  taskType?: string(name='TaskType'),
  userData?: string(name='UserData'),
}

model TimeRange {
  end?: string(name='End'),
  start?: string(name='Start'),
}

model TrimPolicy {
  disableDeleteEmptyCell?: boolean(name='DisableDeleteEmptyCell'),
  disableDeleteRepeatedStyle?: boolean(name='DisableDeleteRepeatedStyle'),
  disableDeleteUnusedPicture?: boolean(name='DisableDeleteUnusedPicture'),
  disableDeleteUnusedShape?: boolean(name='DisableDeleteUnusedShape'),
}

model VideoStream {
  averageFrameRate?: string(name='AverageFrameRate'),
  bitDepth?: long(name='BitDepth'),
  bitrate?: long(name='Bitrate'),
  codecLongName?: string(name='CodecLongName'),
  codecName?: string(name='CodecName'),
  codecTag?: string(name='CodecTag'),
  codecTagString?: string(name='CodecTagString'),
  codecTimeBase?: string(name='CodecTimeBase'),
  colorPrimaries?: string(name='ColorPrimaries'),
  colorRange?: string(name='ColorRange'),
  colorSpace?: string(name='ColorSpace'),
  colorTransfer?: string(name='ColorTransfer'),
  displayAspectRatio?: string(name='DisplayAspectRatio'),
  duration?: double(name='Duration'),
  frameCount?: long(name='FrameCount'),
  frameRate?: string(name='FrameRate'),
  hasBFrames?: long(name='HasBFrames'),
  height?: long(name='Height'),
  index?: long(name='Index'),
  language?: string(name='Language'),
  level?: long(name='Level'),
  pixelFormat?: string(name='PixelFormat'),
  profile?: string(name='Profile'),
  rotate?: string(name='Rotate'),
  sampleAspectRatio?: string(name='SampleAspectRatio'),
  startTime?: double(name='StartTime'),
  timeBase?: string(name='TimeBase'),
  width?: long(name='Width'),
}

model WebofficePermission {
  copy?: boolean(name='Copy'),
  export?: boolean(name='Export'),
  history?: boolean(name='History'),
  print?: boolean(name='Print'),
  readonly?: boolean(name='Readonly'),
  rename?: boolean(name='Rename'),
}

model WebofficeUser {
  avatar?: string(name='Avatar'),
  id?: string(name='Id'),
  name?: string(name='Name'),
}

model WebofficeWatermark {
  fillStyle?: string(name='FillStyle', example='rgba(192, 192, 192, 0.6)'),
  font?: string(name='Font', example='bold 20px Serif'),
  horizontal?: long(name='Horizontal'),
  rotate?: float(name='Rotate'),
  type?: long(name='Type'),
  value?: string(name='Value'),
  vertical?: long(name='Vertical'),
}

model AddImageMosaicRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  imageFormat?: string(name='ImageFormat', example='jpg'),
  projectName?: string(name='ProjectName', example='immtest'),
  quality?: int32(name='Quality', example='80'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname'),
  targetURI?: string(name='TargetURI', example='oss://bucketname/objectname'),
  targets?: [ 
    {
      blurRadius?: int32(name='BlurRadius', example='3'),
      boundary?: {
        height?: float(name='Height', example='200'),
        referPos?: string(name='ReferPos', example='topleft'),
        width?: float(name='Width', example='200'),
        x?: float(name='X', example='0'),
        y?: float(name='Y', example='0'),
      }(name='Boundary'),
      color?: string(name='Color', example='#FFFFFF'),
      mosaicRadius?: int32(name='MosaicRadius', example='5'),
      sigma?: int32(name='Sigma', example='5'),
      type?: string(name='Type', example='square'),
    }
  ](name='Targets'),
}

model AddImageMosaicShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  imageFormat?: string(name='ImageFormat', example='jpg'),
  projectName?: string(name='ProjectName', example='immtest'),
  quality?: int32(name='Quality', example='80'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname'),
  targetURI?: string(name='TargetURI', example='oss://bucketname/objectname'),
  targetsShrink?: string(name='Targets'),
}

model AddImageMosaicResponseBody = {
  requestId?: string(name='RequestId', example='CA995EFD-083D-4F40-BE8A-BDF75FF*****'),
}

model AddImageMosaicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddImageMosaicResponseBody(name='body'),
}

async function addImageMosaicWithOptions(tmpReq: AddImageMosaicRequest, runtime: Util.RuntimeOptions): AddImageMosaicResponse {
  Util.validateModel(tmpReq);
  var request = new AddImageMosaicShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.targets)) {
    request.targetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targets, 'Targets', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.imageFormat)) {
    query['ImageFormat'] = request.imageFormat;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.quality)) {
    query['Quality'] = request.quality;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.targetsShrink)) {
    query['Targets'] = request.targetsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddImageMosaic',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addImageMosaic(request: AddImageMosaicRequest): AddImageMosaicResponse {
  var runtime = new Util.RuntimeOptions{};
  return addImageMosaicWithOptions(request, runtime);
}

model AddStoryFilesRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  files?: [ 
    {
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Files'),
  objectId?: string(name='ObjectId', example='testid'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model AddStoryFilesShrinkRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  filesShrink?: string(name='Files'),
  objectId?: string(name='ObjectId', example='testid'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model AddStoryFilesResponseBody = {
  files?: [ 
    {
      errorCode?: string(name='ErrorCode', example='ResourceNotFound'),
      errorMessage?: string(name='ErrorMessage', example='The specified resource %s is not found.'),
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Files'),
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model AddStoryFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddStoryFilesResponseBody(name='body'),
}

async function addStoryFilesWithOptions(tmpReq: AddStoryFilesRequest, runtime: Util.RuntimeOptions): AddStoryFilesResponse {
  Util.validateModel(tmpReq);
  var request = new AddStoryFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.datasetName)) {
    body['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.filesShrink)) {
    body['Files'] = request.filesShrink;
  }
  if (!Util.isUnset(request.objectId)) {
    body['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddStoryFiles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addStoryFiles(request: AddStoryFilesRequest): AddStoryFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addStoryFilesWithOptions(request, runtime);
}

model AttachOSSBucketRequest {
  OSSBucket?: string(name='OSSBucket', example='examplebucket'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model AttachOSSBucketResponseBody = {
  requestId?: string(name='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model AttachOSSBucketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachOSSBucketResponseBody(name='body'),
}

async function attachOSSBucketWithOptions(request: AttachOSSBucketRequest, runtime: Util.RuntimeOptions): AttachOSSBucketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.OSSBucket)) {
    query['OSSBucket'] = request.OSSBucket;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachOSSBucket',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachOSSBucket(request: AttachOSSBucketRequest): AttachOSSBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachOSSBucketWithOptions(request, runtime);
}

model BatchDeleteFileMetaRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URIs?: [ string ](name='URIs'),
}

model BatchDeleteFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URIsShrink?: string(name='URIs'),
}

model BatchDeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', example='3A82F6C9-5AC0-38F9-914F-F02623B3****'),
}

model BatchDeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteFileMetaResponseBody(name='body'),
}

async function batchDeleteFileMetaWithOptions(tmpReq: BatchDeleteFileMetaRequest, runtime: Util.RuntimeOptions): BatchDeleteFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.URIs)) {
    request.URIsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.URIs, 'URIs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URIsShrink)) {
    query['URIs'] = request.URIsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteFileMeta(request: BatchDeleteFileMetaRequest): BatchDeleteFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteFileMetaWithOptions(request, runtime);
}

model BatchGetFileMetaRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URIs?: [ string ](name='URIs'),
}

model BatchGetFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URIsShrink?: string(name='URIs'),
}

model BatchGetFileMetaResponseBody = {
  files?: [
    File
  ](name='Files'),
  requestId?: string(name='RequestId', example='7F84C6D9-5AC0-49F9-914D-F02678E3****'),
}

model BatchGetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetFileMetaResponseBody(name='body'),
}

async function batchGetFileMetaWithOptions(tmpReq: BatchGetFileMetaRequest, runtime: Util.RuntimeOptions): BatchGetFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchGetFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.URIs)) {
    request.URIsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.URIs, 'URIs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URIsShrink)) {
    query['URIs'] = request.URIsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetFileMeta(request: BatchGetFileMetaRequest): BatchGetFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetFileMetaWithOptions(request, runtime);
}

model BatchIndexFileMetaRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  files?: [
    FileForReq
  ](name='Files'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model BatchIndexFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  filesShrink?: string(name='Files'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model BatchIndexFileMetaResponseBody = {
  eventId?: string(name='EventId', example='387-1DAPFFZplUZhuCuhnB6I9H****'),
  requestId?: string(name='RequestId', example='8F93E6D9-5AC0-49F9-914D-E02678A3****'),
}

model BatchIndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchIndexFileMetaResponseBody(name='body'),
}

async function batchIndexFileMetaWithOptions(tmpReq: BatchIndexFileMetaRequest, runtime: Util.RuntimeOptions): BatchIndexFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchIndexFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.filesShrink)) {
    query['Files'] = request.filesShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchIndexFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchIndexFileMeta(request: BatchIndexFileMetaRequest): BatchIndexFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchIndexFileMetaWithOptions(request, runtime);
}

model BatchUpdateFileMetaRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  files?: [
    FileForReq
  ](name='Files'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model BatchUpdateFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  filesShrink?: string(name='Files'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model BatchUpdateFileMetaResponseBody = {
  files?: [ 
    {
      message?: string(name='Message', example='*error.OpError : InvalidArgument | Index KV count exceeded, should be no more than 100.'),
      success?: boolean(name='Success', example='true'),
      URI?: string(name='URI', example='oss://imm-test-co-cn-beijing/zqh/input/Image/indexImage/nn1.jpg'),
    }
  ](name='Files'),
  requestId?: string(name='RequestId', example='F5BF215E-3237-0852-B9C6-F233D44A****'),
}

model BatchUpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUpdateFileMetaResponseBody(name='body'),
}

async function batchUpdateFileMetaWithOptions(tmpReq: BatchUpdateFileMetaRequest, runtime: Util.RuntimeOptions): BatchUpdateFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.filesShrink)) {
    query['Files'] = request.filesShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUpdateFileMeta(request: BatchUpdateFileMetaRequest): BatchUpdateFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateFileMetaWithOptions(request, runtime);
}

model CompareImageFacesRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='test-project'),
  source?: {
    URI1?: string(name='URI1', example='oss://test-bucket/test-object1'),
    URI2?: string(name='URI2', example='oss://test-bucket/test-object2'),
  }(name='Source'),
}

model CompareImageFacesShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourceShrink?: string(name='Source'),
}

model CompareImageFacesResponseBody = {
  requestId?: string(name='RequestId', example='F73AC982-2B9E-4ECD-AED5-F8331C5******'),
  similarity?: float(name='Similarity', example='0.8848152756690983'),
}

model CompareImageFacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompareImageFacesResponseBody(name='body'),
}

async function compareImageFacesWithOptions(tmpReq: CompareImageFacesRequest, runtime: Util.RuntimeOptions): CompareImageFacesResponse {
  Util.validateModel(tmpReq);
  var request = new CompareImageFacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.source)) {
    request.sourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.source, 'Source', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceShrink)) {
    query['Source'] = request.sourceShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompareImageFaces',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function compareImageFaces(request: CompareImageFacesRequest): CompareImageFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareImageFacesWithOptions(request, runtime);
}

model CreateArchiveFileInspectionTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-apitest-fxf2/name.zip'),
  targetURI?: string(name='TargetURI', example='oss://bucket/bucket.json'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateArchiveFileInspectionTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-apitest-fxf2/name.zip'),
  targetURI?: string(name='TargetURI', example='oss://bucket/bucket.json'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateArchiveFileInspectionTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='ArchiveFileInspection-8475218e-d86e-4c66-b3cf-50e74d6c****'),
}

model CreateArchiveFileInspectionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateArchiveFileInspectionTaskResponseBody(name='body'),
}

async function createArchiveFileInspectionTaskWithOptions(tmpReq: CreateArchiveFileInspectionTaskRequest, runtime: Util.RuntimeOptions): CreateArchiveFileInspectionTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateArchiveFileInspectionTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateArchiveFileInspectionTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createArchiveFileInspectionTask(request: CreateArchiveFileInspectionTaskRequest): CreateArchiveFileInspectionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createArchiveFileInspectionTaskWithOptions(request, runtime);
}

model CreateBindingRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  projectName?: string(name='ProjectName', example='test-project'),
  URI?: string(name='URI', example='oss://examplebucket'),
}

model CreateBindingResponseBody = {
  binding?: Binding(name='Binding'),
  requestId?: string(name='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model CreateBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBindingResponseBody(name='body'),
}

async function createBindingWithOptions(request: CreateBindingRequest, runtime: Util.RuntimeOptions): CreateBindingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBinding(request: CreateBindingRequest): CreateBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBindingWithOptions(request, runtime);
}

model CreateCompressPointCloudTaskRequest {
  compressMethod?: string(name='CompressMethod', example='octree'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  kdtreeOption?: KdtreeOption(name='KdtreeOption'),
  notifyTopicName?: string(name='NotifyTopicName', example='imm-regression-test-1'),
  octreeOption?: OctreeOption(name='OctreeOption'),
  pointCloudFields?: [ string ](name='PointCloudFields'),
  pointCloudFileFormat?: string(name='PointCloudFileFormat', example='pcd'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourceURI?: string(name='SourceURI', example='oss://test/src/test.pcd'),
  tags?: map[string]any(name='Tags', example='{"LabelKey": "Value"}'),
  targetURI?: string(name='TargetURI', example='oss://test/tgt'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateCompressPointCloudTaskShrinkRequest {
  compressMethod?: string(name='CompressMethod', example='octree'),
  credentialConfigShrink?: string(name='CredentialConfig'),
  kdtreeOptionShrink?: string(name='KdtreeOption'),
  notifyTopicName?: string(name='NotifyTopicName', example='imm-regression-test-1'),
  octreeOptionShrink?: string(name='OctreeOption'),
  pointCloudFieldsShrink?: string(name='PointCloudFields'),
  pointCloudFileFormat?: string(name='PointCloudFileFormat', example='pcd'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourceURI?: string(name='SourceURI', example='oss://test/src/test.pcd'),
  tagsShrink?: string(name='Tags', example='{"LabelKey": "Value"}'),
  targetURI?: string(name='TargetURI', example='oss://test/tgt'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateCompressPointCloudTaskResponseBody = {
  eventId?: string(name='EventId', example='0B7-1LR4Wcue1aBhk2xT85MfL*****'),
  requestId?: string(name='RequestId', example='CA995EFD-083D-4F40-BE8A-BDF75FFF****'),
  taskId?: string(name='TaskId', example='PointCloudCompress-badda57d-a3ab-4e6d-938f-49b77ce****'),
}

model CreateCompressPointCloudTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCompressPointCloudTaskResponseBody(name='body'),
}

async function createCompressPointCloudTaskWithOptions(tmpReq: CreateCompressPointCloudTaskRequest, runtime: Util.RuntimeOptions): CreateCompressPointCloudTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCompressPointCloudTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.kdtreeOption)) {
    request.kdtreeOptionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.kdtreeOption, 'KdtreeOption', 'json');
  }
  if (!Util.isUnset(tmpReq.octreeOption)) {
    request.octreeOptionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.octreeOption, 'OctreeOption', 'json');
  }
  if (!Util.isUnset(tmpReq.pointCloudFields)) {
    request.pointCloudFieldsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pointCloudFields, 'PointCloudFields', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.compressMethod)) {
    query['CompressMethod'] = request.compressMethod;
  }
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.kdtreeOptionShrink)) {
    query['KdtreeOption'] = request.kdtreeOptionShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.octreeOptionShrink)) {
    query['OctreeOption'] = request.octreeOptionShrink;
  }
  if (!Util.isUnset(request.pointCloudFieldsShrink)) {
    query['PointCloudFields'] = request.pointCloudFieldsShrink;
  }
  if (!Util.isUnset(request.pointCloudFileFormat)) {
    query['PointCloudFileFormat'] = request.pointCloudFileFormat;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCompressPointCloudTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCompressPointCloudTask(request: CreateCompressPointCloudTaskRequest): CreateCompressPointCloudTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCompressPointCloudTaskWithOptions(request, runtime);
}

model CreateCustomizedStoryRequest {
  cover?: {
    URI?: string(name='URI', example='oss://bucket1/cover'),
  }(name='Cover'),
  customLabels?: map[string]any(name='CustomLabels', example='{"Bucket": "examplebucket"}'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  files?: [ 
    {
      URI?: string(name='URI', example='[{"URI":"oss://bucket1/file1"}]'),
    }
  ](name='Files'),
  projectName?: string(name='ProjectName', example='immtest'),
  storyName?: string(name='StoryName', example='name1'),
  storySubType?: string(name='StorySubType', example='Solo'),
  storyType?: string(name='StoryType', example='PeopleMemory'),
}

model CreateCustomizedStoryShrinkRequest {
  coverShrink?: string(name='Cover'),
  customLabelsShrink?: string(name='CustomLabels', example='{"Bucket": "examplebucket"}'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  filesShrink?: string(name='Files'),
  projectName?: string(name='ProjectName', example='immtest'),
  storyName?: string(name='StoryName', example='name1'),
  storySubType?: string(name='StorySubType', example='Solo'),
  storyType?: string(name='StoryType', example='PeopleMemory'),
}

model CreateCustomizedStoryResponseBody = {
  objectId?: string(name='ObjectId', example='563062c0b085733f34ab****'),
  requestId?: string(name='RequestId', example='BC91D091-D49F-0ACD-95D5-F0621045****'),
}

model CreateCustomizedStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomizedStoryResponseBody(name='body'),
}

async function createCustomizedStoryWithOptions(tmpReq: CreateCustomizedStoryRequest, runtime: Util.RuntimeOptions): CreateCustomizedStoryResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCustomizedStoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cover)) {
    request.coverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cover, 'Cover', 'json');
  }
  if (!Util.isUnset(tmpReq.customLabels)) {
    request.customLabelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customLabels, 'CustomLabels', 'json');
  }
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverShrink)) {
    body['Cover'] = request.coverShrink;
  }
  if (!Util.isUnset(request.customLabelsShrink)) {
    body['CustomLabels'] = request.customLabelsShrink;
  }
  if (!Util.isUnset(request.datasetName)) {
    body['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.filesShrink)) {
    body['Files'] = request.filesShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.storyName)) {
    body['StoryName'] = request.storyName;
  }
  if (!Util.isUnset(request.storySubType)) {
    body['StorySubType'] = request.storySubType;
  }
  if (!Util.isUnset(request.storyType)) {
    body['StoryType'] = request.storyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomizedStory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomizedStory(request: CreateCustomizedStoryRequest): CreateCustomizedStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomizedStoryWithOptions(request, runtime);
}

model CreateDatasetRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', example='10'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', example='10000000000'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', example='100000000'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', example='100000000000'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', example='90000000000000000'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  description?: string(name='Description'),
  projectName?: string(name='ProjectName', example='immtest'),
  templateId?: string(name='TemplateId', example='Official:AllFunction'),
}

model CreateDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', example='6D74B3A9-5AC0-49F9-914D-E01589D3****'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDatasetWithOptions(request: CreateDatasetRequest, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetMaxBindCount)) {
    query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  }
  if (!Util.isUnset(request.datasetMaxEntityCount)) {
    query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  }
  if (!Util.isUnset(request.datasetMaxFileCount)) {
    query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  }
  if (!Util.isUnset(request.datasetMaxRelationCount)) {
    query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  }
  if (!Util.isUnset(request.datasetMaxTotalFileSize)) {
    query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetWithOptions(request, runtime);
}

model CreateFacesSearchingTaskRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResult?: string(name='MaxResult', example='100'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  projectName?: string(name='ProjectName', example='test-project'),
  sources?: [ 
    {
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Sources'),
  topK?: long(name='TopK', example='1'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}'),
}

model CreateFacesSearchingTaskShrinkRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResult?: string(name='MaxResult', example='100'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourcesShrink?: string(name='Sources'),
  topK?: long(name='TopK', example='1'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}'),
}

model CreateFacesSearchingTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16****'),
  requestId?: string(name='RequestId', example='B1E79399-05F7-06D8-95FE-EBE17BA*****'),
  taskId?: string(name='TaskId', example='CreateFacesSearchingTask-00bec802-073a-4b61-ba*****'),
}

model CreateFacesSearchingTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFacesSearchingTaskResponseBody(name='body'),
}

async function createFacesSearchingTaskWithOptions(tmpReq: CreateFacesSearchingTaskRequest, runtime: Util.RuntimeOptions): CreateFacesSearchingTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFacesSearchingTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sources)) {
    request.sourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sources, 'Sources', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxResult)) {
    query['MaxResult'] = request.maxResult;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourcesShrink)) {
    query['Sources'] = request.sourcesShrink;
  }
  if (!Util.isUnset(request.topK)) {
    query['TopK'] = request.topK;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFacesSearchingTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFacesSearchingTask(request: CreateFacesSearchingTaskRequest): CreateFacesSearchingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFacesSearchingTaskWithOptions(request, runtime);
}

model CreateFigureClusteringTaskRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateFigureClusteringTaskShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  tagsShrink?: string(name='Tags', example='{"test": "val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateFigureClusteringTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16****'),
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='formatconvert-00bec802-073a-4b61-ba3b-39bc****'),
}

model CreateFigureClusteringTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFigureClusteringTaskResponseBody(name='body'),
}

async function createFigureClusteringTaskWithOptions(tmpReq: CreateFigureClusteringTaskRequest, runtime: Util.RuntimeOptions): CreateFigureClusteringTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFigureClusteringTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFigureClusteringTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFigureClusteringTask(request: CreateFigureClusteringTaskRequest): CreateFigureClusteringTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFigureClusteringTaskWithOptions(request, runtime);
}

model CreateFigureClustersMergingTaskRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  from?: string(name='From', example='Cluster-2ab85905-23ba-4632-b2d8-1c21cfe****'),
  notifyTopicName?: string(name='NotifyTopicName', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
  projectName?: string(name='ProjectName', example='immtest'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}'),
  to?: string(name='To', example='Cluster-4a3a71c1-c092-4788-8826-2f65d17****'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateFigureClustersMergingTaskShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  from?: string(name='From', example='Cluster-2ab85905-23ba-4632-b2d8-1c21cfe****'),
  notifyTopicName?: string(name='NotifyTopicName', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
  projectName?: string(name='ProjectName', example='immtest'),
  tagsShrink?: string(name='Tags', example='{"key":"val"}'),
  to?: string(name='To', example='Cluster-4a3a71c1-c092-4788-8826-2f65d17****'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateFigureClustersMergingTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16E****'),
  requestId?: string(name='RequestId', example='CA995EFD-083D-4F40-BE8A-BDF75FF****'),
  taskId?: string(name='TaskId', example='92376fbb-171f-4259-913f-705f7ee0****'),
}

model CreateFigureClustersMergingTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFigureClustersMergingTaskResponseBody(name='body'),
}

async function createFigureClustersMergingTaskWithOptions(tmpReq: CreateFigureClustersMergingTaskRequest, runtime: Util.RuntimeOptions): CreateFigureClustersMergingTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFigureClustersMergingTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFigureClustersMergingTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFigureClustersMergingTask(request: CreateFigureClustersMergingTaskRequest): CreateFigureClustersMergingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFigureClustersMergingTaskWithOptions(request, runtime);
}

model CreateFileCompressionTaskRequest {
  compressedFormat?: string(name='CompressedFormat', example='zip'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceManifestURI?: string(name='SourceManifestURI', example='oss://test-bucket/test-object.json'),
  sources?: [ 
    {
      alias?: string(name='Alias', example='/new-dir/'),
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Sources'),
  targetURI?: string(name='TargetURI', example='oss://test-bucket/test-target-object.zip'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}'),
}

model CreateFileCompressionTaskShrinkRequest {
  compressedFormat?: string(name='CompressedFormat', example='zip'),
  credentialConfigShrink?: string(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceManifestURI?: string(name='SourceManifestURI', example='oss://test-bucket/test-object.json'),
  sourcesShrink?: string(name='Sources'),
  targetURI?: string(name='TargetURI', example='oss://test-bucket/test-target-object.zip'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}'),
}

model CreateFileCompressionTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='FileCompression-3579a380-6f7a-4a9d-b9d2-65996*****'),
}

model CreateFileCompressionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileCompressionTaskResponseBody(name='body'),
}

async function createFileCompressionTaskWithOptions(tmpReq: CreateFileCompressionTaskRequest, runtime: Util.RuntimeOptions): CreateFileCompressionTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFileCompressionTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.sources)) {
    request.sourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sources, 'Sources', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.compressedFormat)) {
    query['CompressedFormat'] = request.compressedFormat;
  }
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceManifestURI)) {
    query['SourceManifestURI'] = request.sourceManifestURI;
  }
  if (!Util.isUnset(request.sourcesShrink)) {
    query['Sources'] = request.sourcesShrink;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileCompressionTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFileCompressionTask(request: CreateFileCompressionTaskRequest): CreateFileCompressionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileCompressionTaskWithOptions(request, runtime);
}

model CreateFileUncompressionTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  projectName?: string(name='ProjectName', example='immtest'),
  selectedFiles?: [ string ](name='SelectedFiles'),
  sourceURI?: string(name='SourceURI', example='oss://imm-apitest-fxf2/name.zip'),
  target?: {
    manifestURI?: string(name='ManifestURI', example='oss://imm-apitest-fxf1/test/TaskResultURI.json'),
    URI?: string(name='URI', example='oss://imm-apitest-fxf1/test'),
  }(name='Target'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateFileUncompressionTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  projectName?: string(name='ProjectName', example='immtest'),
  selectedFilesShrink?: string(name='SelectedFiles'),
  sourceURI?: string(name='SourceURI', example='oss://imm-apitest-fxf2/name.zip'),
  targetShrink?: string(name='Target'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateFileUncompressionTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='FileUncompression-16ab5dd6-af02-480e-9ed7-a8d51b1*****'),
}

model CreateFileUncompressionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileUncompressionTaskResponseBody(name='body'),
}

async function createFileUncompressionTaskWithOptions(tmpReq: CreateFileUncompressionTaskRequest, runtime: Util.RuntimeOptions): CreateFileUncompressionTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFileUncompressionTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.selectedFiles)) {
    request.selectedFilesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedFiles, 'SelectedFiles', 'json');
  }
  if (!Util.isUnset(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.selectedFilesShrink)) {
    query['SelectedFiles'] = request.selectedFilesShrink;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.targetShrink)) {
    query['Target'] = request.targetShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileUncompressionTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFileUncompressionTask(request: CreateFileUncompressionTaskRequest): CreateFileUncompressionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileUncompressionTaskWithOptions(request, runtime);
}

model CreateImageModerationTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  interval?: long(name='Interval', example='2'),
  maxFrames?: long(name='MaxFrames', example='10'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  reviewer?: string(name='Reviewer', example='auto'),
  scenes?: [ string ](name='Scenes'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateImageModerationTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  interval?: long(name='Interval', example='2'),
  maxFrames?: long(name='MaxFrames', example='10'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  reviewer?: string(name='Reviewer', example='auto'),
  scenesShrink?: string(name='Scenes'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
  tagsShrink?: string(name='Tags', example='{"test": "val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateImageModerationTaskResponseBody = {
  eventId?: string(name='EventId', example='2E6-1I0FGn0zFnl5AflRfhzClma*****'),
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='ImageModeration-179ef4f8-d583-4f0c-a293-7c0889c*****'),
}

model CreateImageModerationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageModerationTaskResponseBody(name='body'),
}

async function createImageModerationTaskWithOptions(tmpReq: CreateImageModerationTaskRequest, runtime: Util.RuntimeOptions): CreateImageModerationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateImageModerationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.scenes)) {
    request.scenesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scenes, 'Scenes', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.maxFrames)) {
    query['MaxFrames'] = request.maxFrames;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.reviewer)) {
    query['Reviewer'] = request.reviewer;
  }
  if (!Util.isUnset(request.scenesShrink)) {
    query['Scenes'] = request.scenesShrink;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageModerationTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageModerationTask(request: CreateImageModerationTaskRequest): CreateImageModerationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageModerationTaskWithOptions(request, runtime);
}

model CreateImageSplicingTaskRequest {
  align?: long(name='Align', example='192'),
  backgroundColor?: string(name='BackgroundColor', example='red'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  direction?: string(name='Direction', example='vertical'),
  imageFormat?: string(name='ImageFormat', example='jpg'),
  margin?: long(name='Margin', example='2'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  padding?: long(name='Padding', example='2'),
  projectName?: string(name='ProjectName', example='test-project'),
  quality?: long(name='Quality', example='80'),
  scaleType?: string(name='ScaleType', example='stretch'),
  sources?: [ 
    {
      rotate?: long(name='Rotate', example='90'),
      URI?: string(name='URI', example='oss://test-bucket/test-object.jpg'),
    }
  ](name='Sources'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}'),
  targetURI?: string(name='TargetURI', example='oss://test-bucket/test-target-object.jpg'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateImageSplicingTaskShrinkRequest {
  align?: long(name='Align', example='192'),
  backgroundColor?: string(name='BackgroundColor', example='red'),
  credentialConfigShrink?: string(name='CredentialConfig'),
  direction?: string(name='Direction', example='vertical'),
  imageFormat?: string(name='ImageFormat', example='jpg'),
  margin?: long(name='Margin', example='2'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  padding?: long(name='Padding', example='2'),
  projectName?: string(name='ProjectName', example='test-project'),
  quality?: long(name='Quality', example='80'),
  scaleType?: string(name='ScaleType', example='stretch'),
  sourcesShrink?: string(name='Sources'),
  tagsShrink?: string(name='Tags', example='{"key":"val"}'),
  targetURI?: string(name='TargetURI', example='oss://test-bucket/test-target-object.jpg'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateImageSplicingTaskResponseBody = {
  eventId?: string(name='EventId', example='10C-1R6p7Km0H5Ieg38LKXTIvw*****'),
  requestId?: string(name='RequestId', example='94D6F994-E298-037E-8E8B-0090F27*****'),
  taskId?: string(name='TaskId', example='ImageSplicing-537cc157-7645-444a-a631-c8db4d02*****'),
}

model CreateImageSplicingTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageSplicingTaskResponseBody(name='body'),
}

async function createImageSplicingTaskWithOptions(tmpReq: CreateImageSplicingTaskRequest, runtime: Util.RuntimeOptions): CreateImageSplicingTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateImageSplicingTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.sources)) {
    request.sourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sources, 'Sources', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.align)) {
    query['Align'] = request.align;
  }
  if (!Util.isUnset(request.backgroundColor)) {
    query['BackgroundColor'] = request.backgroundColor;
  }
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.imageFormat)) {
    query['ImageFormat'] = request.imageFormat;
  }
  if (!Util.isUnset(request.margin)) {
    query['Margin'] = request.margin;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.padding)) {
    query['Padding'] = request.padding;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.quality)) {
    query['Quality'] = request.quality;
  }
  if (!Util.isUnset(request.scaleType)) {
    query['ScaleType'] = request.scaleType;
  }
  if (!Util.isUnset(request.sourcesShrink)) {
    query['Sources'] = request.sourcesShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageSplicingTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageSplicingTask(request: CreateImageSplicingTaskRequest): CreateImageSplicingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageSplicingTaskWithOptions(request, runtime);
}

model CreateImageToPDFTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  projectName?: string(name='ProjectName', example='test-project'),
  sources?: [ 
    {
      rotate?: long(name='Rotate', example='90'),
      URI?: string(name='URI', example='oss://test-bucket/test-object.jpg'),
    }
  ](name='Sources'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}'),
  targetURI?: string(name='TargetURI', example='oss://test-bucket/test-target-object.pdf'),
  userData?: string(name='UserData', example='test'),
}

model CreateImageToPDFTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourcesShrink?: string(name='Sources'),
  tagsShrink?: string(name='Tags', example='{"test":"val1"}'),
  targetURI?: string(name='TargetURI', example='oss://test-bucket/test-target-object.pdf'),
  userData?: string(name='UserData', example='test'),
}

model CreateImageToPDFTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es*****'),
  requestId?: string(name='RequestId', example='EC564A9A-BA5C-4499-A087-D9B9E76E*****'),
  taskId?: string(name='TaskId', example='ImageToPDF-cbe6ae3e-f8dc-4566-9da7-535d5d*****'),
}

model CreateImageToPDFTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageToPDFTaskResponseBody(name='body'),
}

async function createImageToPDFTaskWithOptions(tmpReq: CreateImageToPDFTaskRequest, runtime: Util.RuntimeOptions): CreateImageToPDFTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateImageToPDFTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.sources)) {
    request.sourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sources, 'Sources', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourcesShrink)) {
    query['Sources'] = request.sourcesShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageToPDFTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageToPDFTask(request: CreateImageToPDFTaskRequest): CreateImageToPDFTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageToPDFTaskWithOptions(request, runtime);
}

model CreateLocationDateClusteringTaskRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  dateOptions?: {
    gapDays?: long(name='GapDays', example='1'),
    maxDays?: long(name='MaxDays', example='9999'),
    minDays?: long(name='MinDays', example='1'),
  }(name='DateOptions'),
  locationOptions?: {
    locationDateClusterLevels?: [ string ](name='LocationDateClusterLevels'),
  }(name='LocationOptions'),
  notifyTopicName?: string(name='NotifyTopicName', example='NotifyTopicName1'),
  projectName?: string(name='ProjectName', example='immtest'),
  tags?: map[string]any(name='Tags', example='\\"{"key":"value"}\\"'),
  userData?: string(name='UserData', example='test'),
}

model CreateLocationDateClusteringTaskShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  dateOptionsShrink?: string(name='DateOptions'),
  locationOptionsShrink?: string(name='LocationOptions'),
  notifyTopicName?: string(name='NotifyTopicName', example='NotifyTopicName1'),
  projectName?: string(name='ProjectName', example='immtest'),
  tagsShrink?: string(name='Tags', example='\\"{"key":"value"}\\"'),
  userData?: string(name='UserData', example='test'),
}

model CreateLocationDateClusteringTaskResponseBody = {
  eventId?: string(name='EventId', example='9bab56e8****'),
  requestId?: string(name='RequestId', example='B121940C-9794-4EE3-8D6E-F8EC525F****'),
  taskId?: string(name='TaskId', example='SpaceTimeClustering-9bab56e8-e596-421a-b1f5-9ad1ab87****'),
}

model CreateLocationDateClusteringTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLocationDateClusteringTaskResponseBody(name='body'),
}

async function createLocationDateClusteringTaskWithOptions(tmpReq: CreateLocationDateClusteringTaskRequest, runtime: Util.RuntimeOptions): CreateLocationDateClusteringTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLocationDateClusteringTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dateOptions)) {
    request.dateOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dateOptions, 'DateOptions', 'json');
  }
  if (!Util.isUnset(tmpReq.locationOptions)) {
    request.locationOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationOptions, 'LocationOptions', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.dateOptionsShrink)) {
    query['DateOptions'] = request.dateOptionsShrink;
  }
  if (!Util.isUnset(request.locationOptionsShrink)) {
    query['LocationOptions'] = request.locationOptionsShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLocationDateClusteringTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLocationDateClusteringTask(request: CreateLocationDateClusteringTaskRequest): CreateLocationDateClusteringTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLocationDateClusteringTaskWithOptions(request, runtime);
}

model CreateMediaConvertTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  sources?: [ 
    {
      duration?: double(name='Duration', example='0'),
      startTime?: double(name='StartTime', example='0'),
      subtitles?: [ 
        {
          language?: string(name='Language', example='eng'),
          timeOffset?: double(name='TimeOffset', example='10.5'),
          URI?: string(name='URI', example='oss://test-bucket/subtitles'),
        }
      ](name='Subtitles'),
      URI?: string(name='URI', example='oss://test-bucket/test-object'),
    }
  ](name='Sources'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}'),
  targets?: [ 
    {
      audio?: {
        disableAudio?: boolean(name='DisableAudio', example='false'),
        filterAudio?: {
          mixing?: boolean(name='Mixing', example='false'),
        }(name='FilterAudio'),
        transcodeAudio?: {
          bitrate?: int32(name='Bitrate', example='128000'),
          bitrateOption?: string(name='BitrateOption', example='fixed'),
          channel?: int32(name='Channel', example='2'),
          codec?: string(name='Codec', example='aac'),
          quality?: int32(name='Quality', example='1'),
          sampleRate?: int32(name='SampleRate', example='44100'),
          sampleRateOption?: string(name='SampleRateOption', example='fixed'),
        }(name='TranscodeAudio'),
      }(name='Audio'),
      container?: string(name='Container', example='mp4'),
      image?: {
        snapshots?: [ 
          {
            format?: string(name='Format', example='png'),
            height?: int32(name='Height', example='640'),
            interval?: double(name='Interval', example='0.5'),
            number?: int32(name='Number', example='5'),
            scaleType?: string(name='ScaleType', example='stretch'),
            startTime?: double(name='StartTime', example='0'),
            URI?: string(name='URI', example='oss://test-bucket/snapshots'),
            width?: int32(name='Width', example='640'),
          }
        ](name='Snapshots'),
        sprites?: [ 
          {
            format?: string(name='Format', example='png'),
            interval?: double(name='Interval', example='0.5'),
            margin?: int32(name='Margin', example='2'),
            number?: int32(name='Number', example='0'),
            pad?: int32(name='Pad', example='2'),
            scaleHeight?: float(name='ScaleHeight', example='1.0'),
            scaleType?: string(name='ScaleType', example='stretch'),
            scaleWidth?: float(name='ScaleWidth', example='1.0'),
            startTime?: double(name='StartTime', example='0'),
            tileHeight?: int32(name='TileHeight', example='6'),
            tileWidth?: int32(name='TileWidth', example='6'),
            URI?: string(name='URI', example='oss://test-bucket/sprites'),
          }
        ](name='Sprites'),
      }(name='Image'),
      preset?: PresetReference(name='Preset'),
      segment?: {
        duration?: double(name='Duration', example='30'),
        format?: string(name='Format', example='hls'),
        startNumber?: int32(name='StartNumber', example='5'),
      }(name='Segment'),
      speed?: float(name='Speed', example='1.0'),
      subtitle?: {
        disableSubtitle?: boolean(name='DisableSubtitle', example='false'),
        extractSubtitle?: {
          format?: string(name='Format', example='srt'),
          URI?: string(name='URI', example='oss://test-bucket/extractsubtitle'),
        }(name='ExtractSubtitle'),
      }(name='Subtitle'),
      URI?: string(name='URI', example='oss://test-bucket/targets'),
      video?: {
        disableVideo?: boolean(name='DisableVideo', example='false'),
        filterVideo?: {
          delogos?: [ 
            {
              duration?: double(name='Duration', example='15.23234'),
              dx?: float(name='Dx', example='0'),
              dy?: float(name='Dy', example='0'),
              height?: float(name='Height', example='2'),
              referPos?: string(name='ReferPos', example='topleft'),
              startTime?: double(name='StartTime', example='0'),
              width?: float(name='Width', example='2'),
            }
          ](name='Delogos'),
          watermarks?: [ 
            {
              borderColor?: string(name='BorderColor', example='#000000'),
              borderWidth?: int32(name='BorderWidth', example='0'),
              content?: string(name='Content', example='example'),
              duration?: double(name='Duration', example='0'),
              dx?: float(name='Dx', example='0'),
              dy?: float(name='Dy', example='0'),
              fontApha?: float(name='FontApha', example='1.0'),
              fontColor?: string(name='FontColor', example='#000000'),
              fontName?: string(name='FontName', example='SourceHanSans-Regular'),
              fontSize?: int32(name='FontSize', example='16'),
              height?: float(name='Height', example='2'),
              referPos?: string(name='ReferPos', example='topleft'),
              startTime?: double(name='StartTime', example='0'),
              type?: string(name='Type', example='text'),
              URI?: string(name='URI', example='oss://test-bucket/watermarks'),
              width?: float(name='Width', example='2'),
            }
          ](name='Watermarks'),
        }(name='FilterVideo'),
        transcodeVideo?: {
          adaptiveResolutionDirection?: boolean(name='AdaptiveResolutionDirection', example='true'),
          BFrames?: int32(name='BFrames', example='3'),
          bitrate?: int32(name='Bitrate', example='128000'),
          bitrateOption?: string(name='BitrateOption', example='fixed'),
          bufferSize?: int32(name='BufferSize', example='4000000'),
          CRF?: float(name='CRF', example='20'),
          codec?: string(name='Codec', example='h264'),
          frameRate?: float(name='FrameRate', example='25'),
          frameRateOption?: string(name='FrameRateOption', example='fixed'),
          GOPSize?: int32(name='GOPSize', example='60'),
          maxBitrate?: int32(name='MaxBitrate', example='1000000'),
          pixelFormat?: string(name='PixelFormat', example='yuv420p'),
          refs?: int32(name='Refs', example='2'),
          resolution?: string(name='Resolution', example='640x480'),
          resolutionOption?: string(name='ResolutionOption', example='fixed'),
          rotation?: int32(name='Rotation', example='0'),
          scaleType?: string(name='ScaleType', example='stretch'),
        }(name='TranscodeVideo'),
      }(name='Video'),
    }
  ](name='Targets'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateMediaConvertTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourcesShrink?: string(name='Sources'),
  tagsShrink?: string(name='Tags', example='{"test":"val1"}'),
  targetsShrink?: string(name='Targets'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateMediaConvertTaskResponseBody = {
  eventId?: string(name='EventId', example='0ED-1Bz8z71k5TtsUejT4UJ16Es****'),
  requestId?: string(name='RequestId', example='CA995EFD-083D-4F40-BE8A-BDF75FFFE0B6'),
  taskId?: string(name='TaskId', example='MediaConvert-adb1ee28-c4c9-42a7-9f54-3b8eadcb****'),
}

model CreateMediaConvertTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMediaConvertTaskResponseBody(name='body'),
}

async function createMediaConvertTaskWithOptions(tmpReq: CreateMediaConvertTaskRequest, runtime: Util.RuntimeOptions): CreateMediaConvertTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMediaConvertTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.sources)) {
    request.sourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sources, 'Sources', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  if (!Util.isUnset(tmpReq.targets)) {
    request.targetsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targets, 'Targets', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourcesShrink)) {
    query['Sources'] = request.sourcesShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.targetsShrink)) {
    query['Targets'] = request.targetsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMediaConvertTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMediaConvertTask(request: CreateMediaConvertTaskRequest): CreateMediaConvertTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMediaConvertTaskWithOptions(request, runtime);
}

model CreateOfficeConversionTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  endPage?: long(name='EndPage', example='-1'),
  firstPage?: boolean(name='FirstPage', example='false'),
  fitToHeight?: boolean(name='FitToHeight', example='false'),
  fitToWidth?: boolean(name='FitToWidth', example='false'),
  holdLineFeed?: boolean(name='HoldLineFeed', example='false'),
  imageDPI?: long(name='ImageDPI', example='96'),
  longPicture?: boolean(name='LongPicture', example='false'),
  longText?: boolean(name='LongText', example='false'),
  maxSheetColumn?: long(name='MaxSheetColumn', example='10'),
  maxSheetRow?: long(name='MaxSheetRow', example='10'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  pages?: string(name='Pages', example='1,2-4,7'),
  paperHorizontal?: boolean(name='PaperHorizontal', example='false'),
  paperSize?: string(name='PaperSize', example='A4'),
  password?: string(name='Password', example='********'),
  projectName?: string(name='ProjectName', example='immtest'),
  quality?: long(name='Quality', example='60'),
  scalePercentage?: long(name='ScalePercentage', example='100'),
  sheetCount?: long(name='SheetCount', example='1'),
  sheetIndex?: long(name='SheetIndex', example='1'),
  showComments?: boolean(name='ShowComments', example='false'),
  sourceType?: string(name='SourceType', example='doc'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
  startPage?: long(name='StartPage', example='1'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}'),
  targetType?: string(name='TargetType', example='png'),
  targetURI?: string(name='TargetURI', example='oss://{bucket}/{tags.custom}/{dirname}/{barename}.{autoext}'),
  targetURIPrefix?: string(name='TargetURIPrefix', example='oss://bucket1/'),
  trimPolicy?: TrimPolicy(name='TrimPolicy'),
  userData?: string(name='UserData', example='{"file_id": "abc"}'),
}

model CreateOfficeConversionTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  endPage?: long(name='EndPage', example='-1'),
  firstPage?: boolean(name='FirstPage', example='false'),
  fitToHeight?: boolean(name='FitToHeight', example='false'),
  fitToWidth?: boolean(name='FitToWidth', example='false'),
  holdLineFeed?: boolean(name='HoldLineFeed', example='false'),
  imageDPI?: long(name='ImageDPI', example='96'),
  longPicture?: boolean(name='LongPicture', example='false'),
  longText?: boolean(name='LongText', example='false'),
  maxSheetColumn?: long(name='MaxSheetColumn', example='10'),
  maxSheetRow?: long(name='MaxSheetRow', example='10'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  pages?: string(name='Pages', example='1,2-4,7'),
  paperHorizontal?: boolean(name='PaperHorizontal', example='false'),
  paperSize?: string(name='PaperSize', example='A4'),
  password?: string(name='Password', example='********'),
  projectName?: string(name='ProjectName', example='immtest'),
  quality?: long(name='Quality', example='60'),
  scalePercentage?: long(name='ScalePercentage', example='100'),
  sheetCount?: long(name='SheetCount', example='1'),
  sheetIndex?: long(name='SheetIndex', example='1'),
  showComments?: boolean(name='ShowComments', example='false'),
  sourceType?: string(name='SourceType', example='doc'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
  startPage?: long(name='StartPage', example='1'),
  tagsShrink?: string(name='Tags', example='{"test":"val1"}'),
  targetType?: string(name='TargetType', example='png'),
  targetURI?: string(name='TargetURI', example='oss://{bucket}/{tags.custom}/{dirname}/{barename}.{autoext}'),
  targetURIPrefix?: string(name='TargetURIPrefix', example='oss://bucket1/'),
  trimPolicyShrink?: string(name='TrimPolicy'),
  userData?: string(name='UserData', example='{"file_id": "abc"}'),
}

model CreateOfficeConversionTaskResponseBody = {
  eventId?: string(name='EventId', example='2C2-1I0EG57VR37J4rQ8oKG6C9*****'),
  requestId?: string(name='RequestId', example='FF3B7D81-66AE-47E0-BF69-157DCF18*****'),
  taskId?: string(name='TaskId', example='formatconvert-00bec802-073a-4b61-ba3b-39bc2fdd*****'),
}

model CreateOfficeConversionTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOfficeConversionTaskResponseBody(name='body'),
}

async function createOfficeConversionTaskWithOptions(tmpReq: CreateOfficeConversionTaskRequest, runtime: Util.RuntimeOptions): CreateOfficeConversionTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOfficeConversionTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  if (!Util.isUnset(tmpReq.trimPolicy)) {
    request.trimPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trimPolicy, 'TrimPolicy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.endPage)) {
    query['EndPage'] = request.endPage;
  }
  if (!Util.isUnset(request.firstPage)) {
    query['FirstPage'] = request.firstPage;
  }
  if (!Util.isUnset(request.fitToHeight)) {
    query['FitToHeight'] = request.fitToHeight;
  }
  if (!Util.isUnset(request.fitToWidth)) {
    query['FitToWidth'] = request.fitToWidth;
  }
  if (!Util.isUnset(request.holdLineFeed)) {
    query['HoldLineFeed'] = request.holdLineFeed;
  }
  if (!Util.isUnset(request.imageDPI)) {
    query['ImageDPI'] = request.imageDPI;
  }
  if (!Util.isUnset(request.longPicture)) {
    query['LongPicture'] = request.longPicture;
  }
  if (!Util.isUnset(request.longText)) {
    query['LongText'] = request.longText;
  }
  if (!Util.isUnset(request.maxSheetColumn)) {
    query['MaxSheetColumn'] = request.maxSheetColumn;
  }
  if (!Util.isUnset(request.maxSheetRow)) {
    query['MaxSheetRow'] = request.maxSheetRow;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.pages)) {
    query['Pages'] = request.pages;
  }
  if (!Util.isUnset(request.paperHorizontal)) {
    query['PaperHorizontal'] = request.paperHorizontal;
  }
  if (!Util.isUnset(request.paperSize)) {
    query['PaperSize'] = request.paperSize;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.quality)) {
    query['Quality'] = request.quality;
  }
  if (!Util.isUnset(request.scalePercentage)) {
    query['ScalePercentage'] = request.scalePercentage;
  }
  if (!Util.isUnset(request.sheetCount)) {
    query['SheetCount'] = request.sheetCount;
  }
  if (!Util.isUnset(request.sheetIndex)) {
    query['SheetIndex'] = request.sheetIndex;
  }
  if (!Util.isUnset(request.showComments)) {
    query['ShowComments'] = request.showComments;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.startPage)) {
    query['StartPage'] = request.startPage;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.targetURI)) {
    query['TargetURI'] = request.targetURI;
  }
  if (!Util.isUnset(request.targetURIPrefix)) {
    query['TargetURIPrefix'] = request.targetURIPrefix;
  }
  if (!Util.isUnset(request.trimPolicyShrink)) {
    query['TrimPolicy'] = request.trimPolicyShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOfficeConversionTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOfficeConversionTask(request: CreateOfficeConversionTaskRequest): CreateOfficeConversionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOfficeConversionTaskWithOptions(request, runtime);
}

model CreateProjectRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', example='10'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', example='10000000000'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', example='100000000'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', example='100000000000'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', example='90000000000000000'),
  description?: string(name='Description'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', example='1000000000'),
  projectName?: string(name='ProjectName', example='immtest'),
  serviceRole?: string(name='ServiceRole', example='AliyunIMMDefaultRole'),
  templateId?: string(name='TemplateId', example='Official:AllFunction'),
}

model CreateProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', example='7F7D235C-76FF-4B65-800C-8238AE3F****'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetMaxBindCount)) {
    query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  }
  if (!Util.isUnset(request.datasetMaxEntityCount)) {
    query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  }
  if (!Util.isUnset(request.datasetMaxFileCount)) {
    query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  }
  if (!Util.isUnset(request.datasetMaxRelationCount)) {
    query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  }
  if (!Util.isUnset(request.datasetMaxTotalFileSize)) {
    query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.projectMaxDatasetCount)) {
    query['ProjectMaxDatasetCount'] = request.projectMaxDatasetCount;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.serviceRole)) {
    query['ServiceRole'] = request.serviceRole;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model CreateStoryRequest {
  address?: AddressForStory(name='Address'),
  customId?: string(name='CustomId', example='test'),
  customLabels?: map[string]any(name='CustomLabels', example='{"Bucket": "examplebucket"}'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxFileCount?: long(name='MaxFileCount', example='3'),
  minFileCount?: long(name='MinFileCount', example='1'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='test-project'),
  storyEndTime?: string(name='StoryEndTime', example='2021-12-30T16:00:00Z'),
  storyName?: string(name='StoryName', example='name1'),
  storyStartTime?: string(name='StoryStartTime', example='2016-12-30T16:00:00Z'),
  storySubType?: string(name='StorySubType', example='Solo'),
  storyType?: string(name='StoryType', example='PeopleMemory'),
  tags?: map[string]any(name='Tags', example='{"key":"val"}'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}'),
}

model CreateStoryShrinkRequest {
  addressShrink?: string(name='Address'),
  customId?: string(name='CustomId', example='test'),
  customLabelsShrink?: string(name='CustomLabels', example='{"Bucket": "examplebucket"}'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxFileCount?: long(name='MaxFileCount', example='3'),
  minFileCount?: long(name='MinFileCount', example='1'),
  notifyTopicName?: string(name='NotifyTopicName', example='test-topic'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='test-project'),
  storyEndTime?: string(name='StoryEndTime', example='2021-12-30T16:00:00Z'),
  storyName?: string(name='StoryName', example='name1'),
  storyStartTime?: string(name='StoryStartTime', example='2016-12-30T16:00:00Z'),
  storySubType?: string(name='StorySubType', example='Solo'),
  storyType?: string(name='StoryType', example='PeopleMemory'),
  tagsShrink?: string(name='Tags', example='{"key":"val"}'),
  userData?: string(name='UserData', example='{"ID": "testuid","Name": "test-user","Avatar": "http://test.com/testuid"}'),
}

model CreateStoryResponseBody = {
  eventId?: string(name='EventId', example='392-1CqzvESGTEeNZ2OWFbRKIM****'),
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='CreateStory-4ef6ff43-edf3-4612-9cc4-0c7f9e19****'),
}

model CreateStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStoryResponseBody(name='body'),
}

async function createStoryWithOptions(tmpReq: CreateStoryRequest, runtime: Util.RuntimeOptions): CreateStoryResponse {
  Util.validateModel(tmpReq);
  var request = new CreateStoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.address)) {
    request.addressShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.address, 'Address', 'json');
  }
  if (!Util.isUnset(tmpReq.customLabels)) {
    request.customLabelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customLabels, 'CustomLabels', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addressShrink)) {
    body['Address'] = request.addressShrink;
  }
  if (!Util.isUnset(request.customId)) {
    body['CustomId'] = request.customId;
  }
  if (!Util.isUnset(request.customLabelsShrink)) {
    body['CustomLabels'] = request.customLabelsShrink;
  }
  if (!Util.isUnset(request.datasetName)) {
    body['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxFileCount)) {
    body['MaxFileCount'] = request.maxFileCount;
  }
  if (!Util.isUnset(request.minFileCount)) {
    body['MinFileCount'] = request.minFileCount;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    body['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.objectId)) {
    body['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.storyEndTime)) {
    body['StoryEndTime'] = request.storyEndTime;
  }
  if (!Util.isUnset(request.storyName)) {
    body['StoryName'] = request.storyName;
  }
  if (!Util.isUnset(request.storyStartTime)) {
    body['StoryStartTime'] = request.storyStartTime;
  }
  if (!Util.isUnset(request.storySubType)) {
    body['StorySubType'] = request.storySubType;
  }
  if (!Util.isUnset(request.storyType)) {
    body['StoryType'] = request.storyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateStory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStory(request: CreateStoryRequest): CreateStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStoryWithOptions(request, runtime);
}

model CreateVideoLabelClassificationTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucket1/object'),
  tags?: map[string]any(name='Tags', example='{"test":"val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateVideoLabelClassificationTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucket1/object'),
  tagsShrink?: string(name='Tags', example='{"test":"val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateVideoLabelClassificationTaskResponseBody = {
  eventId?: string(name='EventId', example='03F-1Qt1Yn5RZZ0Zh3ZdYlDblv7****'),
  requestId?: string(name='RequestId', example='CA995EFD-083D-4F40-BE8A-BDF75FFFE0B6'),
  taskId?: string(name='TaskId', example='VideoLabelClassification-2f157087-91df-4fda-8c3e-232407ec*****'),
}

model CreateVideoLabelClassificationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVideoLabelClassificationTaskResponseBody(name='body'),
}

async function createVideoLabelClassificationTaskWithOptions(tmpReq: CreateVideoLabelClassificationTaskRequest, runtime: Util.RuntimeOptions): CreateVideoLabelClassificationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateVideoLabelClassificationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVideoLabelClassificationTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVideoLabelClassificationTask(request: CreateVideoLabelClassificationTaskRequest): CreateVideoLabelClassificationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoLabelClassificationTaskWithOptions(request, runtime);
}

model CreateVideoModerationTaskRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  interval?: long(name='Interval', example='1'),
  maxFrames?: long(name='MaxFrames', example='200'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  reviewer?: string(name='Reviewer', example='auto'),
  scenes?: [ string ](name='Scenes'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateVideoModerationTaskShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  interval?: long(name='Interval', example='1'),
  maxFrames?: long(name='MaxFrames', example='200'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  projectName?: string(name='ProjectName', example='immtest'),
  reviewer?: string(name='Reviewer', example='auto'),
  scenesShrink?: string(name='Scenes'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
  tagsShrink?: string(name='Tags', example='{"test": "val1"}'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model CreateVideoModerationTaskResponseBody = {
  eventId?: string(name='EventId', example='2E6-1I0FGn0zFnl5AflRfhzClma*****'),
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  taskId?: string(name='TaskId', example='VideoModeration-9442a216-4691-4a48-846d-76daccaf*****'),
}

model CreateVideoModerationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVideoModerationTaskResponseBody(name='body'),
}

async function createVideoModerationTaskWithOptions(tmpReq: CreateVideoModerationTaskRequest, runtime: Util.RuntimeOptions): CreateVideoModerationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateVideoModerationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.scenes)) {
    request.scenesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scenes, 'Scenes', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.maxFrames)) {
    query['MaxFrames'] = request.maxFrames;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.reviewer)) {
    query['Reviewer'] = request.reviewer;
  }
  if (!Util.isUnset(request.scenesShrink)) {
    query['Scenes'] = request.scenesShrink;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVideoModerationTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVideoModerationTask(request: CreateVideoModerationTaskRequest): CreateVideoModerationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoModerationTaskWithOptions(request, runtime);
}

model DeleteBindingRequest {
  cleanup?: boolean(name='Cleanup', example='false'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URI?: string(name='URI', example='oss://examplebucket'),
}

model DeleteBindingResponseBody = {
  requestId?: string(name='RequestId', example='ACDFE467-C817-4B36-951A-6EB5A592****'),
}

model DeleteBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBindingResponseBody(name='body'),
}

async function deleteBindingWithOptions(request: DeleteBindingRequest, runtime: Util.RuntimeOptions): DeleteBindingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cleanup)) {
    query['Cleanup'] = request.cleanup;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBindingWithOptions(request, runtime);
}

model DeleteDatasetRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model DeleteDatasetResponseBody = {
  requestId?: string(name='RequestId', example='EC564B8B-BA5C-4499-B196-D9B9E76E****'),
}

model DeleteDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatasetResponseBody(name='body'),
}

async function deleteDatasetWithOptions(request: DeleteDatasetRequest, runtime: Util.RuntimeOptions): DeleteDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatasetWithOptions(request, runtime);
}

model DeleteFileMetaRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URI?: string(name='URI', example='oss://examplebucket/exampleobject.txt'),
}

model DeleteFileMetaResponseBody = {
  requestId?: string(name='RequestId', example='7F82D6C9-5AC0-49F9-914D-F02678F3****'),
}

model DeleteFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileMetaResponseBody(name='body'),
}

async function deleteFileMetaWithOptions(request: DeleteFileMetaRequest, runtime: Util.RuntimeOptions): DeleteFileMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFileMeta(request: DeleteFileMetaRequest): DeleteFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileMetaWithOptions(request, runtime);
}

model DeleteLocationDateClusterRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model DeleteLocationDateClusterResponseBody = {
  requestId?: string(name='RequestId', example='B121940C-9794-4EE3-8D6E-F8EC525F****'),
}

model DeleteLocationDateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLocationDateClusterResponseBody(name='body'),
}

async function deleteLocationDateClusterWithOptions(request: DeleteLocationDateClusterRequest, runtime: Util.RuntimeOptions): DeleteLocationDateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.objectId)) {
    body['ObjectId'] = request.objectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLocationDateCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLocationDateCluster(request: DeleteLocationDateClusterRequest): DeleteLocationDateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLocationDateClusterWithOptions(request, runtime);
}

model DeleteProjectRequest {
  projectName?: string(name='ProjectName', example='immtest'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', example='FEDC9B1F-30F2-4C1F-8ED2-B7860187****'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model DeleteStoryRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model DeleteStoryResponseBody = {
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
}

model DeleteStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStoryResponseBody(name='body'),
}

async function deleteStoryWithOptions(request: DeleteStoryRequest, runtime: Util.RuntimeOptions): DeleteStoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStory(request: DeleteStoryRequest): DeleteStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStoryWithOptions(request, runtime);
}

model DetachOSSBucketRequest {
  OSSBucket?: string(name='OSSBucket', example='examplebucket'),
}

model DetachOSSBucketResponseBody = {
  requestId?: string(name='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model DetachOSSBucketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachOSSBucketResponseBody(name='body'),
}

async function detachOSSBucketWithOptions(request: DetachOSSBucketRequest, runtime: Util.RuntimeOptions): DetachOSSBucketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.OSSBucket)) {
    query['OSSBucket'] = request.OSSBucket;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachOSSBucket',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachOSSBucket(request: DetachOSSBucketRequest): DetachOSSBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachOSSBucketWithOptions(request, runtime);
}

model DetectImageBodiesRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='test-project'),
  sensitivity?: float(name='Sensitivity', example='0.6'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
}

model DetectImageBodiesShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='test-project'),
  sensitivity?: float(name='Sensitivity', example='0.6'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
}

model DetectImageBodiesResponseBody = {
  bodies?: [
    Body
  ](name='Bodies'),
  requestId?: string(name='RequestId', example='501339F9-4B70-0CE2-AB8C-866C********'),
}

model DetectImageBodiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectImageBodiesResponseBody(name='body'),
}

async function detectImageBodiesWithOptions(tmpReq: DetectImageBodiesRequest, runtime: Util.RuntimeOptions): DetectImageBodiesResponse {
  Util.validateModel(tmpReq);
  var request = new DetectImageBodiesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sensitivity)) {
    query['Sensitivity'] = request.sensitivity;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageBodies',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageBodies(request: DetectImageBodiesRequest): DetectImageBodiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageBodiesWithOptions(request, runtime);
}

model DetectImageCodesRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname'),
}

model DetectImageCodesShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname'),
}

model DetectImageCodesResponseBody = {
  codes?: [
    Codes
  ](name='Codes'),
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model DetectImageCodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectImageCodesResponseBody(name='body'),
}

async function detectImageCodesWithOptions(tmpReq: DetectImageCodesRequest, runtime: Util.RuntimeOptions): DetectImageCodesResponse {
  Util.validateModel(tmpReq);
  var request = new DetectImageCodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageCodes',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageCodes(request: DetectImageCodesRequest): DetectImageCodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageCodesWithOptions(request, runtime);
}

model DetectImageCroppingRequest {
  aspectRatios?: string(name='AspectRatios', example='["1:1"]'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/facetest.jpg'),
}

model DetectImageCroppingShrinkRequest {
  aspectRatios?: string(name='AspectRatios', example='["1:1"]'),
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/facetest.jpg'),
}

model DetectImageCroppingResponseBody = {
  croppings?: [
    CroppingSuggestion
  ](name='Croppings'),
  requestId?: string(name='RequestId', example='91AC8C98-0F36-49D2-8290-742E24D*****'),
}

model DetectImageCroppingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectImageCroppingResponseBody(name='body'),
}

async function detectImageCroppingWithOptions(tmpReq: DetectImageCroppingRequest, runtime: Util.RuntimeOptions): DetectImageCroppingResponse {
  Util.validateModel(tmpReq);
  var request = new DetectImageCroppingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aspectRatios)) {
    query['AspectRatios'] = request.aspectRatios;
  }
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageCropping',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageCropping(request: DetectImageCroppingRequest): DetectImageCroppingResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageCroppingWithOptions(request, runtime);
}

model DetectImageFacesRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucket1/object'),
}

model DetectImageFacesShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucket1/object'),
}

model DetectImageFacesResponseBody = {
  faces?: [
    Figure
  ](name='Faces'),
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model DetectImageFacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectImageFacesResponseBody(name='body'),
}

async function detectImageFacesWithOptions(tmpReq: DetectImageFacesRequest, runtime: Util.RuntimeOptions): DetectImageFacesResponse {
  Util.validateModel(tmpReq);
  var request = new DetectImageFacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageFaces',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageFaces(request: DetectImageFacesRequest): DetectImageFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageFacesWithOptions(request, runtime);
}

model DetectImageLabelsRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immimagetest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/facetest.jpg'),
  threshold?: float(name='Threshold', example='1'),
}

model DetectImageLabelsShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immimagetest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/facetest.jpg'),
  threshold?: float(name='Threshold', example='1'),
}

model DetectImageLabelsResponseBody = {
  labels?: [
    Label
  ](name='Labels'),
  requestId?: string(name='RequestId', example='91AC8C98-0F36-49D2-8290-742E24DF1F69'),
}

model DetectImageLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectImageLabelsResponseBody(name='body'),
}

async function detectImageLabelsWithOptions(tmpReq: DetectImageLabelsRequest, runtime: Util.RuntimeOptions): DetectImageLabelsResponse {
  Util.validateModel(tmpReq);
  var request = new DetectImageLabelsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.threshold)) {
    query['Threshold'] = request.threshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageLabels',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageLabels(request: DetectImageLabelsRequest): DetectImageLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageLabelsWithOptions(request, runtime);
}

model DetectImageScoreRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname'),
}

model DetectImageScoreShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://bucketname/objectname'),
}

model DetectImageScoreResponseBody = {
  imageScore?: {
    overallQualityScore?: float(name='OverallQualityScore', example='0.6'),
  }(name='ImageScore'),
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model DetectImageScoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectImageScoreResponseBody(name='body'),
}

async function detectImageScoreWithOptions(tmpReq: DetectImageScoreRequest, runtime: Util.RuntimeOptions): DetectImageScoreResponse {
  Util.validateModel(tmpReq);
  var request = new DetectImageScoreShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectImageScore',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectImageScore(request: DetectImageScoreRequest): DetectImageScoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectImageScoreWithOptions(request, runtime);
}

model DetectMediaMetaRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/video.mp4'),
}

model DetectMediaMetaShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/testcases/video.mp4'),
}

model DetectMediaMetaResponseBody = {
  addresses?: [
    Address
  ](name='Addresses'),
  album?: string(name='Album', example='unable'),
  albumArtist?: string(name='AlbumArtist', example='unable'),
  artist?: string(name='Artist', example='unable'),
  audioStreams?: [
    AudioStream
  ](name='AudioStreams'),
  bitrate?: long(name='Bitrate', example='13164131'),
  composer?: string(name='Composer', example='unable'),
  duration?: double(name='Duration', example='15.263000'),
  formatLongName?: string(name='FormatLongName', example='QuickTime / MOV'),
  formatName?: string(name='FormatName', example='mov,mp4,m4a,3gp,3g2,mj2'),
  language?: string(name='Language', example='eng'),
  latLong?: string(name='LatLong', example='+120.029003,+30.283095'),
  performer?: string(name='Performer', example='unable'),
  produceTime?: string(name='ProduceTime', example='2022-04-24T02:39:57Z'),
  programCount?: long(name='ProgramCount', example='2'),
  requestId?: string(name='RequestId', example='2213B1A9-EB3D-4666-84E0-24980BC*****'),
  size?: long(name='Size', example='25115517'),
  startTime?: double(name='StartTime', example='0.000000'),
  streamCount?: long(name='StreamCount', example='2'),
  subtitles?: [
    SubtitleStream
  ](name='Subtitles'),
  title?: string(name='Title', example='test'),
  videoHeight?: long(name='VideoHeight', example='1920'),
  videoStreams?: [
    VideoStream
  ](name='VideoStreams'),
  videoWidth?: long(name='VideoWidth', example='1080'),
}

model DetectMediaMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectMediaMetaResponseBody(name='body'),
}

async function detectMediaMetaWithOptions(tmpReq: DetectMediaMetaRequest, runtime: Util.RuntimeOptions): DetectMediaMetaResponse {
  Util.validateModel(tmpReq);
  var request = new DetectMediaMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectMediaMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectMediaMeta(request: DetectMediaMetaRequest): DetectMediaMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectMediaMetaWithOptions(request, runtime);
}

model DetectTextAnomalyRequest {
  content?: string(name='Content'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model DetectTextAnomalyResponseBody = {
  requestId?: string(name='RequestId', example='91AC8C98-0F36-49D2-8290-742E24DF*****'),
  suggestion?: string(name='Suggestion', example='pass'),
}

model DetectTextAnomalyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectTextAnomalyResponseBody(name='body'),
}

async function detectTextAnomalyWithOptions(request: DetectTextAnomalyRequest, runtime: Util.RuntimeOptions): DetectTextAnomalyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetectTextAnomaly',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectTextAnomaly(request: DetectTextAnomalyRequest): DetectTextAnomalyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectTextAnomalyWithOptions(request, runtime);
}

model FuzzyQueryRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  order?: string(name='Order', example='asc,desc'),
  projectName?: string(name='ProjectName', example='test-project'),
  query?: string(name='Query', example='examplebucket'),
  sort?: string(name='Sort', example='Size,Filename'),
}

model FuzzyQueryResponseBody = {
  files?: [
    File
  ](name='Files'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
}

model FuzzyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FuzzyQueryResponseBody(name='body'),
}

async function fuzzyQueryWithOptions(request: FuzzyQueryRequest, runtime: Util.RuntimeOptions): FuzzyQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FuzzyQuery',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fuzzyQuery(request: FuzzyQueryRequest): FuzzyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return fuzzyQueryWithOptions(request, runtime);
}

model GenerateWebofficeTokenRequest {
  cachePreview?: boolean(name='CachePreview', example='false'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  externalUploaded?: boolean(name='ExternalUploaded', example='false'),
  filename?: string(name='Filename', example='test.pptx'),
  hidecmb?: boolean(name='Hidecmb', example='false'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  permission?: WebofficePermission(name='Permission'),
  previewPages?: long(name='PreviewPages', example='5'),
  projectName?: string(name='ProjectName', example='immtest'),
  referer?: string(name='Referer', example='*'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/test.pptx'),
  user?: WebofficeUser(name='User'),
  userData?: string(name='UserData', example='{"file_id": "abc"}'),
  watermark?: WebofficeWatermark(name='Watermark'),
}

model GenerateWebofficeTokenShrinkRequest {
  cachePreview?: boolean(name='CachePreview', example='false'),
  credentialConfigShrink?: string(name='CredentialConfig'),
  externalUploaded?: boolean(name='ExternalUploaded', example='false'),
  filename?: string(name='Filename', example='test.pptx'),
  hidecmb?: boolean(name='Hidecmb', example='false'),
  notifyTopicName?: string(name='NotifyTopicName', example='topic1'),
  password?: string(name='Password', example='123456'),
  permissionShrink?: string(name='Permission'),
  previewPages?: long(name='PreviewPages', example='5'),
  projectName?: string(name='ProjectName', example='immtest'),
  referer?: string(name='Referer', example='*'),
  sourceURI?: string(name='SourceURI', example='oss://imm-test/test.pptx'),
  userShrink?: string(name='User'),
  userData?: string(name='UserData', example='{"file_id": "abc"}'),
  watermarkShrink?: string(name='Watermark'),
}

model GenerateWebofficeTokenResponseBody = {
  accessToken?: string(name='AccessToken', example='2d73dd5d87524c5e8a194c3eb5********'),
  accessTokenExpiredTime?: string(name='AccessTokenExpiredTime', example='2021-08-30T13:13:11.347146982Z'),
  refreshToken?: string(name='RefreshToken', example='e374995ec532432bb678074d36********'),
  refreshTokenExpiredTime?: string(name='RefreshTokenExpiredTime', example='2021-08-31T12:43:11.347146982Z'),
  requestId?: string(name='RequestId', example='1759315A-CB33-0A75-A72B-62D7********'),
  webofficeURL?: string(name='WebofficeURL', example='https://office-hl.imm.aliyuncs.com/office/s/dd221b2cdb44fb66e9070d1d70a8b9bbb6d6fff7?_w_tokentype=1'),
}

model GenerateWebofficeTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateWebofficeTokenResponseBody(name='body'),
}

async function generateWebofficeTokenWithOptions(tmpReq: GenerateWebofficeTokenRequest, runtime: Util.RuntimeOptions): GenerateWebofficeTokenResponse {
  Util.validateModel(tmpReq);
  var request = new GenerateWebofficeTokenShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.permission)) {
    request.permissionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.permission, 'Permission', 'json');
  }
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  if (!Util.isUnset(tmpReq.watermark)) {
    request.watermarkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.watermark, 'Watermark', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cachePreview)) {
    query['CachePreview'] = request.cachePreview;
  }
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.externalUploaded)) {
    query['ExternalUploaded'] = request.externalUploaded;
  }
  if (!Util.isUnset(request.filename)) {
    query['Filename'] = request.filename;
  }
  if (!Util.isUnset(request.hidecmb)) {
    query['Hidecmb'] = request.hidecmb;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.permissionShrink)) {
    query['Permission'] = request.permissionShrink;
  }
  if (!Util.isUnset(request.previewPages)) {
    query['PreviewPages'] = request.previewPages;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.referer)) {
    query['Referer'] = request.referer;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  if (!Util.isUnset(request.userShrink)) {
    query['User'] = request.userShrink;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.watermarkShrink)) {
    query['Watermark'] = request.watermarkShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateWebofficeToken',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateWebofficeToken(request: GenerateWebofficeTokenRequest): GenerateWebofficeTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateWebofficeTokenWithOptions(request, runtime);
}

model GetBindingRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URI?: string(name='URI', example='oss://examplebucket'),
}

model GetBindingResponseBody = {
  binding?: Binding(name='Binding'),
  requestId?: string(name='RequestId', example='AEFCD467-C928-4A36-951A-6EB5A592****'),
}

model GetBindingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBindingResponseBody(name='body'),
}

async function getBindingWithOptions(request: GetBindingRequest, runtime: Util.RuntimeOptions): GetBindingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBinding',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBinding(request: GetBindingRequest): GetBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBindingWithOptions(request, runtime);
}

model GetDatasetRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  withStatistics?: boolean(name='WithStatistics', example='true'),
}

model GetDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', example='6D74B3A9-5AC0-49F9-914D-E01589D3****'),
}

model GetDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDatasetResponseBody(name='body'),
}

async function getDatasetWithOptions(request: GetDatasetRequest, runtime: Util.RuntimeOptions): GetDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.withStatistics)) {
    query['WithStatistics'] = request.withStatistics;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatasetWithOptions(request, runtime);
}

model GetFigureClusterRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  objectId?: string(name='ObjectId', example='Cluster-1f2e1a2c-d5ee-4bc5-84f6-fef94ea****'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model GetFigureClusterResponseBody = {
  figureCluster?: FigureCluster(name='FigureCluster'),
  requestId?: string(name='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model GetFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFigureClusterResponseBody(name='body'),
}

async function getFigureClusterWithOptions(request: GetFigureClusterRequest, runtime: Util.RuntimeOptions): GetFigureClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFigureCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFigureCluster(request: GetFigureClusterRequest): GetFigureClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFigureClusterWithOptions(request, runtime);
}

model GetFileMetaRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  projectName?: string(name='ProjectName', example='immtest'),
  URI?: string(name='URI', example='oss://examplebucket/exampleobject.jpg'),
}

model GetFileMetaResponseBody = {
  files?: [
    File
  ](name='Files'),
  requestId?: string(name='RequestId', example='7F84C6D9-5AC0-49F9-914D-F02678E3****'),
}

model GetFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileMetaResponseBody(name='body'),
}

async function getFileMetaWithOptions(request: GetFileMetaRequest, runtime: Util.RuntimeOptions): GetFileMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.URI)) {
    query['URI'] = request.URI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileMeta(request: GetFileMetaRequest): GetFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileMetaWithOptions(request, runtime);
}

model GetOSSBucketAttachmentRequest {
  OSSBucket?: string(name='OSSBucket', example='examplebucket'),
}

model GetOSSBucketAttachmentResponseBody = {
  projectName?: string(name='ProjectName', example='immtest'),
  requestId?: string(name='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model GetOSSBucketAttachmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOSSBucketAttachmentResponseBody(name='body'),
}

async function getOSSBucketAttachmentWithOptions(request: GetOSSBucketAttachmentRequest, runtime: Util.RuntimeOptions): GetOSSBucketAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.OSSBucket)) {
    query['OSSBucket'] = request.OSSBucket;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOSSBucketAttachment',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOSSBucketAttachment(request: GetOSSBucketAttachmentRequest): GetOSSBucketAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOSSBucketAttachmentWithOptions(request, runtime);
}

model GetProjectRequest {
  projectName?: string(name='ProjectName', example='test-project'),
  withStatistics?: boolean(name='WithStatistics', example='true'),
}

model GetProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', example='5A022F78-B9A8-4ACC-BB6B-B3597553'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.withStatistics)) {
    query['WithStatistics'] = request.withStatistics;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetStoryRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model GetStoryResponseBody = {
  requestId?: string(name='RequestId', example='1B3D5E0A-D8B8-4DA0-8127-ED32C851****'),
  story?: Story(name='Story'),
}

model GetStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStoryResponseBody(name='body'),
}

async function getStoryWithOptions(request: GetStoryRequest, runtime: Util.RuntimeOptions): GetStoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStory(request: GetStoryRequest): GetStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStoryWithOptions(request, runtime);
}

model GetTaskRequest {
  projectName?: string(name='ProjectName', example='immtest'),
  taskId?: string(name='TaskId', example='c2b277b9-0d30-4882-ad6d-ad661382****'),
  taskType?: string(name='TaskType', example='VideoLabelClassification'),
}

model GetTaskResponseBody = {
  code?: string(name='Code', example='ResourceNotFound'),
  endTime?: string(name='EndTime', example='2021-12-24T03:01:49.480109219Z'),
  eventId?: string(name='EventId', example='2F6-1Bz99Xi93EnRpNEyLudILJm****'),
  message?: string(name='Message', example='The specified resource project is not found.'),
  projectName?: string(name='ProjectName', example='immtest'),
  requestId?: string(name='RequestId', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
  startTime?: string(name='StartTime', example='2021-12-24T03:01:41.662060377Z'),
  status?: string(name='Status', example='Running'),
  tags?: map[string]any(name='Tags', example='{"test": "val1"}'),
  taskId?: string(name='TaskId', example='c2b277b9-0d30-4882-ad6d-ad661382****'),
  taskType?: string(name='TaskType', example='VideoLabelClassification'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetVideoLabelClassificationResultRequest {
  projectName?: string(name='ProjectName', example='immtest'),
  taskId?: string(name='TaskId', example='VideoLabelClassification-2f157087-91df-4fda-8c3e-232407ec****'),
  taskType?: string(name='TaskType', example='VideoLabelClassification'),
}

model GetVideoLabelClassificationResultResponseBody = {
  code?: string(name='Code', example='ResourceNotFound'),
  endTime?: string(name='EndTime', example='2021-12-24T03:00:42.134971294Z'),
  eventId?: string(name='EventId', example='2F6-1Bz99Xi93EnRpNEyLudILJm****'),
  labels?: [
    Label
  ](name='Labels'),
  message?: string(name='Message', example='The specified resource project is not found.'),
  projectName?: string(name='ProjectName', example='immtest'),
  requestId?: string(name='RequestId', example='7F84C6D9-5AC0-49F9-914D-F02678E3****'),
  startTime?: string(name='StartTime', example='2021-12-24T03:00:38.892462383Z'),
  status?: string(name='Status', example='Succeeded'),
  taskId?: string(name='TaskId', example='VideoLabelClassification-2f157087-91df-4fda-8c3e-232407ec****'),
  taskType?: string(name='TaskType', example='VideoLabelClassification'),
  userData?: string(name='UserData', example='{"ID": "user1","Name": "test-user1","Avatar": "http://example.com?id=user1"}'),
}

model GetVideoLabelClassificationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVideoLabelClassificationResultResponseBody(name='body'),
}

async function getVideoLabelClassificationResultWithOptions(request: GetVideoLabelClassificationResultRequest, runtime: Util.RuntimeOptions): GetVideoLabelClassificationResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVideoLabelClassificationResult',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVideoLabelClassificationResult(request: GetVideoLabelClassificationResultRequest): GetVideoLabelClassificationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoLabelClassificationResultWithOptions(request, runtime);
}

model IndexFileMetaRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  file?: FileForReq(name='File'),
  notifyTopicName?: string(name='NotifyTopicName', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model IndexFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  fileShrink?: string(name='File'),
  notifyTopicName?: string(name='NotifyTopicName', example='http://1111111111.mns.cn-hangzhou.aliyuncs.com'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model IndexFileMetaResponseBody = {
  eventId?: string(name='EventId', example='30F-1D8FxFzDXKJH9YQdve4CjR****'),
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model IndexFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IndexFileMetaResponseBody(name='body'),
}

async function indexFileMetaWithOptions(tmpReq: IndexFileMetaRequest, runtime: Util.RuntimeOptions): IndexFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new IndexFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.file)) {
    request.fileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.file, 'File', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.fileShrink)) {
    query['File'] = request.fileShrink;
  }
  if (!Util.isUnset(request.notifyTopicName)) {
    query['NotifyTopicName'] = request.notifyTopicName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IndexFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function indexFileMeta(request: IndexFileMetaRequest): IndexFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return indexFileMetaWithOptions(request, runtime);
}

model ListBindingsRequest {
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='immtest:dataset001:examplebucket01'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model ListBindingsResponseBody = {
  bindings?: [
    Binding
  ](name='Bindings'),
  nextToken?: string(name='NextToken', example='immtest:dataset001:examplebucket01'),
  requestId?: string(name='RequestId', example='EFDFD356-C928-4A36-951A-6EB5A592****'),
}

model ListBindingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBindingsResponseBody(name='body'),
}

async function listBindingsWithOptions(request: ListBindingsRequest, runtime: Util.RuntimeOptions): ListBindingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBindings',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBindings(request: ListBindingsRequest): ListBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindingsWithOptions(request, runtime);
}

model ListDatasetsRequest {
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='12345678:immtest:dataset002'),
  prefix?: string(name='Prefix', example='dataset'),
  projectName?: string(name='ProjectName', example='test-project'),
}

model ListDatasetsResponseBody = {
  datasets?: [
    Dataset
  ](name='Datasets'),
  nextToken?: string(name='NextToken', example='12345678:immtest:dataset002'),
  requestId?: string(name='RequestId', example='FEEDE356-C928-4A36-951A-6EB5A592****'),
}

model ListDatasetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDatasetsResponseBody(name='body'),
}

async function listDatasetsWithOptions(request: ListDatasetsRequest, runtime: Util.RuntimeOptions): ListDatasetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatasets',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatasetsWithOptions(request, runtime);
}

model ListProjectsRequest {
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='12345678:immtest01'),
  prefix?: string(name='Prefix', example='immtest'),
}

model ListProjectsResponseBody = {
  nextToken?: string(name='NextToken', example='12345678:immtest01'),
  projects?: [
    Project
  ](name='Projects'),
  requestId?: string(name='RequestId', example='4A7A2D0E-D8B8-4DA0-8127-EB32C660'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(request: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
}

model ListRegionsResponseBody = {
  regions?: [
    RegionType
  ](name='Regions'),
  requestId?: string(name='RequestId', example='7F7D235C-76FF-4B65-800C-8238AE3F****'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(request: ListRegionsRequest, runtime: Util.RuntimeOptions): ListRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(request, runtime);
}

model ListTasksRequest {
  endTimeRange?: TimeRange(name='EndTimeRange'),
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  order?: string(name='Order', example='ASC'),
  projectName?: string(name='ProjectName', example='immtest'),
  sort?: string(name='Sort', example='TaskId'),
  startTimeRange?: TimeRange(name='StartTimeRange'),
  status?: string(name='Status', example='Succeeded'),
  tagSelector?: string(name='TagSelector', example='test=val1'),
  taskTypes?: [ string ](name='TaskTypes'),
}

model ListTasksShrinkRequest {
  endTimeRangeShrink?: string(name='EndTimeRange'),
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  order?: string(name='Order', example='ASC'),
  projectName?: string(name='ProjectName', example='immtest'),
  sort?: string(name='Sort', example='TaskId'),
  startTimeRangeShrink?: string(name='StartTimeRange'),
  status?: string(name='Status', example='Succeeded'),
  tagSelector?: string(name='TagSelector', example='test=val1'),
  taskTypesShrink?: string(name='TaskTypes'),
}

model ListTasksResponseBody = {
  maxResults?: string(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  projectName?: string(name='ProjectName', example='immtest'),
  requestId?: string(name='RequestId', example='9847E7D0-A9A3-0053-84C6-BA16FFFA726E'),
  tasks?: [
    TaskInfo
  ](name='Tasks'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasksWithOptions(tmpReq: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.endTimeRange)) {
    request.endTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.endTimeRange, 'EndTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.startTimeRange)) {
    request.startTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.startTimeRange, 'StartTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.taskTypes)) {
    request.taskTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskTypes, 'TaskTypes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.endTimeRangeShrink)) {
    query['EndTimeRange'] = request.endTimeRangeShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.startTimeRangeShrink)) {
    query['StartTimeRange'] = request.startTimeRangeShrink;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagSelector)) {
    query['TagSelector'] = request.tagSelector;
  }
  if (!Util.isUnset(request.taskTypesShrink)) {
    query['TaskTypes'] = request.taskTypesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model QueryFigureClustersRequest {
  createTimeRange?: TimeRange(name='CreateTimeRange'),
  customLabels?: string(name='CustomLabels', example='{"Bucket": "examplebucket"}'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResults?: long(name='MaxResults', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3Qx****'),
  nextToken?: string(name='NextToken', example='10'),
  order?: string(name='Order', example='asc'),
  projectName?: string(name='ProjectName', example='test-project'),
  sort?: string(name='Sort', example='ImageCount'),
  updateTimeRange?: TimeRange(name='UpdateTimeRange'),
}

model QueryFigureClustersShrinkRequest {
  createTimeRangeShrink?: string(name='CreateTimeRange'),
  customLabels?: string(name='CustomLabels', example='{"Bucket": "examplebucket"}'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResults?: long(name='MaxResults', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3Qx****'),
  nextToken?: string(name='NextToken', example='10'),
  order?: string(name='Order', example='asc'),
  projectName?: string(name='ProjectName', example='test-project'),
  sort?: string(name='Sort', example='ImageCount'),
  updateTimeRangeShrink?: string(name='UpdateTimeRange'),
}

model QueryFigureClustersResponseBody = {
  figureClusters?: [
    FigureCluster
  ](name='FigureClusters'),
  nextToken?: string(name='NextToken', example='10'),
  requestId?: string(name='RequestId', example='CA995EFD-083D-4F40-BE8A-BDF75FFF****'),
}

model QueryFigureClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFigureClustersResponseBody(name='body'),
}

async function queryFigureClustersWithOptions(tmpReq: QueryFigureClustersRequest, runtime: Util.RuntimeOptions): QueryFigureClustersResponse {
  Util.validateModel(tmpReq);
  var request = new QueryFigureClustersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createTimeRange)) {
    request.createTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createTimeRange, 'CreateTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.updateTimeRange)) {
    request.updateTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateTimeRange, 'UpdateTimeRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.createTimeRangeShrink)) {
    query['CreateTimeRange'] = request.createTimeRangeShrink;
  }
  if (!Util.isUnset(request.customLabels)) {
    query['CustomLabels'] = request.customLabels;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.updateTimeRangeShrink)) {
    query['UpdateTimeRange'] = request.updateTimeRangeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryFigureClusters',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFigureClusters(request: QueryFigureClustersRequest): QueryFigureClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFigureClustersWithOptions(request, runtime);
}

model QueryLocationDateClustersRequest {
  address?: Address(name='Address'),
  createTimeRange?: TimeRange(name='CreateTimeRange'),
  customLabels?: string(name='CustomLabels', example='key=value'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  locationDateClusterEndTimeRange?: TimeRange(name='LocationDateClusterEndTimeRange'),
  locationDateClusterLevels?: [ string ](name='LocationDateClusterLevels'),
  locationDateClusterStartTimeRange?: TimeRange(name='LocationDateClusterStartTimeRange'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MzQNjmY2MzYxNhNjk2ZNjEu****'),
  objectId?: string(name='ObjectId', example='id1'),
  order?: string(name='Order', example='asc'),
  projectName?: string(name='ProjectName', example='immtest'),
  sort?: string(name='Sort', example='LocationDateClusterStartTime'),
  title?: string(name='Title', example='title1'),
  updateTimeRange?: TimeRange(name='UpdateTimeRange'),
}

model QueryLocationDateClustersShrinkRequest {
  addressShrink?: string(name='Address'),
  createTimeRangeShrink?: string(name='CreateTimeRange'),
  customLabels?: string(name='CustomLabels', example='key=value'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  locationDateClusterEndTimeRangeShrink?: string(name='LocationDateClusterEndTimeRange'),
  locationDateClusterLevelsShrink?: string(name='LocationDateClusterLevels'),
  locationDateClusterStartTimeRangeShrink?: string(name='LocationDateClusterStartTimeRange'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MzQNjmY2MzYxNhNjk2ZNjEu****'),
  objectId?: string(name='ObjectId', example='id1'),
  order?: string(name='Order', example='asc'),
  projectName?: string(name='ProjectName', example='immtest'),
  sort?: string(name='Sort', example='LocationDateClusterStartTime'),
  title?: string(name='Title', example='title1'),
  updateTimeRangeShrink?: string(name='UpdateTimeRange'),
}

model QueryLocationDateClustersResponseBody = {
  locationDateClusters?: [
    LocationDateCluster
  ](name='LocationDateClusters'),
  nextToken?: string(name='NextToken', example='MzQNjmY2MzYxNhNjk2ZNjEu****'),
  requestId?: string(name='RequestId', example='7055FCF7-4D7B-098E-BD4D-DD2932B0****'),
}

model QueryLocationDateClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLocationDateClustersResponseBody(name='body'),
}

async function queryLocationDateClustersWithOptions(tmpReq: QueryLocationDateClustersRequest, runtime: Util.RuntimeOptions): QueryLocationDateClustersResponse {
  Util.validateModel(tmpReq);
  var request = new QueryLocationDateClustersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.address)) {
    request.addressShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.address, 'Address', 'json');
  }
  if (!Util.isUnset(tmpReq.createTimeRange)) {
    request.createTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createTimeRange, 'CreateTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.locationDateClusterEndTimeRange)) {
    request.locationDateClusterEndTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationDateClusterEndTimeRange, 'LocationDateClusterEndTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.locationDateClusterLevels)) {
    request.locationDateClusterLevelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationDateClusterLevels, 'LocationDateClusterLevels', 'json');
  }
  if (!Util.isUnset(tmpReq.locationDateClusterStartTimeRange)) {
    request.locationDateClusterStartTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationDateClusterStartTimeRange, 'LocationDateClusterStartTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.updateTimeRange)) {
    request.updateTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateTimeRange, 'UpdateTimeRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.addressShrink)) {
    query['Address'] = request.addressShrink;
  }
  if (!Util.isUnset(request.createTimeRangeShrink)) {
    query['CreateTimeRange'] = request.createTimeRangeShrink;
  }
  if (!Util.isUnset(request.customLabels)) {
    query['CustomLabels'] = request.customLabels;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.locationDateClusterEndTimeRangeShrink)) {
    query['LocationDateClusterEndTimeRange'] = request.locationDateClusterEndTimeRangeShrink;
  }
  if (!Util.isUnset(request.locationDateClusterLevelsShrink)) {
    query['LocationDateClusterLevels'] = request.locationDateClusterLevelsShrink;
  }
  if (!Util.isUnset(request.locationDateClusterStartTimeRangeShrink)) {
    query['LocationDateClusterStartTimeRange'] = request.locationDateClusterStartTimeRangeShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.updateTimeRangeShrink)) {
    query['UpdateTimeRange'] = request.updateTimeRangeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLocationDateClusters',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLocationDateClusters(request: QueryLocationDateClustersRequest): QueryLocationDateClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLocationDateClustersWithOptions(request, runtime);
}

model QueryStoriesRequest {
  createTimeRange?: TimeRange(name='CreateTimeRange'),
  customLabels?: string(name='CustomLabels', example='{"key": "val"}'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  figureClusterIds?: [ string ](name='FigureClusterIds'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpw****'),
  objectId?: string(name='ObjectId', example='id1'),
  order?: string(name='Order', example='asc'),
  projectName?: string(name='ProjectName', example='test-project'),
  sort?: string(name='Sort', example='CreateTime'),
  storyEndTimeRange?: TimeRange(name='StoryEndTimeRange'),
  storyName?: string(name='StoryName', example='name1'),
  storyStartTimeRange?: TimeRange(name='StoryStartTimeRange'),
  storySubType?: string(name='StorySubType', example='SeasonHighlights'),
  storyType?: string(name='StoryType', example='TimeMemory'),
  withEmptyStories?: boolean(name='WithEmptyStories', example='true'),
}

model QueryStoriesShrinkRequest {
  createTimeRangeShrink?: string(name='CreateTimeRange'),
  customLabels?: string(name='CustomLabels', example='{"key": "val"}'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  figureClusterIdsShrink?: string(name='FigureClusterIds'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpw****'),
  objectId?: string(name='ObjectId', example='id1'),
  order?: string(name='Order', example='asc'),
  projectName?: string(name='ProjectName', example='test-project'),
  sort?: string(name='Sort', example='CreateTime'),
  storyEndTimeRangeShrink?: string(name='StoryEndTimeRange'),
  storyName?: string(name='StoryName', example='name1'),
  storyStartTimeRangeShrink?: string(name='StoryStartTimeRange'),
  storySubType?: string(name='StorySubType', example='SeasonHighlights'),
  storyType?: string(name='StoryType', example='TimeMemory'),
  withEmptyStories?: boolean(name='WithEmptyStories', example='true'),
}

model QueryStoriesResponseBody = {
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3Qx****'),
  requestId?: string(name='RequestId', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
  stories?: [
    Story
  ](name='Stories'),
}

model QueryStoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStoriesResponseBody(name='body'),
}

async function queryStoriesWithOptions(tmpReq: QueryStoriesRequest, runtime: Util.RuntimeOptions): QueryStoriesResponse {
  Util.validateModel(tmpReq);
  var request = new QueryStoriesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.createTimeRange)) {
    request.createTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createTimeRange, 'CreateTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.figureClusterIds)) {
    request.figureClusterIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.figureClusterIds, 'FigureClusterIds', 'json');
  }
  if (!Util.isUnset(tmpReq.storyEndTimeRange)) {
    request.storyEndTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storyEndTimeRange, 'StoryEndTimeRange', 'json');
  }
  if (!Util.isUnset(tmpReq.storyStartTimeRange)) {
    request.storyStartTimeRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storyStartTimeRange, 'StoryStartTimeRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.createTimeRangeShrink)) {
    query['CreateTimeRange'] = request.createTimeRangeShrink;
  }
  if (!Util.isUnset(request.customLabels)) {
    query['CustomLabels'] = request.customLabels;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.figureClusterIdsShrink)) {
    query['FigureClusterIds'] = request.figureClusterIdsShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.storyEndTimeRangeShrink)) {
    query['StoryEndTimeRange'] = request.storyEndTimeRangeShrink;
  }
  if (!Util.isUnset(request.storyName)) {
    query['StoryName'] = request.storyName;
  }
  if (!Util.isUnset(request.storyStartTimeRangeShrink)) {
    query['StoryStartTimeRange'] = request.storyStartTimeRangeShrink;
  }
  if (!Util.isUnset(request.storySubType)) {
    query['StorySubType'] = request.storySubType;
  }
  if (!Util.isUnset(request.storyType)) {
    query['StoryType'] = request.storyType;
  }
  if (!Util.isUnset(request.withEmptyStories)) {
    query['WithEmptyStories'] = request.withEmptyStories;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryStories',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStories(request: QueryStoriesRequest): QueryStoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStoriesWithOptions(request, runtime);
}

model RefreshWebofficeTokenRequest {
  accessToken?: string(name='AccessToken', example='99d1b8b478b641c1b3372f5bd6********'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  refreshToken?: string(name='RefreshToken', example='a730ae0d7c6a487d87c661d199********'),
}

model RefreshWebofficeTokenShrinkRequest {
  accessToken?: string(name='AccessToken', example='99d1b8b478b641c1b3372f5bd6********'),
  credentialConfigShrink?: string(name='CredentialConfig'),
  projectName?: string(name='ProjectName', example='immtest'),
  refreshToken?: string(name='RefreshToken', example='a730ae0d7c6a487d87c661d199********'),
}

model RefreshWebofficeTokenResponseBody = {
  accessToken?: string(name='AccessToken', example='4996466c690a4902846ce00f96********'),
  accessTokenExpiredTime?: string(name='AccessTokenExpiredTime', example='2021-08-31T13:07:28.950065359Z'),
  refreshToken?: string(name='RefreshToken', example='72a52ab3702a4123ab5594671a********'),
  refreshTokenExpiredTime?: string(name='RefreshTokenExpiredTime', example='2021-09-01T12:37:28.950065359Z'),
  requestId?: string(name='RequestId', example='501339F9-4B70-0CE2-AB8C-866C********'),
}

model RefreshWebofficeTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshWebofficeTokenResponseBody(name='body'),
}

async function refreshWebofficeTokenWithOptions(tmpReq: RefreshWebofficeTokenRequest, runtime: Util.RuntimeOptions): RefreshWebofficeTokenResponse {
  Util.validateModel(tmpReq);
  var request = new RefreshWebofficeTokenShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accessToken)) {
    query['AccessToken'] = request.accessToken;
  }
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.refreshToken)) {
    query['RefreshToken'] = request.refreshToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshWebofficeToken',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshWebofficeToken(request: RefreshWebofficeTokenRequest): RefreshWebofficeTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshWebofficeTokenWithOptions(request, runtime);
}

model RemoveStoryFilesRequest {
  datasetName?: string(name='DatasetName', example='testdataset'),
  files?: [ 
    {
      URI?: string(name='URI', example='oss://bucket1/object'),
    }
  ](name='Files'),
  objectId?: string(name='ObjectId', example='testid'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model RemoveStoryFilesShrinkRequest {
  datasetName?: string(name='DatasetName', example='testdataset'),
  filesShrink?: string(name='Files'),
  objectId?: string(name='ObjectId', example='testid'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model RemoveStoryFilesResponseBody = {
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model RemoveStoryFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveStoryFilesResponseBody(name='body'),
}

async function removeStoryFilesWithOptions(tmpReq: RemoveStoryFilesRequest, runtime: Util.RuntimeOptions): RemoveStoryFilesResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveStoryFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.files)) {
    request.filesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.files, 'Files', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.datasetName)) {
    body['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.filesShrink)) {
    body['Files'] = request.filesShrink;
  }
  if (!Util.isUnset(request.objectId)) {
    body['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveStoryFiles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeStoryFiles(request: RemoveStoryFilesRequest): RemoveStoryFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeStoryFilesWithOptions(request, runtime);
}

model SearchImageFigureClusterRequest {
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
}

model SearchImageFigureClusterShrinkRequest {
  credentialConfigShrink?: string(name='CredentialConfig'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  projectName?: string(name='ProjectName', example='test-project'),
  sourceURI?: string(name='SourceURI', example='oss://test-bucket/test-object'),
}

model SearchImageFigureClusterResponseBody = {
  clusters?: [ 
    {
      boundary?: Boundary(name='Boundary'),
      clusterId?: string(name='ClusterId', example='Cluster-ca730577-06b1-42c7-a25b-8f2c7******'),
      similarity?: float(name='Similarity', example='0.87413794'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId', example='C2734912-E6D5-052C-AC67-6A9FD02*****'),
}

model SearchImageFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchImageFigureClusterResponseBody(name='body'),
}

async function searchImageFigureClusterWithOptions(tmpReq: SearchImageFigureClusterRequest, runtime: Util.RuntimeOptions): SearchImageFigureClusterResponse {
  Util.validateModel(tmpReq);
  var request = new SearchImageFigureClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.credentialConfig)) {
    request.credentialConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.credentialConfig, 'CredentialConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.credentialConfigShrink)) {
    query['CredentialConfig'] = request.credentialConfigShrink;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.sourceURI)) {
    query['SourceURI'] = request.sourceURI;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchImageFigureCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchImageFigureCluster(request: SearchImageFigureClusterRequest): SearchImageFigureClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchImageFigureClusterWithOptions(request, runtime);
}

model SemanticQueryRequest {
  datasetName?: string(name='DatasetName', example='immDatatest'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  projectName?: string(name='ProjectName', example='immtest'),
  query?: string(name='Query'),
}

model SemanticQueryResponseBody = {
  files?: [
    File
  ](name='Files'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
}

model SemanticQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SemanticQueryResponseBody(name='body'),
}

async function semanticQueryWithOptions(request: SemanticQueryRequest, runtime: Util.RuntimeOptions): SemanticQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SemanticQuery',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function semanticQuery(request: SemanticQueryRequest): SemanticQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return semanticQueryWithOptions(request, runtime);
}

model SimpleQueryRequest {
  aggregations?: [ 
    {
      field?: string(name='Field', example='Size'),
      operation?: string(name='Operation', example='sum'),
    }
  ](name='Aggregations'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  order?: string(name='Order', example='asc,desc'),
  projectName?: string(name='ProjectName', example='test-project'),
  query?: SimpleQuery(name='Query'),
  sort?: string(name='Sort', example='Size,Filename'),
  withFields?: [ string ](name='WithFields'),
}

model SimpleQueryShrinkRequest {
  aggregationsShrink?: string(name='Aggregations'),
  datasetName?: string(name='DatasetName', example='test-dataset'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  order?: string(name='Order', example='asc,desc'),
  projectName?: string(name='ProjectName', example='test-project'),
  queryShrink?: string(name='Query'),
  sort?: string(name='Sort', example='Size,Filename'),
  withFieldsShrink?: string(name='WithFields'),
}

model SimpleQueryResponseBody = {
  aggregations?: [ 
    {
      field?: string(name='Field', example='Size'),
      groups?: [ 
        {
          count?: long(name='Count', example='5'),
          value?: string(name='Value', example='100'),
        }
      ](name='Groups'),
      operation?: string(name='Operation', example='sum'),
      value?: double(name='Value', example='200'),
    }
  ](name='Aggregations'),
  files?: [
    File
  ](name='Files'),
  nextToken?: string(name='NextToken', example='MTIzNDU2Nzg6aW1tdGVzdDpleGFtcGxlYnVja2V0OmRhdGFzZXQwMDE6b3NzOi8vZXhhbXBsZWJ1Y2tldC9zYW1wbGVvYmplY3QxLmpwZw=='),
  requestId?: string(name='RequestId', example='2C5C1E0F-D8B8-4DA0-8127-EC32C771****'),
}

model SimpleQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SimpleQueryResponseBody(name='body'),
}

async function simpleQueryWithOptions(tmpReq: SimpleQueryRequest, runtime: Util.RuntimeOptions): SimpleQueryResponse {
  Util.validateModel(tmpReq);
  var request = new SimpleQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aggregations)) {
    request.aggregationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aggregations, 'Aggregations', 'json');
  }
  if (!Util.isUnset(tmpReq.query)) {
    request.queryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.query, 'Query', 'json');
  }
  if (!Util.isUnset(tmpReq.withFields)) {
    request.withFieldsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.withFields, 'WithFields', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aggregationsShrink)) {
    query['Aggregations'] = request.aggregationsShrink;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.queryShrink)) {
    query['Query'] = request.queryShrink;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.withFieldsShrink)) {
    query['WithFields'] = request.withFieldsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SimpleQuery',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function simpleQuery(request: SimpleQueryRequest): SimpleQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return simpleQueryWithOptions(request, runtime);
}

model UpdateDatasetRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', example='10'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', example='10000000000'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', example='100000000'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', example='100000000000'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', example='90000000000000000'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  description?: string(name='Description'),
  projectName?: string(name='ProjectName', example='immtest'),
  templateId?: string(name='TemplateId', example='Official:AllFunction'),
}

model UpdateDatasetResponseBody = {
  dataset?: Dataset(name='Dataset'),
  requestId?: string(name='RequestId', example='45234D4A-A3E3-4B23-AACA-8D897514****'),
}

model UpdateDatasetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDatasetResponseBody(name='body'),
}

async function updateDatasetWithOptions(request: UpdateDatasetRequest, runtime: Util.RuntimeOptions): UpdateDatasetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetMaxBindCount)) {
    query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  }
  if (!Util.isUnset(request.datasetMaxEntityCount)) {
    query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  }
  if (!Util.isUnset(request.datasetMaxFileCount)) {
    query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  }
  if (!Util.isUnset(request.datasetMaxRelationCount)) {
    query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  }
  if (!Util.isUnset(request.datasetMaxTotalFileSize)) {
    query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataset',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDatasetWithOptions(request, runtime);
}

model UpdateFigureClusterRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  figureCluster?: FigureClusterForReq(name='FigureCluster'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model UpdateFigureClusterShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  figureClusterShrink?: string(name='FigureCluster'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model UpdateFigureClusterResponseBody = {
  requestId?: string(name='RequestId', example='5F74C5C9-5AC0-49F9-914D-E01589D3****'),
}

model UpdateFigureClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFigureClusterResponseBody(name='body'),
}

async function updateFigureClusterWithOptions(tmpReq: UpdateFigureClusterRequest, runtime: Util.RuntimeOptions): UpdateFigureClusterResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFigureClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.figureCluster)) {
    request.figureClusterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.figureCluster, 'FigureCluster', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.figureClusterShrink)) {
    query['FigureCluster'] = request.figureClusterShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFigureCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFigureCluster(request: UpdateFigureClusterRequest): UpdateFigureClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFigureClusterWithOptions(request, runtime);
}

model UpdateFileMetaRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  file?: FileForReq(name='File'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model UpdateFileMetaShrinkRequest {
  datasetName?: string(name='DatasetName', example='dataset001'),
  fileShrink?: string(name='File'),
  projectName?: string(name='ProjectName', example='immtest'),
}

model UpdateFileMetaResponseBody = {
  requestId?: string(name='RequestId', example='6D53E6C9-5AC0-48F9-825F-D02678E3****'),
}

model UpdateFileMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileMetaResponseBody(name='body'),
}

async function updateFileMetaWithOptions(tmpReq: UpdateFileMetaRequest, runtime: Util.RuntimeOptions): UpdateFileMetaResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFileMetaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.file)) {
    request.fileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.file, 'File', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.fileShrink)) {
    query['File'] = request.fileShrink;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFileMeta',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFileMeta(request: UpdateFileMetaRequest): UpdateFileMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileMetaWithOptions(request, runtime);
}

model UpdateLocationDateClusterRequest {
  customId?: string(name='CustomId', example='customid1'),
  customLabels?: map[string]any(name='CustomLabels', example='{"UserScore": "5"}'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='immtest'),
  title?: string(name='Title', example='title1'),
}

model UpdateLocationDateClusterShrinkRequest {
  customId?: string(name='CustomId', example='customid1'),
  customLabelsShrink?: string(name='CustomLabels', example='{"UserScore": "5"}'),
  datasetName?: string(name='DatasetName', example='dataset001'),
  objectId?: string(name='ObjectId', example='id1'),
  projectName?: string(name='ProjectName', example='immtest'),
  title?: string(name='Title', example='title1'),
}

model UpdateLocationDateClusterResponseBody = {
  requestId?: string(name='RequestId', example='52B017A8-FEF5-0A61-BAEE-234A8AD8****'),
}

model UpdateLocationDateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLocationDateClusterResponseBody(name='body'),
}

async function updateLocationDateClusterWithOptions(tmpReq: UpdateLocationDateClusterRequest, runtime: Util.RuntimeOptions): UpdateLocationDateClusterResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLocationDateClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.customLabels)) {
    request.customLabelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customLabels, 'CustomLabels', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.customId)) {
    query['CustomId'] = request.customId;
  }
  if (!Util.isUnset(request.customLabelsShrink)) {
    query['CustomLabels'] = request.customLabelsShrink;
  }
  if (!Util.isUnset(request.datasetName)) {
    query['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLocationDateCluster',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLocationDateCluster(request: UpdateLocationDateClusterRequest): UpdateLocationDateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLocationDateClusterWithOptions(request, runtime);
}

model UpdateProjectRequest {
  datasetMaxBindCount?: long(name='DatasetMaxBindCount', example='10'),
  datasetMaxEntityCount?: long(name='DatasetMaxEntityCount', example='10000000000'),
  datasetMaxFileCount?: long(name='DatasetMaxFileCount', example='100000000'),
  datasetMaxRelationCount?: long(name='DatasetMaxRelationCount', example='100000000000'),
  datasetMaxTotalFileSize?: long(name='DatasetMaxTotalFileSize', example='90000000000000000'),
  description?: string(name='Description'),
  engineConcurrency?: long(name='EngineConcurrency', example='10'),
  projectMaxDatasetCount?: long(name='ProjectMaxDatasetCount', example='1000000000'),
  projectName?: string(name='ProjectName', example='immtest'),
  projectQueriesPerSecond?: long(name='ProjectQueriesPerSecond', example='100'),
  serviceRole?: string(name='ServiceRole', example='AliyunIMMDefaultRole'),
  templateId?: string(name='TemplateId', example='AliyunIMMDefaultRole'),
}

model UpdateProjectResponseBody = {
  project?: Project(name='Project'),
  requestId?: string(name='RequestId', example='D33C3574-4093-448E-86E7-15BE2BD3****'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProjectWithOptions(request: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasetMaxBindCount)) {
    query['DatasetMaxBindCount'] = request.datasetMaxBindCount;
  }
  if (!Util.isUnset(request.datasetMaxEntityCount)) {
    query['DatasetMaxEntityCount'] = request.datasetMaxEntityCount;
  }
  if (!Util.isUnset(request.datasetMaxFileCount)) {
    query['DatasetMaxFileCount'] = request.datasetMaxFileCount;
  }
  if (!Util.isUnset(request.datasetMaxRelationCount)) {
    query['DatasetMaxRelationCount'] = request.datasetMaxRelationCount;
  }
  if (!Util.isUnset(request.datasetMaxTotalFileSize)) {
    query['DatasetMaxTotalFileSize'] = request.datasetMaxTotalFileSize;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.engineConcurrency)) {
    query['EngineConcurrency'] = request.engineConcurrency;
  }
  if (!Util.isUnset(request.projectMaxDatasetCount)) {
    query['ProjectMaxDatasetCount'] = request.projectMaxDatasetCount;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.projectQueriesPerSecond)) {
    query['ProjectQueriesPerSecond'] = request.projectQueriesPerSecond;
  }
  if (!Util.isUnset(request.serviceRole)) {
    query['ServiceRole'] = request.serviceRole;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProject',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model UpdateStoryRequest {
  cover?: {
    URI?: string(name='URI', example='oss://bucket1/object'),
  }(name='Cover'),
  customId?: string(name='CustomId', example='test'),
  customLabels?: map[string]any(name='CustomLabels', example='{"key": "value"}'),
  datasetName?: string(name='DatasetName', example='testdata'),
  objectId?: string(name='ObjectId', example='testid'),
  projectName?: string(name='ProjectName', example='immtest'),
  storyName?: string(name='StoryName', example='newstory'),
}

model UpdateStoryShrinkRequest {
  coverShrink?: string(name='Cover'),
  customId?: string(name='CustomId', example='test'),
  customLabelsShrink?: string(name='CustomLabels', example='{"key": "value"}'),
  datasetName?: string(name='DatasetName', example='testdata'),
  objectId?: string(name='ObjectId', example='testid'),
  projectName?: string(name='ProjectName', example='immtest'),
  storyName?: string(name='StoryName', example='newstory'),
}

model UpdateStoryResponseBody = {
  requestId?: string(name='RequestId', example='6E93D6C9-5AC0-49F9-914D-E02678D3****'),
}

model UpdateStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateStoryResponseBody(name='body'),
}

async function updateStoryWithOptions(tmpReq: UpdateStoryRequest, runtime: Util.RuntimeOptions): UpdateStoryResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateStoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cover)) {
    request.coverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cover, 'Cover', 'json');
  }
  if (!Util.isUnset(tmpReq.customLabels)) {
    request.customLabelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customLabels, 'CustomLabels', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverShrink)) {
    body['Cover'] = request.coverShrink;
  }
  if (!Util.isUnset(request.customId)) {
    body['CustomId'] = request.customId;
  }
  if (!Util.isUnset(request.customLabelsShrink)) {
    body['CustomLabels'] = request.customLabelsShrink;
  }
  if (!Util.isUnset(request.datasetName)) {
    body['DatasetName'] = request.datasetName;
  }
  if (!Util.isUnset(request.objectId)) {
    body['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.storyName)) {
    body['StoryName'] = request.storyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateStory(request: UpdateStoryRequest): UpdateStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateStoryWithOptions(request, runtime);
}

