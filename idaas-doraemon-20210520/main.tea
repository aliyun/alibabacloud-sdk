/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('idaas-doraemon', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetListActionsByServiceCodesRequest {
  serviceCode?: string(name='ServiceCode'),
}

model GetListActionsByServiceCodesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceCode?: string(name='ServiceCode'),
  supportedActions?: [ string ](name='SupportedActions'),
}

model GetListActionsByServiceCodesResponse = {
  headers: map[string]string(name='headers'),
  body: GetListActionsByServiceCodesResponseBody(name='body'),
}

async function getListActionsByServiceCodesWithOptions(request: GetListActionsByServiceCodesRequest, runtime: Util.RuntimeOptions): GetListActionsByServiceCodesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetListActionsByServiceCodes', '2021-05-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getListActionsByServiceCodes(request: GetListActionsByServiceCodesRequest): GetListActionsByServiceCodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListActionsByServiceCodesWithOptions(request, runtime);
}

model ServiceInvokeRequest {
  mobileExtendParamsJson?: string(name='MobileExtendParamsJson'),
  mobileExtendParamsJsonSign?: string(name='MobileExtendParamsJsonSign'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  serviceCode?: string(name='ServiceCode'),
  doraemonAction?: string(name='DoraemonAction'),
  applicationExternalId?: string(name='ApplicationExternalId'),
  testModel?: boolean(name='TestModel'),
  XClientIp?: string(name='XClientIp'),
}

model ServiceInvokeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: string(name='Data'),
}

model ServiceInvokeResponse = {
  headers: map[string]string(name='headers'),
  body: ServiceInvokeResponseBody(name='body'),
}

async function serviceInvokeWithOptions(request: ServiceInvokeRequest, runtime: Util.RuntimeOptions): ServiceInvokeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ServiceInvoke', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function serviceInvoke(request: ServiceInvokeRequest): ServiceInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return serviceInvokeWithOptions(request, runtime);
}

