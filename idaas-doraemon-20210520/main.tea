/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-hangzhou = 'idaas-doraemon.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('idaas-doraemon', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAuthenticatorRegistrationRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorType?: string(name='AuthenticatorType'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign'),
  registrationContext?: string(name='RegistrationContext'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  userDisplayName?: string(name='UserDisplayName'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
}

model CreateAuthenticatorRegistrationResponseBody = {
  challengeBase64?: string(name='ChallengeBase64'),
  options?: string(name='Options'),
  requestId?: string(name='RequestId'),
}

model CreateAuthenticatorRegistrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAuthenticatorRegistrationResponseBody(name='body'),
}

async function createAuthenticatorRegistrationWithOptions(request: CreateAuthenticatorRegistrationRequest, runtime: Util.RuntimeOptions): CreateAuthenticatorRegistrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.clientExtendParamsJson)) {
    query['ClientExtendParamsJson'] = request.clientExtendParamsJson;
  }
  if (!Util.isUnset(request.clientExtendParamsJsonSign)) {
    query['ClientExtendParamsJsonSign'] = request.clientExtendParamsJsonSign;
  }
  if (!Util.isUnset(request.registrationContext)) {
    query['RegistrationContext'] = request.registrationContext;
  }
  if (!Util.isUnset(request.serverExtendParamsJson)) {
    query['ServerExtendParamsJson'] = request.serverExtendParamsJson;
  }
  if (!Util.isUnset(request.userDisplayName)) {
    query['UserDisplayName'] = request.userDisplayName;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAuthenticatorRegistration',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAuthenticatorRegistration(request: CreateAuthenticatorRegistrationRequest): CreateAuthenticatorRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthenticatorRegistrationWithOptions(request, runtime);
}

model CreateUserAuthenticateOptionsRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorType?: string(name='AuthenticatorType'),
  bindHashBase64?: string(name='BindHashBase64'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  userId?: string(name='UserId'),
}

model CreateUserAuthenticateOptionsResponseBody = {
  challengeBase64?: string(name='ChallengeBase64'),
  options?: string(name='Options'),
  requestId?: string(name='RequestId'),
}

model CreateUserAuthenticateOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserAuthenticateOptionsResponseBody(name='body'),
}

async function createUserAuthenticateOptionsWithOptions(request: CreateUserAuthenticateOptionsRequest, runtime: Util.RuntimeOptions): CreateUserAuthenticateOptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.bindHashBase64)) {
    query['BindHashBase64'] = request.bindHashBase64;
  }
  if (!Util.isUnset(request.clientExtendParamsJson)) {
    query['ClientExtendParamsJson'] = request.clientExtendParamsJson;
  }
  if (!Util.isUnset(request.clientExtendParamsJsonSign)) {
    query['ClientExtendParamsJsonSign'] = request.clientExtendParamsJsonSign;
  }
  if (!Util.isUnset(request.serverExtendParamsJson)) {
    query['ServerExtendParamsJson'] = request.serverExtendParamsJson;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserAuthenticateOptions',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserAuthenticateOptions(request: CreateUserAuthenticateOptionsRequest): CreateUserAuthenticateOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserAuthenticateOptionsWithOptions(request, runtime);
}

model DeregisterAuthenticatorRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  userId?: string(name='UserId'),
}

model DeregisterAuthenticatorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeregisterAuthenticatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeregisterAuthenticatorResponseBody(name='body'),
}

async function deregisterAuthenticatorWithOptions(request: DeregisterAuthenticatorRequest, runtime: Util.RuntimeOptions): DeregisterAuthenticatorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorUuid)) {
    query['AuthenticatorUuid'] = request.authenticatorUuid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeregisterAuthenticator',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deregisterAuthenticator(request: DeregisterAuthenticatorRequest): DeregisterAuthenticatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterAuthenticatorWithOptions(request, runtime);
}

model FetchAccessTokenRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  mobileExtendParamsJson?: string(name='MobileExtendParamsJson'),
  mobileExtendParamsJsonSign?: string(name='MobileExtendParamsJsonSign'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  userId?: string(name='UserId'),
  XClientIp?: string(name='XClientIp'),
}

model FetchAccessTokenResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessToken?: string(name='Access_token'),
    expiresIn?: string(name='Expires_in'),
    idToken?: string(name='Id_token'),
    refreshToken?: string(name='Refresh_token'),
    scope?: string(name='Scope'),
    tokenType?: string(name='Token_type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FetchAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FetchAccessTokenResponseBody(name='body'),
}

async function fetchAccessTokenWithOptions(request: FetchAccessTokenRequest, runtime: Util.RuntimeOptions): FetchAccessTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.mobileExtendParamsJson)) {
    query['MobileExtendParamsJson'] = request.mobileExtendParamsJson;
  }
  if (!Util.isUnset(request.mobileExtendParamsJsonSign)) {
    query['MobileExtendParamsJsonSign'] = request.mobileExtendParamsJsonSign;
  }
  if (!Util.isUnset(request.serverExtendParamsJson)) {
    query['ServerExtendParamsJson'] = request.serverExtendParamsJson;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.XClientIp)) {
    query['XClientIp'] = request.XClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FetchAccessToken',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fetchAccessToken(request: FetchAccessTokenRequest): FetchAccessTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchAccessTokenWithOptions(request, runtime);
}

model GetAuthenticatorRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  userId?: string(name='UserId'),
}

model GetAuthenticatorResponseBody = {
  authenticator?: {
    authenticatorName?: string(name='AuthenticatorName'),
    authenticatorUuid?: string(name='AuthenticatorUuid'),
    credentialId?: string(name='CredentialId'),
    customAuthenticator?: string(name='CustomAuthenticator'),
    lastVerifySourceIp?: string(name='LastVerifySourceIp'),
    lastVerifyTime?: long(name='LastVerifyTime'),
    lastVerifyUserAgent?: string(name='LastVerifyUserAgent'),
    registerSourceIp?: string(name='RegisterSourceIp'),
    registerTime?: long(name='RegisterTime'),
    type?: string(name='Type'),
  }(name='Authenticator'),
  requestId?: string(name='RequestId'),
}

model GetAuthenticatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAuthenticatorResponseBody(name='body'),
}

async function getAuthenticatorWithOptions(request: GetAuthenticatorRequest, runtime: Util.RuntimeOptions): GetAuthenticatorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorUuid)) {
    query['AuthenticatorUuid'] = request.authenticatorUuid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAuthenticator',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAuthenticator(request: GetAuthenticatorRequest): GetAuthenticatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthenticatorWithOptions(request, runtime);
}

model ListAuthenticationLogsRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorType?: string(name='AuthenticatorType'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  credentialId?: string(name='CredentialId'),
  fromTime?: long(name='FromTime'),
  logTag?: string(name='LogTag'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  toTime?: long(name='ToTime'),
  userId?: string(name='UserId'),
}

model ListAuthenticationLogsResponseBody = {
  authenticationLogContent?: [ 
    {
      aliUid?: string(name='AliUid'),
      applicationExternalId?: string(name='ApplicationExternalId'),
      applicationUuid?: string(name='ApplicationUuid'),
      authenticationAction?: string(name='AuthenticationAction'),
      authenticationTime?: long(name='AuthenticationTime'),
      authenticatorName?: string(name='AuthenticatorName'),
      authenticatorType?: string(name='AuthenticatorType'),
      authenticatorUuid?: string(name='AuthenticatorUuid'),
      challengeBase64?: string(name='ChallengeBase64'),
      credentialId?: string(name='CredentialId'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      logParams?: string(name='LogParams'),
      logTag?: string(name='LogTag'),
      rawAuthenticationContext?: string(name='RawAuthenticationContext'),
      tenantId?: string(name='TenantId'),
      userAgent?: string(name='UserAgent'),
      userId?: string(name='UserId'),
      userSourceIp?: string(name='UserSourceIp'),
      verifyResult?: boolean(name='VerifyResult'),
    }
  ](name='AuthenticationLogContent'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAuthenticationLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAuthenticationLogsResponseBody(name='body'),
}

async function listAuthenticationLogsWithOptions(request: ListAuthenticationLogsRequest, runtime: Util.RuntimeOptions): ListAuthenticationLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.authenticatorUuid)) {
    query['AuthenticatorUuid'] = request.authenticatorUuid;
  }
  if (!Util.isUnset(request.credentialId)) {
    query['CredentialId'] = request.credentialId;
  }
  if (!Util.isUnset(request.fromTime)) {
    query['FromTime'] = request.fromTime;
  }
  if (!Util.isUnset(request.logTag)) {
    query['LogTag'] = request.logTag;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.toTime)) {
    query['ToTime'] = request.toTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthenticationLogs',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthenticationLogs(request: ListAuthenticationLogsRequest): ListAuthenticationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthenticationLogsWithOptions(request, runtime);
}

model ListAuthenticatorOpsLogsRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorType?: string(name='AuthenticatorType'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  fromTime?: long(name='FromTime'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  toTime?: long(name='ToTime'),
  userId?: string(name='UserId'),
}

model ListAuthenticatorOpsLogsResponseBody = {
  authenticationLogContent?: [ 
    {
      aliUid?: string(name='AliUid'),
      applicationExternalId?: string(name='ApplicationExternalId'),
      applicationUuid?: string(name='ApplicationUuid'),
      authenticatorName?: string(name='AuthenticatorName'),
      authenticatorType?: string(name='AuthenticatorType'),
      authenticatorUuid?: string(name='AuthenticatorUuid'),
      challengeBase64?: string(name='ChallengeBase64'),
      credentialId?: string(name='CredentialId'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      logParams?: string(name='LogParams'),
      operationAction?: string(name='OperationAction'),
      operationResult?: boolean(name='OperationResult'),
      operationTime?: long(name='OperationTime'),
      rawContext?: string(name='RawContext'),
      tenantId?: string(name='TenantId'),
      userAgent?: string(name='UserAgent'),
      userId?: string(name='UserId'),
      userSourceIp?: string(name='UserSourceIp'),
    }
  ](name='AuthenticationLogContent'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAuthenticatorOpsLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAuthenticatorOpsLogsResponseBody(name='body'),
}

async function listAuthenticatorOpsLogsWithOptions(request: ListAuthenticatorOpsLogsRequest, runtime: Util.RuntimeOptions): ListAuthenticatorOpsLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.authenticatorUuid)) {
    query['AuthenticatorUuid'] = request.authenticatorUuid;
  }
  if (!Util.isUnset(request.fromTime)) {
    query['FromTime'] = request.fromTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.toTime)) {
    query['ToTime'] = request.toTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthenticatorOpsLogs',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthenticatorOpsLogs(request: ListAuthenticatorOpsLogsRequest): ListAuthenticatorOpsLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthenticatorOpsLogsWithOptions(request, runtime);
}

model ListAuthenticatorsRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorType?: string(name='AuthenticatorType'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  userId?: string(name='UserId'),
}

model ListAuthenticatorsResponseBody = {
  authenticator?: [ 
    {
      applicationExternalId?: string(name='ApplicationExternalId'),
      authenticatorName?: string(name='AuthenticatorName'),
      authenticatorUuid?: string(name='AuthenticatorUuid'),
      credentialId?: string(name='CredentialId'),
      lastVerifyTime?: long(name='LastVerifyTime'),
      registerTime?: long(name='RegisterTime'),
      type?: string(name='Type'),
    }
  ](name='Authenticator'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListAuthenticatorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAuthenticatorsResponseBody(name='body'),
}

async function listAuthenticatorsWithOptions(request: ListAuthenticatorsRequest, runtime: Util.RuntimeOptions): ListAuthenticatorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthenticators',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthenticators(request: ListAuthenticatorsRequest): ListAuthenticatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthenticatorsWithOptions(request, runtime);
}

model ListCostUnitOrdersRequest {
  beginDate?: string(name='BeginDate'),
  finalDate?: string(name='FinalDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListCostUnitOrdersResponseBody = {
  items?: [ 
    {
      aliOrderCode?: string(name='AliOrderCode'),
      aliOrderInstanceId?: string(name='AliOrderInstanceId'),
      createTime?: long(name='CreateTime'),
      expiredTime?: long(name='ExpiredTime'),
      orderStatus?: string(name='OrderStatus'),
      refundTime?: long(name='RefundTime'),
      totalCostUnit?: long(name='TotalCostUnit'),
      usedCostUnit?: long(name='UsedCostUnit'),
    }
  ](name='Items'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalElements?: long(name='TotalElements'),
  totalPages?: long(name='TotalPages'),
}

model ListCostUnitOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCostUnitOrdersResponseBody(name='body'),
}

async function listCostUnitOrdersWithOptions(request: ListCostUnitOrdersRequest, runtime: Util.RuntimeOptions): ListCostUnitOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginDate)) {
    query['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.finalDate)) {
    query['FinalDate'] = request.finalDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCostUnitOrders',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCostUnitOrders(request: ListCostUnitOrdersRequest): ListCostUnitOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCostUnitOrdersWithOptions(request, runtime);
}

model ListOrderConsumeStatisticRecordsRequest {
  aliOrderCode?: string(name='AliOrderCode'),
  applicationExternalId?: string(name='ApplicationExternalId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  serviceCode?: string(name='ServiceCode'),
  statisticTimeMax?: string(name='StatisticTimeMax'),
  statisticTimeMin?: string(name='StatisticTimeMin'),
}

model ListOrderConsumeStatisticRecordsResponseBody = {
  items?: [ 
    {
      aliOrderCode?: string(name='AliOrderCode'),
      applicationExternalId?: string(name='ApplicationExternalId'),
      chargedCount?: long(name='ChargedCount'),
      serviceCode?: string(name='ServiceCode'),
      statisticTime?: long(name='StatisticTime'),
      totalPrice?: long(name='TotalPrice'),
      unitPrice?: long(name='UnitPrice'),
    }
  ](name='Items'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalElements?: long(name='TotalElements'),
  totalPages?: long(name='TotalPages'),
}

model ListOrderConsumeStatisticRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrderConsumeStatisticRecordsResponseBody(name='body'),
}

async function listOrderConsumeStatisticRecordsWithOptions(request: ListOrderConsumeStatisticRecordsRequest, runtime: Util.RuntimeOptions): ListOrderConsumeStatisticRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliOrderCode)) {
    query['AliOrderCode'] = request.aliOrderCode;
  }
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.serviceCode)) {
    query['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.statisticTimeMax)) {
    query['StatisticTimeMax'] = request.statisticTimeMax;
  }
  if (!Util.isUnset(request.statisticTimeMin)) {
    query['StatisticTimeMin'] = request.statisticTimeMin;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrderConsumeStatisticRecords',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrderConsumeStatisticRecords(request: ListOrderConsumeStatisticRecordsRequest): ListOrderConsumeStatisticRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrderConsumeStatisticRecordsWithOptions(request, runtime);
}

model ListPwnedPasswordsRequest {
  prefixHexPasswordSha1Hash?: string(name='PrefixHexPasswordSha1Hash'),
}

model ListPwnedPasswordsResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  pwnedPasswordInfos?: [ 
    {
      hexPasswordSha1Hash?: string(name='HexPasswordSha1Hash'),
      pwnedCount?: long(name='PwnedCount'),
    }
  ](name='PwnedPasswordInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPwnedPasswordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPwnedPasswordsResponseBody(name='body'),
}

async function listPwnedPasswordsWithOptions(request: ListPwnedPasswordsRequest, runtime: Util.RuntimeOptions): ListPwnedPasswordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.prefixHexPasswordSha1Hash)) {
    query['PrefixHexPasswordSha1Hash'] = request.prefixHexPasswordSha1Hash;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPwnedPasswords',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPwnedPasswords(request: ListPwnedPasswordsRequest): ListPwnedPasswordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPwnedPasswordsWithOptions(request, runtime);
}

model ListUsersRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  userId?: string(name='UserId'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  users?: [ 
    {
      userDisplayName?: string(name='UserDisplayName'),
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model QuerySmsReportsRequest {
  appId?: string(name='AppId'),
  eventId?: string(name='EventId'),
}

model QuerySmsReportsResponseBody = {
  requestId?: string(name='RequestId'),
  smsReports?: [ 
    {
      appId?: string(name='AppId'),
      code?: string(name='Code'),
      eventId?: string(name='EventId'),
      mobile?: string(name='Mobile'),
      sn?: string(name='Sn'),
      stat?: string(name='Stat'),
      tenantId?: string(name='TenantId'),
      tid?: string(name='Tid'),
      time?: string(name='Time'),
    }
  ](name='SmsReports'),
  totalElements?: long(name='TotalElements'),
}

model QuerySmsReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySmsReportsResponseBody(name='body'),
}

async function querySmsReportsWithOptions(request: QuerySmsReportsRequest, runtime: Util.RuntimeOptions): QuerySmsReportsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySmsReports',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySmsReports(request: QuerySmsReportsRequest): QuerySmsReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySmsReportsWithOptions(request, runtime);
}

model RegisterAuthenticatorRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorName?: string(name='AuthenticatorName'),
  authenticatorType?: string(name='AuthenticatorType'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign'),
  logParams?: string(name='LogParams'),
  registrationContext?: string(name='RegistrationContext'),
  requireChallengeBase64?: string(name='RequireChallengeBase64'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  userId?: string(name='UserId'),
  userSourceIp?: string(name='UserSourceIp'),
}

model RegisterAuthenticatorResponseBody = {
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  etasResponseSting?: string(name='EtasResponseSting'),
  requestId?: string(name='RequestId'),
}

model RegisterAuthenticatorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterAuthenticatorResponseBody(name='body'),
}

async function registerAuthenticatorWithOptions(request: RegisterAuthenticatorRequest, runtime: Util.RuntimeOptions): RegisterAuthenticatorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorName)) {
    query['AuthenticatorName'] = request.authenticatorName;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.clientExtendParamsJson)) {
    query['ClientExtendParamsJson'] = request.clientExtendParamsJson;
  }
  if (!Util.isUnset(request.clientExtendParamsJsonSign)) {
    query['ClientExtendParamsJsonSign'] = request.clientExtendParamsJsonSign;
  }
  if (!Util.isUnset(request.logParams)) {
    query['LogParams'] = request.logParams;
  }
  if (!Util.isUnset(request.registrationContext)) {
    query['RegistrationContext'] = request.registrationContext;
  }
  if (!Util.isUnset(request.requireChallengeBase64)) {
    query['RequireChallengeBase64'] = request.requireChallengeBase64;
  }
  if (!Util.isUnset(request.serverExtendParamsJson)) {
    query['ServerExtendParamsJson'] = request.serverExtendParamsJson;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userSourceIp)) {
    query['UserSourceIp'] = request.userSourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterAuthenticator',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerAuthenticator(request: RegisterAuthenticatorRequest): RegisterAuthenticatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerAuthenticatorWithOptions(request, runtime);
}

model ServiceInvokeRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  doraemonAction?: string(name='DoraemonAction'),
  mobileExtendParamsJson?: string(name='MobileExtendParamsJson'),
  mobileExtendParamsJsonSign?: string(name='MobileExtendParamsJsonSign'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  serviceCode?: string(name='ServiceCode'),
  testModel?: boolean(name='TestModel'),
  XClientIp?: string(name='XClientIp'),
}

model ServiceInvokeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  eventId?: string(name='EventId'),
  idToken?: string(name='IdToken'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ServiceInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ServiceInvokeResponseBody(name='body'),
}

async function serviceInvokeWithOptions(request: ServiceInvokeRequest, runtime: Util.RuntimeOptions): ServiceInvokeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.doraemonAction)) {
    query['DoraemonAction'] = request.doraemonAction;
  }
  if (!Util.isUnset(request.mobileExtendParamsJson)) {
    query['MobileExtendParamsJson'] = request.mobileExtendParamsJson;
  }
  if (!Util.isUnset(request.mobileExtendParamsJsonSign)) {
    query['MobileExtendParamsJsonSign'] = request.mobileExtendParamsJsonSign;
  }
  if (!Util.isUnset(request.serverExtendParamsJson)) {
    query['ServerExtendParamsJson'] = request.serverExtendParamsJson;
  }
  if (!Util.isUnset(request.serviceCode)) {
    query['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.testModel)) {
    query['TestModel'] = request.testModel;
  }
  if (!Util.isUnset(request.XClientIp)) {
    query['XClientIp'] = request.XClientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ServiceInvoke',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function serviceInvoke(request: ServiceInvokeRequest): ServiceInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return serviceInvokeWithOptions(request, runtime);
}

model UpdateAuthenticatorAttributeRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticatorName?: string(name='AuthenticatorName'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  userId?: string(name='UserId'),
}

model UpdateAuthenticatorAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuthenticatorAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAuthenticatorAttributeResponseBody(name='body'),
}

async function updateAuthenticatorAttributeWithOptions(request: UpdateAuthenticatorAttributeRequest, runtime: Util.RuntimeOptions): UpdateAuthenticatorAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticatorName)) {
    query['AuthenticatorName'] = request.authenticatorName;
  }
  if (!Util.isUnset(request.authenticatorUuid)) {
    query['AuthenticatorUuid'] = request.authenticatorUuid;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAuthenticatorAttribute',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAuthenticatorAttribute(request: UpdateAuthenticatorAttributeRequest): UpdateAuthenticatorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthenticatorAttributeWithOptions(request, runtime);
}

model VerifyIdTokenRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  jwtIdToken?: string(name='JwtIdToken'),
}

model VerifyIdTokenResponseBody = {
  requestId?: string(name='RequestId'),
  userId?: string(name='UserId'),
}

model VerifyIdTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyIdTokenResponseBody(name='body'),
}

async function verifyIdTokenWithOptions(request: VerifyIdTokenRequest, runtime: Util.RuntimeOptions): VerifyIdTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.jwtIdToken)) {
    query['JwtIdToken'] = request.jwtIdToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyIdToken',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyIdToken(request: VerifyIdTokenRequest): VerifyIdTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyIdTokenWithOptions(request, runtime);
}

model VerifyUserAuthenticationRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  authenticationContext?: string(name='AuthenticationContext'),
  authenticatorType?: string(name='AuthenticatorType'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign'),
  logParams?: string(name='LogParams'),
  logTag?: string(name='LogTag'),
  requireBindHashBase64?: string(name='RequireBindHashBase64'),
  requireChallengeBase64?: string(name='RequireChallengeBase64'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  userId?: string(name='UserId'),
  userSourceIp?: string(name='UserSourceIp'),
}

model VerifyUserAuthenticationResponseBody = {
  authenticateResultInfo?: {
    bindHashBase64?: string(name='BindHashBase64'),
    credentialId?: string(name='CredentialId'),
    userId?: string(name='UserId'),
  }(name='AuthenticateResultInfo'),
  etasSDKString?: string(name='EtasSDKString'),
  idToken?: string(name='IdToken'),
  requestId?: string(name='RequestId'),
  verifyResult?: boolean(name='VerifyResult'),
}

model VerifyUserAuthenticationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyUserAuthenticationResponseBody(name='body'),
}

async function verifyUserAuthenticationWithOptions(request: VerifyUserAuthenticationRequest, runtime: Util.RuntimeOptions): VerifyUserAuthenticationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationExternalId)) {
    query['ApplicationExternalId'] = request.applicationExternalId;
  }
  if (!Util.isUnset(request.authenticationContext)) {
    query['AuthenticationContext'] = request.authenticationContext;
  }
  if (!Util.isUnset(request.authenticatorType)) {
    query['AuthenticatorType'] = request.authenticatorType;
  }
  if (!Util.isUnset(request.clientExtendParamsJson)) {
    query['ClientExtendParamsJson'] = request.clientExtendParamsJson;
  }
  if (!Util.isUnset(request.clientExtendParamsJsonSign)) {
    query['ClientExtendParamsJsonSign'] = request.clientExtendParamsJsonSign;
  }
  if (!Util.isUnset(request.logParams)) {
    query['LogParams'] = request.logParams;
  }
  if (!Util.isUnset(request.logTag)) {
    query['LogTag'] = request.logTag;
  }
  if (!Util.isUnset(request.requireBindHashBase64)) {
    query['RequireBindHashBase64'] = request.requireBindHashBase64;
  }
  if (!Util.isUnset(request.requireChallengeBase64)) {
    query['RequireChallengeBase64'] = request.requireChallengeBase64;
  }
  if (!Util.isUnset(request.serverExtendParamsJson)) {
    query['ServerExtendParamsJson'] = request.serverExtendParamsJson;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.userSourceIp)) {
    query['UserSourceIp'] = request.userSourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyUserAuthentication',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyUserAuthentication(request: VerifyUserAuthenticationRequest): VerifyUserAuthenticationResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyUserAuthenticationWithOptions(request, runtime);
}

