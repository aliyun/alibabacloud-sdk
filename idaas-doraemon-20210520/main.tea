/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    cn-hangzhou = 'idaas-doraemon.cn-hangzhou.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('idaas-doraemon', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListUsersRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  userId?: string(name='UserId', description='用户id'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount', description='查询结果数据总数'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
      userDisplayName?: string(name='UserDisplayName'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model GetAuthenticatorRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  userId?: string(name='UserId', description='用户ID'),
  authenticatorUuid?: string(name='AuthenticatorUuid', description='认证器uuid'),
}

model GetAuthenticatorResponseBody = {
  requestId?: string(name='RequestId'),
  authenticator?: {
    authenticatorUuid?: string(name='AuthenticatorUuid'),
    credentialId?: string(name='CredentialId', description='创建认证器的Options'),
    type?: string(name='Type', description='认证器类型'),
    authenticatorName?: string(name='AuthenticatorName', description='认证器名字'),
    registerTime?: long(name='RegisterTime', description='注册时间'),
    lastVerifyTime?: long(name='LastVerifyTime', description='最后验证时间'),
    registerSourceIp?: string(name='RegisterSourceIp', description='用户注册IP'),
    lastVerifySourceIp?: string(name='LastVerifySourceIp', description='用户最后签名IP'),
    lastVerifyUserAgent?: string(name='LastVerifyUserAgent', description='用户最后签名userAgent'),
    customAuthenticator?: string(name='CustomAuthenticator'),
  }(name='Authenticator'),
}

model GetAuthenticatorResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthenticatorResponseBody(name='body'),
}

async function getAuthenticatorWithOptions(request: GetAuthenticatorRequest, runtime: Util.RuntimeOptions): GetAuthenticatorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuthenticator', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuthenticator(request: GetAuthenticatorRequest): GetAuthenticatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthenticatorWithOptions(request, runtime);
}

model ListPwnedPasswordsRequest {
  prefixHexPasswordSha1Hash?: string(name='PrefixHexPasswordSha1Hash', description='泄露密码SHA1值前6位'),
}

model ListPwnedPasswordsResponseBody = {
  requestId?: string(name='RequestId'),
  pwnedPasswordInfos?: [ 
    {
      hexPasswordSha1Hash?: string(name='HexPasswordSha1Hash', description='泄露密码SHA1值'),
      pwnedCount?: long(name='PwnedCount', description='泄露次数'),
    }
  ](name='PwnedPasswordInfos'),
  totalCount?: long(name='TotalCount', description='返回列表长度'),
}

model ListPwnedPasswordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPwnedPasswordsResponseBody(name='body'),
}

async function listPwnedPasswordsWithOptions(request: ListPwnedPasswordsRequest, runtime: Util.RuntimeOptions): ListPwnedPasswordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPwnedPasswords', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPwnedPasswords(request: ListPwnedPasswordsRequest): ListPwnedPasswordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPwnedPasswordsWithOptions(request, runtime);
}

model RegisterAuthenticatorRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  authenticatorType?: string(name='AuthenticatorType', description='认证器类型'),
  userId?: string(name='UserId', description='用户id'),
  authenticatorName?: string(name='AuthenticatorName', description='认证器名字'),
  registrationContext?: string(name='RegistrationContext', description='注册上下文'),
  requireChallengeBase64?: string(name='RequireChallengeBase64', description='会话绑定的challenge base64标识'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson', description='客户端SDK生成认证上下文'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign', description='客户端SDK生成认证上下文签名信息'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson', description='服务端配置项，决定认证要求属性'),
  userSourceIp?: string(name='UserSourceIp', description='用户端来源IP地址，用于审计'),
  logParams?: string(name='LogParams', description='用户自定义记录审计日志信息'),
}

model RegisterAuthenticatorResponseBody = {
  requestId?: string(name='RequestId'),
  authenticatorUuid?: string(name='AuthenticatorUuid', description='认证器UUID'),
}

model RegisterAuthenticatorResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterAuthenticatorResponseBody(name='body'),
}

async function registerAuthenticatorWithOptions(request: RegisterAuthenticatorRequest, runtime: Util.RuntimeOptions): RegisterAuthenticatorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterAuthenticator', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerAuthenticator(request: RegisterAuthenticatorRequest): RegisterAuthenticatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerAuthenticatorWithOptions(request, runtime);
}

model VerifyUserAuthenticationRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  authenticatorType?: string(name='AuthenticatorType', description='认证器类型'),
  userId?: string(name='UserId', description='用户id'),
  authenticationContext?: string(name='AuthenticationContext', description='认证上下文，由AuthenticatorType决定格式'),
  requireChallengeBase64?: string(name='RequireChallengeBase64', description='会话绑定的challenge base64标识'),
  requireBindHashBase64?: string(name='RequireBindHashBase64', description='认证绑定的操作hash base64标识'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson', description='客户端SDK生成认证上下文'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign', description='客户端SDK生成认证上下文签名信息'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson', description='服务端配置项，决定认证要求属性'),
  userSourceIp?: string(name='UserSourceIp', description='用户端来源IP地址，用于审计'),
  logTag?: string(name='LogTag', description='用户自定义记录审计日志标签'),
  logParams?: string(name='LogParams', description='用户自定义记录审计日志信息'),
}

model VerifyUserAuthenticationResponseBody = {
  requestId?: string(name='RequestId'),
  verifyResult?: boolean(name='VerifyResult', description='认证结果，true or false'),
  authenticateResultInfo?: {
    userId?: string(name='UserId', description='认证通过的用户Id'),
    credentialId?: string(name='CredentialId', description='认证使用的凭据Id'),
    bindHashBase64?: string(name='BindHashBase64', description='这次认证绑定的操作hash'),
  }(name='AuthenticateResultInfo', description='认证结果'),
}

model VerifyUserAuthenticationResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyUserAuthenticationResponseBody(name='body'),
}

async function verifyUserAuthenticationWithOptions(request: VerifyUserAuthenticationRequest, runtime: Util.RuntimeOptions): VerifyUserAuthenticationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyUserAuthentication', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyUserAuthentication(request: VerifyUserAuthenticationRequest): VerifyUserAuthenticationResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyUserAuthenticationWithOptions(request, runtime);
}

model UpdateAuthenticatorAttributeRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  userId?: string(name='UserId', description='用户id'),
  authenticatorName?: string(name='AuthenticatorName', description='认证器名字'),
  authenticatorUuid?: string(name='AuthenticatorUuid', description='认证器uuid'),
}

model UpdateAuthenticatorAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAuthenticatorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthenticatorAttributeResponseBody(name='body'),
}

async function updateAuthenticatorAttributeWithOptions(request: UpdateAuthenticatorAttributeRequest, runtime: Util.RuntimeOptions): UpdateAuthenticatorAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAuthenticatorAttribute', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAuthenticatorAttribute(request: UpdateAuthenticatorAttributeRequest): UpdateAuthenticatorAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAuthenticatorAttributeWithOptions(request, runtime);
}

model DeregisterAuthenticatorRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  userId?: string(name='UserId', description='用户id'),
  authenticatorUuid?: string(name='AuthenticatorUuid', description='认证器uuid'),
}

model DeregisterAuthenticatorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeregisterAuthenticatorResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterAuthenticatorResponseBody(name='body'),
}

async function deregisterAuthenticatorWithOptions(request: DeregisterAuthenticatorRequest, runtime: Util.RuntimeOptions): DeregisterAuthenticatorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeregisterAuthenticator', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deregisterAuthenticator(request: DeregisterAuthenticatorRequest): DeregisterAuthenticatorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterAuthenticatorWithOptions(request, runtime);
}

model ListAuthenticatorOpsLogsRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  userId?: string(name='UserId'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  authenticatorType?: string(name='AuthenticatorType'),
  fromTime?: long(name='FromTime'),
  toTime?: long(name='ToTime'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListAuthenticatorOpsLogsResponseBody = {
  requestId?: string(name='RequestId'),
  authenticationLogContent?: [ 
    {
      tenantId?: string(name='TenantId'),
      aliUid?: string(name='AliUid'),
      applicationUuid?: string(name='ApplicationUuid'),
      applicationExternalId?: string(name='ApplicationExternalId'),
      userId?: string(name='UserId'),
      authenticatorUuid?: string(name='AuthenticatorUuid'),
      authenticatorName?: string(name='AuthenticatorName'),
      credentialId?: string(name='CredentialId'),
      authenticatorType?: string(name='AuthenticatorType'),
      operationAction?: string(name='OperationAction'),
      challengeBase64?: string(name='ChallengeBase64'),
      operationTime?: long(name='OperationTime'),
      userAgent?: string(name='UserAgent'),
      userSourceIp?: string(name='UserSourceIp'),
      rawContext?: string(name='RawContext'),
      operationResult?: boolean(name='OperationResult'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      logParams?: string(name='LogParams'),
    }
  ](name='AuthenticationLogContent'),
  totalCount?: long(name='TotalCount', description='返回列表长度'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListAuthenticatorOpsLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthenticatorOpsLogsResponseBody(name='body'),
}

async function listAuthenticatorOpsLogsWithOptions(request: ListAuthenticatorOpsLogsRequest, runtime: Util.RuntimeOptions): ListAuthenticatorOpsLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAuthenticatorOpsLogs', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuthenticatorOpsLogs(request: ListAuthenticatorOpsLogsRequest): ListAuthenticatorOpsLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthenticatorOpsLogsWithOptions(request, runtime);
}

model ListAuthenticatorsRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  userId?: string(name='UserId', description='用户id'),
  authenticatorType?: string(name='AuthenticatorType', description='认证器类型'),
  pageNumber?: long(name='PageNumber', description='当前开始读取的位置，不设置时默认为1'),
  pageSize?: long(name='PageSize', description='本次读取的最大数据记录数量，不指定时使用默认值'),
}

model ListAuthenticatorsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber', description='读取到的位置'),
  totalCount?: long(name='TotalCount', description='查询结果数据总数'),
  pageSize?: long(name='PageSize', description='每页记录数量'),
  authenticator?: [ 
    {
      applicationExternalId?: string(name='ApplicationExternalId', description='应用ID'),
      authenticatorUuid?: string(name='AuthenticatorUuid', description='认证器uuid'),
      credentialId?: string(name='CredentialId', description='身份认证ID'),
      type?: string(name='Type', description='认证器类型'),
      authenticatorName?: string(name='AuthenticatorName', description='身份认证对应的认证器名称'),
      registerTime?: long(name='RegisterTime', description='创建时间'),
      lastVerifyTime?: long(name='LastVerifyTime', description='最后验证时间，如果新注册则为注册时间'),
    }
  ](name='Authenticator'),
}

model ListAuthenticatorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthenticatorsResponseBody(name='body'),
}

async function listAuthenticatorsWithOptions(request: ListAuthenticatorsRequest, runtime: Util.RuntimeOptions): ListAuthenticatorsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAuthenticators', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuthenticators(request: ListAuthenticatorsRequest): ListAuthenticatorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthenticatorsWithOptions(request, runtime);
}

model ListAuthenticationLogsRequest {
  applicationExternalId?: string(name='ApplicationExternalId'),
  userId?: string(name='UserId'),
  authenticatorUuid?: string(name='AuthenticatorUuid'),
  authenticatorType?: string(name='AuthenticatorType'),
  credentialId?: string(name='CredentialId'),
  logTag?: string(name='LogTag'),
  fromTime?: long(name='FromTime'),
  toTime?: long(name='ToTime'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListAuthenticationLogsResponseBody = {
  requestId?: string(name='RequestId'),
  authenticationLogContent?: [ 
    {
      tenantId?: string(name='TenantId'),
      aliUid?: string(name='AliUid'),
      applicationUuid?: string(name='ApplicationUuid'),
      applicationExternalId?: string(name='ApplicationExternalId'),
      userId?: string(name='UserId'),
      authenticatorUuid?: string(name='AuthenticatorUuid'),
      authenticatorName?: string(name='AuthenticatorName'),
      credentialId?: string(name='CredentialId'),
      authenticatorType?: string(name='AuthenticatorType'),
      authenticationAction?: string(name='AuthenticationAction'),
      challengeBase64?: string(name='ChallengeBase64'),
      authenticationTime?: long(name='AuthenticationTime'),
      userAgent?: string(name='UserAgent'),
      userSourceIp?: string(name='UserSourceIp'),
      rawAuthenticationContext?: string(name='RawAuthenticationContext'),
      verifyResult?: boolean(name='VerifyResult'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      logTag?: string(name='LogTag'),
      logParams?: string(name='LogParams'),
    }
  ](name='AuthenticationLogContent'),
  totalCount?: long(name='TotalCount', description='返回列表长度'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListAuthenticationLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthenticationLogsResponseBody(name='body'),
}

async function listAuthenticationLogsWithOptions(request: ListAuthenticationLogsRequest, runtime: Util.RuntimeOptions): ListAuthenticationLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAuthenticationLogs', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuthenticationLogs(request: ListAuthenticationLogsRequest): ListAuthenticationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthenticationLogsWithOptions(request, runtime);
}

model CreateUserAuthenticateOptionsRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  authenticatorType?: string(name='AuthenticatorType', description='认证器类型'),
  userId?: string(name='UserId', description='用户id'),
  bindHashBase64?: string(name='BindHashBase64', description='操作hash，用来和认证绑定'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson', description='客户端SDK生成认证上下文'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign', description='客户端SDK生成认证上下文签名信息'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson', description='服务端配置项，决定认证要求属性'),
}

model CreateUserAuthenticateOptionsResponseBody = {
  requestId?: string(name='RequestId'),
  challengeBase64?: string(name='ChallengeBase64', description='防重放挑战码'),
  options?: string(name='Options', description='创建认证的Options，内容是JSON'),
}

model CreateUserAuthenticateOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserAuthenticateOptionsResponseBody(name='body'),
}

async function createUserAuthenticateOptionsWithOptions(request: CreateUserAuthenticateOptionsRequest, runtime: Util.RuntimeOptions): CreateUserAuthenticateOptionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUserAuthenticateOptions', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUserAuthenticateOptions(request: CreateUserAuthenticateOptionsRequest): CreateUserAuthenticateOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserAuthenticateOptionsWithOptions(request, runtime);
}

model FetchAccessTokenRequest {
  mobileExtendParamsJson?: string(name='MobileExtendParamsJson'),
  mobileExtendParamsJsonSign?: string(name='MobileExtendParamsJsonSign'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  applicationExternalId?: string(name='ApplicationExternalId'),
  XClientIp?: string(name='XClientIp'),
}

model FetchAccessTokenResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  data?: {
    accessToken?: string(name='Access_token'),
    tokenType?: string(name='Token_type'),
    scope?: string(name='Scope'),
    expiresIn?: string(name='Expires_in'),
    refreshToken?: string(name='Refresh_token'),
    idToken?: string(name='Id_token'),
  }(name='Data'),
}

model FetchAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: FetchAccessTokenResponseBody(name='body'),
}

async function fetchAccessTokenWithOptions(request: FetchAccessTokenRequest, runtime: Util.RuntimeOptions): FetchAccessTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FetchAccessToken', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function fetchAccessToken(request: FetchAccessTokenRequest): FetchAccessTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchAccessTokenWithOptions(request, runtime);
}

model ServiceInvokeRequest {
  mobileExtendParamsJson?: string(name='MobileExtendParamsJson'),
  mobileExtendParamsJsonSign?: string(name='MobileExtendParamsJsonSign'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson'),
  serviceCode?: string(name='ServiceCode'),
  doraemonAction?: string(name='DoraemonAction'),
  applicationExternalId?: string(name='ApplicationExternalId'),
  testModel?: boolean(name='TestModel'),
  XClientIp?: string(name='XClientIp'),
}

model ServiceInvokeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ServiceInvokeResponse = {
  headers: map[string]string(name='headers'),
  body: ServiceInvokeResponseBody(name='body'),
}

async function serviceInvokeWithOptions(request: ServiceInvokeRequest, runtime: Util.RuntimeOptions): ServiceInvokeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ServiceInvoke', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function serviceInvoke(request: ServiceInvokeRequest): ServiceInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return serviceInvokeWithOptions(request, runtime);
}

model CreateAuthenticatorRegistrationRequest {
  applicationExternalId?: string(name='ApplicationExternalId', description='应用外部Id'),
  authenticatorType?: string(name='AuthenticatorType', description='认证器类型'),
  userId?: string(name='UserId', description='用户id'),
  userName?: string(name='UserName', description='用户姓名'),
  userDisplayName?: string(name='UserDisplayName', description='用户展示名'),
  clientExtendParamsJson?: string(name='ClientExtendParamsJson', description='客户端SDK生成认证上下文'),
  clientExtendParamsJsonSign?: string(name='ClientExtendParamsJsonSign', description='客户端SDK生成认证上下文签名信息'),
  serverExtendParamsJson?: string(name='ServerExtendParamsJson', description='服务端配置项，决定认证要求属性'),
  registrationContext?: string(name='RegistrationContext', description='注册上下文'),
}

model CreateAuthenticatorRegistrationResponseBody = {
  requestId?: string(name='RequestId'),
  challengeBase64?: string(name='ChallengeBase64', description='防重放挑战码'),
  options?: string(name='Options', description='创建认证器的Options'),
}

model CreateAuthenticatorRegistrationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuthenticatorRegistrationResponseBody(name='body'),
}

async function createAuthenticatorRegistrationWithOptions(request: CreateAuthenticatorRegistrationRequest, runtime: Util.RuntimeOptions): CreateAuthenticatorRegistrationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAuthenticatorRegistration', '2021-05-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAuthenticatorRegistration(request: CreateAuthenticatorRegistrationRequest): CreateAuthenticatorRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthenticatorRegistrationWithOptions(request, runtime);
}

