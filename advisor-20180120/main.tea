/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('advisor', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeAdvicesRequest {
  adviceId?: long(name='AdviceId', example='12345678'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
  excludeAdviceId?: long(name='ExcludeAdviceId', example='12345678'),
  language?: string(name='Language', example='zh'),
  product?: string(name='Product', example='ecs'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
}

model DescribeAdvicesResponseBody = {
  data?: {
    advice?: [ 
    {
      aliyunId?: long(name='AliyunId', example='1234567891234567'),
      checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
      checkName?: string(name='CheckName'),
      content?: string(name='Content', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
]'),
      description?: string(name='Description'),
      gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
      id?: long(name='Id', description='ID', example='123'),
      isExpired?: boolean(name='IsExpired', example='false'),
      product?: string(name='Product', example='ecs'),
      resource?: string(name='Resource', example='{
	"resourceId": xxxx,
	"resourceName": xxxxxx,
	"regionId": xxxx,
	...
}'),
      resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
      severity?: int32(name='Severity', example='1'),
    }
  ](name='Advice')
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdvicesResponseBody(name='body'),
}

async function describeAdvicesWithOptions(request: DescribeAdvicesRequest, runtime: Util.RuntimeOptions): DescribeAdvicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adviceId)) {
    query['AdviceId'] = request.adviceId;
  }
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.excludeAdviceId)) {
    query['ExcludeAdviceId'] = request.excludeAdviceId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdvices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdvices(request: DescribeAdvicesRequest): DescribeAdvicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdvicesWithOptions(request, runtime);
}

model DescribeAdvicesPageRequest {
  adviceId?: long(name='AdviceId', example='12345678'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
  language?: string(name='Language', example='zh'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  product?: string(name='Product', example='ecs'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
}

model DescribeAdvicesPageResponseBody = {
  data?: {
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    result?: [ 
      {
        aliyunId?: long(name='AliyunId', example='1234567891234567'),
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        content?: string(name='Content', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
]'),
        description?: string(name='Description'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
        id?: long(name='Id', description='ID', example='123'),
        isExpired?: boolean(name='IsExpired', example='false'),
        product?: string(name='Product', example='ecs'),
        resource?: string(name='Resource', example='{
	"resourceId": xxxx,
	"resourceName": xxxxxx,
	"regionId": xxxx,
	...
}'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: long(name='Severity', example='1'),
      }
    ](name='Result'),
    total?: long(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdvicesPageResponseBody(name='body'),
}

async function describeAdvicesPageWithOptions(request: DescribeAdvicesPageRequest, runtime: Util.RuntimeOptions): DescribeAdvicesPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adviceId)) {
    query['AdviceId'] = request.adviceId;
  }
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdvicesPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdvicesPage(request: DescribeAdvicesPageRequest): DescribeAdvicesPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdvicesPageWithOptions(request, runtime);
}

model DescribeAdvisorChecksRequest {
  language?: string(name='Language', example='zh'),
  product?: string(name='Product', example='ecs'),
}

model DescribeAdvisorChecksResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    advisorCheck?: [ 
    {
      category?: string(name='Category', example='1'),
      code?: string(name='Code', example='EcsHighCpuUtilization'),
      description?: string(name='Description'),
      gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
      name?: string(name='Name'),
      operateColumn?: string(name='OperateColumn'),
      product?: string(name='Product', example='ecs'),
      status?: string(name='Status', example='enabled'),
      tips?: string(name='Tips'),
      viewColumn?: string(name='ViewColumn', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
]'),
    }
  ](name='AdvisorCheck')
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvisorChecksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdvisorChecksResponseBody(name='body'),
}

async function describeAdvisorChecksWithOptions(request: DescribeAdvisorChecksRequest, runtime: Util.RuntimeOptions): DescribeAdvisorChecksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdvisorChecks',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdvisorChecks(request: DescribeAdvisorChecksRequest): DescribeAdvisorChecksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdvisorChecksWithOptions(request, runtime);
}

model DescribeAdvisorResourcesRequest {
  keyword?: string(name='Keyword', example='abcd'),
  language?: string(name='Language', example='zh'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  product?: string(name='Product', example='ecs'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
}

model DescribeAdvisorResourcesResponseBody = {
  data?: {
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: {
      resource?: [ 
      {
        data?: string(name='Data', example='{
    "resourceId": "xxxxx",
    "deviceAvailable": true,
    ...
}'),
        product?: string(name='Product', example='ecs'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        resourceName?: string(name='ResourceName', example='ecs-20230701'),
      }
    ](name='Resource')
    }(name='Result'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvisorResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdvisorResourcesResponseBody(name='body'),
}

async function describeAdvisorResourcesWithOptions(request: DescribeAdvisorResourcesRequest, runtime: Util.RuntimeOptions): DescribeAdvisorResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdvisorResources',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdvisorResources(request: DescribeAdvisorResourcesRequest): DescribeAdvisorResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdvisorResourcesWithOptions(request, runtime);
}

model GetHistoryAdvicesRequest {
  endDate?: string(name='EndDate', example='2023-07-01'),
  language?: string(name='Language', example='zh'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  product?: string(name='Product', example='ecs'),
  reverse?: boolean(name='Reverse', example='true'),
  severity?: string(name='Severity', example='1'),
  startDate?: string(name='StartDate', example='2023-07-01'),
}

model GetHistoryAdvicesResponseBody = {
  data?: {
    pageNo?: int32(name='PageNo', example='1'),
    result?: [ 
      {
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        description?: string(name='Description'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        product?: string(name='Product', example='ecs'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: int32(name='Severity', example='1'),
        url?: string(name='Url', example='https://ecs.console.aliyun.com/#/server/i-bp67acfmxazb4p****/detail?regionId=cn-hangzhou'),
      }
    ](name='Result'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model GetHistoryAdvicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHistoryAdvicesResponseBody(name='body'),
}

async function getHistoryAdvicesWithOptions(request: GetHistoryAdvicesRequest, runtime: Util.RuntimeOptions): GetHistoryAdvicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.severity)) {
    query['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHistoryAdvices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHistoryAdvices(request: GetHistoryAdvicesRequest): GetHistoryAdvicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistoryAdvicesWithOptions(request, runtime);
}

model RefreshAdvisorCheckRequest {
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
  language?: string(name='Language', example='zh'),
  product?: string(name='Product', example='ecs'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
}

model RefreshAdvisorCheckResponseBody = {
  data?: {
    success?: boolean(name='Success', example='true'),
    taskId?: long(name='TaskId', example='12345678'),
    traceId?: string(name='TraceId', example='manual-1be17af1121b4974822e69daee4f2481'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model RefreshAdvisorCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshAdvisorCheckResponseBody(name='body'),
}

async function refreshAdvisorCheckWithOptions(request: RefreshAdvisorCheckRequest, runtime: Util.RuntimeOptions): RefreshAdvisorCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshAdvisorCheck',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshAdvisorCheck(request: RefreshAdvisorCheckRequest): RefreshAdvisorCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshAdvisorCheckWithOptions(request, runtime);
}

model RefreshAdvisorResourceRequest {
  product?: string(name='Product', example='ecs'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
}

model RefreshAdvisorResourceResponseBody = {
  data?: long(name='Data', example='12345678'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model RefreshAdvisorResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshAdvisorResourceResponseBody(name='body'),
}

async function refreshAdvisorResourceWithOptions(request: RefreshAdvisorResourceRequest, runtime: Util.RuntimeOptions): RefreshAdvisorResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshAdvisorResource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshAdvisorResource(request: RefreshAdvisorResourceRequest): RefreshAdvisorResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshAdvisorResourceWithOptions(request, runtime);
}

