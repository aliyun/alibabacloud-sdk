/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Advisor';
  @version = '2018-01-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeAdvicesRequest {
  adviceId?: long(name='AdviceId', example='12345678', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  clientUid?: long(name='ClientUid', example='-', position='Query'),
  excludeAdviceId?: long(name='ExcludeAdviceId', example='12345678', position='Query'),
  filterType?: string(name='FilterType', example='-', position='Query'),
  filterValue?: string(name='FilterValue', example='-', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
  token?: string(name='Token', example='-', position='Query'),
}

model DescribeAdvicesResponseBody = {
  data?: {
    advice?: [ 
    {
      action?: string(name='Action', example='-'),
      aliyunId?: long(name='AliyunId', example='1234567891234567'),
      checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
      checkName?: string(name='CheckName'),
      content?: string(name='Content', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
]'),
      description?: string(name='Description'),
      details?: string(name='Details', example='-'),
      gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
      id?: long(name='Id', description='ID', example='123'),
      isExpired?: boolean(name='IsExpired', example='false'),
      links?: string(name='Links', example='-'),
      product?: string(name='Product', example='ecs'),
      reason?: string(name='Reason', example='-'),
      resource?: string(name='Resource', example='{
	"resourceId": xxxx,
	"resourceName": xxxxxx,
	"regionId": xxxx,
	...
}'),
      resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
      severity?: int32(name='Severity', example='1'),
    }
  ](name='Advice')
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAdvicesResponseBody(name='body'),
}

async function describeAdvices(request: DescribeAdvicesRequest): DescribeAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvicesPageRequest {
  adviceId?: long(name='AdviceId', example='12345678', position='Query'),
  associateUid?: long(name='AssociateUid', example='-', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  excludeAdviceId?: string(name='ExcludeAdviceId', example='12345678', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model DescribeAdvicesPageResponseBody = {
  data?: {
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    result?: [ 
      {
        action?: string(name='Action', example='-'),
        aliyunId?: long(name='AliyunId', example='1234567891234567'),
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        content?: string(name='Content', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
]'),
        description?: string(name='Description'),
        details?: string(name='Details', example='-'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
        id?: long(name='Id', description='ID', example='123'),
        isExpired?: boolean(name='IsExpired', example='false'),
        links?: string(name='Links', example='-'),
        product?: string(name='Product', example='ecs'),
        reason?: string(name='Reason', example='-'),
        resource?: string(name='Resource', example='{
	"resourceId": xxxx,
	"resourceName": xxxxxx,
	"regionId": xxxx,
	...
}'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: long(name='Severity', example='1'),
      }
    ](name='Result'),
    total?: long(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesPageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAdvicesPageResponseBody(name='body'),
}

async function describeAdvicesPage(request: DescribeAdvicesPageRequest): DescribeAdvicesPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvicesPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvisorChecksRequest {
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model DescribeAdvisorChecksResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    advisorCheck?: [ 
    {
      category?: string(name='Category', example='1'),
      code?: string(name='Code', example='EcsHighCpuUtilization'),
      description?: string(name='Description'),
      gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
      id?: long(name='Id', description='ID', example='123'),
      name?: string(name='Name'),
      operateColumn?: string(name='OperateColumn'),
      product?: string(name='Product', example='ecs'),
      status?: string(name='Status', example='enabled'),
      suppResources?: string(name='SuppResources', example='-'),
      tips?: string(name='Tips'),
      viewColumn?: string(name='ViewColumn', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
]'),
    }
  ](name='AdvisorCheck')
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvisorChecksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAdvisorChecksResponseBody(name='body'),
}

async function describeAdvisorChecks(request: DescribeAdvisorChecksRequest): DescribeAdvisorChecksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvisorChecks', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoryAdvicesRequest {
  associateUid?: long(name='AssociateUid', example='-', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  clientUid?: long(name='ClientUid', example='-', position='Query'),
  endDate?: string(name='EndDate', example='2023-07-01', position='Query'),
  filterType?: string(name='FilterType', example='-', position='Query'),
  filterValue?: string(name='FilterValue', example='-', position='Query'),
  isExpired?: boolean(name='IsExpired', example='false', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
  reverse?: boolean(name='Reverse', example='true', position='Query'),
  severity?: string(name='Severity', example='1', position='Query'),
  startDate?: string(name='StartDate', example='2023-07-01', position='Query'),
}

model GetHistoryAdvicesResponseBody = {
  data?: {
    pageNo?: int32(name='PageNo', example='1'),
    result?: [ 
      {
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        description?: string(name='Description'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        product?: string(name='Product', example='ecs'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: int32(name='Severity', example='1'),
        url?: string(name='Url', example='https://ecs.console.aliyun.com/#/server/i-bp67acfmxazb4p****/detail?regionId=cn-hangzhou'),
      }
    ](name='Result'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model GetHistoryAdvicesResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoryAdvicesResponseBody(name='body'),
}

async function getHistoryAdvices(request: GetHistoryAdvicesRequest): GetHistoryAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoryAdvices', 'POST', '/', 'json', false, 'json', request);
}

model RefreshAdvisorCheckRequest {
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model RefreshAdvisorCheckResponseBody = {
  data?: {
    success?: boolean(name='Success', example='true'),
    taskId?: long(name='TaskId', example='12345678'),
    traceId?: string(name='TraceId', example='manual-1be17af1121b4974822e69daee4f2481'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model RefreshAdvisorCheckResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshAdvisorCheckResponseBody(name='body'),
}

async function refreshAdvisorCheck(request: RefreshAdvisorCheckRequest): RefreshAdvisorCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAdvisorCheck', 'POST', '/', 'json', false, 'json', request);
}

model RefreshAdvisorResourceRequest {
  product: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model RefreshAdvisorResourceResponseBody = {
  data?: long(name='Data', example='12345678'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model RefreshAdvisorResourceResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshAdvisorResourceResponseBody(name='body'),
}

async function refreshAdvisorResource(request: RefreshAdvisorResourceRequest): RefreshAdvisorResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAdvisorResource', 'POST', '/', 'json', false, 'json', request);
}

