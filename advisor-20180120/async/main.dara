/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Advisor';
  @version = '2018-01-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RdAccountDTO {
  accountType?: string(name='AccountType'),
  checked?: boolean(name='Checked'),
  displayName?: string(name='DisplayName'),
  id?: long(name='Id'),
  name?: string(name='Name'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tags'),
}

model RdAccountFolderDTO {
  accountCount?: int32(name='AccountCount'),
  accountList?: [
    RdAccountDTO
  ](name='AccountList'),
  folderId?: string(name='FolderId'),
  folderList?: [
    RdAccountFolderDTO
  ](name='FolderList'),
  folderName?: string(name='FolderName'),
  resourceDirectoryId?: string(name='ResourceDirectoryId'),
  resourceDirectoryPath?: string(name='ResourceDirectoryPath'),
  resourceDirectoryPathName?: string(name='ResourceDirectoryPathName'),
  selectedCount?: int32(name='SelectedCount'),
}

model DescribeAdvicesRequest {
  adviceId?: long(name='AdviceId', example='12345678', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  checkPlanId?: long(name='CheckPlanId', position='Query'),
  excludeAdviceId?: long(name='ExcludeAdviceId', example='12345678', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model DescribeAdvicesResponseBody = {
  data?: {
    advice?: [ 
    {
      aliyunId?: long(name='AliyunId', example='1234567891234567'),
      checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
      checkName?: string(name='CheckName'),
      checkPlanId?: long(name='CheckPlanId'),
      content?: string(name='Content', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
]'),
      description?: string(name='Description'),
      gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
      id?: long(name='Id', description='ID', example='123'),
      isExpired?: boolean(name='IsExpired', example='false'),
      product?: string(name='Product', example='ecs'),
      resource?: string(name='Resource', example='{
	"resourceId": xxxx,
	"resourceName": xxxxxx,
	"regionId": xxxx,
	...
}'),
      resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
      severity?: int32(name='Severity', example='1'),
    }
  ](name='Advice')
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvices  DescribeAdvicesRequest
  * @return DescribeAdvicesResponse
 */
async function describeAdvices(request: DescribeAdvicesRequest): DescribeAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvicesFlatPageRequest {
  adviceId?: long(name='AdviceId', example='12345678', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-2zecnwitr2s7aca6****', position='Query'),
}

model DescribeAdvicesFlatPageResponseBody = {
  data?: {
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    result?: [ 
      {
        aliyunId?: long(name='AliyunId', example='192895059480****'),
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        content?: string(name='Content', example='[{"key":"EcsHighCpuUtilization_xxxx", "value":"xxx"}, {"key":"EcsHighCpuUtilization_xxxx", "value":"xxx"}, {"key":"EcsHighCpuUtilization_xxxx", "value":"xxx"}, ]'),
        description?: string(name='Description'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
        id?: long(name='Id', example='40200899'),
        isExpired?: boolean(name='IsExpired', example='false'),
        product?: string(name='Product', example='ecs'),
        resource?: string(name='Resource', example='{"resourceId": "i-2zecnwitr2s7aca6****","resourceName": "ecs-20230701","regionId": "cn-hangzhou",...}'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: long(name='Severity', example='1'),
      }
    ](name='Result'),
    total?: long(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesFlatPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvicesFlatPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvicesFlatPage  DescribeAdvicesFlatPageRequest
  * @return DescribeAdvicesFlatPageResponse
 */
async function describeAdvicesFlatPage(request: DescribeAdvicesFlatPageRequest): DescribeAdvicesFlatPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvicesFlatPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvicesPageRequest {
  adviceId?: long(name='AdviceId', example='12345678', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  checkPlanId?: long(name='CheckPlanId', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model DescribeAdvicesPageResponseBody = {
  data?: {
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    result?: [ 
      {
        aliyunId?: long(name='AliyunId', example='1234567891234567'),
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        content?: string(name='Content', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"value":xxx
	},
]'),
        description?: string(name='Description'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
        id?: long(name='Id', description='ID', example='123'),
        isExpired?: boolean(name='IsExpired', example='false'),
        product?: string(name='Product', example='ecs'),
        resource?: string(name='Resource', example='{
	"resourceId": xxxx,
	"resourceName": xxxxxx,
	"regionId": xxxx,
	...
}'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: long(name='Severity', example='1'),
      }
    ](name='Result'),
    total?: long(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvicesPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvicesPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvicesPage  DescribeAdvicesPageRequest
  * @return DescribeAdvicesPageResponse
 */
async function describeAdvicesPage(request: DescribeAdvicesPageRequest): DescribeAdvicesPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvicesPage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvisorChecksRequest {
  language?: string(name='Language', example='zh', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
}

model DescribeAdvisorChecksResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    advisorCheck?: [ 
    {
      category?: string(name='Category', example='1'),
      code?: string(name='Code', example='EcsHighCpuUtilization'),
      description?: string(name='Description'),
      gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-07-01 00:00:00'),
      name?: string(name='Name'),
      operateColumn?: string(name='OperateColumn'),
      product?: string(name='Product', example='ecs'),
      status?: string(name='Status', example='enabled'),
      tips?: string(name='Tips'),
      viewColumn?: string(name='ViewColumn', example='[
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
	{
		"key":"EcsHighCpuUtilization_xxxx",
		"type":"DEFAULT"
	},
]'),
    }
  ](name='AdvisorCheck')
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvisorChecksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvisorChecksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvisorChecks  DescribeAdvisorChecksRequest
  * @return DescribeAdvisorChecksResponse
 */
async function describeAdvisorChecks(request: DescribeAdvisorChecksRequest): DescribeAdvisorChecksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvisorChecks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdvisorResourcesRequest {
  keyword?: string(name='Keyword', example='abcd', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model DescribeAdvisorResourcesResponseBody = {
  data?: {
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: {
      resource?: [ 
      {
        data?: string(name='Data', example='{
    "resourceId": "xxxxx",
    "deviceAvailable": true,
    ...
}'),
        product?: string(name='Product', example='ecs'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        resourceName?: string(name='ResourceName', example='ecs-20230701'),
      }
    ](name='Resource')
    }(name='Result'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model DescribeAdvisorResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdvisorResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAdvisorResources  DescribeAdvisorResourcesRequest
  * @return DescribeAdvisorResourcesResponse
 */
async function describeAdvisorResources(request: DescribeAdvisorResourcesRequest): DescribeAdvisorResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdvisorResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCostCheckAdvicesRequest {
  assumeAliyunIdList?: [ long ](name='AssumeAliyunIdList', shrink='json', position='Query'),
  checkId?: string(name='CheckId', position='Query'),
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionIds?: [ string ](name='RegionIds', shrink='json', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', shrink='json', position='Query'),
  resourceName?: string(name='ResourceName', position='Query'),
  severity?: string(name='Severity', position='Query'),
  tagKeys?: [ string ](name='TagKeys', shrink='json', position='Query'),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: [ string ](name='TagValue'),
    }
  ](name='TagList', shrink='json', position='Query'),
  tagValues?: [ string ](name='TagValues', shrink='json', position='Query'),
}

model DescribeCostCheckAdvicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    adviceList?: [ 
      {
        accountFolderId?: string(name='AccountFolderId'),
        accountFolderName?: string(name='AccountFolderName'),
        aliyunId?: long(name='AliyunId'),
        content?: string(name='Content'),
        email?: string(name='Email'),
        endTime?: long(name='EndTime'),
        gmtDeleted?: long(name='GmtDeleted'),
        product?: string(name='Product'),
        regionId?: string(name='RegionId'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        severity?: string(name='Severity'),
        startTime?: long(name='StartTime'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        url?: string(name='Url'),
        userName?: string(name='UserName'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='AdviceList'),
    checkId?: string(name='CheckId'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeCostCheckAdvicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCostCheckAdvicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCostCheckAdvices  DescribeCostCheckAdvicesRequest
  * @return DescribeCostCheckAdvicesResponse
 */
async function describeCostCheckAdvices(request: DescribeCostCheckAdvicesRequest): DescribeCostCheckAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCostCheckAdvices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCostCheckResultsRequest {
  assumeAliyunIdList?: [ long ](name='AssumeAliyunIdList', shrink='json', position='Query'),
  checkIds?: [ string ](name='CheckIds', shrink='json', position='Query'),
  groupBy?: string(name='GroupBy', position='Query'),
  product?: string(name='Product', position='Query'),
  regionIds?: [ string ](name='RegionIds', shrink='json', position='Query'),
  resourceGroupIdList?: [ string ](name='ResourceGroupIdList', shrink='json', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', shrink='json', position='Query'),
  resourceName?: string(name='ResourceName', position='Query'),
  severity?: int32(name='Severity', position='Query'),
  tagKeys?: [ string ](name='TagKeys', shrink='json', position='Query'),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: [ string ](name='TagValue'),
    }
  ](name='TagList', shrink='json', position='Query'),
  tagValues?: [ string ](name='TagValues', shrink='json', position='Query'),
}

model DescribeCostCheckResultsResponseBody = {
  code?: string(name='Code'),
  data?: {
    adviceResourceCount?: int32(name='AdviceResourceCount'),
    groupBy?: string(name='GroupBy'),
    normalCount?: int32(name='NormalCount'),
    resourceCount?: int32(name='ResourceCount'),
    totalCount?: int32(name='TotalCount'),
    viewGroup?: [ 
      {
        checkItems?: [ 
          {
            adviceCount?: int32(name='AdviceCount'),
            adviceResourceCount?: int32(name='AdviceResourceCount'),
            category?: string(name='Category'),
            checkId?: string(name='CheckId'),
            checkName?: string(name='CheckName'),
            currentCost?: float(name='CurrentCost'),
            description?: string(name='Description'),
            expectedSavingCost?: float(name='ExpectedSavingCost'),
            optimizedCost?: float(name='OptimizedCost'),
            product?: string(name='Product'),
            severity?: int32(name='Severity'),
            summary?: string(name='Summary'),
            tips?: string(name='Tips'),
          }
        ](name='CheckItems'),
        groupCode?: string(name='GroupCode'),
        groupCount?: int32(name='GroupCount'),
        groupExpectedSavingCost?: float(name='GroupExpectedSavingCost'),
        groupName?: string(name='GroupName'),
      }
    ](name='ViewGroup'),
    warningCount?: int32(name='WarningCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DescribeCostCheckResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCostCheckResultsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCostCheckResults  DescribeCostCheckResultsRequest
  * @return DescribeCostCheckResultsResponse
 */
async function describeCostCheckResults(request: DescribeCostCheckResultsRequest): DescribeCostCheckResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCostCheckResults', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoryAdvicesRequest {
  endDate?: string(name='EndDate', example='2023-07-01', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  reverse?: boolean(name='Reverse', example='true', position='Query'),
  severity?: string(name='Severity', example='1', position='Query'),
  startDate?: string(name='StartDate', example='2023-07-01', position='Query'),
}

model GetHistoryAdvicesResponseBody = {
  data?: {
    pageNo?: int32(name='PageNo', example='1'),
    result?: [ 
      {
        checkId?: string(name='CheckId', example='EcsHighCpuUtilization'),
        checkName?: string(name='CheckName'),
        description?: string(name='Description'),
        gmtCreated?: string(name='GmtCreated', example='2023-07-01 00:00:00'),
        product?: string(name='Product', example='ecs'),
        resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****'),
        severity?: int32(name='Severity', example='1'),
        url?: string(name='Url'),
      }
    ](name='Result'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model GetHistoryAdvicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHistoryAdvicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHistoryAdvices  GetHistoryAdvicesRequest
  * @return GetHistoryAdvicesResponse
 */
async function getHistoryAdvices(request: GetHistoryAdvicesRequest): GetHistoryAdvicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoryAdvices', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskStatusByIdRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='95906135', position='Query'),
}

model GetTaskStatusByIdResponseBody = {
  data?: {
    taskId?: long(name='TaskId', example='95906135'),
    taskStatus?: int32(name='TaskStatus', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model GetTaskStatusByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskStatusByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskStatusById  GetTaskStatusByIdRequest
  * @return GetTaskStatusByIdResponse
 */
async function getTaskStatusById(request: GetTaskStatusByIdRequest): GetTaskStatusByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskStatusById', 'GET', '/', 'json', false, 'json', request);
}

model RefreshAdvisorCheckRequest {
  assumeAliyunId?: long(name='AssumeAliyunId', position='Query'),
  checkId?: string(name='CheckId', example='EcsHighCpuUtilization', position='Query'),
  checkPlanId?: long(name='CheckPlanId', position='Query'),
  language?: string(name='Language', example='zh', position='Query'),
  product?: string(name='Product', example='ecs', position='Query'),
  resourceDimensionList?: [ 
    {
      cost?: boolean(name='Cost'),
      performance?: boolean(name='Performance'),
      product?: string(name='Product'),
      productName?: string(name='ProductName'),
      reliablility?: boolean(name='Reliablility'),
      security?: boolean(name='Security'),
      service?: boolean(name='Service'),
    }
  ](name='ResourceDimensionList', shrink='json', position='Body'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
  token?: string(name='Token', position='Query'),
}

model RefreshAdvisorCheckResponseBody = {
  data?: {
    message?: string(name='Message'),
    success?: boolean(name='Success', example='true'),
    taskId?: long(name='TaskId', example='12345678'),
    traceId?: string(name='TraceId', example='manual-1be17af1121b4974822e69daee4f2481'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model RefreshAdvisorCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshAdvisorCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshAdvisorCheck  RefreshAdvisorCheckRequest
  * @return RefreshAdvisorCheckResponse
 */
async function refreshAdvisorCheck(request: RefreshAdvisorCheckRequest): RefreshAdvisorCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAdvisorCheck', 'POST', '/', 'json', true, 'form', request);
}

model RefreshAdvisorCostCheckRequest {
  assumeAliyunIdList?: [ long ](name='AssumeAliyunIdList', shrink='json', position='Query'),
  checkIds?: [ string ](name='CheckIds', shrink='json', position='Query'),
  product?: string(name='Product', position='Query'),
  refreshResource?: boolean(name='RefreshResource', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', shrink='json', position='Query'),
}

model RefreshAdvisorCostCheckResponseBody = {
  code?: string(name='Code'),
  data?: {
    commandId?: string(name='CommandId'),
    managerTaskId?: long(name='ManagerTaskId'),
    success?: boolean(name='Success'),
    taskId?: long(name='TaskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefreshAdvisorCostCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshAdvisorCostCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshAdvisorCostCheck  RefreshAdvisorCostCheckRequest
  * @return RefreshAdvisorCostCheckResponse
 */
async function refreshAdvisorCostCheck(request: RefreshAdvisorCostCheckRequest): RefreshAdvisorCostCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAdvisorCostCheck', 'POST', '/', 'json', false, 'json', request);
}

model RefreshAdvisorResourceRequest {
  product: string(name='Product', description='This parameter is required.', example='ecs', position='Query'),
  resourceId?: string(name='ResourceId', example='i-bp67acfmxazb4p****', position='Query'),
}

model RefreshAdvisorResourceResponseBody = {
  data?: long(name='Data', example='12345678'),
  requestId?: string(name='RequestId', example='566331F9-5AB3-550F-B745-A730331F97A9'),
}

model RefreshAdvisorResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshAdvisorResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshAdvisorResource  RefreshAdvisorResourceRequest
  * @return RefreshAdvisorResourceResponse
 */
async function refreshAdvisorResource(request: RefreshAdvisorResourceRequest): RefreshAdvisorResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAdvisorResource', 'POST', '/', 'json', false, 'json', request);
}

model ReportBizAlertInfoRequest {
  alertDescription?: string(name='AlertDescription', position='Query'),
  alertDetail: string(name='AlertDetail', description='This parameter is required.', position='Query'),
  alertGrade?: string(name='AlertGrade', position='Query'),
  alertLabels?: string(name='AlertLabels', position='Query'),
  alertScene: string(name='AlertScene', description='This parameter is required.', position='Query'),
  alertToken: string(name='AlertToken', description='This parameter is required.', position='Query'),
  alertUid?: [ long ](name='AlertUid', shrink='json', position='Query'),
  language?: string(name='Language', position='Query'),
}

model ReportBizAlertInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    result?: string(name='Result'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportBizAlertInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportBizAlertInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReportBizAlertInfo  ReportBizAlertInfoRequest
  * @return ReportBizAlertInfoResponse
 */
async function reportBizAlertInfo(request: ReportBizAlertInfoRequest): ReportBizAlertInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportBizAlertInfo', 'POST', '/', 'json', false, 'json', request);
}

