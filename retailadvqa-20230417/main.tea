/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('retailadvqa', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddMemberBasicInfoRequest {
  body?: {
    area?: string(name='Area'),
    avatar?: string(name='Avatar'),
    birthday?: string(name='Birthday', example='2022-09-08'),
    channels?: [ 
      {
        appId?: string(name='AppId'),
        channelCode?: string(name='ChannelCode'),
        channelOpenId?: string(name='ChannelOpenId'),
        channelUnionId?: string(name='ChannelUnionId'),
        scene?: string(name='Scene'),
      }
    ](name='Channels'),
    city?: string(name='City'),
    country?: string(name='Country'),
    email?: string(name='Email'),
    extra?: string(name='Extra', example='""'),
    gmtCreate?: string(name='GmtCreate'),
    memberName?: string(name='MemberName'),
    memberNickName?: string(name='MemberNickName'),
    mobile?: string(name='Mobile', example='17716699087'),
    openMerchantId?: string(name='OpenMerchantId'),
    platFormType?: string(name='PlatFormType'),
    province?: string(name='Province'),
    sex?: string(name='Sex'),
  }(name='body'),
}

model AddMemberBasicInfoShrinkRequest {
  bodyShrink?: string(name='body'),
}

model AddMemberBasicInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  outerMemberId?: string(name='OuterMemberId', example='WMS_36606164948078_23218019'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model AddMemberBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMemberBasicInfoResponseBody(name='body'),
}

async function addMemberBasicInfoWithOptions(tmpReq: AddMemberBasicInfoRequest, runtime: Util.RuntimeOptions): AddMemberBasicInfoResponse {
  Util.validateModel(tmpReq);
  var request = new AddMemberBasicInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMemberBasicInfo',
    version = '2023-04-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMemberBasicInfo(request: AddMemberBasicInfoRequest): AddMemberBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMemberBasicInfoWithOptions(request, runtime);
}

model MemberAccountDetailPageQueryRequest {
  body?: {
    accountType?: int32(name='AccountType', example='20'),
    endTime?: string(name='EndTime', example='2011-09-02 00:00:00'),
    openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
    outerMemberId?: string(name='OuterMemberId', example='WMS_36606164948078_23218019'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    platFormType?: string(name='PlatFormType'),
    startTime?: string(name='StartTime', example='2011-09-01 00:00:00'),
  }(name='body'),
}

model MemberAccountDetailPageQueryShrinkRequest {
  bodyShrink?: string(name='body'),
}

model MemberAccountDetailPageQueryResponseBody = {
  data?: [ 
    {
      accountBalance?: string(name='AccountBalance', example='100'),
      accountType?: int32(name='AccountType', example='20'),
      activityType?: string(name='ActivityType'),
      channelCode?: string(name='ChannelCode'),
      detailValue?: string(name='DetailValue', example='20'),
      extra?: string(name='Extra', example='...'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
      operateType?: string(name='OperateType', example='1'),
      outerMemberId?: string(name='OuterMemberId', example='MEMBER_fc498a12edd84dafd'),
      remark?: string(name='Remark', example='...'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', description='Id of the request', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: string(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='5000'),
}

model MemberAccountDetailPageQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MemberAccountDetailPageQueryResponseBody(name='body'),
}

async function memberAccountDetailPageQueryWithOptions(tmpReq: MemberAccountDetailPageQueryRequest, runtime: Util.RuntimeOptions): MemberAccountDetailPageQueryResponse {
  Util.validateModel(tmpReq);
  var request = new MemberAccountDetailPageQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MemberAccountDetailPageQuery',
    version = '2023-04-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function memberAccountDetailPageQuery(request: MemberAccountDetailPageQueryRequest): MemberAccountDetailPageQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return memberAccountDetailPageQueryWithOptions(request, runtime);
}

model MemberPointChangeRequest {
  body?: {
    accountType?: string(name='AccountType'),
    channelCode?: string(name='ChannelCode'),
    extra?: string(name='Extra', example='""'),
    openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
    operateType?: string(name='OperateType', example='1'),
    outerMemberId?: string(name='OuterMemberId', example='WMS_36606164948078_23218019'),
    platFormType?: string(name='PlatFormType'),
    quantity?: string(name='Quantity', example='1'),
    serialNo?: string(name='SerialNo', example='4LJDNJH9JUX48L41'),
  }(name='body'),
}

model MemberPointChangeShrinkRequest {
  bodyShrink?: string(name='body'),
}

model MemberPointChangeResponseBody = {
  accountBalance?: string(name='AccountBalance'),
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  levelName?: string(name='LevelName', example='12'),
  requestId?: string(name='RequestId', example='B2CD5682-12C0-51A7-82FC-1D36091CADAD'),
  success?: string(name='Success', example='true'),
}

model MemberPointChangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MemberPointChangeResponseBody(name='body'),
}

async function memberPointChangeWithOptions(tmpReq: MemberPointChangeRequest, runtime: Util.RuntimeOptions): MemberPointChangeResponse {
  Util.validateModel(tmpReq);
  var request = new MemberPointChangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MemberPointChange',
    version = '2023-04-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function memberPointChange(request: MemberPointChangeRequest): MemberPointChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return memberPointChangeWithOptions(request, runtime);
}

model QueryMemberBasicInfoRequest {
  body?: {
    channelCode?: string(name='ChannelCode'),
    channelOpenId?: string(name='ChannelOpenId'),
    mobile?: string(name='Mobile', example='18888889999'),
    openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
    outerMemberId?: string(name='OuterMemberId', example='WMS_36606164948078_23218019'),
    platFormType?: string(name='PlatFormType'),
    type?: string(name='Type', example='1'),
  }(name='body'),
}

model QueryMemberBasicInfoShrinkRequest {
  bodyShrink?: string(name='body'),
}

model QueryMemberBasicInfoResponseBody = {
  data?: {
    area?: string(name='Area'),
    avatar?: string(name='Avatar'),
    birthday?: string(name='Birthday'),
    city?: string(name='City'),
    country?: string(name='Country'),
    email?: string(name='Email'),
    extra?: string(name='Extra'),
    levelName?: string(name='LevelName'),
    levelNum?: string(name='LevelNum'),
    memberName?: string(name='MemberName'),
    memberNickName?: string(name='MemberNickName'),
    mobile?: string(name='Mobile'),
    openMerchantId?: string(name='OpenMerchantId'),
    outerMemberId?: string(name='OuterMemberId'),
    points?: string(name='Points'),
    province?: string(name='Province'),
    score?: string(name='Score'),
    sex?: string(name='Sex'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model QueryMemberBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMemberBasicInfoResponseBody(name='body'),
}

async function queryMemberBasicInfoWithOptions(tmpReq: QueryMemberBasicInfoRequest, runtime: Util.RuntimeOptions): QueryMemberBasicInfoResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMemberBasicInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMemberBasicInfo',
    version = '2023-04-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMemberBasicInfo(request: QueryMemberBasicInfoRequest): QueryMemberBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMemberBasicInfoWithOptions(request, runtime);
}

model SyncCardInfoRequest {
  body?: {
    buyerId?: string(name='BuyerId', example='1236437142867408'),
    extra?: string(name='Extra', example='""'),
    gifters?: {
      headerImg?: string(name='HeaderImg', example='https://xxx/2.jpg'),
      id?: string(name='Id', example='1000030820003'),
      nickname?: string(name='Nickname'),
      openId?: string(name='OpenId', description='openId', example='82ace612cd377134d597e32e91562caf'),
      phone?: string(name='Phone', example='13277778888'),
    }(name='Gifters'),
    occurredAt?: string(name='OccurredAt', example='2023-05-12 00:00:00'),
    openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
    orderId?: string(name='OrderId', example='223332140970453'),
    presentDetail?: [ 
      {
        count?: long(name='Count'),
        itemId?: string(name='ItemId'),
        name?: string(name='Name'),
        price?: double(name='Price'),
        skuId?: string(name='SkuId'),
      }
    ](name='PresentDetail'),
    receivedAt?: string(name='ReceivedAt', example='2023-05-12 00:00:00'),
    recipient?: {
      headerImg?: string(name='HeaderImg', example='https://xxx/1.jpg'),
      id?: string(name='Id', example='1000030855004'),
      nickname?: string(name='Nickname'),
      openId?: string(name='OpenId', description='openId', example='1179ead68b3833fea61a802ddb1dd3ac'),
      phone?: string(name='Phone', example='18899998888'),
    }(name='Recipient'),
    status?: string(name='Status', example='success'),
    theme?: string(name='Theme'),
    transferId?: string(name='TransferId', example='3eecd2b8a6f946ca'),
    transferredAt?: string(name='TransferredAt', example='2023-05-12 00:00:00'),
  }(name='body'),
}

model SyncCardInfoShrinkRequest {
  bodyShrink?: string(name='body'),
}

model SyncCardInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: string(name='Success', example='true'),
}

model SyncCardInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncCardInfoResponseBody(name='body'),
}

async function syncCardInfoWithOptions(tmpReq: SyncCardInfoRequest, runtime: Util.RuntimeOptions): SyncCardInfoResponse {
  Util.validateModel(tmpReq);
  var request = new SyncCardInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncCardInfo',
    version = '2023-04-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncCardInfo(request: SyncCardInfoRequest): SyncCardInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncCardInfoWithOptions(request, runtime);
}

model SyncMemberBehaviorInfoRequest {
  body?: {
    actionDuration?: string(name='ActionDuration'),
    actionEndDate?: string(name='ActionEndDate'),
    actionResult?: boolean(name='ActionResult'),
    actionStartDate?: string(name='ActionStartDate'),
    actionSubType?: string(name='ActionSubType'),
    actionType?: string(name='ActionType'),
    extra?: string(name='Extra'),
    openMerchantId?: string(name='OpenMerchantId'),
    outerMemberId?: string(name='OuterMemberId'),
    platFormType?: string(name='PlatFormType'),
  }(name='body'),
}

model SyncMemberBehaviorInfoShrinkRequest {
  bodyShrink?: string(name='body'),
}

model SyncMemberBehaviorInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model SyncMemberBehaviorInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncMemberBehaviorInfoResponseBody(name='body'),
}

async function syncMemberBehaviorInfoWithOptions(tmpReq: SyncMemberBehaviorInfoRequest, runtime: Util.RuntimeOptions): SyncMemberBehaviorInfoResponse {
  Util.validateModel(tmpReq);
  var request = new SyncMemberBehaviorInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncMemberBehaviorInfo',
    version = '2023-04-17',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncMemberBehaviorInfo(request: SyncMemberBehaviorInfoRequest): SyncMemberBehaviorInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncMemberBehaviorInfoWithOptions(request, runtime);
}

