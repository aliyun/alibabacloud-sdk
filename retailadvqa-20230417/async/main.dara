/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'retailadvqa';
  @version = '2023-04-17';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddMemberBasicInfoRequest {
  body?: {
    area?: string(name='Area'),
    avatar?: string(name='Avatar'),
    birthday?: string(name='Birthday', example='2022-09-08'),
    channels: [ 
      {
        appId?: string(name='AppId'),
        channelCode: string(name='ChannelCode', description='This parameter is required.'),
        channelOpenId?: string(name='ChannelOpenId'),
        channelUnionId?: string(name='ChannelUnionId'),
        scene?: string(name='Scene'),
      }
    ](name='Channels', description='This parameter is required.'),
    city?: string(name='City'),
    country?: string(name='Country'),
    email?: string(name='Email'),
    extra?: string(name='Extra', example='""'),
    gmtCreate?: string(name='GmtCreate'),
    memberName?: string(name='MemberName'),
    memberNickName?: string(name='MemberNickName'),
    mixMobile?: string(name='MixMobile'),
    mobile?: string(name='Mobile', example='17716699087'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.'),
    platFormType: string(name='PlatFormType', description='This parameter is required.'),
    province?: string(name='Province'),
    sex?: string(name='Sex'),
  }(name='body', shrink='json', position='Query'),
}

model AddMemberBasicInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  outerMemberId?: string(name='OuterMemberId', example='WMS_36606164948078_23218019'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model AddMemberBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMemberBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddMemberBasicInfo  AddMemberBasicInfoRequest
  * @return AddMemberBasicInfoResponse
 */
async function addMemberBasicInfo(request: AddMemberBasicInfoRequest): AddMemberBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMemberBasicInfo', 'POST', '/', 'json', false, 'json', request);
}

model BatchSaveOrderPopRequest {
  orders?: [ 
    {
      adjustFee?: string(name='AdjustFee'),
      buyerArea?: string(name='BuyerArea'),
      buyerRate?: string(name='BuyerRate'),
      channelCode: string(name='ChannelCode', description='This parameter is required.', example='doudian'),
      channelOpenId: string(name='ChannelOpenId', description='This parameter is required.', example='1699b2b974d444e3aa489f96457ef204'),
      commissionFee?: string(name='CommissionFee'),
      consignTime?: string(name='ConsignTime'),
      discountFee?: string(name='DiscountFee'),
      endTime?: string(name='EndTime'),
      feature?: string(name='Feature'),
      openMerchantId: string(name='OpenMerchantId', description='This parameter is required.', example='testOpenMerchantId'),
      openOrderId: string(name='OpenOrderId', description='This parameter is required.', example='testOpenOrderId'),
      orderCreateTime: string(name='OrderCreateTime', description='This parameter is required.', example='2023-12-20 12:12:12'),
      orderPayment: string(name='OrderPayment', description='This parameter is required.', example='10000'),
      payTime?: string(name='PayTime'),
      platformType: string(name='PlatformType', description='This parameter is required.', example='DOUDIAN'),
      pointFee?: string(name='PointFee'),
      postFee?: string(name='PostFee'),
      realPointFee?: string(name='RealPointFee'),
      receiverCity?: string(name='ReceiverCity'),
      receiverState?: string(name='ReceiverState'),
      sellerFlag?: string(name='SellerFlag'),
      sellerRate?: string(name='SellerRate'),
      shopId: string(name='ShopId', description='This parameter is required.', example='testShopId'),
      sid?: string(name='Sid'),
      status: string(name='Status', description='This parameter is required.', example='TRADE_FINISHED'),
      subOrderModelList: [ 
        {
          adjustFee?: string(name='AdjustFee'),
          buyerArea?: string(name='BuyerArea'),
          buyerRate?: string(name='BuyerRate'),
          cid?: string(name='Cid'),
          consignTime?: string(name='ConsignTime'),
          discountFee?: string(name='DiscountFee'),
          feature?: string(name='Feature'),
          itemMealId?: string(name='ItemMealId'),
          itemMealName?: string(name='ItemMealName'),
          openSubOrderId: string(name='OpenSubOrderId', description='This parameter is required.', example='testSubOrderId'),
          orderPayment: string(name='OrderPayment', description='This parameter is required.', example='10000'),
          orderTag?: string(name='OrderTag'),
          outProductId?: string(name='OutProductId'),
          payment?: string(name='Payment'),
          productAmount: string(name='ProductAmount', description='This parameter is required.', example='1'),
          productId?: string(name='ProductId'),
          productName?: string(name='ProductName'),
          receiverCity?: string(name='ReceiverCity'),
          receiverState?: string(name='ReceiverState'),
          refundId?: string(name='RefundId'),
          refundStatus?: string(name='RefundStatus'),
          sellerFlag?: string(name='SellerFlag'),
          sellerRate?: string(name='SellerRate'),
          status: string(name='Status', description='This parameter is required.', example='TRADE_FINISHED'),
          totalFee: string(name='TotalFee', description='This parameter is required.', example='10000'),
          tradeFrom?: string(name='TradeFrom'),
        }
      ](name='SubOrderModelList', description='This parameter is required.'),
      totalFee: string(name='TotalFee', description='This parameter is required.', example='10000'),
      buyerOpenUid?: string(name='buyerOpenUid'),
      tradeFrom?: string(name='tradeFrom'),
    }
  ](name='Orders', shrink='json', position='Query'),
}

model BatchSaveOrderPopResponseBody = {
  errorCode?: string(name='ErrorCode', example='testErrorCode'),
  errorMessage?: string(name='ErrorMessage', example='testErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200/400...'),
  requestId?: string(name='RequestId', description='Id of the request', example='testRequestId'),
  success?: boolean(name='Success', example='true'),
}

model BatchSaveOrderPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchSaveOrderPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchSaveOrderPop  BatchSaveOrderPopRequest
  * @return BatchSaveOrderPopResponse
 */
async function batchSaveOrderPop(request: BatchSaveOrderPopRequest): BatchSaveOrderPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSaveOrderPop', 'POST', '/', 'json', false, 'json', request);
}

model CalculateMemberLevelRequest {
  body?: {
    currentGrade: int32(name='CurrentGrade', description='This parameter is required.', example='1'),
    currentGradeName: string(name='CurrentGradeName', description='This parameter is required.'),
    memberId: string(name='MemberId', description='This parameter is required.', example='4000006009418358'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.', example='1230094'),
    platformType: string(name='PlatformType', description='This parameter is required.', example='TAOBAO'),
    score?: string(name='Score', example='0'),
    serialNo: string(name='SerialNo', description='This parameter is required.', example='0235b7f20a11de9e2bf4c3494b6d998d'),
  }(name='Body', shrink='json', position='Query'),
}

model CalculateMemberLevelResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  grade?: string(name='Grade', example='1'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  outerMemberId?: string(name='OuterMemberId', example='6062f9067f170700a2e7ef5a'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model CalculateMemberLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CalculateMemberLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CalculateMemberLevel  CalculateMemberLevelRequest
  * @return CalculateMemberLevelResponse
 */
async function calculateMemberLevel(request: CalculateMemberLevelRequest): CalculateMemberLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CalculateMemberLevel', 'POST', '/', 'json', false, 'json', request);
}

model EditMemberBasicInfoRequest {
  body?: {
    area?: string(name='Area'),
    avatar?: string(name='Avatar', example='xxx.jpg'),
    birthday?: string(name='Birthday', example='2024-06-20'),
    city?: string(name='City'),
    country?: string(name='Country'),
    email?: string(name='Email', example='xxx.com'),
    memberName?: string(name='MemberName'),
    memberNickName?: string(name='MemberNickName', example='xxxx'),
    mobile: string(name='Mobile', description='This parameter is required.', example='***********'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.', example='1230094'),
    platformType: string(name='PlatformType', description='This parameter is required.', example='TAOBAO'),
    province?: string(name='Province'),
    sex?: string(name='Sex'),
  }(name='Body', shrink='json', position='Query'),
}

model EditMemberBasicInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model EditMemberBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditMemberBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EditMemberBasicInfo  EditMemberBasicInfoRequest
  * @return EditMemberBasicInfoResponse
 */
async function editMemberBasicInfo(request: EditMemberBasicInfoRequest): EditMemberBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditMemberBasicInfo', 'POST', '/', 'json', false, 'json', request);
}

model MemberAccountDetailPageQueryRequest {
  body?: {
    accountType: int32(name='AccountType', description='This parameter is required.', example='20'),
    endTime?: string(name='EndTime', example='2011-09-02 00:00:00'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.', example='750cff00c3e0996d220ac2861dafdfadsf'),
    outerMemberId: string(name='OuterMemberId', description='This parameter is required.', example='WMS_36606164948078_23218019'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    platFormType: string(name='PlatFormType', description='This parameter is required.'),
    startTime?: string(name='StartTime', example='2011-09-01 00:00:00'),
  }(name='body', shrink='json', position='Query'),
}

model MemberAccountDetailPageQueryResponseBody = {
  data?: [ 
    {
      accountBalance?: string(name='AccountBalance', example='100'),
      accountType?: int32(name='AccountType', example='20'),
      activityType: string(name='ActivityType', description='This parameter is required.'),
      channelCode?: string(name='ChannelCode'),
      detailValue?: string(name='DetailValue', example='20'),
      extra: string(name='Extra', description='This parameter is required.', example='...'),
      gmtCreate: string(name='GmtCreate', description='This parameter is required.'),
      gmtModified: string(name='GmtModified', description='This parameter is required.'),
      openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
      operateType?: string(name='OperateType', example='1'),
      outerMemberId?: string(name='OuterMemberId', example='MEMBER_fc498a12edd84dafd'),
      remark?: string(name='Remark', example='...'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', description='Id of the request', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success: string(name='Success', description='This parameter is required.', example='true'),
  totalCount?: int32(name='TotalCount', example='5000'),
}

model MemberAccountDetailPageQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MemberAccountDetailPageQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MemberAccountDetailPageQuery  MemberAccountDetailPageQueryRequest
  * @return MemberAccountDetailPageQueryResponse
 */
async function memberAccountDetailPageQuery(request: MemberAccountDetailPageQueryRequest): MemberAccountDetailPageQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MemberAccountDetailPageQuery', 'POST', '/', 'json', false, 'json', request);
}

model MemberPointChangeRequest {
  body?: {
    accountType: string(name='AccountType', description='This parameter is required.'),
    channelCode?: string(name='ChannelCode'),
    extra?: string(name='Extra', example='""'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.', example='750cff00c3e0996d220ac2861dafdfadsf'),
    operateType: string(name='OperateType', description='This parameter is required.', example='1'),
    outerMemberId: string(name='OuterMemberId', description='This parameter is required.', example='WMS_36606164948078_23218019'),
    platFormType: string(name='PlatFormType', description='This parameter is required.'),
    quantity: string(name='Quantity', description='This parameter is required.', example='1'),
    serialNo: string(name='SerialNo', description='This parameter is required.', example='4LJDNJH9JUX48L41'),
  }(name='body', shrink='json', position='Query'),
}

model MemberPointChangeResponseBody = {
  accountBalance?: string(name='AccountBalance'),
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  levelName: string(name='LevelName', description='This parameter is required.', example='12'),
  requestId?: string(name='RequestId', example='B2CD5682-12C0-51A7-82FC-1D36091CADAD'),
  success?: string(name='Success', example='true'),
}

model MemberPointChangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MemberPointChangeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MemberPointChange  MemberPointChangeRequest
  * @return MemberPointChangeResponse
 */
async function memberPointChange(request: MemberPointChangeRequest): MemberPointChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MemberPointChange', 'POST', '/', 'json', false, 'json', request);
}

model QueryMemberBasicInfoRequest {
  body?: {
    channelCode?: string(name='ChannelCode'),
    channelOpenId?: string(name='ChannelOpenId'),
    mobile?: string(name='Mobile', example='18888889999'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.', example='750cff00c3e0996d220ac2861dafdfadsf'),
    outerMemberId?: string(name='OuterMemberId', example='WMS_36606164948078_23218019'),
    platFormType: string(name='PlatFormType', description='This parameter is required.'),
    type: string(name='Type', description='This parameter is required.', example='1'),
  }(name='body', shrink='json', position='Query'),
}

model QueryMemberBasicInfoResponseBody = {
  data?: {
    area?: string(name='Area'),
    avatar: string(name='Avatar', description='This parameter is required.'),
    birthday?: string(name='Birthday'),
    city?: string(name='City'),
    country?: string(name='Country'),
    email?: string(name='Email'),
    extra?: string(name='Extra'),
    levelName?: string(name='LevelName'),
    levelNum?: string(name='LevelNum'),
    memberName?: string(name='MemberName'),
    memberNickName?: string(name='MemberNickName'),
    mobile?: string(name='Mobile'),
    nearExpiredScore?: string(name='NearExpiredScore'),
    openMerchantId?: string(name='OpenMerchantId'),
    outerMemberId?: string(name='OuterMemberId'),
    points?: string(name='Points'),
    province?: string(name='Province'),
    score?: string(name='Score'),
    sex?: string(name='Sex'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model QueryMemberBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMemberBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMemberBasicInfo  QueryMemberBasicInfoRequest
  * @return QueryMemberBasicInfoResponse
 */
async function queryMemberBasicInfo(request: QueryMemberBasicInfoRequest): QueryMemberBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMemberBasicInfo', 'POST', '/', 'json', false, 'json', request);
}

model SyncCardInfoRequest {
  body?: {
    buyerId?: string(name='BuyerId', example='1236437142867408'),
    extra?: string(name='Extra', example='""'),
    gifters?: {
      headerImg?: string(name='HeaderImg', example='https://xxx/2.jpg'),
      id?: string(name='Id', example='1000030820003'),
      nickname?: string(name='Nickname'),
      openId?: string(name='OpenId', description='openId', example='82ace612cd377134d597e32e91562caf'),
      phone?: string(name='Phone', example='13277778888'),
    }(name='Gifters'),
    occurredAt?: string(name='OccurredAt', example='2023-05-12 00:00:00'),
    openMerchantId?: string(name='OpenMerchantId', example='750cff00c3e0996d220ac2861dafdfadsf'),
    orderId?: string(name='OrderId', example='223332140970453'),
    presentDetail?: [ 
      {
        count?: long(name='Count'),
        itemId?: string(name='ItemId'),
        name?: string(name='Name'),
        price?: double(name='Price'),
        skuId?: string(name='SkuId'),
      }
    ](name='PresentDetail'),
    receivedAt?: string(name='ReceivedAt', example='2023-05-12 00:00:00'),
    recipient?: {
      headerImg?: string(name='HeaderImg', example='https://xxx/1.jpg'),
      id?: string(name='Id', example='1000030855004'),
      nickname?: string(name='Nickname'),
      openId?: string(name='OpenId', description='openId', example='1179ead68b3833fea61a802ddb1dd3ac'),
      phone?: string(name='Phone', example='18899998888'),
    }(name='Recipient'),
    status?: string(name='Status', example='success'),
    theme?: string(name='Theme'),
    transferId?: string(name='TransferId', example='3eecd2b8a6f946ca'),
    transferredAt?: string(name='TransferredAt', example='2023-05-12 00:00:00'),
  }(name='body', shrink='json', position='Query'),
}

model SyncCardInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: string(name='Success', example='true'),
}

model SyncCardInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncCardInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncCardInfo  SyncCardInfoRequest
  * @return SyncCardInfoResponse
 */
async function syncCardInfo(request: SyncCardInfoRequest): SyncCardInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncCardInfo', 'POST', '/', 'json', false, 'json', request);
}

model SyncMemberBehaviorInfoRequest {
  body?: {
    actionDuration?: string(name='ActionDuration'),
    actionEndDate?: string(name='ActionEndDate'),
    actionResult?: boolean(name='ActionResult'),
    actionStartDate?: string(name='ActionStartDate'),
    actionSubType?: string(name='ActionSubType'),
    actionType: string(name='ActionType', description='This parameter is required.'),
    extra?: string(name='Extra'),
    openMerchantId: string(name='OpenMerchantId', description='This parameter is required.'),
    outerMemberId: string(name='OuterMemberId', description='This parameter is required.'),
    platFormType: string(name='PlatFormType', description='This parameter is required.'),
  }(name='body', shrink='json', position='Query'),
}

model SyncMemberBehaviorInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='Lydaas.QuickMember.SystemError'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='1DEFC4F1-AF11-5A3C-93B9-2880768DA218'),
  success?: boolean(name='Success', example='true'),
}

model SyncMemberBehaviorInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncMemberBehaviorInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncMemberBehaviorInfo  SyncMemberBehaviorInfoRequest
  * @return SyncMemberBehaviorInfoResponse
 */
async function syncMemberBehaviorInfo(request: SyncMemberBehaviorInfoRequest): SyncMemberBehaviorInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncMemberBehaviorInfo', 'POST', '/', 'json', false, 'json', request);
}

