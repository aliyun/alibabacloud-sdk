/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PaiLLMTrace';
  @version = '2024-03-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EvaluationConfig {
  answer?: {
    jsonPathInSpan?: string(name='JsonPathInSpan', minLength=1),
    jsonPathInSpanValue?: string(name='JsonPathInSpanValue'),
    spanName?: string(name='SpanName', minLength=1),
  }(name='Answer'),
  context?: {
    jsonPathInSpan?: string(name='JsonPathInSpan', minLength=1),
    jsonPathInSpanValue?: string(name='JsonPathInSpanValue'),
    spanName?: string(name='SpanName', minLength=1),
  }(name='Context'),
  query?: {
    jsonPathInSpan?: string(name='JsonPathInSpan', minLength=1),
    jsonPathInSpanValue?: string(name='JsonPathInSpanValue'),
    spanName?: string(name='SpanName', minLength=1),
  }(name='Query'),
}

model ModelConfig {
  apiKey?: string(name='ApiKey'),
  endpoint?: string(name='Endpoint'),
  isSelfHost?: boolean(name='IsSelfHost'),
  name?: string(name='Name'),
  temperature?: float(name='Temperature'),
  topP?: float(name='TopP'),
  useFunctionCall?: boolean(name='UseFunctionCall'),
}

model CreateOnlineEvalTaskRequest {
  body?: {
    appName?: string(name='AppName', description='The name of the user application in the trace data.', example='my-best-llm-app'),
    description?: string(name='Description', description='The description of the task.', example='April to June data assessment'),
    endTime?: string(name='EndTime', description='The end time of the trace data, in UTC format.', example='2025-06-05 14:00:01
2025-06-05'),
    evaluationConfig?: EvaluationConfig(name='EvaluationConfig', description='This configuration structure defines the JSON paths needed to extract specific values from trace data in JSON format. EvaluationConfig defines these JSON paths.'),
    filters?: [ 
      {
        key?: string(name='Key', description='The key of the filter condition.

Valid values:

*   Status
*   SpanName
*   Input
*   TraceType
*   SpanType
*   ServiceName
*   Output
*   TraceName
*   ServiceId', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
        operator?: string(name='Operator', description='The matching operator of the filter condition.

Valid values:

*   Contains
*   \\=
*   StartsWith', example='=
StartsWith
Contains'),
        value?: string(name='Value', description='The value of the filter condition.', example='foo'),
      }
    ](name='Filters', description='The evaluation task must search for a certain amount of trace data generated by the user application as input data for the evaluation. This list defines the search filter conditions.'),
    modelConfig?: ModelConfig(name='ModelConfig', description='The access configuration structure of the model used in the evaluation.'),
    samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', description='The evaluation task must search for a certain amount of trace data generated by the user application as input data for the evaluation. This is the width of the time window for each search of input data.', example='9'),
    samplingRatio?: int32(name='SamplingRatio', description='The percentage of data found in a time window that truly serves as evaluation input data. For example, 100 indicates that all data searched is used as evaluation input. 20 indicates that 20% of the found data is randomly selected as evaluation input.', example='50'),
    startTime?: string(name='StartTime', description='The start time of the trace data, in UTC format.', example='2025-04-05 14:00:01
2025-04-05'),
    taskName?: string(name='TaskName', description='The task name.', example='my-llm-app-eval-task-1'),
  }(name='body', description='The request data.', shrink='json', position='Query'),
}

model CreateOnlineEvalTaskResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='InvalidInputParams'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='EvaluationConfig.Answer.SpanName is required.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  taskId?: string(name='TaskId', description='The ID of the created trace evaluation task.', example='711ef9112343286810abbfce04e161ee'),
}

model CreateOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOnlineEvalTask  CreateOnlineEvalTaskRequest
  * @return CreateOnlineEvalTaskResponse
 */
async function createOnlineEvalTask(request: CreateOnlineEvalTaskRequest): CreateOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOnlineEvalTask', 'POST', '/api/v1/PAILLMTrace/onlineevaltasks', 'json', false, 'json', request);
}

model CreateServiceIdentityRoleRequest {
}

model CreateServiceIdentityRoleResponseBody = {
  code?: string(name='Code', description='The error code returned if the request fails.', example='InvalidInputParams'),
  message?: string(name='Message', description='The error message returned if the request fails.', example='User don\\"t have permission to create SLR.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  roleDetails?: string(name='RoleDetails', description='The role details.', example='AliyunServiceRoleForPaiLLMTrace'),
  roleName?: string(name='RoleName', description='The name of the service-linked role. Default value: AliyunServiceRoleForPaiLLMTrace.', example='AliyunServiceRoleForPaiLLMTrace'),
}

model CreateServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceIdentityRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceIdentityRole  CreateServiceIdentityRoleRequest
  * @return CreateServiceIdentityRoleResponse
 */
async function createServiceIdentityRole(request: CreateServiceIdentityRoleRequest): CreateServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceIdentityRole', 'POST', '/api/v1/PAILLMTrace/ServiceIdentityRole', 'json', false, 'json', request);
}

model DeleteOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='The ID of the link evaluation task.

This parameter is required.', example='1d3f2shp3cfjum4l74odz5gkkh', position='Path'),
}

model DeleteOnlineEvalTaskResponseBody = {
  code?: string(name='Code', description='Internal error code. Set only when the response is in error.', example='InvalidInputParams'),
  message?: string(name='Message', description='Response error message. Set only when the response is in error.', example='task id is empty'),
  requestId?: string(name='RequestId', description='ID of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
}

model DeleteOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOnlineEvalTask  DeleteOnlineEvalTaskRequest
  * @return DeleteOnlineEvalTaskResponse
 */
async function deleteOnlineEvalTask(request: DeleteOnlineEvalTaskRequest): DeleteOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOnlineEvalTask', 'DELETE', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}', 'json', false, 'json', request);
}

model EvaluateTraceRequest {
  traceId: string(name='TraceId', description='The trace ID.

This parameter is required.', example='c43793673a384d39daa0a351b1000000', position='Path'),
  appName?: string(name='AppName', description='The name of the application to which the trace belongs.', example='my-llm-app', position='Body'),
  evaluationConfig: EvaluationConfig(name='EvaluationConfig', description='If the value retrieved at the JSON path is itself a JSON string, further JSON path definitions within this JSON are necessary to get the actual value.

This parameter is required.', position='Body'),
  evaluationId?: string(name='EvaluationId', description='The ID of the evaluation task. If not specified, the system randomly generates and returns an ID. You can use this ID to quickly search for evaluation results.', example='44aea0ee00000000be5be24b2abb8f98', position='Body'),
  maxTime?: string(name='MaxTime', description='The end time of the search time range, in UTC format.', example='2025-04-05 13:24:25
2025-04-05', position='Body'),
  minTime?: string(name='MinTime', description='The start time of the search time range, in UTC format.', example='2025-04-05 13:24:25
2025-04-05', position='Body'),
  modelConfig?: ModelConfig(name='ModelConfig', description='The configuration structure to access the model used internally by the evaluation trace.', position='Body'),
}

model EvaluateTraceResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned if an exception occurred.', example='InvalidInputParams'),
  evaluationId?: string(name='EvaluationId', description='the task ID of the evaluation task to which the trace belongs.', example='6000043e103011f0922edec44617e03c'),
  message?: string(name='Message', description='The error message. This parameter is returned if an exception occurred.', example='eval_request missing dataset id or times'),
  requestId?: string(name='RequestId', description='Id of the request', example='F1AB295E-0D1F-5ECE-9FFA-98ABB4CB5DF5'),
}

model EvaluateTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EvaluateTraceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EvaluateTrace  EvaluateTraceRequest
  * @return EvaluateTraceResponse
 */
async function evaluateTrace(request: EvaluateTraceRequest): EvaluateTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EvaluateTrace', 'PUT', '/api/v1/PAILLMTrace/eval/trace/{TraceId}', 'json', false, 'json', request);
}

model GetEvaluationTemplatesRequest {
}

model GetEvaluationTemplatesResponseBody = {
  code?: string(name='Code', description='Internal error code. Set only when the response has an error.', example='ExecutionFailure'),
  evaluationTemplates?: [ any ](name='EvaluationTemplates', description='A series of templates used internally by the evaluation system to construct LLM interaction information.'),
  message?: string(name='Message', description='Response error message. Set only when the response has an error.', example='cannot get data back.'),
  requestId?: string(name='RequestId', description='ID of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
}

model GetEvaluationTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEvaluationTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEvaluationTemplates  GetEvaluationTemplatesRequest
  * @return GetEvaluationTemplatesResponse
 */
async function getEvaluationTemplates(request: GetEvaluationTemplatesRequest): GetEvaluationTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEvaluationTemplates', 'GET', '/api/v1/PAILLMTrace/eval/templates', 'json', false, 'json', request);
}

model GetOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='Task ID.

This parameter is required.', example='e111d41dd22ca6cf4bc1e3fcad7a142af93', position='Path'),
}

model GetOnlineEvalTaskResponseBody = {
  code?: string(name='Code', description='Internal error code. Set only when the response is in error.', example='InvalidInputParams'),
  message?: string(name='Message', description='Response error message. Set only when the response is in error.', example='task id is empty'),
  requestId?: string(name='RequestId', description='POP request ID', example='6F352A02-9C0D-54A7-B57C-663CF71D5714'),
  task?: {
    aliyunUid?: string(name='AliyunUid', description='The Alibaba Cloud account (primary account) of the task creator.', example='1195531608511111'),
    appName?: string(name='AppName', description='The name of the user application targeted by this task.', example='my-llm-app'),
    description?: string(name='Description', description='Task description information', example='这个任务做了这些事。'),
    evalResults?: string(name='EvalResults', description='Deprecated. Will be removed.', example='Deprecated. Will be removed.'),
    evaluationConfig?: EvaluationConfig(name='EvaluationConfig', description='Extract specific path values from JSON-formatted trace data as input for the evaluation operation. These JSON paths are defined within this EvaluationConfig structure.'),
    filters?: [ 
      {
        key?: string(name='Key', description='Key of the filter condition.', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
        operator?: string(name='Operator', description='Filter condition match operator.', example='=
StartsWith
Contains'),
        value?: string(name='Value', description='Value of the filter condition.', example='foo'),
      }
    ](name='Filters', description='The evaluation task needs to search for a certain amount of trace data generated by the user application as input data for the evaluation operation. This is a list that defines the search filter conditions.'),
    gmtCreateTime?: string(name='GmtCreateTime', description='UTC creation time of the task.', example='2024-07-31 08:30:00'),
    gmtEndTime?: string(name='GmtEndTime', description='UTC end time of the trace data.', example='2024-08-10 13:20:00'),
    gmtLastSamplingWindowEndTime?: string(name='GmtLastSamplingWindowEndTime', description='UTC upper bound of the last sampling window', example='2024-08-10 13:14:00'),
    gmtLastSamplingWindowStartTime?: string(name='GmtLastSamplingWindowStartTime', description='UTC lower bound of the last sampling window.', example='2024-08-10 13:11:00'),
    gmtStartTime?: string(name='GmtStartTime', description='UTC start time of the trace data.', example='2024-08-02'),
    id?: string(name='Id', description='Task ID', example='0839a02d-aa24-4174-90bb-7a773885934d'),
    modelConfig?: ModelConfig(name='ModelConfig', description='Access configuration structure for the large model used internally by the evaluation task.'),
    name?: string(name='Name', description='Task name.', example='my-eval-task-1'),
    recordCount?: int32(name='RecordCount', description='Number of evaluation records', example='999'),
    samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', description='The evaluation task needs to search for a certain amount of trace data generated by the user application as input data for the evaluation operation. This defines the width of the time window for each search of input data.', example='3'),
    samplingRatio?: int32(name='SamplingRatio', description='The percentage of the data found within a time window that is actually used as input for the evaluation task. For example, 100 means all the found data is used as input, 20 means 20% of the found data is randomly selected as input.', example='70'),
    status?: string(name='Status', description='Task status', example='CREATED
RUNNING
FINISHED
USER_CANCELED'),
    userId?: string(name='UserId', description='The Alibaba Cloud sub-account of the task creator.', example='222222222222222222'),
  }(name='Task', description='Task information'),
}

model GetOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOnlineEvalTask  GetOnlineEvalTaskRequest
  * @return GetOnlineEvalTaskResponse
 */
async function getOnlineEvalTask(request: GetOnlineEvalTaskRequest): GetOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOnlineEvalTask', 'GET', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}', 'json', false, 'json', request);
}

model GetServiceIdentityRoleRequest {
}

model GetServiceIdentityRoleResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='EntityNotExist'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='Serivce role does not exit.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  roleDetail?: string(name='RoleDetail', description='The role details.', example='AliyunServiceRoleForPaiLLMTrace'),
  roleName?: string(name='RoleName', description='The name of the service-linked role. Default value: AliyunServiceRoleForPaiLLMTrace.', example='AliyunServiceRoleForPaiLLMTrace'),
}

model GetServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceIdentityRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceIdentityRole  GetServiceIdentityRoleRequest
  * @return GetServiceIdentityRoleResponse
 */
async function getServiceIdentityRole(request: GetServiceIdentityRoleRequest): GetServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceIdentityRole', 'GET', '/api/v1/PAILLMTrace/ServiceIdentityRole', 'json', false, 'json', request);
}

model GetXtraceTokenRequest {
}

model GetXtraceTokenResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='InvalidInputParams'),
  grpcEndpoint?: string(name='GrpcEndpoint', description='The gRPC endpoint used for uploading ARM traces.', example='http://tracing-analysis-dc-hz.aliyuncs.com:8090'),
  grpcInternalEndpoint?: string(name='GrpcInternalEndpoint', description='The internal gRPC endpoint used for uploading ARMS traces used by Alibaba Cloud.', example='http://tracing-analysis-dc-hz-internal.aliyuncs.com:8090'),
  httpEndpoint?: string(name='HttpEndpoint', description='The endpoint used for uploading ARMS traces.', example='http://tracing-analysis-dc-hz.aliyuncs.com/aaa@bbb@ccc/api/otlp/traces'),
  httpInternalEndpoint?: string(name='HttpInternalEndpoint', description='The internal endpoint used for uploading ARMS traces used by Alibaba Cloud.', example='http://tracing-analysis-dc-hz-internal.aliyuncs.com/aaa@bbb@ccc/api/otlp/traces'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='get_xtrace_token: failed, ERROR: NoPermission'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  token?: string(name='Token', description='The token used for uploading ARMS traces.', example='h1abcw7@5abcb_h1abcw7@5abc01'),
}

model GetXtraceTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetXtraceTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetXtraceToken  GetXtraceTokenRequest
  * @return GetXtraceTokenResponse
 */
async function getXtraceToken(request: GetXtraceTokenRequest): GetXtraceTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetXtraceToken', 'GET', '/api/v1/PAILLMTrace/XtraceToken', 'json', false, 'json', request);
}

model ListEvalResultsRequest {
  evaluationId?: string(name='EvaluationId', description='The task ID of the evaluation task to which the trace belongs.', example='0bb05ae2a2dc11ef9757faaa2a1ec0c6', position='Query'),
  keyword?: string(name='Keyword', description='The keyword to query from the evaluation inputs.', example='foo', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Page starts from page 1. Default value: 1', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50. Default value: 10.', example='10', position='Query'),
  recordIds?: [ string ](name='RecordIds', description='The trace data IDs.', shrink='simple', position='Query'),
}

model ListEvalResultsResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='ExecutionFailure'),
  evaluationResults?: [ string ](name='EvaluationResults', description='The evaluation results.'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='cannot get data back.'),
  requestId?: string(name='RequestId', description='The ID of the POP request.', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  totalCount?: int32(name='TotalCount', description='The total number of results that meet the condition.', example='22'),
}

model ListEvalResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEvalResultsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEvalResults  ListEvalResultsRequest
  * @return ListEvalResultsResponse
 */
async function listEvalResults(request: ListEvalResultsRequest): ListEvalResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEvalResults', 'GET', '/api/v1/PAILLMTrace/eval/results', 'json', false, 'json', request);
}

model ListOnlineEvalTaskResultsRequest {
  evaluationId?: string(name='EvaluationId', description='The ID of the evaluation task. At least one of the trace ID or task ID must be set.', example='0bb05ae8888c11ef9757faaa2a1ec0c6', position='Query'),
  mostRecentResultsOnly?: boolean(name='MostRecentResultsOnly', description='The same trace data may have been evaluated by different tasks. If no task ID is specified and there are multiple evaluation results for the same trace ID, this parameter specifies whether to return only the most recent evaluation result.', example='True', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The current page number. Value range: integers greater than 0. Default value: 1.', example='2', position='Query'),
  pageSize?: int32(name='PageSize', description='Page size, default is 10.', example='50', position='Query'),
  traceIds?: [ string ](name='TraceIds', description='Specify a set of trace IDs, and only return the evaluation results for these traces. At least one of the trace ID or task ID must be set.', shrink='simple', position='Query'),
}

model ListOnlineEvalTaskResultsResponseBody = {
  code?: string(name='Code', description='Internal error code. Set only when the response has an error.', example='InvalidInputParams'),
  evaluationResults?: [ string ](name='EvaluationResults', description='List of evaluation results.'),
  message?: string(name='Message', description='Response error message. Set only when the response has an error.', example='must provide trace_id(s) or eval_id'),
  requestId?: string(name='RequestId', description='ID of the request', example='22BA9A5A-E3D8-5B4C-90FC-F33F6E5853F8'),
  totalCount?: int32(name='TotalCount', description='Total number of evaluation results that meet the criteria.', example='123'),
}

model ListOnlineEvalTaskResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineEvalTaskResultsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOnlineEvalTaskResults  ListOnlineEvalTaskResultsRequest
  * @return ListOnlineEvalTaskResultsResponse
 */
async function listOnlineEvalTaskResults(request: ListOnlineEvalTaskResultsRequest): ListOnlineEvalTaskResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineEvalTaskResults', 'GET', '/api/v1/PAILLMTrace/onlineevaltaskresults', 'json', false, 'json', request);
}

model ListOnlineEvalTasksRequest {
  keyword?: string(name='Keyword', description='Search keyword. It will match on fields such as task name, application name (appName), task description, and evaluation metric name.', example='foo', position='Query'),
  maxTime?: string(name='MaxTime', description='The UTC end time of the search time range', example='2025-04-07 13:24:25
2025-04-07', position='Query'),
  minTime?: string(name='MinTime', description='The UTC start time of the search time range', example='2025-04-05 13:24:25
2025-04-05', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The current page number. Value range: integers greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Page size, default is 10.', example='50', position='Query'),
}

model ListOnlineEvalTasksResponseBody = {
  code?: string(name='Code', description='Internal error code. Set only when the response has an error.', example='InvalidInputParams'),
  message?: string(name='Message', description='Response error message. Set only when the response has an error.', example='page number should be greater than 0'),
  requestId?: string(name='RequestId', description='ID of the request', example='6F352A02-9C0D-54A7-B57C-663CF71D5714'),
  tasks?: [ 
    {
      aliyunUid?: string(name='AliyunUid', description='The Alibaba Cloud account (primary account) of the task creator.', example='1512522691911111'),
      appName?: string(name='AppName', description='The name of the user application targeted by this task.', example='my-llm-app'),
      description?: string(name='Description', description='Task description information', example='this task is for application evaluation'),
      evaluationConfig?: EvaluationConfig(name='EvaluationConfig', description='Extract specific path values from JSON-formatted trace data as input for the evaluation operation. These JSON paths are defined in this EvaluationConfig structure.'),
      filters?: [ 
        {
          key?: string(name='Key', description='The key of the filter condition.', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
          operator?: string(name='Operator', description='The matching operator of the filter condition.', example='=
StartsWith
Contains'),
          value?: string(name='Value', description='The value of the filter condition.', example='foo'),
        }
      ](name='Filters', description='The list define the search filter conditions for the evaluation task to search a certain amount of trace data generated by the user application, which serves as input data for the evaluation operation.'),
      gmtCreateTime?: string(name='GmtCreateTime', description='The UTC creation time of the task.', example='2025-04-07 13:24:35'),
      gmtEndTime?: string(name='GmtEndTime', description='Task UTC end time.', example='2025-04-09 13:24:35'),
      gmtStartTime?: string(name='GmtStartTime', description='The UTC start time of the task.', example='2025-04-08 13:24:35'),
      id?: string(name='Id', description='Task ID.', example='9f50cd72efcf36535152ee811a911115'),
      modelConfig?: ModelConfig(name='ModelConfig', description='Access configuration structure for the large model used internally by the evaluation task.'),
      name?: string(name='Name', description='Task name.', example='my-foo-evaluation-task'),
      samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', description='The evaluation task needs to search for a certain amount of trace data generated by the user\\"s application as input data for the evaluation operation. This defines the time window for each data search.', example='12'),
      samplingRatio?: int32(name='SamplingRatio', description='The percentage of the data searched within a time window that is used as input data for the evaluation. For example, 100 means all the searched data is used as input, 20 means 20% of the searched data is randomly selected as input.', example='50'),
      status?: string(name='Status', description='Task status', example='CREATED
RUNNING
FINISHED
USER_CANCELED'),
      userId?: string(name='UserId', description='The Alibaba Cloud sub-account of the task creator.', example='2222222222'),
    }
  ](name='Tasks', description='List of tasks.'),
  totalCount?: int32(name='TotalCount', description='Total number of tasks that meet the criteria.', example='22'),
}

model ListOnlineEvalTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineEvalTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOnlineEvalTasks  ListOnlineEvalTasksRequest
  * @return ListOnlineEvalTasksResponse
 */
async function listOnlineEvalTasks(request: ListOnlineEvalTasksRequest): ListOnlineEvalTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineEvalTasks', 'GET', '/api/v1/PAILLMTrace/onlineevaltasks', 'json', false, 'json', request);
}

model ListTracesDatasRequest {
  endUserId?: string(name='EndUserId', description='The value of the attributes.service.app.user_id field in the trace record. It can contain upper and lower case letters, digits, dot (.), hyphen (-), and underscore (_). It is empty by default.', example='end-user.12345', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter parameter, case-insensitive. Supported parameters: \\"serviceid\\", \\"servicename\\", \\"input\\", \\"output\\", \\"status\\", \\"tracetype\\", and \\"tracename\\".

The otel span attributes corresponding to the parameters:

serviceid: resources.service.id

servicename: resources.service.name

input: attributes.input.value

output: attributes.output.value

status: statusCode

tracetype: the attributes.gen_ai.span.kind of span whose parentSpanId is 0

tracename: the spanName of span whose parentSpanId is 0

Valid values:

*   Status
*   SpanName
*   Input
*   TraceType
*   SpanType
*   ServiceName
*   Output
*   TraceName
*   ServiceId', example='output'),
      operator?: string(name='Operator', description='The parameter operator. Case-insensitive. Supported operators: \\"=\\", \\"contains\\", and \\"startswith\\".

Valid values:

*   contains
*   \\=
*   startsWith', example='contains'),
      value?: string(name='Value', description='The value of the filter parameter. For the contains operation, it is case-sensitive. For other operations, it is case-insensitive.', example='cretain filter string'),
    }
  ](name='Filters', description='Other filter parameters', shrink='json', position='Query'),
  hasEvents?: boolean(name='HasEvents', description='Whether to return only trace records containing spans with a non-empty events. Example: Suppose a trace has 3 spans. If this parameter is True, this trace meets the condition when any one of the 3 spans has a non-empty events. The default value is False. The events is not used for filtering.', example='False', position='Query'),
  hasStatusMessage?: boolean(name='HasStatusMessage', description='Whether to return only trace records containing spans with a non-empty statusMessage. Example: Suppose a trace has 3 spans. If this parameter is True, this trace meets the condition when any one of the 3 spans has a non-empty statusMessage. The default value is False. The statusMessage is not used for filtering.', example='False', position='Query'),
  llmAppName?: string(name='LlmAppName', description='The value of the resources.service.app.name field in the trace record. It can contain upper and lower case letters, digits, dot (.), hyphen (-), and underscore (_). Must be an exact match. It is empty by default.', example='My.super_LLM-app2', position='Query'),
  maxDuration?: float(name='MaxDuration', position='Query'),
  maxTime?: string(name='MaxTime', description='The upper limit of the search time range, in UTC format (YYYY-mm-dd or YYYY-MM-DD HH:mm:ss). By default, the value is (current time +10 minutes)', example='2024-01-31
2024-12-31 23:59:59', position='Query'),
  minDuration?: float(name='MinDuration', position='Query'),
  minTime: string(name='MinTime', description='The lower limit of the search time range, in UTC format (YYYY-mm-dd or YYYY-MM-DD HH:mm:ss). By default, the value is (current time - 2 days).

This parameter is required.', example='2024-01-31
2024-12-31 23:59:59', position='Query'),
  opentelemetryCompatible?: boolean(name='OpentelemetryCompatible', description='Whether the returned JSON data can be directly converted to OpenTelemetry TracesData protobuf object. Default value: False. JSON data that is compatible with OpenTelemetry is more complex. Such data is generally not required unless you want to generate a protobuf object of OpenTelemetry.', example='False', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  ownerSubId?: string(name='OwnerSubId', description='The value of the resources.service.owner.sub_id field in the trace record. It can contain upper and lower case letters, digits, dot (.), hyphen (-), and underscore (_). It is empty by default.', example='123456789', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Page starts from page 1. Default value: 1', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 20. Maximum value: 100.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The field used to sort the returned results. Valid values: StartTime and Duration.', example='StartTime
Duration', position='Query'),
  sortOrder?: string(name='SortOrder', description='The sorting order. Valid values:

*   **ASC**
*   **DESC** (default)', example='DESC
ASC', position='Query'),
  spanIds?: [ string ](name='SpanIds', description='The list of span IDs. Each trace record contains one or more spans.', shrink='simple', position='Query'),
  spanName?: string(name='SpanName', position='Query'),
  traceIds?: [ string ](name='TraceIds', description='The list of trace IDs.', shrink='simple', position='Query'),
  traceReduceMethod?: string(name='TraceReduceMethod', description='The content simplification method for returned trace data to reduce the data volume.

REMOVE_EMBEDDING: Removes all embedding array contents.

ROOT_ONLY: Returns only the root span for each trace, with the root span content also having the REMOVE_EMBEDDING applied.

Blank: Maintains the original data without simplification.', example='REMOVE_EMBEDDING
ROOT_ONLY', position='Query'),
}

model ListTracesDatasResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='ExecutionFailure'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='failed to get trace data'),
  requestId?: string(name='RequestId', description='POP request id', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  totalCount?: int32(name='TotalCount', description='The total number of traces that meet the condition.', example='22'),
  traces?: [ any ](name='Traces', description='The JSON array with each element being a trace\\"s JSON string. Length of the array is equal to or less than the page size parameter value.'),
}

model ListTracesDatasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTracesDatasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTracesDatas  ListTracesDatasRequest
  * @return ListTracesDatasResponse
 */
async function listTracesDatas(request: ListTracesDatasRequest): ListTracesDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTracesDatas', 'GET', '/api/v1/PAILLMTrace/TracesDatas', 'json', false, 'json', request);
}

model StopOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='The ID of the trace evaluation task.

This parameter is required.', example='518b1d2f3cfca4ad3836ace4db69ba59c', position='Path'),
}

model StopOnlineEvalTaskResponseBody = {
  code?: string(name='Code', description='Internal error code. Set only when the response is in error.', example='InvalidInputParams'),
  message?: string(name='Message', description='Response error message. Set only when the response is in error.', example='task id is empty'),
  requestId?: string(name='RequestId', description='ID of the POP request', example='31E5FBC2-792D-5B5C-A5EB-3019984ABFC8'),
}

model StopOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopOnlineEvalTask  StopOnlineEvalTaskRequest
  * @return StopOnlineEvalTaskResponse
 */
async function stopOnlineEvalTask(request: StopOnlineEvalTaskRequest): StopOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopOnlineEvalTask', 'PUT', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}/stop', 'json', false, 'json', request);
}

model UpdateOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='The ID of the trace evaluation task.

This parameter is required.', example='518bc0f833d9a4ad3836ace4db69ba59c', position='Path'),
  appName?: string(name='AppName', description='The user-defined name of the LLM application.', example='my-llm-one', position='Body'),
  description?: string(name='Description', description='The description of the task.', example='The purpose of the task is xxx.', position='Body'),
  endTime?: string(name='EndTime', description='The end time of the trace data, in UTC format.', example='2024-09-02 22:24:00', position='Body'),
  evaluationConfig?: EvaluationConfig(name='EvaluationConfig', description='This configuration structure defines the JSON paths needed to extract specific values from trace data in JSON format. EvaluationConfig defines these JSON paths.', position='Body'),
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.

Valid values:

*   Status
*   SpanName
*   Input
*   TraceType
*   SpanType
*   ServiceName
*   Output
*   TraceName
*   ServiceId', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
      operator?: string(name='Operator', description='The matching operator of the filter condition.

Valid values:

*   Contains
*   \\=
*   StartsWith', example='=
StartsWith
Contains'),
      value?: string(name='Value', description='The value of the filter condition.', example='foo'),
    }
  ](name='Filters', description='The evaluation task must search for a certain amount of trace data generated by the user application as input data for the evaluation. This list defines the search filter conditions.', position='Body'),
  modelConfig?: ModelConfig(name='ModelConfig', description='The access configuration structure of the model used in the evaluation.', position='Body'),
  samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', description='The evaluation task must search for a certain amount of trace data generated by the user application as input data for the evaluation. This is the width of the time window for each search of input data.', example='10', position='Body'),
  samplingRatio?: int32(name='SamplingRatio', description='The percentage of data found in a time window that truly serves as evaluation input data. For example, 100 indicates that all data searched is used as evaluation input. 20 indicates that 20% of the found data is randomly selected as evaluation input.', example='50', position='Body'),
  startTime?: string(name='StartTime', description='The start time of the trace data, in UTC format.', example='2024-07-31 08:30:00', position='Body'),
  taskName?: string(name='TaskName', description='The task name.', example='foo model application performance evaluation', position='Body'),
}

model UpdateOnlineEvalTaskResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='InvalidInputParams'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='cannot modify a stopped task'),
  requestId?: string(name='RequestId', description='Id of the POP request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
}

model UpdateOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOnlineEvalTask  UpdateOnlineEvalTaskRequest
  * @return UpdateOnlineEvalTaskResponse
 */
async function updateOnlineEvalTask(request: UpdateOnlineEvalTaskRequest): UpdateOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOnlineEvalTask', 'PUT', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}', 'json', false, 'json', request);
}

