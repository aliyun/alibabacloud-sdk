/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PaiLLMTrace';
  @version = '2024-03-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model EvaluationConfig {
  answer?: {
    jsonPathInSpan?: string(name='JsonPathInSpan', minLength=1),
    jsonPathInSpanValue?: string(name='JsonPathInSpanValue'),
    spanName?: string(name='SpanName', minLength=1),
  }(name='Answer'),
  context?: {
    jsonPathInSpan?: string(name='JsonPathInSpan', minLength=1),
    jsonPathInSpanValue?: string(name='JsonPathInSpanValue'),
    spanName?: string(name='SpanName', minLength=1),
  }(name='Context'),
  query?: {
    jsonPathInSpan?: string(name='JsonPathInSpan', minLength=1),
    jsonPathInSpanValue?: string(name='JsonPathInSpanValue'),
    spanName?: string(name='SpanName', minLength=1),
  }(name='Query'),
}

model ModelConfig {
  apiKey?: string(name='ApiKey'),
  endpoint?: string(name='Endpoint'),
  isSelfHost?: boolean(name='IsSelfHost'),
  name?: string(name='Name'),
  temperature?: float(name='Temperature'),
  topP?: float(name='TopP'),
  useFunctionCall?: boolean(name='UseFunctionCall'),
}

model CreateOnlineEvalTaskRequest {
  body?: {
    appName?: string(name='AppName', example='my-best-llm-app'),
    description?: string(name='Description'),
    endTime?: string(name='EndTime', example='2025-06-05 14:00:01
2025-06-05'),
    evaluationConfig?: EvaluationConfig(name='EvaluationConfig'),
    filters?: [ 
      {
        key?: string(name='Key', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
        operator?: string(name='Operator', example='=
StartsWith
Contains'),
        value?: string(name='Value', example='foo'),
      }
    ](name='Filters'),
    modelConfig?: ModelConfig(name='ModelConfig'),
    samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', example='9'),
    samplingRatio?: int32(name='SamplingRatio', example='50'),
    startTime?: string(name='StartTime', example='2025-04-05 14:00:01
2025-04-05'),
    taskName?: string(name='TaskName', example='my-llm-app-eval-task-1'),
  }(name='body', shrink='json', position='Query'),
}

model CreateOnlineEvalTaskResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  message?: string(name='Message', example='EvaluationConfig.Answer.SpanName is required.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  taskId?: string(name='TaskId', example='711ef9112343286810abbfce04e161ee'),
}

model CreateOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOnlineEvalTask  CreateOnlineEvalTaskRequest
  * @return CreateOnlineEvalTaskResponse
 */
async function createOnlineEvalTask(request: CreateOnlineEvalTaskRequest): CreateOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOnlineEvalTask', 'POST', '/api/v1/PAILLMTrace/onlineevaltasks', 'json', false, 'json', request);
}

model CreateServiceIdentityRoleRequest {
}

model CreateServiceIdentityRoleResponseBody = {
  code?: string(name='Code', description='The error code returned if the request fails.', example='InvalidInputParams'),
  message?: string(name='Message', description='The error message returned if the request fails.', example='User don\\"t have permission to create SLR.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  roleDetails?: string(name='RoleDetails', description='The role details.', example='AliyunServiceRoleForPaiLLMTrace'),
  roleName?: string(name='RoleName', description='The name of the service-linked role. Default value: AliyunServiceRoleForPaiLLMTrace.', example='AliyunServiceRoleForPaiLLMTrace'),
}

model CreateServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceIdentityRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceIdentityRole  CreateServiceIdentityRoleRequest
  * @return CreateServiceIdentityRoleResponse
 */
async function createServiceIdentityRole(request: CreateServiceIdentityRoleRequest): CreateServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceIdentityRole', 'POST', '/api/v1/PAILLMTrace/ServiceIdentityRole', 'json', false, 'json', request);
}

model DeleteOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='1d3f2shp3cfjum4l74odz5gkkh', position='Path'),
}

model DeleteOnlineEvalTaskResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  message?: string(name='Message', example='task id is empty'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
}

model DeleteOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOnlineEvalTask  DeleteOnlineEvalTaskRequest
  * @return DeleteOnlineEvalTaskResponse
 */
async function deleteOnlineEvalTask(request: DeleteOnlineEvalTaskRequest): DeleteOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOnlineEvalTask', 'DELETE', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}', 'json', false, 'json', request);
}

model EvaluateTraceRequest {
  traceId: string(name='TraceId', description='This parameter is required.', example='c43793673a384d39daa0a351b1000000', position='Path'),
  appName?: string(name='AppName', example='my-llm-app', position='Body'),
  evaluationConfig: EvaluationConfig(name='EvaluationConfig', description='This parameter is required.', position='Body'),
  evaluationId?: string(name='EvaluationId', example='44aea0ee00000000be5be24b2abb8f98', position='Body'),
  maxTime?: string(name='MaxTime', example='2025-04-05 13:24:25
2025-04-05', position='Body'),
  minTime?: string(name='MinTime', example='2025-04-05 13:24:25
2025-04-05', position='Body'),
  modelConfig?: ModelConfig(name='ModelConfig', position='Body'),
}

model EvaluateTraceResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  evaluationId?: string(name='EvaluationId', example='6000043e103011f0922edec44617e03c'),
  message?: string(name='Message', example='eval_request missing dataset id or times'),
  requestId?: string(name='RequestId', description='Id of the request', example='F1AB295E-0D1F-5ECE-9FFA-98ABB4CB5DF5'),
}

model EvaluateTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EvaluateTraceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EvaluateTrace  EvaluateTraceRequest
  * @return EvaluateTraceResponse
 */
async function evaluateTrace(request: EvaluateTraceRequest): EvaluateTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EvaluateTrace', 'PUT', '/api/v1/PAILLMTrace/eval/trace/{TraceId}', 'json', false, 'json', request);
}

model GetEvaluationTemplatesRequest {
}

model GetEvaluationTemplatesResponseBody = {
  code?: string(name='Code', example='ExecutionFailure'),
  evaluationTemplates?: [ any ](name='EvaluationTemplates'),
  message?: string(name='Message', example='cannot get data back.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
}

model GetEvaluationTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEvaluationTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEvaluationTemplates  GetEvaluationTemplatesRequest
  * @return GetEvaluationTemplatesResponse
 */
async function getEvaluationTemplates(request: GetEvaluationTemplatesRequest): GetEvaluationTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEvaluationTemplates', 'GET', '/api/v1/PAILLMTrace/eval/templates', 'json', false, 'json', request);
}

model GetOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='e111d41dd22ca6cf4bc1e3fcad7a142af93', position='Path'),
}

model GetOnlineEvalTaskResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  message?: string(name='Message', example='task id is empty'),
  requestId?: string(name='RequestId', description='POP request id', example='6F352A02-9C0D-54A7-B57C-663CF71D5714'),
  task?: {
    aliyunUid?: string(name='AliyunUid', example='1195531608511111'),
    appName?: string(name='AppName', example='my-llm-app'),
    description?: string(name='Description'),
    evalResults?: string(name='EvalResults'),
    evaluationConfig?: EvaluationConfig(name='EvaluationConfig'),
    filters?: [ 
      {
        key?: string(name='Key', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
        operator?: string(name='Operator', example='=
StartsWith
Contains'),
        value?: string(name='Value', example='foo'),
      }
    ](name='Filters'),
    gmtCreateTime?: string(name='GmtCreateTime', example='2024-07-31 08:30:00'),
    gmtEndTime?: string(name='GmtEndTime', example='2024-08-10 13:20:00'),
    gmtLastSamplingWindowEndTime?: string(name='GmtLastSamplingWindowEndTime', example='2024-08-10 13:14:00'),
    gmtLastSamplingWindowStartTime?: string(name='GmtLastSamplingWindowStartTime', example='2024-08-10 13:11:00'),
    gmtStartTime?: string(name='GmtStartTime', example='2024-08-02'),
    id?: string(name='Id', example='0839a02d-aa24-4174-90bb-7a773885934d'),
    modelConfig?: ModelConfig(name='ModelConfig'),
    name?: string(name='Name', example='my-eval-task-1'),
    recordCount?: int32(name='RecordCount', example='999'),
    samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', example='3'),
    samplingRatio?: int32(name='SamplingRatio', example='70'),
    status?: string(name='Status', example='CREATED
RUNNING
FINISHED
USER_CANCELED'),
    userId?: string(name='UserId', example='222222222222222222'),
  }(name='Task'),
}

model GetOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOnlineEvalTask  GetOnlineEvalTaskRequest
  * @return GetOnlineEvalTaskResponse
 */
async function getOnlineEvalTask(request: GetOnlineEvalTaskRequest): GetOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOnlineEvalTask', 'GET', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}', 'json', false, 'json', request);
}

model GetServiceIdentityRoleRequest {
}

model GetServiceIdentityRoleResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='EntityNotExist'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='Serivce role does not exit.'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  roleDetail?: string(name='RoleDetail', description='The role details.', example='AliyunServiceRoleForPaiLLMTrace'),
  roleName?: string(name='RoleName', description='The name of the service-linked role. Default value: AliyunServiceRoleForPaiLLMTrace.', example='AliyunServiceRoleForPaiLLMTrace'),
}

model GetServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceIdentityRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceIdentityRole  GetServiceIdentityRoleRequest
  * @return GetServiceIdentityRoleResponse
 */
async function getServiceIdentityRole(request: GetServiceIdentityRoleRequest): GetServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceIdentityRole', 'GET', '/api/v1/PAILLMTrace/ServiceIdentityRole', 'json', false, 'json', request);
}

model GetXtraceTokenRequest {
}

model GetXtraceTokenResponseBody = {
  code?: string(name='Code', description='The internal error code. This parameter is returned only when an error occurs.', example='InvalidInputParams'),
  grpcEndpoint?: string(name='GrpcEndpoint', description='The gRPC endpoint used for uploading ARM traces.', example='http://tracing-analysis-dc-hz.aliyuncs.com:8090'),
  grpcInternalEndpoint?: string(name='GrpcInternalEndpoint', description='The internal gRPC endpoint used for uploading ARMS traces used by Alibaba Cloud.', example='http://tracing-analysis-dc-hz-internal.aliyuncs.com:8090'),
  httpEndpoint?: string(name='HttpEndpoint', description='The endpoint used for uploading ARMS traces.', example='http://tracing-analysis-dc-hz.aliyuncs.com/aaa@bbb@ccc/api/otlp/traces'),
  httpInternalEndpoint?: string(name='HttpInternalEndpoint', description='The internal endpoint used for uploading ARMS traces used by Alibaba Cloud.', example='http://tracing-analysis-dc-hz-internal.aliyuncs.com/aaa@bbb@ccc/api/otlp/traces'),
  message?: string(name='Message', description='The error message. This parameter is returned only when an error occurs.', example='get_xtrace_token: failed, ERROR: NoPermission'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  token?: string(name='Token', description='The token used for uploading ARMS traces.', example='h1abcw7@5abcb_h1abcw7@5abc01'),
}

model GetXtraceTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetXtraceTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetXtraceToken  GetXtraceTokenRequest
  * @return GetXtraceTokenResponse
 */
async function getXtraceToken(request: GetXtraceTokenRequest): GetXtraceTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetXtraceToken', 'GET', '/api/v1/PAILLMTrace/XtraceToken', 'json', false, 'json', request);
}

model ListOnlineEvalTaskResultsRequest {
  evaluationId?: string(name='EvaluationId', example='0bb05ae8888c11ef9757faaa2a1ec0c6', position='Query'),
  mostRecentResultsOnly?: boolean(name='MostRecentResultsOnly', example='True', position='Query'),
  pageNumber?: int32(name='PageNumber', example='2', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  traceIds?: [ string ](name='TraceIds', shrink='simple', position='Query'),
}

model ListOnlineEvalTaskResultsResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  evaluationResults?: [ string ](name='EvaluationResults'),
  message?: string(name='Message', example='must provide trace_id(s) or eval_id'),
  requestId?: string(name='RequestId', description='Id of the request', example='22BA9A5A-E3D8-5B4C-90FC-F33F6E5853F8'),
  totalCount?: int32(name='TotalCount', example='123'),
}

model ListOnlineEvalTaskResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineEvalTaskResultsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOnlineEvalTaskResults  ListOnlineEvalTaskResultsRequest
  * @return ListOnlineEvalTaskResultsResponse
 */
async function listOnlineEvalTaskResults(request: ListOnlineEvalTaskResultsRequest): ListOnlineEvalTaskResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineEvalTaskResults', 'GET', '/api/v1/PAILLMTrace/onlineevaltaskresults', 'json', false, 'json', request);
}

model ListOnlineEvalTasksRequest {
  keyword?: string(name='Keyword', example='foo', position='Query'),
  maxTime?: string(name='MaxTime', example='2025-04-07 13:24:25
2025-04-07', position='Query'),
  minTime?: string(name='MinTime', example='2025-04-05 13:24:25
2025-04-05', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
}

model ListOnlineEvalTasksResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  message?: string(name='Message', example='page number should be greater than 0'),
  requestId?: string(name='RequestId', description='Id of the request', example='6F352A02-9C0D-54A7-B57C-663CF71D5714'),
  tasks?: [ 
    {
      aliyunUid?: string(name='AliyunUid', example='1512522691911111'),
      appName?: string(name='AppName', example='my-llm-app'),
      description?: string(name='Description'),
      evaluationConfig?: EvaluationConfig(name='EvaluationConfig'),
      filters?: [ 
        {
          key?: string(name='Key', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
          operator?: string(name='Operator', example='=
StartsWith
Contains'),
          value?: string(name='Value', example='foo'),
        }
      ](name='Filters'),
      gmtCreateTime?: string(name='GmtCreateTime', example='2025-04-07 13:24:35'),
      gmtEndTime?: string(name='GmtEndTime', example='2025-04-09 13:24:35'),
      gmtStartTime?: string(name='GmtStartTime', example='2025-04-08 13:24:35'),
      id?: string(name='Id', example='9f50cd72efcf36535152ee811a911115'),
      modelConfig?: ModelConfig(name='ModelConfig'),
      name?: string(name='Name', example='my-foo-evaluation-task'),
      samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', example='12'),
      samplingRatio?: int32(name='SamplingRatio', example='50'),
      status?: string(name='Status', example='CREATED
RUNNING
FINISHED
USER_CANCELED'),
      userId?: string(name='UserId', example='2222222222'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount', example='22'),
}

model ListOnlineEvalTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnlineEvalTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOnlineEvalTasks  ListOnlineEvalTasksRequest
  * @return ListOnlineEvalTasksResponse
 */
async function listOnlineEvalTasks(request: ListOnlineEvalTasksRequest): ListOnlineEvalTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOnlineEvalTasks', 'GET', '/api/v1/PAILLMTrace/onlineevaltasks', 'json', false, 'json', request);
}

model ListTracesDatasRequest {
  endUserId?: string(name='EndUserId', example='end-user.12345', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key'),
      operator?: string(name='Operator'),
      value?: string(name='Value'),
    }
  ](name='Filters', shrink='json', position='Query'),
  hasEvents?: boolean(name='HasEvents', example='False', position='Query'),
  hasStatusMessage?: boolean(name='HasStatusMessage', example='False', position='Query'),
  llmAppName?: string(name='LlmAppName', example='My.super_LLM-app2', position='Query'),
  maxTime?: string(name='MaxTime', example='2024-01-31
2024-12-31 23:59:59', position='Query'),
  minTime: string(name='MinTime', description='This parameter is required.', example='2024-01-31
2024-12-31 23:59:59', position='Query'),
  opentelemetryCompatible?: boolean(name='OpentelemetryCompatible', example='False', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  ownerSubId?: string(name='OwnerSubId', example='123456789', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  spanIds?: [ string ](name='SpanIds', shrink='simple', position='Query'),
  traceIds?: [ string ](name='TraceIds', shrink='simple', position='Query'),
  traceReduceMethod?: string(name='TraceReduceMethod', position='Query'),
}

model ListTracesDatasResponseBody = {
  code?: string(name='Code', example='ExecutionFailure'),
  message?: string(name='Message', example='failed to get trace data'),
  requestId?: string(name='RequestId', description='POP request id', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
  totalCount?: int32(name='TotalCount', example='22'),
  traces?: [ any ](name='Traces'),
}

model ListTracesDatasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTracesDatasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTracesDatas  ListTracesDatasRequest
  * @return ListTracesDatasResponse
 */
async function listTracesDatas(request: ListTracesDatasRequest): ListTracesDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTracesDatas', 'GET', '/api/v1/PAILLMTrace/TracesDatas', 'json', false, 'json', request);
}

model StopOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='518b1d2f3cfca4ad3836ace4db69ba59c', position='Path'),
}

model StopOnlineEvalTaskResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  message?: string(name='Message', example='task id is empty'),
  requestId?: string(name='RequestId', description='Id of the POP request', example='31E5FBC2-792D-5B5C-A5EB-3019984ABFC8'),
}

model StopOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopOnlineEvalTask  StopOnlineEvalTaskRequest
  * @return StopOnlineEvalTaskResponse
 */
async function stopOnlineEvalTask(request: StopOnlineEvalTaskRequest): StopOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopOnlineEvalTask', 'PUT', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}/stop', 'json', false, 'json', request);
}

model UpdateOnlineEvalTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='518bc0f833d9a4ad3836ace4db69ba59c', position='Path'),
  appName?: string(name='AppName', example='my-llm-one', position='Body'),
  description?: string(name='Description', position='Body'),
  endTime?: string(name='EndTime', example='2024-09-02 22:24:00', position='Body'),
  evaluationConfig?: EvaluationConfig(name='EvaluationConfig', position='Body'),
  filters?: [ 
    {
      key?: string(name='Key', example='ServiceId
ServiceName
Input
Output
Status
TraceType
SpanType
TraceName
SpanName'),
      operator?: string(name='Operator', example='=
StartsWith
Contains'),
      value?: string(name='Value', example='foo'),
    }
  ](name='Filters', position='Body'),
  modelConfig?: ModelConfig(name='ModelConfig', position='Body'),
  samplingFrequencyMinutes?: int32(name='SamplingFrequencyMinutes', example='10', position='Body'),
  samplingRatio?: int32(name='SamplingRatio', example='50', position='Body'),
  startTime?: string(name='StartTime', example='2024-07-31 08:30:00', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
}

model UpdateOnlineEvalTaskResponseBody = {
  code?: string(name='Code', example='InvalidInputParams'),
  message?: string(name='Message', example='cannot modify a stopped task'),
  requestId?: string(name='RequestId', description='Id of the POP request', example='6A87228C-969A-1381-98CF-AE07AE630FA5'),
}

model UpdateOnlineEvalTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOnlineEvalTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOnlineEvalTask  UpdateOnlineEvalTaskRequest
  * @return UpdateOnlineEvalTaskResponse
 */
async function updateOnlineEvalTask(request: UpdateOnlineEvalTaskRequest): UpdateOnlineEvalTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOnlineEvalTask', 'PUT', '/api/v1/PAILLMTrace/onlineevaltasks/{TaskId}', 'json', false, 'json', request);
}

