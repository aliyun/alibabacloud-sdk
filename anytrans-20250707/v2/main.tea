/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('anytrans', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BatchTranslateRequest {
  ext?: {
    domainHint?: string(name='domainHint', example='technology'),
    examples?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='hello'),
      }
    ](name='examples'),
    sensitives?: [ string ](name='sensitives'),
    terminologies?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='API'),
      }
    ](name='terminologies'),
    textTransform?: {
      toLower?: boolean(name='toLower', example='false'),
      toTitle?: boolean(name='toTitle', example='false'),
      toUpper?: boolean(name='toUpper', example='false'),
    }(name='textTransform'),
  }(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', description='This parameter is required.', example='zh'),
  targetLanguage?: string(name='targetLanguage', description='This parameter is required.', example='en'),
  text?: map[string]any(name='text', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model BatchTranslateShrinkRequest {
  extShrink?: string(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', description='This parameter is required.', example='zh'),
  targetLanguage?: string(name='targetLanguage', description='This parameter is required.', example='en'),
  textShrink?: string(name='text', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model BatchTranslateResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    translationList?: [ 
      {
        code?: long(name='code', example='200'),
        index?: string(name='index', example='0'),
        message?: string(name='message', example='ok'),
        translation?: string(name='translation', example='Featured Double Color Ball experts: Liu Ke and A Wang both hit the second prize, winning 1.43 million!'),
        usage?: {
          inputTokens?: long(name='inputTokens', example='480'),
          outputTokens?: long(name='outputTokens', example='520'),
          totalTokens?: long(name='totalTokens', example='1000'),
        }(name='usage'),
      }
    ](name='translationList'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='3BE338D3-16B1-513F-8DD2-57C8528DEAAA'),
  success?: boolean(name='success', example='true'),
}

model BatchTranslateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchTranslateResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译批量翻译
 *
 * @param tmpReq BatchTranslateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchTranslateResponse
 */
@context("batchTranslateWithContext")
async function batchTranslateWithOptions(tmpReq: BatchTranslateRequest, headers: map[string]string, runtime: $RuntimeOptions): BatchTranslateResponse {
  tmpReq.validate();
  var request = new BatchTranslateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'ext', 'json');
  }
  if (!$isNull(tmpReq.text)) {
    request.textShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.text, 'text', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extShrink)) {
    body['ext'] = request.extShrink;
  }
  if (!$isNull(request.format)) {
    body['format'] = request.format;
  }
  if (!$isNull(request.scene)) {
    body['scene'] = request.scene;
  }
  if (!$isNull(request.sourceLanguage)) {
    body['sourceLanguage'] = request.sourceLanguage;
  }
  if (!$isNull(request.targetLanguage)) {
    body['targetLanguage'] = request.targetLanguage;
  }
  if (!$isNull(request.textShrink)) {
    body['text'] = request.textShrink;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchTranslate',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/batch`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译批量翻译
 *
 * @param request BatchTranslateRequest
 * @return BatchTranslateResponse
 */
async function batchTranslate(request: BatchTranslateRequest): BatchTranslateResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return batchTranslateWithOptions(request, headers, runtime);
}

model GetHtmlTranslateTaskRequest {
  taskId?: string(name='taskId', example='2746f4be-cff2-465e-a2c6-12bff30ce0f9'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model GetHtmlTranslateTaskResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    translation?: string(name='translation', example='<!DOCTYPE html>

<html lang="zh-CN">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>My First Webpage</title>
</head>
<body>
<h1>Welcome to my webpage!</h1>
<p>This is a simple HTML page.</p>
<p>Learning HTML is the first step to entering web development.</p>
<a href="https://www.example.com">Click here to visit the sample website</a>
</body>
</html>'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='495'),
      outputTokens?: long(name='outputTokens', example='444'),
      totalTokens?: long(name='totalTokens', example='939'),
    }(name='usage'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='64191A87-C480-53AD-AEA2-2E847D4DFA66'),
  success?: boolean(name='success', example='true'),
}

model GetHtmlTranslateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHtmlTranslateTaskResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译获取html翻译结果
 *
 * @param request GetHtmlTranslateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHtmlTranslateTaskResponse
 */
@context("getHtmlTranslateTaskWithContext")
async function getHtmlTranslateTaskWithOptions(request: GetHtmlTranslateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): GetHtmlTranslateTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.taskId)) {
    body['taskId'] = request.taskId;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetHtmlTranslateTask',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/html/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译获取html翻译结果
 *
 * @param request GetHtmlTranslateTaskRequest
 * @return GetHtmlTranslateTaskResponse
 */
async function getHtmlTranslateTask(request: GetHtmlTranslateTaskRequest): GetHtmlTranslateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getHtmlTranslateTaskWithOptions(request, headers, runtime);
}

model GetImageTranslateTaskRequest {
  taskId?: string(name='taskId', description='This parameter is required.', example='2746f4be-cff2-465e-a2c6-12bff30ce0f9'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model GetImageTranslateTaskResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    traceId?: string(name='traceId', example='213e391517328463424251152ec9fb'),
    translation?: {
      angle?: long(name='angle', example='0'),
      boundingBoxes?: [ 
        {
          confidence?: float(name='confidence', example='1'),
          direction?: long(name='direction', example='0'),
          downLeft?: {
            x?: long(name='x', example='10'),
            y?: long(name='y', example='694'),
          }(name='downLeft'),
          downRight?: {
            x?: long(name='x', example='97'),
            y?: long(name='y', example='694'),
          }(name='downRight'),
          tableCellId?: long(name='tableCellId', example='1'),
          tableId?: long(name='tableId', example='tbl-1dd15f7e-e373-4da9-858e-8785db1a2954'),
          text?: string(name='text'),
          translation?: map[string]any(name='translation', example='{
          "en": "Promotional price:"
        }'),
          upLeft?: {
            x?: long(name='x', example='10'),
            y?: long(name='y', example='669'),
          }(name='upLeft'),
          upRight?: {
            x?: long(name='x', example='11'),
            y?: long(name='y', example='22'),
          }(name='upRight'),
        }
      ](name='boundingBoxes'),
      boxesCount?: long(name='boxesCount', example='5'),
      height?: long(name='height', example='800'),
      orgHeight?: long(name='orgHeight', example='800'),
      orgWidth?: long(name='orgWidth', example='800'),
      tableInfos?: [ 
        {
          cellInfos?: [ 
            {
              pos?: [ 
                {
                  x?: long(name='x', example='33'),
                  y?: long(name='y', example='11'),
                }
              ](name='pos'),
              tableCellId?: long(name='tableCellId', example='1'),
              text?: string(name='text'),
              xec?: long(name='xec', example='2'),
              xsc?: long(name='xsc', example='1'),
              yec?: long(name='yec', example='1'),
              ysc?: long(name='ysc', example='3'),
            }
          ](name='cellInfos'),
          tableId?: long(name='tableId', example='tbl-f16944be-5955-466c-aa6c-940e4ed99a09'),
          xCellSize?: long(name='xCellSize', example='50'),
          yCellSize?: long(name='yCellSize', example='50'),
        }
      ](name='tableInfos'),
      width?: long(name='width', example='800'),
    }(name='translation'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='377A48D7-7CFA-53F9-8CA2-14FE3F2774B6'),
  success?: boolean(name='success', example='true'),
  synchro?: boolean(name='synchro', example='true'),
}

model GetImageTranslateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageTranslateTaskResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译获取图片翻译任务
 *
 * @param request GetImageTranslateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetImageTranslateTaskResponse
 */
@context("getImageTranslateTaskWithContext")
async function getImageTranslateTaskWithOptions(request: GetImageTranslateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): GetImageTranslateTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.taskId)) {
    body['taskId'] = request.taskId;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetImageTranslateTask',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/image/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译获取图片翻译任务
 *
 * @param request GetImageTranslateTaskRequest
 * @return GetImageTranslateTaskResponse
 */
async function getImageTranslateTask(request: GetImageTranslateTaskRequest): GetImageTranslateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getImageTranslateTaskWithOptions(request, headers, runtime);
}

model GetLongTextTranslateTaskRequest {
  taskId?: string(name='taskId', example='2746f4be-cff2-465e-a2c6-12bff30ce0f9'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-ep8ba0dr6seiddri'),
}

model GetLongTextTranslateTaskResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    translation?: string(name='translation', example='Featured Double Color Ball experts: Liu Ke and A Wang both hit the second prize, winning 1.43 million!'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='495'),
      outputTokens?: long(name='outputTokens', example='515'),
      totalTokens?: long(name='totalTokens', example='1010'),
    }(name='usage'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='AC642EEB-C29D-54DF-8F52-622565BBB78A'),
  success?: boolean(name='success', example='true'),
}

model GetLongTextTranslateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLongTextTranslateTaskResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译获取长文翻译结果
 *
 * @param request GetLongTextTranslateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLongTextTranslateTaskResponse
 */
@context("getLongTextTranslateTaskWithContext")
async function getLongTextTranslateTaskWithOptions(request: GetLongTextTranslateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): GetLongTextTranslateTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.taskId)) {
    body['taskId'] = request.taskId;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetLongTextTranslateTask',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/longText/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译获取长文翻译结果
 *
 * @param request GetLongTextTranslateTaskRequest
 * @return GetLongTextTranslateTaskResponse
 */
async function getLongTextTranslateTask(request: GetLongTextTranslateTaskRequest): GetLongTextTranslateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getLongTextTranslateTaskWithOptions(request, headers, runtime);
}

model SubmitHtmlTranslateTaskRequest {
  ext?: {
    domainHint?: string(name='domainHint', example='technology'),
    examples?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='hello'),
      }
    ](name='examples'),
    sensitives?: [ string ](name='sensitives'),
    terminologies?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='ML'),
      }
    ](name='terminologies'),
    textTransform?: {
      toLower?: boolean(name='toLower', example='false'),
      toTitle?: boolean(name='toTitle', example='false'),
      toUpper?: boolean(name='toUpper', example='false'),
    }(name='textTransform'),
  }(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', example='zh'),
  targetLanguage?: string(name='targetLanguage', example='en'),
  text?: string(name='text'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model SubmitHtmlTranslateTaskShrinkRequest {
  extShrink?: string(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', example='zh'),
  targetLanguage?: string(name='targetLanguage', example='en'),
  text?: string(name='text'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model SubmitHtmlTranslateTaskResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    status?: string(name='status', example='in_process'),
    taskId?: string(name='taskId', example='2746f4be-cff2-465e-a2c6-12bff30ce0f9'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='72E4FDA1-5474-5DC1-8DFF-968BEEA65C49'),
  success?: boolean(name='success', example='true'),
}

model SubmitHtmlTranslateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitHtmlTranslateTaskResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译提交html翻译任务
 *
 * @param tmpReq SubmitHtmlTranslateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitHtmlTranslateTaskResponse
 */
@context("submitHtmlTranslateTaskWithContext")
async function submitHtmlTranslateTaskWithOptions(tmpReq: SubmitHtmlTranslateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): SubmitHtmlTranslateTaskResponse {
  tmpReq.validate();
  var request = new SubmitHtmlTranslateTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'ext', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extShrink)) {
    body['ext'] = request.extShrink;
  }
  if (!$isNull(request.format)) {
    body['format'] = request.format;
  }
  if (!$isNull(request.scene)) {
    body['scene'] = request.scene;
  }
  if (!$isNull(request.sourceLanguage)) {
    body['sourceLanguage'] = request.sourceLanguage;
  }
  if (!$isNull(request.targetLanguage)) {
    body['targetLanguage'] = request.targetLanguage;
  }
  if (!$isNull(request.text)) {
    body['text'] = request.text;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitHtmlTranslateTask',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/html/submit`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译提交html翻译任务
 *
 * @param request SubmitHtmlTranslateTaskRequest
 * @return SubmitHtmlTranslateTaskResponse
 */
async function submitHtmlTranslateTask(request: SubmitHtmlTranslateTaskRequest): SubmitHtmlTranslateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return submitHtmlTranslateTaskWithOptions(request, headers, runtime);
}

model SubmitImageTranslateTaskRequest {
  ext?: {
    domainHint?: string(name='domainHint', example='technology'),
    examples?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='hello'),
      }
    ](name='examples'),
    sensitives?: [ string ](name='sensitives'),
    terminologies?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='ML'),
      }
    ](name='terminologies'),
    textTransform?: {
      toLower?: boolean(name='toLower', example='false'),
      toTitle?: boolean(name='toTitle', example='false'),
      toUpper?: boolean(name='toUpper', example='false'),
    }(name='textTransform'),
  }(name='ext'),
  format?: string(name='format', example='image'),
  scene?: string(name='scene', description='This parameter is required.', example='flash'),
  sourceLanguage?: string(name='sourceLanguage', description='This parameter is required.', example='zh'),
  targetLanguage?: [ string ](name='targetLanguage', description='This parameter is required.'),
  text?: string(name='text', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model SubmitImageTranslateTaskShrinkRequest {
  extShrink?: string(name='ext'),
  format?: string(name='format', example='image'),
  scene?: string(name='scene', description='This parameter is required.', example='flash'),
  sourceLanguage?: string(name='sourceLanguage', description='This parameter is required.', example='zh'),
  targetLanguageShrink?: string(name='targetLanguage', description='This parameter is required.'),
  text?: string(name='text', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model SubmitImageTranslateTaskResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    status?: string(name='status', example='success'),
    taskId?: string(name='taskId', example='2746f4be-cff2-465e-a2c6-12bff30ce0f9'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', example='42FF90E5-5D40-5797-AAF6-8A4D837CCCD5'),
  success?: boolean(name='success', example='true'),
}

model SubmitImageTranslateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitImageTranslateTaskResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译提交图片翻译任务
 *
 * @param tmpReq SubmitImageTranslateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitImageTranslateTaskResponse
 */
@context("submitImageTranslateTaskWithContext")
async function submitImageTranslateTaskWithOptions(tmpReq: SubmitImageTranslateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): SubmitImageTranslateTaskResponse {
  tmpReq.validate();
  var request = new SubmitImageTranslateTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'ext', 'json');
  }
  if (!$isNull(tmpReq.targetLanguage)) {
    request.targetLanguageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targetLanguage, 'targetLanguage', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extShrink)) {
    body['ext'] = request.extShrink;
  }
  if (!$isNull(request.format)) {
    body['format'] = request.format;
  }
  if (!$isNull(request.scene)) {
    body['scene'] = request.scene;
  }
  if (!$isNull(request.sourceLanguage)) {
    body['sourceLanguage'] = request.sourceLanguage;
  }
  if (!$isNull(request.targetLanguageShrink)) {
    body['targetLanguage'] = request.targetLanguageShrink;
  }
  if (!$isNull(request.text)) {
    body['text'] = request.text;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitImageTranslateTask',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/image/submit`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译提交图片翻译任务
 *
 * @param request SubmitImageTranslateTaskRequest
 * @return SubmitImageTranslateTaskResponse
 */
async function submitImageTranslateTask(request: SubmitImageTranslateTaskRequest): SubmitImageTranslateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return submitImageTranslateTaskWithOptions(request, headers, runtime);
}

model SubmitLongTextTranslateTaskRequest {
  ext?: {
    domainHint?: string(name='domainHint', example='technology'),
    examples?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='hello'),
      }
    ](name='examples'),
    sensitives?: [ string ](name='sensitives'),
    terminologies?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='ML'),
      }
    ](name='terminologies'),
    textTransform?: {
      toLower?: boolean(name='toLower', example='false'),
      toTitle?: boolean(name='toTitle', example='false'),
      toUpper?: boolean(name='toUpper', example='false'),
    }(name='textTransform'),
  }(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', example='zh'),
  targetLanguage?: string(name='targetLanguage', example='en'),
  text?: string(name='text'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model SubmitLongTextTranslateTaskShrinkRequest {
  extShrink?: string(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', example='zh'),
  targetLanguage?: string(name='targetLanguage', example='en'),
  text?: string(name='text'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model SubmitLongTextTranslateTaskResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    status?: string(name='status', example='200'),
    taskId?: string(name='taskId', example='2746f4be-cff2-465e-a2c6-12bff30ce0f9'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='400392FF-2F47-549A-A7FF-60FA4121D19E'),
  success?: boolean(name='success', example='true'),
}

model SubmitLongTextTranslateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitLongTextTranslateTaskResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译提交长文翻译任务
 *
 * @param tmpReq SubmitLongTextTranslateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitLongTextTranslateTaskResponse
 */
@context("submitLongTextTranslateTaskWithContext")
async function submitLongTextTranslateTaskWithOptions(tmpReq: SubmitLongTextTranslateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): SubmitLongTextTranslateTaskResponse {
  tmpReq.validate();
  var request = new SubmitLongTextTranslateTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'ext', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extShrink)) {
    body['ext'] = request.extShrink;
  }
  if (!$isNull(request.format)) {
    body['format'] = request.format;
  }
  if (!$isNull(request.scene)) {
    body['scene'] = request.scene;
  }
  if (!$isNull(request.sourceLanguage)) {
    body['sourceLanguage'] = request.sourceLanguage;
  }
  if (!$isNull(request.targetLanguage)) {
    body['targetLanguage'] = request.targetLanguage;
  }
  if (!$isNull(request.text)) {
    body['text'] = request.text;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitLongTextTranslateTask',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/longText/submit`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译提交长文翻译任务
 *
 * @param request SubmitLongTextTranslateTaskRequest
 * @return SubmitLongTextTranslateTaskResponse
 */
async function submitLongTextTranslateTask(request: SubmitLongTextTranslateTaskRequest): SubmitLongTextTranslateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return submitLongTextTranslateTaskWithOptions(request, headers, runtime);
}

model TextTranslateRequest {
  ext?: {
    domainHint?: string(name='domainHint', example='technology'),
    examples?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='hello'),
      }
    ](name='examples'),
    sensitives?: [ string ](name='sensitives'),
    terminologies?: [ 
      {
        src?: string(name='src'),
        tgt?: string(name='tgt', example='ML'),
      }
    ](name='terminologies'),
    textTransform?: {
      toLower?: boolean(name='toLower', example='false'),
      toTitle?: boolean(name='toTitle', example='false'),
      toUpper?: boolean(name='toUpper', example='false'),
    }(name='textTransform'),
  }(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', description='This parameter is required.', example='zh'),
  targetLanguage?: string(name='targetLanguage', description='This parameter is required.', example='en'),
  text?: string(name='text', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model TextTranslateShrinkRequest {
  extShrink?: string(name='ext'),
  format?: string(name='format', example='text'),
  scene?: string(name='scene', example='mt-turbo'),
  sourceLanguage?: string(name='sourceLanguage', description='This parameter is required.', example='zh'),
  targetLanguage?: string(name='targetLanguage', description='This parameter is required.', example='en'),
  text?: string(name='text', description='This parameter is required.'),
  workspaceId?: string(name='workspaceId', description='This parameter is required.', example='llm-kqtrcpdee4xm29xx'),
}

model TextTranslateResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    translation?: string(name='translation', example='How does Mogujie solve the data annotation challenge by building a platform?'),
    usage?: {
      inputTokens?: long(name='inputTokens', example='491'),
      outputTokens?: long(name='outputTokens', example='400'),
      totalTokens?: long(name='totalTokens', example='891'),
    }(name='usage'),
  }(name='data'),
  httpStatusCode?: string(name='httpStatusCode', example='200'),
  message?: string(name='message', example='success'),
  requestId?: string(name='requestId', description='Id of the request', example='299C57B2-EBB4-57E2-A6FE-723B874ACB74'),
  success?: boolean(name='success', example='true'),
}

model TextTranslateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextTranslateResponseBody(name='body'),
}

/**
 * @summary 通义多模态翻译文本翻译
 *
 * @param tmpReq TextTranslateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return TextTranslateResponse
 */
@context("textTranslateWithContext")
async function textTranslateWithOptions(tmpReq: TextTranslateRequest, headers: map[string]string, runtime: $RuntimeOptions): TextTranslateResponse {
  tmpReq.validate();
  var request = new TextTranslateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'ext', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extShrink)) {
    body['ext'] = request.extShrink;
  }
  if (!$isNull(request.format)) {
    body['format'] = request.format;
  }
  if (!$isNull(request.scene)) {
    body['scene'] = request.scene;
  }
  if (!$isNull(request.sourceLanguage)) {
    body['sourceLanguage'] = request.sourceLanguage;
  }
  if (!$isNull(request.targetLanguage)) {
    body['targetLanguage'] = request.targetLanguage;
  }
  if (!$isNull(request.text)) {
    body['text'] = request.text;
  }
  if (!$isNull(request.workspaceId)) {
    body['workspaceId'] = request.workspaceId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'TextTranslate',
    version = '2025-07-07',
    protocol = 'HTTPS',
    pathname = `/anytrans/translate/text`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通义多模态翻译文本翻译
 *
 * @param request TextTranslateRequest
 * @return TextTranslateResponse
 */
async function textTranslate(request: TextTranslateRequest): TextTranslateResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return textTranslateWithOptions(request, headers, runtime);
}

