/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Tablestore';
  @version = '2020-12-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group.

This parameter is required.', example='rg-aek3bgek3kxhyky', position='Body'),
  resourceId: string(name='ResourceId', description='The resource ID, which is the instance name.

This parameter is required.', example='first-ins', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='39871ED2-62C0-578F-A32E-B88072D5582F'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/v2/openapi/changeresourcegroup', 'json', false, 'json', request);
}

model CheckInstancePolicyRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='workshop-bj-ots1', position='Body'),
  policy: string(name='Policy', description='The instance policy in the JSON format.

This parameter is required.', example='{
    "Version": "1",
    "Statement": [
        {
            "Action": [
                "ots:*"
            ],
            "Resource": [
                "acs:ots:*:13791xxxxxxxxxxx:instance/myinstance*"
            ],
            "Principal": [
                "*"
            ],
            "Effect": "Allow",
            "Condition": {
                "StringEquals": {
                    "ots:TLSVersion": [
                        "1.2"
                    ]
                },
                "IpAddress": {
                    "acs:SourceIp": [
                        "192.168.0.1",
                        "172.16.0.1"
                    ]
                }
            }
        }
    ]
}', position='Body'),
}

model CheckInstancePolicyResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='OK'),
  message?: string(name='Message', description='The response message.', example='Verification passed.'),
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='757E172A-F94B-5E78-8A23-D9068E42F2E9'),
}

model CheckInstancePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckInstancePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckInstancePolicy  CheckInstancePolicyRequest
  * @return CheckInstancePolicyResponse
 */
async function checkInstancePolicy(request: CheckInstancePolicyRequest): CheckInstancePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckInstancePolicy', 'POST', '/v2/openapi/checkinstancepolicy', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  clusterType: string(name='ClusterType', description='The type of the instance.

*   SSD: high-performance instance
*   HYBRID: capacity instance

This parameter is required.', example='SSD', position='Body'),
  disableReplication?: boolean(name='DisableReplication', description='(Deprecated) Specifies whether to enable disaster recovery for the instance.

Valid values:

*   false
*   true', example='false', position='Body'),
  instanceDescription?: string(name='InstanceDescription', description='The description of the instance. The instance description must be 3 to 256 characters in length.', example='the test instance', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the instance. Instance naming conventions:

*   The name can contain only letters, digits, and hyphens (-).
*   The name must start with a letter.
*   The name cannot end with a hyphen (-).
*   The name is case-insensitive.
*   The name must be 3 to 16 characters in length.
*   The name cannot contain the following words: ali, ay, ots, taobao, and admin.

This parameter is required.', example='instance-test', position='Body'),
  network?: string(name='Network', description='(Deprecated) The network type of the instance. Valid values: NORMAL and VPC_CONSOLE. Default value: NORMAL.', example='NORMAL', position='Body'),
  networkSourceACL?: [ string ](name='NetworkSourceACL', description='The types of the source from which access is allowed. By default, the following source type is allowed:

TRUST_PROXY: console', position='Body'),
  networkTypeACL?: [ string ](name='NetworkTypeACL', description='The types of the network from which access is allowed. By default, the following network types are allowed:

*   INTERNET: Internet
*   VPC: virtual private cloud (VPC)
*   CLASSIC: classic network', position='Body'),
  policy?: string(name='Policy', description='The instance policy in the JSON format.', example='{
    "Version": "1",
    "Statement": [
        {
            "Action": [
                "ots:*"
            ],
            "Resource": [
                "acs:ots:*:13791xxxxxxxxxxx:instance/myinstance*"
            ],
            "Principal": [
                "*"
            ],
            "Effect": "Allow",
            "Condition": {
                "StringEquals": {
                    "ots:TLSVersion": [
                        "1.2"
                    ]
                },
                "IpAddress": {
                    "acs:SourceIp": [
                        "192.168.0.1",
                        "198.51.100.1"
                    ]
                }
            }
        }
    ]
}', maxLength=4000, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmxh4em5jnbcd', position='Body'),
  tags?: [ 
    {
      key: string(name='Key', description='The tag key. The tag key can be up to 64 characters in length.

This parameter is required.', example='p_instance'),
      value: string(name='Value', description='The tag value. The tag value can be up to 64 characters in length.

This parameter is required.', example='0woauavextilfqr61'),
    }
  ](name='Tags', description='The tags.', position='Body'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='39871ED2-62C0-578F-A32E-B88072D5582F'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @description *   **Before you call this operation, you must understand the billing and pricing of Tablestore. For more information, see [Billing overview](https://help.aliyun.com/document_detail/27291.html).**
  * *   Each Alibaba Cloud account can create up to 10 instances. The name of an instance must be unique within the region in which the instance resides.
  * *   After you create an instance, you cannot change the type of the instance. Proceed with caution.
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/v2/openapi/createinstance', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='instance-test', position='Body'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='17827FB1-CC71-559D-BBDF-9D41534322E7'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @description *   Before you delete an instance, make sure that all data tables and time series tables in the instance are deleted and virtual private clouds (VPCs) are unbound from the instance.
  * *   To prevent conflicts, do not create an instance that has the same name as the instance that is being deleted.
  * *   After an instance is deleted, the instance becomes unavailable and the tables, table data, and related indexes in the instance cannot be recovered. Proceed with caution.
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'POST', '/v2/openapi/deleteinstance', 'json', false, 'json', request);
}

model DeleteInstancePolicyRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='my-test-12345', position='Body'),
  policyVersion: long(name='PolicyVersion', description='The version of the instance policy.

This parameter is required.', example='2', position='Body'),
}

model DeleteInstancePolicyResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='3104C83E-6E82-57FB-BB88-8C64CCFDEF89'),
}

model DeleteInstancePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstancePolicyResponseBody(name='body'),
}

/**
  * @description *   You cannot recover a deleted instance policy. Proceed with caution.
  * *   After you delete an instance policy, the access control that is specified by the instance policy becomes invalid. Make sure that your instance is in a secure environment.
  * @param request  the request parameters of DeleteInstancePolicy  DeleteInstancePolicyRequest
  * @return DeleteInstancePolicyResponse
 */
async function deleteInstancePolicy(request: DeleteInstancePolicyRequest): DeleteInstancePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstancePolicy', 'POST', '/v2/openapi/deleteinstancepolicy', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

>  #### You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCzxxxxxxxxxx', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      i18nKey?: string(name='I18nKey', description='The key of the region.', example='yunjiankong.cloud.region.cn-hangzhou'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The regions.'),
  requestId?: string(name='requestId', description='The request ID, which can be used to troubleshoot issues.', example='B37BBA04-D827-55C8-B901-5264B904E8C6'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/region/DescribeRegions', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='instance-test', position='Query'),
}

model GetInstanceResponseBody = {
  aliasName?: string(name='AliasName', description='The alias of the instance.', example='instance-test'),
  createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2019-12-23T07:24:33Z'),
  instanceDescription?: string(name='InstanceDescription', description='The description of the instance.', example='Description of the test instance.'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='instance-test'),
  instanceSpecification?: string(name='InstanceSpecification', description='The type of the instance.

*   SSD: high-performance instance
*   HYBRID: capacity instance', example='SSD'),
  instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

*   normal: The instance works as expected.
*   forbidden: The instance is disabled.
*   Deleting: The instance is being deleted.', example='normal'),
  isMultiAZ?: boolean(name='IsMultiAZ'),
  network?: string(name='Network', description='The network type of the instance. Valid values:

*   VPC: The instance can be accessed only over the bound virtual private clouds (VPCs).
*   VPC_CONSOLE: The instance can be accessed from the Tablestore console or over the bound VPCs.
*   NORMAL: The instance can be accessed from networks of the custom types.', example='VPC'),
  networkSourceACL?: [ string ](name='NetworkSourceACL', description='The sources of the network from which access is allowed. Valid value:

TRUST_PROXY: console'),
  networkTypeACL?: [ string ](name='NetworkTypeACL', description='The types of the network from which access is allowed. Valid values:

*   CLASSIC: the classic network
*   INTERNET: the Internet
*   VPC: VPCs'),
  paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='Subscription'),
  policy?: string(name='Policy', description='The instance policy.', example='{
    "Version": "1",
    "Statement": [
        {
            "Action": [
                "ots:*"
            ],
            "Resource": [
                "acs:ots:*:13791xxxxxxxxxxx:instance/myinstance*"
            ],
            "Principal": [
                "*"
            ],
            "Effect": "Allow",
            "Condition": {
                "StringEquals": {
                    "ots:TLSVersion": [
                        "1.2"
                    ]
                },
                "IpAddress": {
                    "acs:SourceIp": [
                        "192.168.0.1",
                        "198.51.100.1"
                    ]
                }
            }
        }
    ]
}'),
  policyVersion?: long(name='PolicyVersion', description='The version of the instance policy.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-chengdu'),
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='757E172A-F94B-5E78-8A23-D9068E42F2E9'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmxh4em5jncda'),
  SPInstanceId?: string(name='SPInstanceId', description='The ID of the instance.', example='ots_standard_public_cn-9lb34u7u5001'),
  storageType?: string(name='StorageType', description='The storage type.

*   SSD: high-performance
*   HYBRID: capacity', example='HYBRID'),
  tableQuota?: int32(name='TableQuota', description='The total number of tables in the instance.', example='100'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag'),
      tagKey?: string(name='TagKey', description='(Deprecated) The tag key.', example='keyTestA'),
      tagValue?: string(name='TagValue', description='(Deprecated) The tag value.', example='00004a20240452b0'),
      value?: string(name='Value', description='The tag value.', example='333'),
    }
  ](name='Tags', description='The tags of the instance.'),
  userId?: string(name='UserId', description='The user ID.', example='16542312566'),
  VCUQuota?: int32(name='VCUQuota', description='The VCU quota.', example='20'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/v2/openapi/getinstance', 'json', false, 'json', request);
}

model ListInstancesRequest {
  instanceName?: string(name='InstanceName', description='The name of the instance. Fuzzy search is supported.', example='instance', position='Query'),
  instanceNameList?: [ string ](name='InstanceNameList', description='The names of the instances. This parameter is used to specify multiple instances that you want to query at the same time.', shrink='simple', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of instances that you want to return. Valid values: 0 to 200. If you do not configure this parameter or set this parameter to 0, the default value of 100 is used.', example='100', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start position of the query. Set this parameter to the value of the NextToken parameter that is returned from the last call. Instances are returned in lexicographical order starting from the position that is specified by this parameter. The first time you call the operation, leave this parameter empty.', example='CAESCG15aC1xxxxx', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID. You can query the ID on the Resource Group page in the Resource Management console.', example='rg-aek24upgom6p5ri', position='Query'),
  status?: string(name='Status', description='The instance status.

*   normal: The instance is running as expected.
*   forbidden: The instance is disabled.
*   Deleting: The instance is being deleted.', example='normal', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      aliasName?: string(name='AliasName', description='The instance alias.', example='instance-test'),
      createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2019-04-07T09:19:21Z'),
      instanceDescription?: string(name='InstanceDescription', description='The instance description.', example='Description of the test instance.'),
      instanceName?: string(name='InstanceName', description='The name of the instance, which is used to uniquely identify the instance.', example='instance-test'),
      instanceSpecification?: string(name='InstanceSpecification', description='The type of the instance.

*   SSD: high-performance instance
*   HYBRID: capacity instance', example='HYBRID'),
      instanceStatus?: string(name='InstanceStatus', description='The instance status.', example='normal'),
      isMultiAZ?: boolean(name='IsMultiAZ'),
      paymentType?: string(name='PaymentType', description='The billing method.

*   Subscription: subscription
*   PayAsYouGo: pay as you go', example='Subscription'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-huhehaote'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxh4em5jnbcd'),
      SPInstanceId?: string(name='SPInstanceId', description='The ID of the instance.', example='ots_standard_public_cn-g4t3igqjj002'),
      storageType?: string(name='StorageType', description='The storage type.

*   SSD: high-performance
*   HYBRID: capacity', example='HYBRID'),
      userId?: string(name='UserId', description='The user ID.', example='13542356466'),
      VCUQuota?: int32(name='VCUQuota', description='The VCU quota.', example='3'),
    }
  ](name='Instances', description='The instances.'),
  nextToken?: string(name='NextToken', description='The token that determines the start position of the next query. If this parameter is empty, all instances that you want to query are returned.', example='CAESCG15aC1xxxxx'),
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='E734979F-5A44-5993-9CE5-C23103576923'),
  totalCount?: long(name='TotalCount', description='The total number of instances returned.', example='2'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/v2/openapi/listinstances', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of tagged resources that you want to return. Valid values: 0 to 200. If you do not specify this parameter or set the parameter to 0, the default value of 100 is used.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken. Tagged resources are returned in lexicographical order starting from the position that is specified by this parameter.', example='CAESCG15aC1xxxxx', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs, which are instance names.', shrink='simple', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. valid value:

instance: instance', example='instance', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='Owner'),
      value?: string(name='Value', description='The tag value.', example='Tester'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of tagged resources that are returned for the query.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='CAESCG15aC1xxxxx'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID, which is the instance name.', example='instance-test'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='ALIYUN::OTS::INSTANCE'),
      tagKey?: string(name='TagKey', description='The tag key.', example='Owner'),
      tagValue?: string(name='TagValue', description='The tag value.', example='Tester'),
    }
  ](name='TagResources', description='The tags.'),
  requestId?: string(name='requestId', description='The request ID, which can be used to troubleshoot issues.', example='31D8120C-AC52-5CA9-BE4A-E4C6316E19AD'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/v2/openapi/listtagresources', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceIds: [ string ](name='ResourceIds', description='The resource IDs, which are instance names.

This parameter is required.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resource. valid value:

instance: instance

This parameter is required.', example='instance', position='Body'),
  tags: [ 
    {
      key: string(name='Key', description='The tag key.

This parameter is required.', example='created'),
      value: string(name='Value', description='The tag value.

This parameter is required.', example='job-0007z8j1omiabo5i872l'),
    }
  ](name='Tags', description='The tags.

This parameter is required.', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='44FDC379-4443-560E-B652-9F7476D8854F'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/v2/openapi/tagresources', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the resources. Default value: false. Valid values:

*   true: removes all tags from the resources.
*   false: removes the tags that are specified by the TagKeys parameter from the resources.', example='false', position='Body'),
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs, which are instance names.', position='Body'),
  resourceType?: string(name='ResourceType', description='The type of the resource. valid value:

instance: instance', example='instance', position='Body'),
  tagKeys?: [ string ](name='TagKeys', description='The tag keys.', position='Body'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='requestId', description='The request ID, which can be used to troubleshoot issues.', example='26B43C99-F5C9-5341-B462-37427C5BF201'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @description Removing tags from resources helps simplify resource management, optimize system performance, and mitigate potential security vulnerabilities. After a tag is removed from a resource, the system automatically deletes the tag if the tag is not added to other resources.
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'POST', '/v2/openapi/untagresources', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  aliasName?: string(name='AliasName', description='The alias of the instance.', example='instance-test', position='Body'),
  instanceDescription?: string(name='InstanceDescription', description='The description of the instance.', example='the test instance', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the instance whose information you want to update.

This parameter is required.', example='instance-test', position='Body'),
  network?: string(name='Network', description='(Deprecated) The network type of the instance. Valid values: NORMAL and VPC_CONSOLE. Default value: NORMAL.', example='VPC', position='Body'),
  networkSourceACL?: [ string ](name='NetworkSourceACL', description='The new sources of the network from which access is allowed. By default, all sources of networks are allowed. Valid value:

TRUST_PROXY: the console', position='Body'),
  networkTypeACL?: [ string ](name='NetworkTypeACL', description='The new types of the network from which access is allowed. By default, all types of networks are allowed. Valid values:

*   INTERNET: the Internet
*   VPC: VPCs
*   CLASSIC: the classic network', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which can be used to troubleshoot issues.', example='3104C83E-6E82-57FB-BB88-8C64CCFDEF89'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstance  UpdateInstanceRequest
  * @return UpdateInstanceResponse
 */
async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'POST', '/v2/openapi/updateinstance', 'json', false, 'json', request);
}

model UpdateInstanceElasticVCUUpperLimitRequest {
  elasticVCUUpperLimit: float(name='ElasticVCUUpperLimit', description='The upper limit for the VCUs of the instance.

>  Valid values of the upper limit for the VCUs of an instance: **Number of reserved VCUs+0.1 to 2000**. You can upgrade or downgrade configurations to modify the number of reserved VCUs by increments or decrements of 1. You can dynamically modify the upper limit for the VCUs of an instance by increments or decrements of 0.1

This parameter is required.', example='6', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='workshop-bj-ots1', position='Body'),
}

model UpdateInstanceElasticVCUUpperLimitResponseBody = {
  requestId?: string(name='requestId', description='The request ID, which can be used to troubleshoot issues.', example='B37BBA04-D827-55C8-B901-5264B904E8C6'),
}

model UpdateInstanceElasticVCUUpperLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceElasticVCUUpperLimitResponseBody(name='body'),
}

/**
  * @description *   **Before you call this operation, you must understand the billing and pricing of Tablestore. For more information, see [Billing overview](https://help.aliyun.com/document_detail/27291.html).**
  * *   After you enable scalability for an instance, the default upper limit for the VCUs of the instance is the sum of the scalability and the reserved VCUs.
  * *   To use more computing resources when your business grows, you can modify the upper limit for the VCUs of your instance. The new upper limit for the VCUs of your instance immediately takes effect.
  * @param request  the request parameters of UpdateInstanceElasticVCUUpperLimit  UpdateInstanceElasticVCUUpperLimitRequest
  * @return UpdateInstanceElasticVCUUpperLimitResponse
 */
async function updateInstanceElasticVCUUpperLimit(request: UpdateInstanceElasticVCUUpperLimitRequest): UpdateInstanceElasticVCUUpperLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceElasticVCUUpperLimit', 'POST', '/v2/openapi/updateinstanceelasticvcuupperlimit', 'json', false, 'json', request);
}

model UpdateInstancePolicyRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='my-test-12345', position='Body'),
  policy: string(name='Policy', description='The instance policy in the JSON format.

This parameter is required.', example='{
    "Version": "1",
    "Statement": [
        {
            "Action": [
                "ots:*"
            ],
            "Resource": [
                "acs:ots:*:13791xxxxxxxxxxx:instance/myinstance*"
            ],
            "Principal": [
                "*"
            ],
            "Effect": "Allow",
            "Condition": {
                "StringEquals": {
                    "ots:TLSVersion": [
                        "1.2"
                    ]
                },
                "IpAddress": {
                    "acs:SourceIp": [
                        "192.168.0.1",
                        "172.16.0.1"
                    ]
                }
            }
        }
    ]
}', position='Body'),
  policyVersion: long(name='PolicyVersion', description='The version of the instance policy.

This parameter is required.', example='2', position='Body'),
}

model UpdateInstancePolicyResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='requestId', description='The request ID, which can be used to troubleshoot issues.', example='31D8120C-AC52-5CA9-BE4A-E4C6316E19AD'),
}

model UpdateInstancePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstancePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstancePolicy  UpdateInstancePolicyRequest
  * @return UpdateInstancePolicyResponse
 */
async function updateInstancePolicy(request: UpdateInstancePolicyRequest): UpdateInstancePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstancePolicy', 'POST', '/v2/openapi/updateinstancepolicy', 'json', false, 'json', request);
}

