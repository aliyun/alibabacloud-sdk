/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Tablestore';
  @version = '2020-12-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', position='Body'),
  resourceId: string(name='ResourceId', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/v2/openapi/changeresourcegroup', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  clusterType: string(name='ClusterType', example='SSD vs HYBRID', position='Body'),
  disableReplication?: boolean(name='DisableReplication', position='Body'),
  instanceDescription?: string(name='InstanceDescription', example='实例描述', position='Body'),
  instanceName: string(name='InstanceName', example='first-ins', position='Body'),
  network?: string(name='Network', position='Body'),
  networkSourceACL?: [ string ](name='NetworkSourceACL', position='Body'),
  networkTypeACL?: [ string ](name='NetworkTypeACL', position='Body'),
  policy?: string(name='Policy', maxLength=4000, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxh4em5jnbcd', position='Body'),
  tags?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tags', position='Body'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/v2/openapi/createinstance', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceName: string(name='InstanceName', position='Body'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'POST', '/v2/openapi/deleteinstance', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      i18nKey?: string(name='I18nKey'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='requestId'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/region/DescribeRegions', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceName: string(name='InstanceName', position='Query'),
}

model GetInstanceResponseBody = {
  aliasName?: string(name='AliasName'),
  createTime?: string(name='CreateTime'),
  instanceDescription?: string(name='InstanceDescription'),
  instanceName?: string(name='InstanceName'),
  instanceSpecification?: string(name='InstanceSpecification'),
  instanceStatus?: string(name='InstanceStatus'),
  network?: string(name='Network'),
  networkSourceACL?: [ string ](name='NetworkSourceACL'),
  networkTypeACL?: [ string ](name='NetworkTypeACL'),
  paymentType?: string(name='PaymentType'),
  policy?: string(name='Policy'),
  policyVersion?: long(name='PolicyVersion'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxh4em5jncda'),
  SPInstanceId?: string(name='SPInstanceId'),
  storageType?: string(name='StorageType'),
  tableQuota?: int32(name='TableQuota'),
  tags?: [ 
    {
      key?: string(name='Key'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  userId?: string(name='UserId'),
  VCUQuota?: int32(name='VCUQuota'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/v2/openapi/getinstance', 'json', false, 'json', request);
}

model ListInstancesRequest {
  instanceName?: string(name='InstanceName', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      aliasName?: string(name='AliasName'),
      createTime?: string(name='CreateTime'),
      instanceDescription?: string(name='InstanceDescription'),
      instanceName?: string(name='InstanceName'),
      instanceSpecification?: string(name='InstanceSpecification'),
      instanceStatus?: string(name='InstanceStatus'),
      paymentType?: string(name='PaymentType'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxh4em5jnbcd'),
      SPInstanceId?: string(name='SPInstanceId'),
      storageType?: string(name='StorageType'),
      userId?: string(name='UserId'),
      VCUQuota?: int32(name='VCUQuota'),
    }
  ](name='Instances'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'GET', '/v2/openapi/listinstances', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', shrink='simple', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
  requestId?: string(name='requestId'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/v2/openapi/listtagresources', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceIds: [ string ](name='ResourceIds', position='Body'),
  resourceType: string(name='ResourceType', position='Body'),
  tags: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tags', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/v2/openapi/tagresources', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Body'),
  resourceIds?: [ string ](name='ResourceIds', position='Body'),
  resourceType?: string(name='ResourceType', position='Body'),
  tagKeys?: [ string ](name='TagKeys', position='Body'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='requestId'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'POST', '/v2/openapi/untagresources', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  aliasName?: string(name='AliasName', position='Body'),
  instanceDescription?: string(name='InstanceDescription', position='Body'),
  instanceName: string(name='InstanceName', position='Body'),
  network?: string(name='Network', position='Body'),
  networkSourceACL?: [ string ](name='NetworkSourceACL', position='Body'),
  networkTypeACL?: [ string ](name='NetworkTypeACL', position='Body'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstance', 'POST', '/v2/openapi/updateinstance', 'json', false, 'json', request);
}

