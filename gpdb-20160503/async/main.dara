/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'gpdb';
  @version = '2016-05-03';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'gpdb.aliyuncs.com',
    cn-hangzhou = 'gpdb.aliyuncs.com',
    cn-shanghai = 'gpdb.aliyuncs.com',
    cn-shenzhen = 'gpdb.aliyuncs.com',
    cn-hongkong = 'gpdb.aliyuncs.com',
    ap-southeast-1 = 'gpdb.aliyuncs.com',
    us-west-1 = 'gpdb.aliyuncs.com',
    us-east-1 = 'gpdb.aliyuncs.com',
    cn-hangzhou-finance = 'gpdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'gpdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'gpdb.aliyuncs.com',
    cn-qingdao = 'gpdb.aliyuncs.com',
    cn-north-2-gov-1 = 'gpdb.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateInstancePublicConnectionRequest {
  addressType?: string(name='AddressType', description='The network type of the endpoint. Valid values:

*   **primary**: primary endpoint
*   **cluster**: instance endpoint. This value is supported only for an instance that contains multiple coordinator nodes.

>  The default value is primary.', example='primary', position='Query'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the endpoint.

Specify a prefix for the endpoint. Example: `gp-bp12ga6v69h86****`. In this example, the endpoint is `gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com`.', example='gp-bp12ga6v69h86****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port: string(name='Port', description='The port number. Example: 5432.', example='5432', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADD6EA90-EECB-4C12-9F26-0B6DB587****'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

/**
  * You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](~~204879~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckServiceLinkedRoleRequest {
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: string(name='HasServiceLinkedRole', description='Indicates whether an SLR is created.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the privileged account.', example='testacc02', position='Query'),
  accountName: string(name='AccountName', description='The name of the privileged account.

*   The name can contain lowercase letters, digits, and underscores (\\_).
*   The name must start with a lowercase letter and end with a lowercase letter or a digit.
*   The name cannot start with gp.
*   The name must be 2 to 16 characters in length.', example='testacc02', position='Query'),
  accountPassword: string(name='AccountPassword', description='The password of the privileged account.

*   The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
*   Special characters include `! @ # $ % ^ & * ( ) _ + - =`
*   The password must be 8 to 32 characters in length.', example='Pw123456', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='test01', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4D4BE8A-DD46-440A-BFCD-EE**********'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

/**
  * *   Before you can use an AnalyticDB for PostgreSQL instance, you must create a privileged account for the instance.
  * *   You can call this operation to create only privileged accounts. For information about how to create other types of accounts, see [Create a database account](~~50206~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateCollectionRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  dimension?: long(name='Dimension', example='1024', position='Query'),
  fullTextRetrievalFields?: string(name='FullTextRetrievalFields', example='title,content', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  metadata: string(name='Metadata', example='{"title":"text","content":"text","response":"int"}', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parser?: string(name='Parser', example='zh_cn', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateCollectionResponseBody = {
  message?: string(name='Message', example='create successfully'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CreateCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCollectionResponseBody(name='body'),
}

async function createCollection(request: CreateCollectionRequest): CreateCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCollection', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. For more information, see [Ensure idempotence](~~327176~~).', example='0c593ea1-3bea-11e9-b96b-88**********', position='Query'),
  createSampleData?: boolean(name='CreateSampleData', description='Specifies whether to load a sample dataset after the instance is created. Valid values:

- **true**
- **false**

If you do not specify this parameter, no sample dataset is loaded.', example='false', position='Query'),
  DBInstanceCategory?: string(name='DBInstanceCategory', description='The edition of the instance. Valid values:

- **HighAvailability**: High-availability Edition.
- **Basic**: Basic Edition.

> This parameter must be specified when you create an instance in elastic storage mode.', example='HighAvailability', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For information, see [Instance types](~~86942~~).

> This parameter must be specified when you create an instance in reserved storage mode.', example='gpdb.group.segsdx1', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='test', position='Query'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount', description='The number of compute groups. Valid values: 2, 4, 8, 12, 16, 24, 32, 64, 96, and 128.

> This parameter must be specified when you create an instance in reserved storage mode.', example='2', position='Query'),
  DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

- **StorageElastic**: elastic storage mode.
- **Serverless**: Serverless mode.
- **Classic**: reserved storage mode.

> This parameter must be specified.', example='StorageElastic', position='Query'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the encryption key.

> If EncryptionType is set to CloudDisk, you must specify an encryption key that resides in the same region as the cloud disk that is specified by EncryptionType. Otherwise, leave this parameter empty.', example='0d2470df-da7b-4786-b981-88888888****', position='Query'),
  encryptionType?: string(name='EncryptionType', description='The encryption type. Valid values:

- **NULL** (default): Encryption is disabled.
- **CloudDisk**: Encryption is enabled on cloud disks, and EncryptionKey is used to specify an encryption key.

> Disk encryption cannot be disabled after it is enabled.', example='CloudDisk', position='Query'),
  engine: string(name='Engine', description='The database engine of the instance. Set the value to gpdb.', example='gpdb', position='Query'),
  engineVersion: string(name='EngineVersion', description='The version of the database engine. Valid values:

- 6.0
- 7.0', example='6.0', position='Query'),
  idleTime?: int32(name='IdleTime', description='The wait time for the instance that has no traffic to become idle. Minimum value: 60. Default value: 600. Unit: seconds.

> This parameter must be specified only when you create an instance in automatic Serverless mode.', example='600', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Set the value to VPC.

> 
- Only the Virtual Private Cloud (VPC) type is supported.
- If you do not specify this parameter, VPC is used.', example='VPC', position='Query'),
  instanceSpec?: string(name='InstanceSpec', description='The specifications of compute nodes.

Valid values for High-availability Edition instances in elastic storage mode:

- **2C16G**
- **4C32G**
- **16C128G**

Valid values for Basic Edition instances in elastic storage mode:

- **2C8G**
- **4C16G**
- **8C32G**
- **16C64G**

Valid values for instances in Serverless mode:

- **4C16G**
- **8C32G**

> This parameter must be specified when you create an instance in elastic storage mode or Serverless mode.', example='2C16G', position='Query'),
  masterNodeNum?: string(name='MasterNodeNum', description='The number of coordinator nodes. Valid values: 1 and 2.

> If you do not specify this parameter, 1 is used.', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

- **Postpaid**: pay-as-you-go.
- **Prepaid**: subscription.
> 
- If you do not specify this parameter, Postpaid is used.
- You can obtain more cost savings if you create a subscription instance for one year or longer. We recommend that you select the billing method that best suits your needs.', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The unit of the subscription duration. Valid values:

- **Month**
- **Year**
> This parameter must be specified when PayType is set to Prepaid.', example='Month', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance.', example='1.1.1.*', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  securityIPList: string(name='SecurityIPList', description='The IP address whitelist of the instance.

A value of 127.0.0.1 specifies that no IP address is allowed for external access. You can call the [ModifySecurityIps](~~86928~~) operation to modify the IP address whitelist after you create an instance.', example='127.0.0.1', position='Query'),
  segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', description='The performance level of ESSDs. Valid values:

- **pl0**
- **pl1**
- **pl2**
> 
- This parameter takes effect only when SegStorageType is set to cloud_essd.
- If you do not specify this parameter, pl1 is used.', example='pl1', position='Query'),
  segNodeNum?: string(name='SegNodeNum', description='The number of compute nodes.

- Valid values for High-availability Edition instances in elastic storage mode: multiples of 4 in the range of 4 to 512.
- Valid values for Basic Edition instances in elastic storage mode: multiples of 2 in the range of 2 to 512.
- Valid values for instances in Serverless mode: multiples of 2 in the range of 2 to 512.

> This parameter must be specified when you create an instance in elastic storage mode or Serverless mode.', example='4', position='Query'),
  segStorageType?: string(name='SegStorageType', description='The disk storage type of the instance. Only enhanced SSDs (ESSDs) are supported. Set the value to cloud_essd.

> This parameter must be specified when you create an instance in elastic storage mode.', example='cloud_essd', position='Query'),
  serverlessMode?: string(name='ServerlessMode', description='The type of the Serverless mode. Valid values:

- **Manual** (default): manual scheduling.
- **Auto**: automatic scheduling.

> This parameter must be specified only when you create an instance in Serverless mode.', example='Auto', position='Query'),
  serverlessResource?: int32(name='ServerlessResource', description='The threshold of computing resources. Unit: AnalyticDB compute unit (ACU). Valid values: 8 to 32. The value must be in increments of 8 ACUs. Default value: 32.

> This parameter must be specified only when you create an instance in automatic Serverless mode.', example='32', position='Query'),
  storageSize?: long(name='StorageSize', description='The storage capacity of the instance. Unit: GB. Valid values: 50 to 4000.

> This parameter must be specified when you create an instance in elastic storage mode.', example='200', position='Query'),
  storageType?: string(name='StorageType', description='This parameter is no longer used.', example='null', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Take note of the following requirements:

- The tag key cannot be an empty string.
- The tag key can be up to 128 characters in length.
- The tag key cannot start with `aliyun` or `acs:`, and contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Take note of the following requirements:

- The tag key cannot be an empty string.
- The tag key can be up to 128 characters in length.
- The tag key cannot start with `aliyun` or `acs:`, and contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration.

- Valid values when Period is set to Month: 1 to 9.
- Valid values when Period is set to Year: 1 to 3.
> This parameter must be specified when PayType is set to Prepaid.', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='The VPC ID of the instance.

> 
- This parameter must be specified.
- The region where the VPC resides must be the same as the region that is specified by RegionId.', example='vpc-bp*******************', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.

> 
- This parameter must be specified.
- The zone where the vSwitch resides must be the same as the zone that is specified by ZoneId.', example='vsw-bp*******************', position='Query'),
  vectorConfigurationStatus?: string(name='VectorConfigurationStatus', description='Specifies whether to enable vector engine optimization. Valid values:

- **enabled**
- **disabled** (default)

> 
- We recommend that you do not enable vector engine optimization in mainstream analysis and real-time data warehousing scenarios.
- We recommend that you enable vector engine optimization in AI Generated Content (AIGC) and vector retrieval scenarios that require the vector analysis engine.', example='enabled', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the read-only instance. You can call the [DescribeRegions](~~86912~~) operation to query the most recent zone list.', example='cn-hangzhou-i', position='Query'),
}

model CreateDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', description='An invalid parameter. It is no longer returned when you call this operation.

You can call the [DescribeDBInstanceAttribute](~~86910~~) operation to query the endpoint that is used to connect to the instance.', example='gp-bp***************.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp***************'),
  orderId?: string(name='OrderId', description='The order ID.', example='111111111111'),
  port?: string(name='Port', description='An invalid parameter. It is no longer returned when you call this operation.

You can call the [DescribeDBInstanceAttribute](~~86910~~) operation to query the port number that is used to connect to the instance.', example='5432'),
  requestId?: string(name='RequestId', description='The request ID.', example='5414A4E5-4C36-4461-95FC-************'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

/**
  * You can call this operation when you need to create AnalyticDB for PostgreSQL instances to meet the requirements of new applications or services.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstancePlanRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  planConfig: string(name='PlanConfig', description='The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of the **PlanType** and **PlanScheduleType** parameters. The following section describes the PlanConfig parameter.', example='{"pause":{"planCronTime":"0 0 12 1/1 * ? "},"resume":{"planCronTime":"0 0 0 1/1 * ? "}}', position='Query'),
  planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan', position='Query'),
  planEndDate?: string(name='PlanEndDate', description='The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.

> *   This parameter is required only if the **PlanScheduleType** parameter is set to **Regular**.
> *   If you do not specify this parameter, the plan does not end.', example='2023-04-17T23:00Z', position='Query'),
  planName: string(name='PlanName', description='The name of the plan.', example='test-plan', position='Query'),
  planScheduleType: string(name='PlanScheduleType', description='The execution mode of the plan. Valid values:

*   **Postpone**: The plan is executed later.
*   **Regular**: The plan is executed periodically.', example='Regular', position='Query'),
  planStartDate?: string(name='PlanStartDate', description='The start time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

>  *   This parameter is required only if the **PlanScheduleType** parameter is set to **Regular**.
>  *   If you do not specify this parameter, the plan is executed immediately.', example='2022-04-17T23:00Z', position='Query'),
  planType: string(name='PlanType', description='The type of the plan. Valid values:

*   **PauseResume**: pauses and resumes an instance.
*   **Resize**: changes the number of compute nodes.
*   **ModifySpec**: changes compute node specifications.

> *   You can specify the value to Resize only for instances in Serverless mode.
> *   You can specify the value to ModifySpec only for instances in elastic storage mode.', example='PauseResume', position='Query'),
}

model CreateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message.

This parameter is returned only if the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model CreateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstancePlanResponseBody(name='body'),
}

/**
  * You can call this operation to create a plan for an AnalyticDB for PostgreSQL instance. For example, you can create a plan to pause and resume an instance, change the number of compute nodes, or change compute node specifications.
  * >  This operation is applicable only to pay-as-you-go instances.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createDBInstancePlan(request: CreateDBInstancePlanRequest): CreateDBInstancePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstancePlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateNamespaceRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword: string(name='NamespacePassword', example='testpassword2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateNamespaceResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateSampleDataRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if an error occurs. This message does not affect the execution of the operation.', example='*********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15A6881F-AAAB-5E4D-9B3F-6DCC1BDF4F2E_99'),
  status?: boolean(name='Status', description='The execution state of the operation. Valid values:

*   **false**: The operation fails.
*   **true**: The operation is successful.', example='true'),
}

model CreateSampleDataResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSampleDataResponseBody(name='body'),
}

/**
  * You can call this operation to load a sample dataset to an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](~~452277~~).
  * ## Precautions
  * - If your instance is in elastic storage mode, the sample dataset is supported only for V6.3.10.3 or later. If your instance is in Serverless mode, the sample dataset is supported only for V1.0.4.0 or later. For more information about how to update the minor engine version of an instance, see [Update the minor engine version](/help/en/analyticdb-for-postgresql/latest/upgrade-the-engine-version).
  * - The sample dataset is about 10 GB in size. Make sure that your instance has sufficient storage space.
  * - The sample dataset contains a database named `ADB_SampleData_TPCH`. Make sure that your instance does not have a database with the same name. Otherwise, the dataset may fail to be loaded.
  * - It may take 6 to 8 minutes to load the sample dataset. During this period, operations on your instance such as adding nodes or changing node specifications may be affected.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSampleData', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateVectorIndexRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  dimension: int32(name='Dimension', example='1024', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  metrics?: string(name='Metrics', description='Distance Metrics。', example='cosine', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateVectorIndexResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CreateVectorIndexResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVectorIndexResponseBody(name='body'),
}

async function createVectorIndex(request: CreateVectorIndexRequest): CreateVectorIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVectorIndex', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCollectionRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword: string(name='NamespacePassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteCollectionResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DeleteCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCollectionResponseBody(name='body'),
}

async function deleteCollection(request: DeleteCollectionRequest): DeleteCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCollection', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCollectionDataRequest {
  collection: string(name='Collection', example='document', position='Query'),
  collectionData?: string(name='CollectionData', example='{"title":["a","b"]}', position='Query'),
  collectionDataFilter?: string(name='CollectionDataFilter', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteCollectionDataResponseBody = {
  appliedRows?: long(name='AppliedRows', example='10'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DeleteCollectionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCollectionDataResponseBody(name='body'),
}

async function deleteCollectionData(request: DeleteCollectionDataRequest): DeleteCollectionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCollectionData', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](~~327176~~).', example='0c593ea1-3bea-11e9-b96b-88**********', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B3**********'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

/**
  * *   Subscription instances cannot be manually released. They are automatically released when they expire.
  * *   You can call this operation to release pay-as-you-go instances only when they are in the **Running** state.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstancePlanRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  planId: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234', position='Query'),
}

model DeleteDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model DeleteDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstancePlanResponseBody(name='body'),
}

/**
  * If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteDBInstancePlan(request: DeleteDBInstancePlanRequest): DeleteDBInstancePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstancePlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNamespaceRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteNamespaceResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVectorIndexRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteVectorIndexResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DeleteVectorIndexResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVectorIndexResponseBody(name='body'),
}

async function deleteVectorIndex(request: DeleteVectorIndexRequest): DeleteVectorIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVectorIndex', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', description='The name of the account.', example='testuser', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    DBInstanceAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription', description='The description of the account.', example='testuser'),
      accountName?: string(name='AccountName', description='The name of the account.', example='testuser'),
      accountStatus?: string(name='AccountStatus', description='The state of the account.

*   **0**: The account is being created.
*   **1**: The account is in use.
*   **3**: The account is being deleted.', example='1'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************'),
    }
  ](name='DBInstanceAccount')
  }(name='Accounts', description='Details of the account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

/**
  * This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourcesRequest {
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='PostPaid', position='Query'),
  region: string(name='Region', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent zone list.', example='cn-hangzhou-h', position='Query'),
}

model DescribeAvailableResourcesResponseBody = {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61DC563C-F8E4-593A-8D27-CE**********'),
  resources?: [ 
    {
      supportedEngines?: [ 
        {
          mode?: string(name='Mode', description='The instance resource type. Valid values:

*   **ecs**: elastic storage mode
*   **serverless**: Serverless mode', example='ecs'),
          supportedEngineVersion?: string(name='SupportedEngineVersion', description='The available engine version.', example='6.0'),
          supportedInstanceClasses?: [ 
            {
              category?: string(name='Category', description='The instance edition. Valid values:

*   **HighAvailability**: High-availability Edition
*   **Basic**: Basic Edition', example='HighAvailability'),
              description?: string(name='Description', description='The description of compute node specifications.'),
              displayClass?: string(name='DisplayClass', description='The specifications of each compute node.', example='2C16G'),
              instanceClass?: string(name='InstanceClass', description='The specifications of each compute node.', example='2C16G'),
              nodeCount?: {
                maxCount?: string(name='MaxCount', description='The maximum number of compute nodes.', example='256'),
                minCount?: string(name='MinCount', description='The minimum number of compute nodes.', example='4'),
                step?: string(name='Step', description='The step size for adding compute nodes.

For example, if the value of this parameter is 4, compute nodes must be added by multiples of 4.', example='4'),
              }(name='NodeCount', description='Details about the compute nodes.'),
              storageSize?: {
                maxCount?: string(name='MaxCount', description='The maximum storage capacity of each compute node.', example='1000'),
                minCount?: string(name='MinCount', description='The minimum storage capacity of each compute node.', example='50'),
                step?: string(name='Step', description='The step size for adding storage capacity for compute nodes.', example='50'),
              }(name='StorageSize', description='Details about the storage capacity of compute nodes.'),
              storageType?: string(name='StorageType', description='The storage type. Valid values:

*   **cloud_essd**: enhanced SSD (ESSD)
*   **cloud_efficiency**: ultra disk
*   **oss**: Object Storage Service (OSS)', example='cloud_essd'),
            }
          ](name='SupportedInstanceClasses', description='The available specifications.'),
        }
      ](name='SupportedEngines', description='The available engine version and specifications.'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
    }
  ](name='Resources', description='Details of the available resources.'),
}

model DescribeAvailableResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourcesResponseBody(name='body'),
}

/**
  * When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a specific zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeAvailableResources(request: DescribeAvailableResourcesRequest): DescribeAvailableResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The number of days for which data backup files are retained.', example='7'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint', description='Indicates whether automatic point-in-time backup is enabled. Valid values:

*   **true**: Automatic point-in-time backup is enabled.
*   **false**: Automatic point-in-time backup is disabled.', example='true'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**', example='Wednesday,Friday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The backup time. The time is in the HH:mmZ-HH:mmZ format. The time is displayed in UTC.', example='12:00Z-13:00Z'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod', description='The frequency of the point-in-time backup. Valid values:

*   **1**: per hour
*   **2**: per 2 hours
*   **4**: per 4 hours
*   **8**: per 8 hours', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E6B3287-A3E2-5A87-B8D8-E9**********'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

/**
  * You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](~~210095~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCollectionRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeCollectionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  dimension?: int32(name='Dimension', example='1024'),
  fullTextRetrievalFields?: string(name='FullTextRetrievalFields', example='title,content'),
  message?: string(name='Message', example='Successful'),
  metadata?: map[string]string(name='Metadata'),
  metrics?: string(name='Metrics', description='Distance Metrics。', example='cosine'),
  namespace?: string(name='Namespace', example='mynamespace'),
  parser?: string(name='Parser', example='zh_cn'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DescribeCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCollectionResponseBody(name='body'),
}

async function describeCollection(request: DescribeCollectionRequest): DescribeCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCollection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterNodeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
  nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **master**: coordinator node
*   **segment**: compute node

>  If you do not specify this parameter, the information of all nodes is returned.', example='master', position='Query'),
}

model DescribeDBClusterNodeResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the instance.', example='gp-bp***************'),
  nodes?: [ 
    {
      name?: string(name='Name', description='The name of the node.', example='master-10*******'),
    }
  ](name='Nodes', description='The information of nodes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='87E44B48-B306-4AD3-A63B-C8**********'),
}

model DescribeDBClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterNodeResponseBody(name='body'),
}

/**
  * This operation is called to query the information of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBClusterNode(request: DescribeDBClusterNodeRequest): DescribeDBClusterNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterNode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterPerformanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.

>  The end time must be later than the start time. The interval cannot be more than seven days.', example='2021-11-03T15:10Z', position='Query'),
  key: string(name='Key', description='The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](~~86943~~).', example='adbpg_conn_count', position='Query'),
  nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **master**: coordinator node
*   **segment**: compute node

>  If you do not specify this parameter, the performance metrics of all nodes are returned.', example='master', position='Query'),
  nodes?: string(name='Nodes', description='The nodes for which you want to query performance metrics. Separate multiple values with commas (,). Example: `master-10******1,master-10******2`. You can call the [DescribeDBClusterNode](~~390136~~) operation to query the names of nodes.

The nodes can also be filtered based on their metric values. Valid values:

*   **top10**: the 10 nodes that have the highest metric values
*   **top20**: the 20 nodes that have the highest metric values
*   **bottom10**: the 10 nodes that have the lowest metric values
*   **bottom20**: the 20 nodes that have the lowest metric values', example='top10', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.

>  You can query monitoring information only within the last 30 days.', example='2021-11-03T15:00Z', position='Query'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.', example='2021-11-03T15:10Z'),
  performanceKeys?: [ 
    {
      name?: string(name='Name', description='The name of the performance metric. For more information, see [Performance parameters](~~86943~~).', example='adbpg_group_cpu_used_percent'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the compute node or compute group.', example='standby-********-cpu'),
          role?: string(name='Role', description='The role of the node. Valid values:

*   **master**: primary coordinator node
*   **standby**: standby coordinator node
*   **segment**: compute node', example='standby'),
          values?: [ 
            {
              point?: [ string ](name='Point', description='The value of the performance metric and the time when the metric value was collected.'),
            }
          ](name='Values', description='The value of the performance metric collected at a point in time.'),
        }
      ](name='Series', description='Details of the performance metric of a node.'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='%'),
    }
  ](name='PerformanceKeys', description='Details of the performance metrics of the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8E8990F0-C81E-4C94-8F51-5F**********'),
  startTime?: string(name='StartTime', description='The start time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.', example='2021-11-03T15:00Z'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

/**
  * This operation is called to query the performance metrics of an AnalyticDB for PostgreSQL instance, such as the number of connections, memory usage, CPU utilization, I/O throughput, read IOPS, write IOPS, and disk space usage.
  * You can query monitoring information only within the last 30 days.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The instance ID.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.', example='gp-bp13ue79qk8y1****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
}

model DescribeDBInstanceAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      availabilityValue?: string(name='AvailabilityValue', description='The service availability of the instance. Unit: %.

>  This parameter is available only for instances in reserved storage mode.', example='100.0%'),
      connectionMode?: string(name='ConnectionMode', description='The access mode of the instance. Valid values:

*   **Performance**: standard mode.
*   **Safety**: safe mode.
*   **LVS**: Linux Virtual Server (LVS) mode.', example='LVS'),
      connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the instance.', example='gp-bp13ue79qk8y1****-master.gpdb.rds.aliyuncs.com'),
      coreVersion?: string(name='CoreVersion', description='The number of the minor version.', example='mm.v6.3.10.1-202207141918'),
      cpuCores?: int32(name='CpuCores', description='The number of CPU cores per compute node.', example='2'),
      cpuCoresPerNode?: int32(name='CpuCoresPerNode', description='The number of CPU cores per node.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2022-08-11T09:16:26Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', description='The edition of the instance. Valid values:

*   **Basic**: Basic Edition.
*   **HighAvailability**: High-availability Edition.', example='HighAvailability'),
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance.

>  This parameter is available only for instances in reserved storage mode.', example='gpdb.group.segsdx1'),
      DBInstanceClassType?: string(name='DBInstanceClassType', description='The instance family of the instance. Valid values:

*   **s**: shared.
*   **x**: general-purpose.
*   **d**: dedicated.
*   **h**: dedicated host.', example='x'),
      DBInstanceCpuCores?: int32(name='DBInstanceCpuCores', description='The number of CPU cores.', example='2'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp13ue79qk8y1****'),
      DBInstanceDiskMBPS?: long(name='DBInstanceDiskMBPS', description='The maximum disk throughput of the compute group. Unit: Mbit/s.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      DBInstanceGroupCount?: string(name='DBInstanceGroupCount', description='The number of compute groups.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp13ue79qk8y1****'),
      DBInstanceMemory?: long(name='DBInstanceMemory', description='The memory capacity per compute node.

>  For instances in reserved storage mode, the unit of this parameter is MB. For instances in elastic storage mode and Serverless mode, the unit of this parameter is GB.', example='16'),
      DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **Serverless**: Serverless mode.
*   **StorageElastic**: elastic storage mode.
*   **Classic**: reserved storage mode.', example='StorageElastic'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The type of the network interface card (NIC) that is used by the instance. Valid values:

*   **0**: Internet.
*   **1**: internal network.
*   **2**: VPC.', example='2'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The state of the instance. For more information, see [Instance statuses](~~86944~~).', example='Running'),
      DBInstanceStorage?: long(name='DBInstanceStorage', description='The maximum storage capacity per node. Unit: GB.', example='50'),
      encryptionKey?: string(name='EncryptionKey', description='The encryption key.

>  This parameter is returned only for instances for which disk encryption is enabled.', example='0d2470df-da7b-4786-b981-************'),
      encryptionType?: string(name='EncryptionType', description='The encryption type. Valid values:

*   **CloudDisk**: disk encryption.

>  This parameter is returned only for instances for which disk encryption is enabled.', example='CloudDisk'),
      engine?: string(name='Engine', description='The database engine of the instance.', example='gpdb'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='6.0'),
      expireTime?: string(name='ExpireTime', description='The expiration time of the instance. The time is displayed in UTC.

>  For pay-as-you-go instances, `2999-09-08T16:00:00Z` is returned.', example='2999-09-08T16:00:00Z'),
      hostType?: string(name='HostType', description='The disk type of the compute group. Valid values:

*   **0**: SSD.
*   **1**: HDD.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      idleTime?: int32(name='IdleTime', description='The wait period for the instance that has no traffic to become idle. Unit: seconds.

>  This parameter is returned only for instances in automatic Serverless mode.', example='600'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**: classic network.
*   **VPC**: VPC.', example='VPC'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The cluster is manually locked.
*   **LockByExpiration**: The instance is automatically locked due to instance expiration.
*   **LockByRestoration**: The instance is automatically locked due to instance restoration.
*   **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
      maintainEndTime?: string(name='MaintainEndTime', description='The end time of the maintenance window.', example='22:00Z'),
      maintainStartTime?: string(name='MaintainStartTime', description='The start time of the maintenance window.', example='18:00Z'),
      masterNodeNum?: int32(name='MasterNodeNum', description='The number of coordinator nodes.', example='1'),
      maxConnections?: int32(name='MaxConnections', description='The maximum number of concurrent connections to the instance.

>  This parameter is available only for instances in reserved storage mode.', example='500'),
      memoryPerNode?: int32(name='MemoryPerNode', description='The memory capacity per node. The unit can be one of the valid values of the **MemoryUnit** parameter.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      memorySize?: long(name='MemorySize', description='The memory capacity per compute node.

>  For instances in reserved storage mode, the unit of this parameter is MB. For instances in elastic storage mode and Serverless mode, the unit of this parameter is GB.', example='16'),
      memoryUnit?: string(name='MemoryUnit', description='The unit of the memory capacity.

>  This parameter is available only for instances in reserved storage mode.', example='GB'),
      minorVersion?: string(name='MinorVersion', description='The minor version of the instance.', example='6.3.10.1-202207141918'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Postpaid'),
      port?: string(name='Port', description='The port number that is used to connect to the instance.', example='5432'),
      readDelayTime?: string(name='ReadDelayTime', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
      runningTime?: string(name='RunningTime', description='The running duration of the instance.', example='4 days 22:58:55'),
      securityIPList?: string(name='SecurityIPList', description='The IP address whitelist of the instance.', example='127.0.0.1'),
      segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', description='The performance level of ESSDs. Only **PL1** is supported.', example='PL1'),
      segNodeNum?: int32(name='SegNodeNum', description='The number of compute nodes.

>  This parameter is available only for instances in elastic storage mode or manual Serverless mode.', example='4'),
      segmentCounts?: int32(name='SegmentCounts', description='The number of compute groups.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      serverlessMode?: string(name='ServerlessMode', description='The type of the Serverless mode. Valid values:

*   **Manual**: manual scheduling.
*   **Auto**: automatic scheduling.

>  This parameter is returned only for instances in Serverless mode.', example='Auto'),
      serverlessResource?: int32(name='ServerlessResource', description='The threshold of computing resources. Unit: AnalyticDB compute unit (ACU).

>  This parameter is returned only for instances in automatic Serverless mode.', example='32'),
      startTime?: string(name='StartTime', description='The time when the instance started to run.', example='2022-08-11T09:26:43Z'),
      storagePerNode?: int32(name='StoragePerNode', description='The storage capacity per node. The unit can be one of the valid values of the **StorageUnit** parameter.

>  This parameter is available only for instances in reserved storage mode.', example='0'),
      storageSize?: long(name='StorageSize', description='The storage capacity. Unit: GB.', example='50'),
      storageType?: string(name='StorageType', description='The storage type of the instance. Valid values:

- **cloud_essd**: enhanced SSD (ESSD).
- **cloud_efficiency**: ultra disk.

>  This parameter is available only for instances in elastic storage mode.', example='cloud_essd'),
      storageUnit?: string(name='StorageUnit', description='The unit of the storage capacity. Valid values:

*   **GB SSD**
*   **TB SSD**
*   **GB HDD**

>  This parameter is available only for instances in reserved storage mode or Serverless mode.', example='GB SSD'),
      supportRestore?: boolean(name='SupportRestore', description='Indicates whether the instance supports backup and restoration.

*   **true**
*   **false**', example='true'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test-key'),
          value?: string(name='Value', description='The tag value.', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the instance. Each tag is a key-value pair.'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.', example='vsw-bp1cpq8mr64paltkb****'),
      vectorConfigurationStatus?: string(name='VectorConfigurationStatus', description='Indicates whether vector engine optimization is enabled. Valid values:

*   **enabled**
*   **disabled**', example='enabled'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID of the instance.', example='vpc-bp19ame5m1r3oejns****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-j'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items', description='The queried instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5E6EDEB8-D73E-5F2D-B948-86C8AEB05A68'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

/**
  * You can call this operation to query the information about an AnalyticDB for PostgreSQL instance, such as the instance type, network type, and instance state.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceDataBloatRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', position='Query'),
}

model DescribeDBInstanceDataBloatResponseBody = {
  items?: [ 
    {
      bloatCeoff?: string(name='BloatCeoff', description='The coefficient of data bloat. It is calculated by using the following formula:

Bloat coefficient = Number of dead rows/Number of active rows.', example='1.03'),
      bloatSize?: string(name='BloatSize', description='The bloat size of the table. It indicates the amount of space that can be released.', example='0.2MB'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='adbtest'),
      expectTableSize?: string(name='ExpectTableSize', description='The expected size of the table.

It indicates the size of the table that has no data bloat.', example='1MB'),
      realTableSize?: string(name='RealTableSize', description='The actual size of the table.', example='1.2MB'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema1'),
      sequence?: int32(name='Sequence', description='The sequence number.', example='1'),
      storageType?: string(name='StorageType', description='The storage type of the table. Valid values:

*   **Heap**: heap table
*   **AO**: append-optimized (AO) table', example='Heap'),
      suggestedAction?: string(name='SuggestedAction', description='This parameter is not returned.', example='null'),
      tableName?: string(name='TableName', description='The name of the table.', example='tab1'),
      timeLastUpdated?: string(name='TimeLastUpdated', description='The time when the table was last deleted, inserted, or updated.', example='2022-08-08T20:00:00Z'),
      timeLastVacuumed?: string(name='TimeLastVacuumed', description='The time when the table was last vacuumed. The time is displayed in UTC.', example='2022-08-08T16:00:00Z'),
    }
  ](name='Items', description='Details of data bloat.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeDBInstanceDataBloatResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceDataBloatResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstanceDataBloat(request: DescribeDBInstanceDataBloatRequest): DescribeDBInstanceDataBloatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceDataBloat', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceDataSkewRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20', position='Query'),
}

model DescribeDBInstanceDataSkewResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='adbtest'),
      distributeKey?: string(name='DistributeKey', description='The distribution key of the table.', example='ItemId'),
      owner?: string(name='Owner', description='The owner of the table.', example='adbpguser'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema1'),
      sequence?: int32(name='Sequence', description='The sequence number of the data skew case. All data skew cases are sorted by severity in descending order.', example='1'),
      tableName?: string(name='TableName', description='The name of the table.', example='tab1'),
      tableSize?: string(name='TableSize', description='The total number of rows in the table.', example='100000'),
      tableSkew?: string(name='TableSkew', description='The skew ratio of the table. Valid values: 0 to 100. Unit: %. A greater value indicates that the table is more severely skewed. A smaller value indicates less impact on query performance. A value of 0 indicates no data skew.', example='10.23'),
      timeLastUpdated?: string(name='TimeLastUpdated', description='The time when the table was last deleted, inserted, or updated.', example='2020-09-08T20:00:00Z'),
    }
  ](name='Items', description='Details about data skew.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeDBInstanceDataSkewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceDataSkewResponseBody(name='body'),
}

/**
  * To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstanceDataSkew(request: DescribeDBInstanceDataSkewRequest): DescribeDBInstanceDataSkewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceDataSkew', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceDiagnosisSummaryRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20', position='Query'),
  rolePreferd?: string(name='RolePreferd', description='The role state of the node. It indicates whether a primary/secondary switchover occurs. Valid values:

*   **normal**: The node role is normal. No primary/secondary switchover occurs.
*   **reverse**: The node role is reversed. A primary/secondary switchover occurs.', example='normal', position='Query'),
  startStatus?: string(name='StartStatus', description='The running state of the node. Valid values:

*   **UP**: The node is running.
*   **DOWN**: The node is faulty.

If this parameter is not specified, information of nodes in all running states is returned.', example='UP', position='Query'),
  syncMode?: string(name='SyncMode', description='The data synchronization state of the node. Valid values:

*   **synced**: The node data is synchronized.
*   **notSyncing**: The node data is not synchronized.

If this parameter is not specified, information of nodes in all synchronization states is returned.', example='synced', position='Query'),
}

model DescribeDBInstanceDiagnosisSummaryResponseBody = {
  items?: [ 
    {
      hostname?: string(name='Hostname', description='The name of the node.', example='gp-t4np568qe9710****-master-100984919'),
      nodeAddress?: string(name='NodeAddress', description='The IP address of the node.', example='192.168.XX.XX'),
      nodeCID?: string(name='NodeCID', description='The ID of the node group.', example='-1'),
      nodeID?: string(name='NodeID', description='The ID of the node.', example='1'),
      nodeName?: string(name='NodeName', description='The name of the host where the node resides.', example='ap-southeast-1.i-t4n4c4ryr0yr441d****'),
      nodePort?: string(name='NodePort', description='The port number of the node.', example='3000'),
      nodePreferredRole?: string(name='NodePreferredRole', description='The initial role of the node. Valid values:

*   **primary**: primary node
*   **mirror**: secondary node

If the value of this parameter is the same as that of **NodeRole**, no primary/secondary switchover occurs. If the value of this parameter is not the same as that of **NodeRole**, a primary/secondary switchover occurs.', example='primary'),
      nodeReplicationMode?: string(name='NodeReplicationMode', description='The data synchronization state of the node. Valid values:

*   **Synced**: The node data is synchronized.
*   **Not Syncing**: The node data is not synchronized.
*   **No sync required**: Data synchronization is not required. This value may be returned only for the coordinator node.', example='Synced'),
      nodeRole?: string(name='NodeRole', description='The current role of the node. Valid values:

*   **primary**: primary node
*   **mirror**: secondary node', example='primary'),
      nodeStatus?: string(name='NodeStatus', description='The running state of the node. Valid values:

*   **UP**: The node is running.
*   **DOWN**: The node is faulty.', example='UP'),
      nodeType?: string(name='NodeType', description='The type of the node. Valid values:

*   **master**: primary coordinator node
*   **slave**: standby coordinator node
*   **segment**: compute node', example='master'),
    }
  ](name='Items', description='Details of instance nodes.'),
  masterStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum', description='The number of abnormal nodes.', example='0'),
    normalNodeNum?: int32(name='NormalNodeNum', description='The number of normal nodes.', example='2'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum', description='The number of nodes whose roles are reversed.', example='0'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum', description='The number of unsynchronized nodes.', example='0'),
    preferredNodeNum?: int32(name='PreferredNodeNum', description='The number of nodes whose roles are normal.', example='2'),
    syncedNodeNum?: int32(name='SyncedNodeNum', description='The number of synchronized nodes.', example='1'),
  }(name='MasterStatusInfo', description='State statistics of the coordinator node.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='070534EC-78D5-5519-83CC-E7B1A9213483'),
  segmentStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum', description='The number of abnormal nodes.', example='0'),
    normalNodeNum?: int32(name='NormalNodeNum', description='The number of normal nodes.', example='4'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum', description='The number of nodes whose roles are reversed.', example='0'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum', description='The number of unsynchronized nodes.', example='4'),
    preferredNodeNum?: int32(name='PreferredNodeNum', description='The number of nodes whose roles are normal.', example='4'),
    syncedNodeNum?: int32(name='SyncedNodeNum', description='The number of synchronized nodes.', example='0'),
  }(name='SegmentStatusInfo', description='State statistics of compute nodes.'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='6'),
}

model DescribeDBInstanceDiagnosisSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceDiagnosisSummaryResponseBody(name='body'),
}

/**
  * You can call this operation to query the distribution and states of coordinator and compute nodes on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstanceDiagnosisSummary(request: DescribeDBInstanceDiagnosisSummaryRequest): DescribeDBInstanceDiagnosisSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceDiagnosisSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceErrorLogRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  database?: string(name='Database', description='The name of the database.', example='adbtest', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-04-25T06:59Z', position='Query'),
  host?: string(name='Host', description='This parameter is not supported in Alibaba Cloud public cloud.', example='null', position='Query'),
  keywords?: string(name='Keywords', description='One or more keywords that can be used to query error logs.', example='error', position='Query'),
  logLevel?: string(name='LogLevel', description='The level of the logs to query. Valid values:

*   **ALL**: queries all error logs.
*   **PANIC**: queries only abnormal-level logs.
*   **FATAL**: queries only critical-level logs.
*   **ERROR**: queries only error-level logs.', example='ALL', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-04-24T06:59Z', position='Query'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser', position='Query'),
}

model DescribeDBInstanceErrorLogResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='adbtest'),
      host?: string(name='Host', description='This parameter is not supported.', example='null'),
      logContext?: string(name='LogContext', description='The content of the error log.', example='unsupported frontend protocol 2689.28208: server supports 1.0 to 3.0'),
      logLevel?: string(name='LogLevel', description='The level of the queried log.', example='FATAL'),
      time?: long(name='Time', description='The time when the log was generated. The time is displayed in UTC.', example='2022-04-24 11:28:14'),
      user?: string(name='User', description='The name of the database account.', example='adbpguser'),
    }
  ](name='Items', description='Details of the error logs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeDBInstanceErrorLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceErrorLogResponseBody(name='body'),
}

/**
  * You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstanceErrorLog(request: DescribeDBInstanceErrorLogRequest): DescribeDBInstanceErrorLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceErrorLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceIPArrayListRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
}

model DescribeDBInstanceIPArrayListResponseBody = {
  items?: {
    DBInstanceIPArray?: [ 
    {
      DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute does not appear in the console.', example='hidden'),
      DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the IP address whitelist.', example='default'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses listed in the whitelist. You can add up to 1,000 IP addresses to the whitelist. Separate multiple IP addresses with commas (,). The IP addresses must use one of the following formats:

*   0.0.0.0/0
*   10.23.12.24. This is a standard IP address.
*   10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.', example='127.0.0.1'),
    }
  ](name='DBInstanceIPArray')
  }(name='Items', description='Details of the IP address whitelists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB7AA0BF-BE41-480E-A3DC-C97BF85A391B'),
}

model DescribeDBInstanceIPArrayListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceIPArrayListResponseBody(name='body'),
}

/**
  * You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceIPArrayList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceIndexUsageRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20', position='Query'),
}

model DescribeDBInstanceIndexUsageResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='adbtest'),
      indexDef?: string(name='IndexDef', description='The definition of the index.', example='CREATE INDEX idx1 ON schema1.tab1_ptr_2010'),
      indexName?: string(name='IndexName', description='The name of the index.', example='idx1'),
      indexScanTimes?: int32(name='IndexScanTimes', description='The number of index scans.', example='50000'),
      indexSize?: string(name='IndexSize', description='The size of the index. Unit: bytes.', example='10000'),
      isPartitionTable?: boolean(name='IsPartitionTable', description='Indicates whether the table is a partitioned table. Valid values:

*   **true**: The table is a partitioned table.
*   **false**: The table is not a partitioned table.', example='true'),
      parentTableName?: string(name='ParentTableName', description='The name of the parent table.', example='tab1'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema1'),
      tableName?: string(name='TableName', description='The name of the table.', example='tab1_ptr_2010'),
      timeLastUpdated?: string(name='TimeLastUpdated', description='The time when the table was last deleted, inserted, or updated.', example='2022-08-08T20:00:00Z'),
    }
  ](name='Items', description='Details of index usage.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeDBInstanceIndexUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceIndexUsageResponseBody(name='body'),
}

/**
  * Appropriate indexes can improve the database query speed. You can call this operation to query the details of index usage on an AnalyticDB for PostgreSQL instance.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstanceIndexUsage(request: DescribeDBInstanceIndexUsageRequest): DescribeDBInstanceIndexUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceIndexUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceNetInfoRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-xxxxxxxxxx', position='Query'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      addressType?: string(name='AddressType', description='The IP address type of the instance.', example='Intranet'),
      connectionString?: string(name='ConnectionString', description='The endpoint used to connect to the instance.', example='gp-xxxxxxx.gpdb.rds.aliyuncs.com'),
      IPAddress?: string(name='IPAddress', description='The IP address of the instance.', example='127.0.0.1'),
      IPType?: string(name='IPType', description='The type of IP address.

*   Valid values for instances in the classic network: Inner and Public
*   Valid values for instances in a virtual private cloud (VPC): Private and Public', example='Inner'),
      port?: string(name='Port', description='The port number used to connect to the instance.', example='3432'),
      VPCId?: string(name='VPCId', description='The ID of the VPC.', example='vpc-xxxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. Multiple IDs are separated by commas (,).', example='vsw-xxxxxxxx'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC.', example='vpc-xxxxxxx'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos', description='The connection information of the instance.'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. 

*   **VPC**: a virtual private cloud (VPC)
*   **Classic**: classic network', example='Classic'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceNetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancePerformanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-07-09T03:47Z', position='Query'),
  key: string(name='Key', description='The performance metric. Separate multiple values with commas (,). For more information, see [Performance parameters](~~86943~~).', example='CpuUsage,MemoryUsage,Gpdb_SpaceUsage,Gpdb_IOPS,Gpdb_session', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-07-08T03:47Z', position='Query'),
}

model DescribeDBInstancePerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end time of the query.', example='2022-07-09T03:47Z'),
  engine?: string(name='Engine', description='The database engine of the instance.', example='gpdb'),
  performanceKeys?: [ string ](name='PerformanceKeys', description='Details of the performance metrics. Format: {perf1, perf2, perf3, …}.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5E85244A-AB47-46A3-A3AD-5F307DCB407E'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2022-07-08T03:47Z'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancePerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancePlansRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  planCreateDate?: string(name='PlanCreateDate', description='The time used to filter plans. If you specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format, the plans created before this time are returned. The time must be in UTC. If you do not specify this parameter, all plans are returned.', example='2022-04-17T23:00Z', position='Query'),
  planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan', position='Query'),
  planId?: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234', position='Query'),
  planScheduleType?: string(name='PlanScheduleType', description='The execution mode of the plan. Valid values:

*   **Postpone**: The plan is executed later.
*   **Regular**: The plan is executed periodically.', example='Regular', position='Query'),
  planType?: string(name='PlanType', description='The type of the plan. Valid values:

*   **PauseResume**: pauses and resumes an instance.
*   **Resize**: scales an instance.', example='PauseResume', position='Query'),
}

model DescribeDBInstancePlansResponseBody = {
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  items?: {
    planList?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
      planConfig?: string(name='PlanConfig', description='The execution information of the plan.', example='{"pause":{"planCronTime":"0 22 * * 5"},"resume":{"planCronTime":"0 23 * * 5"}}'),
      planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan'),
      planEndDate?: string(name='PlanEndDate', description='The end time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  This parameter is returned only for periodically executed plans.', example='2023-04-17T23:00Z'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
      planName?: string(name='PlanName', description='The name of the plan.', example='test-plan'),
      planScheduleType?: string(name='PlanScheduleType', description='The execution mode of the plan. Valid values:

*   **Postpone**: The plan is executed later.
*   **Regular**: The plan is executed periodically.', example='Regular'),
      planStartDate?: string(name='PlanStartDate', description='The start time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  This parameter is returned only for periodically executed plans.', example='2022-04-17T23:00Z'),
      planStatus?: string(name='PlanStatus', description='The state of the plan. Valid values:

*   **active**: The plan is running.
*   **cancel**: The plan is canceled.
*   **deleted**: The plan is deleted.
*   **finished**: The plan execution is complete.', example='active'),
      planType?: string(name='PlanType', description='The type of the plan. Valid values:

*   **PauseResume**: pauses and resumes an instance.
*   **Resize**: scales an instance.', example='PauseResume'),
    }
  ](name='PlanList')
  }(name='Items', description='Details of the plans.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries.', example='1'),
}

model DescribeDBInstancePlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancePlansResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstancePlans(request: DescribeDBInstancePlansRequest): DescribeDBInstancePlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstancePlans', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****', position='Query'),
}

model DescribeDBInstanceSSLResponseBody = {
  certCommonName?: string(name='CertCommonName', description='The name of the SSL certificate.', example='*.gpdbmaster.xxx.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D5FF8636-37F6-4CE0-8002-F8734C62C686'),
  SSLEnabled?: boolean(name='SSLEnabled', description='Indicates whether SSL encryption is enabled.', example='true'),
  SSLExpiredTime?: string(name='SSLExpiredTime', description='The expiration time of the SSL certificate.', example='2023-08-05T09:05:53Z'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesRequest {
  DBInstanceCategories?: [ string ](name='DBInstanceCategories', description='The edition of the instance. Separate multiple values with commas (,). Valid values:

*   **basic**: Basic Edition
*   **highavailability**: High-availability Edition
*   **finance**: Enterprise Edition', shrink='simple', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****', position='Query'),
  DBInstanceIds?: string(name='DBInstanceIds', description='The ID of the instance. Separate multiple IDs with commas (,).', example='gp-bp12ga6v69h86****', position='Query'),
  DBInstanceModes?: [ string ](name='DBInstanceModes', description='The resource type of the instance. Separate multiple values with commas (,). Valid values:

*   **serverless**: Serverless mode
*   **storageelastic**: elastic storage mode
*   **classic**: reserved storage mode', shrink='simple', position='Query'),
  DBInstanceStatuses?: [ string ](name='DBInstanceStatuses', description='The state of the instance. Separate multiple values with commas (,). For more information, see [Instance statuses](~~86944~~).

>  The value of this parameter must be in lowercase.', shrink='simple', position='Query'),
  instanceDeployTypes?: [ string ](name='InstanceDeployTypes', description='This parameter is no longer used.', shrink='simple', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**
*   **Classic**

>  If you do not specify this parameter, instances of both network types are returned.', example='VPC', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.', example='test-key'),
      value?: string(name='Value', description='The value of tag N.', example='test-value'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model DescribeDBInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      connectionMode?: string(name='ConnectionMode', description='An invalid parameter. It is no longer returned when you call this operation.

You can call the [DescribeDBInstanceAttribute](~~86910~~) operation to query the access mode of an instance.', example='null'),
      createTime?: string(name='CreateTime', description='The time when the instance was created. The time is displayed in UTC.', example='2021-10-09T04:54:08Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', description='The edition of the instance. Valid values:

*   **Basic**: Basic Edition
*   **HighAvailability**: High-availability Edition
*   **Finance**: Enterprise Edition', example='HighAvailability'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
      DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **Serverless**: Serverless mode
*   **StorageElastic**: elastic storage mode
*   **Classic**: reserved storage mode', example='StorageElastic'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The type of the network interface card (NIC) that is used by the instance. Valid values:

*   **0**: Internet
*   **1**: internal network
*   **2**: VPC', example='2'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The state of the instance. For more information, see [Instance statuses](~~86944~~).', example='Running'),
      engine?: string(name='Engine', description='The database engine that the instance runs.', example='gpdb'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='6.0'),
      expireTime?: string(name='ExpireTime', description='The expiration time of the instance. The time is displayed in UTC.

>  For pay-as-you-go instances, `2999-09-08T16:00:00Z` is returned.', example='2999-09-08T16:00:00Z'),
      instanceDeployType?: string(name='InstanceDeployType', description='The resource type of the instance. Valid values:

*   **cluster**: elastic storage mode or Serverless mode
*   **replicaSet**: reserved storage mode', example='cluster'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**
*   **VPC**', example='VPC'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked due to instance expiration.
*   **LockByRestoration**: The instance is automatically locked due to instance restoration.
*   **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.
*   **LockReadInstanceByDiskQuota**: The instance is a read-only instance and is automatically locked due to exhausted storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the cluster is locked.

>  This parameter is returned only when the cluster is locked. The value is **instance_expire**.', example='0'),
      masterNodeNum?: int32(name='MasterNodeNum', description='The number of coordinator nodes.', example='1'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Postpaid'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
      segNodeNum?: string(name='SegNodeNum', description='The number of compute nodes.', example='4'),
      serverlessMode?: string(name='ServerlessMode', description='The type of the Serverless mode. Valid values:

*   **Manual**: manual scheduling
*   **Auto**: automatic scheduling

>  This parameter is returned only for instances in Serverless mode.', example='Manual'),
      storageSize?: string(name='StorageSize', description='The storage capacity. Unit: GB.', example='50'),
      storageType?: string(name='StorageType', description='The storage type of the instance. Valid values:

*   **cloud_essd**: enhanced SSD (ESSD)
*   **cloud_efficiency**: ultra disk', example='cloud_essd'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='test-key'),
          value?: string(name='Value', description='The value of the tag.', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the instance. Each tag is a key-value pair.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1cpq8mr64paltkb****'),
      vpcId?: string(name='VpcId', description='The ID of virtual private cloud (VPC).', example='vpc-bp19ame5m1r3oejns****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-h'),
    }
  ](name='DBInstance')
  }(name='Items', description='Details of the instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='53EA07B7-FC2A-521B-AB7C-27**********'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

/**
  * You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a specific region.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set. If you specify the BackupId parameter, the details of the backup set are returned.', example='327329803', position='Query'),
  backupMode?: string(name='BackupMode', description='The backup mode. Valid values:

*   Automated: automatic backup
*   Manual: manual backup

If you do not specify this parameter, the records of the backup sets in all modes are returned.', example='Automated', position='Query'),
  backupStatus?: string(name='BackupStatus', description='The status of the backup set. Valid values:

*   Success: The backup is complete.
*   Failed: The backup task fails.

If you do not specify this parameter, the records of the backup sets in all states are returned.', example='Success', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************', position='Query'),
  dataType?: string(name='DataType', description='The type of the backup. Valid values:

*   DATA: full backup
*   RESTOREPOI: point-in-time backup

If you do not specify this parameter, the records of the full backup set are returned.', example='DATA', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2011-06-01T16:00Z', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is larger than 0. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   30
*   50
*   100

Default value: 30.', example='30', minimum=30, maximum=100, position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2011-06-01T15:00Z', position='Query'),
}

model DescribeDataBackupsResponseBody = {
  items?: [ 
    {
      backupEndTime?: string(name='BackupEndTime', description='The UTC time when the backup ended. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.', example='2021-12-22T12:01:43Z'),
      backupEndTimeLocal?: string(name='BackupEndTimeLocal', description='The local time when the backup ended. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.', example='2021-12-22 20:00:25'),
      backupMode?: string(name='BackupMode', description='The backup mode.

Valid values for full backup:

*   Automated: automatic backup
*   Manual: manual backup

Valid values for point-in-time backup:

*   Automated: point-in-time backup after full backup
*   Manual: manual point-in-time backup
*   Period: point-in-time backup that is triggered by a backup policy', example='Automated'),
      backupSetId?: string(name='BackupSetId', description='The ID of the backup set.', example='1111111111'),
      backupSize?: long(name='BackupSize', description='The size of the backup file. Unit: bytes.', example='2167808'),
      backupStartTime?: string(name='BackupStartTime', description='The UTC time when the backup started. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.', example='2021-12-22T12:00:25Z'),
      backupStartTimeLocal?: string(name='BackupStartTimeLocal', description='The local time when the backup started. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.', example='2011-05-30 03:29:00'),
      backupStatus?: string(name='BackupStatus', description='The status of the backup set. Valid values:

*   Success
*   Failure', example='Success'),
      baksetName?: string(name='BaksetName', description='The name of a point-in-time backup set or the full backup set.', example='adbpgbackup_555*****_20211222200019'),
      consistentTime?: long(name='ConsistentTime', description='*   For full backup, this parameter indicates the point in time at which the data in the data backup file is consistent.
*   For point-in-time backup, this parameter indicates that the returned point in time is a timestamp.', example='1576506856'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp**************-master'),
      dataType?: string(name='DataType', description='The type of the backup. Valid values:

*   DATA: full backup
*   RESTOREPOI: point-in-time backup', example='DATA'),
    }
  ](name='Items', description='Details about the backup sets.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of backup sets on the page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3E387971-33A5-5019-AD7F-DC**********'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeDataBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataBackupsResponseBody(name='body'),
}

async function describeDataBackups(request: DescribeDataBackupsRequest): DescribeDataBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataReDistributeInfoRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDataReDistributeInfoResponseBody = {
  dataReDistributeInfo?: {
    message?: string(name='Message', example='redistributing'),
    progress?: long(name='Progress', example='33'),
    remainTime?: string(name='RemainTime', example='00:01:28'),
    startTime?: string(name='StartTime', example='null'),
    status?: string(name='Status', example='RUNNING'),
    type?: string(name='Type', example='immediate'),
  }(name='DataReDistributeInfo'),
  requestId?: string(name='RequestId', example='04836A02-ADC9-1AA7-AC36-DE5E048BF505'),
}

model DescribeDataReDistributeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataReDistributeInfoResponseBody(name='body'),
}

async function describeDataReDistributeInfo(request: DescribeDataReDistributeInfoRequest): DescribeDataReDistributeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataReDistributeInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataShareInstancesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: 30.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  searchValue?: string(name='SearchValue', description='The keyword used to filter instances, which can be an instance ID or instance description.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs and instance descriptions.', example='gp-bp***************', position='Query'),
}

model DescribeDataShareInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************'),
      DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **Serverless**: Serverless mode
*   **StorageElasic**: elastic storage mode
*   **Classic**: reserved storage mode', example='Serverless'),
      dataShareStatus?: string(name='DataShareStatus', description='The state of data sharing. Valid values:

*   **opening**: Data sharing is being enabled.
*   **opened**: Data sharing is enabled.
*   **closing**: Data sharing is being disabled.
*   **closed**: Data sharing is disabled.', example='opened'),
      description?: string(name='Description', description='The description of the instance.', example='gp-bp***************'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-j'),
    }
  ](name='DBInstance')
  }(name='Items', description='Details of the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D5**********'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeDataShareInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataShareInstancesResponseBody(name='body'),
}

/**
  * You can call this operation to query the state of data sharing for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDataShareInstances(request: DescribeDataShareInstancesRequest): DescribeDataShareInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataShareInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataSharePerformanceRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-08-03T15:10Z', position='Query'),
  key: string(name='Key', description='The name of the performance metric. Separate multiple values with commas (,). Valid values:

*   **adbpg_datashare_topic_count**: the number of shared topics.
*   **adbpg_datashare_data_size_mb**: the amount of data shared.', example='adbpg_datashare_topic_count', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-08-03T15:00Z', position='Query'),
}

model DescribeDataSharePerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end time of the query.', example='2022-08-03T15:10Z'),
  performanceKeys?: [ 
    {
      name?: string(name='Name', description='The name of the performance metric.', example='adbpg_datashare_topic_count'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the performance metric.', example='adbpg_datashare_topic_count'),
          values?: [ 
            {
              point?: [ string ](name='Point', description='The value of the performance metric at a point in time.'),
            }
          ](name='Values', description='One or more values of the performance metric.'),
        }
      ](name='Series', description='Details of the performance metric.'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='int'),
    }
  ](name='PerformanceKeys', description='Details of data sharing performance metrics.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBE00C04-A3E8-4114-881D-0480A72CB92E'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2022-08-03T15:00Z'),
}

model DescribeDataSharePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataSharePerformanceResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDataSharePerformance(request: DescribeDataSharePerformanceRequest): DescribeDataSharePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSharePerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisDimensionsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  databases?: [ string ](name='Databases', description='The name of the database.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9ADCAACA-E0E8-5319-AE3B-E260E957BDF9'),
  userNames?: [ string ](name='UserNames', description='The name of the database account.'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

/**
  * To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisDimensions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisMonitorPerformanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  database: string(name='Database', description='The name of the database.', example='adbtest', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-05-07T07:59Z', position='Query'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. Specify the value in the JSON format. Valid values:

*   `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.

*   `{"Type":"status","Value":"finished"}`: filters completed queries.

*   `{"Type":"status","Value":"running"}`: filters running queries.

*   `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min** and **Max**.

    *   If only **Min** is specified, the queries that consume a period of time that is greater than or equal to the Min value are filtered.
    *   If only **Max** is specified, the queries that consume a period of time that is less than the Max value are filtered.
    *   If both **Min** and **Max** are specified, the queries that consume a period of time that is greater than or equal to the **Min** value and less than the **Max** value are filtered.', example='{"Type":"maxCost", "Value":"100"}', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T06:59Z', position='Query'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser', position='Query'),
}

model DescribeDiagnosisMonitorPerformanceResponseBody = {
  performances?: [ 
    {
      cost?: int32(name='Cost', description='The execution duration of the query. Unit: milliseconds.', example='1'),
      database?: string(name='Database', description='The name of the database.', example='adbtest'),
      queryID?: string(name='QueryID', description='The ID of the query. It is a unique identifier of the query.', example='2022042612465401000000012903151998970'),
      startTime?: long(name='StartTime', description='The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1651877940000'),
      status?: string(name='Status', description='The execution state of the query. Valid values:

*   **running**: The query is being executed.
*   **finished**: The query is complete.', example='finished'),
      user?: string(name='User', description='The name of the database account.', example='adbpguser'),
    }
  ](name='Performances', description='Details of query execution.'),
  performancesThreshold?: int32(name='PerformancesThreshold', description='The threshold for the number of queries.', example='10000'),
  performancesTruncated?: boolean(name='PerformancesTruncated', description='Indicates whether the queries are truncated when the number of queries exceeds the threshold. Valid values:

*   **true**: The queries are truncated.
*   **false**: The queries are not truncated.', example='false'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeDiagnosisMonitorPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisMonitorPerformanceResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDiagnosisMonitorPerformance(request: DescribeDiagnosisMonitorPerformanceRequest): DescribeDiagnosisMonitorPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisMonitorPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  database: string(name='Database', description='The name of the database.', example='adbtest', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-05-07T07:59Z', position='Query'),
  keyword?: string(name='Keyword', description='The keyword of the SQL statement.', example='SELECT', position='Query'),
  order?: string(name='Order', description='The order of fields in the console. You do not need to specify this parameter.', example='null', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', position='Query'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. Specify the value in the JSON format. Valid values:

*   `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.

*   `{"Type":"status","Value":"finished"}`: filters completed queries.

*   `{"Type":"status","Value":"running"}`: filters running queries.

*   `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min** and **Max**.

    *   If only **Min** is specified, the queries that consume a period of time that is greater than or equal to the Min value are filtered.
    *   If only **Max** is specified, the queries that consume a period of time that is less than the Max value are filtered.
    *   If both **Min** and **Max** are specified, the queries that consume a period of time that is greater than or equal to the **Min** value and less than the **Max** value are filtered.', example='{ "Type":"maxCost", "Value":"100" }', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T06:59Z', position='Query'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser', position='Query'),
}

model DescribeDiagnosisRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='adbtest'),
      duration?: int32(name='Duration', description='The execution duration of the query. Unit: seconds.', example='1'),
      queryID?: string(name='QueryID', description='The ID of the query. It is a unique identifier of the query.', example='2022042612465401000000012903151998970'),
      SQLStmt?: string(name='SQLStmt', description='The SQL statement.', example='SELECT * FROM t1,t2 WHERE t1.id=t2.id;'),
      SQLTruncated?: boolean(name='SQLTruncated', description='Indicates whether the SQL statement needs to be truncated. Valid values:

*   **true**: The SQL statement needs to be truncated.
*   **false**: The SQL statement does not need to be truncated.', example='false'),
      SQLTruncatedThreshold?: int32(name='SQLTruncatedThreshold', description='The threshold used to determine whether an SQL statement must be truncated. The value is the number of characters.', example='5120'),
      sessionID?: string(name='SessionID', description='The ID of the session that contains the query.', example='50'),
      startTime?: long(name='StartTime', description='The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1651877940000'),
      status?: string(name='Status', description='The execution state of the query. Valid values:

*   **running**: The query is being executed.
*   **finished**: The query is complete.', example='finished'),
      user?: string(name='User', description='The name of the database account.', example='adbpguser'),
    }
  ](name='Items', description='Details of SQL queries.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosisSQLInfoRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  database: string(name='Database', description='The name of the database.', example='adbtest', position='Query'),
  queryID: string(name='QueryID', description='The ID of the query. It is a unique identifier of the query.

>  You can call the [DescribeDiagnosisRecords](~~450511~~) operation to query the query ID.', example='71403480878****', position='Query'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  duration?: int32(name='Duration', description='The execution duration of the query. Unit: seconds.', example='16'),
  maxOutputRows?: string(name='MaxOutputRows', description='The maximum number of output rows.', example='10'),
  queryID?: string(name='QueryID', description='The ID of the query.', example='71403480878****'),
  queryPlan?: string(name='QueryPlan', description='The information of the operator.', example='{\\"children\\":********\\"startTime\\":1660719602199}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='425AAA6A-63E0-1929-A1CE-3D9036CBC463'),
  SQLStmt?: string(name='SQLStmt', description='The SQL statement.', example='select n_live_tup, n_live_tup + n_dead_tup, pg_relation_size(table_name), last_vacuum from pg_stat_user_tables where relid = table_name::regclass'),
  sessionID?: string(name='SessionID', description='The ID of the session that contains the query.', example='658****'),
  sortedMetrics?: string(name='SortedMetrics', description='The sequence of metrics.', example='{\\"costSort\\":******:\\"Seq Scan-9\\",\\"value\\":0.0}]}'),
  startTime?: long(name='StartTime', description='The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1660719602199'),
  status?: string(name='Status', description='The execution state of the query. Valid values:

*   **running**: The query is being executed.
*   **finished**: The query execution is complete.', example='finished'),
  textPlan?: string(name='TextPlan', description='The information of the execution plan.', example='******'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of a specified query on an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosisSQLInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId', description='The ID of the download record.', example='1150'),
      downloadUrl?: string(name='DownloadUrl', description='The URL that can be used to download the file.', example='https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****'),
      exceptionMsg?: string(name='ExceptionMsg', description='The error message returned.', example='Error message'),
      fileName?: string(name='FileName', description='The name of the file.', example='20220509113448-20220509173448.csv'),
      status?: string(name='Status', description='The state of the upload task. After you call the DownloadDiagnosisRecords operation, query diagnostic information is first uploaded to Object Storage Service (OSS). After the upload task is complete, the query diagnostic information can be downloaded. Valid values:

*   **running**: uploading
*   **finished**: uploaded
*   **failed**: failed', example='finished'),
    }
  ](name='Records', description='Details of the download records.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

/**
  * You must call the [DownloadDiagnosisRecords](~~447700~~) operation to obtain a download record before you can call this operation to query and download the query diagnostic information.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDownloadSQLLogsRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-bp12ga6v69h86****', position='Query'),
}

model DescribeDownloadSQLLogsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId', example='1150'),
      downloadUrl?: string(name='DownloadUrl', example='https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****'),
      exceptionMsg?: string(name='ExceptionMsg', example='Error message'),
      fileName?: string(name='FileName', example='20220509113448-20220509173448.csv'),
      status?: string(name='Status', example='finished'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='FDE9942A-D919-527B-B559-5D0F6F20CCEC'),
}

model DescribeDownloadSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDownloadSQLLogsResponseBody(name='body'),
}

async function describeDownloadSQLLogs(request: DescribeDownloadSQLLogsRequest): DescribeDownloadSQLLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadSQLLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHealthStatusRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  key: string(name='Key', description='The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](~~86943~~).', example='node_master_status,node_master_connection_status,node_segment_connection_status,node_segment_disk_status', position='Query'),
}

model DescribeHealthStatusResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of instance.', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D97B4191-104D-10CE-8BC5-53**********'),
  status?: {
    adbgpSegmentDiskUsagePercentMax?: {
      status?: string(name='Status', description='The status corresponding to the maximum storage usage among all compute nodes. Valid values:

*   **critical**: The compute node storage usage is greater than or equal to 90%. In this case, the instance is locked.
*   **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%.
*   **healthy**: The compute node storage usage is less than 80%.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum compute node storage usage.

Unit: %.', example='1.52'),
    }(name='adbgp_segment_disk_usage_percent_max', description='The information of maximum compute node storage usage.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgConnectionStatus?: {
      status?: string(name='Status', description='The connection health status of the instance. Valid values:

*   **critical**: The instance connection usage is greater than 95%. In this case, this metric is marked in red in the console.
*   **warning**: The instance connection usage is greater than 90% and less than or equal to 95%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The instance connection usage is less than or equal to 90%. In this case, this metric is marked in green in the console.

>  The instance connection usage is the maximum connection usage among all the coordinator and compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance connection usage.

Unit: %.', example='1.71'),
    }(name='adbpg_connection_status', description='The information of instance connection health status.'),
    adbpgDiskStatus?: {
      status?: string(name='Status', description='The storage status of the instance. Valid values:

*   **critical**: The instance storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
*   **warning**: The instance storage usage is greater than or equal to 70% and less than 90%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The instance storage usage is less than 70%. In this case, this metric is marked in green in the console.

>  The instance storage usage is the average storage usage of all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance storage usage.

Unit: %.', example='1.52'),
    }(name='adbpg_disk_status', description='The information of instance storage status.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgDiskUsagePercent?: {
      status?: string(name='Status', description='The status corresponding to the storage usage of the instance. Valid values:

*   **critical**: The instance storage usage is greater than or equal to 90%. In this case, the instance is locked.
*   **warning**: The instance storage usage is greater than or equal to 70% and less than 90%.
*   **healthy**: The instance storage usage is less than 70%.

>  The instance storage usage is the average storage usage of all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance storage usage.

Unit: %.', example='1.52'),
    }(name='adbpg_disk_usage_percent', description='The information of instance storage usage.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgInstanceColdDataGb?: {
      value?: float(name='Value'),
    }(name='adbpg_instance_cold_data_gb'),
    adbpgInstanceHotDataGb?: {
      value?: float(name='Value'),
    }(name='adbpg_instance_hot_data_gb'),
    adbpgInstanceTotalDataGb?: {
      value?: float(name='Value'),
    }(name='adbpg_instance_total_data_gb'),
    adbpgMasterDiskUsagePercentMax?: {
      status?: string(name='Status', description='The status corresponding to the maximum storage usage of the coordinator node. Valid values:

*   **critical**: The coordinator node storage usage is greater than or equal to 90%. In this case, the instance is locked.
*   **warning**: The coordinator node storage usage is greater than or equal to 70% and less than 90%.
*   **healthy**: The coordinator node storage usage is less than 70%.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum coordinator node storage usage.

Unit: %.', example='1.34'),
    }(name='adbpg_master_disk_usage_percent_max', description='The information of maximum coordinator node storage usage.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgMasterStatus?: {
      status?: string(name='Status', description='The availability status of the coordinator node. Valid values:

*   **critical**: Both the primary and standby coordinator nodes are unavailable. In this case, this metric is marked in red in the console.
*   **warning**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in yellow in the console.
*   **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of coordinator node availability status. Valid values:', example='1'),
    }(name='adbpg_master_status', description='The information of coordinator node availability status.'),
    adbpgSegmentStatus?: {
      status?: string(name='Status', description='The availability status of compute nodes. Valid values:

*   **critical**: All the primary and secondary compute nodes are unavailable. In this case, this metric is marked in red in the console.
*   **warning**: Fifty percent or more than fifty percent of compute nodes are unavailable. In this case, this metric is marked in yellow in the console.
*   **healthy**: All compute nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of compute node availability status.', example='1'),
    }(name='adbpg_segment_status', description='The information of compute node availability status.'),
    adbpgStatus?: {
      status?: string(name='Status', description='The health status of the instance. Valid values:

*   **critical**: The coordinator node or a compute node is unavailable. In this case, this metric is marked in red in the console.
*   **healthy**: All nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance health status. Valid values:

*   **1**: healthy
*   **0**: critical', example='1'),
    }(name='adbpg_status', description='The information of instance health status.'),
    nodeMasterConnectionStatus?: {
      status?: string(name='Status', description='The connection health status of the coordinator node. Valid values:

*   **critical**: The coordinator node connection usage is greater than 95%. In this case, this metric is marked in red in the console.
*   **warning**: The coordinator node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The coordinator node connection usage is less than 90%. In this case, this metric is marked in green in the console.

>  The coordinator node connection usage is the maximum connection usage of the coordinator node.', example='healthy'),
      value?: float(name='Value', description='The metric value of coordinator node connection usage.

Unit: %.', example='1.71'),
    }(name='node_master_connection_status', description='The information of coordinator node connection health status.'),
    nodeMasterStatus?: {
      status?: string(name='Status', description='The health status of the coordinator node. Valid values:

*   **critical**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in red in the console.
*   **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of coordinator node health status. Valid values:

*   **1**: healthy
*   **0**: critical', example='1'),
    }(name='node_master_status', description='The information of coordinator node health status.'),
    nodeSegmentConnectionStatus?: {
      status?: string(name='Status', description='The connection health status of compute nodes. Valid values:

*   **critical**: The compute node connection usage is greater than or equal to 95%. In this case, this metric is marked in red in the console.
*   **warning**: The compute node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The compute node connection usage is less than 90%. In this case, this metric is marked in green in the console.

>  The compute node connection usage is the maximum connection usage among all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum compute node connection usage.

Unit: %.', example='0.48'),
    }(name='node_segment_connection_status', description='The information of compute node connection health status.'),
    nodeSegmentDiskStatus?: {
      status?: string(name='Status', description='The storage status of compute nodes. Valid values:

*   **critical**: The compute node storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
*   **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The compute node storage usage is less than 80%. In this case, this metric is marked in green in the console.

>  The compute node storage usage is the maximum storage usage among all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum compute node storage usage.

Unit: %.', example='1.52'),
    }(name='node_segment_disk_status', description='The information of compute node storage status.

>  This parameter value is returned only for instances in elastic storage mode.'),
  }(name='Status', description='The information of performance metrics. Each performance metric consists of the parameter name, status, and metric value. The metric information is returned only for the performance parameters specified by **Key**. For example, if you set **Key** to **adbpg_status**, only the metric information of **adbpg_status** is returned.

For more information about performance parameters, see [Performance parameters](~~86943~~).', example='{"node_master_connection_status":{"Status":"healthy","Value":1.6}}'),
}

model DescribeHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthStatusResponseBody(name='body'),
}

/**
  * This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeHealthStatus(request: DescribeHealthStatusRequest): DescribeHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHealthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogBackupsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2022-12-12T03:00Z', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', minimum=30, maximum=100, position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2022-12-12T02:00Z', position='Query'),
}

model DescribeLogBackupsResponseBody = {
  items?: [ 
    {
      backupId?: string(name='BackupId', description='The ID of the backup set.', example='12413721782'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the coordinator node.', example='gp-bp12ga6v69h86****-master'),
      logFileName?: string(name='LogFileName', description='The name of the log backup set that is stored in Object Storage Service (OSS).', example='000000010000000400000012'),
      logFileSize?: long(name='LogFileSize', description='The size of the log backup set. Unit: bytes.', example='77350'),
      logTime?: string(name='LogTime', description='The timestamp of the log.', example='2022-12-12T02:14:26Z'),
      segmentName?: string(name='SegmentName', description='The name of the compute node.', example='segment-0'),
    }
  ](name='Items', description='Details of the backup sets.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of backup sets on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='24B9FCAF-2CBC-51C3-B563-F1C70D750187'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='5'),
  totalLogSize?: long(name='TotalLogSize', description='The total size of logs in the time range. Unit: bytes.', example='386748'),
}

model DescribeLogBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogBackupsResponseBody(name='body'),
}

async function describeLogBackups(request: DescribeLogBackupsRequest): DescribeLogBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModifyParameterLogRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-xxxxxx', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2020-05-05T11:22:22Z', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2020-02-02T11:22:22Z', position='Query'),
}

model DescribeModifyParameterLogResponseBody = {
  changelogs?: [ 
    {
      effectTime?: string(name='EffectTime', description='The time when the configuration change takes effect.', example='2020-05-05T11:22:22Z'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='testkey'),
      parameterValid?: string(name='ParameterValid', description='Indicates whether the configuration change takes effect.', example='true'),
      parameterValueAfter?: string(name='ParameterValueAfter', description='The original value of the parameter.', example='100'),
      parameterValueBefore?: string(name='ParameterValueBefore', description='The new value of the parameter.', example='200'),
    }
  ](name='Changelogs', description='Details about the parameter reconfiguration logs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeModifyParameterLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModifyParameterLogResponseBody(name='body'),
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModifyParameterLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNamespaceRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword?: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  namespace: string(name='Namespace', example='mynamespace', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeNamespaceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  message?: string(name='Message', example='Successful'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespaceInfo?: map[string]string(name='NamespaceInfo'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DescribeNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespaceResponseBody(name='body'),
}

async function describeNamespace(request: DescribeNamespaceRequest): DescribeNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParametersRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      currentValue?: string(name='CurrentValue', description='The current value of the parameter.', example='10800000'),
      forceRestartInstance?: string(name='ForceRestartInstance', description='Indicates whether a restart is required for parameter modifications to take effect. Valid values:

*   **true**
*   **false**', example='false'),
      isChangeableConfig?: string(name='IsChangeableConfig', description='Indicates whether the parameter can be modified. Valid values:

*   **true**
*   **false**', example='true'),
      optionalRange?: string(name='OptionalRange', description='The valid values of the parameter.', example='[0-2147483647]'),
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='Sets the maximum allowed duration of any statement, A value of 0 turns off the timeout.'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='statement_timeout'),
      parameterValue?: string(name='ParameterValue', description='The default value of the parameter.', example='10800000'),
    }
  ](name='Parameters', description='Details of the parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='62506167-D284-562A-B7C2-0A**********'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

/**
  * This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsVSwitchsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list and zone list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of virtual private cloud (VPC).

> *   You can call the [DescribeRdsVpcs](~~208327~~) operation to query the available VPCs.
> *   This parameter is required.', example='vpc-bp*******************', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list and zone list.', example='cn-hangzhou-h', position='Query'),
}

model DescribeRdsVSwitchsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0BA251D-6854-5A99-A964-3C**********'),
  vSwitches?: {
    vSwitch?: [ 
      {
        aliUid?: string(name='AliUid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        bid?: string(name='Bid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        cidrBlock?: string(name='CidrBlock', description='The CIDR block of the vSwitch.', example='192.**.**.0/24'),
        gmtCreate?: string(name='GmtCreate', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        gmtModified?: string(name='GmtModified', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**
*   **false**', example='false'),
        izNo?: string(name='IzNo', description='The ID of the zone.', example='cn-hangzhou-h'),
        regionNo?: string(name='RegionNo', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        status?: string(name='Status', description='The state of the vSwitch. If **Available** is returned, the vSwitch is available.', example='Available'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp*******************'),
        vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='vsw-name'),
      }
    ](name='VSwitch', description='Details of the vSwitch.'),
  }(name='VSwitches', description='Details of the vSwitches.'),
}

model DescribeRdsVSwitchsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsVSwitchsResponseBody(name='body'),
}

/**
  * When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeRdsVSwitchs(request: DescribeRdsVSwitchsRequest): DescribeRdsVSwitchsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsVSwitchs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsVpcsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h', position='Query'),
}

model DescribeRdsVpcsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='53924AF0-1628-5AA2-9C95-D4**********'),
  vpcs?: {
    vpc?: [ 
      {
        aliUid?: string(name='AliUid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        bid?: string(name='Bid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        cidrBlock?: string(name='CidrBlock', description='The CIDR block of the VPC.', example='10.**.**.0/8'),
        gmtCreate?: string(name='GmtCreate', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        gmtModified?: string(name='GmtModified', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the VPC is the default VPC. Valid values:

*   **true**
*   **false**', example='true'),
        regionNo?: string(name='RegionNo', description='The ID of the region.', example='cn-hangzhou'),
        status?: string(name='Status', description='The state of the VPC. If **Available** is returned, the VPC is available.', example='Available'),
        vSwitchs?: [ 
          {
            cidrBlock?: string(name='CidrBlock', description='The CIDR block of the vSwitch.', example='10.**.**.0/24'),
            gmtCreate?: string(name='GmtCreate', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
            gmtModified?: string(name='GmtModified', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
            isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**
*   **false**', example='true'),
            izNo?: string(name='IzNo', description='The ID of the zone to which the vSwitch belongs.', example='cn-hangzhou-i'),
            status?: string(name='Status', description='The state of the vSwitch. If **Available** is returned, the vSwitch is available.', example='Available'),
            vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp*******************'),
            vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='vsw-name'),
          }
        ](name='VSwitchs', description='Details of the vSwitches.'),
        vpcId?: string(name='VpcId', description='The ID of VPC.', example='vpc-bp*******************'),
        vpcName?: string(name='VpcName', description='The name of the VPC.', example='vpc-name'),
      }
    ](name='Vpc', description='Details of the VPC.'),
  }(name='Vpcs', description='Details of the VPCs.'),
}

model DescribeRdsVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsVpcsResponseBody(name='body'),
}

/**
  * When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeRdsVpcs(request: DescribeRdsVpcsRequest): DescribeRdsVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsVpcs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  region?: string(name='Region', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', description='Indicates whether Virtual Private Cloud (VPC) is available.

*   **true**: VPC is available.
*   **false**: VPC is unavailable.', example='true'),
          zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-c'),
        }
      ](name='Zone')
      }(name='Zones', description='Details of the zones.'),
    }
  ](name='Region')
  }(name='Regions', description='Details of the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FF8EB261-5447-4B1B-9F14-294CEA008A9F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

/**
  * Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLLogCountRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-xxxxxxxx', position='Query'),
  database?: string(name='Database', description='The name of the database.', example='testdb', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.

>  The end time must be later than the start time. Their interval cannot be more than seven days.', example='2020-12-14T11:22Z', position='Query'),
  executeCost?: string(name='ExecuteCost', description='The execution duration of the query. Unit: seconds.', example='100', position='Query'),
  executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success', position='Query'),
  maxExecuteCost?: string(name='MaxExecuteCost', description='The maximum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.', example='1000', position='Query'),
  minExecuteCost?: string(name='MinExecuteCost', description='The minimum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.', example='10', position='Query'),
  operationClass?: string(name='OperationClass', description='The type of the query language. Valid values:

*   **DQL**
*   **DML**
*   **DDL**
*   **DCL**
*   **TCL**', example='DQL', position='Query'),
  operationType?: string(name='OperationType', description='The type of the SQL statement.

> *   If the **OperationClass** parameter is specified, the **OperationType** value must belong to the corresponding query language. For example, if the **OperationClass** value is **DQL**, the **OperationType** value must be a **DQL** SQL statement such as **SELECT**.
>*   If the **OperationClass** parameter is not specified, the **OperationType** value can be an SQL statement of all query languages.
>*   If neither of the **OperationClass** and **OperationType** parameters is specified, all types of SQL statements are returned.', example='SELECT', position='Query'),
  queryKeywords?: string(name='QueryKeywords', description='The keywords used to query.', example='test', position='Query'),
  sourceIP?: string(name='SourceIP', description='The source IP address.', example='10.**.**.13', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2020-12-12T11:22Z', position='Query'),
  user?: string(name='User', description='The username that is used to log on to the database.', example='adbpgadmin', position='Query'),
}

model DescribeSQLLogCountResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the instance.', example='gp-xxxxxxxx'),
  endTime?: string(name='EndTime', description='The end time of the query.', example='2020-12-14T11:22Z'),
  items?: [ 
    {
      name?: string(name='Name', description='The name of the table.', example='gp-xxxxxxxx'),
      series?: [ 
        {
          values?: [ 
            {
              point?: [ string ](name='Point', description='The time when the audit logs were generated and the number of the audit logs.'),
            }
          ](name='Values', description='Details of the audit logs.'),
        }
      ](name='Series', description='Details of the audit logs.'),
    }
  ](name='Items', description='Details of the audit logs of the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7565770E-7C45-462D-BA4A-8A**********'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2020-12-12T11:22Z'),
}

model DescribeSQLLogCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogCountResponseBody(name='body'),
}

async function describeSQLLogCount(request: DescribeSQLLogCountRequest): DescribeSQLLogCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLLogCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSQLLogsV2Request {
  DBInstanceId: string(name='DBInstanceId', description='The ID of instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-xxxxxxxx', position='Query'),
  database?: string(name='Database', description='The name of the database.', example='adbpgadmin', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

>  The end time must be later than the start time. The interval cannot be more than 24 hours.', example='2022-03-17T06:30Z', position='Query'),
  executeCost?: string(name='ExecuteCost', description='The execution duration of the query. Unit: seconds.', example='1', position='Query'),
  executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success', position='Query'),
  maxExecuteCost?: string(name='MaxExecuteCost', description='The maximum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.', example='1000', position='Query'),
  minExecuteCost?: string(name='MinExecuteCost', description='The minimum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.', example='1', position='Query'),
  operationClass?: string(name='OperationClass', description='The type of the query language. Valid values:

*   **DQL**
*   **DML**
*   **DDL**
*   **DCL**
*   **TCL**', example='DQL', position='Query'),
  operationType?: string(name='OperationType', description='The type of the SQL statement.

> *   If the **OperationClass** parameter is specified, the **OperationType** value must belong to the corresponding query language. For example, if the **OperationClass** value is **DQL**, the **OperationType** value must be a **DQL** SQL statement such as **SELECT**.
>*   If the **OperationClass** parameter is not specified, the **OperationType** value can be an SQL statement of all query languages.
>*   If neither of the **OperationClass** and **OperationType** parameters is specified, all types of SQL statements are returned.', example='SELECT', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of entries to return on each page.', example='10', position='Query'),
  pageSize?: string(name='PageSize', description='The number of the page to return. The maximum value is 200.', example='1', position='Query'),
  queryKeywords?: string(name='QueryKeywords', description='The keywords of the SQL statement.', example='select 1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.XX.XX.90', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.', example='2022-03-10T06:30Z', position='Query'),
  user?: string(name='User', description='The name of the database account.', example='testadmin', position='Query'),
}

model DescribeSQLLogsV2ResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', description='The database account that executes the SQL statement.', example='testadmin'),
      DBName?: string(name='DBName', description='The name of the database.', example='adbpgadmin'),
      DBRole?: string(name='DBRole', description='The role of the database.', example='master'),
      executeCost?: float(name='ExecuteCost', description='The execution duration of the query.', example='2'),
      executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success'),
      operationClass?: string(name='OperationClass', description='The type of the query language.', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', description='The time when the SQL statement was executed.', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', description='The type of the SQL statement.', example='SELECT'),
      returnRowCounts?: long(name='ReturnRowCounts', description='The number of entries returned.', example='1'),
      SQLText?: string(name='SQLText', description='The SQL statement.', example='select 1'),
      scanRowCounts?: long(name='ScanRowCounts', description='The number of entries scanned.', example='1'),
      sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.**.**.90'),
      sourcePort?: int32(name='SourcePort', description='The number of the source port.', example='50514'),
    }
  ](name='Items', description='Details of the SQL logs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7941C94-B92F-46A0-BD3E-2D**********'),
}

model DescribeSQLLogsV2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeSQLLogsV2ResponseBody(name='body'),
}

/**
  * You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeSQLLogsV2(request: DescribeSQLLogsV2Request): DescribeSQLLogsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSQLLogsV2', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSampleDataRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if an error occurs. This message does not affect the execution of the operation.', example='******'),
  hasSampleData?: boolean(name='HasSampleData', description='Indicates whether a sample dataset is loaded to the instance. Valid values:

*   **true**: A sample dataset is loaded.
*   **false**: No sample dataset is loaded.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='84CD7CAF-FA7B-5178-B19F-D8CDE307D5FA_8111'),
}

model DescribeSampleDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSampleDataResponseBody(name='body'),
}

/**
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeSampleData(request: DescribeSampleDataRequest): DescribeSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSampleData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupportFeaturesRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeSupportFeaturesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='63E5BE60-91FF-57F1-B873-7F1EB734B93D_2724'),
  supportFeatureList?: string(name='SupportFeatureList', description='The features supported by the instance. Valid values:

*   sample_data: sample dataset. For more information, see [Sample dataset](~~452278~~).
*   diagnose_and_optimize: diagnostics and optimization. For more information, see [Diagnostics and optimization](~~323453~~).', example='[ "sample_data", "diagnose_and_optimize" ]'),
}

model DescribeSupportFeaturesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportFeaturesResponseBody(name='body'),
}

async function describeSupportFeatures(request: DescribeSupportFeaturesRequest): DescribeSupportFeaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportFeatures', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **instance**.', example='instance', position='Query'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A29EC547-B392-4340-AA4F-7C0A7B626E74'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='user'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='test'),
    }
  ](name='Tags', description='Details of the tags.'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserEncryptionKeyListRequest {
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of KMS keys to return on each page. Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='ap-southeast-1', position='Query'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  kmsKeys?: [ 
    {
      keyId?: string(name='KeyId', description='The ID of the KMS key.', example='0b8b1825-fd99-418f-875e-e4dec1dd8715'),
    }
  ](name='KmsKeys', description='Details about the KMS keys.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserEncryptionKeyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWaitingSQLInfoRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  database: string(name='Database', description='The name of the database.', example='test', position='Query'),
  PID: string(name='PID', description='The ID of the process that uniquely identifies the query.

>  You can call the [DescribeWaitingSQLRecords](~~461735~~) operation to obtain the process IDs of lock-waiting queries.', example='100', position='Query'),
}

model DescribeWaitingSQLInfoResponseBody = {
  database?: string(name='Database', description='The name of the database.', example='test'),
  items?: [ 
    {
      application?: string(name='Application', description='The application that sent the query.', example='DataGrip 2022.1.5'),
      blockedByApplication?: string(name='BlockedByApplication', description='The application that sent the blocking query.', example='DataGrip 2022.1.5'),
      blockedByPID?: string(name='BlockedByPID', description='The process ID of the blocking query.', example='110'),
      blockedBySQLStmt?: string(name='BlockedBySQLStmt', description='The SQL statement of the blocking query.', example='Select * from t1;'),
      blockedByUser?: string(name='BlockedByUser', description='The database account that is used to perform the blocking query.', example='testUser1'),
      grantLocks?: string(name='GrantLocks', description='The authorized locks.', example='ShareLock,AccessExclusiveLock'),
      notGrantLocks?: string(name='NotGrantLocks', description='The unauthorized locks.', example='AccessShareLock'),
      PID?: string(name='PID', description='The ID of the process that uniquely identifies the query.', example='100'),
      SQLStmt?: string(name='SQLStmt', description='The SQL statement of the query.', example='Select * from t1,t2 where t1.id=t2.id;'),
      user?: string(name='User', description='The database account that is used to perform the query.', example='testUser'),
    }
  ](name='Items', description='Details of the lock-waiting query.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeWaitingSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWaitingSQLInfoResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeWaitingSQLInfo(request: DescribeWaitingSQLInfoRequest): DescribeWaitingSQLInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWaitingSQLInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWaitingSQLRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  database: string(name='Database', description='The name of the database.', example='test', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.

If this parameter is not specified, all lock diagnostics records that are generated after the query start time are returned. If the query start time is not specified either, all lock diagnostics records are returned.', example='2022-08-20T07:59Z', position='Query'),
  keyword?: string(name='Keyword', description='The keyword used to filter queries.', example='table', position='Query'),
  order?: string(name='Order', description='The field used to sort lock diagnostics records and the sorting order.

Default value: `{"Field":"StartTime","Type":"Desc"}`, which indicates that lock diagnostics records are sorted by the start time in descending order. No other values are supported.', example='{"Field":"StartTime","Type":"Desc"}', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30', position='Query'),
  queryCondition: string(name='QueryCondition', description='The filter condition on queries. Valid values:

*   `{"Type":"maxCost","Value":"10"}`: filters the top 10 longest-waiting queries.
*   `{"Type":"status","Value":"LockWaiting"}`: filters lock-waiting queries.
*   `{"Type":"status","Value":"ResourceWaiting"}`: filters resource-waiting queries.', example='{"Type":"maxCost","Value":"10"}', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

If this parameter is not specified, all lock diagnostics records that are generated before the query end time are returned. If the query end time is not specified either, all lock diagnostics records are returned.', example='2022-08-15T06:59Z', position='Query'),
  user?: string(name='User', description='The name of the database account. If this parameter is not specified, the lock diagnostics records of all database accounts are queried.', example='testUser', position='Query'),
}

model DescribeWaitingSQLRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='test'),
      PID?: string(name='PID', description='The ID of the process that uniquely identifies the query.', example='100'),
      SQLStmt?: string(name='SQLStmt', description='The SQL statement of the query.', example='Select * from t1,t2 where t1.id=t2.id;'),
      sessionID?: string(name='SessionID', description='The ID of the session that contains the query.', example='50'),
      startTime?: long(name='StartTime', description='The start time of the query. This value is in the timestamp format. Unit: milliseconds.', example='1660902033374'),
      status?: string(name='Status', description='The waiting state of the query. Valid values:

*   **LockWaiting**
*   **ResourceWaiting**', example='LockWaiting'),
      user?: string(name='User', description='The database account that is used to perform the query.', example='testUser'),
      waitingTime?: long(name='WaitingTime', description='The waiting period of the query. Unit: milliseconds.', example='26911000'),
    }
  ](name='Items', description='The list of lock diagnostics records.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeWaitingSQLRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWaitingSQLRecordsResponseBody(name='body'),
}

/**
  * You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeWaitingSQLRecords(request: DescribeWaitingSQLRecordsRequest): DescribeWaitingSQLRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWaitingSQLRecords', 'POST', '/', 'json', false, 'json', request);
}

model DownloadDiagnosisRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  database: string(name='Database', description='The name of the database.', example='adbtest', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T07:59Z', position='Query'),
  lang?: string(name='Lang', description='The language of the file that contains the query diagnostic information. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: traditional Chinese', example='zh', position='Query'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. The value is in the JSON format. Valid values:

*   `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
*   `{"Type":"status","Value":"finished"}`: filters completed queries.
*   `{"Type":"status","Value":"running"}`: filters running queries.
*   `{"Type":"cost","Max":"200"}`: filters the queries that consume less than 200 milliseconds.
*   `{"Type":"cost","Min":"200","Max":"60000"}`: filters the queries that consume 200 milliseconds or more and less than 1 minute.
*   `{"Type":"cost","Min":"60000"}`: filters the queries that consume 1 minute or more.
*   `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min** and **Max**.', example='{ "Type":"maxCost", "Value":"100" }', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T06:59Z', position='Query'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser', position='Query'),
}

model DownloadDiagnosisRecordsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  downloadId?: string(name='DownloadId', description='The ID of the download task.', example='11'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

/**
  * You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](~~447712~~) operation to query download records and download URLs.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadDiagnosisRecords', 'POST', '/', 'json', false, 'json', request);
}

model DownloadSQLLogsRecordsRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-bp12ga6v69h86****', position='Query'),
  database?: string(name='Database', example='testdb', position='Query'),
  endTime: string(name='EndTime', example='2023-05-08T06:59Z', position='Query'),
  executeCost?: string(name='ExecuteCost', example='1', position='Query'),
  executeState?: string(name='ExecuteState', example='success', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  maxExecuteCost?: string(name='MaxExecuteCost', example='999', position='Query'),
  minExecuteCost?: string(name='MinExecuteCost', example='1', position='Query'),
  operationClass?: string(name='OperationClass', example='DQL', position='Query'),
  operationType?: string(name='OperationType', example='SELECT', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='30', minimum=0, maximum=200, position='Query'),
  queryKeywords?: string(name='QueryKeywords', example='select 1', position='Query'),
  sourceIP?: string(name='SourceIP', example='100.XX.XX.90', position='Query'),
  startTime: string(name='StartTime', example='2023-05-07T06:59Z', position='Query'),
  user?: string(name='User', position='Query'),
}

model DownloadSQLLogsRecordsResponseBody = {
  downloadId?: long(name='DownloadId', example='11'),
  requestId?: string(name='RequestId', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DownloadSQLLogsRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadSQLLogsRecordsResponseBody(name='body'),
}

async function downloadSQLLogsRecords(request: DownloadSQLLogsRecordsRequest): DownloadSQLLogsRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadSQLLogsRecords', 'POST', '/', 'json', false, 'json', request);
}

model GrantCollectionRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  grantToNamespace: string(name='GrantToNamespace', example='othernamespace', position='Query'),
  grantType: string(name='GrantType', example='rw', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GrantCollectionResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model GrantCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantCollectionResponseBody(name='body'),
}

async function grantCollection(request: GrantCollectionRequest): GrantCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantCollection', 'POST', '/', 'json', false, 'json', request);
}

model ListCollectionsRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword: string(name='NamespacePassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListCollectionsResponseBody = {
  collections?: {
    collection?: [ string ](name='Collection')
  }(name='Collections'),
  count?: int32(name='Count', example='1'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  message?: string(name='Message', example='Successful'),
  namespace?: string(name='Namespace', example='mynamespace'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model ListCollectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCollectionsResponseBody(name='body'),
}

async function listCollections(request: ListCollectionsRequest): ListCollectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCollections', 'POST', '/', 'json', false, 'json', request);
}

model ListNamespacesRequest {
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  managerAccount: string(name='ManagerAccount', example='testaccount', position='Query'),
  managerAccountPassword: string(name='ManagerAccountPassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListNamespacesResponseBody = {
  count?: int32(name='Count', example='1'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  message?: string(name='Message', example='Successful'),
  namespaces?: {
    namespace?: [ string ](name='Namespace')
  }(name='Namespaces'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model ListNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNamespacesResponseBody(name='body'),
}

async function listNamespaces(request: ListNamespacesRequest): ListNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNamespaces', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The ID of instance N. Valid values of N: 1 to 50.', example='gp-xxxxxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The storage mode of the instance. Valid values:

*   `instance`: reserved storage mode
*   `ALIYUN::GPDB::INSTANCE`: elastic storage mode', example='instance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. The key must be 1 to 128 characters in length. Valid values of N: 1 to 20.

You can use `Tag.N.Key and Tag.N.Value` to query AnalyticDB for PostgreSQL instances to which specific tags are bound.

*   If you specify only `Tag.N.Key`, the instances whose tags contain the specified tag keys are returned.
*   If you specify only `Tag.N.Value`, `InvalidParameter.TagValue` is returned.
*   If you specify multiple tag key-value pairs at a time, the instances to which all the specified tags are bound are returned.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. The value must be 1 to 128 characters in length. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-23757A20B5F8'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the instance.', example='gp-xxxxxxxxxx'),
      resourceType?: string(name='ResourceType', description='The storage mode of the instance.', example='instance'),
      tagKey?: string(name='TagKey', description='The tag key.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value.', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources', description='Details about the instances and tags, including the instance IDs, instance modes, and tag key-value pairs.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', description='The description of the account. The description must meet the following requirements:

*   The description must start with a letter.
*   The description can contain letters, digits, underscores (\\_), and hyphens (-).
*   The description cannot start with `http://` or `https://`.
*   The description must be 2 to 256 characters in length.', example='testAccoutdescribe', position='Query'),
  accountName: string(name='AccountName', description='The name of the database account.

> You can call the [DescribeAccounts](~~~~) operation to query the information about database accounts in a cluster, including the database account name.', example='testAccout', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='99BBBD5E-B5D8-4FC8-B8BF-FB1A0A38BBA2'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The number of days for which data backup files are retained. Default value: 7. Maximum value: 7. Valid values: 1 to 7.', example='7', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************', position='Query'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint', description='Specifies whether to enable automatic point-in-time backup.

*   true
*   false

Default value: true.', example='true', position='Query'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The cycle based on which you want to perform a backup. Separate multiple values with commas (,). Valid values:

*   Monday
*   Tuesday
*   Wednesday
*   Thursday
*   Friday
*   Saturday
*   Sunday', example='Tuesday, Thursday, Saturday', position='Query'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The backup window. Specify the backup window in the HH:mmZ-HH:mmZ format. The backup window must be in UTC. Default value: 00:00-01:00.', example='15:00Z-16:00Z', position='Query'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod', description='The frequency of point-in-time backup.

*   1: per hour
*   2: per 2 hours
*   4: per 4 hours
*   8: per 8 hours

Default value: 8.', example='8', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DA147739-AEAD-4417-9089-65**********'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConfigRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  idleTime?: int32(name='IdleTime', description='The wait period for the instance that has no traffic to become idle. Minimum value: 60. Default value: 600. Unit: seconds.', example='600', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  serverlessResource?: int32(name='ServerlessResource', description='The threshold of computing resources. Valid values: 8 to 32. Unit: AnalyticDB Compute Units (ACUs).', example='32', position='Query'),
}

model ModifyDBInstanceConfigResponseBody = {
  dbInstanceId?: string(name='DbInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the operation fails.', example='\\"error message\\"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34B32A0A-08EF-4A87-B6BE-CDD9F56FC3AD'),
  status?: boolean(name='Status', description='The state of the operation. Valid values:

*   **0**: The operation failed.
*   **1**: The operation is successful.', example='1'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The new endpoint of the instance.', example='gp-test', position='Query'),
  currentConnectionString: string(name='CurrentConnectionString', description='The original endpoint of the instance.', example='gp-t4n2qg19bnn98****-master.gpdb.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-t4n2qg19bnn98****', position='Query'),
  port: string(name='Port', description='The new port number of the instance.', example='5432', position='Query'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='29B0BF34-D069-4495-92C7-FA6D94528A9E'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription: string(name='DBInstanceDescription', description='The description of the instance.

The description must be 2 to 256 characters in length. It cannot start with http:// or https://.', example='test', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='107BE202-D1A2-479E-98E0-A8**********'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

/**
  * To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceMaintainTimeRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
  endTime: string(name='EndTime', description='The end time of the maintenance window. The end time must be later than the start time. Specify the time in the HH:mmZ format. The time must be in UTC.', example='03:00Z', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  startTime: string(name='StartTime', description='The start time of the maintenance window. Specify the time in the HH:mmZ format. The time must be in UTC.', example='02:00Z', position='Query'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA9A34C8-AC95-413B-AC6A-CE**********'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

/**
  * The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceResourceGroupRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to move the instance. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4b****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBInstanceResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBInstanceResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceResourceGroupResponseBody(name='body'),
}

/**
  * Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](~~94475~~)
  *
 */
async function modifyDBInstanceResourceGroup(request: ModifyDBInstanceResourceGroupRequest): ModifyDBInstanceResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceSSLRequest {
  connectionString?: string(name='ConnectionString', description='The encrypted endpoint. By default, the wildcards are used for instances that are hosted on ECS instances. This way, the endpoints that can be resolved to the same IP address are encrypted.', example='gp-xxxxxxxxxxx-master.gpdbmaster.singapore.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-xxxxxxxxxxx', position='Query'),
  SSLEnabled: int32(name='SSLEnabled', description='The status of SSL encryption. Valid values:

*   0: disables SSL encryption.
*   1: enables SSL encryption.
*   2: updates SSL encryption.', example='1', position='Query'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADD6EA90-EECB-4C12-9F26-0B6DB58710EF'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParametersRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************', position='Query'),
  forceRestartInstance?: boolean(name='ForceRestartInstance', description='Specifies whether to forcibly restart the instance. Valid values:

*   **true**
*   **false**', example='false', position='Query'),
  parameters: string(name='Parameters', description='The name and value of the parameter to be modified. Specify the parameter in the `<Parameter name>:<Parameter value>` format.

You can call the [DescribeParameters](~~208310~~) operation to query the parameters that can be modified.', example='{"statement_timeout":"11800010"}', position='Query'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3FE698B6-6579-547C-A403-07**********'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParametersResponseBody(name='body'),
}

/**
  * This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameters', 'POST', '/', 'json', false, 'json', request);
}

model ModifySQLCollectorPolicyRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-xxxxxxxx', position='Query'),
  SQLCollectorStatus: string(name='SQLCollectorStatus', description='Specifies whether to enable or disable SQL collection.

*   Enable: enables SQL collection.
*   Disabled: disables SQL collection.', example='Enable', position='Query'),
}

model ModifySQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FA1F1D1-50A6-4F60-9A78-5752F2076A53'),
}

model ModifySQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySQLCollectorPolicyResponseBody(name='body'),
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySQLCollectorPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIpsRequest {
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute does not appear in the console.', example='hidden', position='Query'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the whitelist. If you do not enter a name, IP addresses are added to the default whitelist.

>  You can create up to 50 whitelists for an instance.', example='default', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  modifyMode?: string(name='ModifyMode', description='The method of modification. Valid values:

*   **Cover**: overwrites the whitelist.
*   **Append**: appends data to the whitelist.
*   **Delete**: deletes the whitelist.', example='0', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  securityIPList: string(name='SecurityIPList', description='The IP addresses listed in the whitelist. You can add up to 1,000 IP addresses to the whitelist. Separate multiple IP addresses with commas (,). The IP addresses must use one of the following formats:

*   0.0.0.0/0
*   10.23.12.24. This is a standard IP address.
*   10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.', example='10.10.**.**', position='Query'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='871C698F-B43D-4D1D-ACD6-DF56B0F89978'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

/**
  * To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVectorConfigurationRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  vectorConfigurationStatus?: string(name='VectorConfigurationStatus', description='Specifies whether to enable vector engine optimization. Valid values:

*   **enabled**
*   **disabled**

> *   We recommend that you **do not enable** vector engine optimization in mainstream analysis and real-time data warehousing scenarios.
> *   We recommend that you **enable** vector engine optimization in AI Generated Content (AIGC) and vector retrieval scenarios that require the vector analysis engine.', example='enabled', position='Query'),
}

model ModifyVectorConfigurationResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.

This parameter is returned only if the request fails.', example='Failed to modify vector configuration.'),
  requestId?: string(name='RequestId', description='The request ID.', example='107BE202-D1A2-479E-98E0-A8**********'),
  status?: boolean(name='Status', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ModifyVectorConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVectorConfigurationResponseBody(name='body'),
}

async function modifyVectorConfiguration(request: ModifyVectorConfigurationRequest): ModifyVectorConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVectorConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model PauseInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model PauseInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only if **false** is returned for the **Status** parameter.', example='*******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9********'),
  status?: boolean(name='Status', description='Indicates whether the request was successful. Valid values:

*   **false**: The request failed.
*   **true**: The request was successful.', example='true'),
}

model PauseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: PauseInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running** state.
  * This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryCollectionDataRequest {
  collection: string(name='Collection', example='document', position='Query'),
  content?: string(name='Content', example='hello_world', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  filter?: string(name='Filter', example='response > 200', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword: string(name='NamespacePassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  topK: long(name='TopK', example='10', minimum=0, position='Query'),
  vector?: [ double ](name='Vector', shrink='json', position='Query'),
}

model QueryCollectionDataResponseBody = {
  matches?: {
    match?: [ 
    {
      id?: string(name='Id', example='doca-1234'),
      metadata?: map[string]string(name='Metadata'),
      values?: {
        value?: [ double ](name='value')
      }(name='Values'),
    }
  ](name='match')
  }(name='Matches'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model QueryCollectionDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCollectionDataResponseBody(name='body'),
}

async function queryCollectionData(request: QueryCollectionDataRequest): QueryCollectionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCollectionData', 'POST', '/', 'json', false, 'json', request);
}

model RebalanceDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests.

The token can be up to 64 characters in length and can contain letters, digits, hyphens (-), and underscores (\\_).

For more information, see [How to ensure idempotence](~~134212~~).', example='0c593ea1-3bea-11e9-b96b-88**********', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The instance ID.', example='gp-bp***************', position='Query'),
}

model RebalanceDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-************'),
}

model RebalanceDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebalanceDBInstanceResponseBody(name='body'),
}

async function rebalanceDBInstance(request: RebalanceDBInstanceRequest): RebalanceDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebalanceDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstancePublicConnectionRequest {
  addressType?: string(name='AddressType', description='The type of the endpoint. Default value: primary. Valid values:

*   **primary**: primary endpoint.
*   **cluster**: cluster endpoint. This type of endpoints can be created only for instances that have multiple coordinator nodes.', example='Intranet', position='Query'),
  currentConnectionString: string(name='CurrentConnectionString', description='The public endpoint of the instance.

You can log on to the AnalyticDB for PostgreSQL console and go to the **Basic Information** page of the instance to view the **public endpoint** in the **Database Connection** section.', example='gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9CEF7037-4158-4A65-BEC7-2A**********'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', description='The ID of the instance.', example='testaccount_1', position='Query'),
  accountPassword: string(name='AccountPassword', description='The name of the account.', example='Testaccount_1', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='Before you call this operation, make sure that the following requirements are met:

*   The instance is in the running state.
*   The instance is not locked.', example='gp-t4nf48vf15713****', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The new password for the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='187C80FC-75C4-477C-BBF2-A368A36D041C'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](~~327176~~).', example='0c593ea1-3bea-11e9-b96b-88**********', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-xxxxxxxxx', position='Query'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7356493-7141-4393-8951-CDA8AB5D67EC'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

/**
  * A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
 */
async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResumeInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ResumeInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only if **false** is returned for the **Status** parameter.', example='******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9********'),
  status?: boolean(name='Status', description='Indicates whether the request was successful. Valid values:

*   **false**: The request failed.
*   **true**: The request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused** state.
  * This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeInstance', 'POST', '/', 'json', false, 'json', request);
}

model SetDBInstancePlanStatusRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  planId: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234', position='Query'),
  planStatus: string(name='PlanStatus', description='Specifies whether to enable or disable the plan. Valid values:

*   **disable**: disables the plan.
*   **enable**: enables the plan.', example='disable', position='Query'),
}

model SetDBInstancePlanStatusResponseBody = {
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model SetDBInstancePlanStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDBInstancePlanStatusResponseBody(name='body'),
}

/**
  * You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function setDBInstancePlanStatus(request: SetDBInstancePlanStatusRequest): SetDBInstancePlanStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDBInstancePlanStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetDataShareInstanceRequest {
  instanceList: [ string ](name='InstanceList', description='The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', shrink='json', position='Query'),
  operationType: string(name='OperationType', description='Specifies whether to enable or disable data sharing. Valid values:

*   **add**: enables data sharing.
*   **remove**: disables data sharing.', example='add', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model SetDataShareInstanceResponseBody = {
  errMessage?: string(name='ErrMessage', description='The error message returned if the operation fails.', example='error message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D5**********'),
  status?: string(name='Status', description='The state of the operation. Valid values:

*   **success**: The operation is successful.
*   **failed**: The operation fails.', example='success'),
}

model SetDataShareInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: SetDataShareInstanceResponseBody(name='body'),
}

/**
  * This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
 */
async function setDataShareInstance(request: SetDataShareInstanceRequest): SetDataShareInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDataShareInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchDBInstanceNetTypeRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='The prefix of the custom endpoint. The prefix must be 8 to 64 characters in length and can contain letters and digits. It must start with a lowercase letter. A valid endpoint is in the following format: Prefix.Database engine.rds.aliyuncs.com. Example: test1234.mysql.rds.aliyuncs.com.', example='test1234', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='rm-uf6wjk5xxxxxxx', position='Query'),
  port: string(name='Port', description='The port number. Valid values: 3000 to 5999.

> 
*   Only ApsaraDB PolarDB MySQL-compatible edition clusters support this parameter. If you leave this parameter empty, the default port 3306 is used.', example='3306', position='Query'),
}

model SwitchDBInstanceNetTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FA67B751-2A2D-470C-850B-D6B93699D35C'),
}

model SwitchDBInstanceNetTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceNetTypeResponseBody(name='body'),
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchDBInstanceNetType', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~86912~~) operation to query region IDs.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of an instance. Valid values of N: 1 to 50.', example='gp-xxxxxxxxxx', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The mode of the instance. Valid values:

*   `instance`: reserved storage mode
*   `ALIYUN::GPDB::INSTANCE`: elastic storage mode', example='instance', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of a tag. Valid values of N: 1 to 20. This parameter value cannot be an empty string. A tag key can contain a maximum of 128 characters. It cannot start with `aliyun` or`  acs: ` and cannot contain `http://` or`  https:// `.', example='TestKey'),
      value?: string(name='Value', description='The value of a tag. Valid values of N: 1 to 20. This parameter value can be an empty string. A tag value can contain a maximum of 128 characters. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-23**********'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnloadSampleDataRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UnloadSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if an error occurs. This message does not affect the execution of the operation.', example='********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E42ABC3-4DBD-5343-9BCA-66B7D091311F_6914'),
  status?: boolean(name='Status', description='The execution state of the operation. Valid values:

*   **false**: The operation fails.
*   **true**: The operation is successful.', example='true'),
}

model UnloadSampleDataResponse = {
  headers: map[string]string(name='headers'),
  body: UnloadSampleDataResponseBody(name='body'),
}

/**
  * You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function unloadSampleData(request: UnloadSampleDataRequest): UnloadSampleDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnloadSampleData', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to unbind all tags from an instance. This parameter is valid only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The storage mode of the instance. Valid values:

*   `instance`: reserved storage mode
*   `ALIYUN::GPDB::INSTANCE`: elastic storage mode', example='instance', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-23757A20B5F8'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDBInstancePlanRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  planConfig?: string(name='PlanConfig', description='The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType** and **PlanScheduleType**. The following section describes the PlanConfig parameter.', example='{"pause":{"executeTime":"2022-08-30T16:00:00Z"}}', position='Query'),
  planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan', position='Query'),
  planEndDate?: string(name='PlanEndDate', description='The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.

>  This parameter is required only for **periodically executed** plans.', example='2023-04-17T23:00Z', position='Query'),
  planId: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234', position='Query'),
  planName?: string(name='PlanName', description='The name of the plan.', example='test-plan', position='Query'),
  planStartDate?: string(name='PlanStartDate', description='The start time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  This parameter is required only for **periodically executed** plans.', example='2022-04-17T23:00Z', position='Query'),
}

model UpdateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model UpdateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDBInstancePlanResponseBody(name='body'),
}

/**
  * You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function updateDBInstancePlan(request: UpdateDBInstancePlanRequest): UpdateDBInstancePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDBInstancePlan', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceRequest {
  DBInstanceClass?: string(name='DBInstanceClass', description='This parameter is no longer used.', example='null', position='Query'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount', description='This parameter is no longer used.', example='null', position='Query'),
  DBInstanceId: string(name='DBInstanceId', description='The instance ID.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.', example='gp-rj***************', position='Query'),
  instanceSpec?: string(name='InstanceSpec', description='The specifications of each compute node. For information about the supported specifications, see [Instance specifications](~~35406~~).

>  This parameter is available only for instances in elastic storage mode.', example='4C16G', position='Query'),
  masterNodeNum?: string(name='MasterNodeNum', description='The number of coordinator nodes. Valid values: 1 and 2.

>  This parameter is available only on the China site (aliyun.com).', example='2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='This parameter is no longer used.', example='null', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****', position='Query'),
  segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', description='The performance level of enhanced SSDs (ESSDs). Valid values:

*   **pl0**
*   **pl1**
*   **pl2**', example='pl1', position='Query'),
  segNodeNum?: string(name='SegNodeNum', description='The number of compute nodes. The number of compute nodes varies based on the instance resource type and edition.

*   Valid values for High-availability Edition instances in elastic storage mode: 4 to 512, in 4 increments
*   Valid values for High-performance Edition instances in elastic storage mode: 2 to 512, in 2 increments
*   Valid values for instances in manual Serverless mode: 2 to 512, in 2 increments', example='2', position='Query'),
  segStorageType?: string(name='SegStorageType', description='The disk storage type of the instance after the change. The disk storage type can be changed only to ESSD. Set the value to **cloud_essd**.', example='cloud_essd', position='Query'),
  storageSize?: string(name='StorageSize', description='The storage capacity of each compute node. Unit: GB. Valid values: 50 to 6000, in 50 increments.

>  This parameter is available only for instances in elastic storage mode.', example='100', position='Query'),
  upgradeType?: long(name='UpgradeType', description='The type of the instance configuration change. Valid values:

*   **0** (default): changes the number of compute nodes.
*   **1**: changes the specifications and storage capacity of each compute node.
*   **2**: changes the number of coordinator nodes.
*   **3**: changes the disk storage type and ESSD performance level of the instance.

> *   The supported changes to compute node configurations vary based on the instance resource type. For more information, see the "[Precautions](~~50956~~)" section of the Change compute node configurations topic.
> *   After you specify a change type, only the corresponding parameters take effect. For example, if you set **UpgradeType** to 0, the parameter that is used to change the number of compute nodes takes effect, but the parameter that is used to change the number of coordinator nodes does not.
> *   The number of coordinator nodes can be changed only on the China site (aliyun.com).
> *   The disk storage type can be changed only from ultra disks to ESSDs.', example='0', position='Query'),
}

model UpgradeDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-rj***************'),
  orderId?: string(name='OrderId', description='The order ID.', example='*********'),
  requestId?: string(name='RequestId', description='The request ID.', example='25C11EE5-B7E8-481A-A07C-BD**********'),
}

model UpgradeDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to change the configurations of an AnalyticDB for PostgreSQL instance.
  * >  This operation is not supported for instances in reserved storage mode.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function upgradeDBInstance(request: UpgradeDBInstanceRequest): UpgradeDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBVersionRequest {
  DBInstanceId: string(name='DBInstanceId', description='The ID of the instance.', example='gp-wz9kmr708m155j***', position='Query'),
  majorVersion?: string(name='MajorVersion', description='The major version of the instance.', example='6.0', position='Query'),
  minorVersion?: string(name='MinorVersion', description='The minor version of the instance.', example='6.3.6.1-202112012048', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  switchTime?: string(name='SwitchTime', description='The upgrade time.', example='xxxxx', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', description='The upgrade method.', example='xxxxx', position='Query'),
}

model UpgradeDBVersionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-wz9kmr708m155j***'),
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='gp-wz9kmr708m155j***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25C11EE5-B7E8-481A-A07C-BD619971A570'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='101450956'),
}

model UpgradeDBVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBVersionResponseBody(name='body'),
}

async function upgradeDBVersion(request: UpgradeDBVersionRequest): UpgradeDBVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpsertCollectionDataRequest {
  collection: string(name='Collection', example='document', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='gp-xxxxxxxxx', position='Query'),
  namespace?: string(name='Namespace', example='mynamespace', position='Query'),
  namespacePassword: string(name='NamespacePassword', example='testpassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  rows: [ 
    {
      id?: string(name='Id', example='doca-1234'),
      metadata?: map[string]string(name='Metadata'),
      vector?: [ double ](name='Vector'),
    }
  ](name='Rows', shrink='json', position='Query'),
}

model UpsertCollectionDataResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model UpsertCollectionDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpsertCollectionDataResponseBody(name='body'),
}

async function upsertCollectionData(request: UpsertCollectionDataRequest): UpsertCollectionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpsertCollectionData', 'POST', '/', 'json', false, 'json', request);
}

