/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'gpdb.aliyuncs.com',
    cn-hangzhou = 'gpdb.aliyuncs.com',
    cn-shanghai = 'gpdb.aliyuncs.com',
    cn-shenzhen = 'gpdb.aliyuncs.com',
    cn-hongkong = 'gpdb.aliyuncs.com',
    ap-southeast-1 = 'gpdb.aliyuncs.com',
    us-west-1 = 'gpdb.aliyuncs.com',
    us-east-1 = 'gpdb.aliyuncs.com',
    cn-hangzhou-finance = 'gpdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'gpdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'gpdb.aliyuncs.com',
    cn-qingdao = 'gpdb.aliyuncs.com',
    cn-north-2-gov-1 = 'gpdb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('gpdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddBuDBInstanceRelationRequest {
  businessUnit?: string(name='BusinessUnit', example='BusinessUnit'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxx'),
  ownerId?: long(name='OwnerId'),
}

model AddBuDBInstanceRelationResponseBody = {
  businessUnit?: string(name='BusinessUnit', example='BusinessUnit'),
  DBInstanceName?: string(name='DBInstanceName', example='gp-xxxxxx'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model AddBuDBInstanceRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBuDBInstanceRelationResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request AddBuDBInstanceRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddBuDBInstanceRelationResponse
 */
// Deprecated
async function addBuDBInstanceRelationWithOptions(request: AddBuDBInstanceRelationRequest, runtime: Util.RuntimeOptions): AddBuDBInstanceRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessUnit)) {
    query['BusinessUnit'] = request.businessUnit;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBuDBInstanceRelation',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request AddBuDBInstanceRelationRequest
  * @return AddBuDBInstanceRelationResponse
 */
// Deprecated
async function addBuDBInstanceRelation(request: AddBuDBInstanceRelationRequest): AddBuDBInstanceRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBuDBInstanceRelationWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest {
  addressType?: string(name='AddressType', example='primary'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='gp-bp12ga6v69h86****'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port', example='5432'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='ADD6EA90-EECB-4C12-9F26-0B6DB587****'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: string(name='HasServiceLinkedRole', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceLinkedRole',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', example='testacc02'),
  accountName?: string(name='AccountName', example='testacc02'),
  accountPassword?: string(name='AccountPassword', example='Pw123456'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  databaseName?: string(name='DatabaseName', example='test01'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', example='D4D4BE8A-DD46-440A-BFCD-EE**********'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88**********'),
  createSampleData?: boolean(name='CreateSampleData', example='false'),
  DBInstanceCategory?: string(name='DBInstanceCategory', example='HighAvailability'),
  DBInstanceClass?: string(name='DBInstanceClass', example='gpdb.group.segsdx1'),
  DBInstanceDescription?: string(name='DBInstanceDescription', example='test'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount', example='2'),
  DBInstanceMode?: string(name='DBInstanceMode', example='StorageElastic'),
  engine?: string(name='Engine', example='gpdb'),
  engineVersion?: string(name='EngineVersion', example='6.0'),
  idleTime?: int32(name='IdleTime'),
  instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  instanceSpec?: string(name='InstanceSpec', example='2C16G'),
  masterNodeNum?: string(name='MasterNodeNum', example='1'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', example='Prepaid'),
  period?: string(name='Period', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', example='1.1.1.*'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  securityIPList?: string(name='SecurityIPList', example='127.0.0.1'),
  segNodeNum?: string(name='SegNodeNum', example='4'),
  segStorageType?: string(name='SegStorageType', example='cloud_essd'),
  serverlessMode?: string(name='ServerlessMode'),
  serverlessResource?: int32(name='ServerlessResource'),
  storageSize?: long(name='StorageSize', example='200'),
  storageType?: string(name='StorageType', example='null'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
  usedTime?: string(name='UsedTime', example='1'),
  VPCId?: string(name='VPCId', example='vpc-bp*******************'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp*******************'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CreateDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', example='gp-bp***************.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  orderId?: string(name='OrderId', example='111111111111'),
  port?: string(name='Port', example='3432'),
  requestId?: string(name='RequestId', example='5414A4E5-4C36-4461-95FC-************'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.createSampleData)) {
    query['CreateSampleData'] = request.createSampleData;
  }
  if (!Util.isUnset(request.DBInstanceCategory)) {
    query['DBInstanceCategory'] = request.DBInstanceCategory;
  }
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceGroupCount)) {
    query['DBInstanceGroupCount'] = request.DBInstanceGroupCount;
  }
  if (!Util.isUnset(request.DBInstanceMode)) {
    query['DBInstanceMode'] = request.DBInstanceMode;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.idleTime)) {
    query['IdleTime'] = request.idleTime;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.segStorageType)) {
    query['SegStorageType'] = request.segStorageType;
  }
  if (!Util.isUnset(request.serverlessMode)) {
    query['ServerlessMode'] = request.serverlessMode;
  }
  if (!Util.isUnset(request.serverlessResource)) {
    query['ServerlessResource'] = request.serverlessResource;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planConfig?: string(name='PlanConfig', example='{"pause":{"planCronTime":"0 0 12 1/1 * ? "},"resume":{"planCronTime":"0 0 0 1/1 * ? "}}'),
  planDesc?: string(name='PlanDesc', example='this is a test plan'),
  planEndDate?: string(name='PlanEndDate', example='2023-04-17T23:00Z'),
  planName?: string(name='PlanName', example='test-plan'),
  planScheduleType?: string(name='PlanScheduleType', example='Regular'),
  planStartDate?: string(name='PlanStartDate', example='2022-04-17T23:00Z'),
  planType?: string(name='PlanType', example='PauseResume'),
}

model CreateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='****'),
  planId?: string(name='PlanId', example='1234'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad'),
  status?: string(name='Status', example='success'),
}

model CreateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstancePlanResponseBody(name='body'),
}

async function createDBInstancePlanWithOptions(request: CreateDBInstancePlanRequest, runtime: Util.RuntimeOptions): CreateDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planConfig)) {
    query['PlanConfig'] = request.planConfig;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planEndDate)) {
    query['PlanEndDate'] = request.planEndDate;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planScheduleType)) {
    query['PlanScheduleType'] = request.planScheduleType;
  }
  if (!Util.isUnset(request.planStartDate)) {
    query['PlanStartDate'] = request.planStartDate;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBInstancePlan(request: CreateDBInstancePlanRequest): CreateDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstancePlanWithOptions(request, runtime);
}

model CreateECSDBInstanceRequest {
  backupId?: string(name='BackupId', example='1111111111'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88888888****'),
  DBInstanceCategory?: string(name='DBInstanceCategory', example='HighAvailability'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  encryptionKey?: string(name='EncryptionKey', example='0d2470df-da7b-4786-b981-88888888****'),
  encryptionType?: string(name='EncryptionType', example='CloudDisk'),
  engine?: string(name='Engine', example='gpdb'),
  engineVersion?: string(name='EngineVersion', example='6.0'),
  instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  instanceSpec?: string(name='InstanceSpec', example='2C16G'),
  masterNodeNum?: int32(name='MasterNodeNum', example='1'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', example='Prepaid'),
  period?: string(name='Period', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.10.XX.XX'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  securityIPList?: string(name='SecurityIPList', example='127.0.0.1'),
  segNodeNum?: int32(name='SegNodeNum', example='4'),
  segStorageType?: string(name='SegStorageType', example='cloud_essd'),
  srcDbInstanceName?: string(name='SrcDbInstanceName', example='gp-bp12ga6v69h86****'),
  storageSize?: int32(name='StorageSize', example='200'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
  usedTime?: string(name='UsedTime', example='1'),
  VPCId?: string(name='VPCId', example='vpc-bp19ame5m1r3oejns****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1cpq8mr64paltkb****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model CreateECSDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', example='gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  orderId?: string(name='OrderId', example='111111111111'),
  port?: string(name='Port', example='5432'),
  requestId?: string(name='RequestId', example='5414A4E5-4C36-4461-95FC-************'),
}

model CreateECSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateECSDBInstanceResponseBody(name='body'),
}

async function createECSDBInstanceWithOptions(request: CreateECSDBInstanceRequest, runtime: Util.RuntimeOptions): CreateECSDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceCategory)) {
    query['DBInstanceCategory'] = request.DBInstanceCategory;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.encryptionKey)) {
    query['EncryptionKey'] = request.encryptionKey;
  }
  if (!Util.isUnset(request.encryptionType)) {
    query['EncryptionType'] = request.encryptionType;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.segStorageType)) {
    query['SegStorageType'] = request.segStorageType;
  }
  if (!Util.isUnset(request.srcDbInstanceName)) {
    query['SrcDbInstanceName'] = request.srcDbInstanceName;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateECSDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createECSDBInstance(request: CreateECSDBInstanceRequest): CreateECSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createECSDBInstanceWithOptions(request, runtime);
}

model CreateSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model CreateSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='*********'),
  requestId?: string(name='RequestId', example='15A6881F-AAAB-5E4D-9B3F-6DCC1BDF4F2E_99'),
  status?: boolean(name='Status', example='true'),
}

model CreateSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSampleDataResponseBody(name='body'),
}

async function createSampleDataWithOptions(request: CreateSampleDataRequest, runtime: Util.RuntimeOptions): CreateSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSampleDataWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRole',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88**********'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='65BDA532-28AF-4122-AA39-B3**********'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planId?: string(name='PlanId', example='1234'),
}

model DeleteDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='****'),
  planId?: string(name='PlanId', example='1234'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', example='success'),
}

model DeleteDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstancePlanResponseBody(name='body'),
}

async function deleteDBInstancePlanWithOptions(request: DeleteDBInstancePlanRequest, runtime: Util.RuntimeOptions): DeleteDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBInstancePlan(request: DeleteDBInstancePlanRequest): DeleteDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstancePlanWithOptions(request, runtime);
}

model DeleteDatabaseRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxxxx'),
  DBName?: string(name='DBName', example='testdb01'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId', example='07F6177E-6DE4-408A-BB4F-0723301340F3'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatabaseResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteDatabaseRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDatabaseResponse
 */
// Deprecated
async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDatabase',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteDatabaseRequest
  * @return DeleteDatabaseResponse
 */
// Deprecated
async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', example='testuser'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    DBInstanceAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription', example='testuser'),
      accountName?: string(name='AccountName', example='testuser'),
      accountStatus?: string(name='AccountStatus', example='1'),
      DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
    }
  ](name='DBInstanceAccount')
  }(name='Accounts'),
  requestId?: string(name='RequestId', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeAvailableResourcesRequest {
  chargeType?: string(name='ChargeType', example='PostPaid'),
  region?: string(name='Region', example='cn-hangzhou'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model DescribeAvailableResourcesResponseBody = {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
  resources?: [ 
    {
      supportedEngines?: [ 
        {
          mode?: string(name='Mode', example='ECS'),
          supportedEngineVersion?: string(name='SupportedEngineVersion', example='6.0'),
          supportedInstanceClasses?: [ 
            {
              category?: string(name='Category'),
              description?: string(name='Description'),
              displayClass?: string(name='DisplayClass', example='4C32G'),
              instanceClass?: string(name='InstanceClass', example='4C32G'),
              nodeCount?: {
                maxCount?: string(name='MaxCount', example='128'),
                minCount?: string(name='MinCount', example='2'),
                step?: string(name='Step', example='2'),
              }(name='NodeCount'),
              storageSize?: {
                maxCount?: string(name='MaxCount', example='1000'),
                minCount?: string(name='MinCount', example='50'),
                step?: string(name='Step', example='50'),
              }(name='StorageSize'),
              storageType?: string(name='StorageType', example='cloud_ssd'),
            }
          ](name='SupportedInstanceClasses'),
        }
      ](name='SupportedEngines'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='Resources'),
}

model DescribeAvailableResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableResourcesResponseBody(name='body'),
}

async function describeAvailableResourcesWithOptions(request: DescribeAvailableResourcesRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableResources(request: DescribeAvailableResourcesRequest): DescribeAvailableResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourcesWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', example='7'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint', example='true'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', example='Wednesday,Friday'),
  preferredBackupTime?: string(name='PreferredBackupTime', example='12:00Z-13:00Z'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod', example='1'),
  requestId?: string(name='RequestId', example='9E6B3287-A3E2-5A87-B8D8-E9**********'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeDBClusterNodeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  nodeType?: string(name='NodeType', example='master'),
}

model DescribeDBClusterNodeResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='gp-bp***************'),
  nodes?: [ 
    {
      name?: string(name='Name', example='master-10*******'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId', example='87E44B48-B306-4AD3-A63B-C8**********'),
}

model DescribeDBClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterNodeResponseBody(name='body'),
}

async function describeDBClusterNodeWithOptions(request: DescribeDBClusterNodeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterNode',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterNode(request: DescribeDBClusterNodeRequest): DescribeDBClusterNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNodeWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', example='2021-11-03T15:10Z'),
  key?: string(name='Key', example='adbpg_conn_count'),
  nodeType?: string(name='NodeType', example='master'),
  nodes?: string(name='Nodes', example='top10'),
  startTime?: string(name='StartTime', example='2021-11-03T15:00Z'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', example='2021-11-03T15:10Z'),
  performanceKeys?: [ 
    {
      name?: string(name='Name', example='adbpg_group_cpu_used_percent'),
      series?: [ 
        {
          name?: string(name='Name', example='standby-********-cpu'),
          role?: string(name='Role', example='standby'),
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit', example='%'),
    }
  ](name='PerformanceKeys'),
  requestId?: string(name='RequestId', example='8E8990F0-C81E-4C94-8F51-5F**********'),
  startTime?: string(name='StartTime', example='2021-11-03T15:00Z'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.nodes)) {
    query['Nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp13ue79qk8y1****'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDBInstanceAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      availabilityValue?: string(name='AvailabilityValue', example='100.0%'),
      connectionMode?: string(name='ConnectionMode', example='LVS'),
      connectionString?: string(name='ConnectionString', example='gp-bp13ue79qk8y1****-master.gpdb.rds.aliyuncs.com'),
      coreVersion?: string(name='CoreVersion', example='mm.v6.3.10.1-202207141918'),
      cpuCores?: int32(name='CpuCores', example='2'),
      cpuCoresPerNode?: int32(name='CpuCoresPerNode', example='0'),
      creationTime?: string(name='CreationTime', example='2022-08-11T09:16:26Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', example='HighAvailability'),
      DBInstanceClass?: string(name='DBInstanceClass', example='gpdb.group.segsdx1'),
      DBInstanceClassType?: string(name='DBInstanceClassType', example='x'),
      DBInstanceCpuCores?: int32(name='DBInstanceCpuCores', example='2'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='gp-bp13ue79qk8y1****'),
      DBInstanceDiskMBPS?: long(name='DBInstanceDiskMBPS', example='0'),
      DBInstanceGroupCount?: string(name='DBInstanceGroupCount', example='0'),
      DBInstanceId?: string(name='DBInstanceId', example='gp-bp13ue79qk8y1****'),
      DBInstanceMemory?: long(name='DBInstanceMemory', example='16'),
      DBInstanceMode?: string(name='DBInstanceMode', example='StorageElastic'),
      DBInstanceNetType?: string(name='DBInstanceNetType', example='2'),
      DBInstanceStatus?: string(name='DBInstanceStatus', example='Running'),
      DBInstanceStorage?: long(name='DBInstanceStorage', example='50'),
      encryptionKey?: string(name='EncryptionKey', example='0d2470df-da7b-4786-b981-************'),
      encryptionType?: string(name='EncryptionType', example='CloudDisk'),
      engine?: string(name='Engine', example='gpdb'),
      engineVersion?: string(name='EngineVersion', example='6.0'),
      expireTime?: string(name='ExpireTime', example='2999-09-08T16:00:00Z'),
      hostType?: string(name='HostType', example='0'),
      idleTime?: int32(name='IdleTime'),
      instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
      lockMode?: string(name='LockMode', example='Unlock'),
      lockReason?: string(name='LockReason', example='null'),
      maintainEndTime?: string(name='MaintainEndTime', example='22:00Z'),
      maintainStartTime?: string(name='MaintainStartTime', example='18:00Z'),
      masterNodeNum?: int32(name='MasterNodeNum', example='1'),
      maxConnections?: int32(name='MaxConnections', example='500'),
      memoryPerNode?: int32(name='MemoryPerNode', example='0'),
      memorySize?: long(name='MemorySize', example='16'),
      memoryUnit?: string(name='MemoryUnit', example='GB'),
      minorVersion?: string(name='MinorVersion', example='6.3.10.1-202207141918'),
      payType?: string(name='PayType', example='Postpaid'),
      port?: string(name='Port', example='5432'),
      readDelayTime?: string(name='ReadDelayTime', example='null'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
      runningTime?: string(name='RunningTime', example='4 days 22:58:55'),
      securityIPList?: string(name='SecurityIPList', example='127.0.0.1'),
      segNodeNum?: int32(name='SegNodeNum', example='4'),
      segmentCounts?: int32(name='SegmentCounts', example='0'),
      serverlessMode?: string(name='ServerlessMode'),
      serverlessResource?: int32(name='ServerlessResource'),
      startTime?: string(name='StartTime', example='2022-08-11T09:26:43Z'),
      storagePerNode?: int32(name='StoragePerNode', example='0'),
      storageSize?: long(name='StorageSize', example='50'),
      storageType?: string(name='StorageType', example='cloud_essd'),
      storageUnit?: string(name='StorageUnit', example='GB SSD'),
      supportRestore?: boolean(name='SupportRestore', example='true'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='test-key'),
          value?: string(name='Value', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', description='vSwitch ID。', example='vsw-bp1cpq8mr64paltkb****'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp19ame5m1r3oejns****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items'),
  requestId?: string(name='RequestId', example='5E6EDEB8-D73E-5F2D-B948-86C8AEB05A68'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceAttribute',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceDataBloatRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
}

model DescribeDBInstanceDataBloatResponseBody = {
  items?: [ 
    {
      bloatCeoff?: string(name='BloatCeoff', example='1.03'),
      bloatSize?: string(name='BloatSize', example='0.2MB'),
      databaseName?: string(name='DatabaseName', example='adbtest'),
      expectTableSize?: string(name='ExpectTableSize', example='1MB'),
      realTableSize?: string(name='RealTableSize', example='1.2MB'),
      schemaName?: string(name='SchemaName', example='schema1'),
      sequence?: int32(name='Sequence', example='1'),
      storageType?: string(name='StorageType', example='Heap'),
      suggestedAction?: string(name='SuggestedAction', example='null'),
      tableName?: string(name='TableName', example='tab1'),
      timeLastUpdated?: string(name='TimeLastUpdated', example='2022-08-08T20:00:00Z'),
      timeLastVacuumed?: string(name='TimeLastVacuumed', example='2022-08-08T16:00:00Z'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDBInstanceDataBloatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDataBloatResponseBody(name='body'),
}

async function describeDBInstanceDataBloatWithOptions(request: DescribeDBInstanceDataBloatRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataBloatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataBloat',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceDataBloat(request: DescribeDBInstanceDataBloatRequest): DescribeDBInstanceDataBloatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataBloatWithOptions(request, runtime);
}

model DescribeDBInstanceDataSkewRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeDBInstanceDataSkewResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName', example='adbtest'),
      distributeKey?: string(name='DistributeKey', example='ItemId'),
      owner?: string(name='Owner', example='adbpguser'),
      schemaName?: string(name='SchemaName', example='schema1'),
      sequence?: int32(name='Sequence', example='1'),
      tableName?: string(name='TableName', example='tab1'),
      tableSize?: string(name='TableSize', example='100000'),
      tableSkew?: string(name='TableSkew', example='10.23'),
      timeLastUpdated?: string(name='TimeLastUpdated', example='2020-09-08T20:00:00Z'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model DescribeDBInstanceDataSkewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDataSkewResponseBody(name='body'),
}

async function describeDBInstanceDataSkewWithOptions(request: DescribeDBInstanceDataSkewRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataSkewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataSkew',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceDataSkew(request: DescribeDBInstanceDataSkewRequest): DescribeDBInstanceDataSkewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataSkewWithOptions(request, runtime);
}

model DescribeDBInstanceDiagnosisSummaryRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  rolePreferd?: string(name='RolePreferd', example='normal'),
  startStatus?: string(name='StartStatus', example='UP'),
  syncMode?: string(name='SyncMode', example='synced'),
}

model DescribeDBInstanceDiagnosisSummaryResponseBody = {
  items?: [ 
    {
      hostname?: string(name='Hostname', example='gp-t4np568qe9710****-master-100984919'),
      nodeAddress?: string(name='NodeAddress', example='192.168.XX.XX'),
      nodeCID?: string(name='NodeCID', example='-1'),
      nodeID?: string(name='NodeID', example='1'),
      nodeName?: string(name='NodeName', example='ap-southeast-1.i-t4n4c4ryr0yr441d****'),
      nodePort?: string(name='NodePort', example='3000'),
      nodePreferredRole?: string(name='NodePreferredRole', example='primary'),
      nodeReplicationMode?: string(name='NodeReplicationMode', example='Synced'),
      nodeRole?: string(name='NodeRole', example='primary'),
      nodeStatus?: string(name='NodeStatus', example='UP'),
      nodeType?: string(name='NodeType', example='master'),
    }
  ](name='Items'),
  masterStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum', example='0'),
    normalNodeNum?: int32(name='NormalNodeNum', example='2'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum', example='0'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum', example='0'),
    preferredNodeNum?: int32(name='PreferredNodeNum', example='2'),
    syncedNodeNum?: int32(name='SyncedNodeNum', example='1'),
  }(name='MasterStatusInfo'),
  pageNumber?: string(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='070534EC-78D5-5519-83CC-E7B1A9213483'),
  segmentStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum', example='0'),
    normalNodeNum?: int32(name='NormalNodeNum', example='4'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum', example='0'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum', example='4'),
    preferredNodeNum?: int32(name='PreferredNodeNum', example='4'),
    syncedNodeNum?: int32(name='SyncedNodeNum', example='0'),
  }(name='SegmentStatusInfo'),
  totalCount?: string(name='TotalCount', example='6'),
}

model DescribeDBInstanceDiagnosisSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDiagnosisSummaryResponseBody(name='body'),
}

async function describeDBInstanceDiagnosisSummaryWithOptions(request: DescribeDBInstanceDiagnosisSummaryRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDiagnosisSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rolePreferd)) {
    query['RolePreferd'] = request.rolePreferd;
  }
  if (!Util.isUnset(request.startStatus)) {
    query['StartStatus'] = request.startStatus;
  }
  if (!Util.isUnset(request.syncMode)) {
    query['SyncMode'] = request.syncMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDiagnosisSummary',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceDiagnosisSummary(request: DescribeDBInstanceDiagnosisSummaryRequest): DescribeDBInstanceDiagnosisSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDiagnosisSummaryWithOptions(request, runtime);
}

model DescribeDBInstanceErrorLogRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='adbtest'),
  endTime?: string(name='EndTime', example='2022-04-25T06:59Z'),
  host?: string(name='Host', example='null'),
  keywords?: string(name='Keywords', example='error'),
  logLevel?: string(name='LogLevel', example='ALL'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  startTime?: string(name='StartTime', example='2022-04-24T06:59Z'),
  user?: string(name='User', example='adbpguser'),
}

model DescribeDBInstanceErrorLogResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', example='adbtest'),
      host?: string(name='Host', example='null'),
      logContext?: string(name='LogContext', example='unsupported frontend protocol 2689.28208: server supports 1.0 to 3.0'),
      logLevel?: string(name='LogLevel', example='FATAL'),
      time?: long(name='Time', example='2022-04-24 11:28:14'),
      user?: string(name='User', example='adbpguser'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDBInstanceErrorLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceErrorLogResponseBody(name='body'),
}

async function describeDBInstanceErrorLogWithOptions(request: DescribeDBInstanceErrorLogRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceErrorLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.keywords)) {
    query['Keywords'] = request.keywords;
  }
  if (!Util.isUnset(request.logLevel)) {
    query['LogLevel'] = request.logLevel;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceErrorLog',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceErrorLog(request: DescribeDBInstanceErrorLogRequest): DescribeDBInstanceErrorLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceErrorLogWithOptions(request, runtime);
}

model DescribeDBInstanceIPArrayListRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
}

model DescribeDBInstanceIPArrayListResponseBody = {
  items?: {
    DBInstanceIPArray?: [ 
    {
      DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', example='hidden'),
      DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', example='default'),
      securityIPList?: string(name='SecurityIPList', example='127.0.0.1'),
    }
  ](name='DBInstanceIPArray')
  }(name='Items'),
  requestId?: string(name='RequestId', example='CB7AA0BF-BE41-480E-A3DC-C97BF85A391B'),
}

model DescribeDBInstanceIPArrayListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceIPArrayListResponseBody(name='body'),
}

async function describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIPArrayListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceIPArrayList',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIPArrayListWithOptions(request, runtime);
}

model DescribeDBInstanceIndexUsageRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeDBInstanceIndexUsageResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName', example='adbtest'),
      indexDef?: string(name='IndexDef', example='CREATE INDEX idx1 ON schema1.tab1_ptr_2010'),
      indexName?: string(name='IndexName', example='idx1'),
      indexScanTimes?: int32(name='IndexScanTimes', example='50000'),
      indexSize?: string(name='IndexSize', example='10000'),
      isPartitionTable?: boolean(name='IsPartitionTable', example='true'),
      parentTableName?: string(name='ParentTableName', example='tab1'),
      schemaName?: string(name='SchemaName', example='schema1'),
      tableName?: string(name='TableName', example='tab1_ptr_2010'),
      timeLastUpdated?: string(name='TimeLastUpdated', example='2022-08-08T20:00:00Z'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDBInstanceIndexUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceIndexUsageResponseBody(name='body'),
}

async function describeDBInstanceIndexUsageWithOptions(request: DescribeDBInstanceIndexUsageRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIndexUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceIndexUsage',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceIndexUsage(request: DescribeDBInstanceIndexUsageRequest): DescribeDBInstanceIndexUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIndexUsageWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxxx'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      addressType?: string(name='AddressType', example='Intranet'),
      connectionString?: string(name='ConnectionString', example='gp-xxxxxxx.gpdb.rds.aliyuncs.com'),
      IPAddress?: string(name='IPAddress', example='127.0.0.1'),
      IPType?: string(name='IPType', example='Inner'),
      port?: string(name='Port', example='3432'),
      VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxxxx'),
      vSwitchId?: string(name='VSwitchId', example='vsw-xxxxxxxx'),
      vpcInstanceId?: string(name='VpcInstanceId', example='vpc-xxxxxxx'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos'),
  instanceNetworkType?: string(name='InstanceNetworkType', example='Classic'),
  requestId?: string(name='RequestId', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceNetInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDBInstanceOnECSAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDBInstanceOnECSAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      connectionMode?: string(name='ConnectionMode', example='LVS'),
      connectionString?: string(name='ConnectionString', example='gp-bp***************-master.gpdb.rds.aliyuncs.com'),
      cpuCores?: int32(name='CpuCores', example='2'),
      creationTime?: string(name='CreationTime', example='2021-09-15T08:30:00Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', example='HighAvailability'),
      DBInstanceClass?: string(name='DBInstanceClass', example='adbpg.cluster.eni.2c16g'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='gp-bp***************'),
      DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
      DBInstanceStatus?: string(name='DBInstanceStatus', example='Running'),
      encryptionKey?: string(name='EncryptionKey', example='9fc356bf-b59c-42e0-9659-************'),
      encryptionType?: string(name='EncryptionType', example='CloudDisk'),
      engine?: string(name='Engine', example='gpdb'),
      engineVersion?: string(name='EngineVersion', example='6.0'),
      expireTime?: string(name='ExpireTime', example='2021-10-15T16:00:00Z'),
      instanceDeployType?: string(name='InstanceDeployType', example='cluster'),
      instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
      lockMode?: string(name='LockMode', example='Unlock'),
      masterNodeNum?: int32(name='MasterNodeNum', example='1'),
      memorySize?: int32(name='MemorySize', example='16'),
      minorVersion?: string(name='MinorVersion', example='6.3.4.10-202109231235'),
      payType?: string(name='PayType', example='Prepaid'),
      port?: string(name='Port', example='5432'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      segNodeNum?: int32(name='SegNodeNum', example='4'),
      storageSize?: int32(name='StorageSize', example='50'),
      storageType?: string(name='StorageType', example='cloud_essd'),
      supportRestore?: boolean(name='SupportRestore', example='true'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='test-key'),
          value?: string(name='Value', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', description='vSwitch ID。', example='vsw-bp*******************'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp*******************'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items'),
  requestId?: string(name='RequestId', example='5850BF81-1A2B-5ACE-AF41-57**********'),
}

model DescribeDBInstanceOnECSAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceOnECSAttributeResponseBody(name='body'),
}

async function describeDBInstanceOnECSAttributeWithOptions(request: DescribeDBInstanceOnECSAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceOnECSAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceOnECSAttribute',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceOnECSAttribute(request: DescribeDBInstanceOnECSAttributeRequest): DescribeDBInstanceOnECSAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceOnECSAttributeWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', example='2022-07-09T03:47Z'),
  key?: string(name='Key', example='CpuUsage,MemoryUsage,Gpdb_SpaceUsage,Gpdb_IOPS,Gpdb_session'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', example='2022-07-08T03:47Z'),
}

model DescribeDBInstancePerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', example='2022-07-09T03:47Z'),
  engine?: string(name='Engine', example='gpdb'),
  performanceKeys?: [ string ](name='PerformanceKeys'),
  requestId?: string(name='RequestId', example='5E85244A-AB47-46A3-A3AD-5F307DCB407E'),
  startTime?: string(name='StartTime', example='2022-07-08T03:47Z'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancePerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDBInstancePlansRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planCreateDate?: string(name='PlanCreateDate', example='2022-04-17T23:00Z'),
  planDesc?: string(name='PlanDesc', example='this is a test plan'),
  planId?: string(name='PlanId', example='1234'),
  planScheduleType?: string(name='PlanScheduleType', example='Regular'),
  planType?: string(name='PlanType', example='PauseResume'),
}

model DescribeDBInstancePlansResponseBody = {
  errorMessage?: string(name='ErrorMessage', example='****'),
  items?: {
    planList?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
      planConfig?: string(name='PlanConfig', example='{"pause":{"planCronTime":"0 22 * * 5"},"resume":{"planCronTime":"0 23 * * 5"}}'),
      planDesc?: string(name='PlanDesc', example='this is a test plan'),
      planEndDate?: string(name='PlanEndDate', example='2023-04-17T23:00Z'),
      planId?: string(name='PlanId', example='1234'),
      planName?: string(name='PlanName', example='test-plan'),
      planScheduleType?: string(name='PlanScheduleType', example='Regular'),
      planStartDate?: string(name='PlanStartDate', example='2022-04-17T23:00Z'),
      planStatus?: string(name='PlanStatus', example='active'),
      planType?: string(name='PlanType', example='PauseResume'),
    }
  ](name='PlanList')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', example='success'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeDBInstancePlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancePlansResponseBody(name='body'),
}

async function describeDBInstancePlansWithOptions(request: DescribeDBInstancePlansRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planCreateDate)) {
    query['PlanCreateDate'] = request.planCreateDate;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planScheduleType)) {
    query['PlanScheduleType'] = request.planScheduleType;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancePlans',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstancePlans(request: DescribeDBInstancePlansRequest): DescribeDBInstancePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePlansWithOptions(request, runtime);
}

model DescribeDBInstanceSQLPatternsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
  database?: string(name='Database', example='test_db'),
  endTime?: string(name='EndTime', example='2021-08-04T09:25Z'),
  queryKeywords?: string(name='QueryKeywords', example='sql_pattern'),
  sourceIP?: string(name='SourceIP', example='10.**.**.10'),
  startTime?: string(name='StartTime', example='2021-08-03T09:25Z'),
  user?: string(name='User', example='test_user'),
}

model DescribeDBInstanceSQLPatternsResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='gp-xxxxxxxx'),
  endTime?: string(name='EndTime', example='2021-08-03T09:31Z'),
  patterns?: [ 
    {
      name?: string(name='Name', example='Database_Ratio'),
      values?: map[string]any(name='Values', example='{ "postgres": 2 }'),
    }
  ](name='Patterns'),
  requestId?: string(name='RequestId', example='4BBA1119-65FD-50B4-8A1D-B4**********'),
  startTime?: string(name='StartTime', example='2021-08-03T09:30Z'),
}

model DescribeDBInstanceSQLPatternsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSQLPatternsResponseBody(name='body'),
}

async function describeDBInstanceSQLPatternsWithOptions(request: DescribeDBInstanceSQLPatternsRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSQLPatternsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSQLPatterns',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSQLPatterns(request: DescribeDBInstanceSQLPatternsRequest): DescribeDBInstanceSQLPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSQLPatternsWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
}

model DescribeDBInstanceSSLResponseBody = {
  certCommonName?: string(name='CertCommonName', example='*.gpdbmaster.xxx.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxx'),
  DBInstanceName?: string(name='DBInstanceName', example='gp-xxxxx'),
  requestId?: string(name='RequestId', example='D5FF8636-37F6-4CE0-8002-F8734C62C686'),
  SSLEnabled?: boolean(name='SSLEnabled', example='true'),
  SSLExpiredTime?: string(name='SSLExpiredTime', example='2020-08-05T09:05:53Z'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSSL',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  DBInstanceCategories?: [ string ](name='DBInstanceCategories'),
  DBInstanceDescription?: string(name='DBInstanceDescription', example='gp-bp12ga6v69h86****'),
  DBInstanceIds?: string(name='DBInstanceIds', example='gp-bp***************'),
  DBInstanceModes?: [ string ](name='DBInstanceModes'),
  DBInstanceStatuses?: [ string ](name='DBInstanceStatuses'),
  instanceDeployTypes?: [ string ](name='InstanceDeployTypes'),
  instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  tag?: [ 
    {
      key?: string(name='Key', example='test-key'),
      value?: string(name='Value', example='test-value'),
    }
  ](name='Tag'),
}

model DescribeDBInstancesShrinkRequest {
  DBInstanceCategoriesShrink?: string(name='DBInstanceCategories'),
  DBInstanceDescription?: string(name='DBInstanceDescription', example='gp-bp12ga6v69h86****'),
  DBInstanceIds?: string(name='DBInstanceIds', example='gp-bp***************'),
  DBInstanceModesShrink?: string(name='DBInstanceModes'),
  DBInstanceStatusesShrink?: string(name='DBInstanceStatuses'),
  instanceDeployTypesShrink?: string(name='InstanceDeployTypes'),
  instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  tag?: [ 
    {
      key?: string(name='Key', example='test-key'),
      value?: string(name='Value', example='test-value'),
    }
  ](name='Tag'),
}

model DescribeDBInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      connectionMode?: string(name='ConnectionMode', example='null'),
      createTime?: string(name='CreateTime', example='2021-10-09T04:54:08Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', example='HighAvailability'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='gp-bp***************'),
      DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
      DBInstanceMode?: string(name='DBInstanceMode', example='StorageElastic'),
      DBInstanceNetType?: string(name='DBInstanceNetType', example='2'),
      DBInstanceStatus?: string(name='DBInstanceStatus', example='Running'),
      engine?: string(name='Engine', example='gpdb'),
      engineVersion?: string(name='EngineVersion', example='6.0'),
      expireTime?: string(name='ExpireTime', example='2999-09-08T16:00:00Z'),
      instanceDeployType?: string(name='InstanceDeployType', example='cluster'),
      instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
      lockMode?: string(name='LockMode', example='Unlock'),
      lockReason?: string(name='LockReason', example='0'),
      masterNodeNum?: int32(name='MasterNodeNum', example='1'),
      payType?: string(name='PayType', example='Postpaid'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
      segNodeNum?: string(name='SegNodeNum', example='4'),
      serverlessMode?: string(name='ServerlessMode'),
      storageSize?: string(name='StorageSize', example='50'),
      storageType?: string(name='StorageType', example='cloud_essd'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='test-key'),
          value?: string(name='Value', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', description='vSwitch ID。', example='vsw-bp*******************'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp*******************'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='DBInstance')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='53EA07B7-FC2A-521B-AB7C-27**********'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(tmpReq: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeDBInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.DBInstanceCategories)) {
    request.DBInstanceCategoriesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceCategories, 'DBInstanceCategories', 'simple');
  }
  if (!Util.isUnset(tmpReq.DBInstanceModes)) {
    request.DBInstanceModesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceModes, 'DBInstanceModes', 'simple');
  }
  if (!Util.isUnset(tmpReq.DBInstanceStatuses)) {
    request.DBInstanceStatusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceStatuses, 'DBInstanceStatuses', 'simple');
  }
  if (!Util.isUnset(tmpReq.instanceDeployTypes)) {
    request.instanceDeployTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceDeployTypes, 'InstanceDeployTypes', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.DBInstanceCategoriesShrink)) {
    query['DBInstanceCategories'] = request.DBInstanceCategoriesShrink;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceIds)) {
    query['DBInstanceIds'] = request.DBInstanceIds;
  }
  if (!Util.isUnset(request.DBInstanceModesShrink)) {
    query['DBInstanceModes'] = request.DBInstanceModesShrink;
  }
  if (!Util.isUnset(request.DBInstanceStatusesShrink)) {
    query['DBInstanceStatuses'] = request.DBInstanceStatusesShrink;
  }
  if (!Util.isUnset(request.instanceDeployTypesShrink)) {
    query['InstanceDeployTypes'] = request.instanceDeployTypesShrink;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstances',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDataBackupsRequest {
  backupId?: string(name='BackupId', example='327329803'),
  backupMode?: string(name='BackupMode', example='Automated'),
  backupStatus?: string(name='BackupStatus', example='Success'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxx'),
  dataType?: string(name='DataType', example='DATA'),
  endTime?: string(name='EndTime', example='2011-06-01T16:00Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  startTime?: string(name='StartTime', example='2011-06-01T15:00Z'),
}

model DescribeDataBackupsResponseBody = {
  items?: [ 
    {
      backupEndTime?: string(name='BackupEndTime', example='2011-06-01T17:00Z'),
      backupEndTimeLocal?: string(name='BackupEndTimeLocal', example='2011-05-30 03:29:00'),
      backupMode?: string(name='BackupMode', example='Automated'),
      backupSetId?: string(name='BackupSetId', example='327329803'),
      backupSize?: long(name='BackupSize', example='2167808'),
      backupStartTime?: string(name='BackupStartTime', example='2011-06-01T17:00Z'),
      backupStartTimeLocal?: string(name='BackupStartTimeLocal', example='2011-05-30 03:29:00'),
      backupStatus?: string(name='BackupStatus', example='Success'),
      baksetName?: string(name='BaksetName', example='restorepoint_xxx'),
      consistentTime?: long(name='ConsistentTime', example='1576506856'),
      DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxx'),
      dataType?: string(name='DataType', example='DATA'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalCount?: int32(name='TotalCount', example='300'),
}

model DescribeDataBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataBackupsResponseBody(name='body'),
}

async function describeDataBackupsWithOptions(request: DescribeDataBackupsRequest, runtime: Util.RuntimeOptions): DescribeDataBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.backupMode)) {
    query['BackupMode'] = request.backupMode;
  }
  if (!Util.isUnset(request.backupStatus)) {
    query['BackupStatus'] = request.backupStatus;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataBackups',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataBackups(request: DescribeDataBackupsRequest): DescribeDataBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataBackupsWithOptions(request, runtime);
}

model DescribeDataShareInstancesRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  searchValue?: string(name='SearchValue', example='gp-bp***************'),
}

model DescribeDataShareInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
      DBInstanceMode?: string(name='DBInstanceMode', example='Serverless'),
      dataShareStatus?: string(name='DataShareStatus', example='opened'),
      description?: string(name='Description', example='gp-bp***************'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
    }
  ](name='DBInstance')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D5**********'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeDataShareInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataShareInstancesResponseBody(name='body'),
}

async function describeDataShareInstancesWithOptions(request: DescribeDataShareInstancesRequest, runtime: Util.RuntimeOptions): DescribeDataShareInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataShareInstances',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataShareInstances(request: DescribeDataShareInstancesRequest): DescribeDataShareInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataShareInstancesWithOptions(request, runtime);
}

model DescribeDataSharePerformanceRequest {
  endTime?: string(name='EndTime', example='2022-08-03T15:10Z'),
  key?: string(name='Key', example='adbpg_datashare_topic_count'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', example='2022-08-03T15:00Z'),
}

model DescribeDataSharePerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', example='2022-08-03T15:10Z'),
  performanceKeys?: [ 
    {
      name?: string(name='Name', example='adbpg_datashare_topic_count'),
      series?: [ 
        {
          name?: string(name='Name', example='adbpg_datashare_topic_count'),
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit', example='int'),
    }
  ](name='PerformanceKeys'),
  requestId?: string(name='RequestId', example='BBE00C04-A3E8-4114-881D-0480A72CB92E'),
  startTime?: string(name='StartTime', example='2022-08-03T15:00Z'),
}

model DescribeDataSharePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSharePerformanceResponseBody(name='body'),
}

async function describeDataSharePerformanceWithOptions(request: DescribeDataSharePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDataSharePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataSharePerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataSharePerformance(request: DescribeDataSharePerformanceRequest): DescribeDataSharePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataSharePerformanceWithOptions(request, runtime);
}

model DescribeDiagnosisDimensionsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  databases?: [ string ](name='Databases'),
  requestId?: string(name='RequestId', example='9ADCAACA-E0E8-5319-AE3B-E260E957BDF9'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

async function describeDiagnosisDimensionsWithOptions(request: DescribeDiagnosisDimensionsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisDimensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisDimensions',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisDimensionsWithOptions(request, runtime);
}

model DescribeDiagnosisMonitorPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='adbtest'),
  endTime?: string(name='EndTime', example='2022-05-07T07:59Z'),
  queryCondition?: string(name='QueryCondition', example='{"Type":"maxCost", "Value":"100"}'),
  startTime?: string(name='StartTime', example='2022-05-07T06:59Z'),
  user?: string(name='User', example='adbpguser'),
}

model DescribeDiagnosisMonitorPerformanceResponseBody = {
  performances?: [ 
    {
      cost?: int32(name='Cost', example='1'),
      database?: string(name='Database', example='adbtest'),
      queryID?: string(name='QueryID', example='2022042612465401000000012903151998970'),
      startTime?: long(name='StartTime', example='1651877940000'),
      status?: string(name='Status', example='finished'),
      user?: string(name='User', example='adbpguser'),
    }
  ](name='Performances'),
  performancesThreshold?: int32(name='PerformancesThreshold', example='10000'),
  performancesTruncated?: boolean(name='PerformancesTruncated', example='false'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeDiagnosisMonitorPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisMonitorPerformanceResponseBody(name='body'),
}

async function describeDiagnosisMonitorPerformanceWithOptions(request: DescribeDiagnosisMonitorPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisMonitorPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisMonitorPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisMonitorPerformance(request: DescribeDiagnosisMonitorPerformanceRequest): DescribeDiagnosisMonitorPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisMonitorPerformanceWithOptions(request, runtime);
}

model DescribeDiagnosisRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='adbtest'),
  endTime?: string(name='EndTime', example='2022-05-07T07:59Z'),
  keyword?: string(name='Keyword', example='SELECT'),
  order?: string(name='Order', example='null'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryCondition?: string(name='QueryCondition', example='{ "Type":"maxCost", "Value":"100" }'),
  startTime?: string(name='StartTime', example='2022-05-07T06:59Z'),
  user?: string(name='User', example='adbpguser'),
}

model DescribeDiagnosisRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', example='adbtest'),
      duration?: int32(name='Duration', example='1'),
      queryID?: string(name='QueryID', example='2022042612465401000000012903151998970'),
      SQLStmt?: string(name='SQLStmt', example='SELECT * FROM t1,t2 WHERE t1.id=t2.id;'),
      SQLTruncated?: boolean(name='SQLTruncated', example='false'),
      SQLTruncatedThreshold?: int32(name='SQLTruncatedThreshold', example='5120'),
      sessionID?: string(name='SessionID', example='50'),
      startTime?: long(name='StartTime', example='1651877940000'),
      status?: string(name='Status', example='finished'),
      user?: string(name='User', example='adbpguser'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

async function describeDiagnosisRecordsWithOptions(request: DescribeDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisRecordsWithOptions(request, runtime);
}

model DescribeDiagnosisSQLInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='adbtest'),
  queryID?: string(name='QueryID', example='71403480878****'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  database?: string(name='Database', example='adbtest'),
  duration?: int32(name='Duration', example='16'),
  maxOutputRows?: string(name='MaxOutputRows', example='10'),
  queryID?: string(name='QueryID', example='71403480878****'),
  queryPlan?: string(name='QueryPlan', example='{\\"children\\":********\\"startTime\\":1660719602199}'),
  requestId?: string(name='RequestId', example='425AAA6A-63E0-1929-A1CE-3D9036CBC463'),
  SQLStmt?: string(name='SQLStmt', example='select n_live_tup, n_live_tup + n_dead_tup, pg_relation_size(table_name), last_vacuum from pg_stat_user_tables where relid = table_name::regclass'),
  sessionID?: string(name='SessionID', example='658****'),
  sortedMetrics?: string(name='SortedMetrics', example='{\\"costSort\\":******:\\"Seq Scan-9\\",\\"value\\":0.0}]}'),
  startTime?: long(name='StartTime', example='1660719602199'),
  status?: string(name='Status', example='finished'),
  textPlan?: string(name='TextPlan', example='******'),
  user?: string(name='User', example='adbpguser'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

async function describeDiagnosisSQLInfoWithOptions(request: DescribeDiagnosisSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisSQLInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.queryID)) {
    query['QueryID'] = request.queryID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisSQLInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisSQLInfoWithOptions(request, runtime);
}

model DescribeDownloadRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId', example='1150'),
      downloadUrl?: string(name='DownloadUrl', example='https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****'),
      exceptionMsg?: string(name='ExceptionMsg', example='Error message'),
      fileName?: string(name='FileName', example='20220509113448-20220509173448.csv'),
      status?: string(name='Status', example='finished'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

async function describeDownloadRecordsWithOptions(request: DescribeDownloadRecordsRequest, runtime: Util.RuntimeOptions): DescribeDownloadRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadRecordsWithOptions(request, runtime);
}

model DescribeHealthStatusRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  key?: string(name='Key', example='node_master_status,node_master_connection_status,node_segment_connection_status,node_segment_disk_status'),
}

model DescribeHealthStatusResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', example='D97B4191-104D-10CE-8BC5-53**********'),
  status?: {
    adbgpSegmentDiskUsagePercentMax?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.52'),
    }(name='adbgp_segment_disk_usage_percent_max'),
    adbpgConnectionStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.71'),
    }(name='adbpg_connection_status'),
    adbpgDiskStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.52'),
    }(name='adbpg_disk_status'),
    adbpgDiskUsagePercent?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.52'),
    }(name='adbpg_disk_usage_percent'),
    adbpgMasterDiskUsagePercentMax?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.34'),
    }(name='adbpg_master_disk_usage_percent_max'),
    adbpgMasterStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1'),
    }(name='adbpg_master_status'),
    adbpgSegmentStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1'),
    }(name='adbpg_segment_status'),
    adbpgStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1'),
    }(name='adbpg_status'),
    nodeMasterConnectionStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.71'),
    }(name='node_master_connection_status'),
    nodeMasterStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1'),
    }(name='node_master_status'),
    nodeSegmentConnectionStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='0.48'),
    }(name='node_segment_connection_status'),
    nodeSegmentDiskStatus?: {
      status?: string(name='Status', example='healthy'),
      value?: float(name='Value', example='1.52'),
    }(name='node_segment_disk_status'),
  }(name='Status', example='{"node_master_connection_status":{"Status":"healthy","Value":1.6}}'),
}

model DescribeHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthStatusResponseBody(name='body'),
}

async function describeHealthStatusWithOptions(request: DescribeHealthStatusRequest, runtime: Util.RuntimeOptions): DescribeHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthStatus',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthStatus(request: DescribeHealthStatusRequest): DescribeHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthStatusWithOptions(request, runtime);
}

model DescribeLogBackupsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxx'),
  endTime?: string(name='EndTime', example='2011-06-15T16:00Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  startTime?: string(name='StartTime', example='2011-06-15T15:00Z'),
}

model DescribeLogBackupsResponseBody = {
  items?: [ 
    {
      backupId?: string(name='BackupId', example='327329803'),
      DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxx'),
      logFileName?: string(name='LogFileName', example='000000010000000300000006'),
      logFileSize?: long(name='LogFileSize', example='2167808'),
      logTime?: string(name='LogTime', example='2021-02-24T10:55:47Z'),
      segmentName?: string(name='SegmentName', example='segment-x'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  totalCount?: int32(name='TotalCount', example='30'),
  totalLogSize?: long(name='TotalLogSize', example='1073741028'),
}

model DescribeLogBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogBackupsResponseBody(name='body'),
}

async function describeLogBackupsWithOptions(request: DescribeLogBackupsRequest, runtime: Util.RuntimeOptions): DescribeLogBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogBackups',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogBackups(request: DescribeLogBackupsRequest): DescribeLogBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupsWithOptions(request, runtime);
}

model DescribeModifyParameterLogRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxx'),
  endTime?: string(name='EndTime', example='2020-05-05T11:22:22Z'),
  startTime?: string(name='StartTime', example='2020-02-02T11:22:22Z'),
}

model DescribeModifyParameterLogResponseBody = {
  changelogs?: [ 
    {
      effectTime?: string(name='EffectTime', example='2020-05-05T11:22:22Z'),
      parameterName?: string(name='ParameterName', example='testkey'),
      parameterValid?: string(name='ParameterValid', example='true'),
      parameterValueAfter?: string(name='ParameterValueAfter', example='100'),
      parameterValueBefore?: string(name='ParameterValueBefore', example='200'),
    }
  ](name='Changelogs'),
  requestId?: string(name='RequestId', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeModifyParameterLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModifyParameterLogResponseBody(name='body'),
}

async function describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: Util.RuntimeOptions): DescribeModifyParameterLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeModifyParameterLog',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModifyParameterLogWithOptions(request, runtime);
}

model DescribeParametersRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      currentValue?: string(name='CurrentValue', example='10800000'),
      forceRestartInstance?: string(name='ForceRestartInstance', example='false'),
      isChangeableConfig?: string(name='IsChangeableConfig', example='true'),
      optionalRange?: string(name='OptionalRange', example='[0-2147483647]'),
      parameterDescription?: string(name='ParameterDescription', example='Sets the maximum allowed duration of any statement，A value of 0 turns off the timeout.'),
      parameterName?: string(name='ParameterName', example='statement_timeout'),
      parameterValue?: string(name='ParameterValue', example='10800000'),
    }
  ](name='Parameters'),
  requestId?: string(name='RequestId', example='62506167-D284-562A-B7C2-0A**********'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameters',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeRdsVSwitchsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId', example='vpc-bp*******************'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model DescribeRdsVSwitchsResponseBody = {
  requestId?: string(name='RequestId', example='B0BA251D-6854-5A99-A964-3C**********'),
  vSwitches?: {
    vSwitch?: [ 
      {
        aliUid?: string(name='AliUid', example='null'),
        bid?: string(name='Bid', example='null'),
        cidrBlock?: string(name='CidrBlock', example='192.**.**.0/24'),
        gmtCreate?: string(name='GmtCreate', example='null'),
        gmtModified?: string(name='GmtModified', example='null'),
        isDefault?: boolean(name='IsDefault', example='false'),
        izNo?: string(name='IzNo', example='cn-hangzhou-h'),
        regionNo?: string(name='RegionNo', example='null'),
        status?: string(name='Status', example='Available'),
        vSwitchId?: string(name='VSwitchId', description='vSwitch ID。', example='vsw-bp*******************'),
        vSwitchName?: string(name='VSwitchName', example='vsw-name'),
      }
    ](name='VSwitch'),
  }(name='VSwitches'),
}

model DescribeRdsVSwitchsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsVSwitchsResponseBody(name='body'),
}

async function describeRdsVSwitchsWithOptions(request: DescribeRdsVSwitchsRequest, runtime: Util.RuntimeOptions): DescribeRdsVSwitchsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsVSwitchs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsVSwitchs(request: DescribeRdsVSwitchsRequest): DescribeRdsVSwitchsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVSwitchsWithOptions(request, runtime);
}

model DescribeRdsVpcsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model DescribeRdsVpcsResponseBody = {
  requestId?: string(name='RequestId', example='53924AF0-1628-5AA2-9C95-D4**********'),
  vpcs?: {
    vpc?: [ 
      {
        aliUid?: string(name='AliUid', example='null'),
        bid?: string(name='Bid', example='null'),
        cidrBlock?: string(name='CidrBlock', example='10.**.**.0/8'),
        gmtCreate?: string(name='GmtCreate', example='null'),
        gmtModified?: string(name='GmtModified', example='null'),
        isDefault?: boolean(name='IsDefault', example='true'),
        regionNo?: string(name='RegionNo', example='cn-hangzhou'),
        status?: string(name='Status', example='Available'),
        vSwitchs?: [ 
          {
            cidrBlock?: string(name='CidrBlock', example='10.**.**.0/24'),
            gmtCreate?: string(name='GmtCreate', example='null'),
            gmtModified?: string(name='GmtModified', example='null'),
            isDefault?: boolean(name='IsDefault', example='true'),
            izNo?: string(name='IzNo', example='cn-hangzhou-i'),
            status?: string(name='Status', example='Available'),
            vSwitchId?: string(name='VSwitchId', description='vSwitch ID。', example='vsw-bp*******************'),
            vSwitchName?: string(name='VSwitchName', example='vsw-name'),
          }
        ](name='VSwitchs'),
        vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp*******************'),
        vpcName?: string(name='VpcName', example='vpc-name'),
      }
    ](name='Vpc'),
  }(name='Vpcs'),
}

model DescribeRdsVpcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsVpcsResponseBody(name='body'),
}

async function describeRdsVpcsWithOptions(request: DescribeRdsVpcsRequest, runtime: Util.RuntimeOptions): DescribeRdsVpcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsVpcs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsVpcs(request: DescribeRdsVpcsRequest): DescribeRdsVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVpcsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  region?: string(name='Region', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', example='true'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-c'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='FF8EB261-5447-4B1B-9F14-294CEA008A9F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeResourceUsageRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-rj***************'),
}

model DescribeResourceUsageResponseBody = {
  backupSize?: long(name='BackupSize', example='26624'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-rj***************'),
  dataSize?: long(name='DataSize', example='405798912'),
  diskUsed?: long(name='DiskUsed', example='607125504'),
  engine?: string(name='Engine', example='gpdb'),
  logSize?: long(name='LogSize', example='201326592'),
  requestId?: string(name='RequestId', example='47AB1806-37FF-5E92-A91E-F2**********'),
}

model DescribeResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceUsageResponseBody(name='body'),
}

async function describeResourceUsageWithOptions(request: DescribeResourceUsageRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceUsage',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageWithOptions(request, runtime);
}

model DescribeSQLCollectorPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
}

model DescribeSQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus', example='Enable'),
}

model DescribeSQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLCollectorPolicyResponseBody(name='body'),
}

async function describeSQLCollectorPolicyWithOptions(request: DescribeSQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLCollectorPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): DescribeSQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorPolicyWithOptions(request, runtime);
}

model DescribeSQLLogByQueryIdRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-****************'),
  queryId?: string(name='QueryId', example='111111'),
}

model DescribeSQLLogByQueryIdResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', example='testadmin'),
      DBName?: string(name='DBName', example='adbpgadmin'),
      DBRole?: string(name='DBRole', example='master'),
      executeCost?: float(name='ExecuteCost', example='1'),
      executeState?: string(name='ExecuteState', example='success'),
      operationClass?: string(name='OperationClass', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', example='select'),
      queryId?: string(name='QueryId', example='111111'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLPlan?: string(name='SQLPlan', example='****'),
      SQLText?: string(name='SQLText', example='select ** from **'),
      scanRowCounts?: long(name='ScanRowCounts', example='1'),
      sliceIds?: [ string ](name='SliceIds'),
      sourceIP?: string(name='SourceIP', example='192.**.**.121'),
      sourcePort?: int32(name='SourcePort', example='50514'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId', example='07F6177E-****-****-****-0723301340F3'),
}

model DescribeSQLLogByQueryIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogByQueryIdResponseBody(name='body'),
}

async function describeSQLLogByQueryIdWithOptions(request: DescribeSQLLogByQueryIdRequest, runtime: Util.RuntimeOptions): DescribeSQLLogByQueryIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogByQueryId',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogByQueryId(request: DescribeSQLLogByQueryIdRequest): DescribeSQLLogByQueryIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogByQueryIdWithOptions(request, runtime);
}

model DescribeSQLLogCountRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
  database?: string(name='Database', example='testdb'),
  endTime?: string(name='EndTime', example='2020-12-14T11:22Z'),
  executeCost?: string(name='ExecuteCost', example='100'),
  executeState?: string(name='ExecuteState', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', example='10'),
  operationClass?: string(name='OperationClass', example='DQL'),
  operationType?: string(name='OperationType', example='SELECT'),
  queryKeywords?: string(name='QueryKeywords', example='test'),
  sourceIP?: string(name='SourceIP', example='10.**.**.13'),
  startTime?: string(name='StartTime', example='2020-12-12T11:22Z'),
  user?: string(name='User', example='adbpgadmin'),
}

model DescribeSQLLogCountResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='gp-xxxxxxxx'),
  endTime?: string(name='EndTime', example='2020-12-14T11:22Z'),
  items?: [ 
    {
      name?: string(name='Name', example='gp-xxxxxxxx'),
      series?: [ 
        {
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId', example='7565770E-7C45-462D-BA4A-8A**********'),
  startTime?: string(name='StartTime', example='2020-12-12T11:22Z'),
}

model DescribeSQLLogCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogCountResponseBody(name='body'),
}

async function describeSQLLogCountWithOptions(request: DescribeSQLLogCountRequest, runtime: Util.RuntimeOptions): DescribeSQLLogCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogCount',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogCount(request: DescribeSQLLogCountRequest): DescribeSQLLogCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogCountWithOptions(request, runtime);
}

model DescribeSQLLogFilesRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxxx'),
  fileName?: string(name='FileName', example='log20200202'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
}

model DescribeSQLLogFilesResponseBody = {
  items?: {
    logFile?: [ 
    {
      fileID?: string(name='FileID', example='1023423423'),
      logDownloadURL?: string(name='LogDownloadURL', example='xxxxxx'),
      logEndTime?: string(name='LogEndTime', example='2019-02-24T14:10Z'),
      logSize?: string(name='LogSize', example='100210'),
      logStartTime?: string(name='LogStartTime', example='2019-02-24T12:10Z'),
      logStatus?: string(name='LogStatus', example='Success'),
    }
  ](name='LogFile')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='66E164C1-D7F2-4D85-849D-E2883FCFFBA5'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeSQLLogFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogFilesResponseBody(name='body'),
}

async function describeSQLLogFilesWithOptions(request: DescribeSQLLogFilesRequest, runtime: Util.RuntimeOptions): DescribeSQLLogFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogFiles',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogFiles(request: DescribeSQLLogFilesRequest): DescribeSQLLogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogFilesWithOptions(request, runtime);
}

model DescribeSQLLogRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxxx'),
  database?: string(name='Database', example='testdb'),
  endTime?: string(name='EndTime', example='2018-07-09T08:50:20Z'),
  form?: string(name='Form', example='Stream'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryKeywords?: string(name='QueryKeywords', example='keywords1'),
  startTime?: string(name='StartTime', example='2018-07-09T04:50:20Z'),
  user?: string(name='User', example='testacc'),
}

model DescribeSQLLogRecordsResponseBody = {
  items?: {
    SQLRecord?: [ 
    {
      accountName?: string(name='AccountName', example='testacc'),
      DBName?: string(name='DBName', example='testdb'),
      executeTime?: string(name='ExecuteTime', example='2018-07-09T08:50:20Z'),
      hostAddress?: string(name='HostAddress', example='127.0.0.1'),
      returnRowCounts?: long(name='ReturnRowCounts', example='122'),
      SQLText?: string(name='SQLText', example='update test.zxb set id=0 limit 1'),
      threadID?: string(name='ThreadID', example='723'),
      totalExecutionTimes?: long(name='TotalExecutionTimes', example='130'),
    }
  ](name='SQLRecord')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='9B24F29F-BA7F-47A3-838E-C6A993888388'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeSQLLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogRecordsResponseBody(name='body'),
}

async function describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.form)) {
    query['Form'] = request.form;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogRecordsWithOptions(request, runtime);
}

model DescribeSQLLogsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
  database?: string(name='Database', example='adbpgadmin'),
  endTime?: string(name='EndTime', example='2021-03-17T06:30Z'),
  executeCost?: string(name='ExecuteCost', example='1'),
  executeState?: string(name='ExecuteState', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', example='1'),
  operationClass?: string(name='OperationClass', example='DQL'),
  operationType?: string(name='OperationType', example='SELECT'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  queryKeywords?: string(name='QueryKeywords', example='select 1'),
  sourceIP?: string(name='SourceIP', example='100.**.**.90'),
  startTime?: string(name='StartTime', example='2021-03-10T06:30Z'),
  user?: string(name='User', example='testadmin'),
}

model DescribeSQLLogsResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', example='testadmin'),
      DBName?: string(name='DBName', example='adbpgadmin'),
      DBRole?: string(name='DBRole', example='master'),
      executeCost?: float(name='ExecuteCost', example='2'),
      executeState?: string(name='ExecuteState', example='success'),
      operationClass?: string(name='OperationClass', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', example='SELECT'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLPlan?: string(name='SQLPlan', example='""'),
      SQLText?: string(name='SQLText', example='select 1'),
      scanRowCounts?: long(name='ScanRowCounts', example='1'),
      sourceIP?: string(name='SourceIP', example='100.**.**.90'),
      sourcePort?: int32(name='SourcePort', example='50514'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='A7941C94-B92F-46A0-BD3E-2D**********'),
}

model DescribeSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsResponseBody(name='body'),
}

async function describeSQLLogsWithOptions(request: DescribeSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogs(request: DescribeSQLLogsRequest): DescribeSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsWithOptions(request, runtime);
}

model DescribeSQLLogsOnSliceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
  executeState?: string(name='ExecuteState', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', example='10'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryId?: string(name='QueryId', example='11111'),
  sliceId?: string(name='SliceId', example='1'),
}

model DescribeSQLLogsOnSliceResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='07F6177E-6DE4-408A-BB4F-xxxxxxxxxxxx'),
  sliceLogItems?: [ 
    {
      executeCost?: float(name='ExecuteCost', example='100'),
      executeStatus?: string(name='ExecuteStatus', example='success'),
      operationExecuteEndTime?: string(name='OperationExecuteEndTime', example='2021-08-12T04:37:02Z'),
      operationExecuteTime?: string(name='OperationExecuteTime', example='2021-08-12T04:37:02Z'),
      peakMemory?: float(name='PeakMemory', example='128B'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      segmentId?: string(name='SegmentId', description='Segment ID。', example='gp-xxxxxxxxxx'),
      segmentName?: string(name='SegmentName', example='gp-xxxxxxxxxx'),
    }
  ](name='SliceLogItems'),
}

model DescribeSQLLogsOnSliceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsOnSliceResponseBody(name='body'),
}

async function describeSQLLogsOnSliceWithOptions(request: DescribeSQLLogsOnSliceRequest, runtime: Util.RuntimeOptions): DescribeSQLLogsOnSliceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  if (!Util.isUnset(request.sliceId)) {
    query['SliceId'] = request.sliceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogsOnSlice',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogsOnSlice(request: DescribeSQLLogsOnSliceRequest): DescribeSQLLogsOnSliceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsOnSliceWithOptions(request, runtime);
}

model DescribeSQLLogsV2Request {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
  database?: string(name='Database', example='adbpgadmin'),
  endTime?: string(name='EndTime', example='2022-03-17T06:30Z'),
  executeCost?: string(name='ExecuteCost', example='1'),
  executeState?: string(name='ExecuteState', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', example='1'),
  operationClass?: string(name='OperationClass', example='DQL'),
  operationType?: string(name='OperationType', example='SELECT'),
  pageNumber?: string(name='PageNumber', example='10'),
  pageSize?: string(name='PageSize', example='1'),
  queryKeywords?: string(name='QueryKeywords', example='select 1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  sourceIP?: string(name='SourceIP', example='100.XX.XX.90'),
  startTime?: string(name='StartTime', example='2022-03-10T06:30Z'),
  user?: string(name='User', example='testadmin'),
}

model DescribeSQLLogsV2ResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', example='testadmin'),
      DBName?: string(name='DBName', example='adbpgadmin'),
      DBRole?: string(name='DBRole', example='master'),
      executeCost?: float(name='ExecuteCost', example='2'),
      executeState?: string(name='ExecuteState', example='success'),
      operationClass?: string(name='OperationClass', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', example='SELECT'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLText?: string(name='SQLText', example='select 1'),
      scanRowCounts?: long(name='ScanRowCounts', example='1'),
      sourceIP?: string(name='SourceIP', example='100.**.**.90'),
      sourcePort?: int32(name='SourcePort', example='50514'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='A7941C94-B92F-46A0-BD3E-2D**********'),
}

model DescribeSQLLogsV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsV2ResponseBody(name='body'),
}

async function describeSQLLogsV2WithOptions(request: DescribeSQLLogsV2Request, runtime: Util.RuntimeOptions): DescribeSQLLogsV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogsV2',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogsV2(request: DescribeSQLLogsV2Request): DescribeSQLLogsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsV2WithOptions(request, runtime);
}

model DescribeSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='******'),
  hasSampleData?: boolean(name='HasSampleData', example='true'),
  requestId?: string(name='RequestId', example='84CD7CAF-FA7B-5178-B19F-D8CDE307D5FA_8111'),
}

model DescribeSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSampleDataResponseBody(name='body'),
}

async function describeSampleDataWithOptions(request: DescribeSampleDataRequest, runtime: Util.RuntimeOptions): DescribeSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSampleData(request: DescribeSampleDataRequest): DescribeSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSampleDataWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxx'),
  DBName?: string(name='DBName', example='test'),
  endTime?: string(name='EndTime', example='2018-07-19T09:00:08Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  SQLId?: long(name='SQLId', description='SQL ID。', example='143242632'),
  startTime?: string(name='StartTime', example='2018-07-09T09:00:08Z'),
}

model DescribeSlowLogRecordsResponseBody = {
  engine?: string(name='Engine', example='gpdb'),
  items?: {
    SQLSlowRecord?: [ 
    {
      DBName?: string(name='DBName', example='test'),
      executionStartTime?: string(name='ExecutionStartTime', example='2018-07-09T09:00:08Z'),
      hostAddress?: string(name='HostAddress', example='127.0.0.1'),
      lockTimes?: long(name='LockTimes', example='12'),
      parseRowCounts?: long(name='ParseRowCounts', example='125'),
      queryTimes?: long(name='QueryTimes', example='123'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLText?: string(name='SQLText', example='update test.zxb set id=0 limit 1'),
    }
  ](name='SQLSlowRecord')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='542BB8D6-4268-45CC-A557-B03EFD7AB30A'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    query['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowLogRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeSlowSQLLogsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-****************'),
  database?: string(name='Database', example='adbpgadmin'),
  endTime?: string(name='EndTime', example='2021-03-17T06:30:00Z'),
  executeState?: string(name='ExecuteState', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', example='1'),
  operationClass?: string(name='OperationClass', example='DQL'),
  operationType?: string(name='OperationType', example='SELECT'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryKeywords?: string(name='QueryKeywords', example='*****'),
  sourceIP?: string(name='SourceIP', example='192.**.**.121'),
  startTime?: string(name='StartTime', example='2021-03-10T06:30:00Z'),
  user?: string(name='User', example='testadmin'),
}

model DescribeSlowSQLLogsResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', example='testadmin'),
      DBName?: string(name='DBName', example='adbpgadmin'),
      DBRole?: string(name='DBRole', example='master'),
      executeCost?: float(name='ExecuteCost', example='2'),
      executeState?: string(name='ExecuteState', example='success'),
      operationClass?: string(name='OperationClass', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', example='SELECT'),
      queryId?: string(name='QueryId', example='111111'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLPlan?: string(name='SQLPlan', example='****'),
      SQLText?: string(name='SQLText', example='select ** from **'),
      scanRowCounts?: long(name='ScanRowCounts', example='1'),
      sourceIP?: string(name='SourceIP', example='192.**.**.121'),
      sourcePort?: int32(name='SourcePort', example='50514'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='1'),
  requestId?: string(name='RequestId', example='07F6177E-****-****-****-0723301340F3'),
}

model DescribeSlowSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowSQLLogsResponseBody(name='body'),
}

async function describeSlowSQLLogsWithOptions(request: DescribeSlowSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeSlowSQLLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowSQLLogs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowSQLLogs(request: DescribeSlowSQLLogsRequest): DescribeSlowSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowSQLLogsWithOptions(request, runtime);
}

model DescribeSpecificationRequest {
  cpuCores?: int32(name='CpuCores', example='1'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  ownerId?: long(name='OwnerId'),
  storageType?: string(name='StorageType', example='SSD'),
  totalNodeNum?: int32(name='TotalNodeNum', example='2'),
}

model DescribeSpecificationResponseBody = {
  DBInstanceClass?: [ 
    {
      text?: string(name='Text', example='gpdb.group.segsdx1'),
      value?: string(name='Value', example='1x1C SSD'),
    }
  ](name='DBInstanceClass'),
  DBInstanceGroupCount?: [ 
    {
      text?: string(name='Text', example='2'),
      value?: string(name='Value', example='2'),
    }
  ](name='DBInstanceGroupCount'),
  requestId?: string(name='RequestId', example='2EC38F35-C2D3-56A1-A49E-61**********'),
  storageNotice?: [ 
    {
      text?: string(name='Text', example='2 CPU Cores/16GB Memory/160GB SSD Storage'),
      value?: string(name='Value', example='2 CPU Cores/16GB Memory/160GB SSD Storage'),
    }
  ](name='StorageNotice'),
}

model DescribeSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSpecificationResponseBody(name='body'),
}

async function describeSpecificationWithOptions(request: DescribeSpecificationRequest, runtime: Util.RuntimeOptions): DescribeSpecificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cpuCores)) {
    query['CpuCores'] = request.cpuCores;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.totalNodeNum)) {
    query['TotalNodeNum'] = request.totalNodeNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSpecification',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSpecification(request: DescribeSpecificationRequest): DescribeSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpecificationWithOptions(request, runtime);
}

model DescribeSupportFeaturesRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeSupportFeaturesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', example='63E5BE60-91FF-57F1-B873-7F1EB734B93D_2724'),
  supportFeatureList?: string(name='SupportFeatureList', example='[ "sample_data", "diagnose_and_optimize" ]'),
}

model DescribeSupportFeaturesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportFeaturesResponseBody(name='body'),
}

async function describeSupportFeaturesWithOptions(request: DescribeSupportFeaturesRequest, runtime: Util.RuntimeOptions): DescribeSupportFeaturesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSupportFeatures',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportFeatures(request: DescribeSupportFeaturesRequest): DescribeSupportFeaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportFeaturesWithOptions(request, runtime);
}

model DescribeTagsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='instance'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId', example='A29EC547-B392-4340-AA4F-7C0A7B626E74'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey', example='user'),
      tagValue?: string(name='TagValue', example='test'),
    }
  ](name='Tags'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeUserEncryptionKeyListRequest {
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  kmsKeys?: [ 
    {
      keyId?: string(name='KeyId', example='0b8b1825-fd99-418f-875e-e4dec1dd8715'),
    }
  ](name='KmsKeys'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyListWithOptions(request: DescribeUserEncryptionKeyListRequest, runtime: Util.RuntimeOptions): DescribeUserEncryptionKeyListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserEncryptionKeyList',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserEncryptionKeyListWithOptions(request, runtime);
}

model DescribeWaitingSQLInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='test'),
  PID?: string(name='PID', example='100'),
}

model DescribeWaitingSQLInfoResponseBody = {
  database?: string(name='Database', example='test'),
  items?: [ 
    {
      application?: string(name='Application', example='DataGrip 2022.1.5'),
      blockedByApplication?: string(name='BlockedByApplication', example='DataGrip 2022.1.5'),
      blockedByPID?: string(name='BlockedByPID', example='110'),
      blockedBySQLStmt?: string(name='BlockedBySQLStmt', example='Select * from t1;'),
      blockedByUser?: string(name='BlockedByUser', example='testUser1'),
      grantLocks?: string(name='GrantLocks', example='ShareLock,AccessExclusiveLock'),
      notGrantLocks?: string(name='NotGrantLocks', example='AccessShareLock'),
      PID?: string(name='PID', example='100'),
      SQLStmt?: string(name='SQLStmt', example='Select * from t1,t2 where t1.id=t2.id;'),
      user?: string(name='User', example='testUser'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeWaitingSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingSQLInfoResponseBody(name='body'),
}

async function describeWaitingSQLInfoWithOptions(request: DescribeWaitingSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeWaitingSQLInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.PID)) {
    query['PID'] = request.PID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingSQLInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWaitingSQLInfo(request: DescribeWaitingSQLInfoRequest): DescribeWaitingSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingSQLInfoWithOptions(request, runtime);
}

model DescribeWaitingSQLRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='test'),
  endTime?: string(name='EndTime', example='2022-08-20T07:59Z'),
  keyword?: string(name='Keyword', example='table'),
  order?: string(name='Order', example='{"Field":"StartTime","Type":"Desc"}'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryCondition?: string(name='QueryCondition', example='{"Type":"maxCost","Value":"10"}'),
  startTime?: string(name='StartTime', example='2022-08-15T06:59Z'),
  user?: string(name='User', example='testUser'),
}

model DescribeWaitingSQLRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', example='test'),
      PID?: string(name='PID', example='100'),
      SQLStmt?: string(name='SQLStmt', example='Select * from t1,t2 where t1.id=t2.id;'),
      sessionID?: string(name='SessionID', example='50'),
      startTime?: long(name='StartTime', example='1660902033374'),
      status?: string(name='Status', example='LockWaiting'),
      user?: string(name='User', example='testUser'),
      waitingTime?: long(name='WaitingTime', example='26911000'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeWaitingSQLRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingSQLRecordsResponseBody(name='body'),
}

async function describeWaitingSQLRecordsWithOptions(request: DescribeWaitingSQLRecordsRequest, runtime: Util.RuntimeOptions): DescribeWaitingSQLRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingSQLRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWaitingSQLRecords(request: DescribeWaitingSQLRecordsRequest): DescribeWaitingSQLRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingSQLRecordsWithOptions(request, runtime);
}

model DownloadDiagnosisRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='adbtest'),
  endTime?: string(name='EndTime', example='2022-05-07T07:59Z'),
  lang?: string(name='Lang', example='zh'),
  queryCondition?: string(name='QueryCondition', example='{ "Type":"maxCost", "Value":"100" }'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', example='2022-05-07T06:59Z'),
  user?: string(name='User', example='adbpguser'),
}

model DownloadDiagnosisRecordsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  downloadId?: string(name='DownloadId', example='11'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

async function downloadDiagnosisRecordsWithOptions(request: DownloadDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DownloadDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadDiagnosisRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDiagnosisRecordsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='gp-xxxxxxxxxx'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='5414A4E5-4C36-4461-95FC-23757A20B5F8'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='gp-xxxxxxxxxx'),
      resourceType?: string(name='ResourceType', example='instance'),
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValue?: string(name='TagValue', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription', example='testAccoutdescribe'),
  accountName?: string(name='AccountName', example='testAccout'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='99BBBD5E-B5D8-4FC8-B8BF-FB1A0A38BBA2'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', example='7'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxx'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint', example='true'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', example='Tuesday，Thursday，Saturday'),
  preferredBackupTime?: string(name='PreferredBackupTime', example='15:00Z-16:00Z'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod', example='8'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='DA147739-AEAD-4417-9089-65E9B1D8240D'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupRetentionPeriod)) {
    query['BackupRetentionPeriod'] = request.backupRetentionPeriod;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.enableRecoveryPoint)) {
    query['EnableRecoveryPoint'] = request.enableRecoveryPoint;
  }
  if (!Util.isUnset(request.preferredBackupPeriod)) {
    query['PreferredBackupPeriod'] = request.preferredBackupPeriod;
  }
  if (!Util.isUnset(request.preferredBackupTime)) {
    query['PreferredBackupTime'] = request.preferredBackupTime;
  }
  if (!Util.isUnset(request.recoveryPointPeriod)) {
    query['RecoveryPointPeriod'] = request.recoveryPointPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionModeRequest {
  connectionMode?: string(name='ConnectionMode', example='Safe'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-rj***************'),
}

model ModifyDBInstanceConnectionModeResponseBody = {
  requestId?: string(name='RequestId', example='8361E350-4CCC-4D28-B020-55**********'),
}

model ModifyDBInstanceConnectionModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionModeResponseBody(name='body'),
}

async function modifyDBInstanceConnectionModeWithOptions(request: ModifyDBInstanceConnectionModeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionMode)) {
    query['ConnectionMode'] = request.connectionMode;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionMode',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): ModifyDBInstanceConnectionModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionModeWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='gp-xxxxxxxx'),
  currentConnectionString?: string(name='CurrentConnectionString', example='gp-xxxxxxx.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxx'),
  port?: string(name='Port', example='3432'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId', example='29B0BF34-D069-4495-92C7-FA6D94528A9E'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionString',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription', example='test'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='107BE202-D1A2-479E-98E0-A8**********'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceDescription',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  endTime?: string(name='EndTime', example='03:00Z'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', example='02:00Z'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', example='CA9A34C8-AC95-413B-AC6A-CE**********'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceMaintainTime',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkTypeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.10.XX.XX'),
  VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-bp19ame5m1r3oejns****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1cpq8mr64paltkb****'),
}

model ModifyDBInstanceNetworkTypeResponseBody = {
  requestId?: string(name='RequestId', example='2d0c35a9-f5da-44ba-852d-741e27b7eb0b'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceNetworkTypeResponseBody(name='body'),
}

async function modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceNetworkType',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkTypeWithOptions(request, runtime);
}

model ModifyDBInstanceResourceGroupRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-bp67acfmxazb4b****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDBInstanceResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBInstanceResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceResourceGroupResponseBody(name='body'),
}

async function modifyDBInstanceResourceGroupWithOptions(request: ModifyDBInstanceResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceResourceGroup',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceResourceGroup(request: ModifyDBInstanceResourceGroupRequest): ModifyDBInstanceResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceResourceGroupWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest {
  connectionString?: string(name='ConnectionString', example='gp-xxxxxxxxxxx-master.gpdbmaster.singapore.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxxxx'),
  SSLEnabled?: int32(name='SSLEnabled', example='1'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId', example='ADD6EA90-EECB-4C12-9F26-0B6DB58710EF'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.SSLEnabled)) {
    query['SSLEnabled'] = request.SSLEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceSSL',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model ModifyParametersRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  forceRestartInstance?: boolean(name='ForceRestartInstance', example='false'),
  parameters?: string(name='Parameters', example='{"statement_timeout":"11800010"}'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId', example='3FE698B6-6579-547C-A403-07**********'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyParametersResponseBody(name='body'),
}

async function modifyParametersWithOptions(request: ModifyParametersRequest, runtime: Util.RuntimeOptions): ModifyParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.forceRestartInstance)) {
    query['ForceRestartInstance'] = request.forceRestartInstance;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyParameters',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParametersWithOptions(request, runtime);
}

model ModifySQLCollectorPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxx'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus', example='Enable'),
}

model ModifySQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId', example='4FA1F1D1-50A6-4F60-9A78-5752F2076A53'),
}

model ModifySQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySQLCollectorPolicyResponseBody(name='body'),
}

async function modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.SQLCollectorStatus)) {
    query['SQLCollectorStatus'] = request.SQLCollectorStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySQLCollectorPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorPolicyWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', example='hidden'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', example='Default'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  securityIPList?: string(name='SecurityIPList', example='127.0.0.1'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', example='871C698F-B43D-4D1D-ACD6-DF56B0F89978'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceIPArrayAttribute)) {
    query['DBInstanceIPArrayAttribute'] = request.DBInstanceIPArrayAttribute;
  }
  if (!Util.isUnset(request.DBInstanceIPArrayName)) {
    query['DBInstanceIPArrayName'] = request.DBInstanceIPArrayName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIps',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model PauseInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model PauseInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='*******'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd9********'),
  status?: boolean(name='Status', example='true'),
}

model PauseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseInstanceResponseBody(name='body'),
}

async function pauseInstanceWithOptions(request: PauseInstanceRequest, runtime: Util.RuntimeOptions): PauseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseInstanceWithOptions(request, runtime);
}

model RebalanceDBInstanceRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88**********'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
}

model RebalanceDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='5414A4E5-4C36-4461-95FC-************'),
}

model RebalanceDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebalanceDBInstanceResponseBody(name='body'),
}

async function rebalanceDBInstanceWithOptions(request: RebalanceDBInstanceRequest, runtime: Util.RuntimeOptions): RebalanceDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebalanceDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebalanceDBInstance(request: RebalanceDBInstanceRequest): RebalanceDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebalanceDBInstanceWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  addressType?: string(name='AddressType', example='Intranet'),
  currentConnectionString?: string(name='CurrentConnectionString', example='gp-**********.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-**********'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='9CEF7037-4158-4A65-BEC7-2A**********'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName', example='testaccount_1'),
  accountPassword?: string(name='AccountPassword', example='Testaccount_1'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='187C80FC-75C4-477C-BBF2-A368A36D041C'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88**********'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='A7356493-7141-4393-8951-CDA8AB5D67EC'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model ResumeInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='******'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd9********'),
  status?: boolean(name='Status', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model SetDBInstancePlanStatusRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planId?: string(name='PlanId', example='1234'),
  planStatus?: string(name='PlanStatus', example='disable'),
}

model SetDBInstancePlanStatusResponseBody = {
  errorMessage?: string(name='ErrorMessage', example='****'),
  planId?: string(name='PlanId', example='1234'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', example='success'),
}

model SetDBInstancePlanStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDBInstancePlanStatusResponseBody(name='body'),
}

async function setDBInstancePlanStatusWithOptions(request: SetDBInstancePlanStatusRequest, runtime: Util.RuntimeOptions): SetDBInstancePlanStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planStatus)) {
    query['PlanStatus'] = request.planStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDBInstancePlanStatus',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDBInstancePlanStatus(request: SetDBInstancePlanStatusRequest): SetDBInstancePlanStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDBInstancePlanStatusWithOptions(request, runtime);
}

model SetDataShareInstanceRequest {
  instanceList?: [ string ](name='InstanceList'),
  operationType?: string(name='OperationType', example='add'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model SetDataShareInstanceShrinkRequest {
  instanceListShrink?: string(name='InstanceList'),
  operationType?: string(name='OperationType', example='add'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model SetDataShareInstanceResponseBody = {
  errMessage?: string(name='ErrMessage', example='error message'),
  requestId?: string(name='RequestId', example='B4CAF581-2AC7-41AD-8940-D5**********'),
  status?: string(name='Status', example='success'),
}

model SetDataShareInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDataShareInstanceResponseBody(name='body'),
}

async function setDataShareInstanceWithOptions(tmpReq: SetDataShareInstanceRequest, runtime: Util.RuntimeOptions): SetDataShareInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new SetDataShareInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceListShrink)) {
    query['InstanceList'] = request.instanceListShrink;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataShareInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDataShareInstance(request: SetDataShareInstanceRequest): SetDataShareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataShareInstanceWithOptions(request, runtime);
}

model SwitchDBInstanceNetTypeRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='test1234'),
  DBInstanceId?: string(name='DBInstanceId', example='rm-uf6wjk5xxxxxxx'),
  port?: string(name='Port', example='3306'),
}

model SwitchDBInstanceNetTypeResponseBody = {
  requestId?: string(name='RequestId', example='FA67B751-2A2D-470C-850B-D6B93699D35C'),
}

model SwitchDBInstanceNetTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchDBInstanceNetTypeResponseBody(name='body'),
}

async function switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceNetTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchDBInstanceNetType',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceNetTypeWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='gp-xxxxxxxxxx'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='5414A4E5-4C36-4461-95FC-23**********'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnloadSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model UnloadSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='********'),
  requestId?: string(name='RequestId', example='4E42ABC3-4DBD-5343-9BCA-66B7D091311F_6914'),
  status?: boolean(name='Status', example='true'),
}

model UnloadSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnloadSampleDataResponseBody(name='body'),
}

async function unloadSampleDataWithOptions(request: UnloadSampleDataRequest, runtime: Util.RuntimeOptions): UnloadSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnloadSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unloadSampleData(request: UnloadSampleDataRequest): UnloadSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return unloadSampleDataWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='gp-xxxxxxxxxxx'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='instance'),
  tagKey?: [ string ](name='TagKey', example='TestKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='5414A4E5-4C36-4461-95FC-23757A20B5F8'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planConfig?: string(name='PlanConfig', example='{"pause":{"executeTime":"2022-08-30T16:00:00Z"}}'),
  planDesc?: string(name='PlanDesc', example='this is a test plan'),
  planEndDate?: string(name='PlanEndDate', example='2023-04-17T23:00Z'),
  planId?: string(name='PlanId', example='1234'),
  planName?: string(name='PlanName', example='test-plan'),
  planStartDate?: string(name='PlanStartDate', example='2022-04-17T23:00Z'),
}

model UpdateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='****'),
  planId?: string(name='PlanId', example='1234'),
  requestId?: string(name='RequestId', example='34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad'),
  status?: string(name='Status', example='success'),
}

model UpdateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDBInstancePlanResponseBody(name='body'),
}

async function updateDBInstancePlanWithOptions(request: UpdateDBInstancePlanRequest, runtime: Util.RuntimeOptions): UpdateDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planConfig)) {
    query['PlanConfig'] = request.planConfig;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planEndDate)) {
    query['PlanEndDate'] = request.planEndDate;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planStartDate)) {
    query['PlanStartDate'] = request.planStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDBInstancePlan(request: UpdateDBInstancePlanRequest): UpdateDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDBInstancePlanWithOptions(request, runtime);
}

model UpgradeDBInstanceRequest {
  DBInstanceClass?: string(name='DBInstanceClass', example='null'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount', example='null'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-rj***************'),
  instanceSpec?: string(name='InstanceSpec', example='4C16G'),
  masterNodeNum?: string(name='MasterNodeNum', example='2'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', example='null'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  segNodeNum?: string(name='SegNodeNum', example='2'),
  storageSize?: string(name='StorageSize', example='100'),
  upgradeType?: long(name='UpgradeType', example='0'),
}

model UpgradeDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-rj***************'),
  orderId?: string(name='OrderId', example='*********'),
  requestId?: string(name='RequestId', example='25C11EE5-B7E8-481A-A07C-BD**********'),
}

model UpgradeDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceResponseBody(name='body'),
}

async function upgradeDBInstanceWithOptions(request: UpgradeDBInstanceRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceGroupCount)) {
    query['DBInstanceGroupCount'] = request.DBInstanceGroupCount;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.upgradeType)) {
    query['UpgradeType'] = request.upgradeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBInstance(request: UpgradeDBInstanceRequest): UpgradeDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceWithOptions(request, runtime);
}

model UpgradeDBVersionRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-wz9kmr708m155j***'),
  majorVersion?: string(name='MajorVersion', example='6.0'),
  minorVersion?: string(name='MinorVersion', example='6.0'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  switchTime?: string(name='SwitchTime', example='xxxxx'),
  switchTimeMode?: string(name='SwitchTimeMode', example='xxxxx'),
}

model UpgradeDBVersionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-wz9kmr708m155j***'),
  DBInstanceName?: string(name='DBInstanceName', example='gp-wz9kmr708m155j***'),
  requestId?: string(name='RequestId', example='25C11EE5-B7E8-481A-A07C-BD619971A570'),
  taskId?: string(name='TaskId', example='101450956'),
}

model UpgradeDBVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBVersionResponseBody(name='body'),
}

async function upgradeDBVersionWithOptions(request: UpgradeDBVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.majorVersion)) {
    query['MajorVersion'] = request.majorVersion;
  }
  if (!Util.isUnset(request.minorVersion)) {
    query['MinorVersion'] = request.minorVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBVersion',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBVersion(request: UpgradeDBVersionRequest): UpgradeDBVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBVersionWithOptions(request, runtime);
}

