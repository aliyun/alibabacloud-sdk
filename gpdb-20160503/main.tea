/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'gpdb.aliyuncs.com',
    cn-hangzhou = 'gpdb.aliyuncs.com',
    cn-shanghai = 'gpdb.aliyuncs.com',
    cn-shenzhen = 'gpdb.aliyuncs.com',
    cn-hongkong = 'gpdb.aliyuncs.com',
    ap-southeast-1 = 'gpdb.aliyuncs.com',
    us-west-1 = 'gpdb.aliyuncs.com',
    us-east-1 = 'gpdb.aliyuncs.com',
    cn-hangzhou-finance = 'gpdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'gpdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'gpdb.aliyuncs.com',
    cn-qingdao = 'gpdb.aliyuncs.com',
    cn-north-2-gov-1 = 'gpdb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('gpdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocateInstancePublicConnectionRequest {
  addressType?: string(name='AddressType', description='The network type of the endpoint. Valid values:

*   **primary**: primary endpoint
*   **cluster**: instance endpoint. This value is supported only for an instance that contains multiple coordinator nodes.

>  The default value is primary.', example='primary'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the endpoint.

Specify a prefix for the endpoint. Example: `gp-bp12ga6v69h86****`. In this example, the endpoint is `gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com`.', example='gp-bp12ga6v69h86****'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port', description='The port number. Example: 5432.', example='5432'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADD6EA90-EECB-4C12-9F26-0B6DB587****'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

/**
  * You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](~~204879~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request AllocateInstancePublicConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AllocateInstancePublicConnectionResponse
 */
async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to apply for a public endpoint for an AnalyticDB for PostgreSQL instance. Both the primary and instance endpoints of an AnalyticDB for PostgreSQL instance can be public endpoints. For more information, see [Endpoints of an instance and its primary coordinator node](~~204879~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request AllocateInstancePublicConnectionRequest
  * @return AllocateInstancePublicConnectionResponse
 */
async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CancelUploadDocumentJobRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  jobId?: string(name='JobId', example='231460f8-75dc-405e-a669-0c5204887e91'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CancelUploadDocumentJobResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CancelUploadDocumentJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelUploadDocumentJobResponseBody(name='body'),
}

async function cancelUploadDocumentJobWithOptions(request: CancelUploadDocumentJobRequest, runtime: Util.RuntimeOptions): CancelUploadDocumentJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.collection)) {
    body['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    body['NamespacePassword'] = request.namespacePassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelUploadDocumentJob',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelUploadDocumentJob(request: CancelUploadDocumentJobRequest): CancelUploadDocumentJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelUploadDocumentJobWithOptions(request, runtime);
}

model CancelUpsertCollectionDataJobRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  jobId?: string(name='JobId', example='bf8f7bc4-9276-44f7-9c22-1d06edc8dfd1'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CancelUpsertCollectionDataJobResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CancelUpsertCollectionDataJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelUpsertCollectionDataJobResponseBody(name='body'),
}

async function cancelUpsertCollectionDataJobWithOptions(request: CancelUpsertCollectionDataJobRequest, runtime: Util.RuntimeOptions): CancelUpsertCollectionDataJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.collection)) {
    body['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    body['NamespacePassword'] = request.namespacePassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelUpsertCollectionDataJob',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelUpsertCollectionDataJob(request: CancelUpsertCollectionDataJobRequest): CancelUpsertCollectionDataJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelUpsertCollectionDataJobWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest {
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: string(name='HasServiceLinkedRole', description='Indicates whether an SLR is created.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceLinkedRole',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the privileged account.', example='testacc02'),
  accountName?: string(name='AccountName', description='The name of the privileged account.

*   The name can contain lowercase letters, digits, and underscores (\\_).
*   The name must start with a lowercase letter and end with a lowercase letter or a digit.
*   The name cannot start with gp.
*   The name must be 2 to 16 characters in length.', example='testacc02'),
  accountPassword?: string(name='AccountPassword', description='The password of the privileged account.

*   The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
*   Special characters include `! @ # $ % ^ & * ( ) _ + - =`
*   The password must be 8 to 32 characters in length.', example='Pw123456'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************'),
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='test01'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4D4BE8A-DD46-440A-BFCD-EE**********'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

/**
  * *   Before you can use an AnalyticDB for PostgreSQL instance, you must create a privileged account for the instance.
  * *   You can call this operation to create only privileged accounts. For information about how to create other types of accounts, see [Create a database account](~~50206~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateAccountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAccountResponse
 */
async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you can use an AnalyticDB for PostgreSQL instance, you must create a privileged account for the instance.
  * *   You can call this operation to create only privileged accounts. For information about how to create other types of accounts, see [Create a database account](~~50206~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateAccountRequest
  * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateCollectionRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  dimension?: long(name='Dimension', example='1024'),
  externalStorage?: int32(name='ExternalStorage'),
  fullTextRetrievalFields?: string(name='FullTextRetrievalFields', example='title,content'),
  hnswM?: int32(name='HnswM'),
  managerAccount?: string(name='ManagerAccount', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', example='testpassword'),
  metadata?: string(name='Metadata', example='{"title":"text","content":"text","response":"int"}'),
  metrics?: string(name='Metrics'),
  namespace?: string(name='Namespace', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  parser?: string(name='Parser', example='zh_cn'),
  pqEnable?: int32(name='PqEnable'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateCollectionResponseBody = {
  message?: string(name='Message', example='create successfully'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CreateCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCollectionResponseBody(name='body'),
}

async function createCollectionWithOptions(request: CreateCollectionRequest, runtime: Util.RuntimeOptions): CreateCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.dimension)) {
    query['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.externalStorage)) {
    query['ExternalStorage'] = request.externalStorage;
  }
  if (!Util.isUnset(request.fullTextRetrievalFields)) {
    query['FullTextRetrievalFields'] = request.fullTextRetrievalFields;
  }
  if (!Util.isUnset(request.hnswM)) {
    query['HnswM'] = request.hnswM;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.metadata)) {
    query['Metadata'] = request.metadata;
  }
  if (!Util.isUnset(request.metrics)) {
    query['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parser)) {
    query['Parser'] = request.parser;
  }
  if (!Util.isUnset(request.pqEnable)) {
    query['PqEnable'] = request.pqEnable;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCollection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCollection(request: CreateCollectionRequest): CreateCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCollectionWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set.

>  You can call the [DescribeDataBackups](~~210093~~) operation to query the IDs of all backup sets in the instance.', example='1111111111'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. For more information, see [Ensure idempotence](~~327176~~).', example='0c593ea1-3bea-11e9-b96b-88**********'),
  createSampleData?: boolean(name='CreateSampleData', description='Specifies whether to load a sample dataset after the instance is created. Valid values:

*   **true**
*   **false**

>  If you do not specify this parameter, no sample dataset is loaded.', example='false'),
  DBInstanceCategory?: string(name='DBInstanceCategory', description='The edition of the instance. Valid values:

- **HighAvailability**: High-availability Edition.
- **Basic**: Basic Edition.

> This parameter must be specified when you create an instance in elastic storage mode.', example='HighAvailability'),
  DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance. For information, see [Instance types](~~86942~~).

> This parameter must be specified when you create an instance in reserved storage mode.', example='gpdb.group.segsdx1'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='test'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount', description='The number of compute groups. Valid values: 2, 4, 8, 12, 16, 24, 32, 64, 96, and 128.

> This parameter must be specified when you create an instance in reserved storage mode.', example='2'),
  DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

- **StorageElastic**: elastic storage mode.
- **Serverless**: Serverless mode.
- **Classic**: reserved storage mode.

> This parameter must be specified.', example='StorageElastic'),
  enableSSL?: boolean(name='EnableSSL'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the encryption key.

> If EncryptionType is set to CloudDisk, you must specify an encryption key that resides in the same region as the cloud disk that is specified by EncryptionType. Otherwise, leave this parameter empty.', example='0d2470df-da7b-4786-b981-88888888****'),
  encryptionType?: string(name='EncryptionType', description='The encryption type. Valid values:

- **NULL** (default): Encryption is disabled.
- **CloudDisk**: Encryption is enabled on cloud disks, and EncryptionKey is used to specify an encryption key.

> Disk encryption cannot be disabled after it is enabled.', example='CloudDisk'),
  engine?: string(name='Engine', description='The database engine of the instance. Set the value to gpdb.', example='gpdb'),
  engineVersion?: string(name='EngineVersion', description='The version of the database engine. Valid values:

- 6.0
- 7.0', example='6.0'),
  idleTime?: int32(name='IdleTime', description='The wait time for the instance that has no traffic to become idle. Minimum value: 60. Default value: 600. Unit: seconds.

> This parameter must be specified only when you create an instance in automatic Serverless mode.', example='600'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Set the value to **VPC**.

> 

*   Only the Virtual Private Cloud (VPC) type is supported in Alibaba Cloud public cloud.

*   If you do not specify this parameter, VPC is used.', example='VPC'),
  instanceSpec?: string(name='InstanceSpec', description='The specifications of compute nodes.

Valid values for High-availability Edition instances in elastic storage mode:

- **2C16G**
- **4C32G**
- **16C128G**

Valid values for Basic Edition instances in elastic storage mode:

- **2C8G**
- **4C16G**
- **8C32G**
- **16C64G**

Valid values for instances in Serverless mode:

- **4C16G**
- **8C32G**

> This parameter must be specified when you create an instance in elastic storage mode or Serverless mode.', example='2C16G'),
  masterCU?: int32(name='MasterCU', description='The amount of coordinator node resources. Valid values:

*   2 CU
*   4 CU
*   8 CU
*   16 CU
*   32 CU

>  You are charged for coordinator node resources of more than 8 CUs.', example='8 CU'),
  masterNodeNum?: string(name='MasterNodeNum', description='This parameter is no longer used.', example='1'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.

> 

*   If you do not specify this parameter, Postpaid is used.

*   You can obtain more cost savings if you create a subscription instance for one year or longer. We recommend that you select the billing method that best suits your needs.', example='Prepaid'),
  period?: string(name='Period', description='The unit of the subscription duration. Valid values:

- **Month**
- **Year**
> This parameter must be specified when PayType is set to Prepaid.', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', description='This parameter is no longer used.', example='1.1.1.*'),
  prodType?: string(name='ProdType'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
  securityIPList?: string(name='SecurityIPList', description='The IP address whitelist of the instance.

A value of 127.0.0.1 specifies that no IP address is allowed for external access. You can call the [ModifySecurityIps](~~86928~~) operation to modify the IP address whitelist after you create an instance.', example='127.0.0.1'),
  segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', description='The performance level of ESSDs. Valid values:

*   **pl0**
*   **pl1**
*   **pl2**

> 

*   This parameter takes effect only when SegStorageType is set to cloud_essd.

*   If you do not specify this parameter, pl1 is used.', example='pl1'),
  segNodeNum?: string(name='SegNodeNum', description='The number of compute nodes.

- Valid values for High-availability Edition instances in elastic storage mode: multiples of 4 in the range of 4 to 512.
- Valid values for Basic Edition instances in elastic storage mode: multiples of 2 in the range of 2 to 512.
- Valid values for instances in Serverless mode: multiples of 2 in the range of 2 to 512.

> This parameter must be specified when you create an instance in elastic storage mode or Serverless mode.', example='4'),
  segStorageType?: string(name='SegStorageType', description='The disk storage type of the instance. Only enhanced SSDs (ESSDs) are supported. Set the value to cloud_essd.

> This parameter must be specified when you create an instance in elastic storage mode.', example='cloud_essd'),
  serverlessMode?: string(name='ServerlessMode', description='The type of the Serverless mode. Valid values:

- **Manual** (default): manual scheduling.
- **Auto**: automatic scheduling.

> This parameter must be specified only when you create an instance in Serverless mode.', example='Auto'),
  serverlessResource?: int32(name='ServerlessResource', description='The threshold of computing resources. Unit: AnalyticDB compute unit (ACU). Valid values: 8 to 32. The value must be in increments of 8 ACUs. Default value: 32.

> This parameter must be specified only when you create an instance in automatic Serverless mode.', example='32'),
  srcDbInstanceName?: string(name='SrcDbInstanceName', description='The ID of the source instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp***************'),
  storageSize?: long(name='StorageSize', description='The storage capacity of the instance. Unit: GB. Valid values: 50 to 6000.

>  This parameter must be specified when you create an instance in elastic storage mode.', example='200'),
  storageType?: string(name='StorageType', description='This parameter is no longer used.', example='null'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Take note of the following requirements:

- The tag key cannot be an empty string.
- The tag key can be up to 128 characters in length.
- The tag key cannot start with `aliyun` or `acs:`, and contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Take note of the following requirements:

- The tag key cannot be an empty string.
- The tag key can be up to 128 characters in length.
- The tag key cannot start with `aliyun` or `acs:`, and contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
  usedTime?: string(name='UsedTime', description='The subscription duration.

- Valid values when Period is set to Month: 1 to 9.
- Valid values when Period is set to Year: 1 to 3.
> This parameter must be specified when PayType is set to Prepaid.', example='1'),
  VPCId?: string(name='VPCId', description='The VPC ID of the instance.

> 

*   **This parameter** must be specified.

*   The region where the **VPC** resides must be the same as the region that is specified by **RegionId**.', example='vpc-bp*******************'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.

> 

*   **This parameter** must be specified.

*   The zone where the **vSwitch** resides must be the same as the zone that is specified by **ZoneId**.', example='vsw-bp*******************'),
  vectorConfigurationStatus?: string(name='VectorConfigurationStatus', description='Specifies whether to enable vector search engine optimization. Valid values:

*   **enabled**
*   **disabled** (default)

> 

*   We recommend that you **do not enable** vector search engine optimization in mainstream analysis, data warehousing, and real-time data warehousing scenarios.

*   We recommend that you **enable** vector search engine optimization in AI-generated content (AIGC) and vector retrieval scenarios that require the vector analysis engine.', example='enabled'),
  zoneId?: string(name='ZoneId', description='The zone ID of the read-only instance. You can call the [DescribeRegions](~~86912~~) operation to query the most recent zone list.', example='cn-hangzhou-i'),
}

model CreateDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString', description='An invalid parameter. It is no longer returned when you call this operation.

You can call the [DescribeDBInstanceAttribute](~~86910~~) operation to query the endpoint that is used to connect to the instance.', example='gp-bp***************.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp***************'),
  orderId?: string(name='OrderId', description='The order ID.', example='111111111111'),
  port?: string(name='Port', description='An invalid parameter. It is no longer returned when you call this operation.

You can call the [DescribeDBInstanceAttribute](~~86910~~) operation to query the port number that is used to connect to the instance.', example='5432'),
  requestId?: string(name='RequestId', description='The request ID.', example='5414A4E5-4C36-4461-95FC-************'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstanceResponseBody(name='body'),
}

/**
  * You can call this operation when you need to create AnalyticDB for PostgreSQL instances to meet the requirements of new applications or services.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateDBInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDBInstanceResponse
 */
async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.createSampleData)) {
    query['CreateSampleData'] = request.createSampleData;
  }
  if (!Util.isUnset(request.DBInstanceCategory)) {
    query['DBInstanceCategory'] = request.DBInstanceCategory;
  }
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceGroupCount)) {
    query['DBInstanceGroupCount'] = request.DBInstanceGroupCount;
  }
  if (!Util.isUnset(request.DBInstanceMode)) {
    query['DBInstanceMode'] = request.DBInstanceMode;
  }
  if (!Util.isUnset(request.enableSSL)) {
    query['EnableSSL'] = request.enableSSL;
  }
  if (!Util.isUnset(request.encryptionKey)) {
    query['EncryptionKey'] = request.encryptionKey;
  }
  if (!Util.isUnset(request.encryptionType)) {
    query['EncryptionType'] = request.encryptionType;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.idleTime)) {
    query['IdleTime'] = request.idleTime;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterCU)) {
    query['MasterCU'] = request.masterCU;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.prodType)) {
    query['ProdType'] = request.prodType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.segDiskPerformanceLevel)) {
    query['SegDiskPerformanceLevel'] = request.segDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.segStorageType)) {
    query['SegStorageType'] = request.segStorageType;
  }
  if (!Util.isUnset(request.serverlessMode)) {
    query['ServerlessMode'] = request.serverlessMode;
  }
  if (!Util.isUnset(request.serverlessResource)) {
    query['ServerlessResource'] = request.serverlessResource;
  }
  if (!Util.isUnset(request.srcDbInstanceName)) {
    query['SrcDbInstanceName'] = request.srcDbInstanceName;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vectorConfigurationStatus)) {
    query['VectorConfigurationStatus'] = request.vectorConfigurationStatus;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation when you need to create AnalyticDB for PostgreSQL instances to meet the requirements of new applications or services.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
  * @param request CreateDBInstanceRequest
  * @return CreateDBInstanceResponse
 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planConfig?: string(name='PlanConfig', description='The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType** and **PlanScheduleType**. The following section describes the PlanConfig parameter.', example='{"pause":{"planCronTime":"0 0 12 1/1 * ? "},"resume":{"planCronTime":"0 0 0 1/1 * ? "}}'),
  planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan'),
  planEndDate?: string(name='PlanEndDate', description='The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.

> 

*   This parameter must be specified only when **PlanScheduleType** is set to **Regular**.

*   If you do not specify this parameter, the plan does not end.', example='2023-04-17T23:00Z'),
  planName?: string(name='PlanName', description='The name of the plan.', example='test-plan'),
  planScheduleType?: string(name='PlanScheduleType', description='The execution mode of the plan. Valid values:

*   **Postpone**: The plan is executed later.
*   **Regular**: The plan is executed periodically.', example='Regular'),
  planStartDate?: string(name='PlanStartDate', description='The start time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

> 

*   This parameter must be specified only when **PlanScheduleType** is set to **Regular**.

*   If you do not specify this parameter, the plan is executed immediately.', example='2022-04-17T23:00Z'),
  planType?: string(name='PlanType', description='The type of the plan. Valid values:

*   **PauseResume**: pauses and resumes an instance.
*   **Resize**: changes the number of compute nodes.
*   **ModifySpec**: changes compute node specifications.

> 

*   You can specify the value to Resize only for instances in Serverless mode.

*   You can specify the value to ModifySpec only for instances in elastic storage mode.', example='PauseResume'),
}

model CreateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message.

This parameter is returned only if the request fails.', example='****'),
  planId?: string(name='PlanId', description='The plan ID.', example='1234'),
  requestId?: string(name='RequestId', description='The request ID.', example='34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad'),
  status?: string(name='Status', description='Indicates whether the request was successful.

If the request was successful, **success** is returned. If the request failed, this parameter is not returned.', example='success'),
}

model CreateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstancePlanResponseBody(name='body'),
}

/**
  * *   The plan management feature is supported only for pay-as-you-go instances.
  * *   When you change the compute node specifications or change the number of compute nodes, transient connections may occur. We recommend that you perform these operations during off-peak hours.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  *
  * @param request CreateDBInstancePlanRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDBInstancePlanResponse
 */
async function createDBInstancePlanWithOptions(request: CreateDBInstancePlanRequest, runtime: Util.RuntimeOptions): CreateDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planConfig)) {
    query['PlanConfig'] = request.planConfig;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planEndDate)) {
    query['PlanEndDate'] = request.planEndDate;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planScheduleType)) {
    query['PlanScheduleType'] = request.planScheduleType;
  }
  if (!Util.isUnset(request.planStartDate)) {
    query['PlanStartDate'] = request.planStartDate;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The plan management feature is supported only for pay-as-you-go instances.
  * *   When you change the compute node specifications or change the number of compute nodes, transient connections may occur. We recommend that you perform these operations during off-peak hours.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  *
  * @param request CreateDBInstancePlanRequest
  * @return CreateDBInstancePlanResponse
 */
async function createDBInstancePlan(request: CreateDBInstancePlanRequest): CreateDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstancePlanWithOptions(request, runtime);
}

model CreateDocumentCollectionRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  embeddingModel?: string(name='EmbeddingModel', example='text-embedding-v1'),
  externalStorage?: int32(name='ExternalStorage'),
  fullTextRetrievalFields?: string(name='FullTextRetrievalFields', example='title,page'),
  hnswM?: int32(name='HnswM', example='64'),
  managerAccount?: string(name='ManagerAccount', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', example='testpassword'),
  metadata?: string(name='Metadata', example='{"title":"text","page":"int"}'),
  metrics?: string(name='Metrics', example='cosine'),
  namespace?: string(name='Namespace', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  parser?: string(name='Parser', example='zh_cn'),
  pqEnable?: int32(name='PqEnable', example='0'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateDocumentCollectionResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='successs'),
}

model CreateDocumentCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDocumentCollectionResponseBody(name='body'),
}

async function createDocumentCollectionWithOptions(request: CreateDocumentCollectionRequest, runtime: Util.RuntimeOptions): CreateDocumentCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.embeddingModel)) {
    query['EmbeddingModel'] = request.embeddingModel;
  }
  if (!Util.isUnset(request.externalStorage)) {
    query['ExternalStorage'] = request.externalStorage;
  }
  if (!Util.isUnset(request.fullTextRetrievalFields)) {
    query['FullTextRetrievalFields'] = request.fullTextRetrievalFields;
  }
  if (!Util.isUnset(request.hnswM)) {
    query['HnswM'] = request.hnswM;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.metadata)) {
    query['Metadata'] = request.metadata;
  }
  if (!Util.isUnset(request.metrics)) {
    query['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parser)) {
    query['Parser'] = request.parser;
  }
  if (!Util.isUnset(request.pqEnable)) {
    query['PqEnable'] = request.pqEnable;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDocumentCollection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDocumentCollection(request: CreateDocumentCollectionRequest): CreateDocumentCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDocumentCollectionWithOptions(request, runtime);
}

model CreateNamespaceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~196830~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  managerAccount?: string(name='ManagerAccount', description='The name of the manager account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the manager account.', example='testpassword'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword2'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CreateNamespaceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespaceWithOptions(request: CreateNamespaceRequest, runtime: Util.RuntimeOptions): CreateNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNamespace',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNamespaceWithOptions(request, runtime);
}

model CreateSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model CreateSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if an error occurs. This message does not affect the execution of the operation.', example='*********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15A6881F-AAAB-5E4D-9B3F-6DCC1BDF4F2E_99'),
  status?: boolean(name='Status', description='The execution state of the operation. Valid values:

*   **false**: The operation fails.
*   **true**: The operation is successful.', example='true'),
}

model CreateSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSampleDataResponseBody(name='body'),
}

/**
  * You can call this operation to load a sample dataset to an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](~~452277~~).
  * ## Precautions
  * - If your instance is in elastic storage mode, the sample dataset is supported only for V6.3.10.3 or later. If your instance is in Serverless mode, the sample dataset is supported only for V1.0.4.0 or later. For more information about how to update the minor engine version of an instance, see [Update the minor engine version](/help/en/analyticdb-for-postgresql/latest/upgrade-the-engine-version).
  * - The sample dataset is about 10 GB in size. Make sure that your instance has sufficient storage space.
  * - The sample dataset contains a database named `ADB_SampleData_TPCH`. Make sure that your instance does not have a database with the same name. Otherwise, the dataset may fail to be loaded.
  * - It may take 6 to 8 minutes to load the sample dataset. During this period, operations on your instance such as adding nodes or changing node specifications may be affected.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateSampleDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSampleDataResponse
 */
async function createSampleDataWithOptions(request: CreateSampleDataRequest, runtime: Util.RuntimeOptions): CreateSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to load a sample dataset to an AnalyticDB for PostgreSQL instance. Then, you can execute query statements on the sample dataset to experience or test your instance. For more information about query statements, see [Dataset information and query examples](~~452277~~).
  * ## Precautions
  * - If your instance is in elastic storage mode, the sample dataset is supported only for V6.3.10.3 or later. If your instance is in Serverless mode, the sample dataset is supported only for V1.0.4.0 or later. For more information about how to update the minor engine version of an instance, see [Update the minor engine version](/help/en/analyticdb-for-postgresql/latest/upgrade-the-engine-version).
  * - The sample dataset is about 10 GB in size. Make sure that your instance has sufficient storage space.
  * - The sample dataset contains a database named `ADB_SampleData_TPCH`. Make sure that your instance does not have a database with the same name. Otherwise, the dataset may fail to be loaded.
  * - It may take 6 to 8 minutes to load the sample dataset. During this period, operations on your instance such as adding nodes or changing node specifications may be affected.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateSampleDataRequest
  * @return CreateSampleDataResponse
 */
async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSampleDataWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRole',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model CreateVectorIndexRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  dimension?: int32(name='Dimension', example='1024'),
  externalStorage?: int32(name='ExternalStorage'),
  hnswM?: int32(name='HnswM'),
  managerAccount?: string(name='ManagerAccount', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', example='testpassword'),
  metrics?: string(name='Metrics', description='Distance Metrics。', example='cosine'),
  namespace?: string(name='Namespace', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  pqEnable?: int32(name='PqEnable'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateVectorIndexResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model CreateVectorIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVectorIndexResponseBody(name='body'),
}

async function createVectorIndexWithOptions(request: CreateVectorIndexRequest, runtime: Util.RuntimeOptions): CreateVectorIndexResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.dimension)) {
    query['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.externalStorage)) {
    query['ExternalStorage'] = request.externalStorage;
  }
  if (!Util.isUnset(request.hnswM)) {
    query['HnswM'] = request.hnswM;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.metrics)) {
    query['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pqEnable)) {
    query['PqEnable'] = request.pqEnable;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVectorIndex',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVectorIndex(request: CreateVectorIndexRequest): CreateVectorIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVectorIndexWithOptions(request, runtime);
}

model DeleteCollectionRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteCollectionResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model DeleteCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCollectionResponseBody(name='body'),
}

async function deleteCollectionWithOptions(request: DeleteCollectionRequest, runtime: Util.RuntimeOptions): DeleteCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCollection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCollection(request: DeleteCollectionRequest): DeleteCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCollectionWithOptions(request, runtime);
}

model DeleteCollectionDataRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  collectionData?: string(name='CollectionData', description='The data that you want to delete.', example='{"title":["a","b"]}'),
  collectionDataFilter?: string(name='CollectionDataFilter', description='The data filter to delete.', example='a < 10'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteCollectionDataResponseBody = {
  appliedRows?: long(name='AppliedRows', description='The number of rows that are affected by the request.', example='10'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model DeleteCollectionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCollectionDataResponseBody(name='body'),
}

async function deleteCollectionDataWithOptions(request: DeleteCollectionDataRequest, runtime: Util.RuntimeOptions): DeleteCollectionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.collectionData)) {
    query['CollectionData'] = request.collectionData;
  }
  if (!Util.isUnset(request.collectionDataFilter)) {
    query['CollectionDataFilter'] = request.collectionDataFilter;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCollectionData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCollectionData(request: DeleteCollectionDataRequest): DeleteCollectionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCollectionDataWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](~~327176~~).', example='0c593ea1-3bea-11e9-b96b-88**********'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B3**********'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

/**
  * *   Subscription instances cannot be manually released. They are automatically released when they expire.
  * *   You can call this operation to release pay-as-you-go instances only when they are in the **Running** state.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteDBInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDBInstanceResponse
 */
async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Subscription instances cannot be manually released. They are automatically released when they expire.
  * *   You can call this operation to release pay-as-you-go instances only when they are in the **Running** state.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteDBInstanceRequest
  * @return DeleteDBInstanceResponse
 */
async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planId?: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234'),
}

model DeleteDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model DeleteDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstancePlanResponseBody(name='body'),
}

/**
  * If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteDBInstancePlanRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDBInstancePlanResponse
 */
async function deleteDBInstancePlanWithOptions(request: DeleteDBInstancePlanRequest, runtime: Util.RuntimeOptions): DeleteDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you no longer need a plan, you can call this operation to delete the plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteDBInstancePlanRequest
  * @return DeleteDBInstancePlanResponse
 */
async function deleteDBInstancePlan(request: DeleteDBInstancePlanRequest): DeleteDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstancePlanWithOptions(request, runtime);
}

model DeleteDocumentRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileName?: string(name='FileName', example='music.txt'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDocumentResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DeleteDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDocumentResponseBody(name='body'),
}

async function deleteDocumentWithOptions(request: DeleteDocumentRequest, runtime: Util.RuntimeOptions): DeleteDocumentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDocument',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDocument(request: DeleteDocumentRequest): DeleteDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDocumentWithOptions(request, runtime);
}

model DeleteDocumentCollectionRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDocumentCollectionResponseBody = {
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model DeleteDocumentCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDocumentCollectionResponseBody(name='body'),
}

async function deleteDocumentCollectionWithOptions(request: DeleteDocumentCollectionRequest, runtime: Util.RuntimeOptions): DeleteDocumentCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDocumentCollection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDocumentCollection(request: DeleteDocumentCollectionRequest): DeleteDocumentCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDocumentCollectionWithOptions(request, runtime);
}

model DeleteNamespaceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  managerAccount?: string(name='ManagerAccount', description='The name of the manager account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the manager account.', example='testpassword'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteNamespaceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespaceWithOptions(request: DeleteNamespaceRequest, runtime: Util.RuntimeOptions): DeleteNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNamespace',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNamespaceWithOptions(request, runtime);
}

model DeleteVectorIndexRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  managerAccount?: string(name='ManagerAccount', description='The name of the manager account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the manager account.', example='testpassword'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteVectorIndexResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model DeleteVectorIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVectorIndexResponseBody(name='body'),
}

async function deleteVectorIndexWithOptions(request: DeleteVectorIndexRequest, runtime: Util.RuntimeOptions): DeleteVectorIndexResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVectorIndex',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVectorIndex(request: DeleteVectorIndexRequest): DeleteVectorIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVectorIndexWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', description='The name of the database account.', example='testuser'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp***************'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    DBInstanceAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription', description='The description of the account.', example='testuser'),
      accountName?: string(name='AccountName', description='The name of the account.', example='testuser'),
      accountStatus?: string(name='AccountStatus', description='The state of the account.

*   **0**: The account is being created.
*   **1**: The account is in use.
*   **3**: The account is being deleted.', example='1'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************'),
    }
  ](name='DBInstanceAccount')
  }(name='Accounts', description='The name of the database account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountsResponseBody(name='body'),
}

/**
  * This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeAccountsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAccountsResponse
 */
async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is called to query the information of the privileged account in an AnalyticDB for PostgreSQL instance, such as its state, description, and the instance.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeAccountsRequest
  * @return DescribeAccountsResponse
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeActiveSQLRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', example='testdb'),
  endTime?: string(name='EndTime', example='2022-05-07T07:59Z'),
  keyword?: string(name='Keyword', example='SELECT'),
  maxDuration?: string(name='MaxDuration', example='600'),
  minDuration?: string(name='MinDuration', example='300'),
  order?: string(name='Order', example='{"Field":"StartTime","Type":"Desc"}'),
  startTime?: string(name='StartTime', example='2021-08-03T09:30Z'),
  user?: string(name='User', example='testuser'),
}

model DescribeActiveSQLRecordsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  queries?: [ 
    {
      clientAddr?: string(name='ClientAddr', example='0.0.0.0'),
      database?: string(name='Database', example='xg_analyse'),
      PID?: string(name='PID', example='6164'),
      query?: string(name='Query', example='Select * from t1,t2 where t1.id=t2.id;'),
      queryDuration?: string(name='QueryDuration', example='60s'),
      queryStart?: string(name='QueryStart', example='2022-05-07T06:59Z'),
      sessionID?: string(name='SessionID'),
      sqlTruncated?: string(name='SqlTruncated', example='false'),
      sqlTruncatedThreshold?: string(name='SqlTruncatedThreshold', example='1024'),
      state?: string(name='State'),
      user?: string(name='User', example='testuser'),
    }
  ](name='Queries'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
}

model DescribeActiveSQLRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeActiveSQLRecordsResponseBody(name='body'),
}

async function describeActiveSQLRecordsWithOptions(request: DescribeActiveSQLRecordsRequest, runtime: Util.RuntimeOptions): DescribeActiveSQLRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxDuration)) {
    query['MaxDuration'] = request.maxDuration;
  }
  if (!Util.isUnset(request.minDuration)) {
    query['MinDuration'] = request.minDuration;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeActiveSQLRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeActiveSQLRecords(request: DescribeActiveSQLRecordsRequest): DescribeActiveSQLRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveSQLRecordsWithOptions(request, runtime);
}

model DescribeAvailableResourcesRequest {
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='PostPaid'),
  region?: string(name='Region', description='The region ID.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  zoneId?: string(name='ZoneId', description='The zone ID.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent zone list.', example='cn-hangzhou-h'),
}

model DescribeAvailableResourcesResponseBody = {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='61DC563C-F8E4-593A-8D27-CE**********'),
  resources?: [ 
    {
      supportedEngines?: [ 
        {
          mode?: string(name='Mode', description='The instance resource type. Valid values:

*   **ecs**: elastic storage mode
*   **serverless**: Serverless mode', example='ecs'),
          supportedEngineVersion?: string(name='SupportedEngineVersion', description='The available engine version.', example='6.0'),
          supportedInstanceClasses?: [ 
            {
              category?: string(name='Category', description='The instance edition. Valid values:

*   **HighAvailability**: High-availability Edition
*   **Basic**: Basic Edition', example='HighAvailability'),
              description?: string(name='Description', description='The description of compute node specifications.'),
              displayClass?: string(name='DisplayClass', description='The specifications of each compute node.', example='2C16G'),
              instanceClass?: string(name='InstanceClass', description='The specifications of each compute node.', example='2C16G'),
              nodeCount?: {
                maxCount?: string(name='MaxCount', description='The maximum number of compute nodes.', example='256'),
                minCount?: string(name='MinCount', description='The minimum number of compute nodes.', example='4'),
                step?: string(name='Step', description='The step size for adding compute nodes.

For example, if the value of this parameter is 4, compute nodes must be added by multiples of 4.', example='4'),
              }(name='NodeCount', description='Details about the compute nodes.'),
              storageSize?: {
                maxCount?: string(name='MaxCount', description='The maximum storage capacity of each compute node.', example='1000'),
                minCount?: string(name='MinCount', description='The minimum storage capacity of each compute node.', example='50'),
                step?: string(name='Step', description='The step size for adding storage capacity for compute nodes.', example='50'),
              }(name='StorageSize', description='Details about the storage capacity of compute nodes.'),
              storageType?: string(name='StorageType', description='The storage type. Valid values:

*   **cloud_essd**: enhanced SSD (ESSD)
*   **cloud_efficiency**: ultra disk
*   **oss**: Object Storage Service (OSS)', example='cloud_essd'),
            }
          ](name='SupportedInstanceClasses', description='The available specifications.'),
        }
      ](name='SupportedEngines', description='The available engine version and specifications.'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
    }
  ](name='Resources', description='The zone ID.'),
}

model DescribeAvailableResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableResourcesResponseBody(name='body'),
}

/**
  * When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a zone.
  *
  * @param request DescribeAvailableResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAvailableResourcesResponse
 */
async function describeAvailableResourcesWithOptions(request: DescribeAvailableResourcesRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available resources within a zone.
  *
  * @param request DescribeAvailableResourcesRequest
  * @return DescribeAvailableResourcesResponse
 */
async function describeAvailableResources(request: DescribeAvailableResourcesRequest): DescribeAvailableResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourcesWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The number of days for which data backup files are retained.', example='7'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint', description='Indicates whether automatic point-in-time backup is enabled. Valid values:

*   **true**: Automatic point-in-time backup is enabled.
*   **false**: Automatic point-in-time backup is disabled.', example='true'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The cycle based on which backups are performed. If more than one day of the week is specified, the days of the week are separated by commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**', example='Wednesday,Friday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The backup time. The time is in the HH:mmZ-HH:mmZ format. The time is displayed in UTC.', example='12:00Z-13:00Z'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod', description='The frequency of the point-in-time backup. Valid values:

*   **1**: per hour
*   **2**: per 2 hours
*   **4**: per 4 hours
*   **8**: per 8 hours', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E6B3287-A3E2-5A87-B8D8-E9**********'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

/**
  * You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](~~210095~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeBackupPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBackupPolicyResponse
 */
async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the backup settings of an AnalyticDB for PostgreSQL instance in elastic storage mode. Periodically backing data can prevent data loss. For more information about how to modify backup policies, see [ModifyBackupPolicy](~~210095~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeBackupPolicyRequest
  * @return DescribeBackupPolicyResponse
 */
async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeCollectionRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeCollectionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-xxxxxxxxx'),
  dimension?: int32(name='Dimension', description='The number of vector dimensions.', example='1024'),
  fullTextRetrievalFields?: string(name='FullTextRetrievalFields', description='The fields that are used for full-text search. Multiple fields are separated by commas (,).', example='title,content'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  metadata?: map[string]string(name='Metadata', description='The metadata of vector data, which is a JSON string in the MAP format. The key specifies the field name, and the value specifies the data type.

**

**Warning** Reserved fields such as id, vector, and to_tsvector cannot be used.'),
  metrics?: string(name='Metrics', description='The distance metrics.', example='cosine'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  parser?: string(name='Parser', description='The analyzer that is used for full-text search.', example='zh_cn'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model DescribeCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCollectionResponseBody(name='body'),
}

async function describeCollectionWithOptions(request: DescribeCollectionRequest, runtime: Util.RuntimeOptions): DescribeCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCollection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCollection(request: DescribeCollectionRequest): DescribeCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCollectionWithOptions(request, runtime);
}

model DescribeDBClusterNodeRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp***************'),
  nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **master**: coordinator node.
*   **segment**: compute node.

> If you do not specify this parameter, the information about all nodes is returned.', example='master'),
}

model DescribeDBClusterNodeResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The instance ID.', example='gp-bp***************'),
  nodes?: [ 
    {
      name?: string(name='Name', description='The name of the node.', example='master-10*******'),
    }
  ](name='Nodes', description='The name of the node.'),
  requestId?: string(name='RequestId', description='The request ID.', example='87E44B48-B306-4AD3-A63B-C8**********'),
}

model DescribeDBClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterNodeResponseBody(name='body'),
}

/**
  * ##
  * You can call this operation to query the information about coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBClusterNodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBClusterNodeResponse
 */
async function describeDBClusterNodeWithOptions(request: DescribeDBClusterNodeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterNode',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * You can call this operation to query the information about coordinator and compute nodes in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBClusterNodeRequest
  * @return DescribeDBClusterNodeResponse
 */
async function describeDBClusterNode(request: DescribeDBClusterNodeRequest): DescribeDBClusterNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNodeWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.

> The end time must be later than the start time. The maximum time range that can be specified is seven days.', example='2021-11-03T15:10Z'),
  key?: string(name='Key', description='The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](~~86943~~).', example='adbpg_conn_count'),
  nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **master**: coordinator node.
*   **segment**: compute node.

> If you do not specify this parameter, the performance metrics of all nodes are returned.', example='master'),
  nodes?: string(name='Nodes', description='The nodes for which you want to query performance metrics. Separate multiple values with commas (,). Example: `master-10******1,master-10******2`. You can call the [DescribeDBClusterNode](~~390136~~) operation to query the names of nodes.

You can also filter the nodes based on their metric values. Valid values:

*   **top10**: the 10 nodes that have the highest metric values.
*   **top20**: the 20 nodes that have the highest metric values.
*   **bottom10**: the 10 nodes that have the lowest metric values.
*   **bottom20**: the 20 nodes that have the lowest metric values.', example='top10'),
  resourceGroupName?: string(name='ResourceGroupName'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format.

> You can query monitoring information only within the last 30 days.', example='2021-11-03T15:00Z'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The instance ID.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.', example='2021-11-03T15:10Z'),
  performanceKeys?: [ 
    {
      name?: string(name='Name', description='The name of the performance metric. For more information, see [Performance parameters](~~86943~~).', example='adbpg_group_cpu_used_percent'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the compute node or compute group.', example='standby-********-cpu'),
          role?: string(name='Role', description='The role of the node. Valid values:

*   **master**: primary coordinator node
*   **standby**: standby coordinator node
*   **segment**: compute node', example='standby'),
          values?: [ 
            {
              point?: [ string ](name='Point', description='The value of the performance metric and the time when the metric value was collected.'),
            }
          ](name='Values', description='The value of the performance metric collected at a point in time.'),
        }
      ](name='Series', description='Details of the performance metric of a node.'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='%'),
    }
  ](name='PerformanceKeys', description='The name of the performance metric. For more information, see [Performance parameters](~~86943~~).'),
  requestId?: string(name='RequestId', description='The request ID.', example='8E8990F0-C81E-4C94-8F51-5F**********'),
  startTime?: string(name='StartTime', description='The start time of the query. The time follows the ISO 8601 standard in the `YYYY-MM-DDTHH:mmZ` format. The time is displayed in UTC.', example='2021-11-03T15:00Z'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

/**
  * You can query monitoring information only within the last 30 days.
  *
  * @param request DescribeDBClusterPerformanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBClusterPerformanceResponse
 */
async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.nodes)) {
    query['Nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    query['ResourceGroupName'] = request.resourceGroupName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query monitoring information only within the last 30 days.
  *
  * @param request DescribeDBClusterPerformanceRequest
  * @return DescribeDBClusterPerformanceResponse
 */
async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-bp13ue79qk8y1****'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
}

model DescribeDBInstanceAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      availabilityValue?: string(name='AvailabilityValue', description='The service availability of the instance. Unit: %.

>  This parameter is returned only for instances in reserved storage mode.', example='100.0%'),
      connectionMode?: string(name='ConnectionMode', description='The access mode of the instance. Valid values:

*   **Performance**: standard mode.
*   **Safety**: safe mode.
*   **LVS**: Linux Virtual Server (LVS) mode.', example='LVS'),
      connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the instance.', example='gp-bp13ue79qk8y1****-master.gpdb.rds.aliyuncs.com'),
      coreVersion?: string(name='CoreVersion', description='The number of the minor version.', example='mm.v6.3.10.1-202207141918'),
      cpuCores?: int32(name='CpuCores', description='The number of CPU cores per compute node.', example='2'),
      cpuCoresPerNode?: int32(name='CpuCoresPerNode', description='The number of CPU cores per node.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2022-08-11T09:16:26Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', description='The edition of the instance. Valid values:

*   **Basic**: Basic Edition.
*   **HighAvailability**: High-availability Edition.', example='HighAvailability'),
      DBInstanceClass?: string(name='DBInstanceClass', description='The instance type of the instance.

>  This parameter is returned only for instances in reserved storage mode.', example='gpdb.group.segsdx1'),
      DBInstanceClassType?: string(name='DBInstanceClassType', description='The instance family of the instance. Valid values:

*   **s**: shared.
*   **x**: general-purpose.
*   **d**: dedicated.
*   **h**: dedicated host.', example='x'),
      DBInstanceCpuCores?: int32(name='DBInstanceCpuCores', description='The number of CPU cores.', example='2'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp13ue79qk8y1****'),
      DBInstanceDiskMBPS?: long(name='DBInstanceDiskMBPS', description='The maximum disk throughput of the compute group. Unit: Mbit/s.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      DBInstanceGroupCount?: string(name='DBInstanceGroupCount', description='The number of compute groups.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp13ue79qk8y1****'),
      DBInstanceMemory?: long(name='DBInstanceMemory', description='The memory capacity per compute node.

>  The unit of this parameter is MB for instances in reserved storage mode and GB for instances in Serverless mode or elastic storage mode.', example='16'),
      DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **Serverless**: Serverless mode.
*   **StorageElastic**: elastic storage mode.
*   **Classic**: reserved storage mode.', example='StorageElastic'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='An invalid parameter. It is no longer returned when you call this operation.', example='2'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The state of the instance. For more information, see the "Additional description of DBInstanceStatus" section of this topic.', example='Running'),
      DBInstanceStorage?: long(name='DBInstanceStorage', description='The maximum storage capacity per node. Unit: GB.', example='50'),
      encryptionKey?: string(name='EncryptionKey', description='The encryption key.

>  This parameter is returned only for instances that have disk encryption enabled.', example='0d2470df-da7b-4786-b981-************'),
      encryptionType?: string(name='EncryptionType', description='The encryption type. Valid values:

*   **CloudDisk**: disk encryption.

>  This parameter is returned only for instances that have disk encryption enabled.', example='CloudDisk'),
      engine?: string(name='Engine', description='The database engine of the instance.', example='gpdb'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='6.0'),
      expireTime?: string(name='ExpireTime', description='The expiration time of the instance. The time is displayed in UTC.

>  The expiration time of a pay-as-you-go instance is `2999-09-08T16:00:00Z`.', example='2999-09-08T16:00:00Z'),
      hostType?: string(name='HostType', description='The disk type of the compute group. Valid values:

*   **0**: SSD.
*   **1**: HDD.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      idleTime?: int32(name='IdleTime', description='The wait period for the instance that has no traffic to become idle. Unit: seconds.

>  This parameter is returned only for instances in Serverless automatic scheduling mode.', example='600'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**: classic network.
*   **VPC**: VPC.', example='VPC'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked due to instance expiration.
*   **LockByRestoration**: The instance is automatically locked due to instance restoration.
*   **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
      maintainEndTime?: string(name='MaintainEndTime', description='The end time of the maintenance window of the instance.', example='22:00Z'),
      maintainStartTime?: string(name='MaintainStartTime', description='The start time of the maintenance window of the instance.', example='18:00Z'),
      masterCU?: int32(name='MasterCU', description='The amount of coordinator node resources.', example='4'),
      masterNodeNum?: int32(name='MasterNodeNum', description='The number of coordinator nodes.', example='1'),
      maxConnections?: int32(name='MaxConnections', description='The maximum number of concurrent connections to the instance.

>  This parameter is returned only for instances in reserved storage mode.', example='500'),
      memoryPerNode?: int32(name='MemoryPerNode', description='The memory capacity per node. The unit of this parameter can be one of the valid values of **MemoryUnit**.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      memorySize?: long(name='MemorySize', description='The memory capacity per compute node.

>  The unit of this parameter is MB for instances in reserved storage mode and GB for instances in Serverless mode or elastic storage mode.', example='16'),
      memoryUnit?: string(name='MemoryUnit', description='The unit of the memory capacity.

>  This parameter is returned only for instances in reserved storage mode.', example='GB'),
      minorVersion?: string(name='MinorVersion', description='The minor version of the instance.', example='6.3.10.1-202207141918'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Postpaid'),
      port?: string(name='Port', description='The port number that is used to connect to the instance.', example='5432'),
      prodType?: string(name='ProdType'),
      readDelayTime?: string(name='ReadDelayTime', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
      runningTime?: string(name='RunningTime', description='The running duration of the instance.', example='4 days 22:58:55'),
      securityIPList?: string(name='SecurityIPList', description='An invalid parameter. It is no longer returned when you call this operation.', example='127.0.0.1'),
      segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', description='The performance level of ESSDs. Only **PL1** is supported.', example='PL1'),
      segNodeNum?: int32(name='SegNodeNum', description='The number of compute nodes.

>  This parameter is returned only for instances in elastic storage mode or Serverless manual scheduling mode.', example='4'),
      segmentCounts?: int32(name='SegmentCounts', description='The number of compute groups.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      serverlessMode?: string(name='ServerlessMode', description='The type of the Serverless mode. Valid values:

*   **Manual**: manual scheduling.
*   **Auto**: automatic scheduling.

>  This parameter is returned only for instances in Serverless mode.', example='Auto'),
      serverlessResource?: int32(name='ServerlessResource', description='The threshold of computing resources. Unit: AnalyticDB compute units (ACUs).

>  This parameter is returned only for instances in Serverless automatic scheduling mode.', example='32'),
      startTime?: string(name='StartTime', description='The time when the instance started to run.', example='2022-08-11T09:26:43Z'),
      storagePerNode?: int32(name='StoragePerNode', description='The storage capacity per node. The unit of this parameter can be one of the valid values of **StorageUnit**.

>  This parameter is returned only for instances in reserved storage mode.', example='0'),
      storageSize?: long(name='StorageSize', description='The storage capacity of the instance. Unit: GB.', example='50'),
      storageType?: string(name='StorageType', description='The storage type of the instance. Valid values:

*   **cloud_essd**: enhanced SSD (ESSD).
*   **cloud_efficiency**: ultra disk.

>  This parameter is returned only for instances in elastic storage mode.', example='cloud_essd'),
      storageUnit?: string(name='StorageUnit', description='The unit of the storage capacity. Valid values:

*   **GB SSD**
*   **TB SSD**
*   **GB HDD**

>  This parameter is returned only for instances in reserved storage mode.', example='GB SSD'),
      supportRestore?: boolean(name='SupportRestore', description='Indicates whether the instance supports backup and restoration. Valid values:

*   **true**
*   **false**', example='true'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test-key'),
          value?: string(name='Value', description='The tag value.', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the instance. Each tag is a key-value pair.'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.', example='vsw-bp1cpq8mr64paltkb****'),
      vectorConfigurationStatus?: string(name='VectorConfigurationStatus', description='Indicates whether vector search engine optimization is enabled. Valid values:

*   **enabled**
*   **disabled**', example='enabled'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID of the instance.', example='vpc-bp19ame5m1r3oejns****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-j'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items', description='The queried instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5E6EDEB8-D73E-5F2D-B948-86C8AEB05A68'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

/**
  * ##
  * You can call this operation to query the information about an AnalyticDB for PostgreSQL instance, such as the instance type, network type, and instance state.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceAttributeResponse
 */
async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceAttribute',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * You can call this operation to query the information about an AnalyticDB for PostgreSQL instance, such as the instance type, network type, and instance state.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceAttributeRequest
  * @return DescribeDBInstanceAttributeResponse
 */
async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceDataBloatRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30'),
}

model DescribeDBInstanceDataBloatResponseBody = {
  items?: [ 
    {
      bloatCeoff?: string(name='BloatCeoff', description='The coefficient of data bloat. It is calculated by using the following formula:

Bloat coefficient = Number of dead rows/Number of active rows.', example='1.03'),
      bloatSize?: string(name='BloatSize', description='The bloat size of the table. It indicates the amount of space that can be released.', example='0.2MB'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='adbtest'),
      expectTableSize?: string(name='ExpectTableSize', description='The expected size of the table.

It indicates the size of the table that has no data bloat.', example='1MB'),
      realTableSize?: string(name='RealTableSize', description='The actual size of the table.', example='1.2MB'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema1'),
      sequence?: int32(name='Sequence', description='The sequence number.', example='1'),
      storageType?: string(name='StorageType', description='The storage type of the table. Valid values:

*   **Heap Table**
*   **Append-Only Heap Table**
*   **Append-Only Columnar Table**', example='Heap Table'),
      suggestedAction?: string(name='SuggestedAction', description='This parameter is not returned.', example='null'),
      tableName?: string(name='TableName', description='The name of the table.', example='tab1'),
      timeLastUpdated?: string(name='TimeLastUpdated', description='The time when the table was last deleted, inserted, or updated.', example='2022-08-08T20:00:00Z'),
      timeLastVacuumed?: string(name='TimeLastVacuumed', description='The time when the table was last vacuumed. The time is displayed in UTC.', example='2022-08-08T16:00:00Z'),
    }
  ](name='Items', description='Details of data bloat.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1'),
}

model DescribeDBInstanceDataBloatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDataBloatResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceDataBloatRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceDataBloatResponse
 */
async function describeDBInstanceDataBloatWithOptions(request: DescribeDBInstanceDataBloatRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataBloatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataBloat',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of data bloat on an AnalyticDB for PostgreSQL instance in elastic storage mode. The minor version of the instance must be V6.3.10.1 or later. For more information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceDataBloatRequest
  * @return DescribeDBInstanceDataBloatResponse
 */
async function describeDBInstanceDataBloat(request: DescribeDBInstanceDataBloatRequest): DescribeDBInstanceDataBloatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataBloatWithOptions(request, runtime);
}

model DescribeDBInstanceDataSkewRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20'),
}

model DescribeDBInstanceDataSkewResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='adbtest'),
      distributeKey?: string(name='DistributeKey', description='The distribution key of the table.', example='ItemId'),
      owner?: string(name='Owner', description='The owner of the table.', example='adbpguser'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema1'),
      sequence?: int32(name='Sequence', description='The sequence number of the data skew case. All data skew cases are sorted by severity in descending order.', example='1'),
      tableName?: string(name='TableName', description='The name of the table.', example='tab1'),
      tableSize?: string(name='TableSize', description='The total number of rows in the table.', example='100000'),
      tableSkew?: string(name='TableSkew', description='The skew ratio of the table. Valid values: 0 to 100. Unit: %. A greater value indicates that the table is more severely skewed. A smaller value indicates less impact on query performance. A value of 0 indicates no data skew.', example='10.23'),
      timeLastUpdated?: string(name='TimeLastUpdated', description='The time when the table was last deleted, inserted, or updated.', example='2020-09-08T20:00:00Z'),
    }
  ](name='Items', description='Details about data skew.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeDBInstanceDataSkewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDataSkewResponseBody(name='body'),
}

/**
  * To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceDataSkewRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceDataSkewResponse
 */
async function describeDBInstanceDataSkewWithOptions(request: DescribeDBInstanceDataSkewRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataSkewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataSkew',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To prevent data skew from affecting your database service, you can call this operation to query the details about data skew on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceDataSkewRequest
  * @return DescribeDBInstanceDataSkewResponse
 */
async function describeDBInstanceDataSkew(request: DescribeDBInstanceDataSkewRequest): DescribeDBInstanceDataSkewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataSkewWithOptions(request, runtime);
}

model DescribeDBInstanceDiagnosisSummaryRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20'),
  rolePreferd?: string(name='RolePreferd', description='The role state of the node. It specifies whether a primary/secondary switchover occurs. Valid values:

*   **normal**: The node role is normal. No primary/secondary switchover occurs.
*   **reverse**: The node role is reversed. A primary/secondary switchover occurs.', example='normal'),
  startStatus?: string(name='StartStatus', description='The running state of the node. Valid values:

*   **UP**: The node is running.
*   **DOWN**: The node is faulty.

If you do not specify this parameter, the information about nodes in all running states is returned.', example='UP'),
  syncMode?: string(name='SyncMode', description='The data synchronization state of the node. Valid values:

*   **synced**: The node data is synchronized.
*   **notSyncing**: The node data is not synchronized.

If you do not specify this parameter, the information about nodes in all synchronization states is returned.', example='synced'),
}

model DescribeDBInstanceDiagnosisSummaryResponseBody = {
  items?: [ 
    {
      hostname?: string(name='Hostname', description='The name of the node.', example='gp-t4np568qe9710****-master-100984919'),
      nodeAddress?: string(name='NodeAddress', description='The IP address of the node.', example='192.168.XX.XX'),
      nodeCID?: string(name='NodeCID', description='The node group ID.', example='-1'),
      nodeID?: string(name='NodeID', description='The node ID.', example='1'),
      nodeName?: string(name='NodeName', description='The name of the host where the node resides.', example='ap-southeast-1.i-t4n4c4ryr0yr441d****'),
      nodePort?: string(name='NodePort', description='The port number of the node.', example='3000'),
      nodePreferredRole?: string(name='NodePreferredRole', description='The initial role of the node. Valid values:

*   **primary**: primary node.
*   **mirror**: secondary node.

If the value of this parameter is the same as that of **NodeRole**, no primary/secondary switchover occurs. If the value of this parameter is different from that of **NodeRole**, a primary/secondary switchover occurs.', example='primary'),
      nodeReplicationMode?: string(name='NodeReplicationMode', description='The data synchronization state of the node. Valid values:

*   **Synced**: The node data is synchronized.
*   **Not Syncing**: The node data is not synchronized.
*   **No sync required**: Data synchronization is not required. This value may be returned only for the coordinator node.', example='Synced'),
      nodeRole?: string(name='NodeRole', description='The current role of the node. Valid values:

*   **primary**: primary node.
*   **mirror**: secondary node.', example='primary'),
      nodeStatus?: string(name='NodeStatus', description='The running state of the node. Valid values:

*   **UP**: The node is running.
*   **DOWN**: The node is faulty.', example='UP'),
      nodeType?: string(name='NodeType', description='The type of the node. Valid values:

*   **master**: primary coordinator node.
*   **slave**: standby coordinator node.
*   **segment**: compute node.', example='master'),
    }
  ](name='Items', description='The group ID.'),
  masterStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum', description='The number of abnormal nodes.', example='0'),
    normalNodeNum?: int32(name='NormalNodeNum', description='The number of normal nodes.', example='2'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum', description='The number of nodes whose roles are reversed.', example='0'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum', description='The number of unsynchronized nodes.', example='0'),
    preferredNodeNum?: int32(name='PreferredNodeNum', description='The number of nodes whose roles are normal.', example='2'),
    syncedNodeNum?: int32(name='SyncedNodeNum', description='The number of synchronized nodes.', example='1'),
  }(name='MasterStatusInfo', description='The state information about the coordinator node.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='070534EC-78D5-5519-83CC-E7B1A9213483'),
  segmentStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum', description='The number of abnormal nodes.', example='0'),
    normalNodeNum?: int32(name='NormalNodeNum', description='The number of normal nodes.', example='4'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum', description='The number of nodes whose roles are reversed.', example='0'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum', description='The number of unsynchronized nodes.', example='4'),
    preferredNodeNum?: int32(name='PreferredNodeNum', description='The number of nodes whose roles are normal.', example='4'),
    syncedNodeNum?: int32(name='SyncedNodeNum', description='The number of synchronized nodes.', example='0'),
  }(name='SegmentStatusInfo', description='The state information about compute nodes.'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='6'),
}

model DescribeDBInstanceDiagnosisSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDiagnosisSummaryResponseBody(name='body'),
}

/**
  * You can call this operation to query the distribution and states of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance.
  *
  * @param request DescribeDBInstanceDiagnosisSummaryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceDiagnosisSummaryResponse
 */
async function describeDBInstanceDiagnosisSummaryWithOptions(request: DescribeDBInstanceDiagnosisSummaryRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDiagnosisSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rolePreferd)) {
    query['RolePreferd'] = request.rolePreferd;
  }
  if (!Util.isUnset(request.startStatus)) {
    query['StartStatus'] = request.startStatus;
  }
  if (!Util.isUnset(request.syncMode)) {
    query['SyncMode'] = request.syncMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDiagnosisSummary',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the distribution and states of coordinator and compute nodes in an AnalyticDB for PostgreSQL instance.
  *
  * @param request DescribeDBInstanceDiagnosisSummaryRequest
  * @return DescribeDBInstanceDiagnosisSummaryResponse
 */
async function describeDBInstanceDiagnosisSummary(request: DescribeDBInstanceDiagnosisSummaryRequest): DescribeDBInstanceDiagnosisSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDiagnosisSummaryWithOptions(request, runtime);
}

model DescribeDBInstanceErrorLogRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-04-25T06:59Z'),
  host?: string(name='Host', description='This parameter is not supported in Alibaba Cloud public cloud.', example='null'),
  keywords?: string(name='Keywords', description='One or more keywords that are used to query error logs.', example='error'),
  logLevel?: string(name='LogLevel', description='The level of the logs to query. Valid values:

*   **ALL**: queries all error logs.
*   **PANIC**: queries only abnormal logs.
*   **FATAL**: queries only critical logs.
*   **ERROR**: queries only error logs.', example='ALL'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **20**
*   **50**
*   **100**

Default value: **20**.', example='20'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-04-24T06:59Z'),
  user?: string(name='User', description='The username.', example='adbpguser'),
}

model DescribeDBInstanceErrorLogResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='adbtest'),
      host?: string(name='Host', description='This parameter is not supported.', example='null'),
      logContext?: string(name='LogContext', description='The content of the error log.', example='unsupported frontend protocol 2689.28208: server supports 1.0 to 3.0'),
      logLevel?: string(name='LogLevel', description='The level of the queried log.', example='FATAL'),
      time?: long(name='Time', description='The time when the log was generated. The time is displayed in UTC.', example='2022-04-24 11:28:14'),
      user?: string(name='User', description='The name of the database account.', example='adbpguser'),
    }
  ](name='Items', description='The content of the error log.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDBInstanceErrorLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceErrorLogResponseBody(name='body'),
}

/**
  * You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceErrorLogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceErrorLogResponse
 */
async function describeDBInstanceErrorLogWithOptions(request: DescribeDBInstanceErrorLogRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceErrorLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.keywords)) {
    query['Keywords'] = request.keywords;
  }
  if (!Util.isUnset(request.logLevel)) {
    query['LogLevel'] = request.logLevel;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceErrorLog',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the error logs of an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceErrorLogRequest
  * @return DescribeDBInstanceErrorLogResponse
 */
async function describeDBInstanceErrorLog(request: DescribeDBInstanceErrorLogRequest): DescribeDBInstanceErrorLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceErrorLogWithOptions(request, runtime);
}

model DescribeDBInstanceIPArrayListRequest {
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the IP address whitelist. If you do not specify this parameter, the default whitelist is queried.

>  Each instance supports up to 50 IP address whitelists.', example='Default'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp***************'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
}

model DescribeDBInstanceIPArrayListResponseBody = {
  items?: {
    DBInstanceIPArray?: [ 
    {
      DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute is not displayed in the console.', example='hidden'),
      DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the IP address whitelist.', example='default'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses listed in the whitelist. Up to 1,000 IP addresses are contained in a whitelist and separated by commas (,). The IP addresses must use one of the following formats:

*   0.0.0.0/0
*   10.23.12.24. This is a standard IP address.
*   10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.', example='127.0.0.1'),
    }
  ](name='DBInstanceIPArray')
  }(name='Items', description='The queried IP address whitelists.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CB7AA0BF-BE41-480E-A3DC-C97BF85A391B'),
}

model DescribeDBInstanceIPArrayListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceIPArrayListResponseBody(name='body'),
}

/**
  * You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceIPArrayListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceIPArrayListResponse
 */
async function describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIPArrayListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceIPArrayName)) {
    query['DBInstanceIPArrayName'] = request.DBInstanceIPArrayName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceIPArrayList',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the whitelists of IP addresses that are allowed to access an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstanceIPArrayListRequest
  * @return DescribeDBInstanceIPArrayListResponse
 */
async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIPArrayListWithOptions(request, runtime);
}

model DescribeDBInstanceIndexUsageRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='20'),
}

model DescribeDBInstanceIndexUsageResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='adbtest'),
      indexDef?: string(name='IndexDef', description='The definition of the index.', example='CREATE INDEX idx1 ON schema1.tab1_ptr_2010'),
      indexName?: string(name='IndexName', description='The name of the index.', example='idx1'),
      indexScanTimes?: int32(name='IndexScanTimes', description='The number of index scans.', example='50000'),
      indexSize?: string(name='IndexSize', description='The size of the index. Unit: bytes.', example='10000'),
      isPartitionTable?: boolean(name='IsPartitionTable', description='Indicates whether the table is a partitioned table. Valid values:

*   **true**: The table is a partitioned table.
*   **false**: The table is not a partitioned table.', example='true'),
      parentTableName?: string(name='ParentTableName', description='The name of the parent table.', example='tab1'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema1'),
      tableName?: string(name='TableName', description='The name of the table.', example='tab1_ptr_2010'),
      timeLastUpdated?: string(name='TimeLastUpdated', description='The time when the table was last deleted, inserted, or updated.', example='2022-08-08T20:00:00Z'),
    }
  ](name='Items', description='The time when the table was last deleted, inserted, or updated.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDBInstanceIndexUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceIndexUsageResponseBody(name='body'),
}

/**
  * Appropriate indexes can accelerate database queries. You can call this operation to query the index usage of an AnalyticDB for PostgreSQL instance.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  *
  * @param request DescribeDBInstanceIndexUsageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstanceIndexUsageResponse
 */
async function describeDBInstanceIndexUsageWithOptions(request: DescribeDBInstanceIndexUsageRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIndexUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceIndexUsage',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Appropriate indexes can accelerate database queries. You can call this operation to query the index usage of an AnalyticDB for PostgreSQL instance.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  *
  * @param request DescribeDBInstanceIndexUsageRequest
  * @return DescribeDBInstanceIndexUsageResponse
 */
async function describeDBInstanceIndexUsage(request: DescribeDBInstanceIndexUsageRequest): DescribeDBInstanceIndexUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIndexUsageWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the instance.

>  If you do not specify this parameter, the information about all endpoints of the instance is returned.', example='gp-0xin9q82c33xc****-master.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxxx'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      addressType?: string(name='AddressType', description='The type of the endpoint.', example='Intranet'),
      connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the instance.', example='gp-xxxxxxx.gpdb.rds.aliyuncs.com'),
      IPAddress?: string(name='IPAddress', description='The IP address.', example='127.0.0.1'),
      IPType?: string(name='IPType', description='The type of the IP address.

*   Valid values for instances in the classic network: Inner and Public.
*   Valid values for instances in a virtual private cloud (VPC): Private and Public.', example='Inner'),
      port?: string(name='Port', description='The port number.', example='3432'),
      VPCId?: string(name='VPCId', description='The VPC ID of the instance.', example='vpc-xxxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID. Multiple IDs are separated by commas (,).', example='vsw-xxxxxxxx'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the instance that is deployed in a VPC.', example='vpc-xxxxxxx'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos', description='The connection information of the instance.'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   Classic: classic network.
*   VPC: VPC.', example='Classic'),
  requestId?: string(name='RequestId', description='The request ID.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceNetInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-07-09T03:47Z'),
  key?: string(name='Key', description='The performance metric. Separate multiple values with commas (,). For more information, see [Performance parameters](~~86943~~).', example='CpuUsage,MemoryUsage,Gpdb_SpaceUsage,Gpdb_IOPS,Gpdb_session'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-07-08T03:47Z'),
}

model DescribeDBInstancePerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end time of the query.', example='2022-07-09T03:47Z'),
  engine?: string(name='Engine', description='The database engine of the instance.', example='gpdb'),
  performanceKeys?: [ string ](name='PerformanceKeys', description='The queried performance metrics.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5E85244A-AB47-46A3-A3AD-5F307DCB407E'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2022-07-08T03:47Z'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancePerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDBInstancePlansRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planCreateDate?: string(name='PlanCreateDate', description='The time used to filter plans. If you specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format, the plans created before this time are returned. The time must be in UTC. If you do not specify this parameter, all plans are returned.', example='2022-04-17T23:00Z'),
  planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan'),
  planId?: string(name='PlanId', description='The plan ID.

> You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the information about plans, including plan IDs.', example='1234'),
  planScheduleType?: string(name='PlanScheduleType', description='The execution mode of the plan. Valid values:

*   **Postpone**: The plan is executed later.
*   **Regular**: The plan is executed periodically.', example='Regular'),
  planType?: string(name='PlanType', description='The type of the plan. Valid values:

*   **PauseResume**: pauses and resumes an instance.
*   **Resize**: scales an instance.', example='PauseResume'),
}

model DescribeDBInstancePlansResponseBody = {
  errorMessage?: string(name='ErrorMessage', description='The error message.

This parameter is returned only if the request fails.', example='****'),
  items?: {
    planList?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
      planConfig?: string(name='PlanConfig', description='The execution information of the plan.', example='{"pause":{"planCronTime":"0 22 * * 5"},"resume":{"planCronTime":"0 23 * * 5"}}'),
      planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan'),
      planEndDate?: string(name='PlanEndDate', description='The end time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  This parameter is returned only for periodically executed plans.', example='2023-04-17T23:00Z'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
      planName?: string(name='PlanName', description='The name of the plan.', example='test-plan'),
      planScheduleType?: string(name='PlanScheduleType', description='The execution mode of the plan. Valid values:

*   **Postpone**: The plan is executed later.
*   **Regular**: The plan is executed periodically.', example='Regular'),
      planStartDate?: string(name='PlanStartDate', description='The start time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  This parameter is returned only for periodically executed plans.', example='2022-04-17T23:00Z'),
      planStatus?: string(name='PlanStatus', description='The state of the plan. Valid values:

*   **active**: The plan is running.
*   **cancel**: The plan is canceled.
*   **deleted**: The plan is deleted.
*   **finished**: The plan execution is complete.', example='active'),
      planType?: string(name='PlanType', description='The type of the plan. Valid values:

*   **PauseResume**: pauses and resumes an instance.
*   **Resize**: scales an instance.', example='PauseResume'),
    }
  ](name='PlanList')
  }(name='Items', description='The instance ID.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', description='Indicates whether the request was successful.

If the request was successful, **success** is returned. If the request failed, this parameter is not returned.', example='success'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeDBInstancePlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancePlansResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstancePlansRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstancePlansResponse
 */
async function describeDBInstancePlansWithOptions(request: DescribeDBInstancePlansRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planCreateDate)) {
    query['PlanCreateDate'] = request.planCreateDate;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planScheduleType)) {
    query['PlanScheduleType'] = request.planScheduleType;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancePlans',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of plans for an AnalyticDB for PostgreSQL instance in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstancePlansRequest
  * @return DescribeDBInstancePlansResponse
 */
async function describeDBInstancePlans(request: DescribeDBInstancePlansRequest): DescribeDBInstancePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePlansWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
}

model DescribeDBInstanceSSLResponseBody = {
  certCommonName?: string(name='CertCommonName', description='The name of the SSL certificate.', example='*.gpdbmaster.xxx.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D5FF8636-37F6-4CE0-8002-F8734C62C686'),
  SSLEnabled?: boolean(name='SSLEnabled', description='Indicates whether SSL encryption is enabled.', example='true'),
  SSLExpiredTime?: string(name='SSLExpiredTime', description='The expiration time of the SSL certificate.', example='2023-08-05T09:05:53Z'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSSL',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeDBInstanceSupportMaxPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDBInstanceSupportMaxPerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  performances?: {
    performance?: [ 
    {
      bottleneck?: string(name='Bottleneck', example='ecs or disk'),
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      value?: string(name='Value', example='90'),
    }
  ](name='Performance')
  }(name='Performances'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
}

model DescribeDBInstanceSupportMaxPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSupportMaxPerformanceResponseBody(name='body'),
}

async function describeDBInstanceSupportMaxPerformanceWithOptions(request: DescribeDBInstanceSupportMaxPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSupportMaxPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSupportMaxPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSupportMaxPerformance(request: DescribeDBInstanceSupportMaxPerformanceRequest): DescribeDBInstanceSupportMaxPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSupportMaxPerformanceWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  DBInstanceCategories?: [ string ](name='DBInstanceCategories', description='The edition of the instance. Separate multiple values with commas (,).'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****'),
  DBInstanceIds?: string(name='DBInstanceIds', description='The instance ID. Separate multiple values with commas (,).', example='gp-bp12ga6v69h86****'),
  DBInstanceModes?: [ string ](name='DBInstanceModes', description='The resource type of the instance. Separate multiple values with commas (,).'),
  DBInstanceStatuses?: [ string ](name='DBInstanceStatuses', description='The state of the instance.'),
  instanceDeployTypes?: [ string ](name='InstanceDeployTypes', description='This parameter is no longer used.'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**: virtual private cloud (VPC).
*   **Classic**: classic network.

> If you do not specify this parameter, instances of all network types are returned.', example='VPC'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='50'),
  regionId?: string(name='RegionId', description='The region ID.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.', example='test-key'),
      value?: string(name='Value', description='The value of tag N.', example='test-value'),
    }
  ](name='Tag', description='The tag value.'),
  vpcId?: string(name='VpcId'),
}

model DescribeDBInstancesShrinkRequest {
  DBInstanceCategoriesShrink?: string(name='DBInstanceCategories', description='The edition of the instance. Separate multiple values with commas (,).'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****'),
  DBInstanceIds?: string(name='DBInstanceIds', description='The instance ID. Separate multiple values with commas (,).', example='gp-bp12ga6v69h86****'),
  DBInstanceModesShrink?: string(name='DBInstanceModes', description='The resource type of the instance. Separate multiple values with commas (,).'),
  DBInstanceStatusesShrink?: string(name='DBInstanceStatuses', description='The state of the instance.'),
  instanceDeployTypesShrink?: string(name='InstanceDeployTypes', description='This parameter is no longer used.'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **VPC**: virtual private cloud (VPC).
*   **Classic**: classic network.

> If you do not specify this parameter, instances of all network types are returned.', example='VPC'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='50'),
  regionId?: string(name='RegionId', description='The region ID.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.', example='test-key'),
      value?: string(name='Value', description='The value of tag N.', example='test-value'),
    }
  ](name='Tag', description='The tag value.'),
  vpcId?: string(name='VpcId'),
}

model DescribeDBInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      connectionMode?: string(name='ConnectionMode', description='An invalid parameter. It is no longer returned when you call this operation.

You can call the [DescribeDBInstanceAttribute](~~86910~~) operation to query the access mode of an instance.', example='null'),
      createTime?: string(name='CreateTime', description='The time when the instance was created. The time is displayed in UTC.', example='2021-10-09T04:54:08Z'),
      DBInstanceCategory?: string(name='DBInstanceCategory', description='The edition of the instance. Valid values:

*   **Basic**: Basic Edition.
*   **HighAvailability**: High-availability Edition.
*   **Finance**: Enterprise Edition.', example='HighAvailability'),
      DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****'),
      DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp12ga6v69h86****'),
      DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **Serverless**: Serverless mode.
*   **StorageElastic**: elastic storage mode.
*   **Classic**: reserved storage mode.', example='StorageElastic'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The type of the network interface card (NIC) that is used by the instance. Valid values:

*   **0**: Internet.
*   **1**: internal network.
*   **2**: VPC.', example='2'),
      DBInstanceStatus?: string(name='DBInstanceStatus', description='The state of the instance. For more information, see [Instance statuses](~~86944~~).', example='Running'),
      engine?: string(name='Engine', description='The database engine of the instance.', example='gpdb'),
      engineVersion?: string(name='EngineVersion', description='The version of the database engine.', example='6.0'),
      expireTime?: string(name='ExpireTime', description='The expiration time of the instance. The time is displayed in UTC.

> The expiration time of a pay-as-you-go instance is `2999-09-08T16:00:00Z`.', example='2999-09-08T16:00:00Z'),
      instanceDeployType?: string(name='InstanceDeployType', description='The resource type of the instance. Valid values:

*   **cluster**: Serverless mode or elastic storage mode.
*   **replicaSet**: reserved storage mode.', example='cluster'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   **Classic**: classic network.
*   **VPC**: VPC.', example='VPC'),
      lockMode?: string(name='LockMode', description='The lock mode of the instance. Valid values:

*   **Unlock**: The instance is not locked.
*   **ManualLock**: The instance is manually locked.
*   **LockByExpiration**: The instance is automatically locked due to instance expiration.
*   **LockByRestoration**: The instance is automatically locked due to instance restoration.
*   **LockByDiskQuota**: The instance is automatically locked due to exhausted storage.
*   **LockReadInstanceByDiskQuota**: The instance is a read-only instance and is automatically locked due to exhausted storage.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The reason why the instance is locked. Valid values:

*   **0**: The instance is not locked.
*   **1**: The instance is manually locked.
*   **2**: The instance is automatically locked due to instance expiration.
*   **3**: The instance is automatically locked due to instance restoration.
*   **4**: The instance is automatically locked due to exhausted storage.

> If the instance is in reserved storage mode and unlocked, null is returned.', example='0'),
      masterNodeNum?: int32(name='MasterNodeNum', description='The number of coordinator nodes.', example='1'),
      payType?: string(name='PayType', description='The billing method of the instance. Valid values:

*   **Postpaid**: pay-as-you-go.
*   **Prepaid**: subscription.', example='Postpaid'),
      prodType?: string(name='ProdType'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
      segNodeNum?: string(name='SegNodeNum', description='The number of compute nodes.', example='4'),
      serverlessMode?: string(name='ServerlessMode', description='The type of the Serverless mode. Valid values:

*   **Manual**: manual scheduling.
*   **Auto**: automatic scheduling.

> This parameter is returned only for instances in Serverless mode.', example='Manual'),
      storageSize?: string(name='StorageSize', description='The storage capacity of the instance. Unit: GB.', example='50'),
      storageType?: string(name='StorageType', description='The storage type of the instance. Valid values:

*   **cloud_essd**: enhanced SSD (ESSD).
*   **cloud_efficiency**: ultra disk.', example='cloud_essd'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of tag N.', example='test-key'),
          value?: string(name='Value', description='The value of tag N.', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the instance.'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp1cpq8mr64paltkb****'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp19ame5m1r3oejns****'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-h'),
    }
  ](name='DBInstance')
  }(name='Items', description='The queried instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='53EA07B7-FC2A-521B-AB7C-27**********'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

/**
  * ##
  * You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a region.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq DescribeDBInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDBInstancesResponse
 */
async function describeDBInstancesWithOptions(tmpReq: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeDBInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.DBInstanceCategories)) {
    request.DBInstanceCategoriesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceCategories, 'DBInstanceCategories', 'simple');
  }
  if (!Util.isUnset(tmpReq.DBInstanceModes)) {
    request.DBInstanceModesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceModes, 'DBInstanceModes', 'simple');
  }
  if (!Util.isUnset(tmpReq.DBInstanceStatuses)) {
    request.DBInstanceStatusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceStatuses, 'DBInstanceStatuses', 'simple');
  }
  if (!Util.isUnset(tmpReq.instanceDeployTypes)) {
    request.instanceDeployTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceDeployTypes, 'InstanceDeployTypes', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.DBInstanceCategoriesShrink)) {
    query['DBInstanceCategories'] = request.DBInstanceCategoriesShrink;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceIds)) {
    query['DBInstanceIds'] = request.DBInstanceIds;
  }
  if (!Util.isUnset(request.DBInstanceModesShrink)) {
    query['DBInstanceModes'] = request.DBInstanceModesShrink;
  }
  if (!Util.isUnset(request.DBInstanceStatusesShrink)) {
    query['DBInstanceStatuses'] = request.DBInstanceStatusesShrink;
  }
  if (!Util.isUnset(request.instanceDeployTypesShrink)) {
    query['InstanceDeployTypes'] = request.instanceDeployTypesShrink;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstances',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * You can call this operation to query the instance types, network types, and states of AnalyticDB for PostgreSQL instances within a region.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDBInstancesRequest
  * @return DescribeDBInstancesResponse
 */
async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDBVersionInfosRequest {
  DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **StorageElastic**: elastic storage mode.
*   **Serverless**: Serverless mode.', example='StorageElastic'),
  DBVersion?: string(name='DBVersion', description='The minor version number that does not include the prefix.', example='6.3.10.20'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
}

model DescribeDBVersionInfosResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  versionDetails?: {
    serverless?: any(name='Serverless', description='The queried minor version information about the instance in Serverless mode.', example='"Serverless": [
                {
                    "engineVersion": "6.0",
                    "versionInfos": [
                        {
                            "kernelVersion": "v2.0.0.5",
                            "releaseDate": "2023-05-28T07:48Z",
                            "expirationDate": "2026-05-28T07:48Z"
                        },
                        {
                            "kernelVersion": "v2.0.0.1",
                            "releaseDate": "2023-03-27T12:44Z",
                            "expirationDate": "2026-03-27T12:44Z"
                        },
                        {
                            "kernelVersion": "v1.0.5.1",
                            "releaseDate": "2023-02-22T11:39Z",
                            "expirationDate": "2026-02-22T11:39Z"
                        }
                    ]
                }
]'),
    storageElastic?: any(name='StorageElastic', description='The queried minor version information about the instance in elastic storage mode.', example='"StorageElasic": [
                {
                    "engineVersion": "6.0",
                    "versionInfos": [
                        {
                            "kernelVersion": "v6.3.11.2",
                            "releaseDate": "2023-08-17T09:14Z",
                            "expirationDate": "2026-08-17T09:14Z"
                        }
          },
                {
                    "engineVersion": "7.0",
                    "versionInfos": [
                        {
                            "kernelVersion": "v7.0.2.0",
                            "releaseDate": "2023-08-09T06:47Z",
                            "expirationDate": "2026-08-09T06:47Z"
                        },
                        {
                            "kernelVersion": "v7.0.1.8",
                            "releaseDate": "2023-05-25T06:56Z",
                            "expirationDate": "2026-05-25T06:56Z"
                        }
                    ]
                }
]'),
  }(name='VersionDetails', description='The queried minor versions.'),
}

model DescribeDBVersionInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBVersionInfosResponseBody(name='body'),
}

async function describeDBVersionInfosWithOptions(request: DescribeDBVersionInfosRequest, runtime: Util.RuntimeOptions): DescribeDBVersionInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceMode)) {
    query['DBInstanceMode'] = request.DBInstanceMode;
  }
  if (!Util.isUnset(request.DBVersion)) {
    query['DBVersion'] = request.DBVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBVersionInfos',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBVersionInfos(request: DescribeDBVersionInfosRequest): DescribeDBVersionInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBVersionInfosWithOptions(request, runtime);
}

model DescribeDataBackupsRequest {
  backupId?: string(name='BackupId', description='The ID of the backup set. If you specify BackupId, the details of the backup set are returned.

> You can call the [DescribeDataBackups](~~210093~~) operation to query the information about all backup sets of an instance, including backup set IDs.', example='327329803'),
  backupMode?: string(name='BackupMode', description='The backup mode. Valid values:

*   Automated
*   Manual

If you do not specify this parameter, all backup sets are returned.', example='Automated'),
  backupStatus?: string(name='BackupStatus', description='The state of the backup set. Valid values:

*   Success
*   Failed

If you do not specify this parameter, all backup sets are returned.', example='Success'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp***************'),
  dataType?: string(name='DataType', description='The backup type. Valid values:

*   **DATA**: full backup.
*   **RESTOREPOI**: point-in-time recovery backup.

If you do not specify this parameter, the backup sets of full backup are returned.', example='DATA'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2011-06-01T16:00Z'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   30
*   50
*   100

Default value: 30.', example='30'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2011-06-01T15:00Z'),
}

model DescribeDataBackupsResponseBody = {
  items?: [ 
    {
      backupEndTime?: string(name='BackupEndTime', description='The UTC time when the backup ended. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.', example='2021-12-22T12:01:43Z'),
      backupEndTimeLocal?: string(name='BackupEndTimeLocal', description='The local time when the backup ended. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.', example='2021-12-22 20:00:25'),
      backupMethod?: string(name='BackupMethod', description='The method that is used to generate the backup set. Valid values:

*   **Logical**: logical backup
*   **Physical**: physical backup
*   **Snapshot**: snapshot backup', example='Physical'),
      backupMode?: string(name='BackupMode', description='The backup mode.

Valid values for full backup:

*   Automated: automatic backup
*   Manual: manual backup

Valid values for point-in-time backup:

*   Automated: point-in-time backup after full backup
*   Manual: manual point-in-time backup
*   Period: point-in-time backup that is triggered by a backup policy', example='Automated'),
      backupSetId?: string(name='BackupSetId', description='The ID of the backup set.', example='1111111111'),
      backupSize?: long(name='BackupSize', description='The size of the backup file. Unit: bytes.', example='2167808'),
      backupStartTime?: string(name='BackupStartTime', description='The UTC time when the backup started. The time is in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.', example='2021-12-22T12:00:25Z'),
      backupStartTimeLocal?: string(name='BackupStartTimeLocal', description='The local time when the backup started. The time is in the yyyy-MM-dd HH:mm:ss format. The time is your local time.', example='2011-05-30 03:29:00'),
      backupStatus?: string(name='BackupStatus', description='The status of the backup set. Valid values:

*   Success
*   Failure', example='Success'),
      baksetName?: string(name='BaksetName', description='The name of a point-in-time backup set or the full backup set.', example='adbpgbackup_555*****_20211222200019'),
      consistentTime?: long(name='ConsistentTime', description='*   For full backup, this parameter indicates the point in time at which the data in the data backup file is consistent.
*   For point-in-time backup, this parameter indicates that the returned point in time is a timestamp.', example='1576506856'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp**************-master'),
      dataType?: string(name='DataType', description='The type of the backup. Valid values:

*   DATA: full backup
*   RESTOREPOI: point-in-time backup', example='DATA'),
    }
  ](name='Items', description='The instance ID.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='3E387971-33A5-5019-AD7F-DC**********'),
  totalBackupSize?: long(name='TotalBackupSize', description='The total backup set size. Unit: Byte.', example='1111111111'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDataBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataBackupsResponseBody(name='body'),
}

/**
  * You can call this operation to query a list of backup sets and backup details only for instances in elastic storage mode.
  *
  * @param request DescribeDataBackupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDataBackupsResponse
 */
async function describeDataBackupsWithOptions(request: DescribeDataBackupsRequest, runtime: Util.RuntimeOptions): DescribeDataBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.backupMode)) {
    query['BackupMode'] = request.backupMode;
  }
  if (!Util.isUnset(request.backupStatus)) {
    query['BackupStatus'] = request.backupStatus;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataBackups',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query a list of backup sets and backup details only for instances in elastic storage mode.
  *
  * @param request DescribeDataBackupsRequest
  * @return DescribeDataBackupsResponse
 */
async function describeDataBackups(request: DescribeDataBackupsRequest): DescribeDataBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataBackupsWithOptions(request, runtime);
}

model DescribeDataReDistributeInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDataReDistributeInfoResponseBody = {
  dataReDistributeInfo?: {
    message?: string(name='Message', description='The execution information. If an error occurs, the error message is returned.', example='redistributing'),
    progress?: long(name='Progress', description='The progress of data redistribution. Unit: %.', example='33'),
    remainTime?: string(name='RemainTime', description='The estimated remaining time for data redistribution.', example='00:01:28'),
    startTime?: string(name='StartTime', description='This parameter is not supported.', example='null'),
    status?: string(name='Status', description='The status of data redistribution.', example='RUNNING'),
    type?: string(name='Type', description='The execution type. The value **immediate** is returned, indicating immediate execution.', example='immediate'),
  }(name='DataReDistributeInfo', description='The data redistribution information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='04836A02-ADC9-1AA7-AC36-DE5E048BF505'),
}

model DescribeDataReDistributeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataReDistributeInfoResponseBody(name='body'),
}

async function describeDataReDistributeInfoWithOptions(request: DescribeDataReDistributeInfoRequest, runtime: Util.RuntimeOptions): DescribeDataReDistributeInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataReDistributeInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataReDistributeInfo(request: DescribeDataReDistributeInfoRequest): DescribeDataReDistributeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataReDistributeInfoWithOptions(request, runtime);
}

model DescribeDataShareInstancesRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: 30.', example='30'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
  searchValue?: string(name='SearchValue', description='The keyword used to filter instances, which can be an instance ID or instance description.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs and instance descriptions.', example='gp-bp***************'),
}

model DescribeDataShareInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************'),
      DBInstanceMode?: string(name='DBInstanceMode', description='The resource type of the instance. Valid values:

*   **Serverless**: Serverless mode
*   **StorageElasic**: elastic storage mode
*   **Classic**: reserved storage mode', example='Serverless'),
      dataShareStatus?: string(name='DataShareStatus', description='The state of data sharing. Valid values:

*   **opening**: Data sharing is being enabled.
*   **opened**: Data sharing is enabled.
*   **closing**: Data sharing is being disabled.
*   **closed**: Data sharing is disabled.', example='opened'),
      description?: string(name='Description', description='The description of the instance.', example='gp-bp***************'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-j'),
    }
  ](name='DBInstance')
  }(name='Items', description='The state of data sharing. Valid values:

*   **opening**
*   **opened**
*   **closing**
*   **closed**'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4CAF581-2AC7-41AD-8940-D5**********'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='1'),
}

model DescribeDataShareInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataShareInstancesResponseBody(name='body'),
}

/**
  * Data sharing is supported only for instances in Serverless mode.
  *
  * @param request DescribeDataShareInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDataShareInstancesResponse
 */
async function describeDataShareInstancesWithOptions(request: DescribeDataShareInstancesRequest, runtime: Util.RuntimeOptions): DescribeDataShareInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataShareInstances',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Data sharing is supported only for instances in Serverless mode.
  *
  * @param request DescribeDataShareInstancesRequest
  * @return DescribeDataShareInstancesResponse
 */
async function describeDataShareInstances(request: DescribeDataShareInstancesRequest): DescribeDataShareInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataShareInstancesWithOptions(request, runtime);
}

model DescribeDataSharePerformanceRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-08-03T15:10Z'),
  key?: string(name='Key', description='The name of the performance metric. Separate multiple values with commas (,). Valid values:

*   **adbpg_datashare_topic_count**: the number of shared topics.
*   **adbpg_datashare_data_size_mb**: the amount of data shared.', example='adbpg_datashare_topic_count'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-08-03T15:00Z'),
}

model DescribeDataSharePerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end time of the query.', example='2022-08-03T15:10Z'),
  performanceKeys?: [ 
    {
      name?: string(name='Name', description='The name of the performance metric.', example='adbpg_datashare_topic_count'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the performance metric.', example='adbpg_datashare_topic_count'),
          values?: [ 
            {
              point?: [ string ](name='Point', description='The value of the performance metric at a point in time.'),
            }
          ](name='Values', description='One or more values of the performance metric.'),
        }
      ](name='Series', description='Details of the performance metric.'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='int'),
    }
  ](name='PerformanceKeys', description='Details of data sharing performance metrics.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBE00C04-A3E8-4114-881D-0480A72CB92E'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2022-08-03T15:00Z'),
}

model DescribeDataSharePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSharePerformanceResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDataSharePerformanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDataSharePerformanceResponse
 */
async function describeDataSharePerformanceWithOptions(request: DescribeDataSharePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDataSharePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataSharePerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of data sharing performance metrics for an AnalyticDB for PostgreSQL instance in Serverless mode, such as the number of shared topics and the amount of data shared.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDataSharePerformanceRequest
  * @return DescribeDataSharePerformanceResponse
 */
async function describeDataSharePerformance(request: DescribeDataSharePerformanceRequest): DescribeDataSharePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataSharePerformanceWithOptions(request, runtime);
}

model DescribeDiagnosisDimensionsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  databases?: [ string ](name='Databases', description='The names of the databases.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9ADCAACA-E0E8-5319-AE3B-E260E957BDF9'),
  userNames?: [ string ](name='UserNames', description='The names of the database accounts.'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

/**
  * To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDiagnosisDimensionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiagnosisDimensionsResponse
 */
async function describeDiagnosisDimensionsWithOptions(request: DescribeDiagnosisDimensionsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisDimensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisDimensions',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To facilitate management, you can call this operation to query all databases and database accounts on an AnalyticDB for PostgreSQL instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDiagnosisDimensionsRequest
  * @return DescribeDiagnosisDimensionsResponse
 */
async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisDimensionsWithOptions(request, runtime);
}

model DescribeDiagnosisMonitorPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-05-07T07:59Z'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. Specify the value in the JSON format. Valid values:

*   `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.

*   `{"Type":"status","Value":"finished"}`: filters completed queries.

*   `{"Type":"status","Value":"running"}`: filters running queries.

*   `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min** and **Max**.

    *   If only **Min** is specified, the queries that consume a period of time that is greater than or equal to the Min value are filtered.
    *   If only **Max** is specified, the queries that consume a period of time that is less than the Max value are filtered.
    *   If both **Min** and **Max** are specified, the queries that consume a period of time that is greater than or equal to the **Min** value and less than the **Max** value are filtered.', example='{"Type":"maxCost", "Value":"100"}'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T06:59Z'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser'),
}

model DescribeDiagnosisMonitorPerformanceResponseBody = {
  performances?: [ 
    {
      cost?: int32(name='Cost', description='The execution duration of the query. Unit: milliseconds.', example='1'),
      database?: string(name='Database', description='The name of the database.', example='adbtest'),
      queryID?: string(name='QueryID', description='The ID of the query. It is a unique identifier of the query.', example='2022042612465401000000012903151998970'),
      startTime?: long(name='StartTime', description='The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1651877940000'),
      status?: string(name='Status', description='The execution state of the query. Valid values:

*   **running**: The query is being executed.
*   **finished**: The query is complete.', example='finished'),
      user?: string(name='User', description='The name of the database account.', example='adbpguser'),
    }
  ](name='Performances', description='Details of query execution.'),
  performancesThreshold?: int32(name='PerformancesThreshold', description='The threshold for the number of queries.', example='10000'),
  performancesTruncated?: boolean(name='PerformancesTruncated', description='Indicates whether the queries are truncated when the number of queries exceeds the threshold. Valid values:

*   **true**: The queries are truncated.
*   **false**: The queries are not truncated.', example='false'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeDiagnosisMonitorPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisMonitorPerformanceResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDiagnosisMonitorPerformanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiagnosisMonitorPerformanceResponse
 */
async function describeDiagnosisMonitorPerformanceWithOptions(request: DescribeDiagnosisMonitorPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisMonitorPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisMonitorPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of query execution on an AnalyticDB for PostgreSQL instance in elastic storage mode within a specified time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDiagnosisMonitorPerformanceRequest
  * @return DescribeDiagnosisMonitorPerformanceResponse
 */
async function describeDiagnosisMonitorPerformance(request: DescribeDiagnosisMonitorPerformanceRequest): DescribeDiagnosisMonitorPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisMonitorPerformanceWithOptions(request, runtime);
}

model DescribeDiagnosisRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2022-05-07T07:59Z'),
  keyword?: string(name='Keyword', description='The keyword of the SQL statement.', example='SELECT'),
  order?: string(name='Order', description='The order of fields in the console. You do not need to specify this parameter.', example='null'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. Specify the value in the JSON format. Valid values:

*   `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.

*   `{"Type":"status","Value":"finished"}`: filters completed queries.

*   `{"Type":"status","Value":"running"}`: filters running queries.

*   `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume a period of 30 milliseconds to less than 50 milliseconds. You can customize a filter condition by setting **Min** and **Max**.

    *   If only **Min** is specified, the queries that consume a period of time that is greater than the Min value are filtered.
    *   If only **Max** is specified, the queries that consume a period of time that is less than the Max value are filtered.
    *   If both **Min** and **Max** are specified, the queries that consume a period of time that is greater than or equal to the **Min** value and less than or equal to the **Max** value are filtered.', example='{ "Type":"maxCost", "Value":"100" }'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T06:59Z'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser'),
}

model DescribeDiagnosisRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='adbtest'),
      duration?: int32(name='Duration', description='The execution duration of the query. Unit: seconds.', example='1'),
      queryID?: string(name='QueryID', description='The ID of the query. It is a unique identifier of the query.', example='2022042612465401000000012903151998970'),
      SQLStmt?: string(name='SQLStmt', description='The SQL statement.', example='SELECT * FROM t1,t2 WHERE t1.id=t2.id;'),
      SQLTruncated?: boolean(name='SQLTruncated', description='Indicates whether the SQL statement needs to be truncated. Valid values:

*   **true**: The SQL statement needs to be truncated.
*   **false**: The SQL statement does not need to be truncated.', example='false'),
      SQLTruncatedThreshold?: int32(name='SQLTruncatedThreshold', description='The threshold used to determine whether an SQL statement must be truncated. The value is the number of characters.', example='5120'),
      sessionID?: string(name='SessionID', description='The ID of the session that contains the query.', example='50'),
      startTime?: long(name='StartTime', description='The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1651877940000'),
      status?: string(name='Status', description='The execution state of the query. Valid values:

*   **running**: The query is being executed.
*   **finished**: The query is complete.', example='finished'),
      user?: string(name='User', description='The name of the database account.', example='adbpguser'),
    }
  ](name='Items', description='The threshold that determines whether the SQL statement must be truncated. The value is the number of characters.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDiagnosisRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiagnosisRecordsResponse
 */
async function describeDiagnosisRecordsWithOptions(request: DescribeDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of SQL queries on an AnalyticDB for PostgreSQL instance within a specified time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeDiagnosisRecordsRequest
  * @return DescribeDiagnosisRecordsResponse
 */
async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisRecordsWithOptions(request, runtime);
}

model DescribeDiagnosisSQLInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  queryID?: string(name='QueryID', description='The query ID. It is a unique identifier of the query.

> You can call the [DescribeDiagnosisRecords](~~450511~~) operation to obtain query IDs.', example='71403480878****'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  duration?: int32(name='Duration', description='The execution duration of the query. Unit: seconds.', example='16'),
  maxOutputRows?: string(name='MaxOutputRows', description='The maximum number of output rows.', example='10'),
  queryID?: string(name='QueryID', description='The query ID.', example='71403480878****'),
  queryPlan?: string(name='QueryPlan', description='The information about the operator.', example='{\\"children\\":********\\"startTime\\":1660719602199}'),
  requestId?: string(name='RequestId', description='The request ID.', example='425AAA6A-63E0-1929-A1CE-3D9036CBC463'),
  SQLStmt?: string(name='SQLStmt', description='The SQL statement.', example='select n_live_tup, n_live_tup + n_dead_tup, pg_relation_size(table_name), last_vacuum from pg_stat_user_tables where relid = table_name::regclass'),
  sessionID?: string(name='SessionID', description='The ID of the session that contains the query.', example='658****'),
  sortedMetrics?: string(name='SortedMetrics', description='The sequence of metrics.', example='{\\"costSort\\":******:\\"Seq Scan-9\\",\\"value\\":0.0}]}'),
  startTime?: long(name='StartTime', description='The start time of the query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1660719602199'),
  status?: string(name='Status', description='The execution state of the query. Valid values:

*   **running**
*   **finished**', example='finished'),
  textPlan?: string(name='TextPlan', description='The information about the execution plan.', example='******'),
  user?: string(name='User', description='The username.', example='adbpguser'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

/**
  * You can call this operation to query the information about a query for an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  *
  * @param request DescribeDiagnosisSQLInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiagnosisSQLInfoResponse
 */
async function describeDiagnosisSQLInfoWithOptions(request: DescribeDiagnosisSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisSQLInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.queryID)) {
    query['QueryID'] = request.queryID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisSQLInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the information about a query for an AnalyticDB for PostgreSQL instance, including the SQL statement, execution plan text, and execution plan tree.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  *
  * @param request DescribeDiagnosisSQLInfoRequest
  * @return DescribeDiagnosisSQLInfoResponse
 */
async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisSQLInfoWithOptions(request, runtime);
}

model DescribeDocumentRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileName?: string(name='FileName', example='music.txt'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDocumentResponseBody = {
  docsCount?: int32(name='DocsCount', example='100'),
  documentLoader?: string(name='DocumentLoader', example='RapidOCRPDFLoader'),
  fileExt?: string(name='FileExt', example='txt'),
  fileMd5?: string(name='FileMd5', example='b8078c9591413550f8963e37e24abcea'),
  fileMtime?: string(name='FileMtime', example='2023-11-01 10:01:01.123456'),
  fileName?: string(name='FileName', example='music.txt'),
  fileSize?: long(name='FileSize', example='10000'),
  fileVersion?: int32(name='FileVersion', example='1'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  source?: string(name='Source', example='http://oss.xxx/music.txt'),
  status?: string(name='Status', example='success'),
  textSplitter?: string(name='TextSplitter', example='ChineseRecursiveTextSplitter'),
}

model DescribeDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDocumentResponseBody(name='body'),
}

async function describeDocumentWithOptions(request: DescribeDocumentRequest, runtime: Util.RuntimeOptions): DescribeDocumentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDocument',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDocument(request: DescribeDocumentRequest): DescribeDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDocumentWithOptions(request, runtime);
}

model DescribeDownloadRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId', description='The ID of the download record.', example='1150'),
      downloadUrl?: string(name='DownloadUrl', description='The URL that can be used to download the file.', example='https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****'),
      exceptionMsg?: string(name='ExceptionMsg', description='The error message returned.', example='Error message'),
      fileName?: string(name='FileName', description='The name of the file.', example='20220509113448-20220509173448.csv'),
      status?: string(name='Status', description='The state of the upload task. After you call the DownloadDiagnosisRecords operation, query diagnostic information is first uploaded to Object Storage Service (OSS). After the upload task is complete, the query diagnostic information can be downloaded. Valid values:

*   **running**: uploading
*   **finished**: uploaded
*   **failed**: failed', example='finished'),
    }
  ](name='Records', description='The URL that is used to download the file.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

/**
  * You must call the [DownloadDiagnosisRecords](~~447700~~) operation to download the query diagnostic information before you can call this operation to query the download records and download URLs.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  *
  * @param request DescribeDownloadRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDownloadRecordsResponse
 */
async function describeDownloadRecordsWithOptions(request: DescribeDownloadRecordsRequest, runtime: Util.RuntimeOptions): DescribeDownloadRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You must call the [DownloadDiagnosisRecords](~~447700~~) operation to download the query diagnostic information before you can call this operation to query the download records and download URLs.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For information about how to view and update the minor version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  *
  * @param request DescribeDownloadRecordsRequest
  * @return DescribeDownloadRecordsResponse
 */
async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadRecordsWithOptions(request, runtime);
}

model DescribeDownloadSQLLogsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query details about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
}

model DescribeDownloadSQLLogsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId', example='1150'),
      downloadUrl?: string(name='DownloadUrl', example='https://perth-download-task.oss-cn-beijing.aliyuncs.com/*****'),
      exceptionMsg?: string(name='ExceptionMsg', example='Error message'),
      fileName?: string(name='FileName', example='20220509113448-20220509173448.csv'),
      status?: string(name='Status', example='finished'),
    }
  ](name='Records', description='The URL that is used to download the file.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FDE9942A-D919-527B-B559-5D0F6F20CCEC'),
}

model DescribeDownloadSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadSQLLogsResponseBody(name='body'),
}

async function describeDownloadSQLLogsWithOptions(request: DescribeDownloadSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeDownloadSQLLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadSQLLogs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadSQLLogs(request: DescribeDownloadSQLLogsRequest): DescribeDownloadSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadSQLLogsWithOptions(request, runtime);
}

model DescribeHealthStatusRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  key?: string(name='Key', description='The performance metric that you want to query. Separate multiple values with commas (,). For more information, see [Performance parameters](~~86943~~).', example='node_master_status,node_master_connection_status,node_segment_connection_status,node_segment_disk_status'),
}

model DescribeHealthStatusResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The ID of instance.', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D97B4191-104D-10CE-8BC5-53**********'),
  status?: {
    adbgpSegmentDiskUsagePercentMax?: {
      status?: string(name='Status', description='The status corresponding to the maximum storage usage among all compute nodes. Valid values:

*   **critical**: The compute node storage usage is greater than or equal to 90%. In this case, the instance is locked.
*   **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%.
*   **healthy**: The compute node storage usage is less than 80%.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum compute node storage usage.

Unit: %.', example='1.52'),
    }(name='adbgp_segment_disk_usage_percent_max', description='The information of maximum compute node storage usage.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgConnectionStatus?: {
      status?: string(name='Status', description='The connection health status of the instance. Valid values:

*   **critical**: The instance connection usage is greater than 95%. In this case, this metric is marked in red in the console.
*   **warning**: The instance connection usage is greater than 90% and less than or equal to 95%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The instance connection usage is less than or equal to 90%. In this case, this metric is marked in green in the console.

>  The instance connection usage is the maximum connection usage among all the coordinator and compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance connection usage.

Unit: %.', example='1.71'),
    }(name='adbpg_connection_status', description='The information of instance connection health status.'),
    adbpgDiskStatus?: {
      status?: string(name='Status', description='The storage status of the instance. Valid values:

*   **critical**: The instance storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
*   **warning**: The instance storage usage is greater than or equal to 70% and less than 90%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The instance storage usage is less than 70%. In this case, this metric is marked in green in the console.

>  The instance storage usage is the average storage usage of all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance storage usage.

Unit: %.', example='1.52'),
    }(name='adbpg_disk_status', description='The information of instance storage status.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgDiskUsagePercent?: {
      status?: string(name='Status', description='The status corresponding to the storage usage of the instance. Valid values:

*   **critical**: The instance storage usage is greater than or equal to 90%. In this case, the instance is locked.
*   **warning**: The instance storage usage is greater than or equal to 70% and less than 90%.
*   **healthy**: The instance storage usage is less than 70%.

>  The instance storage usage is the average storage usage of all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance storage usage.

Unit: %.', example='1.52'),
    }(name='adbpg_disk_usage_percent', description='The information of instance storage usage.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgInstanceColdDataGb?: {
      value?: float(name='Value'),
    }(name='adbpg_instance_cold_data_gb'),
    adbpgInstanceHotDataGb?: {
      value?: float(name='Value'),
    }(name='adbpg_instance_hot_data_gb'),
    adbpgInstanceTotalDataGb?: {
      value?: float(name='Value'),
    }(name='adbpg_instance_total_data_gb'),
    adbpgMasterDiskUsagePercentMax?: {
      status?: string(name='Status', description='The status corresponding to the maximum storage usage of the coordinator node. Valid values:

*   **critical**: The coordinator node storage usage is greater than or equal to 90%. In this case, the instance is locked.
*   **warning**: The coordinator node storage usage is greater than or equal to 70% and less than 90%.
*   **healthy**: The coordinator node storage usage is less than 70%.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum coordinator node storage usage.

Unit: %.', example='1.34'),
    }(name='adbpg_master_disk_usage_percent_max', description='The information of maximum coordinator node storage usage.

>  This parameter value is returned only for instances in elastic storage mode.'),
    adbpgMasterStatus?: {
      status?: string(name='Status', description='The availability status of the coordinator node. Valid values:

*   **critical**: Both the primary and standby coordinator nodes are unavailable. In this case, this metric is marked in red in the console.
*   **warning**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in yellow in the console.
*   **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of coordinator node availability status. Valid values:', example='1'),
    }(name='adbpg_master_status', description='The information of coordinator node availability status.'),
    adbpgSegmentStatus?: {
      status?: string(name='Status', description='The availability status of compute nodes. Valid values:

*   **critical**: All the primary and secondary compute nodes are unavailable. In this case, this metric is marked in red in the console.
*   **warning**: Fifty percent or more than fifty percent of compute nodes are unavailable. In this case, this metric is marked in yellow in the console.
*   **healthy**: All compute nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of compute node availability status.', example='1'),
    }(name='adbpg_segment_status', description='The information of compute node availability status.'),
    adbpgStatus?: {
      status?: string(name='Status', description='The health status of the instance. Valid values:

*   **critical**: The coordinator node or a compute node is unavailable. In this case, this metric is marked in red in the console.
*   **healthy**: All nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of instance health status. Valid values:

*   **1**: healthy
*   **0**: critical', example='1'),
    }(name='adbpg_status', description='The information of instance health status.'),
    nodeMasterConnectionStatus?: {
      status?: string(name='Status', description='The connection health status of the coordinator node. Valid values:

*   **critical**: The coordinator node connection usage is greater than 95%. In this case, this metric is marked in red in the console.
*   **warning**: The coordinator node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The coordinator node connection usage is less than 90%. In this case, this metric is marked in green in the console.

>  The coordinator node connection usage is the maximum connection usage of the coordinator node.', example='healthy'),
      value?: float(name='Value', description='The metric value of coordinator node connection usage.

Unit: %.', example='1.71'),
    }(name='node_master_connection_status', description='The information of coordinator node connection health status.'),
    nodeMasterStatus?: {
      status?: string(name='Status', description='The health status of the coordinator node. Valid values:

*   **critical**: The primary or standby coordinator node is unavailable. In this case, this metric is marked in red in the console.
*   **healthy**: Both the primary and standby coordinator nodes are available. In this case, this metric is marked in green in the console.', example='healthy'),
      value?: float(name='Value', description='The metric value of coordinator node health status. Valid values:

*   **1**: healthy
*   **0**: critical', example='1'),
    }(name='node_master_status', description='The information of coordinator node health status.'),
    nodeSegmentConnectionStatus?: {
      status?: string(name='Status', description='The connection health status of compute nodes. Valid values:

*   **critical**: The compute node connection usage is greater than or equal to 95%. In this case, this metric is marked in red in the console.
*   **warning**: The compute node connection usage is greater than or equal to 90% and less than 95%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The compute node connection usage is less than 90%. In this case, this metric is marked in green in the console.

>  The compute node connection usage is the maximum connection usage among all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum compute node connection usage.

Unit: %.', example='0.48'),
    }(name='node_segment_connection_status', description='The information of compute node connection health status.'),
    nodeSegmentDiskStatus?: {
      status?: string(name='Status', description='The storage status of compute nodes. Valid values:

*   **critical**: The compute node storage usage is greater than or equal to 90%. In this case, this metric is marked in red in the console and the instance is locked.
*   **warning**: The compute node storage usage is greater than or equal to 80% and less than 90%. In this case, this metric is marked in yellow in the console.
*   **healthy**: The compute node storage usage is less than 80%. In this case, this metric is marked in green in the console.

>  The compute node storage usage is the maximum storage usage among all compute nodes.', example='healthy'),
      value?: float(name='Value', description='The metric value of maximum compute node storage usage.

Unit: %.', example='1.52'),
    }(name='node_segment_disk_status', description='The information of compute node storage status.

>  This parameter value is returned only for instances in elastic storage mode.'),
  }(name='Status', description='The queried performance metrics. Each performance metric consists of the parameter name, status, and metric value. The metric information is returned only for the performance parameters specified by **Key**. For example, if you set **Key** to **adbpg_status**, only the metric information of **adbpg_status** is returned.

For more information about performance parameters, see [Performance parameters](~~86943~~).', example='{"node_master_connection_status":{"Status":"healthy","Value":1.6}}'),
}

model DescribeHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthStatusResponseBody(name='body'),
}

/**
  * This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeHealthStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeHealthStatusResponse
 */
async function describeHealthStatusWithOptions(request: DescribeHealthStatusRequest, runtime: Util.RuntimeOptions): DescribeHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthStatus',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is called to query the health status of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode and its coordinator and compute nodes.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeHealthStatusRequest
  * @return DescribeHealthStatusResponse
 */
async function describeHealthStatus(request: DescribeHealthStatusRequest): DescribeHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthStatusWithOptions(request, runtime);
}

model DescribeIMVInfosRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxxx'),
  database?: string(name='Database', example='testdb'),
  MVName?: string(name='MVName', example='public."mv1"'),
}

model DescribeIMVInfosResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  imvInfos?: [ 
    {
      base?: string(name='Base', example='"public."t2"'),
      detailInfo?: string(name='DetailInfo', example='{\\"maintenance_calls\\" : 1, \\"avg_apply_time\\" : 2, \\"avg_calc_rows\\" : 1, \\"avg_calc_time\\" : 11, \\"avg_delta_rows\\" : 1, \\"avg_maintenance_total_time\\" : 14, \\"avg_maintenance_total_time_total\\" : 14, \\"max_apply_time\\" : 2, \\"max_calc_rows\\" : 1, \\"max_calc_time\\" : 11, \\"max_delta_rows\\" : 1, \\"max_maintenance_total_time\\" : 14, \\"max_maintenance_total_time_total\\" : 14, \\"min_apply_time\\" : 2, \\"min_calc_rows\\" : 1, \\"min_calc_time\\" : 11, \\"min_delta_rows\\" : 1, \\"min_maintenance_total_time\\" : 14, \\"min_maintenance_total_time_total\\" : 14, \\"max_outerjoin_apply_time\\" : null, \\"max_outerjoin_calc_rows\\" : null, \\"max_outerjoin_calc_time\\" : null, \\"max_outerjoin_delta_rows\\" : null, \\"avg_outerjoin_apply_time\\" : null, \\"avg_outerjoin_calc_rows\\" : null, \\"avg_outerjoin_calc_time\\" : null, \\"avg_outerjoin_delta_rows\\" : null, \\"min_outerjoin_apply_time\\" : null, \\"min_outerjoin_calc_rows\\" : null, \\"min_outerjoin_calc_time\\" : null, \\"min_outerjoin_delta_rows\\" : null, \\"create_rows\\" : null, \\"create_time\\" : null, \\"direct_visited\\" : null, \\"indirect_visited\\" : null, \\"max_refresh_rows\\" : null, \\"max_refresh_time\\" : null, \\"avg_refresh_rows\\" : null, \\"avg_refresh_time\\" : null, \\"min_refresh_rows\\" : null, \\"min_refresh_time\\" : null, \\"refresh_calls\\" : null, \\"avg_wait_lock_time\\" : null, \\"max_wait_lock_time\\" : null, \\"min_wait_lock_time\\" : null, \\"latest_maintenance_time\\" : \\"2023-08-09T07:39:14.753252+00:00\\"}'),
      MV?: string(name='MV', example='public."mv1"'),
    }
  ](name='ImvInfos'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
}

model DescribeIMVInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIMVInfosResponseBody(name='body'),
}

async function describeIMVInfosWithOptions(request: DescribeIMVInfosRequest, runtime: Util.RuntimeOptions): DescribeIMVInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.MVName)) {
    query['MVName'] = request.MVName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIMVInfos',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIMVInfos(request: DescribeIMVInfosRequest): DescribeIMVInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIMVInfosWithOptions(request, runtime);
}

model DescribeLogBackupsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2022-12-12T03:00Z'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2022-12-12T02:00Z'),
}

model DescribeLogBackupsResponseBody = {
  items?: [ 
    {
      backupId?: string(name='BackupId', description='The ID of the backup set.', example='12413721782'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the coordinator node.', example='gp-bp12ga6v69h86****-master'),
      logFileName?: string(name='LogFileName', description='The name of the log backup set that is stored in Object Storage Service (OSS).', example='000000010000000400000012'),
      logFileSize?: long(name='LogFileSize', description='The size of the log backup set. Unit: bytes.', example='77350'),
      logTime?: string(name='LogTime', description='The timestamp of the log.', example='2022-12-12T02:14:26Z'),
      segmentName?: string(name='SegmentName', description='The name of the compute node.', example='segment-0'),
    }
  ](name='Items', description='Details of the backup sets.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of backup sets on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='24B9FCAF-2CBC-51C3-B563-F1C70D750187'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='5'),
  totalLogSize?: long(name='TotalLogSize', description='The total size of logs in the time range. Unit: bytes.', example='386748'),
}

model DescribeLogBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogBackupsResponseBody(name='body'),
}

async function describeLogBackupsWithOptions(request: DescribeLogBackupsRequest, runtime: Util.RuntimeOptions): DescribeLogBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogBackups',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogBackups(request: DescribeLogBackupsRequest): DescribeLogBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupsWithOptions(request, runtime);
}

model DescribeModifyParameterLogRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~196830~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxx'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC. The end time must be later than the start time.', example='2020-05-05T11:22:22Z'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.', example='2020-02-02T11:22:22Z'),
}

model DescribeModifyParameterLogResponseBody = {
  changelogs?: [ 
    {
      effectTime?: string(name='EffectTime', description='The effective time.', example='2020-05-05T11:22:22Z'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='testkey'),
      parameterValid?: string(name='ParameterValid', description='Indicates whether the modification takes effect.', example='true'),
      parameterValueAfter?: string(name='ParameterValueAfter', description='The original value of the parameter.', example='100'),
      parameterValueBefore?: string(name='ParameterValueBefore', description='The new value of the parameter.', example='200'),
    }
  ](name='Changelogs', description='The queried parameter modification logs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DescribeModifyParameterLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModifyParameterLogResponseBody(name='body'),
}

async function describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: Util.RuntimeOptions): DescribeModifyParameterLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeModifyParameterLog',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModifyParameterLogWithOptions(request, runtime);
}

model DescribeNamespaceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  managerAccount?: string(name='ManagerAccount', description='The name of the manager account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the manager account.', example='testpassword'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeNamespaceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-xxxxxxxxx'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespaceInfo?: map[string]string(name='NamespaceInfo', description='The queried namespace.'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model DescribeNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNamespaceResponseBody(name='body'),
}

async function describeNamespaceWithOptions(request: DescribeNamespaceRequest, runtime: Util.RuntimeOptions): DescribeNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNamespace',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNamespace(request: DescribeNamespaceRequest): DescribeNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNamespaceWithOptions(request, runtime);
}

model DescribeParametersRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      currentValue?: string(name='CurrentValue', description='The current value of the configuration parameter.', example='10800000'),
      forceRestartInstance?: string(name='ForceRestartInstance', description='Indicates whether a restart is required for parameter modifications to take effect. Valid values:

*   **true**
*   **false**', example='false'),
      isChangeableConfig?: string(name='IsChangeableConfig', description='Indicates whether the configuration parameter can be modified. Valid values:

*   **true**
*   **false**', example='true'),
      optionalRange?: string(name='OptionalRange', description='The valid values of the configuration parameter.', example='[0-2147483647]'),
      parameterDescription?: string(name='ParameterDescription', description='The description of the configuration parameter.', example='Sets the maximum allowed duration of any statement, A value of 0 turns off the timeout.'),
      parameterName?: string(name='ParameterName', description='The name of the configuration parameter.', example='statement_timeout'),
      parameterValue?: string(name='ParameterValue', description='The default value of the configuration parameter.', example='10800000'),
    }
  ](name='Parameters', description='The queried configuration parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='62506167-D284-562A-B7C2-0A**********'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersResponseBody(name='body'),
}

/**
  * This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeParametersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeParametersResponse
 */
async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameters',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation can be called to query the details of parameters in an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeParametersRequest
  * @return DescribeParametersResponse
 */
async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeRdsVSwitchsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list and zone list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID of the instance.

> 

*   You can call the [DescribeRdsVpcs](~~208327~~) operation to query the available VPC IDs.

*   This parameter must be specified.', example='vpc-bp*******************'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list and zone list.', example='cn-hangzhou-h'),
}

model DescribeRdsVSwitchsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0BA251D-6854-5A99-A964-3C**********'),
  vSwitches?: {
    vSwitch?: [ 
      {
        aliUid?: string(name='AliUid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        bid?: string(name='Bid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        cidrBlock?: string(name='CidrBlock', description='The CIDR block of the vSwitch.', example='192.**.**.0/24'),
        gmtCreate?: string(name='GmtCreate', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        gmtModified?: string(name='GmtModified', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**
*   **false**', example='false'),
        izNo?: string(name='IzNo', description='The ID of the zone.', example='cn-hangzhou-h'),
        regionNo?: string(name='RegionNo', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        status?: string(name='Status', description='The state of the vSwitch. If **Available** is returned, the vSwitch is available.', example='Available'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp*******************'),
        vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='vsw-name'),
      }
    ](name='VSwitch', description='Details of the vSwitch.'),
  }(name='VSwitches', description='Details of the vSwitches.'),
}

model DescribeRdsVSwitchsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsVSwitchsResponseBody(name='body'),
}

/**
  * When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeRdsVSwitchsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRdsVSwitchsResponse
 */
async function describeRdsVSwitchsWithOptions(request: DescribeRdsVSwitchsRequest, runtime: Util.RuntimeOptions): DescribeRdsVSwitchsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsVSwitchs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you create AnalyticDB for PostgreSQL instances, you can call this operation to query the details of vSwitches within a specified region or zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeRdsVSwitchsRequest
  * @return DescribeRdsVSwitchsResponse
 */
async function describeRdsVSwitchs(request: DescribeRdsVSwitchsRequest): DescribeRdsVSwitchsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVSwitchsWithOptions(request, runtime);
}

model DescribeRdsVpcsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
}

model DescribeRdsVpcsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='53924AF0-1628-5AA2-9C95-D4**********'),
  vpcs?: {
    vpc?: [ 
      {
        aliUid?: string(name='AliUid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        bid?: string(name='Bid', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        cidrBlock?: string(name='CidrBlock', description='The CIDR block of the VPC.', example='10.**.**.0/8'),
        gmtCreate?: string(name='GmtCreate', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        gmtModified?: string(name='GmtModified', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the VPC is the default VPC. Valid values:

*   **true**
*   **false**', example='true'),
        regionNo?: string(name='RegionNo', description='The ID of the region.', example='cn-hangzhou'),
        status?: string(name='Status', description='The state of the VPC. If **Available** is returned, the VPC is available.', example='Available'),
        vSwitchs?: [ 
          {
            cidrBlock?: string(name='CidrBlock', description='The CIDR block of the vSwitch.', example='10.**.**.0/24'),
            gmtCreate?: string(name='GmtCreate', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
            gmtModified?: string(name='GmtModified', description='An invalid parameter. It is no longer returned when you call this operation.', example='null'),
            isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**
*   **false**', example='true'),
            izNo?: string(name='IzNo', description='The ID of the zone to which the vSwitch belongs.', example='cn-hangzhou-i'),
            status?: string(name='Status', description='The state of the vSwitch. If **Available** is returned, the vSwitch is available.', example='Available'),
            vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp*******************'),
            vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='vsw-name'),
          }
        ](name='VSwitchs', description='Details of the vSwitches.'),
        vpcId?: string(name='VpcId', description='The ID of VPC.', example='vpc-bp*******************'),
        vpcName?: string(name='VpcName', description='The name of the VPC.', example='vpc-name'),
      }
    ](name='Vpc', description='Details of the VPC.'),
  }(name='Vpcs', description='Details of the VPCs.'),
}

model DescribeRdsVpcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsVpcsResponseBody(name='body'),
}

/**
  * When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeRdsVpcsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRdsVpcsResponse
 */
async function describeRdsVpcsWithOptions(request: DescribeRdsVpcsRequest, runtime: Util.RuntimeOptions): DescribeRdsVpcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsVpcs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you create an AnalyticDB for PostgreSQL instance, you can call this operation to query the available VPCs within a specified region or zone.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeRdsVpcsRequest
  * @return DescribeRdsVpcsResponse
 */
async function describeRdsVpcs(request: DescribeRdsVpcsRequest): DescribeRdsVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVpcsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  region?: string(name='Region', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', description='Indicates whether Virtual Private Cloud (VPC) is available.

*   **true**: VPC is available.
*   **false**: VPC is unavailable.', example='true'),
          zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-c'),
        }
      ](name='Zone')
      }(name='Zones', description='Details of the zones.'),
    }
  ](name='Region')
  }(name='Regions', description='Details of the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FF8EB261-5447-4B1B-9F14-294CEA008A9F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

/**
  * Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeRegionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRegionsResponse
 */
async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you create an AnalyticDB for PostgreSQL instance, you must call this operation to query available regions and zones.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSQLLogCountRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxx'),
  database?: string(name='Database', description='The name of the database.', example='testdb'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

> The end time must be later than the start time. The maximum time range that can be specified is seven days.', example='2020-12-14T11:22Z'),
  executeCost?: string(name='ExecuteCost', description='The execution duration of the SQL statement. Unit: seconds.', example='100'),
  executeState?: string(name='ExecuteState', description='The execution state of the SQL statement. Valid values:

*   **success**
*   **fail**', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', description='The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', description='The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.', example='10'),
  operationClass?: string(name='OperationClass', description='The type of the query language. Valid values:

*   **DQL**
*   **DML**
*   **DDL**
*   **DCL**
*   **TCL**', example='DQL'),
  operationType?: string(name='OperationType', description='The type of the SQL statement.

> 

*   If **OperationClass** is specified, the value of **OperationType** must belong to the corresponding query language. For example, if **OperationClass** is set to **DQL**, the value of **OperationType** must be a **DQL** statement such as **SELECT**.

*   If **OperationClass** is not specified, the value of **OperationType** can be an SQL statement of any query language.
*   If **OperationClass** and **OperationType** are not specified, all types of SQL statements are returned.', example='SELECT'),
  queryKeywords?: string(name='QueryKeywords', description='The keywords that are used to query audit logs.', example='test'),
  sourceIP?: string(name='SourceIP', description='The source IP address.', example='10.**.**.13'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-12-12T11:22Z'),
  user?: string(name='User', description='The name of the database account that is used to connect to the database.', example='adbpgadmin'),
}

model DescribeSQLLogCountResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The instance ID.', example='gp-xxxxxxxx'),
  endTime?: string(name='EndTime', description='The end time of the query.', example='2020-12-14T11:22Z'),
  items?: [ 
    {
      name?: string(name='Name', description='The name of the table.', example='gp-xxxxxxxx'),
      series?: [ 
        {
          values?: [ 
            {
              point?: [ string ](name='Point', description='The time when the audit logs were generated and the number of the audit logs.'),
            }
          ](name='Values', description='Details of the audit logs.'),
        }
      ](name='Series', description='Details of the audit logs.'),
    }
  ](name='Items', description='The name of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7565770E-7C45-462D-BA4A-8A**********'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2020-12-12T11:22Z'),
}

model DescribeSQLLogCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogCountResponseBody(name='body'),
}

/**
  * This operation is not available for instances in reserved storage mode.
  *
  * @param request DescribeSQLLogCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSQLLogCountResponse
 */
async function describeSQLLogCountWithOptions(request: DescribeSQLLogCountRequest, runtime: Util.RuntimeOptions): DescribeSQLLogCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogCount',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is not available for instances in reserved storage mode.
  *
  * @param request DescribeSQLLogCountRequest
  * @return DescribeSQLLogCountResponse
 */
async function describeSQLLogCount(request: DescribeSQLLogCountRequest): DescribeSQLLogCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogCountWithOptions(request, runtime);
}

model DescribeSQLLogsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-xxxxxxxx'),
  database?: string(name='Database', description='The name of the database.', example='adbpgadmin'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

> The end time must be later than the start time. The maximum time range that can be specified is seven days.', example='2021-03-17T06:30Z'),
  executeCost?: string(name='ExecuteCost', description='The execution duration of the query. Unit: seconds.', example='1'),
  executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', description='The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', description='The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.', example='1'),
  operationClass?: string(name='OperationClass', description='The type of the query language. Valid values:

*   **DQL**
*   **DML**
*   **DDL**
*   **DCL**
*   **TCL**', example='DQL'),
  operationType?: string(name='OperationType', description='The type of the SQL statement.

> 

*   If **OperationClass** is specified, the value of **OperationType** must belong to the corresponding query language. For example, if **OperationClass** is set to **DQL**, the value of **OperationType** must be a **DQL** statement such as **SELECT**.

*   If **OperationClass** is not specified, the value of **OperationType** can be an SQL statement of any query language.
*   If **OperationClass** and **OperationType** are not specified, all types of SQL statements are returned.', example='SELECT'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30'),
  queryKeywords?: string(name='QueryKeywords', description='The keywords of the SQL statement.', example='select 1'),
  sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.**.**.90'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.', example='2021-03-10T06:30Z'),
  user?: string(name='User', description='The name of the database account.', example='testadmin'),
}

model DescribeSQLLogsResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', description='The database account that executes the SQL statement.', example='testadmin'),
      DBName?: string(name='DBName', description='The name of the database.', example='adbpgadmin'),
      DBRole?: string(name='DBRole', description='The role of the database.', example='master'),
      executeCost?: float(name='ExecuteCost', description='The execution duration of the query.', example='2'),
      executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success'),
      operationClass?: string(name='OperationClass', description='The type of the query language.', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', description='The time when the SQL statement was executed.', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', description='The type of the SQL statement.', example='SELECT'),
      returnRowCounts?: long(name='ReturnRowCounts', description='The total number of entries returned.', example='1'),
      SQLPlan?: string(name='SQLPlan', description='The SQL execution plan.', example='""'),
      SQLText?: string(name='SQLText', description='The SQL statement.', example='select 1'),
      scanRowCounts?: long(name='ScanRowCounts', description='The number of entries scanned.', example='1'),
      sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.**.**.90'),
      sourcePort?: int32(name='SourcePort', description='The number of the source port.', example='50514'),
    }
  ](name='Items', description='The queried SQL execution logs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='A7941C94-B92F-46A0-BD3E-2D**********'),
}

model DescribeSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsResponseBody(name='body'),
}

/**
  * > This operation is no longer used. To query SQL execution logs, call the [DescribeSQLLogsV2](~~453722~~) operation.
  *
  * @param request DescribeSQLLogsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSQLLogsResponse
 */
async function describeSQLLogsWithOptions(request: DescribeSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > This operation is no longer used. To query SQL execution logs, call the [DescribeSQLLogsV2](~~453722~~) operation.
  *
  * @param request DescribeSQLLogsRequest
  * @return DescribeSQLLogsResponse
 */
async function describeSQLLogs(request: DescribeSQLLogsRequest): DescribeSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsWithOptions(request, runtime);
}

model DescribeSQLLogsV2Request {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-xxxxxxxx'),
  database?: string(name='Database', description='The name of the database.', example='adbpgadmin'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.

>  The end time must be later than the start time. The interval cannot be more than 24 hours.', example='2022-03-17T06:30Z'),
  executeCost?: string(name='ExecuteCost', description='The execution duration of the query. Unit: seconds.', example='1'),
  executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success'),
  maxExecuteCost?: string(name='MaxExecuteCost', description='The maximum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.', example='1000'),
  minExecuteCost?: string(name='MinExecuteCost', description='The minimum amount of time consumed by a slow query. Minimum value: 0. Unit: seconds.', example='1'),
  operationClass?: string(name='OperationClass', description='The type of the query language. Valid values:

*   **DQL**
*   **DML**
*   **DDL**
*   **DCL**
*   **TCL**', example='DQL'),
  operationType?: string(name='OperationType', description='The type of the SQL statement.

> *   If the **OperationClass** parameter is specified, the **OperationType** value must belong to the corresponding query language. For example, if the **OperationClass** value is **DQL**, the **OperationType** value must be a **DQL** SQL statement such as **SELECT**.
>*   If the **OperationClass** parameter is not specified, the **OperationType** value can be an SQL statement of all query languages.
>*   If neither of the **OperationClass** and **OperationType** parameters is specified, all types of SQL statements are returned.', example='SELECT'),
  pageNumber?: string(name='PageNumber', description='The number of entries to return on each page.', example='10'),
  pageSize?: string(name='PageSize', description='The number of the page to return. The maximum value is 200.', example='1'),
  queryKeywords?: string(name='QueryKeywords', description='The keywords of the SQL statement.', example='select 1'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
  sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.XX.XX.90'),
  startTime?: string(name='StartTime', description='The beginning of the time range. Specify the time in the ISO 8601 standard in the *yyyy-MM-ddTHH:mmZ* format. The time must be in UTC.', example='2022-03-10T06:30Z'),
  user?: string(name='User', description='The name of the database account.', example='testadmin'),
}

model DescribeSQLLogsV2ResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName', description='The database account that executes the SQL statement.', example='testadmin'),
      DBName?: string(name='DBName', description='The name of the database.', example='adbpgadmin'),
      DBRole?: string(name='DBRole', description='The role of the database.', example='master'),
      executeCost?: float(name='ExecuteCost', description='The execution duration of the query.', example='2'),
      executeState?: string(name='ExecuteState', description='The execution state of the query. Valid values:

*   **success**
*   **fail**', example='success'),
      operationClass?: string(name='OperationClass', description='The type of the query language.', example='DQL'),
      operationExecuteTime?: string(name='OperationExecuteTime', description='The time when the SQL statement was executed.', example='2021-03-15T17:02:32Z'),
      operationType?: string(name='OperationType', description='The type of the SQL statement.', example='SELECT'),
      returnRowCounts?: long(name='ReturnRowCounts', description='The number of entries returned.', example='1'),
      SQLText?: string(name='SQLText', description='The SQL statement.', example='select 1'),
      scanRowCounts?: long(name='ScanRowCounts', description='The number of entries scanned.', example='1'),
      sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.**.**.90'),
      sourcePort?: int32(name='SourcePort', description='The number of the source port.', example='50514'),
    }
  ](name='Items', description='Details of the SQL logs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7941C94-B92F-46A0-BD3E-2D**********'),
}

model DescribeSQLLogsV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsV2ResponseBody(name='body'),
}

/**
  * You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeSQLLogsV2Request
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSQLLogsV2Response
 */
async function describeSQLLogsV2WithOptions(request: DescribeSQLLogsV2Request, runtime: Util.RuntimeOptions): DescribeSQLLogsV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogsV2',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query SQL logs of an AnalyticDB for PostgreSQL instance within a specific time range.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeSQLLogsV2Request
  * @return DescribeSQLLogsV2Response
 */
async function describeSQLLogsV2(request: DescribeSQLLogsV2Request): DescribeSQLLogsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsV2WithOptions(request, runtime);
}

model DescribeSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if an error occurs. This message does not affect the execution of the operation.', example='******'),
  hasSampleData?: boolean(name='HasSampleData', description='Indicates whether a sample dataset is loaded to the instance. Valid values:

*   **true**: A sample dataset is loaded.
*   **false**: No sample dataset is loaded.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='84CD7CAF-FA7B-5178-B19F-D8CDE307D5FA_8111'),
}

model DescribeSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSampleDataResponseBody(name='body'),
}

/**
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeSampleDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSampleDataResponse
 */
async function describeSampleDataWithOptions(request: DescribeSampleDataRequest, runtime: Util.RuntimeOptions): DescribeSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeSampleDataRequest
  * @return DescribeSampleDataResponse
 */
async function describeSampleData(request: DescribeSampleDataRequest): DescribeSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSampleDataWithOptions(request, runtime);
}

model DescribeSupportFeaturesRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeSupportFeaturesResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='63E5BE60-91FF-57F1-B873-7F1EB734B93D_2724'),
  supportFeatureList?: string(name='SupportFeatureList', description='The features supported by the instance. Valid values:

*   sample_data: sample dataset. For more information, see [Sample dataset](~~452278~~).
*   diagnose_and_optimize: diagnostics and optimization. For more information, see [Diagnostics and optimization](~~323453~~).', example='[ "sample_data", "diagnose_and_optimize" ]'),
}

model DescribeSupportFeaturesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportFeaturesResponseBody(name='body'),
}

async function describeSupportFeaturesWithOptions(request: DescribeSupportFeaturesRequest, runtime: Util.RuntimeOptions): DescribeSupportFeaturesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSupportFeatures',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportFeatures(request: DescribeSupportFeaturesRequest): DescribeSupportFeaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportFeaturesWithOptions(request, runtime);
}

model DescribeTagsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to **instance**.', example='instance'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A29EC547-B392-4340-AA4F-7C0A7B626E74'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key.', example='user'),
      tagValue?: string(name='TagValue', description='The tag value.', example='test'),
    }
  ](name='Tags', description='The queried tags.'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeUserEncryptionKeyListRequest {
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of KMS keys to return on each page. Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='ap-southeast-1'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  kmsKeys?: [ 
    {
      keyId?: string(name='KeyId', description='The ID of the KMS key.', example='0b8b1825-fd99-418f-875e-e4dec1dd8715'),
    }
  ](name='KmsKeys', description='Details about the KMS keys.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyListWithOptions(request: DescribeUserEncryptionKeyListRequest, runtime: Util.RuntimeOptions): DescribeUserEncryptionKeyListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserEncryptionKeyList',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserEncryptionKeyListWithOptions(request, runtime);
}

model DescribeWaitingSQLInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='test'),
  PID?: string(name='PID', description='The ID of the process that uniquely identifies the query.

>  You can call the [DescribeWaitingSQLRecords](~~461735~~) operation to obtain the process IDs of lock-waiting queries.', example='100'),
}

model DescribeWaitingSQLInfoResponseBody = {
  database?: string(name='Database', description='The name of the database.', example='test'),
  items?: [ 
    {
      application?: string(name='Application', description='The application that sent the query.', example='DataGrip 2022.1.5'),
      blockedByApplication?: string(name='BlockedByApplication', description='The application that sent the blocking query.', example='DataGrip 2022.1.5'),
      blockedByPID?: string(name='BlockedByPID', description='The process ID of the blocking query.', example='110'),
      blockedBySQLStmt?: string(name='BlockedBySQLStmt', description='The SQL statement of the blocking query.', example='Select * from t1;'),
      blockedByUser?: string(name='BlockedByUser', description='The database account that is used to perform the blocking query.', example='testUser1'),
      grantLocks?: string(name='GrantLocks', description='The authorized locks.', example='ShareLock,AccessExclusiveLock'),
      notGrantLocks?: string(name='NotGrantLocks', description='The unauthorized locks.', example='AccessShareLock'),
      PID?: string(name='PID', description='The ID of the process that uniquely identifies the query.', example='100'),
      SQLStmt?: string(name='SQLStmt', description='The SQL statement of the query.', example='Select * from t1,t2 where t1.id=t2.id;'),
      user?: string(name='User', description='The database account that is used to perform the query.', example='testUser'),
    }
  ](name='Items', description='The queried lock-waiting query.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DescribeWaitingSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingSQLInfoResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeWaitingSQLInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeWaitingSQLInfoResponse
 */
async function describeWaitingSQLInfoWithOptions(request: DescribeWaitingSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeWaitingSQLInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.PID)) {
    query['PID'] = request.PID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingSQLInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of a lock-waiting query only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeWaitingSQLInfoRequest
  * @return DescribeWaitingSQLInfoResponse
 */
async function describeWaitingSQLInfo(request: DescribeWaitingSQLInfoRequest): DescribeWaitingSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingSQLInfoWithOptions(request, runtime);
}

model DescribeWaitingSQLRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='test'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.

If this parameter is not specified, all lock diagnostics records that are generated after the query start time are returned. If the query start time is not specified either, all lock diagnostics records are returned.', example='2022-08-20T07:59Z'),
  keyword?: string(name='Keyword', description='The keyword used to filter queries.', example='table'),
  order?: string(name='Order', description='The field used to sort lock diagnostics records and the sorting order.

Default value: `{"Field":"StartTime","Type":"Desc"}`, which indicates that lock diagnostics records are sorted by the start time in descending order. No other values are supported.', example='{"Field":"StartTime","Type":"Desc"}'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. Valid values:

*   `{"Type":"maxCost","Value":"10"}`: filters the top 10 longest-waiting queries.
*   `{"Type":"status","Value":"LockWaiting"}`: filters lock-waiting queries.
*   `{"Type":"status","Value":"ResourceWaiting"}`: filters resource-waiting queries.', example='{"Type":"maxCost","Value":"10"}'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.

If this parameter is not specified, all lock diagnostics records that are generated before the query end time are returned. If the query end time is not specified either, all lock diagnostics records are returned.', example='2022-08-15T06:59Z'),
  user?: string(name='User', description='The name of the database account. If this parameter is not specified, the lock diagnostics records of all database accounts are queried.', example='testUser'),
}

model DescribeWaitingSQLRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database', description='The name of the database.', example='test'),
      PID?: string(name='PID', description='The ID of the process that uniquely identifies the query.', example='100'),
      SQLStmt?: string(name='SQLStmt', description='The SQL statement of the query.', example='Select * from t1,t2 where t1.id=t2.id;'),
      sessionID?: string(name='SessionID', description='The ID of the session that contains the query.', example='50'),
      startTime?: long(name='StartTime', description='The start time of the query. This value is in the timestamp format. Unit: milliseconds.', example='1660902033374'),
      status?: string(name='Status', description='The waiting state of the query. Valid values:

*   **LockWaiting**
*   **ResourceWaiting**', example='LockWaiting'),
      user?: string(name='User', description='The database account that is used to perform the query.', example='testUser'),
      waitingTime?: long(name='WaitingTime', description='The waiting period of the query. Unit: milliseconds.', example='26911000'),
    }
  ](name='Items', description='The list of lock diagnostics records.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeWaitingSQLRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingSQLRecordsResponseBody(name='body'),
}

/**
  * You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeWaitingSQLRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeWaitingSQLRecordsResponse
 */
async function describeWaitingSQLRecordsWithOptions(request: DescribeWaitingSQLRecordsRequest, runtime: Util.RuntimeOptions): DescribeWaitingSQLRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingSQLRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the lock diagnostics records only for an AnalyticDB for PostgreSQL V6.0 instance in elastic storage mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeWaitingSQLRecordsRequest
  * @return DescribeWaitingSQLRecordsResponse
 */
async function describeWaitingSQLRecords(request: DescribeWaitingSQLRecordsRequest): DescribeWaitingSQLRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingSQLRecordsWithOptions(request, runtime);
}

model DownloadDiagnosisRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='adbtest'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T07:59Z'),
  lang?: string(name='Lang', description='The language of the file that contains the query diagnostic information. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **ja**: Japanese
*   **zh-tw**: traditional Chinese', example='zh'),
  queryCondition?: string(name='QueryCondition', description='The filter condition on queries. The value is in the JSON format. Valid values:

*   `{"Type":"maxCost", "Value":"100"}`: filters the top 100 queries that are the most time-consuming.
*   `{"Type":"status","Value":"finished"}`: filters completed queries.
*   `{"Type":"status","Value":"running"}`: filters running queries.
*   `{"Type":"cost","Max":"200"}`: filters the queries that consume less than 200 milliseconds.
*   `{"Type":"cost","Min":"200","Max":"60000"}`: filters the queries that consume 200 milliseconds or more and less than 1 minute.
*   `{"Type":"cost","Min":"60000"}`: filters the queries that consume 1 minute or more.
*   `{"Type":"cost","Min":"30","Max":"50"}`: filters the queries that consume 30 milliseconds or more and less than 50 milliseconds. You can customize a filter condition by setting **Min** and **Max**.', example='{ "Type":"maxCost", "Value":"100" }'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2022-05-07T06:59Z'),
  user?: string(name='User', description='The name of the database account.', example='adbpguser'),
}

model DownloadDiagnosisRecordsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  downloadId?: string(name='DownloadId', description='The ID of the download task.', example='11'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D56DF7AADF5B'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

/**
  * You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](~~447712~~) operation to query download records and download URLs.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DownloadDiagnosisRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DownloadDiagnosisRecordsResponse
 */
async function downloadDiagnosisRecordsWithOptions(request: DownloadDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DownloadDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadDiagnosisRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to download the query diagnostic information of an AnalyticDB for PostgreSQL instance. After the download is complete, you can call the [DescribeDownloadRecords](~~447712~~) operation to query download records and download URLs.
  * This operation is available only for instances of V6.3.10.1 or later in elastic storage mode. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DownloadDiagnosisRecordsRequest
  * @return DownloadDiagnosisRecordsResponse
 */
async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDiagnosisRecordsWithOptions(request, runtime);
}

model DownloadSQLLogsRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  database?: string(name='Database', description='The name of the database.', example='testdb'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The end time must be later than the start time.', example='2023-05-08T06:59Z'),
  executeCost?: string(name='ExecuteCost', description='The execution duration of the SQL statement. Unit: seconds.', example='1'),
  executeState?: string(name='ExecuteState', description='The execution state of the SQL statement.

*   **success**
*   **fail**', example='success'),
  lang?: string(name='Lang', description='The language of the file that contains the query diagnostic information. Valid values:

*   **zh**: simplified Chinese.
*   **en**: English.
*   **ja**: Japanese.
*   **zh-tw**: traditional Chinese.', example='zh'),
  maxExecuteCost?: string(name='MaxExecuteCost', description='The maximum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.', example='999'),
  minExecuteCost?: string(name='MinExecuteCost', description='The minimum amount of time consumed by a slow query. Unit: seconds. Minimum value: 0.', example='1'),
  operationClass?: string(name='OperationClass', description='The type of the query language. Example: DQL, DML, or DDL.', example='DQL'),
  operationType?: string(name='OperationType', description='The type of the SQL statement. Example: SELECT.', example='SELECT'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30**
*   **50**
*   **100**

Default value: **30**.', example='30'),
  queryKeywords?: string(name='QueryKeywords', description='The keywords that are used for query.', example='select 1'),
  sourceIP?: string(name='SourceIP', description='The source IP address.', example='100.XX.XX.90'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.', example='2023-05-07T06:59Z'),
  user?: string(name='User', description='The name of the database account.', example='testuser'),
}

model DownloadSQLLogsRecordsResponseBody = {
  downloadId?: long(name='DownloadId', description='The ID of the download task.', example='11'),
  requestId?: string(name='RequestId', description='The request ID.', example='7565770E-7C45-462D-BA4A-8A5396F2CAD1'),
}

model DownloadSQLLogsRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadSQLLogsRecordsResponseBody(name='body'),
}

async function downloadSQLLogsRecordsWithOptions(request: DownloadSQLLogsRecordsRequest, runtime: Util.RuntimeOptions): DownloadSQLLogsRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadSQLLogsRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadSQLLogsRecords(request: DownloadSQLLogsRecordsRequest): DownloadSQLLogsRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadSQLLogsRecordsWithOptions(request, runtime);
}

model GetUploadDocumentJobRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  jobId?: string(name='JobId', example='bf8f7bc4-9276-44f7-9c22-1d06edc8dfd1'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetUploadDocumentJobResponseBody = {
  chunkResult?: {
    chunkFileUrl?: string(name='ChunkFileUrl', example='http://xxx/test.jsonl'),
    plainChunkFileUrl?: string(name='PlainChunkFileUrl', example='http://xxx/test.txt'),
  }(name='ChunkResult'),
  job?: {
    completed?: boolean(name='Completed', example='false'),
    createTime?: string(name='CreateTime', example='2024-01-08 16:52:04.864664'),
    error?: string(name='Error', example='Failed to connect database.'),
    id?: string(name='Id', description='Job ID。', example='231460f8-75dc-405e-a669-0c5204887e91'),
    progress?: int32(name='Progress', example='20'),
    status?: string(name='Status', example='Running'),
    updateTime?: string(name='UpdateTime', example='2024-01-08 16:53:04.864664'),
  }(name='Job'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
  usage?: {
    embeddingEntries?: int32(name='EmbeddingEntries'),
    embeddingTokens?: int32(name='EmbeddingTokens', example='475'),
  }(name='Usage'),
}

model GetUploadDocumentJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUploadDocumentJobResponseBody(name='body'),
}

async function getUploadDocumentJobWithOptions(request: GetUploadDocumentJobRequest, runtime: Util.RuntimeOptions): GetUploadDocumentJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.collection)) {
    body['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    body['NamespacePassword'] = request.namespacePassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUploadDocumentJob',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUploadDocumentJob(request: GetUploadDocumentJobRequest): GetUploadDocumentJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadDocumentJobWithOptions(request, runtime);
}

model GetUpsertCollectionDataJobRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  jobId?: string(name='JobId', example='231460f8-75dc-405e-a669-0c5204887e91'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetUpsertCollectionDataJobResponseBody = {
  job?: {
    completed?: boolean(name='Completed', example='false'),
    createTime?: string(name='CreateTime', example='2024-01-08 16:52:04.864664'),
    error?: string(name='Error', example='Failed to connect database.'),
    id?: string(name='Id', description='Job ID。', example='231460f8-75dc-405e-a669-0c5204887e91'),
    progress?: int32(name='Progress', example='1600'),
    status?: string(name='Status', example='Success'),
    updateTime?: string(name='UpdateTime', example='2024-01-08 16:53:04.864664'),
  }(name='Job'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model GetUpsertCollectionDataJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUpsertCollectionDataJobResponseBody(name='body'),
}

async function getUpsertCollectionDataJobWithOptions(request: GetUpsertCollectionDataJobRequest, runtime: Util.RuntimeOptions): GetUpsertCollectionDataJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.collection)) {
    body['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    body['NamespacePassword'] = request.namespacePassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUpsertCollectionDataJob',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUpsertCollectionDataJob(request: GetUpsertCollectionDataJobRequest): GetUpsertCollectionDataJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUpsertCollectionDataJobWithOptions(request, runtime);
}

model GrantCollectionRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance in reserved storage mode.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  grantToNamespace?: string(name='GrantToNamespace', description='The name of the namespace to which you want to grant the vector collection permissions.', example='othernamespace'),
  grantType?: string(name='GrantType', description='The type of the permissions that you want to grant. Valid values:

*   rw: the read and write permissions.
*   ro: the read-only permission.
*   none: the delete permission.', example='rw'),
  managerAccount?: string(name='ManagerAccount', description='The name of the manager account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the manager account.', example='testpassword'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model GrantCollectionResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model GrantCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantCollectionResponseBody(name='body'),
}

async function grantCollectionWithOptions(request: GrantCollectionRequest, runtime: Util.RuntimeOptions): GrantCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.grantToNamespace)) {
    query['GrantToNamespace'] = request.grantToNamespace;
  }
  if (!Util.isUnset(request.grantType)) {
    query['GrantType'] = request.grantType;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantCollection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantCollection(request: GrantCollectionRequest): GrantCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantCollectionWithOptions(request, runtime);
}

model HandleActiveSQLRecordRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  operateType?: int32(name='OperateType', example='0'),
  pids?: string(name='Pids', example='"3003925,3003928"'),
}

model HandleActiveSQLRecordResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp***************'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  results?: [ 
    {
      pid?: string(name='Pid', example='3003925'),
      status?: string(name='Status', example='true'),
    }
  ](name='Results'),
  status?: string(name='Status', example='true'),
}

model HandleActiveSQLRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleActiveSQLRecordResponseBody(name='body'),
}

async function handleActiveSQLRecordWithOptions(request: HandleActiveSQLRecordRequest, runtime: Util.RuntimeOptions): HandleActiveSQLRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.pids)) {
    query['Pids'] = request.pids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleActiveSQLRecord',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleActiveSQLRecord(request: HandleActiveSQLRecordRequest): HandleActiveSQLRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleActiveSQLRecordWithOptions(request, runtime);
}

model InitVectorDatabaseRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  managerAccount?: string(name='ManagerAccount', description='The name of the database account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the database account.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model InitVectorDatabaseResponseBody = {
  message?: string(name='Message', description='The error message returned if the request fails.', example='failed to connect database, detailMsg: getConnection fail::SQL State: 28P01, Error Code: 0, Error Message: FATAL: password'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **Success**
*   **fail**', example='success'),
}

model InitVectorDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitVectorDatabaseResponseBody(name='body'),
}

async function initVectorDatabaseWithOptions(request: InitVectorDatabaseRequest, runtime: Util.RuntimeOptions): InitVectorDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitVectorDatabase',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initVectorDatabase(request: InitVectorDatabaseRequest): InitVectorDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return initVectorDatabaseWithOptions(request, runtime);
}

model ListCollectionsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListCollectionsResponseBody = {
  collections?: {
    collection?: [ string ](name='Collection')
  }(name='Collections', description='The queried vector collections.'),
  count?: int32(name='Count', description='The total number of entries returned.', example='1'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-xxxxxxxxx'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model ListCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCollectionsResponseBody(name='body'),
}

async function listCollectionsWithOptions(request: ListCollectionsRequest, runtime: Util.RuntimeOptions): ListCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCollections',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCollections(request: ListCollectionsRequest): ListCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCollectionsWithOptions(request, runtime);
}

model ListDocumentCollectionsRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDocumentCollectionsResponseBody = {
  count?: int32(name='Count', example='10'),
  items?: {
    collectionList?: [ 
    {
      collectionName?: string(name='CollectionName', example='document'),
      dimension?: int32(name='Dimension', example='1536'),
      embeddingModel?: string(name='EmbeddingModel', example='text-embeddding-v1'),
      fullTextRetrievalFields?: string(name='FullTextRetrievalFields', example='title'),
      metadata?: string(name='Metadata', example='{\\"page\\": \\"int\\", \\"title\\": \\"text\\"}'),
      metrics?: string(name='Metrics', example='cosine'),
      parser?: string(name='Parser', example='zh_cn'),
    }
  ](name='CollectionList')
  }(name='Items'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model ListDocumentCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDocumentCollectionsResponseBody(name='body'),
}

async function listDocumentCollectionsWithOptions(request: ListDocumentCollectionsRequest, runtime: Util.RuntimeOptions): ListDocumentCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDocumentCollections',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDocumentCollections(request: ListDocumentCollectionsRequest): ListDocumentCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDocumentCollectionsWithOptions(request, runtime);
}

model ListDocumentsRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDocumentsResponseBody = {
  items?: {
    documentList?: [ 
    {
      fileName?: string(name='FileName', example='music.txt'),
      source?: string(name='Source', example='http://oss.xxx/music.txt'),
    }
  ](name='DocumentList')
  }(name='Items'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model ListDocumentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDocumentsResponseBody(name='body'),
}

async function listDocumentsWithOptions(request: ListDocumentsRequest, runtime: Util.RuntimeOptions): ListDocumentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDocuments',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDocuments(request: ListDocumentsRequest): ListDocumentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDocumentsWithOptions(request, runtime);
}

model ListNamespacesRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  managerAccount?: string(name='ManagerAccount', description='The name of the manager account that has the rds_superuser permission.', example='testaccount'),
  managerAccountPassword?: string(name='ManagerAccountPassword', description='The password of the manager account.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListNamespacesResponseBody = {
  count?: int32(name='Count', description='The total number of entries returned.', example='1'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-xxxxxxxxx'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  namespaces?: {
    namespace?: [ string ](name='Namespace')
  }(name='Namespaces', description='The queried namespaces.'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model ListNamespacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNamespacesResponseBody(name='body'),
}

async function listNamespacesWithOptions(request: ListNamespacesRequest, runtime: Util.RuntimeOptions): ListNamespacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.managerAccount)) {
    query['ManagerAccount'] = request.managerAccount;
  }
  if (!Util.isUnset(request.managerAccountPassword)) {
    query['ManagerAccountPassword'] = request.managerAccountPassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNamespaces',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNamespaces(request: ListNamespacesRequest): ListNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNamespacesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of instance N. Valid values of N: 1 to 50.', example='gp-xxxxxxxxxx'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The storage mode of the instance. Valid values:

*   `instance`: reserved storage mode
*   `ALIYUN::GPDB::INSTANCE`: elastic storage mode', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. The key must be 1 to 128 characters in length.

You can use `Tag.N` to query instances that have specific tags added. Tag.N consists of Tag.N.Key and Tag.N.Value.

Valid values of N: 1 to 20.

*   If you specify only `Tag.N.Key`, all instances that have the tag key added are returned.
*   If you specify only `Tag.N.Value`, the `InvalidParameter.TagValue` error is returned.
*   If you specify multiple tag key-value pairs at a time, the instances that match all the specified tag key-value pairs are returned.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. The value must be 1 to 128 characters in length.

Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The queried tags.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to perform the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-23757A20B5F8'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the instance.', example='gp-xxxxxxxxxx'),
      resourceType?: string(name='ResourceType', description='The storage mode of the instance.', example='instance'),
      tagKey?: string(name='TagKey', description='The tag key.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value.', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources', description='Details about the instances and tags, including the instance IDs, instance modes, and tag key-value pairs.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription', description='The new description of the database account.

*   The description must start with a letter.
*   The description cannot start with `http://` or `https://`.
*   The description can contain letters, underscores (\\_), hyphens (-), and digits.
*   The description must be 2 to 256 characters in length.', example='testAccoutdescribe'),
  accountName?: string(name='AccountName', description='The name of the database account.', example='testAccout'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-bp12ga6v69h86****'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='99BBBD5E-B5D8-4FC8-B8BF-FB1A0A38BBA2'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The number of days for which data backup files are retained. Default value: 7. Maximum value: 7. Valid values: 1 to 7.', example='7'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp***************'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint', description='Specifies whether to enable automatic point-in-time backup.

*   true
*   false

Default value: true.', example='true'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The cycle based on which you want to perform a backup. Separate multiple values with commas (,). Valid values:

*   Monday
*   Tuesday
*   Wednesday
*   Thursday
*   Friday
*   Saturday
*   Sunday', example='Tuesday, Thursday, Saturday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The backup window. Specify the backup window in the HH:mmZ-HH:mmZ format. The backup window must be in UTC. Default value: 00:00-01:00.', example='15:00Z-16:00Z'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod', description='The frequency of point-in-time backup.

*   1: per hour
*   2: per 2 hours
*   4: per 4 hours
*   8: per 8 hours

Default value: 8.', example='8'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DA147739-AEAD-4417-9089-65**********'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupRetentionPeriod)) {
    query['BackupRetentionPeriod'] = request.backupRetentionPeriod;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.enableRecoveryPoint)) {
    query['EnableRecoveryPoint'] = request.enableRecoveryPoint;
  }
  if (!Util.isUnset(request.preferredBackupPeriod)) {
    query['PreferredBackupPeriod'] = request.preferredBackupPeriod;
  }
  if (!Util.isUnset(request.preferredBackupTime)) {
    query['PreferredBackupTime'] = request.preferredBackupTime;
  }
  if (!Util.isUnset(request.recoveryPointPeriod)) {
    query['RecoveryPointPeriod'] = request.recoveryPointPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceConfigRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.', example='gp-bp12ga6v69h86****'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  idleTime?: int32(name='IdleTime', description='The wait period for the instance that has no traffic to become idle. Minimum value: 60. Default value: 600. Unit: seconds.', example='600'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
  serverlessResource?: int32(name='ServerlessResource', description='The threshold of computing resources. Valid values: 8 to 32. Unit: AnalyticDB Compute Units (ACUs).', example='32'),
}

model ModifyDBInstanceConfigResponseBody = {
  dbInstanceId?: string(name='DbInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the operation fails.', example='\\"error message\\"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34B32A0A-08EF-4A87-B6BE-CDD9F56FC3AD'),
  status?: boolean(name='Status', description='The state of the operation. Valid values:

*   **0**: The operation failed.
*   **1**: The operation is successful.', example='1'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfigWithOptions(request: ModifyDBInstanceConfigRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.idleTime)) {
    query['IdleTime'] = request.idleTime;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serverlessResource)) {
    query['ServerlessResource'] = request.serverlessResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConfig',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConfigWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The endpoint prefix of the instance.', example='gp-test'),
  currentConnectionString?: string(name='CurrentConnectionString', description='The current endpoint of the instance.', example='gp-t4n2qg19bnn98****-master.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-t4n2qg19bnn98****'),
  port?: string(name='Port', description='The port number. Example: 5432.', example='5432'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='29B0BF34-D069-4495-92C7-FA6D94528A9E'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionString',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription', description='The description of the instance.

The description must be 2 to 256 characters in length. It cannot start with http:// or https://.', example='test'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='107BE202-D1A2-479E-98E0-A8**********'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

/**
  * To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyDBInstanceDescriptionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDBInstanceDescriptionResponse
 */
async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceDescription',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To make it easy to identify AnalyticDB for PostgreSQL instances, you can call this operation to modify the description of instances.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyDBInstanceDescriptionRequest
  * @return ModifyDBInstanceDescriptionResponse
 */
async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************'),
  endTime?: string(name='EndTime', description='The end time of the maintenance window. The end time must be later than the start time. Specify the time in the HH:mmZ format. The time must be in UTC.', example='03:00Z'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is no longer used.', example='rg-bp67acfmxazb4p****'),
  startTime?: string(name='StartTime', description='The start time of the maintenance window. Specify the time in the HH:mmZ format. The time must be in UTC.', example='02:00Z'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA9A34C8-AC95-413B-AC6A-CE**********'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

/**
  * The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyDBInstanceMaintainTimeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDBInstanceMaintainTimeResponse
 */
async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceMaintainTime',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The system maintains AnalyticDB for PostgreSQL instances during the maintenance window that you specify. We recommend that you set the maintenance window to off-peak hours to minimize the impact on your business.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyDBInstanceMaintainTimeRequest
  * @return ModifyDBInstanceMaintainTimeResponse
 */
async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceResourceGroupRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to move the instance. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4b****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDBInstanceResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBInstanceResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceResourceGroupResponseBody(name='body'),
}

/**
  * Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](~~94475~~)
  *
  * @param request ModifyDBInstanceResourceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDBInstanceResourceGroupResponse
 */
async function modifyDBInstanceResourceGroupWithOptions(request: ModifyDBInstanceResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceResourceGroup',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Resource Management allows you to build an organizational structure for resources based on your business requirements. You can use resource directories, folders, accounts, and resource groups to hierarchically organize and manage resources. For more information, see [What is Resource Management?](~~94475~~)
  *
  * @param request ModifyDBInstanceResourceGroupRequest
  * @return ModifyDBInstanceResourceGroupResponse
 */
async function modifyDBInstanceResourceGroup(request: ModifyDBInstanceResourceGroupRequest): ModifyDBInstanceResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceResourceGroupWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest {
  connectionString?: string(name='ConnectionString', description='The encrypted endpoint. By default, the wildcards are used for instances that are hosted on ECS instances. This way, the endpoints that can be resolved to the same IP address are encrypted.', example='gp-xxxxxxxxxxx-master.gpdbmaster.singapore.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-xxxxxxxxxxx'),
  SSLEnabled?: int32(name='SSLEnabled', description='The status of SSL encryption. Valid values:

*   0: disables SSL encryption.
*   1: enables SSL encryption.
*   2: updates SSL encryption.', example='1'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADD6EA90-EECB-4C12-9F26-0B6DB58710EF'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.SSLEnabled)) {
    query['SSLEnabled'] = request.SSLEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceSSL',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model ModifyMasterSpecRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription', example='test'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  masterCU?: int32(name='MasterCU', example='8 CU'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
}

model ModifyMasterSpecResponseBody = {
  dbInstanceId?: string(name='DbInstanceId', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', example='******'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: boolean(name='Status', example='true'),
}

model ModifyMasterSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMasterSpecResponseBody(name='body'),
}

async function modifyMasterSpecWithOptions(request: ModifyMasterSpecRequest, runtime: Util.RuntimeOptions): ModifyMasterSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.masterCU)) {
    query['MasterCU'] = request.masterCU;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMasterSpec',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMasterSpec(request: ModifyMasterSpecRequest): ModifyMasterSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMasterSpecWithOptions(request, runtime);
}

model ModifyParametersRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp***************'),
  forceRestartInstance?: boolean(name='ForceRestartInstance', description='Specifies whether to forcibly restart the instance. Valid values:

*   **true**
*   **false**', example='false'),
  parameters?: string(name='Parameters', description='The name and value of the parameter to be modified. Specify the parameter in the `<Parameter name>:<Parameter value>` format.

You can call the [DescribeParameters](~~208310~~) operation to query the parameters that can be modified.', example='{"statement_timeout":"11800010"}'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3FE698B6-6579-547C-A403-07**********'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyParametersResponseBody(name='body'),
}

/**
  * This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyParametersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyParametersResponse
 */
async function modifyParametersWithOptions(request: ModifyParametersRequest, runtime: Util.RuntimeOptions): ModifyParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.forceRestartInstance)) {
    query['ForceRestartInstance'] = request.forceRestartInstance;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyParameters',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation can be called to modify parameters of an AnalyticDB for PostgreSQL instance in elastic storage mode or Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyParametersRequest
  * @return ModifyParametersResponse
 */
async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParametersWithOptions(request, runtime);
}

model ModifySQLCollectorPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-xxxxxxxx'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus', description='Specifies whether to enable or disable SQL collection.

*   Enable: enables SQL collection.
*   Disabled: disables SQL collection.', example='Enable'),
}

model ModifySQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FA1F1D1-50A6-4F60-9A78-5752F2076A53'),
}

model ModifySQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySQLCollectorPolicyResponseBody(name='body'),
}

async function modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.SQLCollectorStatus)) {
    query['SQLCollectorStatus'] = request.SQLCollectorStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySQLCollectorPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorPolicyWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='The attribute of the IP address whitelist. By default, this parameter is empty. A whitelist with the `hidden` attribute does not appear in the console.', example='hidden'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='The name of the whitelist. If you do not enter a name, IP addresses are added to the default whitelist.

>  You can create up to 50 whitelists for an instance.', example='default'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the instance IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  modifyMode?: string(name='ModifyMode', description='The method of modification. Valid values:

*   **Cover**: overwrites the whitelist.
*   **Append**: appends data to the whitelist.
*   **Delete**: deletes the whitelist.', example='0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For more information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
  securityIPList?: string(name='SecurityIPList', description='The IP addresses listed in the whitelist. You can add up to 1,000 IP addresses to the whitelist. Separate multiple IP addresses with commas (,). The IP addresses must use one of the following formats:

*   0.0.0.0/0
*   10.23.12.24. This is a standard IP address.
*   10.23.12.24/24. This is a CIDR block. The value `/24` indicates that the prefix of the CIDR block is 24-bit long. You can replace 24 with a value in the range of `1 to 32`.', example='10.10.**.**'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='871C698F-B43D-4D1D-ACD6-DF56B0F89978'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

/**
  * To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifySecurityIpsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityIpsResponse
 */
async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceIPArrayAttribute)) {
    query['DBInstanceIPArrayAttribute'] = request.DBInstanceIPArrayAttribute;
  }
  if (!Util.isUnset(request.DBInstanceIPArrayName)) {
    query['DBInstanceIPArrayName'] = request.DBInstanceIPArrayName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIps',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To ensure the security and stability of AnalyticDB for PostgreSQL instances, the system denies all external IP addresses to access AnalyticDB for PostgreSQL instances by default. Before you can use an AnalyticDB for PostgreSQL instance, you must add the IP address or CIDR block of your client to the IP address whitelist of the instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifySecurityIpsRequest
  * @return ModifySecurityIpsResponse
 */
async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ModifyVectorConfigurationRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  vectorConfigurationStatus?: string(name='VectorConfigurationStatus', description='Specifies whether to enable vector engine optimization. Valid values:

*   **enabled**
*   **disabled**

> *   We recommend that you **do not enable** vector engine optimization in mainstream analysis and real-time data warehousing scenarios.
> *   We recommend that you **enable** vector engine optimization in AI Generated Content (AIGC) and vector retrieval scenarios that require the vector analysis engine.', example='enabled'),
}

model ModifyVectorConfigurationResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned.

This parameter is returned only if the request fails.', example='Failed to modify vector configuration.'),
  requestId?: string(name='RequestId', description='The request ID.', example='107BE202-D1A2-479E-98E0-A8**********'),
  status?: boolean(name='Status', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ModifyVectorConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVectorConfigurationResponseBody(name='body'),
}

async function modifyVectorConfigurationWithOptions(request: ModifyVectorConfigurationRequest, runtime: Util.RuntimeOptions): ModifyVectorConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.vectorConfigurationStatus)) {
    query['VectorConfigurationStatus'] = request.vectorConfigurationStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVectorConfiguration',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVectorConfiguration(request: ModifyVectorConfigurationRequest): ModifyVectorConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVectorConfigurationWithOptions(request, runtime);
}

model PauseInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model PauseInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only if **false** is returned for the **Status** parameter.', example='*******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9********'),
  status?: boolean(name='Status', description='Indicates whether the request was successful. Valid values:

*   **false**: The request failed.
*   **true**: The request was successful.', example='true'),
}

model PauseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running** state.
  * This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request PauseInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PauseInstanceResponse
 */
async function pauseInstanceWithOptions(request: PauseInstanceRequest, runtime: Util.RuntimeOptions): PauseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to pause an AnalyticDB for PostgreSQL instance that is in the **Running** state.
  * This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request PauseInstanceRequest
  * @return PauseInstanceResponse
 */
async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseInstanceWithOptions(request, runtime);
}

model QueryCollectionDataRequest {
  collection?: string(name='Collection', example='document'),
  content?: string(name='Content', example='hello_world'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  filter?: string(name='Filter', example='response > 200'),
  includeValues?: boolean(name='IncludeValues'),
  metrics?: string(name='Metrics'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  topK?: long(name='TopK', example='10'),
  vector?: [ double ](name='Vector'),
}

model QueryCollectionDataShrinkRequest {
  collection?: string(name='Collection', example='document'),
  content?: string(name='Content', example='hello_world'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  filter?: string(name='Filter', example='response > 200'),
  includeValues?: boolean(name='IncludeValues'),
  metrics?: string(name='Metrics'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  topK?: long(name='TopK', example='10'),
  vectorShrink?: string(name='Vector'),
}

model QueryCollectionDataResponseBody = {
  matches?: {
    match?: [ 
    {
      id?: string(name='Id', example='doca-1234'),
      metadata?: map[string]string(name='Metadata'),
      score?: double(name='Score'),
      values?: {
        value?: [ double ](name='value')
      }(name='Values'),
    }
  ](name='match')
  }(name='Matches'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model QueryCollectionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCollectionDataResponseBody(name='body'),
}

async function queryCollectionDataWithOptions(tmpReq: QueryCollectionDataRequest, runtime: Util.RuntimeOptions): QueryCollectionDataResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCollectionDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.vector)) {
    request.vectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vector, 'Vector', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.includeValues)) {
    query['IncludeValues'] = request.includeValues;
  }
  if (!Util.isUnset(request.metrics)) {
    query['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.topK)) {
    query['TopK'] = request.topK;
  }
  if (!Util.isUnset(request.vectorShrink)) {
    query['Vector'] = request.vectorShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCollectionData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCollectionData(request: QueryCollectionDataRequest): QueryCollectionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCollectionDataWithOptions(request, runtime);
}

model QueryContentRequest {
  collection?: string(name='Collection', example='document'),
  content?: string(name='Content'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileName?: string(name='FileName'),
  fileUrl?: string(name='FileUrl'),
  filter?: string(name='Filter', example='title = \\"test\\"'),
  metrics?: string(name='Metrics', example='cosine'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  topK?: int32(name='TopK', example='10'),
  useFullTextRetrieval?: boolean(name='UseFullTextRetrieval', example='true'),
}

model QueryContentAdvanceRequest {
  collection?: string(name='Collection', example='document'),
  content?: string(name='Content'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileName?: string(name='FileName'),
  fileUrlObject?: readable(name='FileUrl'),
  filter?: string(name='Filter', example='title = \\"test\\"'),
  metrics?: string(name='Metrics', example='cosine'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  topK?: int32(name='TopK', example='10'),
  useFullTextRetrieval?: boolean(name='UseFullTextRetrieval', example='true'),
}

model QueryContentResponseBody = {
  embeddingTokens?: string(name='EmbeddingTokens', example='100'),
  matches?: {
    matchList?: [ 
    {
      content?: string(name='Content'),
      fileName?: string(name='FileName', example='my_doc.txt'),
      fileURL?: string(name='FileURL'),
      id?: string(name='Id', example='doca-1234'),
      loaderMetadata?: string(name='LoaderMetadata', example='{"page_pos": 1}'),
      metadata?: map[string]string(name='Metadata'),
      retrievalSource?: int32(name='RetrievalSource', example='1'),
      score?: double(name='Score', example='0.12345'),
      vector?: {
        vectorList?: [ double ](name='VectorList')
      }(name='Vector'),
    }
  ](name='MatchList')
  }(name='Matches'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
  usage?: {
    embeddingEntries?: string(name='EmbeddingEntries'),
    embeddingTokens?: string(name='EmbeddingTokens'),
  }(name='Usage'),
}

model QueryContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryContentResponseBody(name='body'),
}

async function queryContentWithOptions(request: QueryContentRequest, runtime: Util.RuntimeOptions): QueryContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.metrics)) {
    query['Metrics'] = request.metrics;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.topK)) {
    query['TopK'] = request.topK;
  }
  if (!Util.isUnset(request.useFullTextRetrieval)) {
    query['UseFullTextRetrieval'] = request.useFullTextRetrieval;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryContent',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryContent(request: QueryContentRequest): QueryContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryContentWithOptions(request, runtime);
}

async function queryContentAdvance(request: QueryContentAdvanceRequest, runtime: Util.RuntimeOptions): QueryContentResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'gpdb',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var queryContentReq = new QueryContentRequest{};
  OpenApiUtil.convert(request, queryContentReq);

  if(!Util.isUnset(request.fileUrlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    queryContentReq.fileUrl = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var queryContentResp = queryContentWithOptions(queryContentReq, runtime);
  return queryContentResp;
}

model RebalanceDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests.

The token can be up to 64 characters in length and can contain letters, digits, hyphens (-), and underscores (\\_).

For more information, see [How to ensure idempotence](~~134212~~).', example='0c593ea1-3bea-11e9-b96b-88**********'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-bp***************'),
}

model RebalanceDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-************'),
}

model RebalanceDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebalanceDBInstanceResponseBody(name='body'),
}

async function rebalanceDBInstanceWithOptions(request: RebalanceDBInstanceRequest, runtime: Util.RuntimeOptions): RebalanceDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebalanceDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebalanceDBInstance(request: RebalanceDBInstanceRequest): RebalanceDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebalanceDBInstanceWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  addressType?: string(name='AddressType', description='The type of the endpoint. Default value: primary. Valid values:

*   **primary**: primary endpoint.
*   **cluster**: cluster endpoint. This type of endpoints can be created only for instances that have multiple coordinator nodes.', example='Intranet'),
  currentConnectionString?: string(name='CurrentConnectionString', description='The public endpoint of the instance.

You can log on to the AnalyticDB for PostgreSQL console and go to the **Basic Information** page of the instance to view the **public endpoint** in the **Database Connection** section.', example='gp-bp12ga6v69h86****.gpdb.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9CEF7037-4158-4A65-BEC7-2A**********'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName', description='The ID of the instance.', example='testaccount_1'),
  accountPassword?: string(name='AccountPassword', description='The name of the account.', example='Testaccount_1'),
  DBInstanceId?: string(name='DBInstanceId', description='Before you call this operation, make sure that the following requirements are met:

*   The instance is in the running state.
*   The instance is not locked.', example='gp-t4nf48vf15713****'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The new password for the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='187C80FC-75C4-477C-BBF2-A368A36D041C'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model ResetIMVMonitorDataRequest {
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp152460513z****'),
  database?: string(name='Database', example='testdb'),
}

model ResetIMVMonitorDataResponseBody = {
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: boolean(name='Status', example='true'),
}

model ResetIMVMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetIMVMonitorDataResponseBody(name='body'),
}

async function resetIMVMonitorDataWithOptions(request: ResetIMVMonitorDataRequest, runtime: Util.RuntimeOptions): ResetIMVMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetIMVMonitorData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetIMVMonitorData(request: ResetIMVMonitorDataRequest): ResetIMVMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetIMVMonitorDataWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. For more information, see [How to ensure idempotence](~~327176~~).', example='0c593ea1-3bea-11e9-b96b-88**********'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-xxxxxxxxx'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7356493-7141-4393-8951-CDA8AB5D67EC'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDBInstanceResponseBody(name='body'),
}

/**
  * A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request RestartDBInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RestartDBInstanceResponse
 */
async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A restart takes about 3 to 30 minutes. During the restart, services are unavailable. We recommend that you restart the instance during off-peak hours. After the instance is restarted and enters the running state, you can access the instance.
  * ## Limit
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered and may affect your business. We recommend that you take note of the limit when you call this operation.
  *
  * @param request RestartDBInstanceRequest
  * @return RestartDBInstanceResponse
 */
async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model ResumeInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only if **false** is returned for the **Status** parameter.', example='******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9********'),
  status?: boolean(name='Status', description='Indicates whether the request was successful. Valid values:

*   **false**: The request failed.
*   **true**: The request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused** state.
  * This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ResumeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResumeInstanceResponse
 */
async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to resume an AnalyticDB for PostgreSQL instance that is in the **Paused** state.
  * This operation is available only for AnalyticDB for PostgreSQL instances in Serverless mode that run V1.0.2.1 or later. For more information about how to view and update the minor engine version of an instance, see [View the minor engine version](~~277424~~) and [Update the minor engine version](~~139271~~).
  * >  Before you call this operation, make sure that you are familiar with the billing methods and pricing of AnalyticDB for PostgreSQL instances. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ResumeInstanceRequest
  * @return ResumeInstanceResponse
 */
async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model SetDBInstancePlanStatusRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planId?: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234'),
  planStatus?: string(name='PlanStatus', description='Specifies whether to enable or disable the plan. Valid values:

*   **disable**: disables the plan.
*   **enable**: enables the plan.', example='disable'),
}

model SetDBInstancePlanStatusResponseBody = {
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd988888888'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model SetDBInstancePlanStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDBInstancePlanStatusResponseBody(name='body'),
}

/**
  * You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request SetDBInstancePlanStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDBInstancePlanStatusResponse
 */
async function setDBInstancePlanStatusWithOptions(request: SetDBInstancePlanStatusRequest, runtime: Util.RuntimeOptions): SetDBInstancePlanStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planStatus)) {
    query['PlanStatus'] = request.planStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDBInstancePlanStatus',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to enable or disable a specified plan. The plan management feature is supported only for AnalyticDB for PostgreSQL instances in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request SetDBInstancePlanStatusRequest
  * @return SetDBInstancePlanStatusResponse
 */
async function setDBInstancePlanStatus(request: SetDBInstancePlanStatusRequest): SetDBInstancePlanStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDBInstancePlanStatusWithOptions(request, runtime);
}

model SetDataShareInstanceRequest {
  instanceList?: [ string ](name='InstanceList', description='The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.'),
  operationType?: string(name='OperationType', description='Specifies whether to enable or disable data sharing. Valid values:

*   **add**: enables data sharing.
*   **remove**: disables data sharing.', example='add'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model SetDataShareInstanceShrinkRequest {
  instanceListShrink?: string(name='InstanceList', description='The ID of the AnalyticDB for PostgreSQL instance in Serverless mode.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.'),
  operationType?: string(name='OperationType', description='Specifies whether to enable or disable data sharing. Valid values:

*   **add**: enables data sharing.
*   **remove**: disables data sharing.', example='add'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region.

>  You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model SetDataShareInstanceResponseBody = {
  errMessage?: string(name='ErrMessage', description='The error message returned if the operation fails.', example='error message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4CAF581-2AC7-41AD-8940-D5**********'),
  status?: string(name='Status', description='The state of the operation. Valid values:

*   **success**: The operation is successful.
*   **failed**: The operation fails.', example='success'),
}

model SetDataShareInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDataShareInstanceResponseBody(name='body'),
}

/**
  * This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param tmpReq SetDataShareInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDataShareInstanceResponse
 */
async function setDataShareInstanceWithOptions(tmpReq: SetDataShareInstanceRequest, runtime: Util.RuntimeOptions): SetDataShareInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new SetDataShareInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceListShrink)) {
    query['InstanceList'] = request.instanceListShrink;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataShareInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is called to enable or disable data sharing for an AnalyticDB for PostgreSQL instance in Serverless mode.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request SetDataShareInstanceRequest
  * @return SetDataShareInstanceResponse
 */
async function setDataShareInstance(request: SetDataShareInstanceRequest): SetDataShareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataShareInstanceWithOptions(request, runtime);
}

model SwitchDBInstanceNetTypeRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the custom endpoint.

*   The prefix can contain lowercase letters, digits, and hyphens (-) and must start with a lowercase letter.
*   The prefix can be up to 30 characters in length.', example='test1234'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='rm-uf6wjk5xxxxxxx'),
  port?: string(name='Port', description='The port number.', example='3306'),
}

model SwitchDBInstanceNetTypeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='FA67B751-2A2D-470C-850B-D6B93699D35C'),
}

model SwitchDBInstanceNetTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchDBInstanceNetTypeResponseBody(name='body'),
}

async function switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceNetTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchDBInstanceNetType',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceNetTypeWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~86912~~) operation to query region IDs.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of an instance. Valid values of N: 1 to 50.', example='gp-xxxxxxxxxx'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The mode of the instance. Valid values:

*   `instance`: reserved storage mode
*   `ALIYUN::GPDB::INSTANCE`: elastic storage mode', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of a tag. Valid values of N: 1 to 20. This parameter value cannot be an empty string. A tag key can contain a maximum of 128 characters. It cannot start with `aliyun` or`  acs: ` and cannot contain `http://` or`  https:// `.', example='TestKey'),
      value?: string(name='Value', description='The value of a tag. Valid values of N: 1 to 20. This parameter value can be an empty string. A tag value can contain a maximum of 128 characters. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-23**********'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnloadSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances in a specific region.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
}

model UnloadSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if an error occurs. This message does not affect the execution of the operation.', example='********'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E42ABC3-4DBD-5343-9BCA-66B7D091311F_6914'),
  status?: boolean(name='Status', description='The execution state of the operation. Valid values:

*   **false**: The operation fails.
*   **true**: The operation is successful.', example='true'),
}

model UnloadSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnloadSampleDataResponseBody(name='body'),
}

/**
  * You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UnloadSampleDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnloadSampleDataResponse
 */
async function unloadSampleDataWithOptions(request: UnloadSampleDataRequest, runtime: Util.RuntimeOptions): UnloadSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnloadSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to release a sample dataset from an AnalyticDB for PostgreSQL instance. You must have already loaded the sample dataset.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UnloadSampleDataRequest
  * @return UnloadSampleDataResponse
 */
async function unloadSampleData(request: UnloadSampleDataRequest): UnloadSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return unloadSampleDataWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to unbind all tags from an instance. This parameter is valid only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The storage mode of the instance. Valid values:

*   `instance`: reserved storage mode
*   `ALIYUN::GPDB::INSTANCE`: elastic storage mode', example='instance'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5414A4E5-4C36-4461-95FC-23757A20B5F8'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCollectionDataMetadataRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  filter?: string(name='Filter', example='business_value = \\"chat_file_1\\"'),
  ids?: [ string ](name='Ids', description='The row IDs of the data that you want to update. You must specify one of the Ids and Filter parameters.'),
  metadata?: map[string]any(name='Metadata', description='The data that you want to update, which is a JSON string in the MAP format. In the JSON string, key specifies the field name and value specifies the new data value.', example='{
      "title": "new title",
      "content": "new content"
}'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
}

model UpdateCollectionDataMetadataShrinkRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  filter?: string(name='Filter', example='business_value = \\"chat_file_1\\"'),
  idsShrink?: string(name='Ids', description='The row IDs of the data that you want to update. You must specify one of the Ids and Filter parameters.'),
  metadataShrink?: string(name='Metadata', description='The data that you want to update, which is a JSON string in the MAP format. In the JSON string, key specifies the field name and value specifies the new data value.', example='{
      "title": "new title",
      "content": "new content"
}'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
}

model UpdateCollectionDataMetadataResponseBody = {
  appliedRows?: long(name='AppliedRows', example='10'),
  message?: string(name='Message', example='failed to connect database, detailMsg: getConnection fail::SQL State: 28P01, Error Code: 0, Error Message: FATAL: password'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model UpdateCollectionDataMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCollectionDataMetadataResponseBody(name='body'),
}

async function updateCollectionDataMetadataWithOptions(tmpReq: UpdateCollectionDataMetadataRequest, runtime: Util.RuntimeOptions): UpdateCollectionDataMetadataResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateCollectionDataMetadataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  if (!Util.isUnset(tmpReq.metadata)) {
    request.metadataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.metadata, 'Metadata', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.idsShrink)) {
    query['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.metadataShrink)) {
    query['Metadata'] = request.metadataShrink;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCollectionDataMetadata',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCollectionDataMetadata(request: UpdateCollectionDataMetadataRequest): UpdateCollectionDataMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCollectionDataMetadataWithOptions(request, runtime);
}

model UpdateDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

>  You can call the [DescribeDBInstances](~~86911~~) operation to query the details of all AnalyticDB for PostgreSQL instances in a specific region, including instance IDs.', example='gp-bp12ga6v69h86****'),
  ownerId?: long(name='OwnerId'),
  planConfig?: string(name='PlanConfig', description='The execution information of the plan. Specify the parameter in the JSON format. The parameter value varies based on the values of **PlanType** and **PlanScheduleType**. The following section describes the PlanConfig parameter.', example='{"pause":{"executeTime":"2022-08-30T16:00:00Z"}}'),
  planDesc?: string(name='PlanDesc', description='The description of the plan.', example='this is a test plan'),
  planEndDate?: string(name='PlanEndDate', description='The end time of the plan. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.

>  This parameter is required only for **periodically executed** plans.', example='2023-04-17T23:00Z'),
  planId?: string(name='PlanId', description='The ID of the plan.

>  You can call the [DescribeDBInstancePlans](~~449398~~) operation to query the details of plans, including plan IDs.', example='1234'),
  planName?: string(name='PlanName', description='The name of the plan.', example='test-plan'),
  planStartDate?: string(name='PlanStartDate', description='The start time of the plan. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.

>  This parameter is required only for **periodically executed** plans.', example='2022-04-17T23:00Z'),
}

model UpdateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-bp12ga6v69h86****'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.

This parameter is returned only when the operation fails.', example='****'),
  planId?: string(name='PlanId', description='The ID of the plan.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34b32a0a-08ef-4a87-b6be-cdd9f56fc3ad'),
  status?: string(name='Status', description='The state of the operation.

If the operation is successful, **success** is returned. If the operation fails, this parameter is not returned.', example='success'),
}

model UpdateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDBInstancePlanResponseBody(name='body'),
}

/**
  * You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateDBInstancePlanRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateDBInstancePlanResponse
 */
async function updateDBInstancePlanWithOptions(request: UpdateDBInstancePlanRequest, runtime: Util.RuntimeOptions): UpdateDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planConfig)) {
    query['PlanConfig'] = request.planConfig;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planEndDate)) {
    query['PlanEndDate'] = request.planEndDate;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planStartDate)) {
    query['PlanStartDate'] = request.planStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to modify a plan for an AnalyticDB for PostgreSQL instance in Serverless mode. For example, you can modify a plan for periodically pausing and resuming an instance or scaling an instance.
  * ## Limits
  * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateDBInstancePlanRequest
  * @return UpdateDBInstancePlanResponse
 */
async function updateDBInstancePlan(request: UpdateDBInstancePlanRequest): UpdateDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDBInstancePlanWithOptions(request, runtime);
}

model UpgradeDBInstanceRequest {
  DBInstanceClass?: string(name='DBInstanceClass', description='This parameter is no longer used.', example='null'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount', description='This parameter is no longer used.', example='null'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the IDs of all AnalyticDB for PostgreSQL instances within a region.', example='gp-rj***************'),
  instanceSpec?: string(name='InstanceSpec', description='The specifications of each compute node. For information about the supported specifications, see [Instance specifications](~~35406~~).

> This parameter is available only for instances in elastic storage mode.', example='4C16G'),
  masterNodeNum?: string(name='MasterNodeNum', description='This parameter is no longer used.', example='2'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', description='This parameter is no longer used.', example='null'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. For information about how to obtain the ID of a resource group, see [View basic information of a resource group](~~151181~~).', example='rg-bp67acfmxazb4p****'),
  segDiskPerformanceLevel?: string(name='SegDiskPerformanceLevel', description='The performance level of enhanced SSDs (ESSDs). Valid values:

*   **pl0**
*   **pl1**
*   **pl2**', example='pl1'),
  segNodeNum?: string(name='SegNodeNum', description='The number of compute nodes. The number of compute nodes varies based on the instance resource type and edition.

*   Valid values for High-availability Edition instances in elastic storage mode: 4 to 512, in 4 increments.
*   Valid values for High-performance Edition instances in elastic storage mode: 2 to 512, in 2 increments.
*   Valid values for instances in manual Serverless mode: 2 to 512, in 2 increments.', example='2'),
  segStorageType?: string(name='SegStorageType', description='The disk storage type of the instance after the change. The disk storage type can be changed only to ESSD. Set the value to **cloud_essd**.', example='cloud_essd'),
  storageSize?: string(name='StorageSize', description='The storage capacity of each compute node. Unit: GB. Valid values: 50 to 6000, in 50 increments.

> This parameter is available only for instances in elastic storage mode.', example='100'),
  upgradeType?: long(name='UpgradeType', description='The type of the instance configuration change. Valid values:

*   **0** (default): changes the number of compute nodes.
*   **1**: changes the specifications and storage capacity of each compute node.
*   **2**: changes the number of coordinator nodes.
*   **3**: changes the disk storage type and ESSD performance level of the instance.

> 

*   The supported changes to compute node configurations vary based on the instance resource type. For more information, see the "[Usage notes](~~50956~~)" section of the Change compute node configurations topic.

*   After you specify a change type, only the corresponding parameters take effect. For example, if you set **UpgradeType** to 0, the parameter that is used to change the number of compute nodes takes effect, but the parameter that is used to change the number of coordinator nodes does not.
*   The number of coordinator nodes can be changed only on the China site (aliyun.com).
*   The disk storage type can be changed only from ultra disks to ESSDs.', example='0'),
}

model UpgradeDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.', example='gp-rj***************'),
  orderId?: string(name='OrderId', description='The order ID.', example='*********'),
  requestId?: string(name='RequestId', description='The request ID.', example='25C11EE5-B7E8-481A-A07C-BD**********'),
}

model UpgradeDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceResponseBody(name='body'),
}

/**
  * This operation is not available for instances in reserved storage mode.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  *
  * @param request UpgradeDBInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpgradeDBInstanceResponse
 */
async function upgradeDBInstanceWithOptions(request: UpgradeDBInstanceRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceGroupCount)) {
    query['DBInstanceGroupCount'] = request.DBInstanceGroupCount;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.segDiskPerformanceLevel)) {
    query['SegDiskPerformanceLevel'] = request.segDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.segStorageType)) {
    query['SegStorageType'] = request.segStorageType;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.upgradeType)) {
    query['UpgradeType'] = request.upgradeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is not available for instances in reserved storage mode.
  * Before you call this operation, make sure that you are familiar with the billing of AnalyticDB for PostgreSQL. For more information, see [Billing methods](~~35406~~) and [AnalyticDB for PostgreSQL pricing](https://www.alibabacloud.com/zh/product/hybriddb-postgresql/pricing).
  *
  * @param request UpgradeDBInstanceRequest
  * @return UpgradeDBInstanceResponse
 */
async function upgradeDBInstance(request: UpgradeDBInstanceRequest): UpgradeDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceWithOptions(request, runtime);
}

model UpgradeDBVersionRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='gp-wz9kmr708m155j***'),
  majorVersion?: string(name='MajorVersion', description='This parameter is no longer used and does not need to be specified.', example='null'),
  minorVersion?: string(name='MinorVersion', description='The minor version of the instance.', example='6.3.6.1-202112012048'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  switchTime?: string(name='SwitchTime', description='This parameter is no longer used and does not need to be specified.', example='null'),
  switchTimeMode?: string(name='SwitchTimeMode', description='This parameter is no longer used and does not need to be specified.', example='null'),
}

model UpgradeDBVersionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is no longer returned.', example='gp-wz9kmr708m155j***'),
  DBInstanceName?: string(name='DBInstanceName', description='The name of the instance.', example='gp-wz9kmr708m155j***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25C11EE5-B7E8-481A-A07C-BD619971A570'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='101450956'),
}

model UpgradeDBVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBVersionResponseBody(name='body'),
}

async function upgradeDBVersionWithOptions(request: UpgradeDBVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.majorVersion)) {
    query['MajorVersion'] = request.majorVersion;
  }
  if (!Util.isUnset(request.minorVersion)) {
    query['MinorVersion'] = request.minorVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBVersion',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBVersion(request: UpgradeDBVersionRequest): UpgradeDBVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBVersionWithOptions(request, runtime);
}

model UploadDocumentAsyncRequest {
  chunkOverlap?: int32(name='ChunkOverlap', example='50'),
  chunkSize?: int32(name='ChunkSize', example='250'),
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  documentLoaderName?: string(name='DocumentLoaderName', example='PyMuPDFLoader'),
  dryRun?: boolean(name='DryRun', example='false'),
  fileName?: string(name='FileName', example='mydoc.txt'),
  fileUrl?: string(name='FileUrl', example='https://xx/mydoc.txt'),
  metadata?: map[string]any(name='Metadata'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  separators?: [ string ](name='Separators'),
  textSplitterName?: string(name='TextSplitterName', example='ChineseRecursiveTextSplitter'),
  zhTitleEnhance?: boolean(name='ZhTitleEnhance', example='false'),
}

model UploadDocumentAsyncAdvanceRequest {
  chunkOverlap?: int32(name='ChunkOverlap', example='50'),
  chunkSize?: int32(name='ChunkSize', example='250'),
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  documentLoaderName?: string(name='DocumentLoaderName', example='PyMuPDFLoader'),
  dryRun?: boolean(name='DryRun', example='false'),
  fileName?: string(name='FileName', example='mydoc.txt'),
  fileUrlObject?: readable(name='FileUrl', example='https://xx/mydoc.txt'),
  metadata?: map[string]any(name='Metadata'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  separators?: [ string ](name='Separators'),
  textSplitterName?: string(name='TextSplitterName', example='ChineseRecursiveTextSplitter'),
  zhTitleEnhance?: boolean(name='ZhTitleEnhance', example='false'),
}

model UploadDocumentAsyncShrinkRequest {
  chunkOverlap?: int32(name='ChunkOverlap', example='50'),
  chunkSize?: int32(name='ChunkSize', example='250'),
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-bp12ga6v69h86****'),
  documentLoaderName?: string(name='DocumentLoaderName', example='PyMuPDFLoader'),
  dryRun?: boolean(name='DryRun', example='false'),
  fileName?: string(name='FileName', example='mydoc.txt'),
  fileUrl?: string(name='FileUrl', example='https://xx/mydoc.txt'),
  metadataShrink?: string(name='Metadata'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  separatorsShrink?: string(name='Separators'),
  textSplitterName?: string(name='TextSplitterName', example='ChineseRecursiveTextSplitter'),
  zhTitleEnhance?: boolean(name='ZhTitleEnhance', example='false'),
}

model UploadDocumentAsyncResponseBody = {
  jobId?: string(name='JobId', example='231460f8-75dc-405e-a669-0c5204887e91'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model UploadDocumentAsyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadDocumentAsyncResponseBody(name='body'),
}

async function uploadDocumentAsyncWithOptions(tmpReq: UploadDocumentAsyncRequest, runtime: Util.RuntimeOptions): UploadDocumentAsyncResponse {
  Util.validateModel(tmpReq);
  var request = new UploadDocumentAsyncShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.metadata)) {
    request.metadataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.metadata, 'Metadata', 'json');
  }
  if (!Util.isUnset(tmpReq.separators)) {
    request.separatorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.separators, 'Separators', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chunkOverlap)) {
    body['ChunkOverlap'] = request.chunkOverlap;
  }
  if (!Util.isUnset(request.chunkSize)) {
    body['ChunkSize'] = request.chunkSize;
  }
  if (!Util.isUnset(request.collection)) {
    body['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.documentLoaderName)) {
    body['DocumentLoaderName'] = request.documentLoaderName;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileUrl)) {
    body['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.metadataShrink)) {
    body['Metadata'] = request.metadataShrink;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    body['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.separatorsShrink)) {
    body['Separators'] = request.separatorsShrink;
  }
  if (!Util.isUnset(request.textSplitterName)) {
    body['TextSplitterName'] = request.textSplitterName;
  }
  if (!Util.isUnset(request.zhTitleEnhance)) {
    body['ZhTitleEnhance'] = request.zhTitleEnhance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UploadDocumentAsync',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadDocumentAsync(request: UploadDocumentAsyncRequest): UploadDocumentAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDocumentAsyncWithOptions(request, runtime);
}

async function uploadDocumentAsyncAdvance(request: UploadDocumentAsyncAdvanceRequest, runtime: Util.RuntimeOptions): UploadDocumentAsyncResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'gpdb',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var uploadDocumentAsyncReq = new UploadDocumentAsyncRequest{};
  OpenApiUtil.convert(request, uploadDocumentAsyncReq);

  if(!Util.isUnset(request.fileUrlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    uploadDocumentAsyncReq.fileUrl = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var uploadDocumentAsyncResp = uploadDocumentAsyncWithOptions(uploadDocumentAsyncReq, runtime);
  return uploadDocumentAsyncResp;
}

model UpsertChunksRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileName?: string(name='FileName', example='mydoc.txt'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  textChunks?: [ 
    {
      content?: string(name='Content'),
      metadata?: map[string]any(name='Metadata', example='{"title":"test"}'),
    }
  ](name='TextChunks'),
}

model UpsertChunksShrinkRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileName?: string(name='FileName', example='mydoc.txt'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  textChunksShrink?: string(name='TextChunks'),
}

model UpsertChunksResponseBody = {
  embeddingTokens?: string(name='EmbeddingTokens', example='100'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model UpsertChunksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpsertChunksResponseBody(name='body'),
}

async function upsertChunksWithOptions(tmpReq: UpsertChunksRequest, runtime: Util.RuntimeOptions): UpsertChunksResponse {
  Util.validateModel(tmpReq);
  var request = new UpsertChunksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.textChunks)) {
    request.textChunksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.textChunks, 'TextChunks', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.textChunksShrink)) {
    body['TextChunks'] = request.textChunksShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpsertChunks',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upsertChunks(request: UpsertChunksRequest): UpsertChunksResponse {
  var runtime = new Util.RuntimeOptions{};
  return upsertChunksWithOptions(request, runtime);
}

model UpsertCollectionDataRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  rows?: [ 
    {
      id?: string(name='Id'),
      metadata?: map[string]string(name='Metadata'),
      vector?: [ double ](name='Vector'),
    }
  ](name='Rows'),
}

model UpsertCollectionDataShrinkRequest {
  collection?: string(name='Collection', description='The name of the collection.', example='document'),
  DBInstanceId?: string(name='DBInstanceId', description='The instance ID.

> You can call the [DescribeDBInstances](~~86911~~) operation to query the information about all AnalyticDB for PostgreSQL instances within a region, including instance IDs.', example='gp-xxxxxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', description='The password of the namespace.', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> You can call the [DescribeRegions](~~86912~~) operation to query the most recent region list.', example='cn-hangzhou'),
  rowsShrink?: string(name='Rows'),
}

model UpsertCollectionDataResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', description='Indicates whether the request was successful. Valid values:

*   **success**
*   **fail**', example='success'),
}

model UpsertCollectionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpsertCollectionDataResponseBody(name='body'),
}

async function upsertCollectionDataWithOptions(tmpReq: UpsertCollectionDataRequest, runtime: Util.RuntimeOptions): UpsertCollectionDataResponse {
  Util.validateModel(tmpReq);
  var request = new UpsertCollectionDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rows)) {
    request.rowsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rows, 'Rows', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.collection)) {
    query['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    query['NamespacePassword'] = request.namespacePassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.rowsShrink)) {
    body['Rows'] = request.rowsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpsertCollectionData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upsertCollectionData(request: UpsertCollectionDataRequest): UpsertCollectionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return upsertCollectionDataWithOptions(request, runtime);
}

model UpsertCollectionDataAsyncRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileUrl?: string(name='FileUrl', example='https://xx/vectors.jsonl'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpsertCollectionDataAsyncAdvanceRequest {
  collection?: string(name='Collection', example='document'),
  DBInstanceId?: string(name='DBInstanceId', example='gp-xxxxxxxxx'),
  fileUrlObject?: readable(name='FileUrl', example='https://xx/vectors.jsonl'),
  namespace?: string(name='Namespace', example='mynamespace'),
  namespacePassword?: string(name='NamespacePassword', example='testpassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpsertCollectionDataAsyncResponseBody = {
  jobId?: string(name='JobId', example='231460f8-75dc-405e-a669-0c5204887e91'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='ABB39CC3-4488-4857-905D-2E4A051D0521'),
  status?: string(name='Status', example='success'),
}

model UpsertCollectionDataAsyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpsertCollectionDataAsyncResponseBody(name='body'),
}

async function upsertCollectionDataAsyncWithOptions(request: UpsertCollectionDataAsyncRequest, runtime: Util.RuntimeOptions): UpsertCollectionDataAsyncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.collection)) {
    body['Collection'] = request.collection;
  }
  if (!Util.isUnset(request.fileUrl)) {
    body['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespacePassword)) {
    body['NamespacePassword'] = request.namespacePassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpsertCollectionDataAsync',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upsertCollectionDataAsync(request: UpsertCollectionDataAsyncRequest): UpsertCollectionDataAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return upsertCollectionDataAsyncWithOptions(request, runtime);
}

async function upsertCollectionDataAsyncAdvance(request: UpsertCollectionDataAsyncAdvanceRequest, runtime: Util.RuntimeOptions): UpsertCollectionDataAsyncResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'gpdb',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var upsertCollectionDataAsyncReq = new UpsertCollectionDataAsyncRequest{};
  OpenApiUtil.convert(request, upsertCollectionDataAsyncReq);

  if(!Util.isUnset(request.fileUrlObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    upsertCollectionDataAsyncReq.fileUrl = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var upsertCollectionDataAsyncResp = upsertCollectionDataAsyncWithOptions(upsertCollectionDataAsyncReq, runtime);
  return upsertCollectionDataAsyncResp;
}

