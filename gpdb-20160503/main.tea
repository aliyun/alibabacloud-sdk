/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'gpdb.aliyuncs.com',
    cn-hangzhou = 'gpdb.aliyuncs.com',
    cn-shanghai = 'gpdb.aliyuncs.com',
    cn-shenzhen = 'gpdb.aliyuncs.com',
    cn-hongkong = 'gpdb.aliyuncs.com',
    ap-southeast-1 = 'gpdb.aliyuncs.com',
    us-west-1 = 'gpdb.aliyuncs.com',
    us-east-1 = 'gpdb.aliyuncs.com',
    cn-hangzhou-finance = 'gpdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'gpdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'gpdb.aliyuncs.com',
    cn-qingdao = 'gpdb.aliyuncs.com',
    cn-north-2-gov-1 = 'gpdb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('gpdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddBuDBInstanceRelationRequest {
  businessUnit?: string(name='BusinessUnit'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model AddBuDBInstanceRelationResponseBody = {
  businessUnit?: string(name='BusinessUnit'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
}

model AddBuDBInstanceRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBuDBInstanceRelationResponseBody(name='body'),
}

async function addBuDBInstanceRelationWithOptions(request: AddBuDBInstanceRelationRequest, runtime: Util.RuntimeOptions): AddBuDBInstanceRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessUnit)) {
    query['BusinessUnit'] = request.businessUnit;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBuDBInstanceRelation',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addBuDBInstanceRelation(request: AddBuDBInstanceRelationRequest): AddBuDBInstanceRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBuDBInstanceRelationWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest {
  addressType?: string(name='AddressType'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest {
  regionId?: string(name='RegionId'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: string(name='HasServiceLinkedRole'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceLinkedRole',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  DBInstanceId?: string(name='DBInstanceId'),
  databaseName?: string(name='DatabaseName'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  clientToken?: string(name='ClientToken'),
  createSampleData?: boolean(name='CreateSampleData'),
  DBInstanceCategory?: string(name='DBInstanceCategory'),
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount'),
  DBInstanceMode?: string(name='DBInstanceMode'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  idleTime?: int32(name='IdleTime'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  instanceSpec?: string(name='InstanceSpec'),
  masterNodeNum?: string(name='MasterNodeNum'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityIPList?: string(name='SecurityIPList'),
  segNodeNum?: string(name='SegNodeNum'),
  segStorageType?: string(name='SegStorageType'),
  serverlessMode?: string(name='ServerlessMode'),
  serverlessResource?: int32(name='ServerlessResource'),
  storageSize?: long(name='StorageSize'),
  storageType?: string(name='StorageType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
  port?: string(name='Port'),
  requestId?: string(name='RequestId'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.createSampleData)) {
    query['CreateSampleData'] = request.createSampleData;
  }
  if (!Util.isUnset(request.DBInstanceCategory)) {
    query['DBInstanceCategory'] = request.DBInstanceCategory;
  }
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceGroupCount)) {
    query['DBInstanceGroupCount'] = request.DBInstanceGroupCount;
  }
  if (!Util.isUnset(request.DBInstanceMode)) {
    query['DBInstanceMode'] = request.DBInstanceMode;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.idleTime)) {
    query['IdleTime'] = request.idleTime;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.segStorageType)) {
    query['SegStorageType'] = request.segStorageType;
  }
  if (!Util.isUnset(request.serverlessMode)) {
    query['ServerlessMode'] = request.serverlessMode;
  }
  if (!Util.isUnset(request.serverlessResource)) {
    query['ServerlessResource'] = request.serverlessResource;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  planConfig?: string(name='PlanConfig'),
  planDesc?: string(name='PlanDesc'),
  planEndDate?: string(name='PlanEndDate'),
  planName?: string(name='PlanName'),
  planScheduleType?: string(name='PlanScheduleType'),
  planStartDate?: string(name='PlanStartDate'),
  planType?: string(name='PlanType'),
}

model CreateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  planId?: string(name='PlanId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstancePlanResponseBody(name='body'),
}

async function createDBInstancePlanWithOptions(request: CreateDBInstancePlanRequest, runtime: Util.RuntimeOptions): CreateDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planConfig)) {
    query['PlanConfig'] = request.planConfig;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planEndDate)) {
    query['PlanEndDate'] = request.planEndDate;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planScheduleType)) {
    query['PlanScheduleType'] = request.planScheduleType;
  }
  if (!Util.isUnset(request.planStartDate)) {
    query['PlanStartDate'] = request.planStartDate;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBInstancePlan(request: CreateDBInstancePlanRequest): CreateDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstancePlanWithOptions(request, runtime);
}

model CreateECSDBInstanceRequest {
  backupId?: string(name='BackupId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceCategory?: string(name='DBInstanceCategory'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  encryptionKey?: string(name='EncryptionKey'),
  encryptionType?: string(name='EncryptionType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  instanceSpec?: string(name='InstanceSpec'),
  masterNodeNum?: int32(name='MasterNodeNum'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityIPList?: string(name='SecurityIPList'),
  segNodeNum?: int32(name='SegNodeNum'),
  segStorageType?: string(name='SegStorageType'),
  srcDbInstanceName?: string(name='SrcDbInstanceName'),
  storageSize?: int32(name='StorageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateECSDBInstanceResponseBody = {
  connectionString?: string(name='ConnectionString'),
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
  port?: string(name='Port'),
  requestId?: string(name='RequestId'),
}

model CreateECSDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateECSDBInstanceResponseBody(name='body'),
}

async function createECSDBInstanceWithOptions(request: CreateECSDBInstanceRequest, runtime: Util.RuntimeOptions): CreateECSDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceCategory)) {
    query['DBInstanceCategory'] = request.DBInstanceCategory;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.encryptionKey)) {
    query['EncryptionKey'] = request.encryptionKey;
  }
  if (!Util.isUnset(request.encryptionType)) {
    query['EncryptionType'] = request.encryptionType;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.segStorageType)) {
    query['SegStorageType'] = request.segStorageType;
  }
  if (!Util.isUnset(request.srcDbInstanceName)) {
    query['SrcDbInstanceName'] = request.srcDbInstanceName;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateECSDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createECSDBInstance(request: CreateECSDBInstanceRequest): CreateECSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createECSDBInstanceWithOptions(request, runtime);
}

model CreateSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model CreateSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CreateSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSampleDataResponseBody(name='body'),
}

async function createSampleDataWithOptions(request: CreateSampleDataRequest, runtime: Util.RuntimeOptions): CreateSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSampleData(request: CreateSampleDataRequest): CreateSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSampleDataWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRole',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  planId?: string(name='PlanId'),
}

model DeleteDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  planId?: string(name='PlanId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DeleteDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstancePlanResponseBody(name='body'),
}

async function deleteDBInstancePlanWithOptions(request: DeleteDBInstancePlanRequest, runtime: Util.RuntimeOptions): DeleteDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBInstancePlan(request: DeleteDBInstancePlanRequest): DeleteDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstancePlanWithOptions(request, runtime);
}

model DeleteDatabaseRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDatabase',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    DBInstanceAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus'),
      DBInstanceId?: string(name='DBInstanceId'),
    }
  ](name='DBInstanceAccount')
  }(name='Accounts'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeAvailableResourcesRequest {
  chargeType?: string(name='ChargeType'),
  region?: string(name='Region'),
  zoneId?: string(name='ZoneId'),
}

model DescribeAvailableResourcesResponseBody = {
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      supportedEngines?: [ 
        {
          mode?: string(name='Mode'),
          supportedEngineVersion?: string(name='SupportedEngineVersion'),
          supportedInstanceClasses?: [ 
            {
              description?: string(name='Description'),
              displayClass?: string(name='DisplayClass'),
              instanceClass?: string(name='InstanceClass'),
              nodeCount?: {
                maxCount?: string(name='MaxCount'),
                minCount?: string(name='MinCount'),
                step?: string(name='Step'),
              }(name='NodeCount'),
              storageSize?: {
                maxCount?: string(name='MaxCount'),
                minCount?: string(name='MinCount'),
                step?: string(name='Step'),
              }(name='StorageSize'),
              storageType?: string(name='StorageType'),
            }
          ](name='SupportedInstanceClasses'),
        }
      ](name='SupportedEngines'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Resources'),
}

model DescribeAvailableResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableResourcesResponseBody(name='body'),
}

async function describeAvailableResourcesWithOptions(request: DescribeAvailableResourcesRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableResources(request: DescribeAvailableResourcesRequest): DescribeAvailableResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourcesWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeDBClusterNodeRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  nodeType?: string(name='NodeType'),
}

model DescribeDBClusterNodeResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  nodes?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='Nodes'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterNodeResponseBody(name='body'),
}

async function describeDBClusterNodeWithOptions(request: DescribeDBClusterNodeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterNode',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterNode(request: DescribeDBClusterNodeRequest): DescribeDBClusterNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNodeWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  nodeType?: string(name='NodeType'),
  nodes?: string(name='Nodes'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performanceKeys?: [ 
    {
      name?: string(name='Name'),
      series?: [ 
        {
          name?: string(name='Name'),
          role?: string(name='Role'),
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.nodes)) {
    query['Nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDBInstanceAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      availabilityValue?: string(name='AvailabilityValue'),
      connectionMode?: string(name='ConnectionMode'),
      connectionString?: string(name='ConnectionString'),
      coreVersion?: string(name='CoreVersion'),
      cpuCores?: int32(name='CpuCores'),
      cpuCoresPerNode?: int32(name='CpuCoresPerNode'),
      creationTime?: string(name='CreationTime'),
      DBInstanceCategory?: string(name='DBInstanceCategory'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      DBInstanceClassType?: string(name='DBInstanceClassType'),
      DBInstanceCpuCores?: int32(name='DBInstanceCpuCores'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceDiskMBPS?: long(name='DBInstanceDiskMBPS'),
      DBInstanceGroupCount?: string(name='DBInstanceGroupCount'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceMemory?: long(name='DBInstanceMemory'),
      DBInstanceMode?: string(name='DBInstanceMode'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      DBInstanceStorage?: long(name='DBInstanceStorage'),
      encryptionKey?: string(name='EncryptionKey'),
      encryptionType?: string(name='EncryptionType'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expireTime?: string(name='ExpireTime'),
      hostType?: string(name='HostType'),
      idleTime?: int32(name='IdleTime'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      maintainEndTime?: string(name='MaintainEndTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
      masterNodeNum?: int32(name='MasterNodeNum'),
      maxConnections?: int32(name='MaxConnections'),
      memoryPerNode?: int32(name='MemoryPerNode'),
      memorySize?: long(name='MemorySize'),
      memoryUnit?: string(name='MemoryUnit'),
      minorVersion?: string(name='MinorVersion'),
      payType?: string(name='PayType'),
      port?: string(name='Port'),
      readDelayTime?: string(name='ReadDelayTime'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      runningTime?: string(name='RunningTime'),
      securityIPList?: string(name='SecurityIPList'),
      segNodeNum?: int32(name='SegNodeNum'),
      segmentCounts?: int32(name='SegmentCounts'),
      serverlessMode?: string(name='ServerlessMode'),
      serverlessResource?: int32(name='ServerlessResource'),
      startTime?: string(name='StartTime'),
      storagePerNode?: int32(name='StoragePerNode'),
      storageSize?: long(name='StorageSize'),
      storageType?: string(name='StorageType'),
      storageUnit?: string(name='StorageUnit'),
      supportRestore?: boolean(name='SupportRestore'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceAttribute',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceDataBloatRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDBInstanceDataBloatResponseBody = {
  items?: [ 
    {
      bloatCeoff?: string(name='BloatCeoff'),
      bloatSize?: string(name='BloatSize'),
      databaseName?: string(name='DatabaseName'),
      expectTableSize?: string(name='ExpectTableSize'),
      realTableSize?: string(name='RealTableSize'),
      schemaName?: string(name='SchemaName'),
      sequence?: int32(name='Sequence'),
      storageType?: string(name='StorageType'),
      suggestedAction?: string(name='SuggestedAction'),
      tableName?: string(name='TableName'),
      timeLastUpdated?: string(name='TimeLastUpdated'),
      timeLastVacuumed?: string(name='TimeLastVacuumed'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBInstanceDataBloatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDataBloatResponseBody(name='body'),
}

async function describeDBInstanceDataBloatWithOptions(request: DescribeDBInstanceDataBloatRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataBloatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataBloat',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceDataBloat(request: DescribeDBInstanceDataBloatRequest): DescribeDBInstanceDataBloatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataBloatWithOptions(request, runtime);
}

model DescribeDBInstanceDataSkewRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDBInstanceDataSkewResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName'),
      distributeKey?: string(name='DistributeKey'),
      owner?: string(name='Owner'),
      schemaName?: string(name='SchemaName'),
      sequence?: int32(name='Sequence'),
      tableName?: string(name='TableName'),
      tableSize?: string(name='TableSize'),
      tableSkew?: string(name='TableSkew'),
      timeLastUpdated?: string(name='TimeLastUpdated'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBInstanceDataSkewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDataSkewResponseBody(name='body'),
}

async function describeDBInstanceDataSkewWithOptions(request: DescribeDBInstanceDataSkewRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataSkewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataSkew',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceDataSkew(request: DescribeDBInstanceDataSkewRequest): DescribeDBInstanceDataSkewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataSkewWithOptions(request, runtime);
}

model DescribeDBInstanceDiagnosisSummaryRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  rolePreferd?: string(name='RolePreferd'),
  startStatus?: string(name='StartStatus'),
  syncMode?: string(name='SyncMode'),
}

model DescribeDBInstanceDiagnosisSummaryResponseBody = {
  items?: [ 
    {
      hostname?: string(name='Hostname'),
      nodeAddress?: string(name='NodeAddress'),
      nodeCID?: string(name='NodeCID'),
      nodeID?: string(name='NodeID'),
      nodeName?: string(name='NodeName'),
      nodePort?: string(name='NodePort'),
      nodePreferredRole?: string(name='NodePreferredRole'),
      nodeReplicationMode?: string(name='NodeReplicationMode'),
      nodeRole?: string(name='NodeRole'),
      nodeStatus?: string(name='NodeStatus'),
      nodeType?: string(name='NodeType'),
    }
  ](name='Items'),
  masterStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum'),
    normalNodeNum?: int32(name='NormalNodeNum'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum'),
    preferredNodeNum?: int32(name='PreferredNodeNum'),
    syncedNodeNum?: int32(name='SyncedNodeNum'),
  }(name='MasterStatusInfo'),
  pageNumber?: string(name='PageNumber'),
  requestId?: string(name='RequestId'),
  segmentStatusInfo?: {
    exceptionNodeNum?: int32(name='ExceptionNodeNum'),
    normalNodeNum?: int32(name='NormalNodeNum'),
    notPreferredNodeNum?: int32(name='NotPreferredNodeNum'),
    notSyncingNodeNum?: int32(name='NotSyncingNodeNum'),
    preferredNodeNum?: int32(name='PreferredNodeNum'),
    syncedNodeNum?: int32(name='SyncedNodeNum'),
  }(name='SegmentStatusInfo'),
  totalCount?: string(name='TotalCount'),
}

model DescribeDBInstanceDiagnosisSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceDiagnosisSummaryResponseBody(name='body'),
}

async function describeDBInstanceDiagnosisSummaryWithOptions(request: DescribeDBInstanceDiagnosisSummaryRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDiagnosisSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rolePreferd)) {
    query['RolePreferd'] = request.rolePreferd;
  }
  if (!Util.isUnset(request.startStatus)) {
    query['StartStatus'] = request.startStatus;
  }
  if (!Util.isUnset(request.syncMode)) {
    query['SyncMode'] = request.syncMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDiagnosisSummary',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceDiagnosisSummary(request: DescribeDBInstanceDiagnosisSummaryRequest): DescribeDBInstanceDiagnosisSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDiagnosisSummaryWithOptions(request, runtime);
}

model DescribeDBInstanceErrorLogRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  host?: string(name='Host'),
  keywords?: string(name='Keywords'),
  logLevel?: string(name='LogLevel'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeDBInstanceErrorLogResponseBody = {
  items?: [ 
    {
      database?: string(name='Database'),
      host?: string(name='Host'),
      logContext?: string(name='LogContext'),
      logLevel?: string(name='LogLevel'),
      time?: long(name='Time'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBInstanceErrorLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceErrorLogResponseBody(name='body'),
}

async function describeDBInstanceErrorLogWithOptions(request: DescribeDBInstanceErrorLogRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceErrorLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.host)) {
    query['Host'] = request.host;
  }
  if (!Util.isUnset(request.keywords)) {
    query['Keywords'] = request.keywords;
  }
  if (!Util.isUnset(request.logLevel)) {
    query['LogLevel'] = request.logLevel;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceErrorLog',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceErrorLog(request: DescribeDBInstanceErrorLogRequest): DescribeDBInstanceErrorLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceErrorLogWithOptions(request, runtime);
}

model DescribeDBInstanceIPArrayListRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDBInstanceIPArrayListResponseBody = {
  items?: {
    DBInstanceIPArray?: [ 
    {
      DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute'),
      DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName'),
      securityIPList?: string(name='SecurityIPList'),
    }
  ](name='DBInstanceIPArray')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceIPArrayListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceIPArrayListResponseBody(name='body'),
}

async function describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIPArrayListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceIPArrayList',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIPArrayListWithOptions(request, runtime);
}

model DescribeDBInstanceIndexUsageRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDBInstanceIndexUsageResponseBody = {
  items?: [ 
    {
      databaseName?: string(name='DatabaseName'),
      indexDef?: string(name='IndexDef'),
      indexName?: string(name='IndexName'),
      indexScanTimes?: int32(name='IndexScanTimes'),
      indexSize?: string(name='IndexSize'),
      isPartitionTable?: boolean(name='IsPartitionTable'),
      parentTableName?: string(name='ParentTableName'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      timeLastUpdated?: string(name='TimeLastUpdated'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBInstanceIndexUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceIndexUsageResponseBody(name='body'),
}

async function describeDBInstanceIndexUsageWithOptions(request: DescribeDBInstanceIndexUsageRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIndexUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceIndexUsage',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceIndexUsage(request: DescribeDBInstanceIndexUsageRequest): DescribeDBInstanceIndexUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIndexUsageWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBInstanceNetInfos?: {
    DBInstanceNetInfo?: [ 
    {
      addressType?: string(name='AddressType'),
      connectionString?: string(name='ConnectionString'),
      IPAddress?: string(name='IPAddress'),
      IPType?: string(name='IPType'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      vpcInstanceId?: string(name='VpcInstanceId'),
    }
  ](name='DBInstanceNetInfo')
  }(name='DBInstanceNetInfos'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceNetInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDBInstanceOnECSAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDBInstanceOnECSAttributeResponseBody = {
  items?: {
    DBInstanceAttribute?: [ 
    {
      connectionMode?: string(name='ConnectionMode'),
      connectionString?: string(name='ConnectionString'),
      cpuCores?: int32(name='CpuCores'),
      creationTime?: string(name='CreationTime'),
      DBInstanceCategory?: string(name='DBInstanceCategory'),
      DBInstanceClass?: string(name='DBInstanceClass'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      encryptionKey?: string(name='EncryptionKey'),
      encryptionType?: string(name='EncryptionType'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expireTime?: string(name='ExpireTime'),
      instanceDeployType?: string(name='InstanceDeployType'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      lockMode?: string(name='LockMode'),
      masterNodeNum?: int32(name='MasterNodeNum'),
      memorySize?: int32(name='MemorySize'),
      minorVersion?: string(name='MinorVersion'),
      payType?: string(name='PayType'),
      port?: string(name='Port'),
      regionId?: string(name='RegionId'),
      segNodeNum?: int32(name='SegNodeNum'),
      storageSize?: int32(name='StorageSize'),
      storageType?: string(name='StorageType'),
      supportRestore?: boolean(name='SupportRestore'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstanceAttribute')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceOnECSAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceOnECSAttributeResponseBody(name='body'),
}

async function describeDBInstanceOnECSAttributeWithOptions(request: DescribeDBInstanceOnECSAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceOnECSAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceOnECSAttribute',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceOnECSAttribute(request: DescribeDBInstanceOnECSAttributeRequest): DescribeDBInstanceOnECSAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceOnECSAttributeWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBInstancePerformanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  endTime?: string(name='EndTime'),
  engine?: string(name='Engine'),
  performanceKeys?: [ string ](name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancePerformanceResponseBody(name='body'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancePerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDBInstancePlansRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  planCreateDate?: string(name='PlanCreateDate'),
  planDesc?: string(name='PlanDesc'),
  planId?: string(name='PlanId'),
  planScheduleType?: string(name='PlanScheduleType'),
  planType?: string(name='PlanType'),
}

model DescribeDBInstancePlansResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  items?: {
    planList?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId'),
      planConfig?: string(name='PlanConfig'),
      planDesc?: string(name='PlanDesc'),
      planEndDate?: string(name='PlanEndDate'),
      planId?: string(name='PlanId'),
      planName?: string(name='PlanName'),
      planScheduleType?: string(name='PlanScheduleType'),
      planStartDate?: string(name='PlanStartDate'),
      planStatus?: string(name='PlanStatus'),
      planType?: string(name='PlanType'),
    }
  ](name='PlanList')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDBInstancePlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancePlansResponseBody(name='body'),
}

async function describeDBInstancePlansWithOptions(request: DescribeDBInstancePlansRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planCreateDate)) {
    query['PlanCreateDate'] = request.planCreateDate;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planScheduleType)) {
    query['PlanScheduleType'] = request.planScheduleType;
  }
  if (!Util.isUnset(request.planType)) {
    query['PlanType'] = request.planType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstancePlans',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstancePlans(request: DescribeDBInstancePlansRequest): DescribeDBInstancePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePlansWithOptions(request, runtime);
}

model DescribeDBInstanceSQLPatternsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  queryKeywords?: string(name='QueryKeywords'),
  sourceIP?: string(name='SourceIP'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeDBInstanceSQLPatternsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  patterns?: [ 
    {
      name?: string(name='Name'),
      values?: map[string]any(name='Values'),
    }
  ](name='Patterns'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBInstanceSQLPatternsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSQLPatternsResponseBody(name='body'),
}

async function describeDBInstanceSQLPatternsWithOptions(request: DescribeDBInstanceSQLPatternsRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSQLPatternsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSQLPatterns',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSQLPatterns(request: DescribeDBInstanceSQLPatternsRequest): DescribeDBInstanceSQLPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSQLPatternsWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDBInstanceSSLResponseBody = {
  certCommonName?: string(name='CertCommonName'),
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  SSLEnabled?: boolean(name='SSLEnabled'),
  SSLExpiredTime?: string(name='SSLExpiredTime'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSSL',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  DBInstanceCategories?: [ string ](name='DBInstanceCategories'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  DBInstanceIds?: string(name='DBInstanceIds'),
  DBInstanceModes?: [ string ](name='DBInstanceModes'),
  DBInstanceStatuses?: [ string ](name='DBInstanceStatuses'),
  instanceDeployTypes?: [ string ](name='InstanceDeployTypes'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBInstancesShrinkRequest {
  DBInstanceCategoriesShrink?: string(name='DBInstanceCategories'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  DBInstanceIds?: string(name='DBInstanceIds'),
  DBInstanceModesShrink?: string(name='DBInstanceModes'),
  DBInstanceStatusesShrink?: string(name='DBInstanceStatuses'),
  instanceDeployTypesShrink?: string(name='InstanceDeployTypes'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      connectionMode?: string(name='ConnectionMode'),
      createTime?: string(name='CreateTime'),
      DBInstanceCategory?: string(name='DBInstanceCategory'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceMode?: string(name='DBInstanceMode'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      DBInstanceStatus?: string(name='DBInstanceStatus'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expireTime?: string(name='ExpireTime'),
      instanceDeployType?: string(name='InstanceDeployType'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      masterNodeNum?: int32(name='MasterNodeNum'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      segNodeNum?: string(name='SegNodeNum'),
      serverlessMode?: string(name='ServerlessMode'),
      storageSize?: string(name='StorageSize'),
      storageType?: string(name='StorageType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstance')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(tmpReq: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeDBInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.DBInstanceCategories)) {
    request.DBInstanceCategoriesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceCategories, 'DBInstanceCategories', 'simple');
  }
  if (!Util.isUnset(tmpReq.DBInstanceModes)) {
    request.DBInstanceModesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceModes, 'DBInstanceModes', 'simple');
  }
  if (!Util.isUnset(tmpReq.DBInstanceStatuses)) {
    request.DBInstanceStatusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceStatuses, 'DBInstanceStatuses', 'simple');
  }
  if (!Util.isUnset(tmpReq.instanceDeployTypes)) {
    request.instanceDeployTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceDeployTypes, 'InstanceDeployTypes', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.DBInstanceCategoriesShrink)) {
    query['DBInstanceCategories'] = request.DBInstanceCategoriesShrink;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceIds)) {
    query['DBInstanceIds'] = request.DBInstanceIds;
  }
  if (!Util.isUnset(request.DBInstanceModesShrink)) {
    query['DBInstanceModes'] = request.DBInstanceModesShrink;
  }
  if (!Util.isUnset(request.DBInstanceStatusesShrink)) {
    query['DBInstanceStatuses'] = request.DBInstanceStatusesShrink;
  }
  if (!Util.isUnset(request.instanceDeployTypesShrink)) {
    query['InstanceDeployTypes'] = request.instanceDeployTypesShrink;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstances',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDataBackupsRequest {
  backupId?: string(name='BackupId'),
  backupMode?: string(name='BackupMode'),
  backupStatus?: string(name='BackupStatus'),
  DBInstanceId?: string(name='DBInstanceId'),
  dataType?: string(name='DataType'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeDataBackupsResponseBody = {
  items?: [ 
    {
      backupEndTime?: string(name='BackupEndTime'),
      backupEndTimeLocal?: string(name='BackupEndTimeLocal'),
      backupMode?: string(name='BackupMode'),
      backupSetId?: string(name='BackupSetId'),
      backupSize?: long(name='BackupSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupStartTimeLocal?: string(name='BackupStartTimeLocal'),
      backupStatus?: string(name='BackupStatus'),
      baksetName?: string(name='BaksetName'),
      consistentTime?: long(name='ConsistentTime'),
      DBInstanceId?: string(name='DBInstanceId'),
      dataType?: string(name='DataType'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataBackupsResponseBody(name='body'),
}

async function describeDataBackupsWithOptions(request: DescribeDataBackupsRequest, runtime: Util.RuntimeOptions): DescribeDataBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.backupMode)) {
    query['BackupMode'] = request.backupMode;
  }
  if (!Util.isUnset(request.backupStatus)) {
    query['BackupStatus'] = request.backupStatus;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataBackups',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataBackups(request: DescribeDataBackupsRequest): DescribeDataBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataBackupsWithOptions(request, runtime);
}

model DescribeDataShareInstancesRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  searchValue?: string(name='SearchValue'),
}

model DescribeDataShareInstancesResponseBody = {
  items?: {
    DBInstance?: [ 
    {
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceMode?: string(name='DBInstanceMode'),
      dataShareStatus?: string(name='DataShareStatus'),
      description?: string(name='Description'),
      regionId?: string(name='RegionId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstance')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeDataShareInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataShareInstancesResponseBody(name='body'),
}

async function describeDataShareInstancesWithOptions(request: DescribeDataShareInstancesRequest, runtime: Util.RuntimeOptions): DescribeDataShareInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataShareInstances',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataShareInstances(request: DescribeDataShareInstancesRequest): DescribeDataShareInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataShareInstancesWithOptions(request, runtime);
}

model DescribeDataSharePerformanceRequest {
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: string(name='StartTime'),
}

model DescribeDataSharePerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performanceKeys?: [ 
    {
      name?: string(name='Name'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDataSharePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDataSharePerformanceResponseBody(name='body'),
}

async function describeDataSharePerformanceWithOptions(request: DescribeDataSharePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDataSharePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataSharePerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDataSharePerformance(request: DescribeDataSharePerformanceRequest): DescribeDataSharePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataSharePerformanceWithOptions(request, runtime);
}

model DescribeDiagnosisDimensionsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  databases?: [ string ](name='Databases'),
  requestId?: string(name='RequestId'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

async function describeDiagnosisDimensionsWithOptions(request: DescribeDiagnosisDimensionsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisDimensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisDimensions',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisDimensionsWithOptions(request, runtime);
}

model DescribeDiagnosisMonitorPerformanceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  queryCondition?: string(name='QueryCondition'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeDiagnosisMonitorPerformanceResponseBody = {
  performances?: [ 
    {
      cost?: int32(name='Cost'),
      database?: string(name='Database'),
      queryID?: string(name='QueryID'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      user?: string(name='User'),
    }
  ](name='Performances'),
  performancesThreshold?: int32(name='PerformancesThreshold'),
  performancesTruncated?: boolean(name='PerformancesTruncated'),
  requestId?: string(name='RequestId'),
}

model DescribeDiagnosisMonitorPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisMonitorPerformanceResponseBody(name='body'),
}

async function describeDiagnosisMonitorPerformanceWithOptions(request: DescribeDiagnosisMonitorPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisMonitorPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisMonitorPerformance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisMonitorPerformance(request: DescribeDiagnosisMonitorPerformanceRequest): DescribeDiagnosisMonitorPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisMonitorPerformanceWithOptions(request, runtime);
}

model DescribeDiagnosisRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryCondition?: string(name='QueryCondition'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeDiagnosisRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database'),
      duration?: int32(name='Duration'),
      queryID?: string(name='QueryID'),
      SQLStmt?: string(name='SQLStmt'),
      SQLTruncated?: boolean(name='SQLTruncated'),
      SQLTruncatedThreshold?: int32(name='SQLTruncatedThreshold'),
      sessionID?: string(name='SessionID'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

async function describeDiagnosisRecordsWithOptions(request: DescribeDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisRecordsWithOptions(request, runtime);
}

model DescribeDiagnosisSQLInfoRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  queryID?: string(name='QueryID'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  database?: string(name='Database'),
  duration?: int32(name='Duration'),
  maxOutputRows?: string(name='MaxOutputRows'),
  queryID?: string(name='QueryID'),
  queryPlan?: string(name='QueryPlan'),
  requestId?: string(name='RequestId'),
  SQLStmt?: string(name='SQLStmt'),
  sessionID?: string(name='SessionID'),
  sortedMetrics?: string(name='SortedMetrics'),
  startTime?: long(name='StartTime'),
  status?: string(name='Status'),
  textPlan?: string(name='TextPlan'),
  user?: string(name='User'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

async function describeDiagnosisSQLInfoWithOptions(request: DescribeDiagnosisSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisSQLInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.queryID)) {
    query['QueryID'] = request.queryID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisSQLInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisSQLInfoWithOptions(request, runtime);
}

model DescribeDownloadRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId'),
      downloadUrl?: string(name='DownloadUrl'),
      exceptionMsg?: string(name='ExceptionMsg'),
      fileName?: string(name='FileName'),
      status?: string(name='Status'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

async function describeDownloadRecordsWithOptions(request: DescribeDownloadRecordsRequest, runtime: Util.RuntimeOptions): DescribeDownloadRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadRecordsWithOptions(request, runtime);
}

model DescribeHealthStatusRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  key?: string(name='Key'),
}

model DescribeHealthStatusResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  status?: {
    adbgpSegmentDiskUsagePercentMax?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbgp_segment_disk_usage_percent_max'),
    adbpgConnectionStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_connection_status'),
    adbpgDiskStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_disk_status'),
    adbpgDiskUsagePercent?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_disk_usage_percent'),
    adbpgMasterDiskUsagePercentMax?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_master_disk_usage_percent_max'),
    adbpgMasterStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_master_status'),
    adbpgSegmentStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_segment_status'),
    adbpgStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='adbpg_status'),
    nodeMasterConnectionStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='node_master_connection_status'),
    nodeMasterStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='node_master_status'),
    nodeSegmentConnectionStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='node_segment_connection_status'),
    nodeSegmentDiskStatus?: {
      status?: string(name='Status'),
      value?: float(name='Value'),
    }(name='node_segment_disk_status'),
  }(name='Status'),
}

model DescribeHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthStatusResponseBody(name='body'),
}

async function describeHealthStatusWithOptions(request: DescribeHealthStatusRequest, runtime: Util.RuntimeOptions): DescribeHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthStatus',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthStatus(request: DescribeHealthStatusRequest): DescribeHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthStatusWithOptions(request, runtime);
}

model DescribeLogBackupsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeLogBackupsResponseBody = {
  items?: [ 
    {
      backupId?: string(name='BackupId'),
      DBInstanceId?: string(name='DBInstanceId'),
      logFileName?: string(name='LogFileName'),
      logFileSize?: long(name='LogFileSize'),
      logTime?: string(name='LogTime'),
      segmentName?: string(name='SegmentName'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  totalLogSize?: long(name='TotalLogSize'),
}

model DescribeLogBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogBackupsResponseBody(name='body'),
}

async function describeLogBackupsWithOptions(request: DescribeLogBackupsRequest, runtime: Util.RuntimeOptions): DescribeLogBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogBackups',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogBackups(request: DescribeLogBackupsRequest): DescribeLogBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupsWithOptions(request, runtime);
}

model DescribeModifyParameterLogRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
}

model DescribeModifyParameterLogResponseBody = {
  changelogs?: [ 
    {
      effectTime?: string(name='EffectTime'),
      parameterName?: string(name='ParameterName'),
      parameterValid?: string(name='ParameterValid'),
      parameterValueAfter?: string(name='ParameterValueAfter'),
      parameterValueBefore?: string(name='ParameterValueBefore'),
    }
  ](name='Changelogs'),
  requestId?: string(name='RequestId'),
}

model DescribeModifyParameterLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModifyParameterLogResponseBody(name='body'),
}

async function describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: Util.RuntimeOptions): DescribeModifyParameterLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeModifyParameterLog',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModifyParameterLogWithOptions(request, runtime);
}

model DescribeParametersRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeParametersResponseBody = {
  parameters?: [ 
    {
      currentValue?: string(name='CurrentValue'),
      forceRestartInstance?: string(name='ForceRestartInstance'),
      isChangeableConfig?: string(name='IsChangeableConfig'),
      optionalRange?: string(name='OptionalRange'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  requestId?: string(name='RequestId'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameters',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeRdsVSwitchsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRdsVSwitchsResponseBody = {
  requestId?: string(name='RequestId'),
  vSwitches?: {
    vSwitch?: [ 
      {
        aliUid?: string(name='AliUid'),
        bid?: string(name='Bid'),
        cidrBlock?: string(name='CidrBlock'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        isDefault?: boolean(name='IsDefault'),
        izNo?: string(name='IzNo'),
        regionNo?: string(name='RegionNo'),
        status?: string(name='Status'),
        vSwitchId?: string(name='VSwitchId'),
        vSwitchName?: string(name='VSwitchName'),
      }
    ](name='VSwitch'),
  }(name='VSwitches'),
}

model DescribeRdsVSwitchsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsVSwitchsResponseBody(name='body'),
}

async function describeRdsVSwitchsWithOptions(request: DescribeRdsVSwitchsRequest, runtime: Util.RuntimeOptions): DescribeRdsVSwitchsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsVSwitchs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsVSwitchs(request: DescribeRdsVSwitchsRequest): DescribeRdsVSwitchsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVSwitchsWithOptions(request, runtime);
}

model DescribeRdsVpcsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRdsVpcsResponseBody = {
  requestId?: string(name='RequestId'),
  vpcs?: {
    vpc?: [ 
      {
        aliUid?: string(name='AliUid'),
        bid?: string(name='Bid'),
        cidrBlock?: string(name='CidrBlock'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        isDefault?: boolean(name='IsDefault'),
        regionNo?: string(name='RegionNo'),
        status?: string(name='Status'),
        vSwitchs?: [ 
          {
            cidrBlock?: string(name='CidrBlock'),
            gmtCreate?: string(name='GmtCreate'),
            gmtModified?: string(name='GmtModified'),
            isDefault?: boolean(name='IsDefault'),
            izNo?: string(name='IzNo'),
            status?: string(name='Status'),
            vSwitchId?: string(name='VSwitchId'),
            vSwitchName?: string(name='VSwitchName'),
          }
        ](name='VSwitchs'),
        vpcId?: string(name='VpcId'),
        vpcName?: string(name='VpcName'),
      }
    ](name='Vpc'),
  }(name='Vpcs'),
}

model DescribeRdsVpcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsVpcsResponseBody(name='body'),
}

async function describeRdsVpcsWithOptions(request: DescribeRdsVpcsRequest, runtime: Util.RuntimeOptions): DescribeRdsVpcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsVpcs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsVpcs(request: DescribeRdsVpcsRequest): DescribeRdsVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVpcsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  region?: string(name='Region'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeResourceUsageRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeResourceUsageResponseBody = {
  backupSize?: long(name='BackupSize'),
  DBInstanceId?: string(name='DBInstanceId'),
  dataSize?: long(name='DataSize'),
  diskUsed?: long(name='DiskUsed'),
  engine?: string(name='Engine'),
  logSize?: long(name='LogSize'),
  requestId?: string(name='RequestId'),
}

model DescribeResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceUsageResponseBody(name='body'),
}

async function describeResourceUsageWithOptions(request: DescribeResourceUsageRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceUsage',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageWithOptions(request, runtime);
}

model DescribeSQLCollectorPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus'),
}

model DescribeSQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLCollectorPolicyResponseBody(name='body'),
}

async function describeSQLCollectorPolicyWithOptions(request: DescribeSQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLCollectorPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): DescribeSQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorPolicyWithOptions(request, runtime);
}

model DescribeSQLLogByQueryIdRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  queryId?: string(name='QueryId'),
}

model DescribeSQLLogByQueryIdResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName'),
      DBName?: string(name='DBName'),
      DBRole?: string(name='DBRole'),
      executeCost?: float(name='ExecuteCost'),
      executeState?: string(name='ExecuteState'),
      operationClass?: string(name='OperationClass'),
      operationExecuteTime?: string(name='OperationExecuteTime'),
      operationType?: string(name='OperationType'),
      queryId?: string(name='QueryId'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLPlan?: string(name='SQLPlan'),
      SQLText?: string(name='SQLText'),
      scanRowCounts?: long(name='ScanRowCounts'),
      sliceIds?: [ string ](name='SliceIds'),
      sourceIP?: string(name='SourceIP'),
      sourcePort?: int32(name='SourcePort'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLLogByQueryIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogByQueryIdResponseBody(name='body'),
}

async function describeSQLLogByQueryIdWithOptions(request: DescribeSQLLogByQueryIdRequest, runtime: Util.RuntimeOptions): DescribeSQLLogByQueryIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogByQueryId',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogByQueryId(request: DescribeSQLLogByQueryIdRequest): DescribeSQLLogByQueryIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogByQueryIdWithOptions(request, runtime);
}

model DescribeSQLLogCountRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  executeCost?: string(name='ExecuteCost'),
  executeState?: string(name='ExecuteState'),
  maxExecuteCost?: string(name='MaxExecuteCost'),
  minExecuteCost?: string(name='MinExecuteCost'),
  operationClass?: string(name='OperationClass'),
  operationType?: string(name='OperationType'),
  queryKeywords?: string(name='QueryKeywords'),
  sourceIP?: string(name='SourceIP'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeSQLLogCountResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  items?: [ 
    {
      name?: string(name='Name'),
      series?: [ 
        {
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeSQLLogCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogCountResponseBody(name='body'),
}

async function describeSQLLogCountWithOptions(request: DescribeSQLLogCountRequest, runtime: Util.RuntimeOptions): DescribeSQLLogCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogCount',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogCount(request: DescribeSQLLogCountRequest): DescribeSQLLogCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogCountWithOptions(request, runtime);
}

model DescribeSQLLogFilesRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  fileName?: string(name='FileName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeSQLLogFilesResponseBody = {
  items?: {
    logFile?: [ 
    {
      fileID?: string(name='FileID'),
      logDownloadURL?: string(name='LogDownloadURL'),
      logEndTime?: string(name='LogEndTime'),
      logSize?: string(name='LogSize'),
      logStartTime?: string(name='LogStartTime'),
      logStatus?: string(name='LogStatus'),
    }
  ](name='LogFile')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeSQLLogFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogFilesResponseBody(name='body'),
}

async function describeSQLLogFilesWithOptions(request: DescribeSQLLogFilesRequest, runtime: Util.RuntimeOptions): DescribeSQLLogFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogFiles',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogFiles(request: DescribeSQLLogFilesRequest): DescribeSQLLogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogFilesWithOptions(request, runtime);
}

model DescribeSQLLogRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  form?: string(name='Form'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryKeywords?: string(name='QueryKeywords'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeSQLLogRecordsResponseBody = {
  items?: {
    SQLRecord?: [ 
    {
      accountName?: string(name='AccountName'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      hostAddress?: string(name='HostAddress'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLText?: string(name='SQLText'),
      threadID?: string(name='ThreadID'),
      totalExecutionTimes?: long(name='TotalExecutionTimes'),
    }
  ](name='SQLRecord')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeSQLLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogRecordsResponseBody(name='body'),
}

async function describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.form)) {
    query['Form'] = request.form;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogRecordsWithOptions(request, runtime);
}

model DescribeSQLLogsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  executeCost?: string(name='ExecuteCost'),
  executeState?: string(name='ExecuteState'),
  maxExecuteCost?: string(name='MaxExecuteCost'),
  minExecuteCost?: string(name='MinExecuteCost'),
  operationClass?: string(name='OperationClass'),
  operationType?: string(name='OperationType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryKeywords?: string(name='QueryKeywords'),
  sourceIP?: string(name='SourceIP'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeSQLLogsResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName'),
      DBName?: string(name='DBName'),
      DBRole?: string(name='DBRole'),
      executeCost?: float(name='ExecuteCost'),
      executeState?: string(name='ExecuteState'),
      operationClass?: string(name='OperationClass'),
      operationExecuteTime?: string(name='OperationExecuteTime'),
      operationType?: string(name='OperationType'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLPlan?: string(name='SQLPlan'),
      SQLText?: string(name='SQLText'),
      scanRowCounts?: long(name='ScanRowCounts'),
      sourceIP?: string(name='SourceIP'),
      sourcePort?: int32(name='SourcePort'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsResponseBody(name='body'),
}

async function describeSQLLogsWithOptions(request: DescribeSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogs(request: DescribeSQLLogsRequest): DescribeSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsWithOptions(request, runtime);
}

model DescribeSQLLogsOnSliceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  executeState?: string(name='ExecuteState'),
  maxExecuteCost?: string(name='MaxExecuteCost'),
  minExecuteCost?: string(name='MinExecuteCost'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryId?: string(name='QueryId'),
  sliceId?: string(name='SliceId'),
}

model DescribeSQLLogsOnSliceResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  sliceLogItems?: [ 
    {
      executeCost?: float(name='ExecuteCost'),
      executeStatus?: string(name='ExecuteStatus'),
      operationExecuteEndTime?: string(name='OperationExecuteEndTime'),
      operationExecuteTime?: string(name='OperationExecuteTime'),
      peakMemory?: float(name='PeakMemory'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      segmentId?: string(name='SegmentId'),
      segmentName?: string(name='SegmentName'),
    }
  ](name='SliceLogItems'),
}

model DescribeSQLLogsOnSliceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsOnSliceResponseBody(name='body'),
}

async function describeSQLLogsOnSliceWithOptions(request: DescribeSQLLogsOnSliceRequest, runtime: Util.RuntimeOptions): DescribeSQLLogsOnSliceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  if (!Util.isUnset(request.sliceId)) {
    query['SliceId'] = request.sliceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogsOnSlice',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogsOnSlice(request: DescribeSQLLogsOnSliceRequest): DescribeSQLLogsOnSliceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsOnSliceWithOptions(request, runtime);
}

model DescribeSQLLogsV2Request {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  executeCost?: string(name='ExecuteCost'),
  executeState?: string(name='ExecuteState'),
  maxExecuteCost?: string(name='MaxExecuteCost'),
  minExecuteCost?: string(name='MinExecuteCost'),
  operationClass?: string(name='OperationClass'),
  operationType?: string(name='OperationType'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  queryKeywords?: string(name='QueryKeywords'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIP?: string(name='SourceIP'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeSQLLogsV2ResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName'),
      DBName?: string(name='DBName'),
      DBRole?: string(name='DBRole'),
      executeCost?: float(name='ExecuteCost'),
      executeState?: string(name='ExecuteState'),
      operationClass?: string(name='OperationClass'),
      operationExecuteTime?: string(name='OperationExecuteTime'),
      operationType?: string(name='OperationType'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLText?: string(name='SQLText'),
      scanRowCounts?: long(name='ScanRowCounts'),
      sourceIP?: string(name='SourceIP'),
      sourcePort?: int32(name='SourcePort'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLLogsV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLLogsV2ResponseBody(name='body'),
}

async function describeSQLLogsV2WithOptions(request: DescribeSQLLogsV2Request, runtime: Util.RuntimeOptions): DescribeSQLLogsV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeCost)) {
    query['ExecuteCost'] = request.executeCost;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLLogsV2',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLLogsV2(request: DescribeSQLLogsV2Request): DescribeSQLLogsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsV2WithOptions(request, runtime);
}

model DescribeSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  hasSampleData?: boolean(name='HasSampleData'),
  requestId?: string(name='RequestId'),
}

model DescribeSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSampleDataResponseBody(name='body'),
}

async function describeSampleDataWithOptions(request: DescribeSampleDataRequest, runtime: Util.RuntimeOptions): DescribeSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSampleData(request: DescribeSampleDataRequest): DescribeSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSampleDataWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  SQLId?: long(name='SQLId'),
  startTime?: string(name='StartTime'),
}

model DescribeSlowLogRecordsResponseBody = {
  engine?: string(name='Engine'),
  items?: {
    SQLSlowRecord?: [ 
    {
      DBName?: string(name='DBName'),
      executionStartTime?: string(name='ExecutionStartTime'),
      hostAddress?: string(name='HostAddress'),
      lockTimes?: long(name='LockTimes'),
      parseRowCounts?: long(name='ParseRowCounts'),
      queryTimes?: long(name='QueryTimes'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLText?: string(name='SQLText'),
    }
  ](name='SQLSlowRecord')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SQLId)) {
    query['SQLId'] = request.SQLId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowLogRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeSlowSQLLogsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  executeState?: string(name='ExecuteState'),
  maxExecuteCost?: string(name='MaxExecuteCost'),
  minExecuteCost?: string(name='MinExecuteCost'),
  operationClass?: string(name='OperationClass'),
  operationType?: string(name='OperationType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryKeywords?: string(name='QueryKeywords'),
  sourceIP?: string(name='SourceIP'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeSlowSQLLogsResponseBody = {
  items?: [ 
    {
      accountName?: string(name='AccountName'),
      DBName?: string(name='DBName'),
      DBRole?: string(name='DBRole'),
      executeCost?: float(name='ExecuteCost'),
      executeState?: string(name='ExecuteState'),
      operationClass?: string(name='OperationClass'),
      operationExecuteTime?: string(name='OperationExecuteTime'),
      operationType?: string(name='OperationType'),
      queryId?: string(name='QueryId'),
      returnRowCounts?: long(name='ReturnRowCounts'),
      SQLPlan?: string(name='SQLPlan'),
      SQLText?: string(name='SQLText'),
      scanRowCounts?: long(name='ScanRowCounts'),
      sourceIP?: string(name='SourceIP'),
      sourcePort?: int32(name='SourcePort'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
}

model DescribeSlowSQLLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowSQLLogsResponseBody(name='body'),
}

async function describeSlowSQLLogsWithOptions(request: DescribeSlowSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeSlowSQLLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeState)) {
    query['ExecuteState'] = request.executeState;
  }
  if (!Util.isUnset(request.maxExecuteCost)) {
    query['MaxExecuteCost'] = request.maxExecuteCost;
  }
  if (!Util.isUnset(request.minExecuteCost)) {
    query['MinExecuteCost'] = request.minExecuteCost;
  }
  if (!Util.isUnset(request.operationClass)) {
    query['OperationClass'] = request.operationClass;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.sourceIP)) {
    query['SourceIP'] = request.sourceIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowSQLLogs',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlowSQLLogs(request: DescribeSlowSQLLogsRequest): DescribeSlowSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowSQLLogsWithOptions(request, runtime);
}

model DescribeSpecificationRequest {
  cpuCores?: int32(name='CpuCores'),
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  storageType?: string(name='StorageType'),
  totalNodeNum?: int32(name='TotalNodeNum'),
}

model DescribeSpecificationResponseBody = {
  DBInstanceClass?: [ 
    {
      text?: string(name='Text'),
      value?: string(name='Value'),
    }
  ](name='DBInstanceClass'),
  DBInstanceGroupCount?: [ 
    {
      text?: string(name='Text'),
      value?: string(name='Value'),
    }
  ](name='DBInstanceGroupCount'),
  requestId?: string(name='RequestId'),
  storageNotice?: [ 
    {
      text?: string(name='Text'),
      value?: string(name='Value'),
    }
  ](name='StorageNotice'),
}

model DescribeSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSpecificationResponseBody(name='body'),
}

async function describeSpecificationWithOptions(request: DescribeSpecificationRequest, runtime: Util.RuntimeOptions): DescribeSpecificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cpuCores)) {
    query['CpuCores'] = request.cpuCores;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.totalNodeNum)) {
    query['TotalNodeNum'] = request.totalNodeNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSpecification',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSpecification(request: DescribeSpecificationRequest): DescribeSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpecificationWithOptions(request, runtime);
}

model DescribeTagsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tags'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeUserEncryptionKeyListRequest {
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  kmsKeys?: [ 
    {
      keyId?: string(name='KeyId'),
    }
  ](name='KmsKeys'),
  requestId?: string(name='RequestId'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyListWithOptions(request: DescribeUserEncryptionKeyListRequest, runtime: Util.RuntimeOptions): DescribeUserEncryptionKeyListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserEncryptionKeyList',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserEncryptionKeyListWithOptions(request, runtime);
}

model DescribeWaitingSQLInfoRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  PID?: string(name='PID'),
}

model DescribeWaitingSQLInfoResponseBody = {
  database?: string(name='Database'),
  items?: [ 
    {
      application?: string(name='Application'),
      blockedByApplication?: string(name='BlockedByApplication'),
      blockedByPID?: string(name='BlockedByPID'),
      blockedBySQLStmt?: string(name='BlockedBySQLStmt'),
      blockedByUser?: string(name='BlockedByUser'),
      grantLocks?: string(name='GrantLocks'),
      notGrantLocks?: string(name='NotGrantLocks'),
      PID?: string(name='PID'),
      SQLStmt?: string(name='SQLStmt'),
      user?: string(name='User'),
    }
  ](name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeWaitingSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingSQLInfoResponseBody(name='body'),
}

async function describeWaitingSQLInfoWithOptions(request: DescribeWaitingSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeWaitingSQLInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.PID)) {
    query['PID'] = request.PID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingSQLInfo',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWaitingSQLInfo(request: DescribeWaitingSQLInfoRequest): DescribeWaitingSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingSQLInfoWithOptions(request, runtime);
}

model DescribeWaitingSQLRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryCondition?: string(name='QueryCondition'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DescribeWaitingSQLRecordsResponseBody = {
  items?: [ 
    {
      database?: string(name='Database'),
      PID?: string(name='PID'),
      SQLStmt?: string(name='SQLStmt'),
      sessionID?: string(name='SessionID'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      user?: string(name='User'),
      waitingTime?: long(name='WaitingTime'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWaitingSQLRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWaitingSQLRecordsResponseBody(name='body'),
}

async function describeWaitingSQLRecordsWithOptions(request: DescribeWaitingSQLRecordsRequest, runtime: Util.RuntimeOptions): DescribeWaitingSQLRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWaitingSQLRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWaitingSQLRecords(request: DescribeWaitingSQLRecordsRequest): DescribeWaitingSQLRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWaitingSQLRecordsWithOptions(request, runtime);
}

model DownloadDiagnosisRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  lang?: string(name='Lang'),
  queryCondition?: string(name='QueryCondition'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: string(name='StartTime'),
  user?: string(name='User'),
}

model DownloadDiagnosisRecordsResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  downloadId?: string(name='DownloadId'),
  requestId?: string(name='RequestId'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

async function downloadDiagnosisRecordsWithOptions(request: DownloadDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DownloadDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadDiagnosisRecords',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDiagnosisRecordsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
  DBInstanceId?: string(name='DBInstanceId'),
  enableRecoveryPoint?: boolean(name='EnableRecoveryPoint'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  recoveryPointPeriod?: string(name='RecoveryPointPeriod'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupRetentionPeriod)) {
    query['BackupRetentionPeriod'] = request.backupRetentionPeriod;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.enableRecoveryPoint)) {
    query['EnableRecoveryPoint'] = request.enableRecoveryPoint;
  }
  if (!Util.isUnset(request.preferredBackupPeriod)) {
    query['PreferredBackupPeriod'] = request.preferredBackupPeriod;
  }
  if (!Util.isUnset(request.preferredBackupTime)) {
    query['PreferredBackupTime'] = request.preferredBackupTime;
  }
  if (!Util.isUnset(request.recoveryPointPeriod)) {
    query['RecoveryPointPeriod'] = request.recoveryPointPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionModeRequest {
  connectionMode?: string(name='ConnectionMode'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model ModifyDBInstanceConnectionModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionModeResponseBody(name='body'),
}

async function modifyDBInstanceConnectionModeWithOptions(request: ModifyDBInstanceConnectionModeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionMode)) {
    query['ConnectionMode'] = request.connectionMode;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionMode',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): ModifyDBInstanceConnectionModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionModeWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  DBInstanceId?: string(name='DBInstanceId'),
  port?: string(name='Port'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionString',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  DBInstanceId?: string(name='DBInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceDescription',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  endTime?: string(name='EndTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: string(name='StartTime'),
}

model ModifyDBInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceMaintainTime',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkTypeRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
}

model ModifyDBInstanceNetworkTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceNetworkTypeResponseBody(name='body'),
}

async function modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceNetworkType',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkTypeWithOptions(request, runtime);
}

model ModifyDBInstanceResourceGroupRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDBInstanceResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceResourceGroupResponseBody(name='body'),
}

async function modifyDBInstanceResourceGroupWithOptions(request: ModifyDBInstanceResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceResourceGroup',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceResourceGroup(request: ModifyDBInstanceResourceGroupRequest): ModifyDBInstanceResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceResourceGroupWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest {
  connectionString?: string(name='ConnectionString'),
  DBInstanceId?: string(name='DBInstanceId'),
  SSLEnabled?: int32(name='SSLEnabled'),
}

model ModifyDBInstanceSSLResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceSSLResponseBody(name='body'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.SSLEnabled)) {
    query['SSLEnabled'] = request.SSLEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceSSL',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model ModifyParametersRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  forceRestartInstance?: boolean(name='ForceRestartInstance'),
  parameters?: string(name='Parameters'),
}

model ModifyParametersResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyParametersResponseBody(name='body'),
}

async function modifyParametersWithOptions(request: ModifyParametersRequest, runtime: Util.RuntimeOptions): ModifyParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.forceRestartInstance)) {
    query['ForceRestartInstance'] = request.forceRestartInstance;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyParameters',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParametersWithOptions(request, runtime);
}

model ModifySQLCollectorPolicyRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  SQLCollectorStatus?: string(name='SQLCollectorStatus'),
}

model ModifySQLCollectorPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySQLCollectorPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySQLCollectorPolicyResponseBody(name='body'),
}

async function modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.SQLCollectorStatus)) {
    query['SQLCollectorStatus'] = request.SQLCollectorStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySQLCollectorPolicy',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorPolicyWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName'),
  DBInstanceId?: string(name='DBInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityIPList?: string(name='SecurityIPList'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceIPArrayAttribute)) {
    query['DBInstanceIPArrayAttribute'] = request.DBInstanceIPArrayAttribute;
  }
  if (!Util.isUnset(request.DBInstanceIPArrayName)) {
    query['DBInstanceIPArrayName'] = request.DBInstanceIPArrayName;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIps',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model PauseInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model PauseInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model PauseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseInstanceResponseBody(name='body'),
}

async function pauseInstanceWithOptions(request: PauseInstanceRequest, runtime: Util.RuntimeOptions): PauseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseInstanceWithOptions(request, runtime);
}

model RebalanceDBInstanceRequest {
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model RebalanceDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebalanceDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebalanceDBInstanceResponseBody(name='body'),
}

async function rebalanceDBInstanceWithOptions(request: RebalanceDBInstanceRequest, runtime: Util.RuntimeOptions): RebalanceDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebalanceDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebalanceDBInstance(request: RebalanceDBInstanceRequest): RebalanceDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebalanceDBInstanceWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  addressType?: string(name='AddressType'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressType)) {
    query['AddressType'] = request.addressType;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model ResumeInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model SetDBInstancePlanStatusRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  planId?: string(name='PlanId'),
  planStatus?: string(name='PlanStatus'),
}

model SetDBInstancePlanStatusResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  planId?: string(name='PlanId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model SetDBInstancePlanStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDBInstancePlanStatusResponseBody(name='body'),
}

async function setDBInstancePlanStatusWithOptions(request: SetDBInstancePlanStatusRequest, runtime: Util.RuntimeOptions): SetDBInstancePlanStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planStatus)) {
    query['PlanStatus'] = request.planStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDBInstancePlanStatus',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDBInstancePlanStatus(request: SetDBInstancePlanStatusRequest): SetDBInstancePlanStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDBInstancePlanStatusWithOptions(request, runtime);
}

model SetDataShareInstanceRequest {
  instanceList?: [ string ](name='InstanceList'),
  operationType?: string(name='OperationType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model SetDataShareInstanceShrinkRequest {
  instanceListShrink?: string(name='InstanceList'),
  operationType?: string(name='OperationType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
}

model SetDataShareInstanceResponseBody = {
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model SetDataShareInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDataShareInstanceResponseBody(name='body'),
}

async function setDataShareInstanceWithOptions(tmpReq: SetDataShareInstanceRequest, runtime: Util.RuntimeOptions): SetDataShareInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new SetDataShareInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceList)) {
    request.instanceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceList, 'InstanceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceListShrink)) {
    query['InstanceList'] = request.instanceListShrink;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataShareInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDataShareInstance(request: SetDataShareInstanceRequest): SetDataShareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataShareInstanceWithOptions(request, runtime);
}

model SwitchDBInstanceNetTypeRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  DBInstanceId?: string(name='DBInstanceId'),
  port?: string(name='Port'),
}

model SwitchDBInstanceNetTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchDBInstanceNetTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchDBInstanceNetTypeResponseBody(name='body'),
}

async function switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceNetTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchDBInstanceNetType',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceNetTypeWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnloadSampleDataRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
}

model UnloadSampleDataResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model UnloadSampleDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnloadSampleDataResponseBody(name='body'),
}

async function unloadSampleDataWithOptions(request: UnloadSampleDataRequest, runtime: Util.RuntimeOptions): UnloadSampleDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnloadSampleData',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unloadSampleData(request: UnloadSampleDataRequest): UnloadSampleDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return unloadSampleDataWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateDBInstancePlanRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  planConfig?: string(name='PlanConfig'),
  planDesc?: string(name='PlanDesc'),
  planEndDate?: string(name='PlanEndDate'),
  planId?: string(name='PlanId'),
  planName?: string(name='PlanName'),
  planStartDate?: string(name='PlanStartDate'),
}

model UpdateDBInstancePlanResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  planId?: string(name='PlanId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model UpdateDBInstancePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDBInstancePlanResponseBody(name='body'),
}

async function updateDBInstancePlanWithOptions(request: UpdateDBInstancePlanRequest, runtime: Util.RuntimeOptions): UpdateDBInstancePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.planConfig)) {
    query['PlanConfig'] = request.planConfig;
  }
  if (!Util.isUnset(request.planDesc)) {
    query['PlanDesc'] = request.planDesc;
  }
  if (!Util.isUnset(request.planEndDate)) {
    query['PlanEndDate'] = request.planEndDate;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planStartDate)) {
    query['PlanStartDate'] = request.planStartDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDBInstancePlan',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDBInstancePlan(request: UpdateDBInstancePlanRequest): UpdateDBInstancePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDBInstancePlanWithOptions(request, runtime);
}

model UpgradeDBInstanceRequest {
  DBInstanceClass?: string(name='DBInstanceClass'),
  DBInstanceGroupCount?: string(name='DBInstanceGroupCount'),
  DBInstanceId?: string(name='DBInstanceId'),
  instanceSpec?: string(name='InstanceSpec'),
  masterNodeNum?: string(name='MasterNodeNum'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  segNodeNum?: string(name='SegNodeNum'),
  storageSize?: string(name='StorageSize'),
  upgradeType?: long(name='UpgradeType'),
}

model UpgradeDBInstanceResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceResponseBody(name='body'),
}

async function upgradeDBInstanceWithOptions(request: UpgradeDBInstanceRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceGroupCount)) {
    query['DBInstanceGroupCount'] = request.DBInstanceGroupCount;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.masterNodeNum)) {
    query['MasterNodeNum'] = request.masterNodeNum;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.segNodeNum)) {
    query['SegNodeNum'] = request.segNodeNum;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.upgradeType)) {
    query['UpgradeType'] = request.upgradeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBInstance',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBInstance(request: UpgradeDBInstanceRequest): UpgradeDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceWithOptions(request, runtime);
}

model UpgradeDBVersionRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  majorVersion?: string(name='MajorVersion'),
  minorVersion?: string(name='MinorVersion'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  switchTime?: string(name='SwitchTime'),
  switchTimeMode?: string(name='SwitchTimeMode'),
}

model UpgradeDBVersionResponseBody = {
  DBInstanceId?: string(name='DBInstanceId'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model UpgradeDBVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBVersionResponseBody(name='body'),
}

async function upgradeDBVersionWithOptions(request: UpgradeDBVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.majorVersion)) {
    query['MajorVersion'] = request.majorVersion;
  }
  if (!Util.isUnset(request.minorVersion)) {
    query['MinorVersion'] = request.minorVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBVersion',
    version = '2016-05-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBVersion(request: UpgradeDBVersionRequest): UpgradeDBVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBVersionWithOptions(request, runtime);
}

