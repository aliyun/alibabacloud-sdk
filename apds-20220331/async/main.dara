/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'apds';
  @version = '2022-03-31';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateMigrationGroupRequest {
  description?: string(name='description', position='Body'),
  extra?: string(name='extra', position='Body'),
  id?: int32(name='id', position='Body'),
  name?: string(name='name', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model CreateMigrationGroupResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model CreateMigrationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMigrationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMigrationGroup  CreateMigrationGroupRequest
  * @return CreateMigrationGroupResponse
 */
async function createMigrationGroup(request: CreateMigrationGroupRequest): CreateMigrationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMigrationGroup', 'POST', '/okss-services/migration-group/save-migration-group', 'json', false, 'json', request);
}

model CreateMigrationJobRequest {
  migrationJobList?: [ 
    {
      destination: string(name='destination', description='This parameter is required.'),
      destinationIp?: string(name='destinationIp'),
      destinationRegion?: string(name='destinationRegion'),
      jobGmtCreate?: string(name='jobGmtCreate'),
      jobGmtModified?: string(name='jobGmtModified'),
      name: string(name='name', description='This parameter is required.'),
      originalPercent?: string(name='originalPercent'),
      originalProgress?: string(name='originalProgress'),
      originalStatus: string(name='originalStatus', description='This parameter is required.'),
      outSideId: string(name='outSideId', description='This parameter is required.'),
      properties?: string(name='properties'),
      source: string(name='source', description='This parameter is required.'),
      sourceIp?: string(name='sourceIp'),
    }
  ](name='migrationJobList', position='Body'),
  type: string(name='type', description='This parameter is required.', position='Body'),
}

model CreateMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model CreateMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMigrationJob  CreateMigrationJobRequest
  * @return CreateMigrationJobResponse
 */
async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMigrationJob', 'POST', '/okss-services/migration-job/create-migration-jobs', 'json', false, 'json', request);
}

model CreatePayOrderCallbackRequest {
  data?: string(name='data', position='Query'),
}

model CreatePayOrderCallbackResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObj?: any(name='ResultObj'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model CreatePayOrderCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePayOrderCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePayOrderCallback  CreatePayOrderCallbackRequest
  * @return CreatePayOrderCallbackResponse
 */
async function createPayOrderCallback(request: CreatePayOrderCallbackRequest): CreatePayOrderCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePayOrderCallback', 'POST', '/sys/user/pop/api/v1/payOrderCallback', 'json', false, 'json', request);
}

model CreateRefundRequest {
  data?: string(name='data', position='Query'),
}

model CreateRefundResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model CreateRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRefundResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRefund  CreateRefundRequest
  * @return CreateRefundResponse
 */
async function createRefund(request: CreateRefundRequest): CreateRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRefund', 'POST', '/sys/user/pop/api/v1/refund', 'json', false, 'json', request);
}

model CreateSurveyJobRequest {
  ak?: string(name='ak', position='Body'),
  autoConfirm?: boolean(name='autoConfirm', position='Body'),
  channel?: string(name='channel', position='Body'),
  cloudType?: string(name='cloudType', position='Body'),
  name?: string(name='name', position='Body'),
  ossObjectName?: string(name='ossObjectName', position='Body'),
  projectId?: string(name='projectId', position='Body'),
  region?: [ string ](name='region', position='Body'),
  resourceTypeList?: [ string ](name='resourceTypeList', position='Body'),
  sk?: string(name='sk', position='Body'),
  tenantId?: string(name='tenantId', position='Body'),
  zone?: [ string ](name='zone', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model CreateSurveyJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model CreateSurveyJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSurveyJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSurveyJob  CreateSurveyJobRequest
  * @return CreateSurveyJobResponse
 */
async function createSurveyJob(request: CreateSurveyJobRequest): CreateSurveyJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSurveyJob', 'POST', '/okss-services/winback/add-survey-job', 'json', false, 'json', request);
}

model CreateSurveyJobOfflineRequest {
  autoConfirm?: boolean(name='autoConfirm', position='Body'),
  channel?: string(name='channel', position='Body'),
  cloudType?: string(name='cloudType', position='Body'),
  fileName?: string(name='fileName', position='Body'),
  name?: string(name='name', position='Body'),
  objectName?: string(name='objectName', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model CreateSurveyJobOfflineResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model CreateSurveyJobOfflineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSurveyJobOfflineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSurveyJobOffline  CreateSurveyJobOfflineRequest
  * @return CreateSurveyJobOfflineResponse
 */
async function createSurveyJobOffline(request: CreateSurveyJobOfflineRequest): CreateSurveyJobOfflineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSurveyJobOffline', 'POST', '/okss-services/winback/add-import-survey-job', 'json', false, 'json', request);
}

model DeleteMigrationJobRequest {
  id?: long(name='id', position='Query'),
}

model DeleteMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DeleteMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMigrationJob  DeleteMigrationJobRequest
  * @return DeleteMigrationJobResponse
 */
async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMigrationJob', 'POST', '/okss-services/migration-job/remove-migration-job', 'json', false, 'json', request);
}

model DeleteOssFileRequest {
  objectName?: string(name='objectName', position='Query'),
  regionId?: string(name='regionId', position='Query'),
}

model DeleteOssFileResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DeleteOssFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOssFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOssFile  DeleteOssFileRequest
  * @return DeleteOssFileResponse
 */
async function deleteOssFile(request: DeleteOssFileRequest): DeleteOssFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOssFile', 'POST', '/okss-services/file-job/delete-file', 'json', false, 'json', request);
}

model DeleteSurveyJobRequest {
  id?: long(name='id', position='Query'),
}

model DeleteSurveyJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DeleteSurveyJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSurveyJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSurveyJob  DeleteSurveyJobRequest
  * @return DeleteSurveyJobResponse
 */
async function deleteSurveyJob(request: DeleteSurveyJobRequest): DeleteSurveyJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSurveyJob', 'POST', '/okss-services/winback/delete-survey-job', 'json', false, 'json', request);
}

model DeleteSurveyResourcesRequest {
  ids: string(name='ids', description='This parameter is required.', position='Query'),
}

model DeleteSurveyResourcesResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DeleteSurveyResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSurveyResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSurveyResources  DeleteSurveyResourcesRequest
  * @return DeleteSurveyResourcesResponse
 */
async function deleteSurveyResources(request: DeleteSurveyResourcesRequest): DeleteSurveyResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSurveyResources', 'POST', '/okss-services/confirm-resource/destroy', 'json', false, 'json', request);
}

model DescribeMigrationJobConfigRequest {
}

model DescribeMigrationJobConfigResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeMigrationJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMigrationJobConfig  DescribeMigrationJobConfigRequest
  * @return DescribeMigrationJobConfigResponse
 */
async function describeMigrationJobConfig(request: DescribeMigrationJobConfigRequest): DescribeMigrationJobConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeMigrationJobConfig', 'POST', '/okss-services/migration-job/describe-migration-job-config', 'json', false, 'json', request);
}

model DescribeMigrationJobCountRequest {
  batchTaskGroupId?: long(name='batchTaskGroupId', position='Body'),
  cutoverPlanId?: string(name='cutoverPlanId', position='Body'),
  name?: string(name='name', position='Body'),
  outSideId?: string(name='outSideId', position='Body'),
  source?: string(name='source', position='Body'),
  surveyResourceId?: long(name='surveyResourceId', position='Body'),
  tagList?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tagList', position='Body'),
  type?: string(name='type', position='Body'),
  typeList?: [ string ](name='typeList', position='Body'),
  usedType?: string(name='usedType', position='Body'),
}

model DescribeMigrationJobCountResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeMigrationJobCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMigrationJobCount  DescribeMigrationJobCountRequest
  * @return DescribeMigrationJobCountResponse
 */
async function describeMigrationJobCount(request: DescribeMigrationJobCountRequest): DescribeMigrationJobCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeMigrationJobCount', 'POST', '/okss-services/migration-job/count-migration-jobs', 'json', false, 'json', request);
}

model DescribeOssStsRequest {
  ak?: string(name='ak', position='Query'),
  cloudType?: string(name='cloudType', position='Query'),
  region?: string(name='region', position='Query'),
  regionId?: string(name='regionId', position='Query'),
  sk?: string(name='sk', position='Query'),
  tenantId?: string(name='tenantId', position='Query'),
}

model DescribeOssStsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeOssStsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssStsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOssSts  DescribeOssStsRequest
  * @return DescribeOssStsResponse
 */
async function describeOssSts(request: DescribeOssStsRequest): DescribeOssStsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeOssSts', 'POST', '/okss-services/file-job/sts', 'json', false, 'json', request);
}

model DescribeSummaryByStatusRequest {
  regionId?: string(name='regionId', position='Query'),
}

model DescribeSummaryByStatusResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DescribeSummaryByStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSummaryByStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSummaryByStatus  DescribeSummaryByStatusRequest
  * @return DescribeSummaryByStatusResponse
 */
async function describeSummaryByStatus(request: DescribeSummaryByStatusRequest): DescribeSummaryByStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSummaryByStatus', 'POST', '/okss-services/summary/summary-by-status', 'json', false, 'json', request);
}

model DescribeSummaryByStatusAndGroupRequest {
  regionId?: string(name='regionId', position='Query'),
}

model DescribeSummaryByStatusAndGroupResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DescribeSummaryByStatusAndGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSummaryByStatusAndGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSummaryByStatusAndGroup  DescribeSummaryByStatusAndGroupRequest
  * @return DescribeSummaryByStatusAndGroupResponse
 */
async function describeSummaryByStatusAndGroup(request: DescribeSummaryByStatusAndGroupRequest): DescribeSummaryByStatusAndGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSummaryByStatusAndGroup', 'POST', '/okss-services/summary/summary-by-status-and-region', 'json', false, 'json', request);
}

model DescribeSurveyJobRequest {
  id?: long(name='id', position='Query'),
  regionId?: string(name='regionId', position='Query'),
}

model DescribeSurveyJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeSurveyJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSurveyJob  DescribeSurveyJobRequest
  * @return DescribeSurveyJobResponse
 */
async function describeSurveyJob(request: DescribeSurveyJobRequest): DescribeSurveyJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSurveyJob', 'POST', '/okss-services/winback/query-survey-job', 'json', false, 'json', request);
}

model DescribeSurveyJobCountRequest {
  channelList?: [ string ](name='channelList', position='Body'),
  cloudTypeList?: [ string ](name='cloudTypeList', position='Body'),
  name?: string(name='name', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model DescribeSurveyJobCountResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeSurveyJobCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyJobCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSurveyJobCount  DescribeSurveyJobCountRequest
  * @return DescribeSurveyJobCountResponse
 */
async function describeSurveyJobCount(request: DescribeSurveyJobCountRequest): DescribeSurveyJobCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSurveyJobCount', 'POST', '/okss-services/winback/count-survey-job', 'json', false, 'json', request);
}

model DescribeSurveyResourceTagRequest {
  scene?: string(name='scene', position='Body'),
  sourceUserIdList?: [ long ](name='sourceUserIdList', position='Body'),
}

model DescribeSurveyResourceTagResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DescribeSurveyResourceTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyResourceTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSurveyResourceTag  DescribeSurveyResourceTagRequest
  * @return DescribeSurveyResourceTagResponse
 */
async function describeSurveyResourceTag(request: DescribeSurveyResourceTagRequest): DescribeSurveyResourceTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSurveyResourceTag', 'POST', '/okss-services/confirm-resource/get-resource-tag', 'json', false, 'json', request);
}

model DescribeSurveyTemplateRequest {
  resourceType?: string(name='resourceType', position='Query'),
}

model DescribeSurveyTemplateResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeSurveyTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSurveyTemplate  DescribeSurveyTemplateRequest
  * @return DescribeSurveyTemplateResponse
 */
async function describeSurveyTemplate(request: DescribeSurveyTemplateRequest): DescribeSurveyTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSurveyTemplate', 'POST', '/okss-services/survey-template/list', 'json', false, 'json', request);
}

model GetTableMetaInfoRequest {
  sourceDialect?: string(name='sourceDialect', position='Body'),
  sourceSqlScript?: string(name='sourceSqlScript', position='Body'),
  targetDialect?: string(name='targetDialect', position='Body'),
}

model GetTableMetaInfoResponseBody = {
  data?: [ string ](name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetTableMetaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableMetaInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableMetaInfo  GetTableMetaInfoRequest
  * @return GetTableMetaInfoResponse
 */
async function getTableMetaInfo(request: GetTableMetaInfoRequest): GetTableMetaInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableMetaInfo', 'POST', '/api/bigdata/sql-translator/open/single/get-table-info', 'json', false, 'json', request);
}

model GetTaskDetailRequest {
  taskId: long(name='taskId', description='This parameter is required.', position='Query'),
}

model GetTaskDetailResponseBody = {
  data?: {
    ddlFilename?: string(name='ddlFilename'),
    ddlRelateType?: int32(name='ddlRelateType'),
    dqlAssociationDDLTaskList?: [ 
      {
        ddlTaskId?: long(name='ddlTaskId'),
        ddlTaskName?: string(name='ddlTaskName'),
        dqlTaskId?: long(name='dqlTaskId'),
        gmtCreate?: string(name='gmtCreate'),
        gmtModified?: string(name='gmtModified'),
        id?: long(name='id'),
        tenantId?: string(name='tenantId'),
        uid?: string(name='uid'),
      }
    ](name='dqlAssociationDDLTaskList'),
    dqlFilename?: string(name='dqlFilename'),
    dqlRelateDdlMessage?: string(name='dqlRelateDdlMessage'),
    dqlRelateTargetDatasourceId?: string(name='dqlRelateTargetDatasourceId'),
    dqlRelateTargetDatasourceName?: string(name='dqlRelateTargetDatasourceName'),
    dqlTestDatasourceId?: string(name='dqlTestDatasourceId'),
    dqlTestDatasourceName?: string(name='dqlTestDatasourceName'),
    dqlTestProject?: string(name='dqlTestProject'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    id?: long(name='id'),
    lastImportTime?: string(name='lastImportTime'),
    scriptTransformStatus?: string(name='scriptTransformStatus'),
    sourceDatasourceId?: string(name='sourceDatasourceId'),
    sourceDatasourceName?: string(name='sourceDatasourceName'),
    sourceDialect?: string(name='sourceDialect'),
    sourceProject?: string(name='sourceProject'),
    syntaxErrorCount?: int32(name='syntaxErrorCount'),
    syntaxPassCount?: int32(name='syntaxPassCount'),
    syntaxValidationStatus?: string(name='syntaxValidationStatus'),
    targetDatasourceId?: string(name='targetDatasourceId'),
    targetDatasourceName?: string(name='targetDatasourceName'),
    targetDialect?: string(name='targetDialect'),
    targetProject?: string(name='targetProject'),
    taskDescription?: string(name='taskDescription'),
    taskName?: string(name='taskName'),
    taskType?: int32(name='taskType'),
    tenantId?: string(name='tenantId'),
    totalCount?: int32(name='totalCount'),
    transformFailureCount?: int32(name='transformFailureCount'),
    transformSchema?: string(name='transformSchema'),
    transformSuccessCount?: int32(name='transformSuccessCount'),
    uid?: string(name='uid'),
    uploadedScriptUrl?: string(name='uploadedScriptUrl'),
    zipParsingState?: string(name='zipParsingState'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model GetTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskDetail  GetTaskDetailRequest
  * @return GetTaskDetailResponse
 */
async function getTaskDetail(request: GetTaskDetailRequest): GetTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskDetail', 'GET', '/api/bigdata/jobMigrate/sqlTranslator/task/detail', 'json', false, 'json', request);
}

model ListAppDownloadHistoryRequest {
  bizModuleCode?: string(name='biz-module-code', position='Header'),
  appId?: string(name='appId', position='Body'),
  platform?: string(name='platform', position='Body'),
  startDate?: string(name='startDate', position='Body'),
  tenantUid?: string(name='tenantUid', position='Body'),
  tenantProxyUid?: string(name='tenant-proxy-uid', position='Header'),
}

model ListAppDownloadHistoryResponseBody = {
  data?: any(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
  code?: string(name='code'),
  requestId?: string(name='requestId'),
}

model ListAppDownloadHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppDownloadHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppDownloadHistory  ListAppDownloadHistoryRequest
  * @return ListAppDownloadHistoryResponse
 */
async function listAppDownloadHistory(request: ListAppDownloadHistoryRequest): ListAppDownloadHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAppDownloadHistory', 'POST', '/abm/app/manager/api/v1/fetchAppDownloadHistory', 'json', false, 'json', request);
}

model ListMigrationJobsRequest {
  batchTaskGroupId?: long(name='batchTaskGroupId', position='Body'),
  cutoverPlanId?: string(name='cutoverPlanId', position='Body'),
  name?: string(name='name', position='Body'),
  outSideId?: string(name='outSideId', position='Body'),
  pageNum?: int32(name='pageNum', position='Body'),
  pageSize?: int32(name='pageSize', position='Body'),
  sortCol?: string(name='sortCol', position='Body'),
  sortType?: string(name='sortType', position='Body'),
  source?: string(name='source', position='Body'),
  surveyResourceId?: long(name='surveyResourceId', position='Body'),
  tagList?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tagList', position='Body'),
  type?: string(name='type', position='Body'),
  typeList?: [ string ](name='typeList', position='Body'),
  usedType?: string(name='usedType', position='Body'),
}

model ListMigrationJobsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListMigrationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMigrationJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMigrationJobs  ListMigrationJobsRequest
  * @return ListMigrationJobsResponse
 */
async function listMigrationJobs(request: ListMigrationJobsRequest): ListMigrationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMigrationJobs', 'POST', '/okss-services/migration-job/describe-migration-jobs', 'json', false, 'json', request);
}

model ListSurveyJobDownLoadJobsRequest {
  pageNum?: int32(name='pageNum', position='Body'),
  pageSize?: int32(name='pageSize', position='Body'),
  sortCol?: string(name='sortCol', position='Body'),
  sortType?: string(name='sortType', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model ListSurveyJobDownLoadJobsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyJobDownLoadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyJobDownLoadJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSurveyJobDownLoadJobs  ListSurveyJobDownLoadJobsRequest
  * @return ListSurveyJobDownLoadJobsResponse
 */
async function listSurveyJobDownLoadJobs(request: ListSurveyJobDownLoadJobsRequest): ListSurveyJobDownLoadJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSurveyJobDownLoadJobs', 'POST', '/okss-services/file-job/list', 'json', false, 'json', request);
}

model ListSurveyJobsRequest {
  channelList?: [ string ](name='channelList', position='Body'),
  cloudTypeList?: [ string ](name='cloudTypeList', position='Body'),
  name?: string(name='name', position='Body'),
  pageNum?: int32(name='pageNum', position='Body'),
  pageSize?: int32(name='pageSize', position='Body'),
  region?: [ string ](name='region', position='Body'),
  surveyRange?: string(name='surveyRange', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model ListSurveyJobsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSurveyJobs  ListSurveyJobsRequest
  * @return ListSurveyJobsResponse
 */
async function listSurveyJobs(request: ListSurveyJobsRequest): ListSurveyJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSurveyJobs', 'POST', '/okss-services/winback/query-survey-jobs', 'json', false, 'json', request);
}

model ListSurveyResourceByMigrationGroupsRequest {
  body?: {
    ids?: [ int32 ](name='ids'),
  }(name='body', shrink='json', position='Query'),
}

model ListSurveyResourceByMigrationGroupsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model ListSurveyResourceByMigrationGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourceByMigrationGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSurveyResourceByMigrationGroups  ListSurveyResourceByMigrationGroupsRequest
  * @return ListSurveyResourceByMigrationGroupsResponse
 */
async function listSurveyResourceByMigrationGroups(request: ListSurveyResourceByMigrationGroupsRequest): ListSurveyResourceByMigrationGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSurveyResourceByMigrationGroups', 'POST', '/okss-services/migration-group/get-survey-resource', 'json', false, 'json', request);
}

model ListSurveyResourceConnectionsRequest {
  ids?: [ int32 ](name='ids', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model ListSurveyResourceConnectionsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model ListSurveyResourceConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourceConnectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSurveyResourceConnections  ListSurveyResourceConnectionsRequest
  * @return ListSurveyResourceConnectionsResponse
 */
async function listSurveyResourceConnections(request: ListSurveyResourceConnectionsRequest): ListSurveyResourceConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSurveyResourceConnections', 'POST', '/okss-services/resource-connects', 'json', false, 'json', request);
}

model ListSurveyResourceTypesRequest {
  ak?: string(name='ak', position='Query'),
  cloudType?: string(name='cloudType', position='Query'),
  region?: string(name='region', position='Query'),
  regionId?: string(name='regionId', position='Query'),
  sk?: string(name='sk', position='Query'),
}

model ListSurveyResourceTypesResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourceTypesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSurveyResourceTypes  ListSurveyResourceTypesRequest
  * @return ListSurveyResourceTypesResponse
 */
async function listSurveyResourceTypes(request: ListSurveyResourceTypesRequest): ListSurveyResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSurveyResourceTypes', 'POST', '/okss-services/winback/query-resource-type', 'json', false, 'json', request);
}

model ListSurveyResourcesDetailRequest {
  ip?: string(name='ip', position='Body'),
  jobId?: long(name='jobId', position='Body'),
  projectId?: long(name='projectId', position='Body'),
  resourceType?: string(name='resourceType', position='Body'),
  subProjectId?: long(name='subProjectId', position='Body'),
  regionId?: string(name='regionId', position='Query'),
}

model ListSurveyResourcesDetailResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyResourcesDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourcesDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSurveyResourcesDetail  ListSurveyResourcesDetailRequest
  * @return ListSurveyResourcesDetailResponse
 */
async function listSurveyResourcesDetail(request: ListSurveyResourcesDetailRequest): ListSurveyResourcesDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSurveyResourcesDetail', 'POST', '/okss-services/survey-detail/query', 'json', false, 'json', request);
}

model PopCreateTaskRequest {
  dataTypeMappingFile?: any(name='dataTypeMappingFile', position='Body'),
  dataTypeOssFileName?: string(name='dataTypeOssFileName', position='Body'),
  dataTypeOssObjectName?: string(name='dataTypeOssObjectName', position='Body'),
  dataTypeRealFileName?: string(name='dataTypeRealFileName', position='Body'),
  dqlAssociationDDLTaskList?: string(name='dqlAssociationDDLTaskList', position='Body'),
  dqlRelateTargetDatasourceId?: string(name='dqlRelateTargetDatasourceId', position='Body'),
  dqlTestDatasourceId?: string(name='dqlTestDatasourceId', position='Body'),
  dqlTestProject?: string(name='dqlTestProject', position='Body'),
  fileName?: string(name='fileName', position='Body'),
  globalParams?: string(name='globalParams', position='Body'),
  identifier?: string(name='identifier', position='Body'),
  ossObjectName?: string(name='ossObjectName', position='Body'),
  realFileName?: string(name='realFileName', position='Body'),
  relatedDdlContentOssFileName?: string(name='relatedDdlContentOssFileName', position='Body'),
  relatedDdlContentOssObjectName?: string(name='relatedDdlContentOssObjectName', position='Body'),
  relatedDdlContentRealFileName?: string(name='relatedDdlContentRealFileName', position='Body'),
  sourceDatasourceId?: string(name='sourceDatasourceId', position='Body'),
  sourceDialect: string(name='sourceDialect', description='This parameter is required.', position='Body'),
  sourceProject?: string(name='sourceProject', position='Body'),
  tableNameMappingFile?: any(name='tableNameMappingFile', position='Body'),
  tableNameOssFileName?: string(name='tableNameOssFileName', position='Body'),
  tableNameOssObjectName?: string(name='tableNameOssObjectName', position='Body'),
  tableNameRealFileName?: string(name='tableNameRealFileName', position='Body'),
  targetDatasourceId?: string(name='targetDatasourceId', position='Body'),
  targetDialect: string(name='targetDialect', description='This parameter is required.', position='Body'),
  targetProject?: string(name='targetProject', position='Body'),
  taskDescription?: string(name='taskDescription', position='Body'),
  taskName: string(name='taskName', description='This parameter is required.', position='Body'),
  taskType: int32(name='taskType', description='This parameter is required.', position='Body'),
  tenantId?: string(name='tenantId', position='Body'),
  transformSchema?: string(name='transformSchema', position='Body'),
  uid?: string(name='uid', position='Body'),
}

model PopCreateTaskResponseBody = {
  data?: long(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model PopCreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PopCreateTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PopCreateTask  PopCreateTaskRequest
  * @return PopCreateTaskResponse
 */
async function popCreateTask(request: PopCreateTaskRequest): PopCreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PopCreateTask', 'POST', '/api/bigdata/jobMigrate/sqlTranslator/task/popAdd', 'json', false, 'json', request);
}

model PopDownloadTemplateRequest {
  targetDialect?: string(name='targetDialect', position='Query'),
  taskId?: long(name='taskId', position='Query'),
}

model PopDownloadTemplateResponseBody = {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model PopDownloadTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PopDownloadTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PopDownloadTemplate  PopDownloadTemplateRequest
  * @return PopDownloadTemplateResponse
 */
async function popDownloadTemplate(request: PopDownloadTemplateRequest): PopDownloadTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PopDownloadTemplate', 'GET', '/api/bigdata/jobMigrate/sqlTranslator/task/popDownload/TableNameMappingTemplate', 'json', false, 'json', request);
}

model PopEditTaskRequest {
  configuration?: {
    dataTypeMappingFile?: any(name='dataTypeMappingFile'),
    dataTypeOssFileName?: string(name='dataTypeOssFileName'),
    dataTypeOssObjectName?: string(name='dataTypeOssObjectName'),
    dataTypeRealFileName?: string(name='dataTypeRealFileName'),
    globalParams?: string(name='globalParams'),
    tableNameMappingFile?: any(name='tableNameMappingFile'),
    tableNameOssFileName?: string(name='tableNameOssFileName'),
    tableNameOssObjectName?: string(name='tableNameOssObjectName'),
    tableNameRealFileName?: string(name='tableNameRealFileName'),
    taskId?: long(name='taskId'),
    tenantId?: string(name='tenantId'),
    uid?: string(name='uid'),
  }(name='configuration', position='Body'),
  dataTypeMappingFile?: any(name='dataTypeMappingFile', position='Body'),
  dataTypeOssFileName?: string(name='dataTypeOssFileName', position='Body'),
  dataTypeOssObjectName?: string(name='dataTypeOssObjectName', position='Body'),
  dataTypeRealFileName?: string(name='dataTypeRealFileName', position='Body'),
  dqlAssociationDDLTaskList?: string(name='dqlAssociationDDLTaskList', position='Body'),
  dqlRelateTargetDatasourceId?: string(name='dqlRelateTargetDatasourceId', position='Body'),
  dqlTestDatasourceId?: string(name='dqlTestDatasourceId', position='Body'),
  dqlTestProject?: string(name='dqlTestProject', position='Body'),
  fileName?: string(name='fileName', position='Body'),
  globalParams?: string(name='globalParams', position='Body'),
  identifier?: string(name='identifier', position='Body'),
  ossObjectName?: string(name='ossObjectName', position='Body'),
  realFileName?: string(name='realFileName', position='Body'),
  relatedDdlContentOssFileName?: string(name='relatedDdlContentOssFileName', position='Body'),
  relatedDdlContentOssObjectName?: string(name='relatedDdlContentOssObjectName', position='Body'),
  relatedDdlContentRealFileName?: string(name='relatedDdlContentRealFileName', position='Body'),
  sourceDatasourceId?: string(name='sourceDatasourceId', position='Body'),
  sourceDialect: string(name='sourceDialect', description='This parameter is required.', position='Body'),
  sourceProject?: string(name='sourceProject', position='Body'),
  tableNameMappingFile?: any(name='tableNameMappingFile', position='Body'),
  tableNameOssFileName?: string(name='tableNameOssFileName', position='Body'),
  tableNameOssObjectName?: string(name='tableNameOssObjectName', position='Body'),
  tableNameRealFileName?: string(name='tableNameRealFileName', position='Body'),
  targetDatasourceId?: string(name='targetDatasourceId', position='Body'),
  targetDialect: string(name='targetDialect', description='This parameter is required.', position='Body'),
  targetProject?: string(name='targetProject', position='Body'),
  taskDescription?: string(name='taskDescription', position='Body'),
  taskId?: long(name='taskId', position='Body'),
  taskName: string(name='taskName', description='This parameter is required.', position='Body'),
  taskType: int32(name='taskType', description='This parameter is required.', position='Body'),
  tenantId?: string(name='tenantId', position='Body'),
  transformSchema?: string(name='transformSchema', position='Body'),
  uid?: string(name='uid', position='Body'),
}

model PopEditTaskResponseBody = {
  data?: long(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model PopEditTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PopEditTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PopEditTask  PopEditTaskRequest
  * @return PopEditTaskResponse
 */
async function popEditTask(request: PopEditTaskRequest): PopEditTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PopEditTask', 'POST', '/api/bigdata/jobMigrate/sqlTranslator/task/popEdit', 'json', false, 'json', request);
}

model RecoverMigrationJobRequest {
  id?: long(name='id', position='Query'),
}

model RecoverMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model RecoverMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecoverMigrationJob  RecoverMigrationJobRequest
  * @return RecoverMigrationJobResponse
 */
async function recoverMigrationJob(request: RecoverMigrationJobRequest): RecoverMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverMigrationJob', 'POST', '/okss-services/migration-job/recover-migration-job', 'json', false, 'json', request);
}

model SingleScriptSyncTranslateRequest {
  sourceDialect?: string(name='sourceDialect', position='Body'),
  sourceSqlScript?: string(name='sourceSqlScript', position='Body'),
  tableMapping?: [ string ](name='tableMapping', position='Body'),
  targetDialect?: string(name='targetDialect', position='Body'),
}

model SingleScriptSyncTranslateResponseBody = {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model SingleScriptSyncTranslateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SingleScriptSyncTranslateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SingleScriptSyncTranslate  SingleScriptSyncTranslateRequest
  * @return SingleScriptSyncTranslateResponse
 */
async function singleScriptSyncTranslate(request: SingleScriptSyncTranslateRequest): SingleScriptSyncTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SingleScriptSyncTranslate', 'POST', '/api/bigdata/sql-translator/open/single/translate-sync', 'json', false, 'json', request);
}

model StopSyncMigrationJobRequest {
  jobType?: string(name='jobType', position='Query'),
  regionId?: string(name='regionId', position='Query'),
}

model StopSyncMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model StopSyncMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSyncMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopSyncMigrationJob  StopSyncMigrationJobRequest
  * @return StopSyncMigrationJobResponse
 */
async function stopSyncMigrationJob(request: StopSyncMigrationJobRequest): StopSyncMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopSyncMigrationJob', 'POST', '/okss-services/migration-job/unsync-migration-job', 'json', false, 'json', request);
}

model SyncMigrationJobRequest {
  jobType?: string(name='jobType', position='Query'),
  operationType?: string(name='operationType', position='Query'),
  regionId?: string(name='regionId', position='Query'),
  regions?: string(name='regions', position='Query'),
}

model SyncMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model SyncMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncMigrationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncMigrationJob  SyncMigrationJobRequest
  * @return SyncMigrationJobResponse
 */
async function syncMigrationJob(request: SyncMigrationJobRequest): SyncMigrationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncMigrationJob', 'POST', '/okss-services/migration-job/sync-migration-job', 'json', false, 'json', request);
}

model UpdatePushAppRequest {
  appId?: long(name='AppId', position='Body'),
  downloadLink?: string(name='DownloadLink', position='Body'),
  tenantProxyUid?: string(name='tenant-proxy-uid', position='Header'),
}

model UpdatePushAppResponseBody = {
  isDebugEnable?: boolean(name='IsDebugEnable'),
  requestId?: string(name='RequestId'),
  resultObj?: any(name='ResultObj'),
  success?: boolean(name='Success'),
  tipMsg?: string(name='TipMsg'),
}

model UpdatePushAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePushAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePushApp  UpdatePushAppRequest
  * @return UpdatePushAppResponse
 */
async function updatePushApp(request: UpdatePushAppRequest): UpdatePushAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePushApp', 'POST', '/abm/app/manager/api/v1/push', 'json', false, 'json', request);
}

