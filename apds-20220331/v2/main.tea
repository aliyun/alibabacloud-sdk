/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('apds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateMigrationGroupRequest {
  description?: string(name='description'),
  extra?: string(name='extra'),
  id?: int32(name='id'),
  name?: string(name='name'),
  regionId?: string(name='regionId'),
}

model CreateMigrationGroupResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model CreateMigrationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMigrationGroupResponseBody(name='body'),
}

/**
 * @summary 保存集群接口
 *
 * @param request CreateMigrationGroupRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMigrationGroupResponse
 */
async function createMigrationGroupWithOptions(request: CreateMigrationGroupRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateMigrationGroupResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!$isNull(request.id)) {
    body['id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateMigrationGroup',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-group/save-migration-group`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存集群接口
 *
 * @param request CreateMigrationGroupRequest
 * @return CreateMigrationGroupResponse
 */
async function createMigrationGroup(request: CreateMigrationGroupRequest): CreateMigrationGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createMigrationGroupWithOptions(request, headers, runtime);
}

model CreateMigrationJobRequest {
  migrationJobList?: [ 
    {
      destination?: string(name='destination', description='This parameter is required.'),
      destinationIp?: string(name='destinationIp'),
      destinationRegion?: string(name='destinationRegion'),
      jobGmtCreate?: string(name='jobGmtCreate'),
      jobGmtModified?: string(name='jobGmtModified'),
      name?: string(name='name', description='This parameter is required.'),
      originalPercent?: string(name='originalPercent'),
      originalProgress?: string(name='originalProgress'),
      originalStatus?: string(name='originalStatus', description='This parameter is required.'),
      outSideId?: string(name='outSideId', description='This parameter is required.'),
      properties?: string(name='properties'),
      source?: string(name='source', description='This parameter is required.'),
      sourceIp?: string(name='sourceIp'),
    }
  ](name='migrationJobList'),
  type?: string(name='type', description='This parameter is required.'),
}

model CreateMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model CreateMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMigrationJobResponseBody(name='body'),
}

/**
 * @summary 写入同步任务
 *
 * @param request CreateMigrationJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMigrationJobResponse
 */
async function createMigrationJobWithOptions(request: CreateMigrationJobRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateMigrationJobResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.migrationJobList)) {
    body['migrationJobList'] = request.migrationJobList;
  }
  if (!$isNull(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateMigrationJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/create-migration-jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 写入同步任务
 *
 * @param request CreateMigrationJobRequest
 * @return CreateMigrationJobResponse
 */
async function createMigrationJob(request: CreateMigrationJobRequest): CreateMigrationJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createMigrationJobWithOptions(request, headers, runtime);
}

model CreatePayOrderCallbackRequest {
  data?: string(name='data'),
}

model CreatePayOrderCallbackResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObj?: any(name='ResultObj'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model CreatePayOrderCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePayOrderCallbackResponseBody(name='body'),
}

/**
 * @summary 南天门订单通知
 *
 * @param request CreatePayOrderCallbackRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePayOrderCallbackResponse
 */
async function createPayOrderCallbackWithOptions(request: CreatePayOrderCallbackRequest, headers: map[string]string, runtime: $RuntimeOptions): CreatePayOrderCallbackResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.data)) {
    query['data'] = request.data;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePayOrderCallback',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/sys/user/pop/api/v1/payOrderCallback`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 南天门订单通知
 *
 * @param request CreatePayOrderCallbackRequest
 * @return CreatePayOrderCallbackResponse
 */
async function createPayOrderCallback(request: CreatePayOrderCallbackRequest): CreatePayOrderCallbackResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createPayOrderCallbackWithOptions(request, headers, runtime);
}

model CreateRefundRequest {
  data?: string(name='data'),
}

model CreateRefundResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  synchro?: boolean(name='Synchro'),
}

model CreateRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRefundResponseBody(name='body'),
}

/**
 * @summary 退订
 *
 * @param request CreateRefundRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRefundResponse
 */
async function createRefundWithOptions(request: CreateRefundRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateRefundResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.data)) {
    query['data'] = request.data;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRefund',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/sys/user/pop/api/v1/refund`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 退订
 *
 * @param request CreateRefundRequest
 * @return CreateRefundResponse
 */
async function createRefund(request: CreateRefundRequest): CreateRefundResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createRefundWithOptions(request, headers, runtime);
}

model CreateSurveyJobRequest {
  ak?: string(name='ak'),
  autoConfirm?: boolean(name='autoConfirm'),
  channel?: string(name='channel'),
  cloudType?: string(name='cloudType'),
  name?: string(name='name'),
  ossObjectName?: string(name='ossObjectName'),
  projectId?: string(name='projectId'),
  region?: [ string ](name='region'),
  resourceTypeList?: [ string ](name='resourceTypeList'),
  sk?: string(name='sk'),
  tenantId?: string(name='tenantId'),
  zone?: [ string ](name='zone'),
  regionId?: string(name='regionId'),
}

model CreateSurveyJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model CreateSurveyJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSurveyJobResponseBody(name='body'),
}

/**
 * @summary 新增扫描任务
 *
 * @param request CreateSurveyJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSurveyJobResponse
 */
async function createSurveyJobWithOptions(request: CreateSurveyJobRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateSurveyJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.ak)) {
    body['ak'] = request.ak;
  }
  if (!$isNull(request.autoConfirm)) {
    body['autoConfirm'] = request.autoConfirm;
  }
  if (!$isNull(request.channel)) {
    body['channel'] = request.channel;
  }
  if (!$isNull(request.cloudType)) {
    body['cloudType'] = request.cloudType;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.ossObjectName)) {
    body['ossObjectName'] = request.ossObjectName;
  }
  if (!$isNull(request.projectId)) {
    body['projectId'] = request.projectId;
  }
  if (!$isNull(request.region)) {
    body['region'] = request.region;
  }
  if (!$isNull(request.resourceTypeList)) {
    body['resourceTypeList'] = request.resourceTypeList;
  }
  if (!$isNull(request.sk)) {
    body['sk'] = request.sk;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.zone)) {
    body['zone'] = request.zone;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSurveyJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/add-survey-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增扫描任务
 *
 * @param request CreateSurveyJobRequest
 * @return CreateSurveyJobResponse
 */
async function createSurveyJob(request: CreateSurveyJobRequest): CreateSurveyJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createSurveyJobWithOptions(request, headers, runtime);
}

model CreateSurveyJobOfflineRequest {
  autoConfirm?: boolean(name='autoConfirm'),
  channel?: string(name='channel'),
  cloudType?: string(name='cloudType'),
  fileName?: string(name='fileName'),
  name?: string(name='name'),
  objectName?: string(name='objectName'),
  regionId?: string(name='regionId'),
}

model CreateSurveyJobOfflineResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model CreateSurveyJobOfflineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSurveyJobOfflineResponseBody(name='body'),
}

/**
 * @summary 新增扫描任务
 *
 * @param request CreateSurveyJobOfflineRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSurveyJobOfflineResponse
 */
async function createSurveyJobOfflineWithOptions(request: CreateSurveyJobOfflineRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateSurveyJobOfflineResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.autoConfirm)) {
    body['autoConfirm'] = request.autoConfirm;
  }
  if (!$isNull(request.channel)) {
    body['channel'] = request.channel;
  }
  if (!$isNull(request.cloudType)) {
    body['cloudType'] = request.cloudType;
  }
  if (!$isNull(request.fileName)) {
    body['fileName'] = request.fileName;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.objectName)) {
    body['objectName'] = request.objectName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSurveyJobOffline',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/add-import-survey-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增扫描任务
 *
 * @param request CreateSurveyJobOfflineRequest
 * @return CreateSurveyJobOfflineResponse
 */
async function createSurveyJobOffline(request: CreateSurveyJobOfflineRequest): CreateSurveyJobOfflineResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createSurveyJobOfflineWithOptions(request, headers, runtime);
}

model DeleteMigrationJobRequest {
  id?: long(name='id'),
}

model DeleteMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DeleteMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMigrationJobResponseBody(name='body'),
}

/**
 * @summary 删除任务
 *
 * @param request DeleteMigrationJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMigrationJobResponse
 */
async function deleteMigrationJobWithOptions(request: DeleteMigrationJobRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteMigrationJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteMigrationJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/remove-migration-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除任务
 *
 * @param request DeleteMigrationJobRequest
 * @return DeleteMigrationJobResponse
 */
async function deleteMigrationJob(request: DeleteMigrationJobRequest): DeleteMigrationJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMigrationJobWithOptions(request, headers, runtime);
}

model DeleteOssFileRequest {
  objectName?: string(name='objectName'),
  regionId?: string(name='regionId'),
}

model DeleteOssFileResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DeleteOssFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOssFileResponseBody(name='body'),
}

/**
 * @summary 根据key删除oss文件
 *
 * @param request DeleteOssFileRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOssFileResponse
 */
async function deleteOssFileWithOptions(request: DeleteOssFileRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteOssFileResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.objectName)) {
    query['objectName'] = request.objectName;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOssFile',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/file-job/delete-file`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据key删除oss文件
 *
 * @param request DeleteOssFileRequest
 * @return DeleteOssFileResponse
 */
async function deleteOssFile(request: DeleteOssFileRequest): DeleteOssFileResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteOssFileWithOptions(request, headers, runtime);
}

model DeleteSurveyJobRequest {
  id?: long(name='id'),
}

model DeleteSurveyJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DeleteSurveyJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSurveyJobResponseBody(name='body'),
}

/**
 * @summary 根据id删除扫描任务
 *
 * @param request DeleteSurveyJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSurveyJobResponse
 */
async function deleteSurveyJobWithOptions(request: DeleteSurveyJobRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteSurveyJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSurveyJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/delete-survey-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据id删除扫描任务
 *
 * @param request DeleteSurveyJobRequest
 * @return DeleteSurveyJobResponse
 */
async function deleteSurveyJob(request: DeleteSurveyJobRequest): DeleteSurveyJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSurveyJobWithOptions(request, headers, runtime);
}

model DeleteSurveyResourcesRequest {
  ids?: string(name='ids', description='This parameter is required.'),
}

model DeleteSurveyResourcesResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DeleteSurveyResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSurveyResourcesResponseBody(name='body'),
}

/**
 * @summary 发现-批量删除资源接口
 *
 * @param request DeleteSurveyResourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSurveyResourcesResponse
 */
async function deleteSurveyResourcesWithOptions(request: DeleteSurveyResourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteSurveyResourcesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.ids)) {
    query['ids'] = request.ids;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSurveyResources',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/confirm-resource/destroy`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发现-批量删除资源接口
 *
 * @param request DeleteSurveyResourcesRequest
 * @return DeleteSurveyResourcesResponse
 */
async function deleteSurveyResources(request: DeleteSurveyResourcesRequest): DeleteSurveyResourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSurveyResourcesWithOptions(request, headers, runtime);
}

model DescribeMigrationJobConfigResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeMigrationJobConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobConfigResponseBody(name='body'),
}

/**
 * @summary 查询用户维度同步任务的设置状态
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMigrationJobConfigResponse
 */
async function describeMigrationJobConfigWithOptions(headers: map[string]string, runtime: $RuntimeOptions): DescribeMigrationJobConfigResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeMigrationJobConfig',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/describe-migration-job-config`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户维度同步任务的设置状态
 *
 * @return DescribeMigrationJobConfigResponse
 */
async function describeMigrationJobConfig(): DescribeMigrationJobConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeMigrationJobConfigWithOptions(headers, runtime);
}

model DescribeMigrationJobCountRequest {
  batchTaskGroupId?: long(name='batchTaskGroupId'),
  cutoverPlanId?: string(name='cutoverPlanId'),
  name?: string(name='name'),
  outSideId?: string(name='outSideId'),
  source?: string(name='source'),
  surveyResourceId?: long(name='surveyResourceId'),
  tagList?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tagList'),
  type?: string(name='type'),
  typeList?: [ string ](name='typeList'),
  usedType?: string(name='usedType'),
}

model DescribeMigrationJobCountResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeMigrationJobCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMigrationJobCountResponseBody(name='body'),
}

/**
 * @summary 查询同步任务数量
 *
 * @param request DescribeMigrationJobCountRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMigrationJobCountResponse
 */
async function describeMigrationJobCountWithOptions(request: DescribeMigrationJobCountRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeMigrationJobCountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.batchTaskGroupId)) {
    body['batchTaskGroupId'] = request.batchTaskGroupId;
  }
  if (!$isNull(request.cutoverPlanId)) {
    body['cutoverPlanId'] = request.cutoverPlanId;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.outSideId)) {
    body['outSideId'] = request.outSideId;
  }
  if (!$isNull(request.source)) {
    body['source'] = request.source;
  }
  if (!$isNull(request.surveyResourceId)) {
    body['surveyResourceId'] = request.surveyResourceId;
  }
  if (!$isNull(request.tagList)) {
    body['tagList'] = request.tagList;
  }
  if (!$isNull(request.type)) {
    body['type'] = request.type;
  }
  if (!$isNull(request.typeList)) {
    body['typeList'] = request.typeList;
  }
  if (!$isNull(request.usedType)) {
    body['usedType'] = request.usedType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeMigrationJobCount',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/count-migration-jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询同步任务数量
 *
 * @param request DescribeMigrationJobCountRequest
 * @return DescribeMigrationJobCountResponse
 */
async function describeMigrationJobCount(request: DescribeMigrationJobCountRequest): DescribeMigrationJobCountResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeMigrationJobCountWithOptions(request, headers, runtime);
}

model DescribeOssStsRequest {
  ak?: string(name='ak'),
  cloudType?: string(name='cloudType'),
  region?: string(name='region'),
  regionId?: string(name='regionId'),
  sk?: string(name='sk'),
  tenantId?: string(name='tenantId'),
}

model DescribeOssStsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeOssStsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssStsResponseBody(name='body'),
}

/**
 * @summary 获取临时授权
 *
 * @param request DescribeOssStsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOssStsResponse
 */
async function describeOssStsWithOptions(request: DescribeOssStsRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeOssStsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.ak)) {
    query['ak'] = request.ak;
  }
  if (!$isNull(request.cloudType)) {
    query['cloudType'] = request.cloudType;
  }
  if (!$isNull(request.region)) {
    query['region'] = request.region;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!$isNull(request.sk)) {
    query['sk'] = request.sk;
  }
  if (!$isNull(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeOssSts',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/file-job/sts`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取临时授权
 *
 * @param request DescribeOssStsRequest
 * @return DescribeOssStsResponse
 */
async function describeOssSts(request: DescribeOssStsRequest): DescribeOssStsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeOssStsWithOptions(request, headers, runtime);
}

model DescribeSummaryByStatusRequest {
  regionId?: string(name='regionId'),
}

model DescribeSummaryByStatusResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DescribeSummaryByStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSummaryByStatusResponseBody(name='body'),
}

/**
 * @summary 根据状态进行汇总
 *
 * @param request DescribeSummaryByStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSummaryByStatusResponse
 */
async function describeSummaryByStatusWithOptions(request: DescribeSummaryByStatusRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeSummaryByStatusResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSummaryByStatus',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/summary/summary-by-status`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据状态进行汇总
 *
 * @param request DescribeSummaryByStatusRequest
 * @return DescribeSummaryByStatusResponse
 */
async function describeSummaryByStatus(request: DescribeSummaryByStatusRequest): DescribeSummaryByStatusResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSummaryByStatusWithOptions(request, headers, runtime);
}

model DescribeSummaryByStatusAndGroupRequest {
  regionId?: string(name='regionId'),
}

model DescribeSummaryByStatusAndGroupResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DescribeSummaryByStatusAndGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSummaryByStatusAndGroupResponseBody(name='body'),
}

/**
 * @summary 根据状态和集群进行汇总
 *
 * @param request DescribeSummaryByStatusAndGroupRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSummaryByStatusAndGroupResponse
 */
async function describeSummaryByStatusAndGroupWithOptions(request: DescribeSummaryByStatusAndGroupRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeSummaryByStatusAndGroupResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSummaryByStatusAndGroup',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/summary/summary-by-status-and-region`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据状态和集群进行汇总
 *
 * @param request DescribeSummaryByStatusAndGroupRequest
 * @return DescribeSummaryByStatusAndGroupResponse
 */
async function describeSummaryByStatusAndGroup(request: DescribeSummaryByStatusAndGroupRequest): DescribeSummaryByStatusAndGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSummaryByStatusAndGroupWithOptions(request, headers, runtime);
}

model DescribeSurveyJobRequest {
  id?: long(name='id'),
  regionId?: string(name='regionId'),
}

model DescribeSurveyJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeSurveyJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyJobResponseBody(name='body'),
}

/**
 * @summary 查询扫描任务
 *
 * @param request DescribeSurveyJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSurveyJobResponse
 */
async function describeSurveyJobWithOptions(request: DescribeSurveyJobRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeSurveyJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSurveyJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/query-survey-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询扫描任务
 *
 * @param request DescribeSurveyJobRequest
 * @return DescribeSurveyJobResponse
 */
async function describeSurveyJob(request: DescribeSurveyJobRequest): DescribeSurveyJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSurveyJobWithOptions(request, headers, runtime);
}

model DescribeSurveyJobCountRequest {
  channelList?: [ string ](name='channelList'),
  cloudTypeList?: [ string ](name='cloudTypeList'),
  name?: string(name='name'),
  regionId?: string(name='regionId'),
}

model DescribeSurveyJobCountResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeSurveyJobCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyJobCountResponseBody(name='body'),
}

/**
 * @summary 查询扫描任务
 *
 * @param request DescribeSurveyJobCountRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSurveyJobCountResponse
 */
async function describeSurveyJobCountWithOptions(request: DescribeSurveyJobCountRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeSurveyJobCountResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.channelList)) {
    body['channelList'] = request.channelList;
  }
  if (!$isNull(request.cloudTypeList)) {
    body['cloudTypeList'] = request.cloudTypeList;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSurveyJobCount',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/count-survey-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询扫描任务
 *
 * @param request DescribeSurveyJobCountRequest
 * @return DescribeSurveyJobCountResponse
 */
async function describeSurveyJobCount(request: DescribeSurveyJobCountRequest): DescribeSurveyJobCountResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSurveyJobCountWithOptions(request, headers, runtime);
}

model DescribeSurveyResourceTagRequest {
  scene?: string(name='scene'),
  sourceUserIdList?: [ long ](name='sourceUserIdList'),
}

model DescribeSurveyResourceTagResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model DescribeSurveyResourceTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyResourceTagResponseBody(name='body'),
}

/**
 * @summary 获取资源标签信息
 *
 * @param request DescribeSurveyResourceTagRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSurveyResourceTagResponse
 */
async function describeSurveyResourceTagWithOptions(request: DescribeSurveyResourceTagRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeSurveyResourceTagResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.scene)) {
    body['scene'] = request.scene;
  }
  if (!$isNull(request.sourceUserIdList)) {
    body['sourceUserIdList'] = request.sourceUserIdList;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSurveyResourceTag',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/confirm-resource/get-resource-tag`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取资源标签信息
 *
 * @param request DescribeSurveyResourceTagRequest
 * @return DescribeSurveyResourceTagResponse
 */
async function describeSurveyResourceTag(request: DescribeSurveyResourceTagRequest): DescribeSurveyResourceTagResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSurveyResourceTagWithOptions(request, headers, runtime);
}

model DescribeSurveyTemplateRequest {
  resourceType?: string(name='resourceType'),
}

model DescribeSurveyTemplateResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model DescribeSurveyTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSurveyTemplateResponseBody(name='body'),
}

/**
 * @summary 查询资源调研参数模板列表type
 *
 * @param request DescribeSurveyTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSurveyTemplateResponse
 */
async function describeSurveyTemplateWithOptions(request: DescribeSurveyTemplateRequest, headers: map[string]string, runtime: $RuntimeOptions): DescribeSurveyTemplateResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeSurveyTemplate',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/survey-template/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资源调研参数模板列表type
 *
 * @param request DescribeSurveyTemplateRequest
 * @return DescribeSurveyTemplateResponse
 */
async function describeSurveyTemplate(request: DescribeSurveyTemplateRequest): DescribeSurveyTemplateResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSurveyTemplateWithOptions(request, headers, runtime);
}

model GetTableMetaInfoRequest {
  sourceDialect?: string(name='sourceDialect'),
  sourceSqlScript?: string(name='sourceSqlScript'),
  targetDialect?: string(name='targetDialect'),
}

model GetTableMetaInfoResponseBody = {
  data?: [ string ](name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GetTableMetaInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableMetaInfoResponseBody(name='body'),
}

/**
 * @summary 获得脚本中的表名，以及获取已知的不支持转换函数
 *
 * @param request GetTableMetaInfoRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableMetaInfoResponse
 */
async function getTableMetaInfoWithOptions(request: GetTableMetaInfoRequest, headers: map[string]string, runtime: $RuntimeOptions): GetTableMetaInfoResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.sourceDialect)) {
    body['sourceDialect'] = request.sourceDialect;
  }
  if (!$isNull(request.sourceSqlScript)) {
    body['sourceSqlScript'] = request.sourceSqlScript;
  }
  if (!$isNull(request.targetDialect)) {
    body['targetDialect'] = request.targetDialect;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableMetaInfo',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/api/bigdata/sql-translator/open/single/get-table-info`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得脚本中的表名，以及获取已知的不支持转换函数
 *
 * @param request GetTableMetaInfoRequest
 * @return GetTableMetaInfoResponse
 */
async function getTableMetaInfo(request: GetTableMetaInfoRequest): GetTableMetaInfoResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableMetaInfoWithOptions(request, headers, runtime);
}

model GetTaskDetailRequest {
  taskId?: long(name='taskId', description='This parameter is required.'),
}

model GetTaskDetailResponseBody = {
  data?: {
    ddlFilename?: string(name='ddlFilename'),
    ddlRelateType?: int32(name='ddlRelateType'),
    dqlAssociationDDLTaskList?: [ 
      {
        ddlTaskId?: long(name='ddlTaskId'),
        ddlTaskName?: string(name='ddlTaskName'),
        dqlTaskId?: long(name='dqlTaskId'),
        gmtCreate?: string(name='gmtCreate'),
        gmtModified?: string(name='gmtModified'),
        id?: long(name='id'),
        tenantId?: string(name='tenantId'),
        uid?: string(name='uid'),
      }
    ](name='dqlAssociationDDLTaskList'),
    dqlFilename?: string(name='dqlFilename'),
    dqlRelateDdlMessage?: string(name='dqlRelateDdlMessage'),
    dqlRelateTargetDatasourceId?: string(name='dqlRelateTargetDatasourceId'),
    dqlRelateTargetDatasourceName?: string(name='dqlRelateTargetDatasourceName'),
    dqlTestDatasourceId?: string(name='dqlTestDatasourceId'),
    dqlTestDatasourceName?: string(name='dqlTestDatasourceName'),
    dqlTestProject?: string(name='dqlTestProject'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    id?: long(name='id'),
    lastImportTime?: string(name='lastImportTime'),
    scriptTransformStatus?: string(name='scriptTransformStatus'),
    sourceDatasourceId?: string(name='sourceDatasourceId'),
    sourceDatasourceName?: string(name='sourceDatasourceName'),
    sourceDialect?: string(name='sourceDialect'),
    sourceProject?: string(name='sourceProject'),
    syntaxErrorCount?: int32(name='syntaxErrorCount'),
    syntaxPassCount?: int32(name='syntaxPassCount'),
    syntaxValidationStatus?: string(name='syntaxValidationStatus'),
    targetDatasourceId?: string(name='targetDatasourceId'),
    targetDatasourceName?: string(name='targetDatasourceName'),
    targetDialect?: string(name='targetDialect'),
    targetProject?: string(name='targetProject'),
    taskDescription?: string(name='taskDescription'),
    taskName?: string(name='taskName'),
    taskType?: int32(name='taskType'),
    tenantId?: string(name='tenantId'),
    totalCount?: int32(name='totalCount'),
    transformFailureCount?: int32(name='transformFailureCount'),
    transformSchema?: string(name='transformSchema'),
    transformSuccessCount?: int32(name='transformSuccessCount'),
    uid?: string(name='uid'),
    uploadedScriptUrl?: string(name='uploadedScriptUrl'),
    zipParsingState?: string(name='zipParsingState'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model GetTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskDetailResponseBody(name='body'),
}

/**
 * @summary 回显任务详情
 *
 * @param request GetTaskDetailRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskDetailResponse
 */
async function getTaskDetailWithOptions(request: GetTaskDetailRequest, headers: map[string]string, runtime: $RuntimeOptions): GetTaskDetailResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTaskDetail',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/api/bigdata/jobMigrate/sqlTranslator/task/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 回显任务详情
 *
 * @param request GetTaskDetailRequest
 * @return GetTaskDetailResponse
 */
async function getTaskDetail(request: GetTaskDetailRequest): GetTaskDetailResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskDetailWithOptions(request, headers, runtime);
}

model ListAppDownloadHistoryHeaders {
  commonHeaders?: map[string]string,
  bizModuleCode?: string(name='biz-module-code'),
  tenantProxyUid?: string(name='tenant-proxy-uid'),
}

model ListAppDownloadHistoryRequest {
  appId?: string(name='appId'),
  platform?: string(name='platform'),
  startDate?: string(name='startDate'),
  tenantUid?: string(name='tenantUid'),
}

model ListAppDownloadHistoryResponseBody = {
  data?: any(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
  code?: string(name='code'),
  requestId?: string(name='requestId'),
}

model ListAppDownloadHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppDownloadHistoryResponseBody(name='body'),
}

/**
 * @summary 分发页下载统计
 *
 * @param request ListAppDownloadHistoryRequest
 * @param headers ListAppDownloadHistoryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAppDownloadHistoryResponse
 */
async function listAppDownloadHistoryWithOptions(request: ListAppDownloadHistoryRequest, headers: ListAppDownloadHistoryHeaders, runtime: $RuntimeOptions): ListAppDownloadHistoryResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['appId'] = request.appId;
  }
  if (!$isNull(request.platform)) {
    body['platform'] = request.platform;
  }
  if (!$isNull(request.startDate)) {
    body['startDate'] = request.startDate;
  }
  if (!$isNull(request.tenantUid)) {
    body['tenantUid'] = request.tenantUid;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.bizModuleCode)) {
    realHeaders['biz-module-code'] = $string(headers.bizModuleCode);
  }
  if (!$isNull(headers.tenantProxyUid)) {
    realHeaders['tenant-proxy-uid'] = $string(headers.tenantProxyUid);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAppDownloadHistory',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/abm/app/manager/api/v1/fetchAppDownloadHistory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分发页下载统计
 *
 * @param request ListAppDownloadHistoryRequest
 * @return ListAppDownloadHistoryResponse
 */
async function listAppDownloadHistory(request: ListAppDownloadHistoryRequest): ListAppDownloadHistoryResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new ListAppDownloadHistoryHeaders{};
  return listAppDownloadHistoryWithOptions(request, headers, runtime);
}

model ListMigrationJobsRequest {
  batchTaskGroupId?: long(name='batchTaskGroupId'),
  cutoverPlanId?: string(name='cutoverPlanId'),
  name?: string(name='name'),
  outSideId?: string(name='outSideId'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  sortCol?: string(name='sortCol'),
  sortType?: string(name='sortType'),
  source?: string(name='source'),
  surveyResourceId?: long(name='surveyResourceId'),
  tagList?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tagList'),
  type?: string(name='type'),
  typeList?: [ string ](name='typeList'),
  usedType?: string(name='usedType'),
}

model ListMigrationJobsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListMigrationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMigrationJobsResponseBody(name='body'),
}

/**
 * @summary 查询同步任务
 *
 * @param request ListMigrationJobsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMigrationJobsResponse
 */
async function listMigrationJobsWithOptions(request: ListMigrationJobsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListMigrationJobsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.batchTaskGroupId)) {
    body['batchTaskGroupId'] = request.batchTaskGroupId;
  }
  if (!$isNull(request.cutoverPlanId)) {
    body['cutoverPlanId'] = request.cutoverPlanId;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.outSideId)) {
    body['outSideId'] = request.outSideId;
  }
  if (!$isNull(request.pageNum)) {
    body['pageNum'] = request.pageNum;
  }
  if (!$isNull(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortCol)) {
    body['sortCol'] = request.sortCol;
  }
  if (!$isNull(request.sortType)) {
    body['sortType'] = request.sortType;
  }
  if (!$isNull(request.source)) {
    body['source'] = request.source;
  }
  if (!$isNull(request.surveyResourceId)) {
    body['surveyResourceId'] = request.surveyResourceId;
  }
  if (!$isNull(request.tagList)) {
    body['tagList'] = request.tagList;
  }
  if (!$isNull(request.type)) {
    body['type'] = request.type;
  }
  if (!$isNull(request.typeList)) {
    body['typeList'] = request.typeList;
  }
  if (!$isNull(request.usedType)) {
    body['usedType'] = request.usedType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListMigrationJobs',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/describe-migration-jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询同步任务
 *
 * @param request ListMigrationJobsRequest
 * @return ListMigrationJobsResponse
 */
async function listMigrationJobs(request: ListMigrationJobsRequest): ListMigrationJobsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listMigrationJobsWithOptions(request, headers, runtime);
}

model ListSurveyJobDownLoadJobsRequest {
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  sortCol?: string(name='sortCol'),
  sortType?: string(name='sortType'),
  regionId?: string(name='regionId'),
}

model ListSurveyJobDownLoadJobsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyJobDownLoadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyJobDownLoadJobsResponseBody(name='body'),
}

/**
 * @summary 获取调研任务下载列表
 *
 * @param request ListSurveyJobDownLoadJobsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSurveyJobDownLoadJobsResponse
 */
async function listSurveyJobDownLoadJobsWithOptions(request: ListSurveyJobDownLoadJobsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSurveyJobDownLoadJobsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.pageNum)) {
    body['pageNum'] = request.pageNum;
  }
  if (!$isNull(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.sortCol)) {
    body['sortCol'] = request.sortCol;
  }
  if (!$isNull(request.sortType)) {
    body['sortType'] = request.sortType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSurveyJobDownLoadJobs',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/file-job/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取调研任务下载列表
 *
 * @param request ListSurveyJobDownLoadJobsRequest
 * @return ListSurveyJobDownLoadJobsResponse
 */
async function listSurveyJobDownLoadJobs(request: ListSurveyJobDownLoadJobsRequest): ListSurveyJobDownLoadJobsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSurveyJobDownLoadJobsWithOptions(request, headers, runtime);
}

model ListSurveyJobsRequest {
  channelList?: [ string ](name='channelList'),
  cloudTypeList?: [ string ](name='cloudTypeList'),
  name?: string(name='name'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  region?: [ string ](name='region'),
  surveyRange?: string(name='surveyRange'),
  regionId?: string(name='regionId'),
}

model ListSurveyJobsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyJobsResponseBody(name='body'),
}

/**
 * @summary 查看调研任务列表
 *
 * @param request ListSurveyJobsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSurveyJobsResponse
 */
async function listSurveyJobsWithOptions(request: ListSurveyJobsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSurveyJobsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.channelList)) {
    body['channelList'] = request.channelList;
  }
  if (!$isNull(request.cloudTypeList)) {
    body['cloudTypeList'] = request.cloudTypeList;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.pageNum)) {
    body['pageNum'] = request.pageNum;
  }
  if (!$isNull(request.pageSize)) {
    body['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.region)) {
    body['region'] = request.region;
  }
  if (!$isNull(request.surveyRange)) {
    body['surveyRange'] = request.surveyRange;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSurveyJobs',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/query-survey-jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看调研任务列表
 *
 * @param request ListSurveyJobsRequest
 * @return ListSurveyJobsResponse
 */
async function listSurveyJobs(request: ListSurveyJobsRequest): ListSurveyJobsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSurveyJobsWithOptions(request, headers, runtime);
}

model ListSurveyResourceByMigrationGroupsRequest {
  body?: {
    ids?: [ int32 ](name='ids'),
  }(name='body'),
}

model ListSurveyResourceByMigrationGroupsShrinkRequest {
  bodyShrink?: string(name='body'),
}

model ListSurveyResourceByMigrationGroupsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model ListSurveyResourceByMigrationGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourceByMigrationGroupsResponseBody(name='body'),
}

/**
 * @summary 通过集群ids获取下属资源
 *
 * @param tmpReq ListSurveyResourceByMigrationGroupsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSurveyResourceByMigrationGroupsResponse
 */
async function listSurveyResourceByMigrationGroupsWithOptions(tmpReq: ListSurveyResourceByMigrationGroupsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSurveyResourceByMigrationGroupsResponse {
  tmpReq.validate();
  var request = new ListSurveyResourceByMigrationGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.body)) {
    request.bodyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.body, 'body', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.bodyShrink)) {
    query['body'] = request.bodyShrink;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSurveyResourceByMigrationGroups',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-group/get-survey-resource`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过集群ids获取下属资源
 *
 * @param request ListSurveyResourceByMigrationGroupsRequest
 * @return ListSurveyResourceByMigrationGroupsResponse
 */
async function listSurveyResourceByMigrationGroups(request: ListSurveyResourceByMigrationGroupsRequest): ListSurveyResourceByMigrationGroupsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSurveyResourceByMigrationGroupsWithOptions(request, headers, runtime);
}

model ListSurveyResourceConnectionsRequest {
  ids?: [ int32 ](name='ids'),
  regionId?: string(name='regionId'),
}

model ListSurveyResourceConnectionsResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  error?: string(name='Error'),
  success?: boolean(name='Success'),
}

model ListSurveyResourceConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourceConnectionsResponseBody(name='body'),
}

/**
 * @summary 查询资源网络拓扑
 *
 * @param request ListSurveyResourceConnectionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSurveyResourceConnectionsResponse
 */
async function listSurveyResourceConnectionsWithOptions(request: ListSurveyResourceConnectionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSurveyResourceConnectionsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.ids)) {
    body['ids'] = request.ids;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSurveyResourceConnections',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/resource-connects`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资源网络拓扑
 *
 * @param request ListSurveyResourceConnectionsRequest
 * @return ListSurveyResourceConnectionsResponse
 */
async function listSurveyResourceConnections(request: ListSurveyResourceConnectionsRequest): ListSurveyResourceConnectionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSurveyResourceConnectionsWithOptions(request, headers, runtime);
}

model ListSurveyResourceTypesRequest {
  ak?: string(name='ak'),
  cloudType?: string(name='cloudType'),
  region?: string(name='region'),
  regionId?: string(name='regionId'),
  sk?: string(name='sk'),
}

model ListSurveyResourceTypesResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourceTypesResponseBody(name='body'),
}

/**
 * @summary 获取资源类型列表
 *
 * @param request ListSurveyResourceTypesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSurveyResourceTypesResponse
 */
async function listSurveyResourceTypesWithOptions(request: ListSurveyResourceTypesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSurveyResourceTypesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.ak)) {
    query['ak'] = request.ak;
  }
  if (!$isNull(request.cloudType)) {
    query['cloudType'] = request.cloudType;
  }
  if (!$isNull(request.region)) {
    query['region'] = request.region;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!$isNull(request.sk)) {
    query['sk'] = request.sk;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSurveyResourceTypes',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/winback/query-resource-type`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取资源类型列表
 *
 * @param request ListSurveyResourceTypesRequest
 * @return ListSurveyResourceTypesResponse
 */
async function listSurveyResourceTypes(request: ListSurveyResourceTypesRequest): ListSurveyResourceTypesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSurveyResourceTypesWithOptions(request, headers, runtime);
}

model ListSurveyResourcesDetailRequest {
  ip?: string(name='ip'),
  jobId?: long(name='jobId'),
  projectId?: long(name='projectId'),
  resourceType?: string(name='resourceType'),
  subProjectId?: long(name='subProjectId'),
  regionId?: string(name='regionId'),
}

model ListSurveyResourcesDetailResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model ListSurveyResourcesDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSurveyResourcesDetailResponseBody(name='body'),
}

/**
 * @summary 查询任务下属资源列表详情
 *
 * @param request ListSurveyResourcesDetailRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSurveyResourcesDetailResponse
 */
async function listSurveyResourcesDetailWithOptions(request: ListSurveyResourcesDetailRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSurveyResourcesDetailResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var body : map[string]any = {};
  if (!$isNull(request.ip)) {
    body['ip'] = request.ip;
  }
  if (!$isNull(request.jobId)) {
    body['jobId'] = request.jobId;
  }
  if (!$isNull(request.projectId)) {
    body['projectId'] = request.projectId;
  }
  if (!$isNull(request.resourceType)) {
    body['resourceType'] = request.resourceType;
  }
  if (!$isNull(request.subProjectId)) {
    body['subProjectId'] = request.subProjectId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSurveyResourcesDetail',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/survey-detail/query`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询任务下属资源列表详情
 *
 * @param request ListSurveyResourcesDetailRequest
 * @return ListSurveyResourcesDetailResponse
 */
async function listSurveyResourcesDetail(request: ListSurveyResourcesDetailRequest): ListSurveyResourcesDetailResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSurveyResourcesDetailWithOptions(request, headers, runtime);
}

model PopCreateTaskRequest {
  dataTypeMappingFile?: any(name='dataTypeMappingFile'),
  dataTypeOssFileName?: string(name='dataTypeOssFileName'),
  dataTypeOssObjectName?: string(name='dataTypeOssObjectName'),
  dataTypeRealFileName?: string(name='dataTypeRealFileName'),
  dqlAssociationDDLTaskList?: string(name='dqlAssociationDDLTaskList'),
  dqlRelateTargetDatasourceId?: string(name='dqlRelateTargetDatasourceId'),
  dqlTestDatasourceId?: string(name='dqlTestDatasourceId'),
  dqlTestProject?: string(name='dqlTestProject'),
  fileName?: string(name='fileName'),
  globalParams?: string(name='globalParams'),
  identifier?: string(name='identifier'),
  ossObjectName?: string(name='ossObjectName'),
  realFileName?: string(name='realFileName'),
  relatedDdlContentOssFileName?: string(name='relatedDdlContentOssFileName'),
  relatedDdlContentOssObjectName?: string(name='relatedDdlContentOssObjectName'),
  relatedDdlContentRealFileName?: string(name='relatedDdlContentRealFileName'),
  sourceDatasourceId?: string(name='sourceDatasourceId'),
  sourceDialect?: string(name='sourceDialect', description='This parameter is required.'),
  sourceProject?: string(name='sourceProject'),
  tableNameMappingFile?: any(name='tableNameMappingFile'),
  tableNameOssFileName?: string(name='tableNameOssFileName'),
  tableNameOssObjectName?: string(name='tableNameOssObjectName'),
  tableNameRealFileName?: string(name='tableNameRealFileName'),
  targetDatasourceId?: string(name='targetDatasourceId'),
  targetDialect?: string(name='targetDialect', description='This parameter is required.'),
  targetProject?: string(name='targetProject'),
  taskDescription?: string(name='taskDescription'),
  taskName?: string(name='taskName', description='This parameter is required.'),
  taskType?: int32(name='taskType', description='This parameter is required.'),
  tenantId?: string(name='tenantId'),
  transformSchema?: string(name='transformSchema'),
  uid?: string(name='uid'),
}

model PopCreateTaskResponseBody = {
  data?: long(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model PopCreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PopCreateTaskResponseBody(name='body'),
}

/**
 * @summary 新增sql转换任务
 *
 * @param request PopCreateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PopCreateTaskResponse
 */
async function popCreateTaskWithOptions(request: PopCreateTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): PopCreateTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataTypeMappingFile)) {
    body['dataTypeMappingFile'] = request.dataTypeMappingFile;
  }
  if (!$isNull(request.dataTypeOssFileName)) {
    body['dataTypeOssFileName'] = request.dataTypeOssFileName;
  }
  if (!$isNull(request.dataTypeOssObjectName)) {
    body['dataTypeOssObjectName'] = request.dataTypeOssObjectName;
  }
  if (!$isNull(request.dataTypeRealFileName)) {
    body['dataTypeRealFileName'] = request.dataTypeRealFileName;
  }
  if (!$isNull(request.dqlAssociationDDLTaskList)) {
    body['dqlAssociationDDLTaskList'] = request.dqlAssociationDDLTaskList;
  }
  if (!$isNull(request.dqlRelateTargetDatasourceId)) {
    body['dqlRelateTargetDatasourceId'] = request.dqlRelateTargetDatasourceId;
  }
  if (!$isNull(request.dqlTestDatasourceId)) {
    body['dqlTestDatasourceId'] = request.dqlTestDatasourceId;
  }
  if (!$isNull(request.dqlTestProject)) {
    body['dqlTestProject'] = request.dqlTestProject;
  }
  if (!$isNull(request.fileName)) {
    body['fileName'] = request.fileName;
  }
  if (!$isNull(request.globalParams)) {
    body['globalParams'] = request.globalParams;
  }
  if (!$isNull(request.identifier)) {
    body['identifier'] = request.identifier;
  }
  if (!$isNull(request.ossObjectName)) {
    body['ossObjectName'] = request.ossObjectName;
  }
  if (!$isNull(request.realFileName)) {
    body['realFileName'] = request.realFileName;
  }
  if (!$isNull(request.relatedDdlContentOssFileName)) {
    body['relatedDdlContentOssFileName'] = request.relatedDdlContentOssFileName;
  }
  if (!$isNull(request.relatedDdlContentOssObjectName)) {
    body['relatedDdlContentOssObjectName'] = request.relatedDdlContentOssObjectName;
  }
  if (!$isNull(request.relatedDdlContentRealFileName)) {
    body['relatedDdlContentRealFileName'] = request.relatedDdlContentRealFileName;
  }
  if (!$isNull(request.sourceDatasourceId)) {
    body['sourceDatasourceId'] = request.sourceDatasourceId;
  }
  if (!$isNull(request.sourceDialect)) {
    body['sourceDialect'] = request.sourceDialect;
  }
  if (!$isNull(request.sourceProject)) {
    body['sourceProject'] = request.sourceProject;
  }
  if (!$isNull(request.tableNameMappingFile)) {
    body['tableNameMappingFile'] = request.tableNameMappingFile;
  }
  if (!$isNull(request.tableNameOssFileName)) {
    body['tableNameOssFileName'] = request.tableNameOssFileName;
  }
  if (!$isNull(request.tableNameOssObjectName)) {
    body['tableNameOssObjectName'] = request.tableNameOssObjectName;
  }
  if (!$isNull(request.tableNameRealFileName)) {
    body['tableNameRealFileName'] = request.tableNameRealFileName;
  }
  if (!$isNull(request.targetDatasourceId)) {
    body['targetDatasourceId'] = request.targetDatasourceId;
  }
  if (!$isNull(request.targetDialect)) {
    body['targetDialect'] = request.targetDialect;
  }
  if (!$isNull(request.targetProject)) {
    body['targetProject'] = request.targetProject;
  }
  if (!$isNull(request.taskDescription)) {
    body['taskDescription'] = request.taskDescription;
  }
  if (!$isNull(request.taskName)) {
    body['taskName'] = request.taskName;
  }
  if (!$isNull(request.taskType)) {
    body['taskType'] = request.taskType;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.transformSchema)) {
    body['transformSchema'] = request.transformSchema;
  }
  if (!$isNull(request.uid)) {
    body['uid'] = request.uid;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PopCreateTask',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/api/bigdata/jobMigrate/sqlTranslator/task/popAdd`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增sql转换任务
 *
 * @param request PopCreateTaskRequest
 * @return PopCreateTaskResponse
 */
async function popCreateTask(request: PopCreateTaskRequest): PopCreateTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return popCreateTaskWithOptions(request, headers, runtime);
}

model PopDownloadTemplateRequest {
  targetDialect?: string(name='targetDialect'),
  taskId?: long(name='taskId'),
}

model PopDownloadTemplateResponseBody = {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model PopDownloadTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PopDownloadTemplateResponseBody(name='body'),
}

/**
 * @summary 下载表名映射模板
 *
 * @param request PopDownloadTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PopDownloadTemplateResponse
 */
async function popDownloadTemplateWithOptions(request: PopDownloadTemplateRequest, headers: map[string]string, runtime: $RuntimeOptions): PopDownloadTemplateResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.targetDialect)) {
    query['targetDialect'] = request.targetDialect;
  }
  if (!$isNull(request.taskId)) {
    query['taskId'] = request.taskId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PopDownloadTemplate',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/api/bigdata/jobMigrate/sqlTranslator/task/popDownload/TableNameMappingTemplate`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 下载表名映射模板
 *
 * @param request PopDownloadTemplateRequest
 * @return PopDownloadTemplateResponse
 */
async function popDownloadTemplate(request: PopDownloadTemplateRequest): PopDownloadTemplateResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return popDownloadTemplateWithOptions(request, headers, runtime);
}

model PopEditTaskRequest {
  configuration?: {
    dataTypeMappingFile?: any(name='dataTypeMappingFile'),
    dataTypeOssFileName?: string(name='dataTypeOssFileName'),
    dataTypeOssObjectName?: string(name='dataTypeOssObjectName'),
    dataTypeRealFileName?: string(name='dataTypeRealFileName'),
    globalParams?: string(name='globalParams'),
    tableNameMappingFile?: any(name='tableNameMappingFile'),
    tableNameOssFileName?: string(name='tableNameOssFileName'),
    tableNameOssObjectName?: string(name='tableNameOssObjectName'),
    tableNameRealFileName?: string(name='tableNameRealFileName'),
    taskId?: long(name='taskId'),
    tenantId?: string(name='tenantId'),
    uid?: string(name='uid'),
  }(name='configuration'),
  dataTypeMappingFile?: any(name='dataTypeMappingFile'),
  dataTypeOssFileName?: string(name='dataTypeOssFileName'),
  dataTypeOssObjectName?: string(name='dataTypeOssObjectName'),
  dataTypeRealFileName?: string(name='dataTypeRealFileName'),
  dqlAssociationDDLTaskList?: string(name='dqlAssociationDDLTaskList'),
  dqlRelateTargetDatasourceId?: string(name='dqlRelateTargetDatasourceId'),
  dqlTestDatasourceId?: string(name='dqlTestDatasourceId'),
  dqlTestProject?: string(name='dqlTestProject'),
  fileName?: string(name='fileName'),
  globalParams?: string(name='globalParams'),
  identifier?: string(name='identifier'),
  ossObjectName?: string(name='ossObjectName'),
  realFileName?: string(name='realFileName'),
  relatedDdlContentOssFileName?: string(name='relatedDdlContentOssFileName'),
  relatedDdlContentOssObjectName?: string(name='relatedDdlContentOssObjectName'),
  relatedDdlContentRealFileName?: string(name='relatedDdlContentRealFileName'),
  sourceDatasourceId?: string(name='sourceDatasourceId'),
  sourceDialect?: string(name='sourceDialect', description='This parameter is required.'),
  sourceProject?: string(name='sourceProject'),
  tableNameMappingFile?: any(name='tableNameMappingFile'),
  tableNameOssFileName?: string(name='tableNameOssFileName'),
  tableNameOssObjectName?: string(name='tableNameOssObjectName'),
  tableNameRealFileName?: string(name='tableNameRealFileName'),
  targetDatasourceId?: string(name='targetDatasourceId'),
  targetDialect?: string(name='targetDialect', description='This parameter is required.'),
  targetProject?: string(name='targetProject'),
  taskDescription?: string(name='taskDescription'),
  taskId?: long(name='taskId'),
  taskName?: string(name='taskName', description='This parameter is required.'),
  taskType?: int32(name='taskType', description='This parameter is required.'),
  tenantId?: string(name='tenantId'),
  transformSchema?: string(name='transformSchema'),
  uid?: string(name='uid'),
}

model PopEditTaskResponseBody = {
  data?: long(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  success?: boolean(name='success'),
}

model PopEditTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PopEditTaskResponseBody(name='body'),
}

/**
 * @summary 编辑sql转换任务
 *
 * @param request PopEditTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PopEditTaskResponse
 */
async function popEditTaskWithOptions(request: PopEditTaskRequest, headers: map[string]string, runtime: $RuntimeOptions): PopEditTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.configuration)) {
    body['configuration'] = request.configuration;
  }
  if (!$isNull(request.dataTypeMappingFile)) {
    body['dataTypeMappingFile'] = request.dataTypeMappingFile;
  }
  if (!$isNull(request.dataTypeOssFileName)) {
    body['dataTypeOssFileName'] = request.dataTypeOssFileName;
  }
  if (!$isNull(request.dataTypeOssObjectName)) {
    body['dataTypeOssObjectName'] = request.dataTypeOssObjectName;
  }
  if (!$isNull(request.dataTypeRealFileName)) {
    body['dataTypeRealFileName'] = request.dataTypeRealFileName;
  }
  if (!$isNull(request.dqlAssociationDDLTaskList)) {
    body['dqlAssociationDDLTaskList'] = request.dqlAssociationDDLTaskList;
  }
  if (!$isNull(request.dqlRelateTargetDatasourceId)) {
    body['dqlRelateTargetDatasourceId'] = request.dqlRelateTargetDatasourceId;
  }
  if (!$isNull(request.dqlTestDatasourceId)) {
    body['dqlTestDatasourceId'] = request.dqlTestDatasourceId;
  }
  if (!$isNull(request.dqlTestProject)) {
    body['dqlTestProject'] = request.dqlTestProject;
  }
  if (!$isNull(request.fileName)) {
    body['fileName'] = request.fileName;
  }
  if (!$isNull(request.globalParams)) {
    body['globalParams'] = request.globalParams;
  }
  if (!$isNull(request.identifier)) {
    body['identifier'] = request.identifier;
  }
  if (!$isNull(request.ossObjectName)) {
    body['ossObjectName'] = request.ossObjectName;
  }
  if (!$isNull(request.realFileName)) {
    body['realFileName'] = request.realFileName;
  }
  if (!$isNull(request.relatedDdlContentOssFileName)) {
    body['relatedDdlContentOssFileName'] = request.relatedDdlContentOssFileName;
  }
  if (!$isNull(request.relatedDdlContentOssObjectName)) {
    body['relatedDdlContentOssObjectName'] = request.relatedDdlContentOssObjectName;
  }
  if (!$isNull(request.relatedDdlContentRealFileName)) {
    body['relatedDdlContentRealFileName'] = request.relatedDdlContentRealFileName;
  }
  if (!$isNull(request.sourceDatasourceId)) {
    body['sourceDatasourceId'] = request.sourceDatasourceId;
  }
  if (!$isNull(request.sourceDialect)) {
    body['sourceDialect'] = request.sourceDialect;
  }
  if (!$isNull(request.sourceProject)) {
    body['sourceProject'] = request.sourceProject;
  }
  if (!$isNull(request.tableNameMappingFile)) {
    body['tableNameMappingFile'] = request.tableNameMappingFile;
  }
  if (!$isNull(request.tableNameOssFileName)) {
    body['tableNameOssFileName'] = request.tableNameOssFileName;
  }
  if (!$isNull(request.tableNameOssObjectName)) {
    body['tableNameOssObjectName'] = request.tableNameOssObjectName;
  }
  if (!$isNull(request.tableNameRealFileName)) {
    body['tableNameRealFileName'] = request.tableNameRealFileName;
  }
  if (!$isNull(request.targetDatasourceId)) {
    body['targetDatasourceId'] = request.targetDatasourceId;
  }
  if (!$isNull(request.targetDialect)) {
    body['targetDialect'] = request.targetDialect;
  }
  if (!$isNull(request.targetProject)) {
    body['targetProject'] = request.targetProject;
  }
  if (!$isNull(request.taskDescription)) {
    body['taskDescription'] = request.taskDescription;
  }
  if (!$isNull(request.taskId)) {
    body['taskId'] = request.taskId;
  }
  if (!$isNull(request.taskName)) {
    body['taskName'] = request.taskName;
  }
  if (!$isNull(request.taskType)) {
    body['taskType'] = request.taskType;
  }
  if (!$isNull(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  if (!$isNull(request.transformSchema)) {
    body['transformSchema'] = request.transformSchema;
  }
  if (!$isNull(request.uid)) {
    body['uid'] = request.uid;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PopEditTask',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/api/bigdata/jobMigrate/sqlTranslator/task/popEdit`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 编辑sql转换任务
 *
 * @param request PopEditTaskRequest
 * @return PopEditTaskResponse
 */
async function popEditTask(request: PopEditTaskRequest): PopEditTaskResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return popEditTaskWithOptions(request, headers, runtime);
}

model RecoverMigrationJobRequest {
  id?: long(name='id'),
}

model RecoverMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model RecoverMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverMigrationJobResponseBody(name='body'),
}

/**
 * @summary 恢复删除任务
 *
 * @param request RecoverMigrationJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecoverMigrationJobResponse
 */
async function recoverMigrationJobWithOptions(request: RecoverMigrationJobRequest, headers: map[string]string, runtime: $RuntimeOptions): RecoverMigrationJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.id)) {
    query['id'] = request.id;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecoverMigrationJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/recover-migration-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 恢复删除任务
 *
 * @param request RecoverMigrationJobRequest
 * @return RecoverMigrationJobResponse
 */
async function recoverMigrationJob(request: RecoverMigrationJobRequest): RecoverMigrationJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return recoverMigrationJobWithOptions(request, headers, runtime);
}

model SingleScriptSyncTranslateRequest {
  sourceDialect?: string(name='sourceDialect'),
  sourceSqlScript?: string(name='sourceSqlScript'),
  tableMapping?: [ string ](name='tableMapping'),
  targetDialect?: string(name='targetDialect'),
}

model SingleScriptSyncTranslateResponseBody = {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model SingleScriptSyncTranslateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SingleScriptSyncTranslateResponseBody(name='body'),
}

/**
 * @summary 此接口不直接前端使用，供外部调用的接口，可在此接口上做权限校验以及限流
 *
 * @param request SingleScriptSyncTranslateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SingleScriptSyncTranslateResponse
 */
async function singleScriptSyncTranslateWithOptions(request: SingleScriptSyncTranslateRequest, headers: map[string]string, runtime: $RuntimeOptions): SingleScriptSyncTranslateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.sourceDialect)) {
    body['sourceDialect'] = request.sourceDialect;
  }
  if (!$isNull(request.sourceSqlScript)) {
    body['sourceSqlScript'] = request.sourceSqlScript;
  }
  if (!$isNull(request.tableMapping)) {
    body['tableMapping'] = request.tableMapping;
  }
  if (!$isNull(request.targetDialect)) {
    body['targetDialect'] = request.targetDialect;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SingleScriptSyncTranslate',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/api/bigdata/sql-translator/open/single/translate-sync`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 此接口不直接前端使用，供外部调用的接口，可在此接口上做权限校验以及限流
 *
 * @param request SingleScriptSyncTranslateRequest
 * @return SingleScriptSyncTranslateResponse
 */
async function singleScriptSyncTranslate(request: SingleScriptSyncTranslateRequest): SingleScriptSyncTranslateResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return singleScriptSyncTranslateWithOptions(request, headers, runtime);
}

model StopSyncMigrationJobRequest {
  jobType?: string(name='jobType'),
  regionId?: string(name='regionId'),
}

model StopSyncMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model StopSyncMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSyncMigrationJobResponseBody(name='body'),
}

/**
 * @summary 断开同步任务
 *
 * @param request StopSyncMigrationJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopSyncMigrationJobResponse
 */
async function stopSyncMigrationJobWithOptions(request: StopSyncMigrationJobRequest, headers: map[string]string, runtime: $RuntimeOptions): StopSyncMigrationJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.jobType)) {
    query['jobType'] = request.jobType;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopSyncMigrationJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/unsync-migration-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 断开同步任务
 *
 * @param request StopSyncMigrationJobRequest
 * @return StopSyncMigrationJobResponse
 */
async function stopSyncMigrationJob(request: StopSyncMigrationJobRequest): StopSyncMigrationJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return stopSyncMigrationJobWithOptions(request, headers, runtime);
}

model SyncMigrationJobRequest {
  jobType?: string(name='jobType'),
  operationType?: string(name='operationType'),
  regionId?: string(name='regionId'),
  regions?: string(name='regions'),
}

model SyncMigrationJobResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  success?: boolean(name='Success'),
  error?: string(name='error'),
}

model SyncMigrationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncMigrationJobResponseBody(name='body'),
}

/**
 * @summary 同步迁移任务信息
 *
 * @param request SyncMigrationJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncMigrationJobResponse
 */
async function syncMigrationJobWithOptions(request: SyncMigrationJobRequest, headers: map[string]string, runtime: $RuntimeOptions): SyncMigrationJobResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.jobType)) {
    query['jobType'] = request.jobType;
  }
  if (!$isNull(request.operationType)) {
    query['operationType'] = request.operationType;
  }
  if (!$isNull(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!$isNull(request.regions)) {
    query['regions'] = request.regions;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SyncMigrationJob',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/okss-services/migration-job/sync-migration-job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 同步迁移任务信息
 *
 * @param request SyncMigrationJobRequest
 * @return SyncMigrationJobResponse
 */
async function syncMigrationJob(request: SyncMigrationJobRequest): SyncMigrationJobResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return syncMigrationJobWithOptions(request, headers, runtime);
}

model UpdatePushAppHeaders {
  commonHeaders?: map[string]string,
  tenantProxyUid?: string(name='tenant-proxy-uid'),
}

model UpdatePushAppRequest {
  appId?: long(name='AppId'),
  downloadLink?: string(name='DownloadLink'),
}

model UpdatePushAppResponseBody = {
  isDebugEnable?: boolean(name='IsDebugEnable'),
  requestId?: string(name='RequestId'),
  resultObj?: any(name='ResultObj'),
  success?: boolean(name='Success'),
  tipMsg?: string(name='TipMsg'),
}

model UpdatePushAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePushAppResponseBody(name='body'),
}

/**
 * @summary 更新push
 *
 * @param request UpdatePushAppRequest
 * @param headers UpdatePushAppHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePushAppResponse
 */
async function updatePushAppWithOptions(request: UpdatePushAppRequest, headers: UpdatePushAppHeaders, runtime: $RuntimeOptions): UpdatePushAppResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.downloadLink)) {
    body['DownloadLink'] = request.downloadLink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.tenantProxyUid)) {
    realHeaders['tenant-proxy-uid'] = $string(headers.tenantProxyUid);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdatePushApp',
    version = '2022-03-31',
    protocol = 'HTTPS',
    pathname = `/abm/app/manager/api/v1/push`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新push
 *
 * @param request UpdatePushAppRequest
 * @return UpdatePushAppResponse
 */
async function updatePushApp(request: UpdatePushAppRequest): UpdatePushAppResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new UpdatePushAppHeaders{};
  return updatePushAppWithOptions(request, headers, runtime);
}

