/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DlfNext';
  @version = '2025-03-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Catalog {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  status?: string(name='status'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model DataField {
  description?: string(name='description'),
  id?: int32(name='id'),
  name?: string(name='name'),
  type?: FullDataType(name='type'),
}

model Database {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  location?: string(name='location'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model ErrorResponse {
  code?: int32(name='code'),
  message?: string(name='message'),
  resourceName?: string(name='resourceName'),
  resourceType?: string(name='resourceType'),
}

model FailurePermission {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  permission?: Permission(name='permission'),
}

model FullDataType {
  element?: FullDataType(name='element'),
  fields?: [
    DataField
  ](name='fields'),
  key?: FullDataType(name='key'),
  type?: string(name='type'),
  value?: FullDataType(name='value'),
}

model FullSchemaChange {
  action?: string(name='action'),
  comment?: string(name='comment', description='required in UpdateComment/AddColumn'),
  dataType?: FullDataType(name='dataType'),
  fieldNames?: [ string ](name='fieldNames', description='required in AddColumn/RenameColumn/DropColumn/UpdateColumnComment/UpdateColumnType/UpdateColumnNullability'),
  keepNullability?: boolean(name='keepNullability', description='required in UpdateColumnType'),
  key?: string(name='key', description='required in SetOption/RemoveOption'),
  move?: Move(name='move'),
  newComment?: string(name='newComment', description='required in UpdateColumnComment'),
  newDataType?: FullDataType(name='newDataType'),
  newName?: string(name='newName', description='required in RenameColumn'),
  newNullability?: boolean(name='newNullability', description='required in UpdateColumnNullability'),
  value?: string(name='value', description='required in SetOption'),
}

model Identifier {
  database?: string(name='database'),
  object?: string(name='object'),
}

model Move {
  fieldName?: string(name='fieldName'),
  referenceFieldName?: string(name='referenceFieldName'),
  type?: string(name='type'),
}

model Partition {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  done?: boolean(name='done'),
  fileCount?: long(name='fileCount'),
  fileSizeInBytes?: long(name='fileSizeInBytes'),
  lastFileCreationTime?: long(name='lastFileCreationTime'),
  recordCount?: long(name='recordCount'),
  spec?: map[string]any(name='spec'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model Permission {
  access?: string(name='access'),
  database?: string(name='database'),
  principal?: string(name='principal'),
  resourceType?: string(name='resourceType'),
  table?: string(name='table'),
}

model Role {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  description?: string(name='description'),
  displayName?: string(name='displayName'),
  isPredefined?: string(name='isPredefined'),
  roleName?: string(name='roleName'),
  rolePrincipal?: string(name='rolePrincipal'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  users?: [
    User
  ](name='users'),
}

model Schema {
  comment?: string(name='comment'),
  fields?: [
    DataField
  ](name='fields'),
  options?: map[string]string(name='options'),
  partitionKeys?: [ string ](name='partitionKeys'),
  primaryKeys?: [ string ](name='primaryKeys'),
}

model Snapshot {
  baseManifestList?: string(name='baseManifestList'),
  changelogManifestList?: string(name='changelogManifestList'),
  changelogRecordCount?: long(name='changelogRecordCount'),
  commitIdentifier?: long(name='commitIdentifier'),
  commitKind?: string(name='commitKind'),
  commitUser?: string(name='commitUser'),
  deltaManifestList?: string(name='deltaManifestList'),
  deltaRecordCount?: long(name='deltaRecordCount'),
  id?: long(name='id'),
  indexManifest?: string(name='indexManifest'),
  logOffsets?: map[string]long(name='logOffsets'),
  schemaId?: long(name='schemaId'),
  statistics?: string(name='statistics'),
  timeMillis?: long(name='timeMillis'),
  totalRecordCount?: long(name='totalRecordCount'),
  version?: int32(name='version'),
  watermark?: long(name='watermark'),
}

model Table {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  isExternal?: boolean(name='isExternal'),
  name?: string(name='name'),
  owner?: string(name='owner'),
  path?: string(name='path'),
  schema?: Schema(name='schema'),
  schemaId?: long(name='schemaId'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model TableSnapshot {
  fileCount?: long(name='fileCount'),
  fileSizeInBytes?: long(name='fileSizeInBytes'),
  lastFileCreationTime?: long(name='lastFileCreationTime'),
  recordCount?: long(name='recordCount'),
  snapshot?: Snapshot(name='snapshot'),
}

model User {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  displayName?: string(name='displayName'),
  type?: string(name='type'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  userId?: string(name='userId'),
  userName?: string(name='userName'),
  userPrincipal?: string(name='userPrincipal'),
}

model AlterCatalogRequest {
  catalog: string(name='catalog', description='This parameter is required.', example='clg-paimon-xxxx', position='Path'),
  removals?: [ string ](name='removals', position='Body'),
  updates?: map[string]string(name='updates', position='Body'),
}

model AlterCatalogResponseBody = {
  missing?: [ string ](name='missing'),
  removed?: [ string ](name='removed'),
  updated?: [ string ](name='updated'),
}

model AlterCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterCatalogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AlterCatalog  AlterCatalogRequest
  * @return AlterCatalogResponse
 */
async function alterCatalog(request: AlterCatalogRequest): AlterCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AlterCatalog', 'POST', '/dlf/v1/catalogs/{catalog}', 'json', false, 'json', request);
}

model BatchGrantPermissionsRequest {
  catalogId?: string(name='catalogId', example='clg-paimon-xxxx', position='Path'),
  permissions?: [
    Permission
  ](name='permissions', position='Body'),
}

model BatchGrantPermissionsResponseBody = {
  errorMessage?: string(name='errorMessage'),
  failurePermissions?: [
    FailurePermission
  ](name='failurePermissions'),
  success?: boolean(name='success', example='True'),
}

model BatchGrantPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGrantPermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGrantPermissions  BatchGrantPermissionsRequest
  * @return BatchGrantPermissionsResponse
 */
async function batchGrantPermissions(request: BatchGrantPermissionsRequest): BatchGrantPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGrantPermissions', 'POST', '/dlf/v1/auth/permissions/{catalogId}/batchgrant', 'json', false, 'json', request);
}

model BatchRevokePermissionsRequest {
  catalogId?: string(name='catalogId', example='clg-paimon-xxxx', position='Path'),
  permissions?: [
    Permission
  ](name='permissions', position='Body'),
}

model BatchRevokePermissionsResponseBody = {
  errorMessage?: string(name='errorMessage'),
  failurePermissions?: [
    FailurePermission
  ](name='failurePermissions'),
  success?: boolean(name='success', example='true'),
}

model BatchRevokePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRevokePermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchRevokePermissions  BatchRevokePermissionsRequest
  * @return BatchRevokePermissionsResponse
 */
async function batchRevokePermissions(request: BatchRevokePermissionsRequest): BatchRevokePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchRevokePermissions', 'POST', '/dlf/v1/auth/permissions/{catalogId}/batchrevoke', 'json', false, 'json', request);
}

model CreateCatalogRequest {
  name?: string(name='name', example='catalog_demo', position='Body'),
  optimizationConfig?: map[string]string(name='optimizationConfig', position='Body'),
  options?: map[string]string(name='options', position='Body'),
}

model CreateCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateCatalog  CreateCatalogRequest
  * @return CreateCatalogResponse
 */
async function createCatalog(request: CreateCatalogRequest): CreateCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCatalog', 'POST', '/dlf/v1/catalogs', 'none', false, 'json', request);
}

model CreateRoleRequest {
  description?: string(name='description', example='role_description', position='Body'),
  displayName?: string(name='displayName', example='role_display_name', position='Body'),
  roleName?: string(name='roleName', example='role_name', position='Body'),
}

model CreateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateRole  CreateRoleRequest
  * @return CreateRoleResponse
 */
async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRole', 'POST', '/dlf/v1/auth/roles', 'none', false, 'json', request);
}

model DeleteRoleRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Query'),
}

model DeleteRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteRole  DeleteRoleRequest
  * @return DeleteRoleResponse
 */
async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRole', 'DELETE', '/dlf/v1/auth/roles', 'none', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      description?: string(name='description', description='The region description'),
      name?: string(name='name', description='The region name', example='cn-hangzhou'),
      showName?: string(name='showName', description='The region show name'),
      type?: string(name='type', description='The region type', example='region'),
    }
  ](name='regions'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/dlf/v1/service/regions', 'json', false, 'json', request);
}

model DropCatalogRequest {
  catalog: string(name='catalog', description='This parameter is required.', example='clg-paimon-xxxx', position='Path'),
}

model DropCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DropCatalog  DropCatalogRequest
  * @return DropCatalogResponse
 */
async function dropCatalog(request: DropCatalogRequest): DropCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DropCatalog', 'DELETE', '/dlf/v1/catalogs/{catalog}', 'none', false, 'json', request);
}

model GetCatalogRequest {
  catalog: string(name='catalog', description='This parameter is required.', example='clg-paimon-xxxx', position='Path'),
}

model GetCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Catalog  
}

/**
  * @param request  the request parameters of GetCatalog  GetCatalogRequest
  * @return GetCatalogResponse
 */
async function getCatalog(request: GetCatalogRequest): GetCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCatalog', 'GET', '/dlf/v1/catalogs/{catalog}', 'json', false, 'json', request);
}

model GetRegionStatusRequest {
}

model GetRegionStatusResponseBody = {
  serviceRoleExists?: boolean(name='serviceRoleExists', example='true'),
  status?: string(name='status', example='READY'),
}

model GetRegionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegionStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRegionStatus  GetRegionStatusRequest
  * @return GetRegionStatusResponse
 */
async function getRegionStatus(request: GetRegionStatusRequest): GetRegionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegionStatus', 'GET', '/dlf/v1/service/status', 'json', false, 'json', request);
}

model GetRoleRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Query'),
}

model GetRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Role  
}

/**
  * @param request  the request parameters of GetRole  GetRoleRequest
  * @return GetRoleResponse
 */
async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRole', 'GET', '/dlf/v1/auth/roles', 'json', false, 'json', request);
}

model GetUserRequest {
  userPrincipal?: string(name='userPrincipal', example='acs:ram::[accountId]:user/user_name', position='Query'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: User  
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'GET', '/dlf/v1/auth/users', 'json', false, 'json', request);
}

model GrantRoleToUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Body'),
  userPrincipals?: [ string ](name='userPrincipals', position='Body'),
}

model GrantRoleToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of GrantRoleToUsers  GrantRoleToUsersRequest
  * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsers(request: GrantRoleToUsersRequest): GrantRoleToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantRoleToUsers', 'POST', '/dlf/v1/auth/roles/grant', 'none', false, 'json', request);
}

model ListCatalogsRequest {
  catalogNamePattern?: string(name='catalogNamePattern', position='Query'),
  maxResults?: int32(name='maxResults', example='1000', position='Query'),
  pageToken?: string(name='pageToken', example='""', position='Query'),
}

model ListCatalogsResponseBody = {
  catalogs?: [
    Catalog
  ](name='catalogs'),
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
}

model ListCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCatalogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCatalogs  ListCatalogsRequest
  * @return ListCatalogsResponse
 */
async function listCatalogs(request: ListCatalogsRequest): ListCatalogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCatalogs', 'GET', '/dlf/v1/catalogs', 'json', false, 'json', request);
}

model ListPermissionsRequest {
  catalogId?: string(name='catalogId', example='clg-paimon-xxxx', position='Path'),
  database?: string(name='database', example='database_name', position='Query'),
  maxResults?: int32(name='maxResults', example='1000', position='Query'),
  pageToken?: string(name='pageToken', example='""', position='Query'),
  principal?: string(name='principal', example='acs:ram::[accountId]:user/user_name', position='Query'),
  resourceType: string(name='resourceType', description='This parameter is required.', example='CATALOG', position='Query'),
  table?: string(name='table', example='table_name', position='Query'),
}

model ListPermissionsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  permissions?: [
    Permission
  ](name='permissions'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPermissions  ListPermissionsRequest
  * @return ListPermissionsResponse
 */
async function listPermissions(request: ListPermissionsRequest): ListPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPermissions', 'GET', '/dlf/v1/auth/permissions/{catalogId}/list', 'json', false, 'json', request);
}

model ListRoleUsersRequest {
  maxResults?: string(name='maxResults', example='10', position='Query'),
  pageToken?: string(name='pageToken', example='""', position='Query'),
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Query'),
}

model ListRoleUsersResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  users?: [
    User
  ](name='users'),
}

model ListRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoleUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoleUsers  ListRoleUsersRequest
  * @return ListRoleUsersResponse
 */
async function listRoleUsers(request: ListRoleUsersRequest): ListRoleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRoleUsers', 'GET', '/dlf/v1/auth/roles/users/list', 'json', false, 'json', request);
}

model ListRolesRequest {
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  pageToken?: string(name='pageToken', example='""', position='Query'),
  roleName?: string(name='roleName', example='role_name', position='Query'),
}

model ListRolesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  roles?: [
    Role
  ](name='roles'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoles  ListRolesRequest
  * @return ListRolesResponse
 */
async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRoles', 'GET', '/dlf/v1/auth/roles/list', 'json', false, 'json', request);
}

model ListUserRolesRequest {
  maxResults?: string(name='maxResults', example='10', position='Query'),
  pageToken?: string(name='pageToken', example='""', position='Query'),
  userPrincipal?: string(name='userPrincipal', example='acs:ram::[accountId]:user/user_name', position='Query'),
}

model ListUserRolesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  roles?: [
    Role
  ](name='roles'),
}

model ListUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserRoles  ListUserRolesRequest
  * @return ListUserRolesResponse
 */
async function listUserRoles(request: ListUserRolesRequest): ListUserRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserRoles', 'GET', '/dlf/v1/auth/users/roles/list', 'json', false, 'json', request);
}

model ListUsersRequest {
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  pageToken?: string(name='pageToken', example='""', position='Query'),
  type?: string(name='type', example='RAM_USER', position='Query'),
  userName?: string(name='userName', example='user_name', position='Query'),
}

model ListUsersResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  users?: [
    User
  ](name='users'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'GET', '/dlf/v1/auth/users/list', 'json', false, 'json', request);
}

model RevokeRoleFromUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Body'),
  userPrincipals?: [ string ](name='userPrincipals', position='Body'),
}

model RevokeRoleFromUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of RevokeRoleFromUsers  RevokeRoleFromUsersRequest
  * @return RevokeRoleFromUsersResponse
 */
async function revokeRoleFromUsers(request: RevokeRoleFromUsersRequest): RevokeRoleFromUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeRoleFromUsers', 'POST', '/dlf/v1/auth/roles/revoke', 'none', false, 'json', request);
}

model SubscribeRequest {
}

model SubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of Subscribe  SubscribeRequest
  * @return SubscribeResponse
 */
async function subscribe(request: SubscribeRequest): SubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Subscribe', 'POST', '/dlf/v1/service/subscribe', 'none', false, 'json', request);
}

model UpdateRoleRequest {
  description?: string(name='description', example='role_description', position='Body'),
  displayName?: string(name='displayName', example='role_display_name', position='Body'),
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Body'),
}

model UpdateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateRole  UpdateRoleRequest
  * @return UpdateRoleResponse
 */
async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRole', 'PUT', '/dlf/v1/auth/roles', 'none', false, 'json', request);
}

model UpdateRoleUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name', position='Body'),
  userPrincipals?: [ string ](name='userPrincipals', position='Body'),
}

model UpdateRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateRoleUsers  UpdateRoleUsersRequest
  * @return UpdateRoleUsersResponse
 */
async function updateRoleUsers(request: UpdateRoleUsersRequest): UpdateRoleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRoleUsers', 'PUT', '/dlf/v1/auth/roles/users', 'none', false, 'json', request);
}

