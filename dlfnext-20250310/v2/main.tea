/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dlfnext', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Catalog {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  isShared?: boolean(name='isShared'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  shareId?: string(name='shareId'),
  status?: string(name='status'),
  type?: string(name='type'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model CatalogSummary {
  apiVisitCountMonthly?: long(name='apiVisitCountMonthly'),
  databaseCount?: MoMValues(name='databaseCount'),
  fileAccessCountMonthly?: long(name='fileAccessCountMonthly'),
  generatedDate?: string(name='generatedDate', description='Update date of the statistics'),
  objTypeArchiveSize?: long(name='objTypeArchiveSize'),
  objTypeColdArchiveSize?: long(name='objTypeColdArchiveSize'),
  objTypeIaSize?: long(name='objTypeIaSize'),
  objTypeStandardSize?: long(name='objTypeStandardSize'),
  partitionCount?: MoMValues(name='partitionCount'),
  tableCount?: MoMValues(name='tableCount'),
  throughputMonthly?: long(name='throughputMonthly'),
  totalFileCount?: MoMValues(name='totalFileCount'),
  totalFileSizeInBytes?: MoMValues(name='totalFileSizeInBytes'),
  totalMetaSizeInBytes?: MoMValues(name='totalMetaSizeInBytes'),
}

model CatalogSummaryTrend {
  apiVisitCount?: [
    DateSummary
  ](name='apiVisitCount', description='API visit count trends'),
  fileAccessCount?: [
    DateSummary
  ](name='fileAccessCount', description='file access count trends'),
  throughput?: [
    DateSummary
  ](name='throughput', description='Table count trends'),
  totalFileCount?: [
    DateSummary
  ](name='totalFileCount', description='Historical total file count'),
  totalFileSizeInBytes?: [
    DateSummary
  ](name='totalFileSizeInBytes', description='Database count trends'),
  totalMetaCount?: [
    DateSummary
  ](name='totalMetaCount', description='Latest snapshot file count'),
}

model DataField {
  description?: string(name='description'),
  id?: int32(name='id'),
  name?: string(name='name'),
  type?: FullDataType(name='type'),
}

model Database {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  location?: string(name='location'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model DatabaseSummary {
  createdAt?: long(name='createdAt', description='Creation timestamp in milliseconds'),
  databaseName?: string(name='databaseName', description='库名 - Database name'),
  generatedDate?: string(name='generatedDate', description='Last profile update date in format yyyyMMdd'),
  location?: string(name='location', description='Storage location URI'),
  objTypeArchiveSize?: long(name='objTypeArchiveSize'),
  objTypeColdArchiveSize?: long(name='objTypeColdArchiveSize'),
  objTypeIaSize?: long(name='objTypeIaSize'),
  objTypeStandardSize?: long(name='objTypeStandardSize'),
  partitionCount?: long(name='partitionCount'),
  tableCount?: long(name='tableCount', description='Total storage in bytes'),
  totalFileCount?: long(name='totalFileCount'),
  totalFileSizeInBytes?: long(name='totalFileSizeInBytes', description='Total file count'),
  totalMetaSizeInBytes?: long(name='totalMetaSizeInBytes'),
}

model DateSummary {
  date?: string(name='date'),
  value?: long(name='value', description='Metric value at corresponding date'),
}

model ErrorResponse {
  code?: int32(name='code'),
  message?: string(name='message'),
  resourceName?: string(name='resourceName'),
  resourceType?: string(name='resourceType'),
}

model FailurePermission {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  permission?: Permission(name='permission'),
}

model FullDataType {
  element?: FullDataType(name='element'),
  fields?: [
    DataField
  ](name='fields'),
  key?: FullDataType(name='key'),
  type?: string(name='type'),
  value?: FullDataType(name='value'),
}

model FullInstant {
  snapshotId?: long(name='snapshotId'),
  tagName?: string(name='tagName'),
  type?: string(name='type'),
}

model FullSchemaChange {
  action?: string(name='action'),
  comment?: string(name='comment', description='required in UpdateComment/AddColumn'),
  dataType?: FullDataType(name='dataType'),
  fieldNames?: [ string ](name='fieldNames', description='required in AddColumn/RenameColumn/DropColumn/UpdateColumnComment/UpdateColumnType/UpdateColumnNullability'),
  keepNullability?: boolean(name='keepNullability', description='required in UpdateColumnType'),
  key?: string(name='key', description='required in SetOption/RemoveOption'),
  move?: Move(name='move'),
  newComment?: string(name='newComment', description='required in UpdateColumnComment'),
  newDataType?: FullDataType(name='newDataType'),
  newName?: string(name='newName', description='required in RenameColumn'),
  newNullability?: boolean(name='newNullability', description='required in UpdateColumnNullability'),
  value?: string(name='value', description='required in SetOption'),
}

model Function {
  comment?: string(name='comment'),
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  definitions?: map[string]FunctionDefinition(name='definitions'),
  deterministic?: boolean(name='deterministic'),
  id?: string(name='id'),
  inputParams?: [
    DataField
  ](name='inputParams'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  returnParams?: [
    DataField
  ](name='returnParams'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model FunctionChange {
  action?: string(name='action'),
  comment?: string(name='comment', description='required in UpdateFunctionComment'),
  definition?: FunctionDefinition(name='definition', description='required in AddDefinition/UpdateDefinition'),
  key?: string(name='key', description='required in SetFunctionOption/RemoveFunctionOption'),
  name?: string(name='name', description='required in AddDefinition/UpdateDefinition/DropDefinition'),
  value?: string(name='value', description='required in SetFunctionOption'),
}

model FunctionDefinition {
  className?: string(name='className', description='required in FileFunctionDefinition'),
  definition?: string(name='definition', description='required in SQLFunctionDefinition/LambdaFunctionDefinition'),
  fileResources?: [
    FunctionFileResource
  ](name='fileResources', description='required in FileFunctionDefinition'),
  functionName?: string(name='functionName', description='required in FileFunctionDefinition'),
  language?: string(name='language', description='required in LambdaFunctionDefinition/FileFunctionDefinition'),
  type?: string(name='type'),
}

model FunctionFileResource {
  resourceType?: string(name='resourceType'),
  uri?: string(name='uri'),
}

model IcebergNestedField {
  doc?: string(name='doc'),
  id?: long(name='id'),
  name?: string(name='name'),
  optional?: boolean(name='optional'),
  type?: string(name='type'),
}

model IcebergPartitionField {
  fieldId?: long(name='fieldId'),
  name?: string(name='name'),
  sourceId?: long(name='sourceId'),
  transform?: string(name='transform'),
}

model IcebergSnapshot {
  addedRows?: long(name='addedRows'),
  id?: long(name='id'),
  idString?: string(name='idString'),
  operation?: string(name='operation'),
  parentId?: long(name='parentId'),
  parentIdString?: string(name='parentIdString'),
  schemaId?: long(name='schemaId'),
  sequenceNumber?: long(name='sequenceNumber'),
  summary?: map[string]string(name='summary'),
  timestampMillis?: long(name='timestampMillis'),
}

model IcebergTable {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  icebergTableMetadata?: IcebergTableMetadata(name='icebergTableMetadata'),
  id?: string(name='id'),
  name?: string(name='name'),
  owner?: string(name='owner'),
  path?: string(name='path'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  version?: long(name='version'),
}

model IcebergTableMetadata {
  currentSnapshot?: IcebergSnapshot(name='currentSnapshot'),
  fields?: [
    IcebergNestedField
  ](name='fields'),
  identifierFieldIds?: [ int32 ](name='identifierFieldIds'),
  partitionFields?: [
    IcebergPartitionField
  ](name='partitionFields'),
  properties?: map[string]string(name='properties'),
}

model Identifier {
  database?: string(name='database'),
  object?: string(name='object'),
}

model MoMValues {
  currentValue?: long(name='currentValue', description='total'),
  lastDayValue?: long(name='lastDayValue', description='daily addition'),
  lastMonthValue?: long(name='lastMonthValue', description='monthly addition'),
}

model Move {
  fieldName?: string(name='fieldName'),
  referenceFieldName?: string(name='referenceFieldName'),
  type?: string(name='type'),
}

model Namespace {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  location?: string(name='location'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model Partition {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  done?: boolean(name='done'),
  fileCount?: long(name='fileCount'),
  fileSizeInBytes?: long(name='fileSizeInBytes'),
  lastFileCreationTime?: long(name='lastFileCreationTime'),
  recordCount?: long(name='recordCount'),
  spec?: map[string]any(name='spec'),
  storageAction?: string(name='storageAction'),
  storageActionTimestamp?: long(name='storageActionTimestamp'),
  storageClass?: string(name='storageClass'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model PartitionSummaries {
  nextPageToken?: string(name='nextPageToken'),
  partitions?: [
    PartitionSummary
  ](name='partitions', description='Current page of partition profiles'),
}

model PartitionSummary {
  createdAt?: long(name='createdAt', description='Partition creation timestamp in milliseconds'),
  databaseName?: string(name='databaseName', description='Database name'),
  lastAccessTime?: long(name='lastAccessTime', description='Total files in partition'),
  partitionName?: string(name='partitionName', description='Partition identifier'),
  storageActionParams?: map[string]string(name='storageActionParams'),
  storageActionTimestamp?: long(name='storageActionTimestamp'),
  storageClass?: string(name='storageClass'),
  tableName?: string(name='tableName', description='Table name'),
  totalFileCount?: long(name='totalFileCount', description='24h access count'),
  totalFileSizeInBytes?: long(name='totalFileSizeInBytes', description='Last data access timestamp in milliseconds'),
  updatedAt?: long(name='updatedAt'),
}

model Permission {
  access?: string(name='access'),
  columns?: {
    columnNames?: [ string ](name='columnNames'),
    excludedColumnNames?: [ string ](name='excludedColumnNames'),
  }(name='columns'),
  database?: string(name='database'),
  function?: string(name='function'),
  principal?: string(name='principal'),
  resourceType?: string(name='resourceType'),
  table?: string(name='table'),
  view?: string(name='view'),
}

model ReceivedShare {
  catalogName?: string(name='catalogName'),
  comment?: string(name='comment'),
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  enableWrite?: boolean(name='enableWrite'),
  owner?: string(name='owner'),
  providerTenantId?: long(name='providerTenantId'),
  shareId?: string(name='shareId'),
  shareName?: string(name='shareName'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model Receiver {
  comment?: string(name='comment'),
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  receiverName?: string(name='receiverName'),
  receiverTenantId?: long(name='receiverTenantId'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model Role {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  description?: string(name='description'),
  displayName?: string(name='displayName'),
  isPredefined?: string(name='isPredefined'),
  roleName?: string(name='roleName'),
  rolePrincipal?: string(name='rolePrincipal'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  users?: [
    User
  ](name='users'),
}

model Schema {
  comment?: string(name='comment'),
  fields?: [
    DataField
  ](name='fields'),
  options?: map[string]string(name='options'),
  partitionKeys?: [ string ](name='partitionKeys'),
  primaryKeys?: [ string ](name='primaryKeys'),
}

model Share {
  comment?: string(name='comment'),
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  enableWrite?: boolean(name='enableWrite'),
  owner?: string(name='owner'),
  providerTenantId?: long(name='providerTenantId'),
  shareId?: string(name='shareId'),
  shareName?: string(name='shareName'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model ShareOptions {
  catalogSizeLimit?: int32(name='catalogSizeLimit'),
  receiverSizeLimit?: int32(name='receiverSizeLimit'),
  shareResourceSizeLimit?: int32(name='shareResourceSizeLimit'),
  shareSizeLimit?: int32(name='shareSizeLimit'),
}

model ShareResource {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  databaseName?: string(name='databaseName'),
  shareType?: string(name='shareType'),
  tableName?: string(name='tableName'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model Snapshot {
  baseManifestList?: string(name='baseManifestList'),
  changelogManifestList?: string(name='changelogManifestList', nullable=true),
  changelogRecordCount?: long(name='changelogRecordCount'),
  commitIdentifier?: long(name='commitIdentifier'),
  commitKind?: string(name='commitKind'),
  commitUser?: string(name='commitUser'),
  deltaManifestList?: string(name='deltaManifestList'),
  deltaRecordCount?: long(name='deltaRecordCount'),
  id?: long(name='id'),
  idString?: string(name='idString'),
  indexManifest?: string(name='indexManifest'),
  logOffsets?: map[string]long(name='logOffsets'),
  parentIdString?: string(name='parentIdString'),
  schemaId?: long(name='schemaId'),
  sequenceNumber?: long(name='sequenceNumber'),
  statistics?: string(name='statistics'),
  summary?: map[string]string(name='summary'),
  timeMillis?: long(name='timeMillis'),
  totalRecordCount?: long(name='totalRecordCount'),
  version?: int32(name='version', nullable=true),
  watermark?: long(name='watermark'),
}

model Table {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  icebergTableMetadata?: IcebergTableMetadata(name='icebergTableMetadata'),
  id?: string(name='id'),
  isExternal?: boolean(name='isExternal'),
  name?: string(name='name'),
  owner?: string(name='owner'),
  path?: string(name='path'),
  schema?: Schema(name='schema'),
  schemaId?: long(name='schemaId'),
  storageAction?: string(name='storageAction'),
  storageActionTimestamp?: long(name='storageActionTimestamp'),
  storageClass?: string(name='storageClass'),
  type?: string(name='type'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model TableCompaction {
  catalogId?: string(name='catalogId'),
  cuUsage?: double(name='cuUsage'),
  lastCompactedFileTime?: long(name='lastCompactedFileTime', deprecated=true, nullable=true),
  latencyFileEarliestTime?: long(name='latencyFileEarliestTime'),
  maxLevel0FileCount?: string(name='maxLevel0FileCount', deprecated=true, nullable=true),
  tableId?: string(name='tableId'),
}

model TableCompactionHistory {
  afterFilesCount?: long(name='afterFilesCount'),
  afterFilesSize?: long(name='afterFilesSize'),
  beforeFilesCount?: long(name='beforeFilesCount'),
  beforeFilesLastCreationTime?: long(name='beforeFilesLastCreationTime'),
  beforeFilesSize?: long(name='beforeFilesSize'),
  catalogId?: string(name='catalogId'),
  commitTime?: long(name='commitTime'),
  snapshotId?: long(name='snapshotId'),
  tableId?: string(name='tableId'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model TableSnapshot {
  fileCount?: long(name='fileCount'),
  fileSizeInBytes?: long(name='fileSizeInBytes'),
  lastFileCreationTime?: long(name='lastFileCreationTime'),
  recordCount?: long(name='recordCount'),
  snapshot?: Snapshot(name='snapshot'),
}

model TableSummary {
  createdAt?: long(name='createdAt', description='Latest snapshot storage size'),
  databaseName?: string(name='databaseName', description='Database name'),
  generatedDate?: string(name='generatedDate'),
  lastAccessTime?: long(name='lastAccessTime'),
  objTypeArchiveSize?: long(name='objTypeArchiveSize'),
  objTypeColdArchiveSize?: long(name='objTypeColdArchiveSize'),
  objTypeIaSize?: long(name='objTypeIaSize'),
  objTypeStandardSize?: long(name='objTypeStandardSize'),
  partitionCount?: long(name='partitionCount', description='Creation timestamp in milliseconds'),
  path?: string(name='path'),
  storageActionParams?: map[string]string(name='storageActionParams'),
  storageActionTimestamp?: long(name='storageActionTimestamp'),
  storageClass?: string(name='storageClass'),
  tableName?: string(name='tableName', description='Table name'),
  totalFileCount?: long(name='totalFileCount', description='30-day access count'),
  totalFileSizeInBytes?: long(name='totalFileSizeInBytes'),
  totalMetaSizeInBytes?: long(name='totalMetaSizeInBytes'),
  updatedAt?: long(name='updatedAt'),
}

model User {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  displayName?: string(name='displayName'),
  type?: string(name='type'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  userId?: string(name='userId'),
  userName?: string(name='userName'),
  userPrincipal?: string(name='userPrincipal'),
}

model View {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  name?: string(name='name'),
  owner?: string(name='owner'),
  schema?: ViewSchema(name='schema'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model ViewChange {
  action?: string(name='action'),
  comment?: string(name='comment', description='required in UpdateComment'),
  dialect?: string(name='dialect', description='required in AddDialect/UpdateDialect/DropDialect'),
  key?: string(name='key', description='required in SetOption/RemoveOption'),
  query?: string(name='query', description='required in AddDialect/UpdateDialect'),
  value?: string(name='value', description='required in SetOption'),
}

model ViewSchema {
  comment?: string(name='comment'),
  dialects?: map[string]string(name='dialects'),
  fields?: [
    DataField
  ](name='fields'),
  options?: map[string]string(name='options'),
  query?: string(name='query'),
}

model ViewSchemaChange {
  action?: string(name='action'),
  comment?: string(name='comment', description='required in UpdateComment'),
  dialect?: string(name='dialect', description='required in AddDialect/UpdateDialect/DropDialect'),
  key?: string(name='key', description='required in SetOption/RemoveOption'),
  query?: string(name='query', description='required in AddDialect/UpdateDialect'),
  value?: string(name='value', description='required in SetOption'),
}

model AlterCatalogRequest {
  removals?: [ string ](name='removals'),
  updates?: map[string]string(name='updates'),
}

model AlterCatalogResponseBody = {
  missing?: [ string ](name='missing'),
  removed?: [ string ](name='removed'),
  updated?: [ string ](name='updated'),
}

model AlterCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterCatalogResponseBody(name='body'),
}

/**
 * @summary 更新数据目录
 *
 * @param request AlterCatalogRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterCatalogResponse
 */
@context("alterCatalogWithContext")
async function alterCatalogWithOptions(catalog: string, request: AlterCatalogRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterCatalogResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.removals)) {
    body['removals'] = request.removals;
  }
  if (!$isNull(request.updates)) {
    body['updates'] = request.updates;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据目录
 *
 * @param request AlterCatalogRequest
 * @return AlterCatalogResponse
 */
async function alterCatalog(catalog: string, request: AlterCatalogRequest): AlterCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterCatalogWithOptions(catalog, request, headers, runtime);
}

model AlterDatabaseRequest {
  removals?: [ string ](name='removals'),
  updates?: map[string]string(name='updates'),
}

model AlterDatabaseResponseBody = {
  missing?: [ string ](name='missing'),
  removed?: [ string ](name='removed'),
  updated?: [ string ](name='updated'),
}

model AlterDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterDatabaseResponseBody(name='body'),
}

/**
 * @summary 更新数据库
 *
 * @param request AlterDatabaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterDatabaseResponse
 */
@context("alterDatabaseWithContext")
async function alterDatabaseWithOptions(catalogId: string, database: string, request: AlterDatabaseRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterDatabaseResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.removals)) {
    body['removals'] = request.removals;
  }
  if (!$isNull(request.updates)) {
    body['updates'] = request.updates;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterDatabase',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据库
 *
 * @param request AlterDatabaseRequest
 * @return AlterDatabaseResponse
 */
async function alterDatabase(catalogId: string, database: string, request: AlterDatabaseRequest): AlterDatabaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterDatabaseWithOptions(catalogId, database, request, headers, runtime);
}

model AlterReceiverRequest {
  comment?: string(name='comment'),
  receiverName?: string(name='receiverName', example='receiver_name'),
}

model AlterReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新接收者
 *
 * @param request AlterReceiverRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterReceiverResponse
 */
@context("alterReceiverWithContext")
async function alterReceiverWithOptions(receiver: string, request: AlterReceiverRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterReceiverResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['comment'] = request.comment;
  }
  if (!$isNull(request.receiverName)) {
    body['receiverName'] = request.receiverName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterReceiver',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/receivers/${$URL.percentEncode(receiver)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新接收者
 *
 * @param request AlterReceiverRequest
 * @return AlterReceiverResponse
 */
async function alterReceiver(receiver: string, request: AlterReceiverRequest): AlterReceiverResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterReceiverWithOptions(receiver, request, headers, runtime);
}

model AlterShareRequest {
  comment?: string(name='comment', example='description'),
  enableWrite?: boolean(name='enableWrite'),
  shareName?: string(name='shareName', example='share_name'),
}

model AlterShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新共享
 *
 * @param request AlterShareRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterShareResponse
 */
@context("alterShareWithContext")
async function alterShareWithOptions(share: string, request: AlterShareRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterShareResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['comment'] = request.comment;
  }
  if (!$isNull(request.enableWrite)) {
    body['enableWrite'] = request.enableWrite;
  }
  if (!$isNull(request.shareName)) {
    body['shareName'] = request.shareName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterShare',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新共享
 *
 * @param request AlterShareRequest
 * @return AlterShareResponse
 */
async function alterShare(share: string, request: AlterShareRequest): AlterShareResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterShareWithOptions(share, request, headers, runtime);
}

model AlterShareReceiversRequest {
  addedReceivers?: [ string ](name='addedReceivers'),
  removedReceivers?: [ string ](name='removedReceivers'),
}

model AlterShareReceiversResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新共享中的接收者
 *
 * @param request AlterShareReceiversRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterShareReceiversResponse
 */
@context("alterShareReceiversWithContext")
async function alterShareReceiversWithOptions(share: string, request: AlterShareReceiversRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterShareReceiversResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.addedReceivers)) {
    body['addedReceivers'] = request.addedReceivers;
  }
  if (!$isNull(request.removedReceivers)) {
    body['removedReceivers'] = request.removedReceivers;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterShareReceivers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}/receivers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新共享中的接收者
 *
 * @param request AlterShareReceiversRequest
 * @return AlterShareReceiversResponse
 */
async function alterShareReceivers(share: string, request: AlterShareReceiversRequest): AlterShareReceiversResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterShareReceiversWithOptions(share, request, headers, runtime);
}

model AlterShareResourcesRequest {
  catalogId?: string(name='catalogId', example='clg-paimon-xxxx'),
  shareResourceList?: [
    ShareResource
  ](name='shareResourceList'),
}

model AlterShareResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更改共享资源
 *
 * @param request AlterShareResourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterShareResourcesResponse
 */
@context("alterShareResourcesWithContext")
async function alterShareResourcesWithOptions(share: string, request: AlterShareResourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterShareResourcesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.catalogId)) {
    body['catalogId'] = request.catalogId;
  }
  if (!$isNull(request.shareResourceList)) {
    body['shareResourceList'] = request.shareResourceList;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterShareResources',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}/resources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更改共享资源
 *
 * @param request AlterShareResourcesRequest
 * @return AlterShareResourcesResponse
 */
async function alterShareResources(share: string, request: AlterShareResourcesRequest): AlterShareResourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterShareResourcesWithOptions(share, request, headers, runtime);
}

model AlterTableRequest {
  changes?: [
    FullSchemaChange
  ](name='changes'),
}

model AlterTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更改Table
 *
 * @param request AlterTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterTableResponse
 */
@context("alterTableWithContext")
async function alterTableWithOptions(catalogId: string, database: string, table: string, request: AlterTableRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.changes)) {
    body['changes'] = request.changes;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterTable',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更改Table
 *
 * @param request AlterTableRequest
 * @return AlterTableResponse
 */
async function alterTable(catalogId: string, database: string, table: string, request: AlterTableRequest): AlterTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterTableWithOptions(catalogId, database, table, request, headers, runtime);
}

model BatchGrantPermissionsRequest {
  permissions?: [
    Permission
  ](name='permissions'),
}

model BatchGrantPermissionsResponseBody = {
  errorMessage?: string(name='errorMessage'),
  failurePermissions?: [
    FailurePermission
  ](name='failurePermissions'),
  success?: boolean(name='success', example='True'),
}

model BatchGrantPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGrantPermissionsResponseBody(name='body'),
}

/**
 * @summary 批量授权
 *
 * @param request BatchGrantPermissionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGrantPermissionsResponse
 */
@context("batchGrantPermissionsWithContext")
async function batchGrantPermissionsWithOptions(catalogId: string, request: BatchGrantPermissionsRequest, headers: map[string]string, runtime: $RuntimeOptions): BatchGrantPermissionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.permissions)) {
    body['permissions'] = request.permissions;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchGrantPermissions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/permissions/${$URL.percentEncode(catalogId)}/batchgrant`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量授权
 *
 * @param request BatchGrantPermissionsRequest
 * @return BatchGrantPermissionsResponse
 */
async function batchGrantPermissions(catalogId: string, request: BatchGrantPermissionsRequest): BatchGrantPermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return batchGrantPermissionsWithOptions(catalogId, request, headers, runtime);
}

model BatchRevokePermissionsRequest {
  permissions?: [
    Permission
  ](name='permissions'),
}

model BatchRevokePermissionsResponseBody = {
  errorMessage?: string(name='errorMessage'),
  failurePermissions?: [
    FailurePermission
  ](name='failurePermissions'),
  success?: boolean(name='success', example='true'),
}

model BatchRevokePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRevokePermissionsResponseBody(name='body'),
}

/**
 * @summary 批量取消授权
 *
 * @param request BatchRevokePermissionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchRevokePermissionsResponse
 */
@context("batchRevokePermissionsWithContext")
async function batchRevokePermissionsWithOptions(catalogId: string, request: BatchRevokePermissionsRequest, headers: map[string]string, runtime: $RuntimeOptions): BatchRevokePermissionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.permissions)) {
    body['permissions'] = request.permissions;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchRevokePermissions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/permissions/${$URL.percentEncode(catalogId)}/batchrevoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量取消授权
 *
 * @param request BatchRevokePermissionsRequest
 * @return BatchRevokePermissionsResponse
 */
async function batchRevokePermissions(catalogId: string, request: BatchRevokePermissionsRequest): BatchRevokePermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return batchRevokePermissionsWithOptions(catalogId, request, headers, runtime);
}

model CreateCatalogRequest {
  isShared?: boolean(name='isShared'),
  name?: string(name='name', example='catalog_demo'),
  options?: map[string]string(name='options'),
  shareId?: string(name='shareId'),
  type?: string(name='type'),
}

model CreateCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建数据目录
 *
 * @param request CreateCatalogRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCatalogResponse
 */
@context("createCatalogWithContext")
async function createCatalogWithOptions(request: CreateCatalogRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateCatalogResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.isShared)) {
    body['isShared'] = request.isShared;
  }
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.options)) {
    body['options'] = request.options;
  }
  if (!$isNull(request.shareId)) {
    body['shareId'] = request.shareId;
  }
  if (!$isNull(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据目录
 *
 * @param request CreateCatalogRequest
 * @return CreateCatalogResponse
 */
async function createCatalog(request: CreateCatalogRequest): CreateCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createCatalogWithOptions(request, headers, runtime);
}

model CreateDatabaseRequest {
  name?: string(name='name', example='database_name'),
  options?: map[string]string(name='options'),
}

model CreateDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建数据库
 *
 * @param request CreateDatabaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDatabaseResponse
 */
@context("createDatabaseWithContext")
async function createDatabaseWithOptions(catalogId: string, request: CreateDatabaseRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateDatabaseResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.options)) {
    body['options'] = request.options;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDatabase',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据库
 *
 * @param request CreateDatabaseRequest
 * @return CreateDatabaseResponse
 */
async function createDatabase(catalogId: string, request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createDatabaseWithOptions(catalogId, request, headers, runtime);
}

model CreateReceiverRequest {
  comment?: string(name='comment'),
  receiverName?: string(name='receiverName', example='receiver_name'),
  receiverTenantId?: long(name='receiverTenantId', example='1111'),
}

model CreateReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建接收者
 *
 * @param request CreateReceiverRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateReceiverResponse
 */
@context("createReceiverWithContext")
async function createReceiverWithOptions(request: CreateReceiverRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateReceiverResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['comment'] = request.comment;
  }
  if (!$isNull(request.receiverName)) {
    body['receiverName'] = request.receiverName;
  }
  if (!$isNull(request.receiverTenantId)) {
    body['receiverTenantId'] = request.receiverTenantId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateReceiver',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/receivers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建接收者
 *
 * @param request CreateReceiverRequest
 * @return CreateReceiverResponse
 */
async function createReceiver(request: CreateReceiverRequest): CreateReceiverResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createReceiverWithOptions(request, headers, runtime);
}

model CreateRoleRequest {
  description?: string(name='description', example='role_description'),
  displayName?: string(name='displayName', example='role_display_name'),
  roleName?: string(name='roleName', example='role_name'),
}

model CreateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建角色
 *
 * @param request CreateRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoleResponse
 */
@context("createRoleWithContext")
async function createRoleWithOptions(request: CreateRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateRoleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.roleName)) {
    body['roleName'] = request.roleName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建角色
 *
 * @param request CreateRoleRequest
 * @return CreateRoleResponse
 */
async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createRoleWithOptions(request, headers, runtime);
}

model CreateShareRequest {
  comment?: string(name='comment', example='demo'),
  enableWrite?: boolean(name='enableWrite'),
  shareName?: string(name='shareName', description='This parameter is required.', example='share_name'),
}

model CreateShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建共享
 *
 * @param request CreateShareRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateShareResponse
 */
@context("createShareWithContext")
async function createShareWithOptions(request: CreateShareRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateShareResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['comment'] = request.comment;
  }
  if (!$isNull(request.enableWrite)) {
    body['enableWrite'] = request.enableWrite;
  }
  if (!$isNull(request.shareName)) {
    body['shareName'] = request.shareName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateShare',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建共享
 *
 * @param request CreateShareRequest
 * @return CreateShareResponse
 */
async function createShare(request: CreateShareRequest): CreateShareResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createShareWithOptions(request, headers, runtime);
}

model CreateTableRequest {
  identifier?: Identifier(name='identifier'),
  schema?: Schema(name='schema'),
}

model CreateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建表
 *
 * @param request CreateTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTableResponse
 */
@context("createTableWithContext")
async function createTableWithOptions(catalogId: string, database: string, request: CreateTableRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.identifier)) {
    body['identifier'] = request.identifier;
  }
  if (!$isNull(request.schema)) {
    body['schema'] = request.schema;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateTable',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建表
 *
 * @param request CreateTableRequest
 * @return CreateTableResponse
 */
async function createTable(catalogId: string, database: string, request: CreateTableRequest): CreateTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createTableWithOptions(catalogId, database, request, headers, runtime);
}

model DeleteRoleRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model DeleteRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除角色
 *
 * @param request DeleteRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoleResponse
 */
@context("deleteRoleWithContext")
async function deleteRoleWithOptions(request: DeleteRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteRoleResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    query['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除角色
 *
 * @param request DeleteRoleRequest
 * @return DeleteRoleResponse
 */
async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRoleWithOptions(request, headers, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      description?: string(name='description', description='The region description'),
      name?: string(name='name', description='The region name', example='cn-hangzhou'),
      showName?: string(name='showName', description='The region show name'),
      type?: string(name='type', description='The region type', example='region'),
    }
  ](name='regions'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @summary 查询 DLF 开通地域
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
@context("describeRegionsWithContext")
async function describeRegionsWithOptions(headers: map[string]string, runtime: $RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRegions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/service/regions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询 DLF 开通地域
 *
 * @return DescribeRegionsResponse
 */
async function describeRegions(): DescribeRegionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionsWithOptions(headers, runtime);
}

model DropCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建数据湖Catalog
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropCatalogResponse
 */
@context("dropCatalogWithContext")
async function dropCatalogWithOptions(catalog: string, headers: map[string]string, runtime: $RuntimeOptions): DropCatalogResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DropCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据湖Catalog
 *
 * @return DropCatalogResponse
 */
async function dropCatalog(catalog: string): DropCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return dropCatalogWithOptions(catalog, headers, runtime);
}

model DropDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除数据库
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropDatabaseResponse
 */
@context("dropDatabaseWithContext")
async function dropDatabaseWithOptions(catalogId: string, database: string, headers: map[string]string, runtime: $RuntimeOptions): DropDatabaseResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DropDatabase',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据库
 *
 * @return DropDatabaseResponse
 */
async function dropDatabase(catalogId: string, database: string): DropDatabaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return dropDatabaseWithOptions(catalogId, database, headers, runtime);
}

model DropReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除接收者
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropReceiverResponse
 */
@context("dropReceiverWithContext")
async function dropReceiverWithOptions(receiver: string, headers: map[string]string, runtime: $RuntimeOptions): DropReceiverResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DropReceiver',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/receivers/${$URL.percentEncode(receiver)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除接收者
 *
 * @return DropReceiverResponse
 */
async function dropReceiver(receiver: string): DropReceiverResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return dropReceiverWithOptions(receiver, headers, runtime);
}

model DropShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除共享
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropShareResponse
 */
@context("dropShareWithContext")
async function dropShareWithOptions(share: string, headers: map[string]string, runtime: $RuntimeOptions): DropShareResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DropShare',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除共享
 *
 * @return DropShareResponse
 */
async function dropShare(share: string): DropShareResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return dropShareWithOptions(share, headers, runtime);
}

model DropTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropTableResponse
 */
@context("dropTableWithContext")
async function dropTableWithOptions(catalogId: string, database: string, table: string, headers: map[string]string, runtime: $RuntimeOptions): DropTableResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DropTable',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除表
 *
 * @return DropTableResponse
 */
async function dropTable(catalogId: string, database: string, table: string): DropTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return dropTableWithOptions(catalogId, database, table, headers, runtime);
}

model GetCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Catalog  
}

/**
 * @summary 查看数据湖Catalog
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogResponse
 */
@context("getCatalogWithContext")
async function getCatalogWithOptions(catalog: string, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据湖Catalog
 *
 * @return GetCatalogResponse
 */
async function getCatalog(catalog: string): GetCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogWithOptions(catalog, headers, runtime);
}

model GetCatalogByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Catalog  
}

/**
 * @summary 查看数据湖Catalog
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogByIdResponse
 */
@context("getCatalogByIdWithContext")
async function getCatalogByIdWithOptions(id: string, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogByIdResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogById',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/id/${$URL.percentEncode(id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据湖Catalog
 *
 * @return GetCatalogByIdResponse
 */
async function getCatalogById(id: string): GetCatalogByIdResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogByIdWithOptions(id, headers, runtime);
}

model GetCatalogSummaryRequest {
  date?: string(name='date'),
}

model GetCatalogSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CatalogSummary  
}

/**
 * @summary 查看表
 *
 * @param request GetCatalogSummaryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogSummaryResponse
 */
@context("getCatalogSummaryWithContext")
async function getCatalogSummaryWithOptions(catalogId: string, request: GetCatalogSummaryRequest, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogSummaryResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.date)) {
    query['date'] = request.date;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogSummary',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request GetCatalogSummaryRequest
 * @return GetCatalogSummaryResponse
 */
async function getCatalogSummary(catalogId: string, request: GetCatalogSummaryRequest): GetCatalogSummaryResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogSummaryWithOptions(catalogId, request, headers, runtime);
}

model GetCatalogSummaryTrendRequest {
  endDate?: string(name='endDate', description='This parameter is required.', example='2025-06-01'),
  startDate?: string(name='startDate', description='This parameter is required.', example='2025-05-01'),
}

model GetCatalogSummaryTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CatalogSummaryTrend  
}

/**
 * @summary 查看表
 *
 * @param request GetCatalogSummaryTrendRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogSummaryTrendResponse
 */
@context("getCatalogSummaryTrendWithContext")
async function getCatalogSummaryTrendWithOptions(catalogId: string, request: GetCatalogSummaryTrendRequest, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogSummaryTrendResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogSummaryTrend',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/storage-summary/trend`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request GetCatalogSummaryTrendRequest
 * @return GetCatalogSummaryTrendResponse
 */
async function getCatalogSummaryTrend(catalogId: string, request: GetCatalogSummaryTrendRequest): GetCatalogSummaryTrendResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogSummaryTrendWithOptions(catalogId, request, headers, runtime);
}

model GetCatalogTokenResponseBody = {
  expiresAtMillis?: long(name='expiresAtMillis', example='1749160909000'),
  token?: map[string]string(name='token'),
}

model GetCatalogTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCatalogTokenResponseBody(name='body'),
}

/**
 * @summary 获取数据湖Catalog的临时访问凭证
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogTokenResponse
 */
@context("getCatalogTokenWithContext")
async function getCatalogTokenWithOptions(catalog: string, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogTokenResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogToken',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}/token`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据湖Catalog的临时访问凭证
 *
 * @return GetCatalogTokenResponse
 */
async function getCatalogToken(catalog: string): GetCatalogTokenResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogTokenWithOptions(catalog, headers, runtime);
}

model GetDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Database  
}

/**
 * @summary 查看数据库
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatabaseResponse
 */
@context("getDatabaseWithContext")
async function getDatabaseWithOptions(catalogId: string, database: string, headers: map[string]string, runtime: $RuntimeOptions): GetDatabaseResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatabase',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据库
 *
 * @return GetDatabaseResponse
 */
async function getDatabase(catalogId: string, database: string): GetDatabaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatabaseWithOptions(catalogId, database, headers, runtime);
}

model GetDatabaseSummaryRequest {
  date?: string(name='date'),
}

model GetDatabaseSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DatabaseSummary  
}

/**
 * @summary 查看表
 *
 * @param request GetDatabaseSummaryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatabaseSummaryResponse
 */
@context("getDatabaseSummaryWithContext")
async function getDatabaseSummaryWithOptions(catalogId: string, database: string, request: GetDatabaseSummaryRequest, headers: map[string]string, runtime: $RuntimeOptions): GetDatabaseSummaryResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.date)) {
    query['date'] = request.date;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatabaseSummary',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request GetDatabaseSummaryRequest
 * @return GetDatabaseSummaryResponse
 */
async function getDatabaseSummary(catalogId: string, database: string, request: GetDatabaseSummaryRequest): GetDatabaseSummaryResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatabaseSummaryWithOptions(catalogId, database, request, headers, runtime);
}

model GetIcebergNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Namespace  
}

/**
 * @summary 查看iceberg数据库
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIcebergNamespaceResponse
 */
@context("getIcebergNamespaceWithContext")
async function getIcebergNamespaceWithOptions(catalogId: string, namespace: string, headers: map[string]string, runtime: $RuntimeOptions): GetIcebergNamespaceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIcebergNamespace',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/iceberg/dlf/v1/${$URL.percentEncode(catalogId)}/namespaces/${$URL.percentEncode(namespace)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看iceberg数据库
 *
 * @return GetIcebergNamespaceResponse
 */
async function getIcebergNamespace(catalogId: string, namespace: string): GetIcebergNamespaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getIcebergNamespaceWithOptions(catalogId, namespace, headers, runtime);
}

model GetIcebergTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IcebergTable  
}

/**
 * @summary 查看表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIcebergTableResponse
 */
@context("getIcebergTableWithContext")
async function getIcebergTableWithOptions(catalogId: string, namespace: string, table: string, headers: map[string]string, runtime: $RuntimeOptions): GetIcebergTableResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIcebergTable',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/iceberg/dlf/v1/${$URL.percentEncode(catalogId)}/namespaces/${$URL.percentEncode(namespace)}/tables/${$URL.percentEncode(table)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @return GetIcebergTableResponse
 */
async function getIcebergTable(catalogId: string, namespace: string, table: string): GetIcebergTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getIcebergTableWithOptions(catalogId, namespace, table, headers, runtime);
}

model GetReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Receiver  
}

/**
 * @summary 获取接收者
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReceiverResponse
 */
@context("getReceiverWithContext")
async function getReceiverWithOptions(receiver: string, headers: map[string]string, runtime: $RuntimeOptions): GetReceiverResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetReceiver',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/receivers/${$URL.percentEncode(receiver)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接收者
 *
 * @return GetReceiverResponse
 */
async function getReceiver(receiver: string): GetReceiverResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getReceiverWithOptions(receiver, headers, runtime);
}

model GetRegionStatusResponseBody = {
  serviceRoleExists?: boolean(name='serviceRoleExists', example='true'),
  status?: string(name='status', example='READY'),
}

model GetRegionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegionStatusResponseBody(name='body'),
}

/**
 * @summary 查询 DLF 当前地域开通状态
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRegionStatusResponse
 */
@context("getRegionStatusWithContext")
async function getRegionStatusWithOptions(headers: map[string]string, runtime: $RuntimeOptions): GetRegionStatusResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRegionStatus',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/service/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询 DLF 当前地域开通状态
 *
 * @return GetRegionStatusResponse
 */
async function getRegionStatus(): GetRegionStatusResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getRegionStatusWithOptions(headers, runtime);
}

model GetRoleRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model GetRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Role  
}

/**
 * @summary 获取角色
 *
 * @param request GetRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoleResponse
 */
@context("getRoleWithContext")
async function getRoleWithOptions(request: GetRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): GetRoleResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    query['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取角色
 *
 * @param request GetRoleRequest
 * @return GetRoleResponse
 */
async function getRole(request: GetRoleRequest): GetRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getRoleWithOptions(request, headers, runtime);
}

model GetShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Share  
}

/**
 * @summary 获取共享
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetShareResponse
 */
@context("getShareWithContext")
async function getShareWithOptions(share: string, headers: map[string]string, runtime: $RuntimeOptions): GetShareResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetShare',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取共享
 *
 * @return GetShareResponse
 */
async function getShare(share: string): GetShareResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getShareWithOptions(share, headers, runtime);
}

model GetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Table  
}

/**
 * @summary 查看表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableResponse
 */
@context("getTableWithContext")
async function getTableWithOptions(catalogId: string, database: string, table: string, headers: map[string]string, runtime: $RuntimeOptions): GetTableResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTable',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @return GetTableResponse
 */
async function getTable(catalogId: string, database: string, table: string): GetTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableWithOptions(catalogId, database, table, headers, runtime);
}

model GetTableCompactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TableCompaction  
}

/**
 * @summary 查看表Compaction详情
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableCompactionResponse
 */
@context("getTableCompactionWithContext")
async function getTableCompactionWithOptions(catalogId: string, database: string, table: string, headers: map[string]string, runtime: $RuntimeOptions): GetTableCompactionResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableCompaction',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/compaction`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表Compaction详情
 *
 * @return GetTableCompactionResponse
 */
async function getTableCompaction(catalogId: string, database: string, table: string): GetTableCompactionResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableCompactionWithOptions(catalogId, database, table, headers, runtime);
}

model GetTableSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TableSnapshot  
}

/**
 * @summary 查看表快照
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableSnapshotResponse
 */
@context("getTableSnapshotWithContext")
async function getTableSnapshotWithOptions(catalogId: string, database: string, table: string, headers: map[string]string, runtime: $RuntimeOptions): GetTableSnapshotResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableSnapshot',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/snapshot`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表快照
 *
 * @return GetTableSnapshotResponse
 */
async function getTableSnapshot(catalogId: string, database: string, table: string): GetTableSnapshotResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableSnapshotWithOptions(catalogId, database, table, headers, runtime);
}

model GetTableSummaryRequest {
  date?: string(name='date'),
}

model GetTableSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TableSummary  
}

/**
 * @summary 查看表
 *
 * @param request GetTableSummaryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableSummaryResponse
 */
@context("getTableSummaryWithContext")
async function getTableSummaryWithOptions(catalogId: string, database: string, table: string, request: GetTableSummaryRequest, headers: map[string]string, runtime: $RuntimeOptions): GetTableSummaryResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.date)) {
    query['date'] = request.date;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableSummary',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request GetTableSummaryRequest
 * @return GetTableSummaryResponse
 */
async function getTableSummary(catalogId: string, database: string, table: string, request: GetTableSummaryRequest): GetTableSummaryResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableSummaryWithOptions(catalogId, database, table, request, headers, runtime);
}

model GetTableTokenRequest {
  isInternal?: boolean(name='isInternal', example='true'),
}

model GetTableTokenResponseBody = {
  expiresAtMillis?: long(name='expiresAtMillis', example='1749160909000'),
  token?: map[string]string(name='token'),
}

model GetTableTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableTokenResponseBody(name='body'),
}

/**
 * @summary 获取数据湖表的临时访问凭证
 *
 * @param request GetTableTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableTokenResponse
 */
@context("getTableTokenWithContext")
async function getTableTokenWithOptions(catalogId: string, database: string, table: string, request: GetTableTokenRequest, headers: map[string]string, runtime: $RuntimeOptions): GetTableTokenResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.isInternal)) {
    query['isInternal'] = request.isInternal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableToken',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/token`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据湖表的临时访问凭证
 *
 * @param request GetTableTokenRequest
 * @return GetTableTokenResponse
 */
async function getTableToken(catalogId: string, database: string, table: string, request: GetTableTokenRequest): GetTableTokenResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableTokenWithOptions(catalogId, database, table, request, headers, runtime);
}

model GetUserRequest {
  userPrincipal?: string(name='userPrincipal', example='acs:ram::[accountId]:user/user_name'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: User  
}

/**
 * @summary 获取用户
 *
 * @param request GetUserRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserResponse
 */
@context("getUserWithContext")
async function getUserWithOptions(request: GetUserRequest, headers: map[string]string, runtime: $RuntimeOptions): GetUserResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.userPrincipal)) {
    query['userPrincipal'] = request.userPrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUser',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户
 *
 * @param request GetUserRequest
 * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserWithOptions(request, headers, runtime);
}

model GrantRoleToUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
  userPrincipals?: [ string ](name='userPrincipals'),
}

model GrantRoleToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 批量授予角色权限给用户
 *
 * @param request GrantRoleToUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantRoleToUsersResponse
 */
@context("grantRoleToUsersWithContext")
async function grantRoleToUsersWithOptions(request: GrantRoleToUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): GrantRoleToUsersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }
  if (!$isNull(request.userPrincipals)) {
    body['userPrincipals'] = request.userPrincipals;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GrantRoleToUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/grant`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量授予角色权限给用户
 *
 * @param request GrantRoleToUsersRequest
 * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsers(request: GrantRoleToUsersRequest): GrantRoleToUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return grantRoleToUsersWithOptions(request, headers, runtime);
}

model ListCatalogsRequest {
  catalogNamePattern?: string(name='catalogNamePattern'),
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListCatalogsResponseBody = {
  catalogs?: [
    Catalog
  ](name='catalogs'),
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
}

model ListCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCatalogsResponseBody(name='body'),
}

/**
 * @summary 查看数据目录列表
 *
 * @param request ListCatalogsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCatalogsResponse
 */
@context("listCatalogsWithContext")
async function listCatalogsWithOptions(request: ListCatalogsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListCatalogsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.catalogNamePattern)) {
    query['catalogNamePattern'] = request.catalogNamePattern;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCatalogs',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据目录列表
 *
 * @param request ListCatalogsRequest
 * @return ListCatalogsResponse
 */
async function listCatalogs(request: ListCatalogsRequest): ListCatalogsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listCatalogsWithOptions(request, headers, runtime);
}

model ListDatabaseDetailsRequest {
  databaseNamePattern?: string(name='databaseNamePattern'),
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListDatabaseDetailsResponseBody = {
  databaseDetails?: [
    Database
  ](name='databaseDetails'),
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
}

model ListDatabaseDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabaseDetailsResponseBody(name='body'),
}

/**
 * @summary 查看数据库列表
 *
 * @param request ListDatabaseDetailsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatabaseDetailsResponse
 */
@context("listDatabaseDetailsWithContext")
async function listDatabaseDetailsWithOptions(catalogId: string, request: ListDatabaseDetailsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatabaseDetailsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.databaseNamePattern)) {
    query['databaseNamePattern'] = request.databaseNamePattern;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatabaseDetails',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/database-details`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据库列表
 *
 * @param request ListDatabaseDetailsRequest
 * @return ListDatabaseDetailsResponse
 */
async function listDatabaseDetails(catalogId: string, request: ListDatabaseDetailsRequest): ListDatabaseDetailsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatabaseDetailsWithOptions(catalogId, request, headers, runtime);
}

model ListDatabasesRequest {
  databaseNamePattern?: string(name='databaseNamePattern'),
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListDatabasesResponseBody = {
  databases?: [ string ](name='databases'),
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
}

model ListDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesResponseBody(name='body'),
}

/**
 * @summary 查看数据库列表
 *
 * @param request ListDatabasesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatabasesResponse
 */
@context("listDatabasesWithContext")
async function listDatabasesWithOptions(catalogId: string, request: ListDatabasesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListDatabasesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.databaseNamePattern)) {
    query['databaseNamePattern'] = request.databaseNamePattern;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDatabases',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据库列表
 *
 * @param request ListDatabasesRequest
 * @return ListDatabasesResponse
 */
async function listDatabases(catalogId: string, request: ListDatabasesRequest): ListDatabasesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listDatabasesWithOptions(catalogId, request, headers, runtime);
}

model ListIcebergNamespaceDetailsRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  namespaceNamePattern?: string(name='namespaceNamePattern', example='namespace%'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListIcebergNamespaceDetailsResponseBody = {
  namespaceDetails?: [
    Namespace
  ](name='namespaceDetails'),
  nextPageToken?: string(name='nextPageToken', example='""'),
}

model ListIcebergNamespaceDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIcebergNamespaceDetailsResponseBody(name='body'),
}

/**
 * @summary 查看iceberg数据库列表
 *
 * @param request ListIcebergNamespaceDetailsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIcebergNamespaceDetailsResponse
 */
@context("listIcebergNamespaceDetailsWithContext")
async function listIcebergNamespaceDetailsWithOptions(catalogId: string, request: ListIcebergNamespaceDetailsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIcebergNamespaceDetailsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.namespaceNamePattern)) {
    query['namespaceNamePattern'] = request.namespaceNamePattern;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIcebergNamespaceDetails',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/iceberg/dlf/v1/${$URL.percentEncode(catalogId)}/namespace-details`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看iceberg数据库列表
 *
 * @param request ListIcebergNamespaceDetailsRequest
 * @return ListIcebergNamespaceDetailsResponse
 */
async function listIcebergNamespaceDetails(catalogId: string, request: ListIcebergNamespaceDetailsRequest): ListIcebergNamespaceDetailsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIcebergNamespaceDetailsWithOptions(catalogId, request, headers, runtime);
}

model ListIcebergSnapshotsRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListIcebergSnapshotsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  snapshots?: [
    IcebergSnapshot
  ](name='snapshots'),
}

model ListIcebergSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIcebergSnapshotsResponseBody(name='body'),
}

/**
 * @summary 查看iceberg表快照列表
 *
 * @param request ListIcebergSnapshotsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIcebergSnapshotsResponse
 */
@context("listIcebergSnapshotsWithContext")
async function listIcebergSnapshotsWithOptions(catalogId: string, namespace: string, table: string, request: ListIcebergSnapshotsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIcebergSnapshotsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIcebergSnapshots',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/iceberg/dlf/v1/${$URL.percentEncode(catalogId)}/namespaces/${$URL.percentEncode(namespace)}/tables/${$URL.percentEncode(table)}/snapshots`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看iceberg表快照列表
 *
 * @param request ListIcebergSnapshotsRequest
 * @return ListIcebergSnapshotsResponse
 */
async function listIcebergSnapshots(catalogId: string, namespace: string, table: string, request: ListIcebergSnapshotsRequest): ListIcebergSnapshotsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIcebergSnapshotsWithOptions(catalogId, namespace, table, request, headers, runtime);
}

model ListIcebergTableDetailsRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  tableNamePattern?: string(name='tableNamePattern', example='table%'),
}

model ListIcebergTableDetailsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='""'),
  tableDetails?: [
    IcebergTable
  ](name='tableDetails'),
}

model ListIcebergTableDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIcebergTableDetailsResponseBody(name='body'),
}

/**
 * @summary 查看iceberg表详情列表
 *
 * @param request ListIcebergTableDetailsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIcebergTableDetailsResponse
 */
@context("listIcebergTableDetailsWithContext")
async function listIcebergTableDetailsWithOptions(catalogId: string, namespace: string, request: ListIcebergTableDetailsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIcebergTableDetailsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.tableNamePattern)) {
    query['tableNamePattern'] = request.tableNamePattern;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIcebergTableDetails',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/iceberg/dlf/v1/${$URL.percentEncode(catalogId)}/namespaces/${$URL.percentEncode(namespace)}/table-details`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看iceberg表详情列表
 *
 * @param request ListIcebergTableDetailsRequest
 * @return ListIcebergTableDetailsResponse
 */
async function listIcebergTableDetails(catalogId: string, namespace: string, request: ListIcebergTableDetailsRequest): ListIcebergTableDetailsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIcebergTableDetailsWithOptions(catalogId, namespace, request, headers, runtime);
}

model ListPartitionSummariesRequest {
  maxResults?: int32(name='maxResults', example='100'),
  pageToken?: string(name='pageToken', example='""'),
  partitionNamePattern?: string(name='partitionNamePattern', example='hh=10'),
}

model ListPartitionSummariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PartitionSummaries  
}

/**
 * @summary 查看表
 *
 * @param request ListPartitionSummariesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPartitionSummariesResponse
 */
@context("listPartitionSummariesWithContext")
async function listPartitionSummariesWithOptions(catalogId: string, database: string, table: string, request: ListPartitionSummariesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPartitionSummariesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.partitionNamePattern)) {
    query['partitionNamePattern'] = request.partitionNamePattern;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPartitionSummaries',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/partitions/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request ListPartitionSummariesRequest
 * @return ListPartitionSummariesResponse
 */
async function listPartitionSummaries(catalogId: string, database: string, table: string, request: ListPartitionSummariesRequest): ListPartitionSummariesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPartitionSummariesWithOptions(catalogId, database, table, request, headers, runtime);
}

model ListPartitionsRequest {
  maxResults?: long(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  partitionNamePattern?: string(name='partitionNamePattern', example='partition'),
}

model ListPartitionsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  partitions?: [
    Partition
  ](name='partitions'),
}

model ListPartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPartitionsResponseBody(name='body'),
}

/**
 * @summary listPartitions
 *
 * @param request ListPartitionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPartitionsResponse
 */
@context("listPartitionsWithContext")
async function listPartitionsWithOptions(catalogId: string, database: string, table: string, request: ListPartitionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPartitionsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.partitionNamePattern)) {
    query['partitionNamePattern'] = request.partitionNamePattern;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPartitions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/partitions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary listPartitions
 *
 * @param request ListPartitionsRequest
 * @return ListPartitionsResponse
 */
async function listPartitions(catalogId: string, database: string, table: string, request: ListPartitionsRequest): ListPartitionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPartitionsWithOptions(catalogId, database, table, request, headers, runtime);
}

model ListPermissionsRequest {
  database?: string(name='database', example='database_name'),
  function?: string(name='function'),
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  principal?: string(name='principal', example='acs:ram::[accountId]:user/user_name'),
  resourceType?: string(name='resourceType', description='This parameter is required.', example='CATALOG'),
  table?: string(name='table', example='table_name'),
  view?: string(name='view'),
}

model ListPermissionsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  permissions?: [
    Permission
  ](name='permissions'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
 * @summary 获取指定资源或指定Principal的权限信息
 *
 * @param request ListPermissionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPermissionsResponse
 */
@context("listPermissionsWithContext")
async function listPermissionsWithOptions(catalogId: string, request: ListPermissionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPermissionsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.database)) {
    query['database'] = request.database;
  }
  if (!$isNull(request.function)) {
    query['function'] = request.function;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.principal)) {
    query['principal'] = request.principal;
  }
  if (!$isNull(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }
  if (!$isNull(request.table)) {
    query['table'] = request.table;
  }
  if (!$isNull(request.view)) {
    query['view'] = request.view;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPermissions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/permissions/${$URL.percentEncode(catalogId)}/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取指定资源或指定Principal的权限信息
 *
 * @param request ListPermissionsRequest
 * @return ListPermissionsResponse
 */
async function listPermissions(catalogId: string, request: ListPermissionsRequest): ListPermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPermissionsWithOptions(catalogId, request, headers, runtime);
}

model ListProvidedSharesRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListProvidedSharesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='""'),
  shares?: [
    Share
  ](name='shares'),
}

model ListProvidedSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProvidedSharesResponseBody(name='body'),
}

/**
 * @summary 获取提供的共享列表
 *
 * @param request ListProvidedSharesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProvidedSharesResponse
 */
@context("listProvidedSharesWithContext")
async function listProvidedSharesWithOptions(request: ListProvidedSharesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListProvidedSharesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProvidedShares',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/list/provided`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取提供的共享列表
 *
 * @param request ListProvidedSharesRequest
 * @return ListProvidedSharesResponse
 */
async function listProvidedShares(request: ListProvidedSharesRequest): ListProvidedSharesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listProvidedSharesWithOptions(request, headers, runtime);
}

model ListReceivedSharesRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListReceivedSharesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='""'),
  shares?: [
    ReceivedShare
  ](name='shares'),
}

model ListReceivedSharesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReceivedSharesResponseBody(name='body'),
}

/**
 * @summary 获取接收的共享列表
 *
 * @param request ListReceivedSharesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListReceivedSharesResponse
 */
@context("listReceivedSharesWithContext")
async function listReceivedSharesWithOptions(request: ListReceivedSharesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListReceivedSharesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListReceivedShares',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/list/received`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接收的共享列表
 *
 * @param request ListReceivedSharesRequest
 * @return ListReceivedSharesResponse
 */
async function listReceivedShares(request: ListReceivedSharesRequest): ListReceivedSharesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listReceivedSharesWithOptions(request, headers, runtime);
}

model ListReceiversRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  receiverName?: string(name='receiverName', example='receiver_name'),
}

model ListReceiversResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='""'),
  receivers?: [
    Receiver
  ](name='receivers'),
}

model ListReceiversResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListReceiversResponseBody(name='body'),
}

/**
 * @summary 获取接收者列表
 *
 * @param request ListReceiversRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListReceiversResponse
 */
@context("listReceiversWithContext")
async function listReceiversWithOptions(request: ListReceiversRequest, headers: map[string]string, runtime: $RuntimeOptions): ListReceiversResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.receiverName)) {
    query['receiverName'] = request.receiverName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListReceivers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/receivers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接收者列表
 *
 * @param request ListReceiversRequest
 * @return ListReceiversResponse
 */
async function listReceivers(request: ListReceiversRequest): ListReceiversResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listReceiversWithOptions(request, headers, runtime);
}

model ListRoleUsersRequest {
  maxResults?: int32(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model ListRoleUsersResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  users?: [
    User
  ](name='users'),
}

model ListRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoleUsersResponseBody(name='body'),
}

/**
 * @summary 获取角色用户列表
 *
 * @param request ListRoleUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoleUsersResponse
 */
@context("listRoleUsersWithContext")
async function listRoleUsersWithOptions(request: ListRoleUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): ListRoleUsersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.rolePrincipal)) {
    query['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoleUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/users/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取角色用户列表
 *
 * @param request ListRoleUsersRequest
 * @return ListRoleUsersResponse
 */
async function listRoleUsers(request: ListRoleUsersRequest): ListRoleUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listRoleUsersWithOptions(request, headers, runtime);
}

model ListRolesRequest {
  maxResults?: int32(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  roleName?: string(name='roleName', example='role_name'),
}

model ListRolesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  roles?: [
    Role
  ](name='roles'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

/**
 * @summary 获取角色列表
 *
 * @param request ListRolesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRolesResponse
 */
@context("listRolesWithContext")
async function listRolesWithOptions(request: ListRolesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListRolesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.roleName)) {
    query['roleName'] = request.roleName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoles',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取角色列表
 *
 * @param request ListRolesRequest
 * @return ListRolesResponse
 */
async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listRolesWithOptions(request, headers, runtime);
}

model ListShareReceiversRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListShareReceiversResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='“”'),
  receivers?: [
    Receiver
  ](name='receivers'),
}

model ListShareReceiversResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListShareReceiversResponseBody(name='body'),
}

/**
 * @summary 获取共享中的接收者列表
 *
 * @param request ListShareReceiversRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListShareReceiversResponse
 */
@context("listShareReceiversWithContext")
async function listShareReceiversWithOptions(share: string, request: ListShareReceiversRequest, headers: map[string]string, runtime: $RuntimeOptions): ListShareReceiversResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListShareReceivers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}/receivers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取共享中的接收者列表
 *
 * @param request ListShareReceiversRequest
 * @return ListShareReceiversResponse
 */
async function listShareReceivers(share: string, request: ListShareReceiversRequest): ListShareReceiversResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listShareReceiversWithOptions(share, request, headers, runtime);
}

model ListShareResourcesRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListShareResourcesResponseBody = {
  catalogId?: string(name='catalogId', example='clg-paimon-xxxx'),
  nextPageToken?: string(name='nextPageToken', example='""'),
  shareResources?: [
    ShareResource
  ](name='shareResources'),
}

model ListShareResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListShareResourcesResponseBody(name='body'),
}

/**
 * @summary 获取共享资源列表
 *
 * @param request ListShareResourcesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListShareResourcesResponse
 */
@context("listShareResourcesWithContext")
async function listShareResourcesWithOptions(share: string, request: ListShareResourcesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListShareResourcesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListShareResources',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/share/shares/${$URL.percentEncode(share)}/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取共享资源列表
 *
 * @param request ListShareResourcesRequest
 * @return ListShareResourcesResponse
 */
async function listShareResources(share: string, request: ListShareResourcesRequest): ListShareResourcesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listShareResourcesWithOptions(share, request, headers, runtime);
}

model ListSnapshotsRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListSnapshotsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  snapshots?: [
    Snapshot
  ](name='snapshots'),
}

model ListSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSnapshotsResponseBody(name='body'),
}

/**
 * @summary 查看表快照列表
 *
 * @param request ListSnapshotsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSnapshotsResponse
 */
@context("listSnapshotsWithContext")
async function listSnapshotsWithOptions(catalogId: string, database: string, table: string, request: ListSnapshotsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListSnapshotsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSnapshots',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/snapshots`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表快照列表
 *
 * @param request ListSnapshotsRequest
 * @return ListSnapshotsResponse
 */
async function listSnapshots(catalogId: string, database: string, table: string, request: ListSnapshotsRequest): ListSnapshotsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listSnapshotsWithOptions(catalogId, database, table, request, headers, runtime);
}

model ListTableDetailsRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  tableNamePattern?: string(name='tableNamePattern'),
  type?: string(name='type'),
}

model ListTableDetailsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  tableDetails?: [
    Table
  ](name='tableDetails'),
}

model ListTableDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableDetailsResponseBody(name='body'),
}

/**
 * @summary 查看表详情列表
 *
 * @param request ListTableDetailsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTableDetailsResponse
 */
@context("listTableDetailsWithContext")
async function listTableDetailsWithOptions(catalogId: string, database: string, request: ListTableDetailsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListTableDetailsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.tableNamePattern)) {
    query['tableNamePattern'] = request.tableNamePattern;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTableDetails',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/table-details`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表详情列表
 *
 * @param request ListTableDetailsRequest
 * @return ListTableDetailsResponse
 */
async function listTableDetails(catalogId: string, database: string, request: ListTableDetailsRequest): ListTableDetailsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listTableDetailsWithOptions(catalogId, database, request, headers, runtime);
}

model ListTablesRequest {
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  tableNamePattern?: string(name='tableNamePattern'),
}

model ListTablesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  tables?: [ string ](name='tables'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
 * @summary 查看表详情列表
 *
 * @param request ListTablesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTablesResponse
 */
@context("listTablesWithContext")
async function listTablesWithOptions(catalogId: string, database: string, request: ListTablesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListTablesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.tableNamePattern)) {
    query['tableNamePattern'] = request.tableNamePattern;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTables',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表详情列表
 *
 * @param request ListTablesRequest
 * @return ListTablesResponse
 */
async function listTables(catalogId: string, database: string, request: ListTablesRequest): ListTablesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listTablesWithOptions(catalogId, database, request, headers, runtime);
}

model ListUserRolesRequest {
  maxResults?: int32(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  userPrincipal?: string(name='userPrincipal', example='acs:ram::[accountId]:user/user_name'),
}

model ListUserRolesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  roles?: [
    Role
  ](name='roles'),
}

model ListUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRolesResponseBody(name='body'),
}

/**
 * @summary 获取用户角色列表
 *
 * @param request ListUserRolesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserRolesResponse
 */
@context("listUserRolesWithContext")
async function listUserRolesWithOptions(request: ListUserRolesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListUserRolesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.userPrincipal)) {
    query['userPrincipal'] = request.userPrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUserRoles',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/users/roles/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户角色列表
 *
 * @param request ListUserRolesRequest
 * @return ListUserRolesResponse
 */
async function listUserRoles(request: ListUserRolesRequest): ListUserRolesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserRolesWithOptions(request, headers, runtime);
}

model ListUsersRequest {
  maxResults?: int32(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  type?: string(name='type', example='RAM_USER'),
  userName?: string(name='userName', example='user_name'),
}

model ListUsersResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  users?: [
    User
  ](name='users'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
 * @summary 获取用户列表
 *
 * @param request ListUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUsersResponse
 */
@context("listUsersWithContext")
async function listUsersWithOptions(request: ListUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): ListUsersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  if (!$isNull(request.userName)) {
    query['userName'] = request.userName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/users/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户列表
 *
 * @param request ListUsersRequest
 * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listUsersWithOptions(request, headers, runtime);
}

model RefreshUserSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 刷新用户同步
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefreshUserSyncResponse
 */
@context("refreshUserSyncWithContext")
async function refreshUserSyncWithOptions(headers: map[string]string, runtime: $RuntimeOptions): RefreshUserSyncResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'RefreshUserSync',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/usersync`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 刷新用户同步
 *
 * @return RefreshUserSyncResponse
 */
async function refreshUserSync(): RefreshUserSyncResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return refreshUserSyncWithOptions(headers, runtime);
}

model RevokeRoleFromUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
  userPrincipals?: [ string ](name='userPrincipals'),
}

model RevokeRoleFromUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 批量取消授予角色权限给用户
 *
 * @param request RevokeRoleFromUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeRoleFromUsersResponse
 */
@context("revokeRoleFromUsersWithContext")
async function revokeRoleFromUsersWithOptions(request: RevokeRoleFromUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): RevokeRoleFromUsersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }
  if (!$isNull(request.userPrincipals)) {
    body['userPrincipals'] = request.userPrincipals;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RevokeRoleFromUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/revoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量取消授予角色权限给用户
 *
 * @param request RevokeRoleFromUsersRequest
 * @return RevokeRoleFromUsersResponse
 */
async function revokeRoleFromUsers(request: RevokeRoleFromUsersRequest): RevokeRoleFromUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return revokeRoleFromUsersWithOptions(request, headers, runtime);
}

model RollbackTableRequest {
  instant?: FullInstant(name='instant'),
}

model RollbackTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 回滚表
 *
 * @param request RollbackTableRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RollbackTableResponse
 */
@context("rollbackTableWithContext")
async function rollbackTableWithOptions(catalogId: string, database: string, table: string, request: RollbackTableRequest, headers: map[string]string, runtime: $RuntimeOptions): RollbackTableResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.instant)) {
    body['instant'] = request.instant;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RollbackTable',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/rollback`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 回滚表
 *
 * @param request RollbackTableRequest
 * @return RollbackTableResponse
 */
async function rollbackTable(catalogId: string, database: string, table: string, request: RollbackTableRequest): RollbackTableResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return rollbackTableWithOptions(catalogId, database, table, request, headers, runtime);
}

model SubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 订阅当前地域的 DLF
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubscribeResponse
 */
@context("subscribeWithContext")
async function subscribeWithOptions(headers: map[string]string, runtime: $RuntimeOptions): SubscribeResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'Subscribe',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/service/subscribe`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订阅当前地域的 DLF
 *
 * @return SubscribeResponse
 */
async function subscribe(): SubscribeResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return subscribeWithOptions(headers, runtime);
}

model UpdateRoleRequest {
  description?: string(name='description', example='role_description'),
  displayName?: string(name='displayName', example='role_display_name'),
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model UpdateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新角色
 *
 * @param request UpdateRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRoleResponse
 */
@context("updateRoleWithContext")
async function updateRoleWithOptions(request: UpdateRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateRoleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新角色
 *
 * @param request UpdateRoleRequest
 * @return UpdateRoleResponse
 */
async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRoleWithOptions(request, headers, runtime);
}

model UpdateRoleUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
  userPrincipals?: [ string ](name='userPrincipals'),
}

model UpdateRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新角色用户
 *
 * @param request UpdateRoleUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRoleUsersResponse
 */
@context("updateRoleUsersWithContext")
async function updateRoleUsersWithOptions(request: UpdateRoleUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateRoleUsersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }
  if (!$isNull(request.userPrincipals)) {
    body['userPrincipals'] = request.userPrincipals;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRoleUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/users`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新角色用户
 *
 * @param request UpdateRoleUsersRequest
 * @return UpdateRoleUsersResponse
 */
async function updateRoleUsers(request: UpdateRoleUsersRequest): UpdateRoleUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRoleUsersWithOptions(request, headers, runtime);
}

