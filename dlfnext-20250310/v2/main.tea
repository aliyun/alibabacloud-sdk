/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dlfnext', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Catalog {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  status?: string(name='status'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model CatalogSummary {
  apiVisitCountMonthly?: long(name='apiVisitCountMonthly'),
  databaseCount?: MoMValues(name='databaseCount'),
  generatedDate?: string(name='generatedDate', description='Update date of the statistics'),
  partitionCount?: MoMValues(name='partitionCount'),
  tableCount?: MoMValues(name='tableCount'),
  throughputMonthly?: long(name='throughputMonthly'),
  totalFileCount?: MoMValues(name='totalFileCount'),
  totalFileSizeInBytes?: MoMValues(name='totalFileSizeInBytes'),
}

model CatalogSummaryTrend {
  apiVisitCount?: [
    DateSummary
  ](name='apiVisitCount', description='API visit count trends'),
  throughput?: [
    DateSummary
  ](name='throughput', description='Table count trends'),
  totalFileCount?: [
    DateSummary
  ](name='totalFileCount', description='Historical total file count'),
  totalFileSizeInBytes?: [
    DateSummary
  ](name='totalFileSizeInBytes', description='Database count trends'),
  totalMetaCount?: [
    DateSummary
  ](name='totalMetaCount', description='Latest snapshot file count'),
}

model DataField {
  description?: string(name='description'),
  id?: int32(name='id'),
  name?: string(name='name'),
  type?: FullDataType(name='type'),
}

model Database {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  location?: string(name='location'),
  name?: string(name='name'),
  options?: map[string]string(name='options'),
  owner?: string(name='owner'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model DatabaseSummary {
  createdAt?: long(name='createdAt', description='Creation timestamp in milliseconds'),
  databaseName?: string(name='databaseName', description='库名 - Database name'),
  generatedDate?: string(name='generatedDate', description='Last profile update date in format yyyyMMdd'),
  location?: string(name='location', description='Storage location URI'),
  partitionCount?: long(name='partitionCount'),
  tableCount?: long(name='tableCount', description='Total storage in bytes'),
  totalFileCount?: long(name='totalFileCount'),
  totalFileSizeInBytes?: long(name='totalFileSizeInBytes', description='Total file count'),
}

model DateSummary {
  date?: string(name='date'),
  value?: long(name='value', description='Metric value at corresponding date'),
}

model ErrorResponse {
  code?: int32(name='code'),
  message?: string(name='message'),
  resourceName?: string(name='resourceName'),
  resourceType?: string(name='resourceType'),
}

model FailurePermission {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  permission?: Permission(name='permission'),
}

model FullDataType {
  element?: FullDataType(name='element'),
  fields?: [
    DataField
  ](name='fields'),
  key?: FullDataType(name='key'),
  type?: string(name='type'),
  value?: FullDataType(name='value'),
}

model FullSchemaChange {
  action?: string(name='action'),
  comment?: string(name='comment', description='required in UpdateComment/AddColumn'),
  dataType?: FullDataType(name='dataType'),
  fieldNames?: [ string ](name='fieldNames', description='required in AddColumn/RenameColumn/DropColumn/UpdateColumnComment/UpdateColumnType/UpdateColumnNullability'),
  keepNullability?: boolean(name='keepNullability', description='required in UpdateColumnType'),
  key?: string(name='key', description='required in SetOption/RemoveOption'),
  move?: Move(name='move'),
  newComment?: string(name='newComment', description='required in UpdateColumnComment'),
  newDataType?: FullDataType(name='newDataType'),
  newName?: string(name='newName', description='required in RenameColumn'),
  newNullability?: boolean(name='newNullability', description='required in UpdateColumnNullability'),
  value?: string(name='value', description='required in SetOption'),
}

model Identifier {
  database?: string(name='database'),
  object?: string(name='object'),
}

model MoMValues {
  currentValue?: long(name='currentValue', description='total'),
  lastDayValue?: long(name='lastDayValue', description='daily addition'),
  lastMonthValue?: long(name='lastMonthValue', description='monthly addition'),
}

model Move {
  fieldName?: string(name='fieldName'),
  referenceFieldName?: string(name='referenceFieldName'),
  type?: string(name='type'),
}

model Partition {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  done?: boolean(name='done'),
  fileCount?: long(name='fileCount'),
  fileSizeInBytes?: long(name='fileSizeInBytes'),
  lastFileCreationTime?: long(name='lastFileCreationTime'),
  recordCount?: long(name='recordCount'),
  spec?: map[string]any(name='spec'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model PartitionSummaries {
  nextPageToken?: string(name='nextPageToken'),
  partitions?: [
    PartitionSummary
  ](name='partitions', description='Current page of partition profiles'),
}

model PartitionSummary {
  createdAt?: long(name='createdAt', description='Partition creation timestamp in milliseconds'),
  databaseName?: string(name='databaseName', description='Database name'),
  lastAccessTime?: long(name='lastAccessTime', description='Total files in partition'),
  partitionName?: string(name='partitionName', description='Partition identifier'),
  tableName?: string(name='tableName', description='Table name'),
  totalFileCount?: long(name='totalFileCount', description='24h access count'),
  totalFileSizeInBytes?: long(name='totalFileSizeInBytes', description='Last data access timestamp in milliseconds'),
  updatedAt?: long(name='updatedAt'),
}

model Permission {
  access?: string(name='access'),
  database?: string(name='database'),
  principal?: string(name='principal'),
  resourceType?: string(name='resourceType'),
  table?: string(name='table'),
}

model Role {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  description?: string(name='description'),
  displayName?: string(name='displayName'),
  isPredefined?: string(name='isPredefined'),
  roleName?: string(name='roleName'),
  rolePrincipal?: string(name='rolePrincipal'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  users?: [
    User
  ](name='users'),
}

model Schema {
  comment?: string(name='comment'),
  fields?: [
    DataField
  ](name='fields'),
  options?: map[string]string(name='options'),
  partitionKeys?: [ string ](name='partitionKeys'),
  primaryKeys?: [ string ](name='primaryKeys'),
}

model Snapshot {
  baseManifestList?: string(name='baseManifestList'),
  changelogManifestList?: string(name='changelogManifestList', nullable=true),
  changelogRecordCount?: long(name='changelogRecordCount'),
  commitIdentifier?: long(name='commitIdentifier'),
  commitKind?: string(name='commitKind'),
  commitUser?: string(name='commitUser'),
  deltaManifestList?: string(name='deltaManifestList'),
  deltaRecordCount?: long(name='deltaRecordCount'),
  id?: long(name='id'),
  indexManifest?: string(name='indexManifest'),
  logOffsets?: map[string]long(name='logOffsets'),
  schemaId?: long(name='schemaId'),
  statistics?: string(name='statistics'),
  timeMillis?: long(name='timeMillis'),
  totalRecordCount?: long(name='totalRecordCount'),
  version?: int32(name='version', nullable=true),
  watermark?: long(name='watermark'),
}

model Table {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  id?: string(name='id'),
  isExternal?: boolean(name='isExternal'),
  name?: string(name='name'),
  owner?: string(name='owner'),
  path?: string(name='path'),
  schema?: Schema(name='schema'),
  schemaId?: long(name='schemaId'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
}

model TableSnapshot {
  fileCount?: long(name='fileCount'),
  fileSizeInBytes?: long(name='fileSizeInBytes'),
  lastFileCreationTime?: long(name='lastFileCreationTime'),
  recordCount?: long(name='recordCount'),
  snapshot?: Snapshot(name='snapshot'),
}

model TableSummary {
  createdAt?: long(name='createdAt', description='Latest snapshot storage size'),
  databaseName?: string(name='databaseName', description='Database name'),
  generatedDate?: string(name='generatedDate'),
  lastAccessTime?: long(name='lastAccessTime'),
  partitionCount?: long(name='partitionCount', description='Creation timestamp in milliseconds'),
  path?: string(name='path'),
  tableName?: string(name='tableName', description='Table name'),
  totalFileCount?: long(name='totalFileCount', description='30-day access count'),
  totalFileSizeInBytes?: long(name='totalFileSizeInBytes'),
}

model User {
  createdAt?: long(name='createdAt'),
  createdBy?: string(name='createdBy'),
  displayName?: string(name='displayName'),
  type?: string(name='type'),
  updatedAt?: long(name='updatedAt'),
  updatedBy?: string(name='updatedBy'),
  userId?: string(name='userId'),
  userName?: string(name='userName'),
  userPrincipal?: string(name='userPrincipal'),
}

model AlterCatalogRequest {
  removals?: [ string ](name='removals'),
  updates?: map[string]string(name='updates'),
}

model AlterCatalogResponseBody = {
  missing?: [ string ](name='missing'),
  removed?: [ string ](name='removed'),
  updated?: [ string ](name='updated'),
}

model AlterCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AlterCatalogResponseBody(name='body'),
}

/**
 * @summary 更新数据目录
 *
 * @param request AlterCatalogRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AlterCatalogResponse
 */
async function alterCatalogWithOptions(catalog: string, request: AlterCatalogRequest, headers: map[string]string, runtime: $RuntimeOptions): AlterCatalogResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.removals)) {
    body['removals'] = request.removals;
  }
  if (!$isNull(request.updates)) {
    body['updates'] = request.updates;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AlterCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据目录
 *
 * @param request AlterCatalogRequest
 * @return AlterCatalogResponse
 */
async function alterCatalog(catalog: string, request: AlterCatalogRequest): AlterCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return alterCatalogWithOptions(catalog, request, headers, runtime);
}

model BatchGrantPermissionsRequest {
  permissions?: [
    Permission
  ](name='permissions'),
}

model BatchGrantPermissionsResponseBody = {
  errorMessage?: string(name='errorMessage'),
  failurePermissions?: [
    FailurePermission
  ](name='failurePermissions'),
  success?: boolean(name='success', example='True'),
}

model BatchGrantPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGrantPermissionsResponseBody(name='body'),
}

/**
 * @summary 批量授权
 *
 * @param request BatchGrantPermissionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchGrantPermissionsResponse
 */
async function batchGrantPermissionsWithOptions(catalogId: string, request: BatchGrantPermissionsRequest, headers: map[string]string, runtime: $RuntimeOptions): BatchGrantPermissionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.permissions)) {
    body['permissions'] = request.permissions;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchGrantPermissions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/permissions/${$URL.percentEncode(catalogId)}/batchgrant`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量授权
 *
 * @param request BatchGrantPermissionsRequest
 * @return BatchGrantPermissionsResponse
 */
async function batchGrantPermissions(catalogId: string, request: BatchGrantPermissionsRequest): BatchGrantPermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return batchGrantPermissionsWithOptions(catalogId, request, headers, runtime);
}

model BatchRevokePermissionsRequest {
  permissions?: [
    Permission
  ](name='permissions'),
}

model BatchRevokePermissionsResponseBody = {
  errorMessage?: string(name='errorMessage'),
  failurePermissions?: [
    FailurePermission
  ](name='failurePermissions'),
  success?: boolean(name='success', example='true'),
}

model BatchRevokePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRevokePermissionsResponseBody(name='body'),
}

/**
 * @summary 批量取消授权
 *
 * @param request BatchRevokePermissionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchRevokePermissionsResponse
 */
async function batchRevokePermissionsWithOptions(catalogId: string, request: BatchRevokePermissionsRequest, headers: map[string]string, runtime: $RuntimeOptions): BatchRevokePermissionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.permissions)) {
    body['permissions'] = request.permissions;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchRevokePermissions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/permissions/${$URL.percentEncode(catalogId)}/batchrevoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量取消授权
 *
 * @param request BatchRevokePermissionsRequest
 * @return BatchRevokePermissionsResponse
 */
async function batchRevokePermissions(catalogId: string, request: BatchRevokePermissionsRequest): BatchRevokePermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return batchRevokePermissionsWithOptions(catalogId, request, headers, runtime);
}

model CreateCatalogRequest {
  name?: string(name='name', example='catalog_demo'),
  optimizationConfig?: map[string]string(name='optimizationConfig'),
  options?: map[string]string(name='options'),
}

model CreateCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建数据目录
 *
 * @param request CreateCatalogRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCatalogResponse
 */
async function createCatalogWithOptions(request: CreateCatalogRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateCatalogResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['name'] = request.name;
  }
  if (!$isNull(request.optimizationConfig)) {
    body['optimizationConfig'] = request.optimizationConfig;
  }
  if (!$isNull(request.options)) {
    body['options'] = request.options;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据目录
 *
 * @param request CreateCatalogRequest
 * @return CreateCatalogResponse
 */
async function createCatalog(request: CreateCatalogRequest): CreateCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createCatalogWithOptions(request, headers, runtime);
}

model CreateRoleRequest {
  description?: string(name='description', example='role_description'),
  displayName?: string(name='displayName', example='role_display_name'),
  roleName?: string(name='roleName', example='role_name'),
}

model CreateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建角色
 *
 * @param request CreateRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRoleResponse
 */
async function createRoleWithOptions(request: CreateRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateRoleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.roleName)) {
    body['roleName'] = request.roleName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建角色
 *
 * @param request CreateRoleRequest
 * @return CreateRoleResponse
 */
async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createRoleWithOptions(request, headers, runtime);
}

model DeleteRoleRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model DeleteRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除角色
 *
 * @param request DeleteRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRoleResponse
 */
async function deleteRoleWithOptions(request: DeleteRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteRoleResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    query['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除角色
 *
 * @param request DeleteRoleRequest
 * @return DeleteRoleResponse
 */
async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRoleWithOptions(request, headers, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      description?: string(name='description', description='The region description'),
      name?: string(name='name', description='The region name', example='cn-hangzhou'),
      showName?: string(name='showName', description='The region show name'),
      type?: string(name='type', description='The region type', example='region'),
    }
  ](name='regions'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @summary 查询 DLF 开通地域
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
async function describeRegionsWithOptions(headers: map[string]string, runtime: $RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeRegions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/service/regions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询 DLF 开通地域
 *
 * @return DescribeRegionsResponse
 */
async function describeRegions(): DescribeRegionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return describeRegionsWithOptions(headers, runtime);
}

model DropCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建数据湖Catalog
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DropCatalogResponse
 */
async function dropCatalogWithOptions(catalog: string, headers: map[string]string, runtime: $RuntimeOptions): DropCatalogResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DropCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据湖Catalog
 *
 * @return DropCatalogResponse
 */
async function dropCatalog(catalog: string): DropCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return dropCatalogWithOptions(catalog, headers, runtime);
}

model GetCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Catalog  
}

/**
 * @summary 查看数据湖Catalog
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogResponse
 */
async function getCatalogWithOptions(catalog: string, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalog',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据湖Catalog
 *
 * @return GetCatalogResponse
 */
async function getCatalog(catalog: string): GetCatalogResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogWithOptions(catalog, headers, runtime);
}

model GetCatalogSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CatalogSummary  
}

/**
 * @summary 查看表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogSummaryResponse
 */
async function getCatalogSummaryWithOptions(catalogId: string, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogSummaryResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogSummary',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @return GetCatalogSummaryResponse
 */
async function getCatalogSummary(catalogId: string): GetCatalogSummaryResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogSummaryWithOptions(catalogId, headers, runtime);
}

model GetCatalogSummaryTrendRequest {
  endDate?: string(name='endDate', description='This parameter is required.', example='2025-06-01'),
  startDate?: string(name='startDate', description='This parameter is required.', example='2025-05-01'),
}

model GetCatalogSummaryTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CatalogSummaryTrend  
}

/**
 * @summary 查看表
 *
 * @param request GetCatalogSummaryTrendRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogSummaryTrendResponse
 */
async function getCatalogSummaryTrendWithOptions(catalogId: string, request: GetCatalogSummaryTrendRequest, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogSummaryTrendResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!$isNull(request.startDate)) {
    query['startDate'] = request.startDate;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogSummaryTrend',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/storage-summary/trend`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request GetCatalogSummaryTrendRequest
 * @return GetCatalogSummaryTrendResponse
 */
async function getCatalogSummaryTrend(catalogId: string, request: GetCatalogSummaryTrendRequest): GetCatalogSummaryTrendResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogSummaryTrendWithOptions(catalogId, request, headers, runtime);
}

model GetCatalogTokenResponseBody = {
  expiresAtMillis?: long(name='expiresAtMillis', example='1749160909000'),
  token?: map[string]string(name='token'),
}

model GetCatalogTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCatalogTokenResponseBody(name='body'),
}

/**
 * @summary 获取数据湖Catalog的临时访问凭证
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogTokenResponse
 */
async function getCatalogTokenWithOptions(catalog: string, headers: map[string]string, runtime: $RuntimeOptions): GetCatalogTokenResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCatalogToken',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs/${$URL.percentEncode(catalog)}/token`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据湖Catalog的临时访问凭证
 *
 * @return GetCatalogTokenResponse
 */
async function getCatalogToken(catalog: string): GetCatalogTokenResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getCatalogTokenWithOptions(catalog, headers, runtime);
}

model GetDatabaseSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DatabaseSummary  
}

/**
 * @summary 查看表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatabaseSummaryResponse
 */
async function getDatabaseSummaryWithOptions(catalogId: string, database: string, headers: map[string]string, runtime: $RuntimeOptions): GetDatabaseSummaryResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDatabaseSummary',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @return GetDatabaseSummaryResponse
 */
async function getDatabaseSummary(catalogId: string, database: string): GetDatabaseSummaryResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getDatabaseSummaryWithOptions(catalogId, database, headers, runtime);
}

model GetRegionStatusResponseBody = {
  serviceRoleExists?: boolean(name='serviceRoleExists', example='true'),
  status?: string(name='status', example='READY'),
}

model GetRegionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegionStatusResponseBody(name='body'),
}

/**
 * @summary 查询 DLF 当前地域开通状态
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRegionStatusResponse
 */
async function getRegionStatusWithOptions(headers: map[string]string, runtime: $RuntimeOptions): GetRegionStatusResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRegionStatus',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/service/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询 DLF 当前地域开通状态
 *
 * @return GetRegionStatusResponse
 */
async function getRegionStatus(): GetRegionStatusResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getRegionStatusWithOptions(headers, runtime);
}

model GetRoleRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model GetRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Role  
}

/**
 * @summary 获取角色
 *
 * @param request GetRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRoleResponse
 */
async function getRoleWithOptions(request: GetRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): GetRoleResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    query['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取角色
 *
 * @param request GetRoleRequest
 * @return GetRoleResponse
 */
async function getRole(request: GetRoleRequest): GetRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getRoleWithOptions(request, headers, runtime);
}

model GetTableSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TableSummary  
}

/**
 * @summary 查看表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableSummaryResponse
 */
async function getTableSummaryWithOptions(catalogId: string, database: string, table: string, headers: map[string]string, runtime: $RuntimeOptions): GetTableSummaryResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTableSummary',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @return GetTableSummaryResponse
 */
async function getTableSummary(catalogId: string, database: string, table: string): GetTableSummaryResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getTableSummaryWithOptions(catalogId, database, table, headers, runtime);
}

model GetUserRequest {
  userPrincipal?: string(name='userPrincipal', example='acs:ram::[accountId]:user/user_name'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: User  
}

/**
 * @summary 获取用户
 *
 * @param request GetUserRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserResponse
 */
async function getUserWithOptions(request: GetUserRequest, headers: map[string]string, runtime: $RuntimeOptions): GetUserResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.userPrincipal)) {
    query['userPrincipal'] = request.userPrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUser',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户
 *
 * @param request GetUserRequest
 * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserWithOptions(request, headers, runtime);
}

model GrantRoleToUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
  userPrincipals?: [ string ](name='userPrincipals'),
}

model GrantRoleToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 批量授予角色权限给用户
 *
 * @param request GrantRoleToUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsersWithOptions(request: GrantRoleToUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): GrantRoleToUsersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }
  if (!$isNull(request.userPrincipals)) {
    body['userPrincipals'] = request.userPrincipals;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GrantRoleToUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/grant`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量授予角色权限给用户
 *
 * @param request GrantRoleToUsersRequest
 * @return GrantRoleToUsersResponse
 */
async function grantRoleToUsers(request: GrantRoleToUsersRequest): GrantRoleToUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return grantRoleToUsersWithOptions(request, headers, runtime);
}

model ListCatalogsRequest {
  catalogNamePattern?: string(name='catalogNamePattern'),
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
}

model ListCatalogsResponseBody = {
  catalogs?: [
    Catalog
  ](name='catalogs'),
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
}

model ListCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCatalogsResponseBody(name='body'),
}

/**
 * @summary 查看数据目录列表
 *
 * @param request ListCatalogsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCatalogsResponse
 */
async function listCatalogsWithOptions(request: ListCatalogsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListCatalogsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.catalogNamePattern)) {
    query['catalogNamePattern'] = request.catalogNamePattern;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListCatalogs',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/catalogs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据目录列表
 *
 * @param request ListCatalogsRequest
 * @return ListCatalogsResponse
 */
async function listCatalogs(request: ListCatalogsRequest): ListCatalogsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listCatalogsWithOptions(request, headers, runtime);
}

model ListPartitionSummariesRequest {
  maxResults?: int32(name='maxResults', example='100'),
  pageToken?: string(name='pageToken', example='""'),
  partitionNamePattern?: string(name='partitionNamePattern', example='hh=10'),
}

model ListPartitionSummariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PartitionSummaries  
}

/**
 * @summary 查看表
 *
 * @param request ListPartitionSummariesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPartitionSummariesResponse
 */
async function listPartitionSummariesWithOptions(catalogId: string, database: string, table: string, request: ListPartitionSummariesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPartitionSummariesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.partitionNamePattern)) {
    query['partitionNamePattern'] = request.partitionNamePattern;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPartitionSummaries',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/${$URL.percentEncode(catalogId)}/databases/${$URL.percentEncode(database)}/tables/${$URL.percentEncode(table)}/partitions/storage-summary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看表
 *
 * @param request ListPartitionSummariesRequest
 * @return ListPartitionSummariesResponse
 */
async function listPartitionSummaries(catalogId: string, database: string, table: string, request: ListPartitionSummariesRequest): ListPartitionSummariesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPartitionSummariesWithOptions(catalogId, database, table, request, headers, runtime);
}

model ListPermissionsRequest {
  database?: string(name='database', example='database_name'),
  maxResults?: int32(name='maxResults', example='1000'),
  pageToken?: string(name='pageToken', example='""'),
  principal?: string(name='principal', example='acs:ram::[accountId]:user/user_name'),
  resourceType?: string(name='resourceType', description='This parameter is required.', example='CATALOG'),
  table?: string(name='table', example='table_name'),
}

model ListPermissionsResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  permissions?: [
    Permission
  ](name='permissions'),
}

model ListPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionsResponseBody(name='body'),
}

/**
 * @summary 获取指定资源或指定Principal的权限信息
 *
 * @param request ListPermissionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPermissionsResponse
 */
async function listPermissionsWithOptions(catalogId: string, request: ListPermissionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPermissionsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.database)) {
    query['database'] = request.database;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.principal)) {
    query['principal'] = request.principal;
  }
  if (!$isNull(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }
  if (!$isNull(request.table)) {
    query['table'] = request.table;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPermissions',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/permissions/${$URL.percentEncode(catalogId)}/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取指定资源或指定Principal的权限信息
 *
 * @param request ListPermissionsRequest
 * @return ListPermissionsResponse
 */
async function listPermissions(catalogId: string, request: ListPermissionsRequest): ListPermissionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPermissionsWithOptions(catalogId, request, headers, runtime);
}

model ListRoleUsersRequest {
  maxResults?: string(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model ListRoleUsersResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  users?: [
    User
  ](name='users'),
}

model ListRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoleUsersResponseBody(name='body'),
}

/**
 * @summary 获取角色用户列表
 *
 * @param request ListRoleUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoleUsersResponse
 */
async function listRoleUsersWithOptions(request: ListRoleUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): ListRoleUsersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.rolePrincipal)) {
    query['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoleUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/users/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取角色用户列表
 *
 * @param request ListRoleUsersRequest
 * @return ListRoleUsersResponse
 */
async function listRoleUsers(request: ListRoleUsersRequest): ListRoleUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listRoleUsersWithOptions(request, headers, runtime);
}

model ListRolesRequest {
  maxResults?: int32(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  roleName?: string(name='roleName', example='role_name'),
}

model ListRolesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='E8ABEB1C3DB893D16576269017992F57'),
  roles?: [
    Role
  ](name='roles'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

/**
 * @summary 获取角色列表
 *
 * @param request ListRolesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRolesResponse
 */
async function listRolesWithOptions(request: ListRolesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListRolesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.roleName)) {
    query['roleName'] = request.roleName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoles',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取角色列表
 *
 * @param request ListRolesRequest
 * @return ListRolesResponse
 */
async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listRolesWithOptions(request, headers, runtime);
}

model ListUserRolesRequest {
  maxResults?: string(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  userPrincipal?: string(name='userPrincipal', example='acs:ram::[accountId]:user/user_name'),
}

model ListUserRolesResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  roles?: [
    Role
  ](name='roles'),
}

model ListUserRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserRolesResponseBody(name='body'),
}

/**
 * @summary 获取用户角色列表
 *
 * @param request ListUserRolesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUserRolesResponse
 */
async function listUserRolesWithOptions(request: ListUserRolesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListUserRolesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.userPrincipal)) {
    query['userPrincipal'] = request.userPrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUserRoles',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/users/roles/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户角色列表
 *
 * @param request ListUserRolesRequest
 * @return ListUserRolesResponse
 */
async function listUserRoles(request: ListUserRolesRequest): ListUserRolesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserRolesWithOptions(request, headers, runtime);
}

model ListUsersRequest {
  maxResults?: int32(name='maxResults', example='10'),
  pageToken?: string(name='pageToken', example='""'),
  type?: string(name='type', example='RAM_USER'),
  userName?: string(name='userName', example='user_name'),
}

model ListUsersResponseBody = {
  nextPageToken?: string(name='nextPageToken', example='token!'),
  users?: [
    User
  ](name='users'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
 * @summary 获取用户列表
 *
 * @param request ListUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUsersResponse
 */
async function listUsersWithOptions(request: ListUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): ListUsersResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.pageToken)) {
    query['pageToken'] = request.pageToken;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }
  if (!$isNull(request.userName)) {
    query['userName'] = request.userName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/users/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户列表
 *
 * @param request ListUsersRequest
 * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listUsersWithOptions(request, headers, runtime);
}

model RevokeRoleFromUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
  userPrincipals?: [ string ](name='userPrincipals'),
}

model RevokeRoleFromUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 批量取消授予角色权限给用户
 *
 * @param request RevokeRoleFromUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeRoleFromUsersResponse
 */
async function revokeRoleFromUsersWithOptions(request: RevokeRoleFromUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): RevokeRoleFromUsersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }
  if (!$isNull(request.userPrincipals)) {
    body['userPrincipals'] = request.userPrincipals;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RevokeRoleFromUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/revoke`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量取消授予角色权限给用户
 *
 * @param request RevokeRoleFromUsersRequest
 * @return RevokeRoleFromUsersResponse
 */
async function revokeRoleFromUsers(request: RevokeRoleFromUsersRequest): RevokeRoleFromUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return revokeRoleFromUsersWithOptions(request, headers, runtime);
}

model SubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 订阅当前地域的 DLF
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubscribeResponse
 */
async function subscribeWithOptions(headers: map[string]string, runtime: $RuntimeOptions): SubscribeResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'Subscribe',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/service/subscribe`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订阅当前地域的 DLF
 *
 * @return SubscribeResponse
 */
async function subscribe(): SubscribeResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return subscribeWithOptions(headers, runtime);
}

model UpdateRoleRequest {
  description?: string(name='description', example='role_description'),
  displayName?: string(name='displayName', example='role_display_name'),
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
}

model UpdateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新角色
 *
 * @param request UpdateRoleRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRoleResponse
 */
async function updateRoleWithOptions(request: UpdateRoleRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateRoleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRole',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新角色
 *
 * @param request UpdateRoleRequest
 * @return UpdateRoleResponse
 */
async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRoleWithOptions(request, headers, runtime);
}

model UpdateRoleUsersRequest {
  rolePrincipal?: string(name='rolePrincipal', example='acs:dlf::[accountId]:role/role_name'),
  userPrincipals?: [ string ](name='userPrincipals'),
}

model UpdateRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新角色用户
 *
 * @param request UpdateRoleUsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRoleUsersResponse
 */
async function updateRoleUsersWithOptions(request: UpdateRoleUsersRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateRoleUsersResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.rolePrincipal)) {
    body['rolePrincipal'] = request.rolePrincipal;
  }
  if (!$isNull(request.userPrincipals)) {
    body['userPrincipals'] = request.userPrincipals;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRoleUsers',
    version = '2025-03-10',
    protocol = 'HTTPS',
    pathname = `/dlf/v1/auth/roles/users`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新角色用户
 *
 * @param request UpdateRoleUsersRequest
 * @return UpdateRoleUsersResponse
 */
async function updateRoleUsers(request: UpdateRoleUsersRequest): UpdateRoleUsersResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRoleUsersWithOptions(request, headers, runtime);
}

