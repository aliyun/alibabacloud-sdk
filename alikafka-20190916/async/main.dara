/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alikafka';
  @version = '2019-09-16';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to transfer the cloud resource.

>  You can use resource groups to manage resources owned by your Alibaba Cloud account. Resource groups simplify the resource and permission management of your Alibaba Cloud account. For more information, see [What is resource management?](~~94475~~)', example='rg-ac***********7q', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource to which you want to attach a tag. Only the ID of a Message Queue for Apache Kafka instance is supported.

For example, if the ID of the instance is alikafka_post-cn-v0h1fgs2xxxx, the resource ID is alikafka_post-cn-v0h1fgs2xxxx.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the new resource group. You can view the available resource groups in the Resource Management console.', example='rg-ac***********7q'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5CA600C-7D5A-45B5-B6DB-44FAC2C****'),
  success?: long(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConvertPostPayOrderRequest {
  duration?: int32(name='Duration', description='The subscription duration. Unit: months. Valid values:

*   **1~12**
*   **24**
*   **36**', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model ConvertPostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20497346575****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ConvertPostPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertPostPayOrderResponseBody(name='body'),
}

async function convertPostPayOrder(request: ConvertPostPayOrderRequest): ConvertPostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertPostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAclRequest {
  aclOperationType: string(name='AclOperationType', description='The operation type. Valid values:

*   **Write**: data writes
*   **Read**: data reads
*   **Describe**: reads of transaction IDs****
*   **IdempotentWrite**: idempotent data writes to clusters****', example='Read', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The name or ID of the resource.

*   The value can be the name of a topic, consumer group, or cluster, or the ID of a transaction.
*   You can use an asterisk (\\*) to represent the names or IDs of all relevant resources.', example='X****', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', description='The matching mode. Valid values:

*   **LITERAL**: exact match
*   **PREFIXED**: prefix match', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**
*   **Group**
*   **Cluster**
*   **TransactionalId**: transaction', example='Group', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The username.

You can use an asterisk (\\*) to represent all usernames.', example='test***', position='Query'),
}

model CreateAclResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='56729737-C428-4E1B-AC68-7A8C2D5****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAclResponseBody(name='body'),
}

async function createAcl(request: CreateAclRequest): CreateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.

*   The value can contain only letters, digits, hyphens (-), and underscores (\\_), and the value must contain at least one letter or digit.
*   The value must be 3 to 128 characters in length. If the value that you specify contains more than 128 characters, the system automatically truncates the value to 128 characters.
*   After a consumer group is created, you cannot change the name of the consumer group.', example='test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-0pp1l9z8****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The description of the consumer group.', example='test', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key.

*   You must specify this parameter.
*   The tag key can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   You can leave this parameter empty.
*   The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E57A8862-DF68-4055-8E55-B80CB4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePostPayOrderRequest {
  deployType: int32(name='DeployType', description='The deployment mode of the instance. Valid values:

*   **4**: deploys the instance that allows access from the Internet and a VPC.
*   **5**: deploys the instance that allows access only from a VPC.', example='5', position='Query'),
  diskSize: int32(name='DiskSize', description='The disk size.

For more information about the valid values, see [Billing](~~84737~~).', example='500', position='Query'),
  diskType: string(name='DiskType', description='The disk type. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD', example='0', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   This parameter is required if the **DeployType** parameter is set to **4**.
*   For more information about the valid values, see [Billing](~~84737~~).', example='0', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   You must specify at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you specify only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='20', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   You must specify at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you specify only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='alikafka.hw.2xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing](~~84737~~).', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

For more information about these instance editions, see [Billing](~~84737~~).', example='normal', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of tag N.

*   Valid values of N: 1 to 20.
*   If this parameter is left empty, the keys of all tags are matched.
*   The tag key must be up to 128 characters in length. It cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N.

*   Valid values of N: 1 to 20.
*   If you do not specify a tag key, you cannot specify a tag value. If this parameter is not configured, all tag values are matched.
*   The tag value must be 1 to 128 characters in length. It cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing](~~84737~~).', example='50', position='Query'),
}

model CreatePostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20497346575****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreatePostPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePostPayOrderResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing method and pricing of pay-as-you-go Message Queue for Apache Kafka instances. For more information, see [Billing](~~84737~~).
  *
 */
async function createPostPayOrder(request: CreatePostPayOrderRequest): CreatePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrePayOrderRequest {
  confluentConfig?: {
    connectCU?: int32(name='ConnectCU'),
    connectReplica?: int32(name='ConnectReplica'),
    controlCenterCU?: int32(name='ControlCenterCU'),
    controlCenterReplica?: int32(name='ControlCenterReplica'),
    controlCenterStorage?: int32(name='ControlCenterStorage'),
    kafkaCU?: int32(name='KafkaCU'),
    kafkaReplica?: int32(name='KafkaReplica'),
    kafkaRestProxyCU?: int32(name='KafkaRestProxyCU'),
    kafkaRestProxyReplica?: int32(name='KafkaRestProxyReplica'),
    kafkaStorage?: int32(name='KafkaStorage'),
    ksqlCU?: int32(name='KsqlCU'),
    ksqlReplica?: int32(name='KsqlReplica'),
    ksqlStorage?: int32(name='KsqlStorage'),
    schemaRegistryCU?: int32(name='SchemaRegistryCU'),
    schemaRegistryReplica?: int32(name='SchemaRegistryReplica'),
    zooKeeperCU?: int32(name='ZooKeeperCU'),
    zooKeeperReplica?: int32(name='ZooKeeperReplica'),
    zooKeeperStorage?: int32(name='ZooKeeperStorage'),
  }(name='ConfluentConfig', shrink='json', position='Query'),
  deployType: int32(name='DeployType', description='The deployment mode of the instance. Valid values:

*   **4**: deploys the instance that allows access from the Internet and a VPC.
*   **5**: deploys the instance that allows access only from a VPC.', example='5', position='Query'),
  diskSize: int32(name='DiskSize', description='The disk size. Unit: GB.

For more information about the valid values, see [Billing](~~84737~~).', example='500', position='Query'),
  diskType: string(name='DiskType', description='The disk type. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD', example='0', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   This parameter is required if the **DeployType** parameter is set to **4**.
*   For more information about the valid values, see [Pay-as-you-go](~~72142~~).', example='0', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   You must configure at least one of the **IoMax** and **IoMaxSpec** parameters. If both parameters are configured, the value of the **IoMaxSpec** parameter takes effect. We recommend that you configure only the **IoMaxSpec** parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='20', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   You must configure at least one of the **IoMax** and **IoMaxSpec** parameters. If both parameters are configured, the value of the **IoMaxSpec** parameter takes effect. We recommend that you configure only the **IoMaxSpec** parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='alikafka.hw.2xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing](~~84737~~).', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

For more information, see [Billing](~~84737~~).', example='normal', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The key of tag N.

*   Valid values of N: 1 to 20.
*   If this parameter is left empty, the keys of all tags are matched.
*   The tag key can be up to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N.

*   Valid values of N: 1 to 20.
*   This parameter can be left empty.
*   The tag value can be 1 to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing](~~84737~~).', example='50', position='Query'),
}

model CreatePrePayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20497346575****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreatePrePayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrePayOrderResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you understand the billing methods and pricing of subscription ApsaraMQ for Kafka instances. For more information, see [Billing](~~84737~~).
  * *   If you create an ApsaraMQ for Kafka instance by calling this operation, the subscription duration is one month and the auto-renewal feature is enabled by default. The auto-renewal cycle is also one month. If you want to change the auto-renewal cycle or disable the auto-renewal feature, you can go to the [Renewal](https://renew.console.aliyun.com/#/ecs) page in the Alibaba Cloud Management Console.
  *
 */
async function createPrePayOrder(request: CreatePrePayOrderRequest): CreatePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateSaslUserRequest {
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  password: string(name='Password', description='The password of the SASL user.', example='12***', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The SASL mechanism. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. Message Queue for Apache Kafka provides an optimized PLAIN mechanism that allows you to dynamically create SASL users for an instance without the need to restart the instance.
*   **scram**: a mechanism that uses usernames and passwords to verify user identities. This mechanism provides better security protection than the PLAIN mechanism. Message Queue for Apache Kafka uses SCRAM-SHA-256.

Default value: **plain**.', example='plain', position='Query'),
  username: string(name='Username', description='The name of the SASL user.', example='test***', position='Query'),
}

model CreateSaslUserResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5CA600C-7D5A-45B5-B6DB-44FAC2C****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateSaslUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSaslUserResponseBody(name='body'),
}

async function createSaslUser(request: CreateSaslUserRequest): CreateSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  compactTopic?: boolean(name='CompactTopic', description='The log cleanup policy that is used for the topic. This parameter is available only when LocalTopic is set to true. Valid values:

*   false: The topic uses the default log cleanup policy.
*   true: The topic uses the log compaction policy.', example='false', position='Query'),
  config?: string(name='Config', description='The additional configurations.

*   The value of this parameter must be in JSON format.
*   The key must be **replications**. The value indicates the number of replicas for the topic. The value must be an integer that ranges from 1 to 3.
*   This parameter is available only when **LocalTopic** is set to **true**, or the instance is of the **Open Source Edition (Local Disk)**.****

> If you specify this parameter, **ReplicationFactor** does not take effect.', example='{"replications": 3}', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  localTopic?: boolean(name='LocalTopic', description='The type of storage that the topic uses. Valid values:

*   false: The topic uses cloud storage.
*   true: The topic uses local storage.', example='false', position='Query'),
  minInsyncReplicas?: long(name='MinInsyncReplicas', description='The minimum number of in-sync replicas (ISRs).

*   This parameter is available only when **LocalTopic** is set to **true**, or the instance is of the **Open Source Edition (Local Disk)**.****
*   The value of this parameter must be smaller than the value of ReplicationFactor.
*   Valid values: 1 to 3.', example='1', minimum=1, maximum=3, position='Query'),
  partitionNum?: string(name='PartitionNum', description='The number of partitions in the topic.

*   Valid values: 1 to 360.
*   The system recommends the number of partitions based on the specification of the instance. You can view the recommended number in the Message Queue for Apache Kafka console. We recommend that you specify the number that is recommended by the system as the value of this parameter to reduce the risk of data skew.', example='12', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance in which you want to create a topic.', example='cn-hangzhou', position='Query'),
  remark: string(name='Remark', description='The description of the topic.

*   The description can contain only letters, digits, hyphens (-), and underscores (\\_).
*   The description must be 3 to 64 characters in length.', example='alikafka_topic_test', position='Query'),
  replicationFactor?: long(name='ReplicationFactor', description='The number of replicas for the topic.

*   This parameter is available only when **LocalTopic** is set to **true**, or the instance is of the **Open Source Edition (Local Disk)**.****
*   Valid values: 1 to 3.

> If you set this parameter to **1**, data loss may occur. Exercise caution when you configure this parameter.', example='3', minimum=1, maximum=3, position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key.

*   If you do not specify this parameter, the keys of all tags are matched.
*   The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   You can leave this parameter empty.
*   The tag value must be 1 to 128 characters in length and cannot contain http:// or https://. The tag value cannot start with aliyun or acs:.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags that you want to add to the topic.', position='Query'),
  topic: string(name='Topic', description='The topic name.

*   The name can contain only letters, digits, hyphens (-), and underscores (\\_).
*   The name must be 3 to 64 characters in length. If the name that you specify contains more than 64 characters, the system automatically truncates the name.
*   After a topic is created, you cannot change the name of the topic.', example='alikafka_topic_test', position='Query'),
}

model CreateTopicResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9C0F207C-77A6-43E5-991C-9D98510A****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

/**
  * *   Each Alibaba Cloud account can call this operation up to once per second.
  * *   The maximum number of topics that you can create in an instance is determined by the specification of the instance.
  *
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAclRequest {
  aclOperationType: string(name='AclOperationType', description='The operation type. Valid values:

*   **Write**
*   **Read**', example='Write', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The name of the resource.

*   The value can be the name of a topic or consumer group.
*   You can use an asterisk (\\*) to indicate the names of all topics or consumer groups.', example='demo', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', description='The mode that is used to match resources. Valid values:

*   **LITERAL:** full match
*   **PREFIXED**: prefix match', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The type of the resource.

*   **Topic**
*   **Group**', example='Topic', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The name of the user.', example='test12****', position='Query'),
}

model DeleteAclResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0740227-AA9A-4E14-8E9F-36ED665****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAclResponseBody(name='body'),
}

async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.', example='CID-test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model DeleteInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSaslUserRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The SASL mechanism. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. Message Queue for Apache Kafka provides an optimized PLAIN mechanism that allows you to dynamically create SASL users for an instance without the need to restart the instance.
*   **scram**: a mechanism that uses usernames and passwords to verify user identities. This mechanism provides better security protection than the PLAIN mechanism. Message Queue for Apache Kafka uses SCRAM-SHA-256.

Default value: **plain**.', example='scram', position='Query'),
  username: string(name='Username', description='The name of the user.', example='test***', position='Query'),
}

model DeleteSaslUserResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3CB89F5C-CD97-4C1D-BC7C-FEDEC2F4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteSaslUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSaslUserResponseBody(name='body'),
}

async function deleteSaslUser(request: DeleteSaslUserRequest): DeleteSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The name of the topic.', example='test', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAclsRequest {
  aclResourceName: string(name='AclResourceName', description='The name or ID of the resource.

*   The value can be the name of a topic or a consumer group.
*   You can use an asterisk (\\*) to represent the names of all topics or consumer groups.', example='demo', position='Query'),
  aclResourcePatternType?: string(name='AclResourcePatternType', description='The match mode. Valid values:

*   LITERAL: full-name match
*   PREFIXED: prefix match', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**
*   **Group**', example='Topic', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-v0h1cng****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The name of the user.', example='test12****', position='Query'),
}

model DescribeAclsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  kafkaAclList?: {
    kafkaAclVO?: [ 
    {
      aclOperationType?: string(name='AclOperationType', description='The type of the operation. Valid values:

*   **Write**
*   **Read**', example='Write'),
      aclResourceName?: string(name='AclResourceName', description='The name of the resource.

*   The value can be the name of a topic or a consumer group.
*   An asterisk (\\*) represents the names of all topics or consumer groups.', example='demo'),
      aclResourcePatternType?: string(name='AclResourcePatternType', description='The match mode. Valid values:

*   **LITERAL**: full-name match
*   **PREFIXED**: prefix match', example='LITERAL'),
      aclResourceType?: string(name='AclResourceType', description='The type of the resources to which you want to attach tags. Valid values:

*   **Topic**
*   **Group**', example='Topic'),
      host?: string(name='Host', description='The host.', example='****'),
      username?: string(name='Username', description='The name of the user.', example='test12***'),
    }
  ](name='KafkaAclVO')
  }(name='KafkaAclList', description='The ACLs.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46496E38-881E-4719-A2F3-F3DA6AE****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeAclsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclsResponseBody(name='body'),
}

async function describeAcls(request: DescribeAclsRequest): DescribeAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAcls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSaslUsersRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DescribeSaslUsersResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E3B3592-5994-4F65-A61E-E62A77A****'),
  saslUserList?: {
    saslUserVO?: [ 
    {
      password?: string(name='Password', description='The password that is used to access the Elasticsearch cluster.', example='******'),
      type?: string(name='Type', description='The request type. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. Message Queue for Apache Kafka provides an optimized PLAIN mechanism that allows you to dynamically create SASL users for an instance without the need to restart the instance.
*   **scram**: a mechanism that uses usernames and passwords to verify user identities. This mechanism provides better security protection than the PLAIN mechanism. Message Queue for Apache Kafka uses SCRAM-SHA-256.

Default value: **plain**.', example='scram'),
      username?: string(name='Username', description='The name of the user.', example='test12***'),
    }
  ](name='SaslUserVO')
  }(name='SaslUserList', description='The SASL users.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeSaslUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSaslUsersResponseBody(name='body'),
}

async function describeSaslUsers(request: DescribeSaslUsersRequest): DescribeSaslUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSaslUsers', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoGroupCreationRequest {
  enable: boolean(name='Enable', example='true', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model EnableAutoGroupCreationResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='A421CCD7-5BC5-4B32-8DD8-64668A8FCB56'),
  success?: boolean(name='Success', example='true'),
}

model EnableAutoGroupCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAutoGroupCreationResponseBody(name='body'),
}

async function enableAutoGroupCreation(request: EnableAutoGroupCreationRequest): EnableAutoGroupCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoGroupCreation', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoTopicCreationRequest {
  instanceId: string(name='InstanceId', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  operate: string(name='Operate', example='enable', position='Query'),
  partitionNum?: long(name='PartitionNum', example='12', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model EnableAutoTopicCreationResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='9E3B3592-5994-4F65-A61E-E62A77A7***'),
  success?: boolean(name='Success', example='true'),
}

model EnableAutoTopicCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAutoTopicCreationResponseBody(name='body'),
}

async function enableAutoTopicCreation(request: EnableAutoTopicCreationRequest): EnableAutoTopicCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoTopicCreation', 'POST', '/', 'json', false, 'json', request);
}

model GetAllInstanceIdListRequest {
  regionId?: string(name='RegionId', description='The region ID of the instance. This parameter is reserved.', example='cn-hangzhou', position='Query'),
}

model GetAllInstanceIdListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  instanceIds?: map[string]any(name='InstanceIds', description='The IDs of instances that are managed by the Alibaba Cloud account in all the regions.', example='[{"cn-shenzhen": ["alikafka_post-cn-7pp2btvo****"],"us-west-1": ["alikafka_pre-cn-i7m2lxid****"],"cn-hangzhou": ["alikafka_pre-cn-i7m2hflj****","alikafka_pre-cn-zvp2hsje****","alikafka_pre-cn-zvp2kvc9****"]}]'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetAllInstanceIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllInstanceIdListResponseBody(name='body'),
}

async function getAllInstanceIdList(request: GetAllInstanceIdListRequest): GetAllInstanceIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllInstanceIdList', 'POST', '/', 'json', false, 'json', request);
}

model GetAllowedIpListRequest {
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-mp91inkw****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetAllowedIpListResponseBody = {
  allowedList?: {
    deployType?: int32(name='DeployType', description='The deployment mode of the instance. Valid values:

*   **4**: allows access from the Internet and a virtual private cloud (VPC).
*   **5**: allows access from a VPC.

>  Only integrators need to concern themselves with the value of this parameter.', example='4'),
    internetList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup', description='The group to which the IP address whitelist belongs.'),
        allowedIpList?: [ string ](name='AllowedIpList', description='The information about the IP address whitelist.'),
        portRange?: string(name='PortRange', description='The port range. Valid value:

**9093/9093**.', example='9093/9093'),
      }
    ](name='InternetList', description='The whitelist for access from the Internet.'),
    vpcList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup', description='The group to which the IP address whitelist belongs.'),
        allowedIpList?: [ string ](name='AllowedIpList', description='The information about the IP address whitelist.'),
        portRange?: string(name='PortRange', description='The port range. Valid value:

**9092/9092**.', example='9092/9092'),
      }
    ](name='VpcList', description='The whitelist for access from a virtual private cloud (VPC).'),
  }(name='AllowedList', description='The IP address whitelist.'),
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A421CCD7-5BC5-4B32-8DD8-64668A8FCB56'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetAllowedIpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAllowedIpListResponseBody(name='body'),
}

async function getAllowedIpList(request: GetAllowedIpListRequest): GetAllowedIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllowedIpList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerListRequest {
  consumerId?: string(name='ConsumerId', description='The name of the consumer group. If you do not configure this parameter, all consumer groups are queried.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance to which the consumer group belongs.', example='alikafka_post-cn-v0h18sav****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance to which the consumer group belongs.', example='cn-hangzhou', position='Query'),
}

model GetConsumerListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  consumerList?: {
    consumerVO?: [ 
    {
      automaticallyCreatedGroup?: boolean(name='AutomaticallyCreatedGroup', description='The consumer group that is automatically created by the system.'),
      consumerId?: string(name='ConsumerId', description='The ID of the consumer group.', example='kafka-test'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-v0h18sav****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The description of the consumer group.', example='test'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags.'),
    }
  ](name='ConsumerVO')
  }(name='ConsumerList', description='The consumer groups.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='808F042B-CB9A-4FBC-9009-00E7DDB6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetConsumerListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerListResponseBody(name='body'),
}

async function getConsumerList(request: GetConsumerListRequest): GetConsumerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerProgressRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model GetConsumerProgressResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  consumerProgress?: {
    lastTimestamp?: long(name='LastTimestamp', description='The time when the last message consumed by the consumer group was generated.', example='1566874931671'),
    topicList?: {
      topicList?: [ 
      {
        lastTimestamp?: long(name='LastTimestamp', description='The time when the last consumed message in the topic was generated.', example='1566874931649'),
        offsetList?: {
          offsetList?: [ 
          {
            brokerOffset?: long(name='BrokerOffset', description='The latest offset in the partition of the topic.', example='9'),
            consumerOffset?: long(name='ConsumerOffset', description='The consumer offset in the partition of the topic.', example='9'),
            lastTimestamp?: long(name='LastTimestamp', description='The time when the last consumed message in the partition was generated.', example='1566874931649'),
            partition?: int32(name='Partition', description='The ID of the partition.', example='0'),
          }
        ](name='OffsetList')
        }(name='OffsetList', description='The information about offsets in the topic.'),
        topic?: string(name='Topic', description='The name of the topic.', example='kafka-test'),
        totalDiff?: long(name='TotalDiff', description='The number of messages that were not consumed in the topic. This is also known as the number of accumulated messages in the topic.', example='0'),
      }
    ](name='TopicList')
    }(name='TopicList', description='The consumption progress of each topic to which the consumer group is subscribed.'),
    totalDiff?: long(name='TotalDiff', description='The number of messages that were not consumed in all topics. This is also known as the number of accumulated messages in all topics.', example='0'),
  }(name='ConsumerProgress', description='The consumption status of the consumer group.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='252820E1-A2E6-45F2-B4C9-1056B8CE****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetConsumerProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerProgressResponseBody(name='body'),
}

async function getConsumerProgress(request: GetConsumerProgressRequest): GetConsumerProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceListRequest {
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances.', example='alikafka_post-cn-mp91gnw0p***', position='Query'),
  orderId?: string(name='OrderId', description='The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.', example='6072673****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain this ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the resource tag.

*   If this parameter is left empty, all tag keys are matched.
*   The tag key can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='test'),
      value?: string(name='Value', description='The value of the resource tag.

*   This parameter must be left empty if the Key parameter is left empty. If this parameter is left empty, the values of all tags are matched.
*   The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model GetInstanceListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the call is successful.', example='200'),
  instanceList?: {
    instanceVO?: [ 
    {
      allConfig?: string(name='AllConfig', description='The configurations of the deployed ApsaraMQ for Kafka instance.', example='{\\"enable.vpc_sasl_ssl\\":\\"false\\",\\"kafka.log.retention.hours\\":\\"66\\",\\"enable.acl\\":\\"false\\",\\"kafka.message.max.bytes\\":\\"6291456\\"}'),
      confluentConfig?: {
        connectCU?: int32(name='ConnectCU'),
        connectReplica?: int32(name='ConnectReplica'),
        controlCenterCU?: int32(name='ControlCenterCU'),
        controlCenterReplica?: int32(name='ControlCenterReplica'),
        controlCenterStorage?: int32(name='ControlCenterStorage'),
        kafkaCU?: int32(name='KafkaCU'),
        kafkaReplica?: int32(name='KafkaReplica'),
        kafkaRestProxyCU?: int32(name='KafkaRestProxyCU'),
        kafkaRestProxyReplica?: int32(name='KafkaRestProxyReplica'),
        kafkaStorage?: int32(name='KafkaStorage'),
        ksqlCU?: int32(name='KsqlCU'),
        ksqlReplica?: int32(name='KsqlReplica'),
        ksqlStorage?: int32(name='KsqlStorage'),
        schemaRegistryCU?: int32(name='SchemaRegistryCU'),
        schemaRegistryReplica?: int32(name='SchemaRegistryReplica'),
        zooKeeperCU?: int32(name='ZooKeeperCU'),
        zooKeeperReplica?: int32(name='ZooKeeperReplica'),
        zooKeeperStorage?: int32(name='ZooKeeperStorage'),
      }(name='ConfluentConfig'),
      createTime?: long(name='CreateTime', description='The time when the instance was created. Unit: milliseconds.', example='1577961819000'),
      deployType?: int32(name='DeployType', description='The type of the network in which the instance is deployed. Valid values:

*   **4**: the Internet and VPCs
*   **5**: VPCs', example='5'),
      diskSize?: int32(name='DiskSize', description='The disk size of the instance. Unit: GB', example='3600'),
      diskType?: int32(name='DiskType', description='The disk type. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD', example='1'),
      domainEndpoint?: string(name='DomainEndpoint', description='The default endpoint of the instance in domain name mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1-vpc.alikafka.aliyuncs.com:9092,alikafka-pre-cn-zv**********-2-vpc.alikafka.aliyuncs.com:9092,alikafka-pre-cn-zv**********-3-vpc.alikafka.aliyuncs.com:9092'),
      eipMax?: int32(name='EipMax', description='The peak Internet traffic allowed for the instance.', example='20'),
      endPoint?: string(name='EndPoint', description='The default endpoint of the instance in IP address mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='192.168.XX.XX:9092,192.168.XX.XX:9092,192.168.XX.XX:9092'),
      expiredTime?: long(name='ExpiredTime', description='The time when the instance expires. Unit: milliseconds.', example='1893581018000'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-mp919o4v****'),
      ioMax?: int32(name='IoMax', description='The peak traffic allowed for the instance.', example='20'),
      ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification.', example='alikafka.hw.2xlarge'),
      kmsKeyId?: string(name='KmsKeyId', description='The ID of the key that is used for disk encryption in the region where the instance resides.', example='0d24xxxx-da7b-4786-b981-9a164dxxxxxx'),
      msgRetain?: int32(name='MsgRetain', description='The retention period of messages on the instance. Unit: hours.', example='72'),
      name?: string(name='Name', description='The instance name.', example='alikafka_post-cn-mp91gnw0****'),
      paidType?: int32(name='PaidType', description='The billing method of the instance. Valid values:

*   **0**: the subscription billing method
*   **1**: the pay-as-you-go billing method', example='1'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      reservedPublishCapacity?: int32(name='ReservedPublishCapacity'),
      reservedSubscribeCapacity?: int32(name='ReservedSubscribeCapacity'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-ac***********7q'),
      saslDomainEndpoint?: string(name='SaslDomainEndpoint', description='The Simple Authentication and Security Layer (SASL) endpoint of the instance in domain name mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1-vpc.alikafka.aliyuncs.com:9094,alikafka-pre-cn-zv**********-2-vpc.alikafka.aliyuncs.com:9094,alikafka-pre-cn-zv**********-3-vpc.alikafka.aliyuncs.com:9094'),
      securityGroup?: string(name='SecurityGroup', description='The security group to which the instance belongs.

*   If the instance is deployed by using the ApsaraMQ for Kafka console or calling the [StartInstance](~~157786~~) operation without a security group configured, no value is returned.
*   If the instance is deployed by calling the [StartInstance](~~157786~~) operation with a security group configured, the return value is the configured security group.', example='sg-bp13wfx7kz9pkow****'),
      serviceStatus?: int32(name='ServiceStatus', description='The status of the instance. Valid values:

*   **0**: pending
*   **1**: preparing hardware resources
*   **2**: initializing
*   **3**: starting
*   **5**: running
*   **6**: migrating
*   **7**: ready for upgrade
*   **8**: upgrading
*   **9**: ready for changes
*   **10**: released
*   **11**: changing
*   **15**: expired', example='5'),
      specType?: string(name='SpecType', description='The instance edition. Valid values:

*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)
*   **normal**: Standard Edition', example='professional'),
      sslDomainEndpoint?: string(name='SslDomainEndpoint', description='The SSL endpoint of the instance in domain name mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1.alikafka.aliyuncs.com:9093,alikafka-pre-cn-zv**********-2.alikafka.aliyuncs.com:9093,alikafka-pre-cn-zv**********-3.alikafka.aliyuncs.com:9093'),
      sslEndPoint?: string(name='SslEndPoint', description='The Secure Sockets Layer (SSL) endpoint of the instance in IP address mode. ApsaraMQ for Kafka instances support endpoints in domain name mode and IP address mode.

*   Endpoints in domain name mode: An endpoint in this mode consists of the domain name of the instance and a port number. The format of an endpoint in this mode is `{Instance domain name}:{Port number}`.
*   Endpoints in IP address mode: An endpoint in this mode consists of the IP address of the broker and a port number. The format of an endpoint in this mode is `{Broker IP address}:{Port number}`.', example='192.0.XX.XX:9093,198.51.XX.XX:9093,203.0.XX.XX:9093'),
      standardZoneId?: string(name='StandardZoneId', description='The zone ID.', example='cn-hangzhou-k'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags.'),
      topicNumLimit?: int32(name='TopicNumLimit', description='The maximum number of topics that can be created on the instance.', example='180'),
      upgradeServiceDetailInfo?: {
        current2OpenSourceVersion?: string(name='Current2OpenSourceVersion', description='The open source Apache Kafka version that corresponds to the instance.', example='2.2.0'),
      }(name='UpgradeServiceDetailInfo', description='The upgrade information of the instance.'),
      usedGroupCount?: int32(name='UsedGroupCount', description='The number of used consumer groups.', example='10'),
      usedPartitionCount?: int32(name='UsedPartitionCount', description='The number of used partitions.', example='25'),
      usedTopicCount?: int32(name='UsedTopicCount', description='The number of used topics.', example='3'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the instance.', example='vsw-bp1fvuw0ljd7vzmo3****'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the instance is deployed.', example='vpc-bp1ojac7bv448nifj****'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='zonei'),
    }
  ](name='InstanceVO')
  }(name='InstanceList', description='The information about the instance.'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='4B6D821D-7F67-4CAA-9E13-A5A997C3****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model GetInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceListResponseBody(name='body'),
}

async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetQuotaTipRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-i7m2wpm5****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
}

model GetQuotaTipResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The additional message. This message is typically used to describe API call failures for troubleshooting.', example='operation success.'),
  quotaData?: {
    groupLeft?: int32(name='GroupLeft', description='The number of available groups.', example='50'),
    groupUsed?: int32(name='GroupUsed', description='The number of used groups.', example='50'),
    isPartitionBuy?: int32(name='IsPartitionBuy', description='The method that you use to purchase partitions. Valid values:

*   0: indicates that the instance is purchased based on topics.
*   1: indicates that the instance is purchased based on partitions.', example='1'),
    partitionLeft?: int32(name='PartitionLeft', description='The number of available partitions.', example='1050'),
    partitionNumOfBuy?: int32(name='PartitionNumOfBuy', description='The number of purchased partitions.', example='100'),
    partitionQuota?: int32(name='PartitionQuota', description='The quota of partitions.', example='1100'),
    partitionUsed?: int32(name='PartitionUsed', description='The number of used partitions.', example='50'),
    topicLeft?: int32(name='TopicLeft', description='The number of available topics.', example='20'),
    topicNumOfBuy?: int32(name='TopicNumOfBuy', description='The number of purchased topics.', example='50'),
    topicQuota?: int32(name='TopicQuota', description='The quota of topics.', example='50'),
    topicUsed?: int32(name='TopicUsed', description='The number of used topics.', example='30'),
  }(name='QuotaData', description='The quota.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0178A3A7-E87B-5E50-A16F-3E62F534****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='True'),
}

model GetQuotaTipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaTipResponseBody(name='body'),
}

async function getQuotaTip(request: GetQuotaTipRequest): GetQuotaTipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuotaTip', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicListRequest {
  currentPage?: string(name='CurrentPage', description='The page number of the page to return. Default value: 1.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-0pp1954n****', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: 10', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance to which the topics that you want to query belong.', example='cn-hangzhou', position='Query'),
  topic?: string(name='Topic', description='The name of the topic that you want to query.', example='topic_name', position='Query'),
}

model GetTopicListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0D3DC5B-5C37-47AD-9F22-1F559880****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  topicList?: {
    topicVO?: [ 
    {
      autoCreate?: boolean(name='AutoCreate', example='false'),
      compactTopic?: boolean(name='CompactTopic', description='The log cleanup policy that is used for the topic. This parameter is returned when the **LocalTopic** parameter is set to **true**. Valid values:

*   false: The topic uses the default log cleanup policy.
*   true: The topic uses the log compaction policy.', example='false'),
      createTime?: long(name='CreateTime', description='The timestamp that indicates when the topic was created. Unit: milliseconds.', example='1576563109000'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='alikafka_pre-cn-0pp1954n****'),
      localTopic?: boolean(name='LocalTopic', description='The type of storage used by the topic. Valid values:

*   false: The topic uses cloud storage.
*   true: The topic uses local storage.', example='false'),
      partitionNum?: int32(name='PartitionNum', description='The number of partitions in the topic.', example='6'),
      regionId?: string(name='RegionId', description='The region ID of the instance to which the topics that you want to query belong.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The description of the topic. Valid values:

*   The description contains only letters, digits, hyphens (-), and underscores (\\_).
*   The description is 3 to 64 characters in length.', example='test'),
      status?: int32(name='Status', description='The status of the topic. Valid values:

**0:** indicates that the topic is running.

If the topic is deleted, this parameter is not returned.', example='0'),
      statusName?: string(name='StatusName', description='The status of the topic. Valid values:

**Running**

If the topic is deleted, this parameter is not returned.', example='Running'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Test'),
          value?: string(name='Value', description='The tag value.', example='Test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags.'),
      topic?: string(name='Topic', description='The name of the topic. Valid values:

*   The name contains only letters, digits, hyphens (-), and underscores (\\_).
*   The name is 3 to 64 characters in length. If the name that you specified contains more than 64 characters, the returned name is automatically truncated.', example='topic_name'),
    }
  ](name='TopicVO')
  }(name='TopicList', description='The information about the topic.'),
  total?: int32(name='Total', description='The number of topics.', example='1'),
}

model GetTopicListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicListResponseBody(name='body'),
}

async function getTopicList(request: GetTopicListRequest): GetTopicListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicList', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicStatusRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-v0h15tjm****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The name of the topic.', example='normal_topic_9d034262835916103455551be06cc****', position='Query'),
}

model GetTopicStatusResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E475C7E2-8C35-46EF-BE7D-5D2A9F5D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  topicStatus?: {
    lastTimeStamp?: long(name='LastTimeStamp', description='The time when the last consumed message was generated.', example='1566470063575'),
    offsetTable?: {
      offsetTable?: [ 
      {
        lastUpdateTimestamp?: long(name='LastUpdateTimestamp', description='The last time when the partition was modified.', example='1566470063547'),
        maxOffset?: long(name='MaxOffset', description='The latest offset in the partition of the topic.', example='76'),
        minOffset?: long(name='MinOffset', description='The earliest offset in the partition of the topic.', example='0'),
        partition?: int32(name='Partition', description='The ID of the partition.', example='0'),
        topic?: string(name='Topic', description='The name of the topic.', example='testkafka'),
      }
    ](name='OffsetTable')
    }(name='OffsetTable', description='The information about offsets in the topic.'),
    totalCount?: long(name='TotalCount', description='The number of messages in the topic.', example='423'),
  }(name='TopicStatus', description='The status information about messages in the topic.'),
}

model GetTopicStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicStatusResponseBody(name='body'),
}

async function getTopicStatus(request: GetTopicStatusRequest): GetTopicStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicSubscribeStatusRequest {
  instanceId: string(name='InstanceId', example='alikafka_pre-cn-v0h1cng0***', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', example='topic_name', position='Query'),
}

model GetTopicSubscribeStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', description='Id of the request', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', example='true'),
  topicSubscribeStatus?: {
    consumerGroups?: [ string ](name='ConsumerGroups'),
    topic?: string(name='Topic', example='topic_api_1681624879908'),
  }(name='TopicSubscribeStatus'),
}

model GetTopicSubscribeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicSubscribeStatusResponseBody(name='body'),
}

async function getTopicSubscribeStatus(request: GetTopicSubscribeStatusRequest): GetTopicSubscribeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicSubscribeStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource ID. The following items describe the formats of resource IDs:

*   Instance ID: instanceId
*   Topic ID: Kafka_alikafka_instanceId_topic
*   Group ID: Kafka_alikafka_instanceId_consumerGroup

For example, you create an instance whose ID is alikafka_post-cn-v0h1fgs2xxxx, a topic whose name is test-topic, and a group whose ID is test-consumer-group. In this case, the resource IDs are alikafka_post-cn-v0h1fgs2xxxx, Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-topic, and Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-consumer-group.

>  You must specify one of the **ResourceId** and **Tag** parameters to query the tags that are attached to a resource. Otherwise, the call fails.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource whose tags you want to query. The value is an enumerated value. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

*   If you leave this parameter empty, the keys of all tags are matched.
*   The tag key must be 1 to 128 characters in length and cannot start with acs: or aliyun. The tag key cannot contain http:// or https://.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   If you do not specify the tag key, you cannot specify the tag value. If you leave this parameter empty, the values of all tags are matched.
*   The tag value must be 1 to 128 characters in length and cannot start with acs: or aliyun. The tag value cannot contain http:// or https://.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE65F6B7-7566-4802-9007-96F2494A****'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource. A resource ID complies with the following rules:

*   The resource ID of an instance is the value of the instanceId parameter.
*   The resource ID of a topic is the value of the Kafka_alikafka_instanceId_topic parameter.
*   The resource ID of a consumer group is the value of the Kafka_alikafka_instanceId_consumerGroup parameter.

For example, the resources whose tags you want to query include the alikafka_post-cn-v0h1fgs2xxxx instance, the test-topic topic, and the test-consumer-group consumer group. In this case, their resource IDs are alikafka_post-cn-v0h1fgs2xxxx, Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-topic, and Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-consumer-group.', example='alikafka_post-cn-v0h1fgs2****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. The value is an enumerated value. Valid values:

*   **Instance**
*   **Topic**
*   **Consumergroup**', example='instance'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources', description='Details of the resource and tags, such as the resource ID, the resource type, tag keys, and tag values.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNameRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  instanceName: string(name='InstanceName', description='The instance name. Valid values:

*   The name can contain only letters, digits, hyphens (-), and underscores (\\_).
*   The name must be 3 to 64 characters in length. A name that contains more than 64 characters is automatically truncated.', example='dev-test', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model ModifyInstanceNameResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model ModifyInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceNameResponseBody(name='body'),
}

async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPartitionNumRequest {
  addPartitionNum: int32(name='AddPartitionNum', description='The number of partitions that you want to add to the topic.

*   The value must be an integer that is greater than 0.
*   To reduce the risk of data skew, we recommend that you set the value to a multiple of 6.
*   The number of total partitions ranges from 1 to 360.', example='6', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-0pp1l9z****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.', example='TopicPartitionNum', position='Query'),
}

model ModifyPartitionNumResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B7A39AE5-0B36-4442-A304-E088526****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyPartitionNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPartitionNumResponseBody(name='body'),
}

async function modifyPartitionNum(request: ModifyPartitionNumRequest): ModifyPartitionNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPartitionNum', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTopicRemarkRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-0pp1l9z****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The description of the topic.', example='testremark', position='Query'),
  topic: string(name='Topic', description='The name of the topic.', example='alikafka_post-cn-0pp1l9z8****', position='Query'),
}

model ModifyTopicRemarkResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DB6F1BEA-903B-4FD8-8809-46E7E9CE***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyTopicRemarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTopicRemarkResponseBody(name='body'),
}

async function modifyTopicRemark(request: ModifyTopicRemarkRequest): ModifyTopicRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTopicRemark', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1672410180000', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  offset?: string(name='Offset', description='The consumer offset of the partition.', example='100', position='Query'),
  partition?: string(name='Partition', description='The partition ID.', example='0', position='Query'),
  queryType: string(name='QueryType', description='The query type. Valid values:

*   byOffset: queries messages by offset. If you select this value, you must configure Partition and Offset.
*   byTimestamp: queries messages by time. If you select this value, you must configure BeginTime.', example='byTimestamp', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the resource resides.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.', example='testkafka', position='Query'),
}

model QueryMessageResponseBody = {
  code?: int32(name='Code', description='The returned HTTP status code. If the request is successful, 200 is returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  messageList?: [ 
    {
      checksum?: long(name='Checksum', description='The check value of the chaincode.', example='0'),
      key?: string(name='Key', description='The message key.', example='this is key'),
      keyTruncated?: boolean(name='KeyTruncated', description='Indicates whether the key is truncated.', example='false'),
      offset?: long(name='Offset', description='The consumer offset of the partition.', example='1'),
      partition?: long(name='Partition', description='The partition ID.', example='0'),
      serializedKeySize?: int32(name='SerializedKeySize', description='The size of the key after serialization. Unit: bytes.', example='11'),
      serializedValueSize?: int32(name='SerializedValueSize', description='The size of the value after serialization. Unit: bytes.', example='20'),
      timestamp?: long(name='Timestamp', description='The time when the message was created. The value of this parameter is a UNIX timestamp in milliseconds.', example='1705482172640'),
      timestampType?: string(name='TimestampType', description='The time type.', example='CreateTime'),
      topic?: string(name='Topic', description='The topic name.', example='dqc_test2'),
      truncatedKeySize?: int32(name='TruncatedKeySize', description='The truncated size of the message key. Unit: bytes.

*   A message is truncated only if the message exceeds 10 MB in size.', example='0'),
      truncatedValueSize?: int32(name='TruncatedValueSize', description='The truncated size of the message value. Unit: bytes.

*   A message is truncated only if the message exceeds 10 MB in size.', example='0'),
      value?: string(name='Value', description='The message value.', example='Welcome to Ali kafka'),
      valueTruncated?: boolean(name='ValueTruncated', description='Indicates whether the value is truncated.', example='false'),
    }
  ](name='MessageList', description='The messages.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model QueryMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessageResponseBody(name='body'),
}

async function queryMessage(request: QueryMessageRequest): QueryMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessage', 'GET', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  forceDeleteInstance?: boolean(name='ForceDeleteInstance', description='Specifies whether to immediately release the physical resources of the instance. Valid values:

*   **true**: The physical resources of the instance are immediately released.
*   **false**: The physical resources of the instance are retained for a period of time before they are released.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model ReleaseInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015A***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ReleaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstanceResponseBody(name='body'),
}

/**
  * You cannot call this operation to release a subscription Message Queue for Apache Kafka instance.
  *
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReopenInstanceRequest {
  instanceId: string(name='InstanceId', example='alikafka_post-cn-mp91inkw****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ReopenInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='252820E1-A2E6-45F2-B4C9-1056B8CE****'),
  success?: boolean(name='Success', example='true'),
}

model ReopenInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReopenInstanceResponseBody(name='body'),
}

async function reopenInstance(request: ReopenInstanceRequest): ReopenInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReopenInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  config?: string(name='Config', description='The initial configurations of ApsaraMQ for Kafka. The value must be a valid JSON string.

If you do not specify this parameter, it is left empty.

The following parameters can be configured for **Config**:

*   **enable.vpc_sasl_ssl**: specifies whether to enable VPC transmission encryption. Valid values:

    *   **true**: enables VPC transmission encryption. If you enable VPC transmission encryption, you must also enable access control list (ACL).
    *   **false**: disables VPC transmission encryption. By default, VPC transmission encryption is disabled.

*   **enable.acl**: specifies whether to enable ACL. Valid values:

    *   **true**: enables ACL.
    *   **false**: disables ACL. By default, ACL is disabled.

*   **kafka.log.retention.hours**: the maximum message retention period when the disk capacity is sufficient. Unit: hours. Valid values: 24 to 480. Default value: **72**. When the disk usage reaches 85%, the disk capacity is considered insufficient and the system deletes messages in the order in which they are stored to ensure service availability.

*   **kafka.message.max.bytes**: the maximum size of messages that ApsaraMQ for Kafka can send and receive. Unit: bytes. Valid values: 1048576 to 10485760. Default value: **1048576**. Before you change the value of this parameter, make sure that the new value matches the corresponding configurations on the producers and consumers.', example='{"kafka.log.retention.hours":"33"}', position='Query'),
  crossZone?: boolean(name='CrossZone', description='Specifies whether cross-zone deployment is required. Valid values:

*   true
*   false

Default value: true.', example='false', position='Query'),
  deployModule?: string(name='DeployModule', description='The deployment mode of the instance. Valid values:

*   **vpc**: deploys the instance that allows access only from a VPC.
*   **eip**: deploys the instance that allows access from the Internet and a VPC.

The deployment mode of the instance must match the type of the instance. If the instance allows access only from a VPC, set the value to **vpc**. If the instance allows access from the Internet and a VPC, set the value to **eip**.', example='vpc', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  isEipInner?: boolean(name='IsEipInner', description='Specifies whether the instance supports elastic IP addresses (EIPs). Valid values:

*   **true**: supports EIPs and allows access from the Internet and a VPC.
*   **false**: does not support EIPs and allows access only from a VPC.

The value of this parameter must match the type of the instance. For example, if the instance allows access only from a VPC, set this parameter to **false**.', example='false', position='Query'),
  isForceSelectedZones?: boolean(name='IsForceSelectedZones', description='Specifies whether to forcibly deploy the instance in the selected zones.', example='false', position='Query'),
  isSetUserAndPassword?: boolean(name='IsSetUserAndPassword', description='Specifies whether to set a new username and password. Valid values:

*   **true**: sets a new username and password.
*   **false**: does not set a new username or password.

This parameter is available only if you deploy an instance that allows access from the Internet and a VPC.', example='false', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the key that is used for disk encryption in the region where the instance is deployed. You can obtain the ID of the key in the [Key Management Service (KMS) console](https://kms.console.aliyun.com/?spm=a2c4g.11186623.2.5.336745b8hfiU21) or create a key. For more information, see [Manage CMKs](~~181610~~).

If this parameter is configured, disk encryption is enabled for the instance. You cannot disable disk encryption after disk encryption is enabled. When you call this operation, the system checks whether the AliyunServiceRoleForAlikafkaInstanceEncryption service-linked role is created. If the role is not created, the system automatically creates the role. For more information, see [Service-linked roles](~~190460~~).', example='0d24xxxx-da7b-4786-b981-9a164dxxxxxx', position='Query'),
  name?: string(name='Name', description='The name of the instance.

>  If you specify a value for this parameter, make sure that the specified value is unique in the region of the instance.', example='newInstanceName', position='Query'),
  notifier?: string(name='Notifier', description='The alert contact.', example='Mr. Wang', position='Query'),
  password?: string(name='Password', description='The password that corresponds to the username.

This parameter is available only if you deploy an instance that allows access from the Internet and a VPC.', example='password', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  securityGroup?: string(name='SecurityGroup', description='The security group of the instance.

If you do not specify this parameter, ApsaraMQ for Kafka automatically configures a security group for your instance. If you specify this parameter, you must create a security group in advance. For more information, see [Create a security group](~~25468~~).', example='sg-bp13wfx7kz9pko****', position='Query'),
  selectedZones?: string(name='SelectedZones', description='The two-dimensional arrays that consist of the candidate set for primary zones and the candidate set for secondary zones.

*   If you set CrossZone to true and specify Zone H and Zone F as the candidate set for primary zones and Zone K as the candidate set for secondary zones, set this parameter to `[[\\"zoneh\\",\\"zonef\\"],[\\"zonek\\"]]`.

    **

    **Note** If you specify multiple zones as the primary or secondary zones, the system deploys the instance in one of the zones without prioritizing them. For example, if you set this parameter to `[[\\"zoneh\\",\\"zonef\\"],[\\"zonek\\"]]`, the primary zone in which the instance is deployed can be Zone H or Zone F, and the secondary zone is Zone K.

*   If you set CrossZone to false and want to deploy the instance in Zone K, set this parameter to `[[\\"zonek\\"],[]]`. In this case, the value of this parameter must still be two-dimensional arrays, but the array that specifies the candidate for secondary zones is left empty.', example='[[\\"zonel\\"],[\\"zonek\\"]]', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The version of ApsaraMQ for Kafka. Valid values: 0.10.2 and 2.2.0.', example='0.10.2', position='Query'),
  userPhoneNum?: string(name='UserPhoneNum', description='The mobile phone number of the alert contact.', example='1581234****', position='Query'),
  username?: string(name='Username', description='The username that is used to access the instance.

This parameter is available only if you deploy an instance that allows access from the Internet and a VPC.', example='username', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which you want to connect the instance.', example='vsw-bp1j3sg5979fstnpl****', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to deploy the instance.', example='vpc-bp1r4eg3yrxmygv****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which you want to deploy the instance.

*   The zone ID of the instance must be the same as that of the vSwitch.
*   The value must be in the format of zoneX or Region ID-X. For example, you can set this parameter to zonea or cn-hangzhou-k.', example='cn-hangzhou-k', position='Query'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
  * >  You can call this operation up to twice per second.
  *
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId: string(name='InstanceId', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='17D425C2-4EA3-4AB8-928D-E10511ECF***'),
  success?: boolean(name='Success', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Message Queue for Apache RocketMQ instance which contains the resource to which you want to attach tags.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The list of resource IDs.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resources. The value is an enumerated value. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**

>  The value of this parameter is not case-sensitive.', example='instance', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The tag key.

*   You must specify this parameter.
*   The tag key must be 1 to 128 characters in length and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   You can leave this parameter empty.
*   The tag value must be 1 to 128 characters in length and cannot start with acs: or aliyun. The tag key cannot contain http:// or https://.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags that you want to add.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to detach all tags from the resource. This parameter only takes effect when the TagKey.N parameter is not configured. Default value: **false**.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the resources from which you want to detach tags.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resources. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**

>  The value of this parameter is not case-sensitive.', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag key.', example='FinanceDept', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAllowedIpRequest {
  allowedListIp: string(name='AllowedListIp', description='The IP addresses that you want to manage. You can specify a CIDR block. Example: **192.168.0.0/16**.

*   If the **UpdateType** parameter is set to **add**, specify one or more IP addresses for this parameter. Separate multiple IP addresses with commas (,).
*   If the **UpdateType** parameter is set to **delete**, specify only one IP address.
*   Exercise caution when you delete IP addresses.', example='0.0.0.0/0', position='Query'),
  allowedListType: string(name='AllowedListType', description='The type of the whitelist. Valid values:

*   **vpc**: a whitelist for access from a VPC.
*   **internet**: a whitelist for access from the Internet.', example='vpc', position='Query'),
  description?: string(name='Description', description='The description of the whitelist.', example='tf-testAccEcsImageConfigBasic3549descriptionChange', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-0pp1cng20***', position='Query'),
  portRange: string(name='PortRange', description='The port range. Valid values:

*   **9092/9092**: the port range for access from virtual private clouds (VPCs) by using the default endpoint.
*   **9093/9093**: the port range for access from the Internet.
*   **9094/9094**: the port range for access from VPCs by using the Simple Authentication and Security Layer (SASL) endpoint.
*   **9095/9095**: the port range for access from VPCs by using the Secure Sockets Layer (SSL) endpoint.

This parameter must correspond to **AllowdedListType**.', example='9092/9092', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  updateType: string(name='UpdateType', description='The type of configuration change. Valid values:

*   **add**
*   **delete**', example='add', position='Query'),
}

model UpdateAllowedIpResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='17D425C2-4EA3-4AB8-928D-E10511ECF***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateAllowedIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAllowedIpResponseBody(name='body'),
}

async function updateAllowedIp(request: UpdateAllowedIpRequest): UpdateAllowedIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAllowedIp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConsumerOffsetRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.

*   The name can contain letters, digits, hyphens (-), and underscores (\\_).
*   The name must be **3 to 64** characters in length. If a name contains more than **64** characters, the name is automatically truncated.
*   The name of a consumer group cannot be changed after the consumer group is created.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-mp91inkw****', position='Query'),
  offsets?: [ 
    {
      offset?: long(name='Offset', description='The consumer offset of the partition.', example='1'),
      partition?: int32(name='Partition', description='The partition ID.', example='0'),
    }
  ](name='Offsets', description='If you set resetType to offset, you can use this parameter to reset the consumer offset of each partition of a specific topic in the consumer group.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance to which the consumer group belongs.', example='cn-hangzhou', position='Query'),
  resetType?: string(name='ResetType', description='The method that is used to reset the consumer offsets of the subscribed topics of a consumer group. Valid values:

*   **timestamp** (default)
*   **offset**', example='timestamp', position='Query'),
  time?: string(name='Time', description='The point in time when message consumption starts. The value of this parameter is a UNIX timestamp in milliseconds. The value of this parameter must be **less than 0** or **within the retention period of the consumer offset**. This parameter takes effect only if you set resetType to timestamp.

*   If you want to reset the consumer offset to the latest offset, set this parameter to -1.
*   If you want to reset the consumer offset to the earliest offset, set this parameter to -2.', example='-1', position='Query'),
  topic: string(name='Topic', description='The topic name.

*   The name can contain letters, digits, underscores (\\_), and hyphens (-).
*   The name must be **3 to 64** characters in length. If a name contains more than **64** characters, the name is automatically truncated.
*   The name of a topic cannot be changed after the topic is created.

**If you want to reset the consumer offsets of all topics to which the consumer subscribes, specify an empty string.', example='topic_name', position='Query'),
}

model UpdateConsumerOffsetResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The status code **200** indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The request ID.', example='56729737-C428-4E1B-AC68-7A8C2D5****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model UpdateConsumerOffsetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConsumerOffsetResponseBody(name='body'),
}

/**
  * You can call this operation to reset the consumer offset of a specific consumer group. You can use the timestamp or offset parameter to reset the consumer offset of a consumer group. You can implement the following features by configuring a combination of different parameters:
  * *   Reset the consumer offsets of one or all subscribed topics of a consumer group to the latest offset. This way, you can consume messages in the topics from the latest offset.
  * *   Reset the consumer offsets of one or all subscribed topics of a consumer group to a specific point in time. This way, you can consume messages in the topics from the specified point in time.
  * *   Reset the consumer offset of one subscribed topic of a consumer group to a specific offset in a specific partition. This way, you can consume messages from the specified offset in the specified partition.
  *
 */
async function updateConsumerOffset(request: UpdateConsumerOffsetRequest): UpdateConsumerOffsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConsumerOffset', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceConfigRequest {
  config: string(name='Config', description='The configurations that you want to update for the ApsaraMQ for Kafka instance. The value must be a valid JSON string.', example='{"kafka.log.retention.hours":"33"}', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model UpdateInstanceConfigResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B6D821D-7F67-4CAA-9E13-A5A997C35***'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceConfigResponseBody(name='body'),
}

/**
  * ## **Permissions**
  * If a RAM user wants to call the **UpdateInstanceConfig** operation, the RAM user must be granted the required permissions. For more information about how to grant permissions, see [RAM policies](~~185815~~).
  * |API|Action|Resource|
  * |---|---|---|
  * |UpdateInstanceConfig|alikafka: UpdateInstance|acs:alikafka:*:*:{instanceId}|
  *
 */
async function updateInstanceConfig(request: UpdateInstanceConfigRequest): UpdateInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTopicConfigRequest {
  config: string(name='Config', description='The key of the topic configuration.

*   Valid values: retention.hours, max.message.bytes, and replications.
*   retention.hours specifies the message retention period.
*   max.message.bytes specifies the maximum size of a sent message.
*   replications specifies the number of topic replicas.', example='replications', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The topic name.', example='dqc_test2', position='Query'),
  value: string(name='Value', description='The value of the topic configuration.

*   retention.hours specifies the message retention period. The value is a string. Valid values: 24 to 8760.
*   max.message.bytes specifies the maximum size of a sent message. The value is a string. Valid values: 1048576 to 10485760.
*   replications specifies the number of topic replicas. The value is a string. Valid values: 1 to 3.', example='3', position='Query'),
}

model UpdateTopicConfigResponseBody = {
  code?: long(name='Code', description='The HTTP status code. If the request is successful, 200 is returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='[]'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0178A3A7-E87B-5E50-A16F-3E62F534****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='True'),
}

model UpdateTopicConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTopicConfigResponseBody(name='body'),
}

async function updateTopicConfig(request: UpdateTopicConfigRequest): UpdateTopicConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTopicConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceVersionRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  targetVersion: string(name='TargetVersion', description='The major version to be upgraded to. Valid values:

*   **0.10.2**
*   **2.2.0**

If you set this parameter to the current major version, the system upgrades the instance to the latest minor version.', example='0.10.2', position='Query'),
}

model UpgradeInstanceVersionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradeInstanceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeInstanceVersionResponseBody(name='body'),
}

/**
  * ## **Permissions**
  * A RAM user must be granted the required permissions before the RAM user calls the **UpgradeInstanceVersion** operation. For information about how to grant permissions, see [RAM policies](~~185815~~).
  * |API|Action|Resource|
  * |---|---|---|
  * |UpgradeInstanceVersion|UpdateInstance|acs:alikafka:*:*:{instanceId}|
  * ## **QPS limits**
  * You can send a maximum of two queries per second (QPS).
  *
 */
async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePostPayOrderRequest {
  diskSize?: int32(name='DiskSize', description='The disk size. Unit: GB.

*   The disk size that you specify must be greater than or equal to the current disk size of the instance.
*   For more information about the valid values, see [Billing](~~84737~~).', example='500', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   The Internet traffic volume that you specify must be greater than or equal to the current Internet traffic volume of the instance.
*   For more information about the valid values, see [Billing](~~84737~~).
> - If the **EipModel** parameter is set to **true**, set the **EipMax** parameter to a value that is greater than 0.
> - If the **EipModel** parameter is set to **false**, set the **EipMax** parameter to **0**.', example='0', position='Query'),
  eipModel?: boolean(name='EipModel', description='Specifies whether to enable Internet access for the instance. Valid values:

*   true: enables Internet access.
*   false: disables Internet access.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   The maximum traffic that you specify must be greater than or equal to the current maximum traffic of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you specify only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='60', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   The traffic specification that you specify must be greater than or equal to the current traffic specification of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you specify only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='alikafka.hw.6xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing](~~84737~~).', example='80', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  serverlessConfig?: {
    reservedPublishCapacity?: long(name='ReservedPublishCapacity'),
    reservedSubscribeCapacity?: long(name='ReservedSubscribeCapacity'),
  }(name='ServerlessConfig', shrink='json', position='Query'),
  specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

You cannot downgrade an instance from the Professional Edition to the Standard Edition. For more information about these instance editions, see [Billing](~~84737~~).', example='professional', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing](~~84737~~).', example='80', position='Query'),
}

model UpgradePostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015A***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradePostPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradePostPayOrderResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing method and pricing of pay-as-you-go Message Queue for Apache Kafka instances. For more information, see [Billing](~~84737~~).
  *
 */
async function upgradePostPayOrder(request: UpgradePostPayOrderRequest): UpgradePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePrePayOrderRequest {
  confluentConfig?: {
    connectCU?: int32(name='ConnectCU'),
    connectReplica?: int32(name='ConnectReplica'),
    controlCenterCU?: int32(name='ControlCenterCU'),
    controlCenterReplica?: int32(name='ControlCenterReplica'),
    controlCenterStorage?: int32(name='ControlCenterStorage'),
    kafkaCU?: int32(name='KafkaCU'),
    kafkaReplica?: int32(name='KafkaReplica'),
    kafkaRestProxyCU?: int32(name='KafkaRestProxyCU'),
    kafkaRestProxyReplica?: int32(name='KafkaRestProxyReplica'),
    kafkaStorage?: int32(name='KafkaStorage'),
    ksqlCU?: int32(name='KsqlCU'),
    ksqlReplica?: int32(name='KsqlReplica'),
    ksqlStorage?: int32(name='KsqlStorage'),
    schemaRegistryCU?: int32(name='SchemaRegistryCU'),
    schemaRegistryReplica?: int32(name='SchemaRegistryReplica'),
    zooKeeperCU?: int32(name='ZooKeeperCU'),
    zooKeeperReplica?: int32(name='ZooKeeperReplica'),
    zooKeeperStorage?: int32(name='ZooKeeperStorage'),
  }(name='ConfluentConfig', shrink='json', position='Query'),
  diskSize: int32(name='DiskSize', description='The size of the disk.

*   The disk size that you specify must be greater than or equal to the current disk size of the instance.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='900', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   The Internet traffic volume that you specify must be greater than or equal to the current Internet traffic volume of the instance.
*   For more information about the valid values, see [Billing overview](~~84737~~).
> - If the **EipModel** parameter is set to **true**, set the **EipMax** parameter to a value that is greater than 0.
> - If the **EipModel** parameter is set to **false**, set the **EipMax** parameter to **0**.', example='3', position='Query'),
  eipModel?: boolean(name='EipModel', description='Specifies whether to enable Internet access for the instance. Valid values:

*   true: enables Internet access.
*   false: disables Internet access.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   The maximum traffic volume that you specify must be greater than or equal to the current maximum traffic volume of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you configure only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='40', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   The traffic specification that you specify must be greater than or equal to the current traffic specification of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you configure only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='alikafka.hw.2xlarge', position='Query'),
  paidType?: int32(name='PaidType', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

You cannot downgrade an instance from the Professional Edition to the Standard Edition. For more information about these instance editions, see [Billing overview](~~84737~~).', example='professional', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='50', position='Query'),
}

model UpgradePrePayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradePrePayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradePrePayOrderResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing method and pricing of subscription Message Queue for Apache Kafka instances. For more information, see [Billing overview](~~84737~~).
  *
 */
async function upgradePrePayOrder(request: UpgradePrePayOrderRequest): UpgradePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

