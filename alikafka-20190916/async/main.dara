/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alikafka';
  @version = '2019-09-16';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-ac***********7q', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-ac***********7q'),
  requestId?: string(name='RequestId', example='C5CA600C-7D5A-45B5-B6DB-44FAC2C****'),
  success?: long(name='Success', example='true'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConvertPostPayOrderRequest {
  duration?: int32(name='Duration', example='1', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ConvertPostPayOrderResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  orderId?: string(name='OrderId', example='20497346575****'),
  requestId?: string(name='RequestId', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', example='true'),
}

model ConvertPostPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertPostPayOrderResponseBody(name='body'),
}

async function convertPostPayOrder(request: ConvertPostPayOrderRequest): ConvertPostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertPostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAclRequest {
  aclOperationType: string(name='AclOperationType', description='The type of operation allowed by the ACL. Valid values:

*   **Write**: data writes.
*   **Read**: data reads.
*   **Describe**: reads of transaction IDs.****
*   **IdempotentWrite**: idempotent data writes to clusters.', example='Read', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The name or ID of the resource.

*   The value can be the name of a topic, consumer group, or cluster, or the ID of a transaction.
*   You can use an asterisk (\\*) to represent the names or IDs of all relevant resources.', example='X****', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', description='The mode that is used to match resources. Valid values:

*   **LITERAL**: exact match
*   **PREFIXED**: prefix match', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The resource type. Valid values:

*   **Topic**: specifies topics.
*   **Group**: specifies consumer groups.
*   **Cluster**: specifies instances.
*   **TransactionalId**: specifies transactions.', example='Group', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The username.

You can use an asterisk (\\*) to represent all usernames.', example='test***', position='Query'),
}

model CreateAclResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='56729737-C428-4E1B-AC68-7A8C2D5****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateAclResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAclResponseBody(name='body'),
}

async function createAcl(request: CreateAclRequest): CreateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  consumerId: string(name='ConsumerId', example='test', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_post-cn-0pp1l9z8****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', example='test', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='E57A8862-DF68-4055-8E55-B80CB4****'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePostPayOrderRequest {
  deployType: int32(name='DeployType', example='5', position='Query'),
  diskSize: int32(name='DiskSize', example='500', position='Query'),
  diskType: string(name='DiskType', example='0', position='Query'),
  eipMax?: int32(name='EipMax', example='0', position='Query'),
  ioMax?: int32(name='IoMax', example='20', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', example='alikafka.hw.2xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', example='50', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-ac***********7q', position='Query'),
  specType?: string(name='SpecType', example='normal', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
  topicQuota?: int32(name='TopicQuota', example='50', position='Query'),
}

model CreatePostPayOrderResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  orderId?: string(name='OrderId', example='20497346575****'),
  requestId?: string(name='RequestId', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreatePostPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePostPayOrderResponseBody(name='body'),
}

async function createPostPayOrder(request: CreatePostPayOrderRequest): CreatePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrePayOrderRequest {
  deployType: int32(name='DeployType', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='5', position='Query'),
  diskSize: int32(name='DiskSize', description='The disk size. Unit: GB.

For more information about the valid values, see [Billing](~~84737~~).', example='500', position='Query'),
  diskType: string(name='DiskType', description='The disk type. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD', example='0', position='Query'),
  eipMax?: int32(name='EipMax', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing](~~84737~~).', example='0', position='Query'),
  ioMax?: int32(name='IoMax', description='The deployment mode of the instance. Valid values:

*   **4**: deploys the instance that allows access from the Internet and a VPC.
*   **5**: deploys the instance that allows access only from a VPC.', example='20', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The message returned.', example='alikafka.hw.2xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The Internet traffic for the instance.

*   This parameter is required if the **DeployType** parameter is set to **4**.
*   For more information about the valid values, see [Pay-as-you-go](~~72142~~).', example='50', position='Query'),
  regionId: string(name='RegionId', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

For more information, see [Billing](~~84737~~).', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   You must configure at least one of the **IoMax** and **IoMaxSpec** parameters. If both parameters are configured, the value of the **IoMaxSpec** parameter takes effect. We recommend that you configure only the **IoMaxSpec** parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='rg-ac***********7q', position='Query'),
  specType?: string(name='SpecType', description='The ID of the resource group.

If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.', example='normal', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The region ID of the instance.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

*   Valid values of N: 1 to 20.
*   This parameter is optional.
*   The tag value can be 1 to 128 characters in length. The tag value cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The tag key.

*   Valid values of N: 1 to 20.
*   If this parameter is not configured, all tag keys are matched.
*   The tag key can be up to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='50', position='Query'),
}

model CreatePrePayOrderResponseBody = {
  code?: int32(name='Code', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing](~~84737~~).', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='operation success.'),
  orderId?: string(name='OrderId', example='20497346575****'),
  requestId?: string(name='RequestId', description='Creates a subscription Message Queue for Apache Kafka instance.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreatePrePayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePrePayOrderResponseBody(name='body'),
}

/**
  * The maximum traffic for the instance. We recommend that you do not configure this parameter.
  * *   You must configure at least one of the **IoMax** and **IoMaxSpec** parameters. If both parameters are configured, the value of the **IoMaxSpec** parameter takes effect. We recommend that you configure only the **IoMaxSpec** parameter.
  * *   For more information about the valid values, see [Billing](~~84737~~).
  *
 */
async function createPrePayOrder(request: CreatePrePayOrderRequest): CreatePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateSaslUserRequest {
  instanceId: string(name='InstanceId', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  password: string(name='Password', example='12***', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='plain', position='Query'),
  username: string(name='Username', example='test***', position='Query'),
}

model CreateSaslUserResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='C5CA600C-7D5A-45B5-B6DB-44FAC2C****'),
  success?: boolean(name='Success', example='true'),
}

model CreateSaslUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSaslUserResponseBody(name='body'),
}

async function createSaslUser(request: CreateSaslUserRequest): CreateSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  compactTopic?: boolean(name='CompactTopic', description='The number of replicas for the topic.

*   This parameter is available only when the **LocalTopic** parameter is set to **true**\\<props="local_disk">, or the **edition of the instance** is **Open Source Edition (Local Disk)**.
*   Valid values: 1 to 3.

> If you set this parameter to **1**, the risk of data loss increases. Exercise caution when you configure this parameter.', example='false', position='Query'),
  config?: string(name='Config', description='The status code returned. The status code 200 indicates that the request is successful.', example='{"replications": 3}', position='Query'),
  instanceId: string(name='InstanceId', description='The region ID of the instance in which you want to create a topic.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  localTopic?: boolean(name='LocalTopic', description='Additional configurations.

*   The value of this parameter must be in JSON format.
*   The key must be **replications**. The value specifies the number of replicas for the topic. The value must be an integer that ranges from 1 to 3.
*   This parameter is available only when the **LocalTopic** parameter is set to **true**\\<props="local_disk">, or the **edition of the instance** is **Open Source Edition (Local Disk)**.

> If you configure this parameter, the **ReplicationFactor** parameter does not take effect.', example='false', position='Query'),
  minInsyncReplicas?: long(name='MinInsyncReplicas', description='The value of tag N to add to the resource.

*   Valid values of N: 1 to 20.
*   This parameter can be left empty.
*   A tag value can be 1 to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='1', minimum=1, maximum=3, position='Query'),
  partitionNum?: string(name='PartitionNum', description='The minimum number of in-sync replicas (ISRs).

*   This parameter is available only when the **LocalTopic** parameter is set to **true**\\<props="local_disk">, or the **edition of the instance** is **Open Source Edition (Local Disk)**.
*   The value of this parameter must be smaller than the value of the ReplicationFactor parameter.
*   Valid values: 1 to 3.', example='12', position='Query'),
  regionId: string(name='RegionId', description='Specifies whether the topic uses local storage. Valid values:

*   false: The topic uses cloud storage.
*   true: The topic uses local storage.', example='cn-hangzhou', position='Query'),
  remark: string(name='Remark', description='The number of partitions in the topic.

*   Valid values: 1 to 360.
*   In the Message Queue for Apache Kafka console, you can view the number of partitions that the system recommends based on the specification of the instance. We recommend that you specify the number that is recommended by the system as the value of this parameter to reduce the risk of data skew.', example='alikafka_topic_test', position='Query'),
  replicationFactor?: long(name='ReplicationFactor', description='The key of tag N to add to the resource.

*   Valid values of N: 1 to 20.
*   If this parameter is left empty, the keys of all tags are matched.
*   A tag key can be up to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='3', minimum=1, maximum=3, position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
  topic: string(name='Topic', description='The log cleanup policy that is used for the topic. This parameter is available only when the LocalTopic parameter is set to true. Valid values:

*   false: The topic uses the delete policy.
*   true: The topic uses the compact policy.', example='alikafka_topic_test', position='Query'),
}

model CreateTopicResponseBody = {
  code?: int32(name='Code', description='The message returned.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='operation success'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='9C0F207C-77A6-43E5-991C-9D98510A****'),
  success?: boolean(name='Success', description='*   Each Alibaba Cloud account can call this operation up to once per second.
*   The maximum number of topics that you can create in an instance is determined by the specification of the instance.', example='true'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicResponseBody(name='body'),
}

/**
  * The description of the topic.
  * *   The description can contain only letters, digits, hyphens (-), and underscores (\\_).
  * *   The description must be 3 to 64 characters in length.
  *
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAclRequest {
  aclOperationType: string(name='AclOperationType', description='The type of operation allowed by the ACL. Valid values:

*   **Write**
*   **Read**', example='Write', position='Query'),
  aclResourceName: string(name='AclResourceName', description='The name of the resource.

*   The value can be the name of a topic or consumer group.
*   You can use an asterisk (\\*) to indicate the names of all topics or consumer groups.', example='demo', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', description='The mode that is used to match resources. Valid values:

*   **LITERAL:** full match
*   **PREFIXED**: prefix match', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', description='The type of the resource.

*   **Topic**
*   **Group**', example='Topic', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  username: string(name='Username', description='The name of the user.', example='test12****', position='Query'),
}

model DeleteAclResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0740227-AA9A-4E14-8E9F-36ED665****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteAclResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAclResponseBody(name='body'),
}

async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='The name of the consumer group.', example='CID-test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='The region ID of the instance.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='cn-hangzhou', position='Query'),
}

model DeleteInstanceResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='operation success.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', description='Deletes a Message Queue for Apache Kafka instance.', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSaslUserRequest {
  instanceId: string(name='InstanceId', description='The name of the user.', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the instance.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='scram', position='Query'),
  username: string(name='Username', description='The SASL mechanism. Valid values:

*   **plain**: a simple mechanism that uses usernames and passwords to verify user identities. Message Queue for Apache Kafka provides an optimized PLAIN mechanism that allows you to dynamically create SASL users for an instance without the need to restart the instance.
*   **scram**: a mechanism that uses usernames and passwords to verify user identities. This mechanism provides better security protection than the PLAIN mechanism. Message Queue for Apache Kafka uses SCRAM-SHA-256.

Default value: **plain**.', example='test***', position='Query'),
}

model DeleteSaslUserResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='operation success'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='3CB89F5C-CD97-4C1D-BC7C-FEDEC2F4****'),
  success?: boolean(name='Success', description='Deletes a Simple Authentication and Security Layer (SASL) user.', example='true'),
}

model DeleteSaslUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSaslUserResponseBody(name='body'),
}

async function deleteSaslUser(request: DeleteSaslUserRequest): DeleteSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='InstanceId', description='The name of the topic.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='The region ID of the instance.', example='test', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='operation success.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Deletes a topic.', example='true'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAclsRequest {
  aclResourceName: string(name='AclResourceName', example='demo', position='Query'),
  aclResourcePatternType?: string(name='AclResourcePatternType', example='LITERAL', position='Query'),
  aclResourceType: string(name='AclResourceType', example='Topic', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_pre-cn-v0h1cng****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  username: string(name='Username', example='test12****', position='Query'),
}

model DescribeAclsResponseBody = {
  code?: int32(name='Code', example='200'),
  kafkaAclList?: {
    kafkaAclVO?: [ 
    {
      aclOperationType?: string(name='AclOperationType', example='Write'),
      aclResourceName?: string(name='AclResourceName', example='demo'),
      aclResourcePatternType?: string(name='AclResourcePatternType', example='LITERAL'),
      aclResourceType?: string(name='AclResourceType', example='Topic'),
      host?: string(name='Host', example='****'),
      username?: string(name='Username', example='test12***'),
    }
  ](name='KafkaAclVO')
  }(name='KafkaAclList'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='46496E38-881E-4719-A2F3-F3DA6AE****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAclsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAclsResponseBody(name='body'),
}

async function describeAcls(request: DescribeAclsRequest): DescribeAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAcls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSaslUsersRequest {
  instanceId: string(name='InstanceId', example='alikafka_pre-cn-v0h1cng0****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeSaslUsersResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='9E3B3592-5994-4F65-A61E-E62A77A****'),
  saslUserList?: {
    saslUserVO?: [ 
    {
      password?: string(name='Password', example='******'),
      type?: string(name='Type', example='scram'),
      username?: string(name='Username', example='test12***'),
    }
  ](name='SaslUserVO')
  }(name='SaslUserList'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSaslUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSaslUsersResponseBody(name='body'),
}

async function describeSaslUsers(request: DescribeSaslUsersRequest): DescribeSaslUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSaslUsers', 'POST', '/', 'json', false, 'json', request);
}

model GetAllInstanceIdListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetAllInstanceIdListResponseBody = {
  code?: int32(name='Code', example='200'),
  instanceIds?: map[string]any(name='InstanceIds', example='[{"cn-shenzhen": ["alikafka_post-cn-7pp2btvo****"],"us-west-1": ["alikafka_pre-cn-i7m2lxid****"],"cn-hangzhou": ["alikafka_pre-cn-i7m2hflj****","alikafka_pre-cn-zvp2hsje****","alikafka_pre-cn-zvp2kvc9****"]}]'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', example='true'),
}

model GetAllInstanceIdListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllInstanceIdListResponseBody(name='body'),
}

async function getAllInstanceIdList(request: GetAllInstanceIdListRequest): GetAllInstanceIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllInstanceIdList', 'POST', '/', 'json', false, 'json', request);
}

model GetAllowedIpListRequest {
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-mp91inkw****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetAllowedIpListResponseBody = {
  allowedList?: {
    deployType?: int32(name='DeployType', description='The deployment mode of the instance. Valid values:

*   **4**: allows access from the Internet and a virtual private cloud (VPC).
*   **5**: allows access from a VPC.

>  Only integrators need to concern themselves with the value of this parameter.', example='4'),
    internetList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup', description='The IP address whitelist group.'),
        allowedIpList?: [ string ](name='AllowedIpList'),
        portRange?: string(name='PortRange', description='The port range. Valid values:

**9093/9093**.', example='9093/9093'),
      }
    ](name='InternetList', description='The whitelist for access from the Internet.'),
    vpcList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup'),
        allowedIpList?: [ string ](name='AllowedIpList'),
        portRange?: string(name='PortRange', description='The port range. Valid values:

**9092/9092**.', example='9092/9092'),
      }
    ](name='VpcList', description='The whitelist for access from a VPC.'),
  }(name='AllowedList', description='The IP address whitelist of the instance.'),
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A421CCD7-5BC5-4B32-8DD8-64668A8FCB56'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetAllowedIpListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllowedIpListResponseBody(name='body'),
}

async function getAllowedIpList(request: GetAllowedIpListRequest): GetAllowedIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllowedIpList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerListRequest {
  consumerId?: string(name='ConsumerId', description='The ID of the instance.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='The tags of the topic.', example='alikafka_post-cn-v0h18sav****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the consumer group. If you do not configure this parameter, all consumer groups are queried.', example='cn-hangzhou', position='Query'),
}

model GetConsumerListResponseBody = {
  code?: int32(name='Code', description='The name of the consumer group.', example='200'),
  consumerList?: {
    consumerVO?: [ 
    {
      automaticallyCreatedGroup?: boolean(name='AutomaticallyCreatedGroup', description='自动创建的Group'),
      consumerId?: string(name='ConsumerId', description='The ID of the instance to which the consumer group belongs.', example='kafka-test'),
      instanceId?: string(name='InstanceId', description='The value of the tag.', example='alikafka_post-cn-v0h18sav****'),
      regionId?: string(name='RegionId', description='The description of the consumer group.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The ID of the request.', example='test'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', example='test'),
          value?: string(name='Value', example='test'),
        }
      ](name='TagVO')
      }(name='Tags', description='Queries one or more consumer groups in a specified Message Queue for Apache Kafka instance.'),
    }
  ](name='ConsumerVO')
  }(name='ConsumerList', description='The returned message.'),
  message?: string(name='Message', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='operation success.'),
  requestId?: string(name='RequestId', description='The key of the tag.', example='808F042B-CB9A-4FBC-9009-00E7DDB6****'),
  success?: boolean(name='Success', description='The information about the consumer groups.', example='true'),
}

model GetConsumerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerListResponseBody(name='body'),
}

async function getConsumerList(request: GetConsumerListRequest): GetConsumerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerProgressRequest {
  consumerId: string(name='ConsumerId', description='The region ID of the instance.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='The name of the consumer group.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='cn-hangzhou', position='Query'),
}

model GetConsumerProgressResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  consumerProgress?: {
    lastTimestamp?: long(name='LastTimestamp', description='The number of messages that were not consumed in all topics. This is also known as the number of accumulated messages in all topics.', example='1566874931671'),
    topicList?: {
      topicList?: [ 
      {
        lastTimestamp?: long(name='LastTimestamp', description='The name of the topic.', example='1566874931649'),
        offsetList?: {
          offsetList?: [ 
          {
            brokerOffset?: long(name='BrokerOffset', description='The consumer offset in the partition of the topic.', example='9'),
            consumerOffset?: long(name='ConsumerOffset', description='The time when the last consumed message in the partition was generated.', example='9'),
            lastTimestamp?: long(name='LastTimestamp', description='Queries the consumption status of a specified consumer group.', example='1566874931649'),
            partition?: int32(name='Partition', description='The latest offset in the partition of the topic.', example='0'),
          }
        ](name='OffsetList')
        }(name='OffsetList', description='The ID of the partition.'),
        topic?: string(name='Topic', description='The information about offsets in the topic.', example='kafka-test'),
        totalDiff?: long(name='TotalDiff', description='The time when the last consumed message in the topic was generated.', example='0'),
      }
    ](name='TopicList')
    }(name='TopicList', description='The number of messages that were not consumed in the topic. This is also known as the number of accumulated messages in the topic.'),
    totalDiff?: long(name='TotalDiff', description='The consumption progress of each topic to which the consumer group is subscribed.', example='0'),
  }(name='ConsumerProgress', description='The time when the last message consumed by the consumer group was generated.'),
  message?: string(name='Message', description='The ID of the request.', example='operation success.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='252820E1-A2E6-45F2-B4C9-1056B8CE****'),
  success?: boolean(name='Success', description='The consumption status of the consumer group.', example='true'),
}

model GetConsumerProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerProgressResponseBody(name='body'),
}

async function getConsumerProgress(request: GetConsumerProgressRequest): GetConsumerProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceListRequest {
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances.', example='alikafka_post-cn-mp91gnw0p***', position='Query'),
  orderId?: string(name='OrderId', description='The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.', example='6072673****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain this ID on the Resource Group page in the Resource Management console.', example='rg-ac***********7q', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that is attached to the resource.

*   If this parameter is left empty, all tag keys are matched.
*   A tag key can be up to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='test'),
      value?: string(name='Value', description='The value of the tag that is attached to the resource.

*   If the Key parameter is left empty, this parameter must be left empty. If this parameter is left empty, all tag values are matched.
*   A tag key can be up to 128 characters in length and cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model GetInstanceListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the call is successful.', example='200'),
  instanceList?: {
    instanceVO?: [ 
    {
      allConfig?: string(name='AllConfig', description='The configurations of the instance.', example='{\\"enable.vpc_sasl_ssl\\":\\"false\\",\\"kafka.log.retention.hours\\":\\"66\\",\\"enable.acl\\":\\"false\\",\\"kafka.message.max.bytes\\":\\"6291456\\"}'),
      createTime?: long(name='CreateTime', description='The time when the instance was created. Unit: milliseconds.', example='1577961819000'),
      deployType?: int32(name='DeployType', description='The type of the network in which the instance is deployed. Valid values:

*   **4**: the Internet and virtual private clouds (VPCs).
*   **5**: VPCs.', example='5'),
      diskSize?: int32(name='DiskSize', description='The size of the disk.', example='3600'),
      diskType?: int32(name='DiskType', description='The type of the disk. Unit: GB. Valid values:

*   **0**: ultra disk
*   **1**: standard SSD', example='1'),
      domainEndpoint?: string(name='DomainEndpoint', description='The default endpoint of the instance in domain name mode. The default endpoint of an instance can be in domain name mode or IP address mode.

*   Domain name mode: A default endpoint in this mode consists of a domain name of the instance and a port number. The format of a default endpoint in this mode is `{Instance domain name}:{Port number}`.
*   IP address mode: A default endpoint in this mode consists of the IP address of a broker and a port number. The format of a default endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1-vpc.alikafka.aliyuncs.com:9092,alikafka-pre-cn-zv**********-2-vpc.alikafka.aliyuncs.com:9092,alikafka-pre-cn-zv**********-3-vpc.alikafka.aliyuncs.com:9092'),
      eipMax?: int32(name='EipMax', description='The peak public traffic allowed for the instance.', example='20'),
      endPoint?: string(name='EndPoint', description='The default endpoint of the instance in IP address mode. The default endpoint of an instance can be in domain name mode or IP address mode.

*   Domain name mode: A default endpoint in this mode consists of a domain name of the instance and a port number. The format of a default endpoint in this mode is `{Instance domain name}:{Port number}`.
*   IP address mode: A default endpoint in this mode consists of the IP address of a broker and a port number. The format of a default endpoint in this mode is `{Broker IP address}:{Port number}`.', example='192.168.XX.XX:9092,192.168.XX.XX:9092,192.168.XX.XX:9092'),
      expiredTime?: long(name='ExpiredTime', description='The expiration time. Unit: milliseconds.', example='1893581018000'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-mp919o4v****'),
      ioMax?: int32(name='IoMax', description='The peak traffic allowed for the instance.', example='20'),
      ioMaxSpec?: string(name='IoMaxSpec'),
      kmsKeyId?: string(name='KmsKeyId', description='The ID of the key that is used for disk encryption in the region where the instance resides.', example='0d24xxxx-da7b-4786-b981-9a164dxxxxxx'),
      msgRetain?: int32(name='MsgRetain', description='The retention period of messages on the instance. Unit: hours.', example='72'),
      name?: string(name='Name', description='The name of the instance.', example='alikafka_post-cn-mp91gnw0****'),
      paidType?: int32(name='PaidType', description='The billing method of the instance. Valid values:

*   **0**: the subscription billing method
*   **1**: the pay-as-you-go billing method', example='1'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-ac***********7q'),
      saslDomainEndpoint?: string(name='SaslDomainEndpoint', description='The Simple Authentication and Security Layer (SASL) endpoint of the instance in domain name mode. The SASL endpoint of an instance can be in domain name mode or IP address mode.

*   Domain name mode: An SASL endpoint in this mode consists of a domain name of the instance and a port number. The format of an SASL endpoint in this mode is `{Instance domain name}:{Port number}`.
*   IP address mode: An SASL endpoint in this mode consists of the IP address of the broker and a port number. The format of an SASL endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1-vpc.alikafka.aliyuncs.com:9094,alikafka-pre-cn-zv**********-2-vpc.alikafka.aliyuncs.com:9094,alikafka-pre-cn-zv**********-3-vpc.alikafka.aliyuncs.com:9094'),
      securityGroup?: string(name='SecurityGroup', description='The security group of the instance.

*   If the instance is deployed in the Message Queue for Apache Kafka console or by calling the [StartInstance](~~157786~~) operation without configuring a security group, no value is returned for this parameter.
*   If the instance is deployed by calling the [StartInstance](~~157786~~) operation and a security group is configured, the return value is the configured security group.', example='sg-bp13wfx7kz9pkow****'),
      serviceStatus?: int32(name='ServiceStatus', description='The status of the instance. Valid values:

*   **0**: pending
*   **1**: deploying
*   **5**: running
*   **15**: expired', example='5'),
      specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)
*   **normal**: Standard Edition', example='professional'),
      sslDomainEndpoint?: string(name='SslDomainEndpoint', description='The SSL endpoint of the instance in domain name mode. The SSL endpoint of an instance can be in domain name mode or IP address mode.

*   Domain name mode: An SSL endpoint in this mode consists of a domain name of the instance and a port number. The format of an SSL endpoint in this mode is `{Instance domain name}:{Port number}`.
*   IP address mode: An SSL endpoint in this mode consists of the IP address of the broker and a port number. The format of an SSL endpoint in this mode is `{Broker IP address}:{Port number}`.', example='alikafka-pre-cn-zv**********-1.alikafka.aliyuncs.com:9093,alikafka-pre-cn-zv**********-2.alikafka.aliyuncs.com:9093,alikafka-pre-cn-zv**********-3.alikafka.aliyuncs.com:9093'),
      sslEndPoint?: string(name='SslEndPoint', description='The Secure Sockets Layer (SSL) endpoint of the instance in IP address mode. The SSL endpoint of an instance can be in domain name mode or IP address mode.

*   Domain name mode: An SSL endpoint in this mode consists of a domain name of the instance and a port number. The format of an SSL endpoint in this mode is `{Instance domain name}:{Port number}`.
*   IP address mode: An SSL endpoint in this mode consists of the IP address of the broker and a port number. The format of an SSL endpoint in this mode is `{Broker IP address}:{Port number}`.', example='192.0.XX.XX:9093,198.51.XX.XX:9093,203.0.XX.XX:9093'),
      standardZoneId?: string(name='StandardZoneId', description='The ID of the zone.', example='cn-hangzhou-k'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='test'),
          value?: string(name='Value', description='The value of the tag.', example='test'),
        }
      ](name='TagVO')
      }(name='Tags', description='The tags that are attached to the instance.'),
      topicNumLimit?: int32(name='TopicNumLimit', description='The maximum number of topics that can be created on the instance.', example='180'),
      upgradeServiceDetailInfo?: {
        current2OpenSourceVersion?: string(name='Current2OpenSourceVersion', description='The open source Apache Kafka version that corresponds to the instance.', example='2.2.0'),
      }(name='UpgradeServiceDetailInfo', description='The upgrade information about the instance.'),
      usedGroupCount?: int32(name='UsedGroupCount', description='The number of used groups.', example='10'),
      usedPartitionCount?: int32(name='UsedPartitionCount', description='The number of used partitions.', example='25'),
      usedTopicCount?: int32(name='UsedTopicCount', description='The number of used topics.', example='3'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1fvuw0ljd7vzmo3****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1ojac7bv448nifj****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='zonei'),
    }
  ](name='InstanceVO')
  }(name='InstanceList', description='The details of the instances.'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='4B6D821D-7F67-4CAA-9E13-A5A997C3****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model GetInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceListResponseBody(name='body'),
}

async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetQuotaTipRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_pre-cn-i7m2wpm5****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
}

model GetQuotaTipResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The additional message. This message is typically used to describe API call failures for troubleshooting.', example='operation success.'),
  quotaData?: {
    groupLeft?: int32(name='GroupLeft', description='The number of available groups.', example='50'),
    groupUsed?: int32(name='GroupUsed', description='The number of used groups.', example='50'),
    isPartitionBuy?: int32(name='IsPartitionBuy', description='The method that you use to purchase partitions. Valid values:

*   0: indicates that the instance is purchased based on topics.
*   1: indicates that the instance is purchased based on partitions.', example='1'),
    partitionLeft?: int32(name='PartitionLeft', description='The number of available partitions.', example='1050'),
    partitionNumOfBuy?: int32(name='PartitionNumOfBuy', description='The number of purchased partitions.', example='100'),
    partitionQuota?: int32(name='PartitionQuota', description='The quota of partitions.', example='1100'),
    partitionUsed?: int32(name='PartitionUsed', description='The number of used partitions.', example='50'),
    topicLeft?: int32(name='TopicLeft', description='The number of available topics.', example='20'),
    topicNumOfBuy?: int32(name='TopicNumOfBuy', description='The number of purchased topics.', example='50'),
    topicQuota?: int32(name='TopicQuota', description='The quota of topics.', example='50'),
    topicUsed?: int32(name='TopicUsed', description='The number of used topics.', example='30'),
  }(name='QuotaData', description='The quota.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0178A3A7-E87B-5E50-A16F-3E62F534****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='True'),
}

model GetQuotaTipResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaTipResponseBody(name='body'),
}

async function getQuotaTip(request: GetQuotaTipRequest): GetQuotaTipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuotaTip', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicListRequest {
  currentPage?: string(name='CurrentPage', description='The name of the topic that you want to query.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The region ID of the instance whose topics you want to query.', example='alikafka_pre-cn-0pp1954n****', position='Query'),
  pageSize?: string(name='PageSize', description='The number of the returned page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou', position='Query'),
  topic?: string(name='Topic', description='Indicates whether the call was successful.', example='topic_name', position='Query'),
}

model GetTopicListResponseBody = {
  code?: int32(name='Code', description='The number of topics.', example='200'),
  currentPage?: int32(name='CurrentPage', description='The HTTP status code returned. The HTTP status code 200 indicates that the call is successful.', example='1'),
  message?: string(name='Message', description='The information about the topic.', example='operation success.'),
  pageSize?: int32(name='PageSize', description='The status of the topic. Valid values:

**0:** indicates that the topic is running.

If the topic is deleted, this parameter is not returned.', example='10'),
  requestId?: string(name='RequestId', description='The message returned.', example='C0D3DC5B-5C37-47AD-9F22-1F559880****'),
  success?: boolean(name='Success', description='The number of entries returned on each page.', example='true'),
  topicList?: {
    topicVO?: [ 
    {
      autoCreate?: boolean(name='AutoCreate', example='false'),
      compactTopic?: boolean(name='CompactTopic', description='The region ID of the instance whose topics were queried.', example='false'),
      createTime?: long(name='CreateTime', description='Running', example='1576563109000'),
      instanceId?: string(name='InstanceId', description='The tags.', example='alikafka_pre-cn-0pp1954n****'),
      localTopic?: boolean(name='LocalTopic', description='The key of the tag.', example='false'),
      partitionNum?: int32(name='PartitionNum', description='The name of the topic. Valid values:

*   The name contains only letters, digits, hyphens (-), and underscores (\\_).
*   The name is 3 to 64 characters in length. If the name that you specified contains more than 64 characters, the returned name is automatically truncated.', example='6'),
      regionId?: string(name='RegionId', description='The value of the tag.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The status of the topic. Valid values:

**Running**

If the topic is deleted, this parameter is not returned.', example='test'),
      status?: int32(name='Status', description='The timestamp that indicates when the topic was created. Unit: milliseconds.', example='0'),
      statusName?: string(name='StatusName', description='The ID of the instance', example='The storage type used by the topic. Valid values:

*   false: The topic uses cloud storage.
*   true: The topic uses local storage.'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key', example='Test'),
          value?: string(name='Value', example='Test'),
        }
      ](name='TagVO')
      }(name='Tags', description='Indicates whether the topic was automatically created.'),
      topic?: string(name='Topic', description='The log cleanup policy that is used for the topic. This parameter is returned when the **LocalTopic** parameter is set to **true**. Valid values:

*   false: The topic uses the delete policy.
*   true: The topic uses the compact policy.', example='topic_name'),
    }
  ](name='TopicVO')
  }(name='TopicList', description='The description. Valid values:

*   The description contains only letters, digits, hyphens (-), and underscores (\\_).
*   The description is 3 to 64 characters in length.'),
  total?: int32(name='Total', description='The number of partitions in the topic.', example='1'),
}

model GetTopicListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicListResponseBody(name='body'),
}

async function getTopicList(request: GetTopicListRequest): GetTopicListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicList', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicStatusRequest {
  instanceId: string(name='InstanceId', example='alikafka_pre-cn-v0h15tjm****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', example='normal_topic_9d034262835916103455551be06cc****', position='Query'),
}

model GetTopicStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='E475C7E2-8C35-46EF-BE7D-5D2A9F5D****'),
  success?: boolean(name='Success', example='true'),
  topicStatus?: {
    lastTimeStamp?: long(name='LastTimeStamp', example='1566470063575'),
    offsetTable?: {
      offsetTable?: [ 
      {
        lastUpdateTimestamp?: long(name='LastUpdateTimestamp', example='1566470063547'),
        maxOffset?: long(name='MaxOffset', example='76'),
        minOffset?: long(name='MinOffset', example='0'),
        partition?: int32(name='Partition', example='0'),
        topic?: string(name='Topic', example='testkafka'),
      }
    ](name='OffsetTable')
    }(name='OffsetTable'),
    totalCount?: long(name='TotalCount', example='423'),
  }(name='TopicStatus'),
}

model GetTopicStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicStatusResponseBody(name='body'),
}

async function getTopicStatus(request: GetTopicStatusRequest): GetTopicStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494A****'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='alikafka_post-cn-v0h1fgs2****'),
      resourceType?: string(name='ResourceType', example='instance'),
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNameRequest {
  instanceId: string(name='InstanceId', description='The region ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  instanceName: string(name='InstanceName', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='dev-test', position='Query'),
  regionId: string(name='RegionId', description='The name of the instance. Valid values:

*   The name can contain only letters, digits, hyphens (-), and underscores (\\_).
*   The name must be 3 to 64 characters in length. If the name that you specify contains more than 64 characters, the system automatically truncates the name to 64 characters.', example='cn-hangzhou', position='Query'),
}

model ModifyInstanceNameResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='operation success.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='06084011-E093-46F3-A51F-4B19A8AD****'),
  success?: boolean(name='Success', description='Changes the name of a Message Queue for Apache Kafka instance.', example='true'),
}

model ModifyInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNameResponseBody(name='body'),
}

async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPartitionNumRequest {
  addPartitionNum: int32(name='AddPartitionNum', example='6', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_post-cn-0pp1l9z****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', example='TopicPartitionNum', position='Query'),
}

model ModifyPartitionNumResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='B7A39AE5-0B36-4442-A304-E088526****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPartitionNumResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPartitionNumResponseBody(name='body'),
}

async function modifyPartitionNum(request: ModifyPartitionNumRequest): ModifyPartitionNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPartitionNum', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTopicRemarkRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-0pp1l9z****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The description of the topic.', example='testremark', position='Query'),
  topic: string(name='Topic', description='The name of the topic.', example='alikafka_post-cn-0pp1l9z8****', position='Query'),
}

model ModifyTopicRemarkResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DB6F1BEA-903B-4FD8-8809-46E7E9CE***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyTopicRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTopicRemarkResponseBody(name='body'),
}

async function modifyTopicRemark(request: ModifyTopicRemarkRequest): ModifyTopicRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTopicRemark', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  forceDeleteInstance?: boolean(name='ForceDeleteInstance', description='The returned message.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='Specifies whether to immediately release the physical resources of the instance. Valid values:

*   **true**: The physical resources of the instance are immediately released.
*   **false**: The physical resources of the instance are retained for a period of time before they are released.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='cn-hangzhou', position='Query'),
}

model ReleaseInstanceResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='Indicates whether the request is successful.', example='operation success.'),
  requestId?: string(name='RequestId', description='You cannot call this operation to release a subscription Message Queue for Apache Kafka instance.', example='ABA4A7FD-E10F-45C7-9774-A5236015A***'),
  success?: boolean(name='Success', description='Releases a pay-as-you-go Message Queue for Apache Kafka instance.', example='true'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

/**
  * The region ID of the instance.
  *
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  config?: string(name='Config', example='{"kafka.log.retention.hours":"33"}', position='Query'),
  deployModule?: string(name='DeployModule', example='vpc', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  isEipInner?: boolean(name='IsEipInner', example='false', position='Query'),
  isForceSelectedZones?: boolean(name='IsForceSelectedZones', example='false', position='Query'),
  isSetUserAndPassword?: boolean(name='IsSetUserAndPassword', example='false', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', example='0d24xxxx-da7b-4786-b981-9a164dxxxxxx', position='Query'),
  name?: string(name='Name', example='newInstanceName', position='Query'),
  notifier?: string(name='Notifier', position='Query'),
  password?: string(name='Password', example='password', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityGroup?: string(name='SecurityGroup', example='sg-bp13wfx7kz9pko****', position='Query'),
  selectedZones?: string(name='SelectedZones', example='[[\\"zonel\\"],[\\"zonek\\"]]', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='0.10.2', position='Query'),
  userPhoneNum?: string(name='UserPhoneNum', example='1581234****', position='Query'),
  username?: string(name='Username', example='username', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp1j3sg5979fstnpl****', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1r4eg3yrxmygv****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-k', position='Query'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', example='true'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the request.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The type of the resources to which you want to attach tags. Valid values:

*   **INSTANCE**
*   **TOPIC**
*   **CONSUMERGROUP**

>  The value of this parameter is not case-sensitive.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='The ID of the resource to which you want to attach tags. Take note of the following rules when you specify a resource ID:

*   The resource ID of an instance is the value of the instanceId parameter.
*   The resource ID of a topic is the value of the Kafka_alikafka_instanceId_topic parameter.
*   The resource ID of a group is the value of the Kafka_alikafka_instanceId_consumerGroup parameter.

For example, the resources to which you want to attach tags include the alikafka_post-cn-v0h1fgs2xxxx instance, the test-topic topic, and the test-consumer-group group. In this case, their resource IDs are alikafka_post-cn-v0h1fgs2xxxx, Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-topic, and Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-consumer-group.', example='instance', position='Query'),
  tag: [ 
    {
      key: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The key of the tag that is attached to the resource.

*   If you want to configure this parameter, specify at least one tag key and at most 20 tag keys.
*   This parameter is required.
*   The tag key can be up to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://或者https://。)', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='*   If you want to configure this parameter, specify at least one tag key and at most 20 tag keys.
*   If this parameter is not configured and the All parameter is set to true, all tag keys are matched.
*   The tag key can be up to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://或者https://。)', example='false', position='Query'),
  regionId: string(name='RegionId', description='The IDs of the resources from which you want to detach tags.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of the request.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  resourceType: string(name='ResourceType', description='Take note of the following rules when you specify a resource ID:

*   The resource ID of an instance is the value of the instanceId parameter.
*   The resource ID of a topic is the value of the Kafka_instanceId_topic parameter.
*   The resource ID of a group is the value of the Kafka_instanceId_consumerGroup parameter.

For example, the resources from which you want to detach tags include the alikafka_post-cn-v0h1fgs2xxxx instance, the test-topic topic, and the test-consumer-group consumer group. In this case, their resource IDs are alikafka_post-cn-v0h1fgs2xxxx, Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-topic, and Kafka_alikafka_post-cn-v0h1fgs2xxxx_test-consumer-group.', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='Detaches tags from a specified resource.', example='FinanceDept', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAllowedIpRequest {
  allowedListIp: string(name='AllowedListIp', example='0.0.0.0/0', position='Query'),
  allowedListType: string(name='AllowedListType', example='vpc', position='Query'),
  description?: string(name='Description', example='tf-testAccEcsImageConfigBasic3549descriptionChange', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_pre-cn-0pp1cng20***', position='Query'),
  portRange: string(name='PortRange', example='9092/9092', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  updateType: string(name='UpdateType', example='add', position='Query'),
}

model UpdateAllowedIpResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='17D425C2-4EA3-4AB8-928D-E10511ECF***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAllowedIpResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAllowedIpResponseBody(name='body'),
}

async function updateAllowedIp(request: UpdateAllowedIpRequest): UpdateAllowedIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAllowedIp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConsumerOffsetRequest {
  consumerId: string(name='ConsumerId', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', example='alikafka_post-cn-mp91inkw****', position='Query'),
  offsets?: [ 
    {
      offset?: long(name='Offset', example='1'),
      partition?: int32(name='Partition', example='0'),
    }
  ](name='Offsets', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resetType?: string(name='ResetType', example='timestamp', position='Query'),
  time: string(name='Time', example='-1', position='Query'),
  topic: string(name='Topic', example='topic_name', position='Query'),
}

model UpdateConsumerOffsetResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='56729737-C428-4E1B-AC68-7A8C2D5****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConsumerOffsetResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConsumerOffsetResponseBody(name='body'),
}

async function updateConsumerOffset(request: UpdateConsumerOffsetRequest): UpdateConsumerOffsetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConsumerOffset', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceConfigRequest {
  config: string(name='Config', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='{"kafka.log.retention.hours":"33"}', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the request.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The message returned.', example='cn-hangzhou', position='Query'),
}

model UpdateInstanceConfigResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request is successful.', example='200'),
  message?: string(name='Message', description='## **Permissions**

If a RAM user wants to call the **UpdateInstanceConfig** operation, the RAM user must be granted the required permissions. For more information about how to grant permissions, see [RAM policies](~~185815~~).

|API|Action|Resource|
|---|---|---|
|UpdateInstanceConfig|alikafka: UpdateInstance|acs:alikafka:*:*:{instanceId}|', example='operation success.'),
  requestId?: string(name='RequestId', description='### Config parameters

|Parameter|Type|Valid values|Default value|Description|
|---|---|---|---|---|
|enable.vpc\\_sasl\\_ssl|Boolean|true/false|false|Specifies whether to enable virtual private cloud (VPC) transmission encryption. If VPC transmission encryption is enabled, you must also enable the access control list (ACL) feature.|
|enable.acl|Boolean|true/false|false|Specifies whether to enable the ACL feature.|
|kafka.log.retention.hours|Integer|24~480|72|The retention period of messages. Unit: hours.|
|kafka.message.max.bytes|Integer|1048576~10485760|1048576|The maximum size of a message. Unit: bytes.|', example='4B6D821D-7F67-4CAA-9E13-A5A997C35***'),
  success?: boolean(name='Success', description='Modifies the configuration of a Message Queue for Apache Kafka instance.', example='true'),
}

model UpdateInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceConfigResponseBody(name='body'),
}

/**
  * The region ID of the instance.
  *
 */
async function updateInstanceConfig(request: UpdateInstanceConfigRequest): UpdateInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceVersionRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='alikafka_post-cn-v0h1fgs2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  targetVersion: string(name='TargetVersion', description='The major version to be upgraded to. Valid values:

*   **0.10.2**
*   **2.2.0**

If you set this parameter to the current major version, the system upgrades the instance to the latest minor version.', example='0.10.2', position='Query'),
}

model UpgradeInstanceVersionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradeInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceVersionResponseBody(name='body'),
}

/**
  * ## **Permissions**
  * A RAM user must be granted the required permissions before the RAM user call the **UpgradeInstanceVersion** operation. For information about how to grant permissions, see [RAM policies](~~185815~~).
  * |API|Action|Resource|
  * |---|---|---|
  * |UpgradeInstanceVersion|UpdateInstance|acs:alikafka:*:*:{instanceId}|
  * ## **QPS limits**
  * You can send a maximum of two queries per second (QPS).
  *
 */
async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePostPayOrderRequest {
  diskSize: int32(name='DiskSize', description='The disk size. Unit: GB.

*   The disk size that you specify must be greater than or equal to the current disk size of the instance.
*   For more information about the valid values, see [Billing](~~84737~~).', example='500', position='Query'),
  eipMax?: int32(name='EipMax', description='The Internet traffic for the instance.

*   The Internet traffic volume that you specify must be greater than or equal to the current Internet traffic volume of the instance.
*   For more information about the valid values, see [Billing](~~84737~~).
> - If the **EipModel** parameter is set to **true**, set the **EipMax** parameter to a value that is greater than 0.
> - If the **EipModel** parameter is set to **false**, set the **EipMax** parameter to **0**.', example='0', position='Query'),
  eipModel?: boolean(name='EipModel', description='Specifies whether to enable Internet access for the instance. Valid values:

*   true: enables Internet access.
*   false: disables Internet access.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  ioMax?: int32(name='IoMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   The maximum traffic that you specify must be greater than or equal to the current maximum traffic of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you specify only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='60', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The traffic specification of the instance. We recommend that you configure this parameter.

*   The traffic specification that you specify must be greater than or equal to the current traffic specification of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you specify only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing](~~84737~~).', example='alikafka.hw.6xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing](~~84737~~).', example='80', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  specType?: string(name='SpecType', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

You cannot downgrade an instance from the Professional Edition to the Standard Edition. For more information about these instance editions, see [Billing](~~84737~~).', example='professional', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing](~~84737~~).', example='80', position='Query'),
}

model UpgradePostPayOrderResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA4A7FD-E10F-45C7-9774-A5236015A***'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradePostPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradePostPayOrderResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing method and pricing of pay-as-you-go Message Queue for Apache Kafka instances. For more information, see [Billing](~~84737~~).
  *
 */
async function upgradePostPayOrder(request: UpgradePostPayOrderRequest): UpgradePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePrePayOrderRequest {
  diskSize: int32(name='DiskSize', description='The number of topics. We recommend that you do not configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   The default value of the TopicQuota parameter varies based on the value of the IoMaxSpec parameter. If the number of topics that you consume exceeds the default value, you are charged additional fees.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='900', position='Query'),
  eipMax?: int32(name='EipMax', description='The maximum traffic for the instance. We recommend that you do not configure this parameter.

*   The maximum traffic volume that you specify must be greater than or equal to the current maximum traffic volume of the instance.
*   You must configure at least one of the IoMax and IoMaxSpec parameters. If you configure both parameters, the value of the IoMaxSpec parameter takes effect. We recommend that you configure only the IoMaxSpec parameter.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='3', position='Query'),
  eipModel?: boolean(name='EipModel', description='The ID of the instance.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The region ID of the instance.', example='alikafka_post-cn-mp919o4v****', position='Query'),
  ioMax?: int32(name='IoMax', description='The edition of the instance. Valid values:

*   **normal**: Standard Edition (High Write)
*   **professional**: Professional Edition (High Write)
*   **professionalForHighRead**: Professional Edition (High Read)

You cannot downgrade an instance from the Professional Edition to the Standard Edition. For more information about these instance editions, see [Billing overview](~~84737~~).', example='40', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', description='The ID of the request.', example='alikafka.hw.2xlarge', position='Query'),
  partitionNum?: int32(name='PartitionNum', description='The number of partitions. We recommend that you configure this parameter.

*   You must specify at least one of the PartitionNum and TopicQuota parameters. We recommend that you configure only the PartitionNum parameter.
*   If you specify both parameters, the topic-based sales model is used to check whether the PartitionNum value and the TopicQuota value are the same. If they are not the same, a failure response is returned. If they are the same, the order is placed based on the PartitionNum value.
*   For more information about the valid values, see [Billing overview](~~84737~~).', example='50', position='Query'),
  regionId: string(name='RegionId', description='The HTTP status code returned. The HTTP status code 200 indicates that the request is successful.', example='cn-hangzhou', position='Query'),
  specType?: string(name='SpecType', description='The error message returned.', example='professional', position='Query'),
  topicQuota?: int32(name='TopicQuota', description='The Internet traffic for the instance.

*   The Internet traffic volume that you specify must be greater than or equal to the current Internet traffic volume of the instance.
*   For more information about the valid values, see [Billing overview](~~84737~~).

> 

*   If the **EipModel** parameter is set to **true**, set the **EipMax** parameter to a value that is greater than 0.

*   If the **EipModel** parameter is set to **false**, set the **EipMax** parameter to **0**.', example='50', position='Query'),
}

model UpgradePrePayOrderResponseBody = {
  code?: int32(name='Code', description='Upgrades a Message Queue for Apache Kafka instance that uses the subscription billing method.', example='200'),
  message?: string(name='Message', description='261860', example='operation success.'),
  requestId?: string(name='RequestId', example='ABA4A7FD-E10F-45C7-9774-A5236015***'),
  success?: boolean(name='Success', example='true'),
}

model UpgradePrePayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradePrePayOrderResponseBody(name='body'),
}

/**
  * The size of the disk.
  * *   The disk size that you specify must be greater than or equal to the current disk size of the instance.
  * *   For more information about the valid values, see [Billing overview](~~84737~~).
  *
 */
async function upgradePrePayOrder(request: UpgradePrePayOrderRequest): UpgradePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

