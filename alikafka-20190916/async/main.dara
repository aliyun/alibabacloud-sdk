/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alikafka';
  @version = '2019-09-16';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'alikafka.aliyuncs.com',
    ap-southeast-2 = 'alikafka.aliyuncs.com',
    cn-beijing-finance-1 = 'alikafka.aliyuncs.com',
    cn-beijing-finance-pop = 'alikafka.aliyuncs.com',
    cn-beijing-gov-1 = 'alikafka.aliyuncs.com',
    cn-beijing-nu16-b01 = 'alikafka.aliyuncs.com',
    cn-edge-1 = 'alikafka.aliyuncs.com',
    cn-fujian = 'alikafka.aliyuncs.com',
    cn-haidian-cm12-c01 = 'alikafka.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'alikafka.aliyuncs.com',
    cn-hangzhou-test-306 = 'alikafka.aliyuncs.com',
    cn-hongkong-finance-pop = 'alikafka.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'alikafka.aliyuncs.com',
    cn-qingdao-nebula = 'alikafka.aliyuncs.com',
    cn-shanghai-et15-b01 = 'alikafka.aliyuncs.com',
    cn-shanghai-et2-b01 = 'alikafka.aliyuncs.com',
    cn-shanghai-inner = 'alikafka.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'alikafka.aliyuncs.com',
    cn-shenzhen-inner = 'alikafka.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'alikafka.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'alikafka.aliyuncs.com',
    cn-wuhan = 'alikafka.aliyuncs.com',
    cn-wulanchabu = 'alikafka.aliyuncs.com',
    cn-yushanfang = 'alikafka.aliyuncs.com',
    cn-zhangbei = 'alikafka.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'alikafka.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'alikafka.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'alikafka.aliyuncs.com',
    eu-west-1-oxs = 'alikafka.aliyuncs.com',
    me-east-1 = 'alikafka.aliyuncs.com',
    rus-west-1-pop = 'alikafka.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  requestId?: string(name='RequestId'),
  success?: long(name='Success'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConvertPostPayOrderRequest {
  duration?: int32(name='Duration', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ConvertPostPayOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConvertPostPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertPostPayOrderResponseBody(name='body'),
}

async function convertPostPayOrder(request: ConvertPostPayOrderRequest): ConvertPostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertPostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateAclRequest {
  aclOperationType: string(name='AclOperationType', position='Query'),
  aclResourceName: string(name='AclResourceName', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', position='Query'),
  aclResourceType: string(name='AclResourceType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  username: string(name='Username', position='Query'),
}

model CreateAclResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAclResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAclResponseBody(name='body'),
}

async function createAcl(request: CreateAclRequest): CreateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  consumerId: string(name='ConsumerId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  remark?: string(name='Remark', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreatePostPayOrderRequest {
  deployType: int32(name='DeployType', position='Query'),
  diskSize: int32(name='DiskSize', position='Query'),
  diskType: string(name='DiskType', position='Query'),
  eipMax?: int32(name='EipMax', position='Query'),
  ioMax?: int32(name='IoMax', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', position='Query'),
  partitionNum?: int32(name='PartitionNum', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  specType?: string(name='SpecType', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  topicQuota?: int32(name='TopicQuota', position='Query'),
}

model CreatePostPayOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatePostPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePostPayOrderResponseBody(name='body'),
}

async function createPostPayOrder(request: CreatePostPayOrderRequest): CreatePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrePayOrderRequest {
  deployType: int32(name='DeployType', position='Query'),
  diskSize: int32(name='DiskSize', position='Query'),
  diskType: string(name='DiskType', position='Query'),
  eipMax?: int32(name='EipMax', position='Query'),
  ioMax?: int32(name='IoMax', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', position='Query'),
  partitionNum?: int32(name='PartitionNum', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  specType?: string(name='SpecType', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  topicQuota?: int32(name='TopicQuota', position='Query'),
}

model CreatePrePayOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatePrePayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePrePayOrderResponseBody(name='body'),
}

async function createPrePayOrder(request: CreatePrePayOrderRequest): CreatePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateSaslUserRequest {
  instanceId: string(name='InstanceId', position='Query'),
  password: string(name='Password', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  type?: string(name='Type', position='Query'),
  username: string(name='Username', position='Query'),
}

model CreateSaslUserResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSaslUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSaslUserResponseBody(name='body'),
}

async function createSaslUser(request: CreateSaslUserRequest): CreateSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  compactTopic?: boolean(name='CompactTopic', position='Query'),
  config?: map[string]any(name='Config', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  localTopic?: boolean(name='LocalTopic', position='Query'),
  minInsyncReplicas?: long(name='MinInsyncReplicas', minimum=1, maximum=3, position='Query'),
  partitionNum?: string(name='PartitionNum', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  remark: string(name='Remark', position='Query'),
  replicationFactor?: long(name='ReplicationFactor', minimum=1, maximum=3, position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model CreateTopicResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAclRequest {
  aclOperationType: string(name='AclOperationType', position='Query'),
  aclResourceName: string(name='AclResourceName', position='Query'),
  aclResourcePatternType: string(name='AclResourcePatternType', position='Query'),
  aclResourceType: string(name='AclResourceType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  username: string(name='Username', position='Query'),
}

model DeleteAclResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAclResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAclResponseBody(name='body'),
}

async function deleteAcl(request: DeleteAclRequest): DeleteAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  consumerId: string(name='ConsumerId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteInstanceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSaslUserRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  type?: string(name='Type', position='Query'),
  username: string(name='Username', position='Query'),
}

model DeleteSaslUserResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSaslUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSaslUserResponseBody(name='body'),
}

async function deleteSaslUser(request: DeleteSaslUserRequest): DeleteSaslUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSaslUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAclsRequest {
  aclResourceName: string(name='AclResourceName', position='Query'),
  aclResourcePatternType?: string(name='AclResourcePatternType', position='Query'),
  aclResourceType: string(name='AclResourceType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  username: string(name='Username', position='Query'),
}

model DescribeAclsResponseBody = {
  code?: int32(name='Code'),
  kafkaAclList?: {
    kafkaAclVO?: [ 
    {
      aclOperationType?: string(name='AclOperationType'),
      aclResourceName?: string(name='AclResourceName'),
      aclResourcePatternType?: string(name='AclResourcePatternType'),
      aclResourceType?: string(name='AclResourceType'),
      host?: string(name='Host'),
      username?: string(name='Username'),
    }
  ](name='KafkaAclVO')
  }(name='KafkaAclList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAclsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAclsResponseBody(name='body'),
}

async function describeAcls(request: DescribeAclsRequest): DescribeAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAcls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSaslUsersRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeSaslUsersResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  saslUserList?: {
    saslUserVO?: [ 
    {
      password?: string(name='Password'),
      type?: string(name='Type'),
      username?: string(name='Username'),
    }
  ](name='SaslUserVO')
  }(name='SaslUserList'),
  success?: boolean(name='Success'),
}

model DescribeSaslUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSaslUsersResponseBody(name='body'),
}

async function describeSaslUsers(request: DescribeSaslUsersRequest): DescribeSaslUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSaslUsers', 'POST', '/', 'json', false, 'json', request);
}

model GetAllInstanceIdListRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model GetAllInstanceIdListResponseBody = {
  code?: int32(name='Code'),
  instanceIds?: map[string]any(name='InstanceIds'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAllInstanceIdListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllInstanceIdListResponseBody(name='body'),
}

async function getAllInstanceIdList(request: GetAllInstanceIdListRequest): GetAllInstanceIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllInstanceIdList', 'POST', '/', 'json', false, 'json', request);
}

model GetAllowedIpListRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetAllowedIpListResponseBody = {
  allowedList?: {
    deployType?: int32(name='DeployType'),
    internetList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup'),
        allowedIpList?: [ string ](name='AllowedIpList'),
        portRange?: string(name='PortRange'),
      }
    ](name='InternetList'),
    vpcList?: [ 
      {
        allowedIpGroup?: map[string]string(name='AllowedIpGroup'),
        allowedIpList?: [ string ](name='AllowedIpList'),
        portRange?: string(name='PortRange'),
      }
    ](name='VpcList'),
  }(name='AllowedList'),
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAllowedIpListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllowedIpListResponseBody(name='body'),
}

async function getAllowedIpList(request: GetAllowedIpListRequest): GetAllowedIpListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllowedIpList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerListRequest {
  consumerId?: string(name='ConsumerId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetConsumerListResponseBody = {
  code?: int32(name='Code'),
  consumerList?: {
    consumerVO?: [ 
    {
      consumerId?: string(name='ConsumerId'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
      remark?: string(name='Remark'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagVO')
      }(name='Tags'),
    }
  ](name='ConsumerVO')
  }(name='ConsumerList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConsumerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerListResponseBody(name='body'),
}

async function getConsumerList(request: GetConsumerListRequest): GetConsumerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerProgressRequest {
  consumerId: string(name='ConsumerId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetConsumerProgressResponseBody = {
  code?: int32(name='Code'),
  consumerProgress?: {
    lastTimestamp?: long(name='LastTimestamp'),
    topicList?: {
      topicList?: [ 
      {
        lastTimestamp?: long(name='LastTimestamp'),
        offsetList?: {
          offsetList?: [ 
          {
            brokerOffset?: long(name='BrokerOffset'),
            consumerOffset?: long(name='ConsumerOffset'),
            lastTimestamp?: long(name='LastTimestamp'),
            partition?: int32(name='Partition'),
          }
        ](name='OffsetList')
        }(name='OffsetList'),
        topic?: string(name='Topic'),
        totalDiff?: long(name='TotalDiff'),
      }
    ](name='TopicList')
    }(name='TopicList'),
    totalDiff?: long(name='TotalDiff'),
  }(name='ConsumerProgress'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConsumerProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetConsumerProgressResponseBody(name='body'),
}

async function getConsumerProgress(request: GetConsumerProgressRequest): GetConsumerProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceListRequest {
  instanceId?: [ string ](name='InstanceId', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model GetInstanceListResponseBody = {
  code?: int32(name='Code'),
  instanceList?: {
    instanceVO?: [ 
    {
      allConfig?: string(name='AllConfig'),
      createTime?: long(name='CreateTime'),
      deployType?: int32(name='DeployType'),
      diskSize?: int32(name='DiskSize'),
      diskType?: int32(name='DiskType'),
      domainEndpoint?: string(name='DomainEndpoint'),
      eipMax?: int32(name='EipMax'),
      endPoint?: string(name='EndPoint'),
      expiredTime?: long(name='ExpiredTime'),
      instanceId?: string(name='InstanceId'),
      ioMax?: int32(name='IoMax'),
      kmsKeyId?: string(name='KmsKeyId'),
      msgRetain?: int32(name='MsgRetain'),
      name?: string(name='Name'),
      paidType?: int32(name='PaidType'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      saslDomainEndpoint?: string(name='SaslDomainEndpoint'),
      securityGroup?: string(name='SecurityGroup'),
      serviceStatus?: int32(name='ServiceStatus'),
      specType?: string(name='SpecType'),
      sslDomainEndpoint?: string(name='SslDomainEndpoint'),
      sslEndPoint?: string(name='SslEndPoint'),
      standardZoneId?: string(name='StandardZoneId'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagVO')
      }(name='Tags'),
      topicNumLimit?: int32(name='TopicNumLimit'),
      upgradeServiceDetailInfo?: {
        current2OpenSourceVersion?: string(name='Current2OpenSourceVersion'),
      }(name='UpgradeServiceDetailInfo'),
      usedGroupCount?: int32(name='UsedGroupCount'),
      usedPartitionCount?: int32(name='UsedPartitionCount'),
      usedTopicCount?: int32(name='UsedTopicCount'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='InstanceVO')
  }(name='InstanceList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceListResponseBody(name='body'),
}

async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetQuotaTipRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetQuotaTipResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  quotaData?: {
    groupLeft?: int32(name='GroupLeft'),
    groupUsed?: int32(name='GroupUsed'),
    isPartitionBuy?: int32(name='IsPartitionBuy'),
    partitionLeft?: int32(name='PartitionLeft'),
    partitionNumOfBuy?: int32(name='PartitionNumOfBuy'),
    partitionQuata?: int32(name='PartitionQuata'),
    partitionUsed?: int32(name='PartitionUsed'),
    topicLeft?: int32(name='TopicLeft'),
    topicNumOfBuy?: int32(name='TopicNumOfBuy'),
    topicQuota?: int32(name='TopicQuota'),
    topicUsed?: int32(name='TopicUsed'),
  }(name='QuotaData'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQuotaTipResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaTipResponseBody(name='body'),
}

async function getQuotaTip(request: GetQuotaTipRequest): GetQuotaTipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuotaTip', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicListRequest {
  currentPage?: string(name='CurrentPage', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  topic?: string(name='Topic', position='Query'),
}

model GetTopicListResponseBody = {
  code?: int32(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topicList?: {
    topicVO?: [ 
    {
      compactTopic?: boolean(name='CompactTopic'),
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      localTopic?: boolean(name='LocalTopic'),
      partitionNum?: int32(name='PartitionNum'),
      regionId?: string(name='RegionId'),
      remark?: string(name='Remark'),
      status?: int32(name='Status'),
      statusName?: string(name='StatusName'),
      tags?: {
        tagVO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='TagVO')
      }(name='Tags'),
      topic?: string(name='Topic'),
    }
  ](name='TopicVO')
  }(name='TopicList'),
  total?: int32(name='Total'),
}

model GetTopicListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicListResponseBody(name='body'),
}

async function getTopicList(request: GetTopicListRequest): GetTopicListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicList', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model GetTopicStatusResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topicStatus?: {
    lastTimeStamp?: long(name='LastTimeStamp'),
    offsetTable?: {
      offsetTable?: [ 
      {
        lastUpdateTimestamp?: long(name='LastUpdateTimestamp'),
        maxOffset?: long(name='MaxOffset'),
        minOffset?: long(name='MinOffset'),
        partition?: int32(name='Partition'),
        topic?: string(name='Topic'),
      }
    ](name='OffsetTable')
    }(name='OffsetTable'),
    totalCount?: long(name='TotalCount'),
  }(name='TopicStatus'),
}

model GetTopicStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopicStatusResponseBody(name='body'),
}

async function getTopicStatus(request: GetTopicStatusRequest): GetTopicStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNameRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instanceName: string(name='InstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyInstanceNameResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNameResponseBody(name='body'),
}

async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPartitionNumRequest {
  addPartitionNum: int32(name='AddPartitionNum', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model ModifyPartitionNumResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPartitionNumResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPartitionNumResponseBody(name='body'),
}

async function modifyPartitionNum(request: ModifyPartitionNumRequest): ModifyPartitionNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPartitionNum', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTopicRemarkRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  remark?: string(name='Remark', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model ModifyTopicRemarkResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyTopicRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTopicRemarkResponseBody(name='body'),
}

async function modifyTopicRemark(request: ModifyTopicRemarkRequest): ModifyTopicRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTopicRemark', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  forceDeleteInstance?: boolean(name='ForceDeleteInstance', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ReleaseInstanceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  config?: string(name='Config', position='Query'),
  deployModule?: string(name='DeployModule', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  isEipInner?: boolean(name='IsEipInner', position='Query'),
  isForceSelectedZones?: boolean(name='IsForceSelectedZones', position='Query'),
  isSetUserAndPassword?: boolean(name='IsSetUserAndPassword', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', position='Query'),
  name?: string(name='Name', position='Query'),
  notifier?: string(name='Notifier', position='Query'),
  password?: string(name='Password', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityGroup?: string(name='SecurityGroup', position='Query'),
  selectedZones?: string(name='SelectedZones', position='Query'),
  serviceVersion?: string(name='ServiceVersion', position='Query'),
  userPhoneNum?: string(name='UserPhoneNum', position='Query'),
  username?: string(name='Username', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAllowedIpRequest {
  allowedListIp: string(name='AllowedListIp', position='Query'),
  allowedListType: string(name='AllowedListType', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  portRange: string(name='PortRange', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  updateType: string(name='UpdateType', position='Query'),
}

model UpdateAllowedIpResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAllowedIpResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAllowedIpResponseBody(name='body'),
}

async function updateAllowedIp(request: UpdateAllowedIpRequest): UpdateAllowedIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAllowedIp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceConfigRequest {
  config: string(name='Config', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpdateInstanceConfigResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceConfigResponseBody(name='body'),
}

async function updateInstanceConfig(request: UpdateInstanceConfigRequest): UpdateInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceVersionRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  targetVersion: string(name='TargetVersion', position='Query'),
}

model UpgradeInstanceVersionResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradeInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceVersionResponseBody(name='body'),
}

async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstanceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePostPayOrderRequest {
  diskSize: int32(name='DiskSize', position='Query'),
  eipMax?: int32(name='EipMax', position='Query'),
  eipModel?: boolean(name='EipModel', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ioMax?: int32(name='IoMax', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', position='Query'),
  partitionNum?: int32(name='PartitionNum', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  specType?: string(name='SpecType', position='Query'),
  topicQuota?: int32(name='TopicQuota', position='Query'),
}

model UpgradePostPayOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradePostPayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradePostPayOrderResponseBody(name='body'),
}

async function upgradePostPayOrder(request: UpgradePostPayOrderRequest): UpgradePostPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePostPayOrder', 'POST', '/', 'json', false, 'json', request);
}

model UpgradePrePayOrderRequest {
  diskSize: int32(name='DiskSize', position='Query'),
  eipMax?: int32(name='EipMax', position='Query'),
  eipModel?: boolean(name='EipModel', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ioMax?: int32(name='IoMax', position='Query'),
  ioMaxSpec?: string(name='IoMaxSpec', position='Query'),
  partitionNum?: int32(name='PartitionNum', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  specType?: string(name='SpecType', position='Query'),
  topicQuota?: int32(name='TopicQuota', position='Query'),
}

model UpgradePrePayOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradePrePayOrderResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradePrePayOrderResponseBody(name='body'),
}

async function upgradePrePayOrder(request: UpgradePrePayOrderRequest): UpgradePrePayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradePrePayOrder', 'POST', '/', 'json', false, 'json', request);
}

